{"task": "Evolutionary_algorithm", "blocks": [{"lang": "8th", "loc": 95, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ RosettaCode challenge http://rosettacode.org/wiki/Evolutionary_algorithm<br/>\\ Responding to the criticism that the implementation was too directed, this<br/>\\ version does a completely random selection of chars to mutate<br/>\u00a0<br/>var gen<br/>\\ Convert a string of valid chars into an array of char-strings:<br/>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \" null s:/ var, valid-chars<br/>\u00a0<br/>\\ How many mutations each generation will handle; the larger, the slower each<br/>\\ generation but the fewer generations required:<br/>300 var, #mutations<br/>23 var, mutability<br/>\u00a0<br/>: get-random-char<br/>  valid-chars @<br/>  27 rand-pcg n:abs swap n:mod<br/>  a:@ nip\u00a0;<br/>\u00a0<br/>: mutate-string \\ s -- s'<br/>  ( <br/>    rand-pcg mutability @ n:mod not if<br/>     drop get-random-char<br/>    then<br/>  ) s:map\u00a0;<br/>\u00a0<br/>: mutate \\ s n -- a <br/>  \\ iterate 'n' times over the initial string, mutating it each time<br/>  \\ save the original string, as the best of the previous generation:<br/>  &gt;r [] over a:push swap<br/>  (<br/>  tuck mutate-string<br/>  a:push swap<br/>  ) r&gt; times drop\u00a0;<br/>\u00a0<br/>\\ compute Hamming distance of two strings:<br/>: hamming \\ s1 s2 -- n<br/>  0 &gt;r<br/>  s:len n:1-<br/>  (<br/>   2 pick over s:@ nip<br/>   2 pick rot s:@ nip<br/>   n:- n:abs r&gt; n:+ &gt;r<br/>  ) 0 rot loop<br/>  2drop r&gt;\u00a0;<br/>\u00a0<br/>var best<br/>: fitness-check \\ s a -- s t<br/>  10000 &gt;r<br/>  -1 best\u00a0!<br/>  (<br/>   \\ ix s ix s'<br/>    2 pick hamming <br/>   <a class=\"__cf_email__\" data-cfemail=\"8cfecc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <br/>   over n:&gt; if<br/>      rdrop &gt;r<br/>      best\u00a0!<br/>   else<br/>      2drop<br/>   then<br/>  )<br/>  a:each<br/>  rdrop best @  a:@ nip \u00a0;<br/>\u00a0<br/>\u00a0<br/>: add-random-char \\ s -- s'<br/>  get-random-char s:+\u00a0;<br/>\u00a0<br/>\\ take the target and make a random string of the same length<br/>: initial-string \\ s -- s<br/>  s:len \"\" swap  <br/>  ' add-random-char<br/>  swap times\u00a0;<br/>\u00a0<br/>: done? \\ s1 s2 -- s1 s2 | bye<br/>  2dup s:= if <br/>   \"Done in \" . gen @ . \" generations\" . cr\u00a0;;;<br/>  then\u00a0;<br/>\u00a0<br/>: setup-random<br/>  rand rand rand-pcg-seed\u00a0;<br/>\u00a0<br/>: evolve <br/>  1 gen n:+!<br/>  \\ create an array of #mutations strings mutated from the random string, drop the random<br/>  #mutations @ mutate  <br/>  \\ iterate over the array and pick the closest fit:<br/>  fitness-check <br/>  \\ show this generation's best match:<br/>  dup . cr <br/>  \\ check for end condition and continue if not done:<br/>  done? evolve\u00a0;<br/>\u00a0<br/>\"METHINKS IT IS LIKE A WEASEL\"  <br/>setup-random initial-string evolve bye</pre>"}, {"lang": "Ada", "loc": 124, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Maps</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Evolution <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"co1\">-- only upper case characters allowed, and space, which uses '@' in</span><br/>   <span class=\"co1\">-- internal representation (allowing subtype of Character).</span><br/>   <span class=\"kw3\">subtype</span> DNA_Char <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> '@' .. 'Z';<br/>\u00a0<br/>   <span class=\"co1\">-- DNA string is as long as target string.</span><br/>   <span class=\"kw3\">subtype</span> DNA_String <span class=\"kw1\">is</span> String <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">28</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- target string translated to DNA_Char string</span><br/>   Target\u00a0: <span class=\"kw3\">constant</span> DNA_String\u00a0:= <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"4b060e1f03020500180b021f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"1f564c5f5356545a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"de9f9e899b9f8d9b92\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- calculate the 'closeness' to the target DNA.</span><br/>   <span class=\"co1\">-- it returns a number &gt;= 0 that describes how many chars are correct.</span><br/>   <span class=\"co1\">-- can be improved much to make evolution better, but keep simple for</span><br/>   <span class=\"co1\">-- this example.</span><br/>   <span class=\"kw3\">function</span> Fitness <span class=\"br0\">(</span>DNA\u00a0: DNA_String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Result\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Position <span class=\"kw3\">in</span> DNA'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> DNA <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> = Target <span class=\"br0\">(</span>Position<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Result\u00a0:= Result + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Fitness;<br/>\u00a0<br/>   <span class=\"co1\">-- output the DNA using the mapping</span><br/>   <span class=\"kw3\">procedure</span> Output_DNA <span class=\"br0\">(</span>DNA\u00a0: DNA_String; Prefix\u00a0: String\u00a0:= <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Maps</span>;<br/>      Output_Map\u00a0: Character_Mapping;<br/>   <span class=\"kw1\">begin</span><br/>      Output_Map\u00a0:= To_Mapping<br/>        <span class=\"br0\">(</span>From =&gt; To_Sequence <span class=\"br0\">(</span>To_Set <span class=\"br0\">(</span><span class=\"br0\">(</span>'@'<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>         To   =&gt; To_Sequence <span class=\"br0\">(</span>To_Set <span class=\"br0\">(</span><span class=\"br0\">(</span>' '<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Prefix<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>.<span class=\"me1\">Translate</span> <span class=\"br0\">(</span>DNA, Output_Map<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\", fitness: \"</span> &amp; Integer'Image <span class=\"br0\">(</span>Fitness <span class=\"br0\">(</span>DNA<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Output_DNA;<br/>\u00a0<br/>   <span class=\"co1\">-- DNA_Char is a discrete type, use Ada RNG</span><br/>   <span class=\"kw3\">package</span> Random_Char <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span> <span class=\"br0\">(</span>DNA_Char<span class=\"br0\">)</span>;<br/>   DNA_Generator\u00a0: Random_Char.<span class=\"me1\">Generator</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- need generator for floating type, too</span><br/>   Float_Generator\u00a0: Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>.<span class=\"me1\">Generator</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- returns a mutated copy of the parent, applying the given mutation rate</span><br/>   <span class=\"kw3\">function</span> Mutate <span class=\"br0\">(</span>Parent       \u00a0: DNA_String;<br/>                    Mutation_Rate\u00a0: Float<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span>          DNA_String<br/>   <span class=\"kw1\">is</span><br/>      Result\u00a0: DNA_String\u00a0:= Parent;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Position <span class=\"kw3\">in</span> Result'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>.<span class=\"me1\">Random</span> <span class=\"br0\">(</span>Float_Generator<span class=\"br0\">)</span> &lt;= Mutation_Rate<br/>         <span class=\"kw1\">then</span><br/>            Result <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>\u00a0:= Random_Char.<span class=\"me1\">Random</span> <span class=\"br0\">(</span>DNA_Generator<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Mutate;<br/>\u00a0<br/>   <span class=\"co1\">-- genetic algorithm to evolve the string</span><br/>   <span class=\"co1\">-- could be made a function returning the final string</span><br/>   <span class=\"kw3\">procedure</span> Evolve <span class=\"br0\">(</span>Child_Count  \u00a0: Positive\u00a0:= <span class=\"nu0\">100</span>;<br/>                     Mutation_Rate\u00a0: Float   \u00a0:= <span class=\"nu0\">0.2</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> Child_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Child_Count</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> DNA_String;<br/>\u00a0<br/>      <span class=\"co1\">-- determine the fittest of the candidates</span><br/>      <span class=\"kw3\">function</span> Fittest <span class=\"br0\">(</span>Candidates\u00a0: Child_Array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> DNA_String <span class=\"kw1\">is</span><br/>         The_Fittest\u00a0: DNA_String\u00a0:= Candidates <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> Candidate <span class=\"kw3\">in</span> Candidates'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">if</span> Fitness <span class=\"br0\">(</span>Candidates <span class=\"br0\">(</span>Candidate<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Fitness <span class=\"br0\">(</span>The_Fittest<span class=\"br0\">)</span><br/>            <span class=\"kw1\">then</span><br/>               The_Fittest\u00a0:= Candidates <span class=\"br0\">(</span>Candidate<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">return</span> The_Fittest;<br/>      <span class=\"kw1\">end</span> Fittest;<br/>\u00a0<br/>      Parent, Next_Parent\u00a0: DNA_String;<br/>      Children           \u00a0: Child_Array;<br/>      Loop_Counter       \u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- initialize Parent</span><br/>      <span class=\"kw1\">for</span> Position <span class=\"kw3\">in</span> Parent'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Parent <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>\u00a0:= Random_Char.<span class=\"me1\">Random</span> <span class=\"br0\">(</span>DNA_Generator<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Output_DNA <span class=\"br0\">(</span>Parent, <span class=\"st0\">\"First: \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">while</span> Parent /= Target <span class=\"kw1\">loop</span><br/>         <span class=\"co1\">-- mutation loop</span><br/>         <span class=\"kw1\">for</span> Child <span class=\"kw3\">in</span> Children'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            Children <span class=\"br0\">(</span>Child<span class=\"br0\">)</span>\u00a0:= Mutate <span class=\"br0\">(</span>Parent, Mutation_Rate<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         Next_Parent\u00a0:= Fittest <span class=\"br0\">(</span>Children<span class=\"br0\">)</span>;<br/>         <span class=\"co1\">-- don't allow weaker children as the parent</span><br/>         <span class=\"kw1\">if</span> Fitness <span class=\"br0\">(</span>Next_Parent<span class=\"br0\">)</span> &gt; Fitness <span class=\"br0\">(</span>Parent<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Parent\u00a0:= Next_Parent;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"co1\">-- output every 20th generation</span><br/>         <span class=\"kw1\">if</span> Loop_Counter <span class=\"kw2\">mod</span> <span class=\"nu0\">20</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Output_DNA <span class=\"br0\">(</span>Parent, Integer'Image <span class=\"br0\">(</span>Loop_Counter<span class=\"br0\">)</span> &amp; <span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Loop_Counter\u00a0:= Loop_Counter + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Output_DNA <span class=\"br0\">(</span>Parent, <span class=\"st0\">\"Final (\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Loop_Counter<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"): \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Evolve;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- initialize the random number generators</span><br/>   Random_Char.<span class=\"me1\">Reset</span> <span class=\"br0\">(</span>DNA_Generator<span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>.<span class=\"me1\">Reset</span> <span class=\"br0\">(</span>Float_Generator<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- evolve!</span><br/>   Evolve;<br/><span class=\"kw1\">end</span> Evolution;</pre>"}, {"lang": "Aime", "loc": 68, "block": "<pre class=\"text highlighted_source\">integer<br/>fitness(data t, data b)<br/>{<br/>    integer c, f, i;<br/>\u00a0<br/>    f = 0;<br/>\u00a0<br/>    for (i, c in b) {<br/>        f += sign(t[i] ^ c);<br/>    }<br/>\u00a0<br/>    f;<br/>}<br/>\u00a0<br/>void<br/>mutate(data e, data b, data u)<br/>{<br/>    integer c;<br/>\u00a0<br/>    for (, c in b) {<br/>        e.append(drand(15)\u00a0? c\u00a0: u[drand(26)]);<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    data b, t, u;<br/>    integer f, i;<br/>\u00a0<br/>    t = \"METHINK IT IS LIKE A WEASEL\";<br/>    u = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \";<br/>\u00a0<br/>    i = ~t;<br/>    while (i) {<br/>        i -= 1;<br/>        b.append(u[drand(26)]);<br/>    }<br/>\u00a0<br/>    f = fitness(t, b);<br/>    while (f) {<br/>        data n;<br/>        integer a;<br/>\u00a0<br/>        o_form(\"/lw4/~\\n\", f, b);<br/>\u00a0<br/>        n = b;<br/>\u00a0<br/>        i = 32;<br/>        while (i) {<br/>            data c;<br/>\u00a0<br/>            i -= 1;<br/>            mutate(c, b, u);<br/>            a = fitness(t, c);<br/>            if (a &lt; f) {<br/>                f = a;<br/>                n = c;<br/>            }<br/>        }<br/>\u00a0<br/>        b = n;<br/>    }<br/>\u00a0<br/>    o_form(\"/lw4/~\\n\", f, b);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 70, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">STRING</span> target <span class=\"sy1\">:=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> fitness <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> tstrg<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> tstrg <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> tstrg <span class=\"kw2\">DO</span><br/>      sum <span class=\"sy1\">+:=</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> target<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> tstrg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"coMULTI\"># fitness\u00a0:= #</span> <span class=\"re1\">100.0</span><span class=\"sy1\">*</span><span class=\"kw24\">exp</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>sum<span class=\"sy1\">/</span><span class=\"re1\">10.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> rand char <span class=\"sy1\">=</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   <span class=\"coMULTI\">#STATIC#</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> ucchars <span class=\"sy1\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><span class=\"sy1\">;</span><br/>   <span class=\"coMULTI\"># rand char\u00a0:= #</span> ucchars<span class=\"br0\">[</span><span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span>random<span class=\"sy1\">*</span><span class=\"kw8\">UPB</span> ucchars<span class=\"br0\">)</span><span class=\"sy1\">+</span>1<span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> mutate <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> kid<span class=\"sy1\">,</span> parent<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> mutate rate<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> parent <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> parent <span class=\"kw2\">DO</span><br/>      kid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> random <span class=\"sy1\">&lt;</span> mutate rate <span class=\"kw2\">THEN</span> rand char <span class=\"kw2\">ELSE</span> parent<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> kewe <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> parent<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> iters<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> fits<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> mrate<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"#\"</span>4d<span class=\"st0\">\" fitness: \"</span>g<span class=\"br0\">(</span><span class=\"sy1\">-</span>6<span class=\"sy1\">,</span>2<span class=\"br0\">)</span><span class=\"st0\">\"% \"</span>g<span class=\"br0\">(</span><span class=\"sy1\">-</span>6<span class=\"sy1\">,</span>4<span class=\"br0\">)</span><span class=\"st0\">\" '\"</span>g<span class=\"st0\">\"'\"</span>l$<span class=\"sy1\">,</span> iters<span class=\"sy1\">,</span> fits<span class=\"sy1\">,</span> mrate<span class=\"sy1\">,</span> parent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> evolve <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"kw8\">UPB</span> target<span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> parent<span class=\"sy1\">;</span><br/>   <span class=\"kw3\">REAL</span> fits<span class=\"sy1\">;</span><br/>   <span class=\"br0\">[</span>100<span class=\"br0\">]</span><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"kw8\">UPB</span> target<span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> kid<span class=\"sy1\">;</span><br/>   <span class=\"kw3\">INT</span> iters <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   kid<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> kid<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">LOC</span><span class=\"br0\">[</span><span class=\"kw8\">UPB</span> target<span class=\"br0\">]</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">REAL</span> mutate rate<span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"coMULTI\">#  initialize  #</span>   <br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> parent <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> parent <span class=\"kw2\">DO</span><br/>      parent<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> rand char<br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   fits <span class=\"sy1\">:=</span> fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">WHILE</span> fits <span class=\"sy1\">&lt;</span> <span class=\"re1\">100.0</span> <span class=\"kw2\">DO</span><br/>      <span class=\"kw3\">INT</span> j<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">REAL</span> kf<span class=\"sy1\">;</span><br/>      mutate rate <span class=\"sy1\">:=</span> <span class=\"re1\">1.0</span>  <span class=\"sy1\">-</span> <span class=\"kw24\">exp</span><span class=\"br0\">(</span><span class=\"sy1\">-</span> <span class=\"br0\">(</span><span class=\"re1\">100.0</span> <span class=\"sy1\">-</span> fits<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"re1\">400.0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> kid <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> kid <span class=\"kw2\">DO</span><br/>         mutate<span class=\"br0\">(</span>kid<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">,</span> parent<span class=\"sy1\">,</span> mutate rate<span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> kid <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> kid <span class=\"kw2\">DO</span><br/>         kf <span class=\"sy1\">:=</span> fitness<span class=\"br0\">(</span>kid<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">IF</span> fits <span class=\"sy1\">&lt;</span> kf <span class=\"kw2\">THEN</span><br/>            fits <span class=\"sy1\">:=</span> kf<span class=\"sy1\">;</span><br/>            parent <span class=\"sy1\">:=</span> kid<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>         <span class=\"kw2\">FI</span><br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> iters <span class=\"kw12\">MOD</span> 100 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>         kewe<span class=\"br0\">(</span> parent<span class=\"sy1\">,</span> iters<span class=\"sy1\">,</span> fits<span class=\"sy1\">,</span> mutate rate <span class=\"br0\">)</span><br/>      <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      iters<span class=\"sy1\">+:=</span>1<br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   kewe<span class=\"br0\">(</span> parent<span class=\"sy1\">,</span> iters<span class=\"sy1\">,</span> fits<span class=\"sy1\">,</span> mutate rate <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   evolve<br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 56, "block": "<pre class=\"autohotkey highlighted_source\">output <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>target <span class=\"sy0\">:=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>targetLen <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>target<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><br/>\tpossibilities_<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"co1\">; A-Z</span><br/>possibilities_27  <span class=\"sy0\">:=</span> <span class=\"st0\">\" \"</span><br/>C <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/>parent <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%targetLen%</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> randomNum<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><br/>  parent <span class=\"sy0\">.=</span> possibilities_<span class=\"re0\">%randomNum%</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>target <span class=\"sy0\">=</span> parent<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\toutput <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\": \"</span> parent <span class=\"st0\">\", fitness: \"</span> fitness<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> target<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>\tbestFit <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%C%</span><br/>\t  <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fitness <span class=\"sy0\">:=</span> fitness<span class=\"br0\">(</span>spawn <span class=\"sy0\">:=</span> mutate<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy0\">,</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> bestFit<span class=\"br0\">)</span><br/>\t\t  bestSpawn <span class=\"sy0\">:=</span> spawn <span class=\"sy0\">,</span> bestFit <span class=\"sy0\">:=</span> fitness<br/>\tparent <span class=\"sy0\">:=</span> bestFit <span class=\"sy0\">&gt;</span> fitness<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> target<span class=\"br0\">)</span>\u00a0? bestSpawn\u00a0: parent<br/>\titer <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/><span class=\"br0\">}</span><br/>output <span class=\"sy0\">.=</span> parent <span class=\"st0\">\", \"</span> iter<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% output<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/>mutate<span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tlocal\toutput<span class=\"sy0\">,</span> replaceChar<span class=\"sy0\">,</span> newChar<br/>\toutput <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%targetLen%</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> replaceChar<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>replaceChar\u00a0!<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\toutput <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> newChar<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><br/>\t\t\toutput <span class=\"sy0\">.=</span> possibilities_<span class=\"re0\">%newChar%</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> output<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fitness<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\ttotalFit <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>target<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttotalFit<span class=\"sy0\">++</span><br/>\t<span class=\"kw1\">Return</span> totalFit<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 65, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\">#!/bin/awk -f</span><br/><span class=\"kw6\">function</span> randchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/><span class=\"kw6\">return</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>charset,randint<span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>charset<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> mutate<span class=\"br0\">(</span>gene,rate    ,l,newgene<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>newgene = <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>l=<span class=\"nu0\">1</span>; l <span class=\"sy2\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy3\">+</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>gene<span class=\"br0\">)</span>; l<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">&lt;</span> rate<span class=\"br0\">)</span><br/>   newgene = newgene randchar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>   newgene = newgene <span class=\"kw4\">substr</span><span class=\"br0\">(</span>gene,l,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">return</span> newgene<br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> fitness<span class=\"br0\">(</span>gene,target  ,k,fit<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>fit = <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>k=<span class=\"nu0\">1</span>;k<span class=\"sy2\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy3\">+</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>gene<span class=\"br0\">)</span>;k<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>gene,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"kw4\">substr</span><span class=\"br0\">(</span>target,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> fit = fit <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">return</span> fit<br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> randint<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/><span class=\"kw6\">return</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>n <span class=\"sy3\">*</span> <span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> evolve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>     maxfit = fitness<span class=\"br0\">(</span>parent,target<span class=\"br0\">)</span><br/>     oldfit = maxfit<br/>     maxj = <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j <span class=\"sy2\">&lt;</span> D; j<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         child<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = mutate<span class=\"br0\">(</span>parent,mutrate<span class=\"br0\">)</span><br/>         fit<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = fitness<span class=\"br0\">(</span>child<span class=\"br0\">[</span>j<span class=\"br0\">]</span>,target<span class=\"br0\">)</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fit<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy2\">&gt;</span> maxfit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxfit = fit<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            maxj = j<br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maxfit <span class=\"sy2\">&gt;</span> oldfit<span class=\"br0\">)</span> parent = child<span class=\"br0\">[</span>maxj<span class=\"br0\">]</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><br/>target = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>charset = <span class=\"st0\">\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><br/>mutrate = <span class=\"nu0\">0.10</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">ARGC</span> <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> mutrate = <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>lenset = <span class=\"kw4\">length</span><span class=\"br0\">(</span>charset<span class=\"br0\">)</span><br/>C = <span class=\"nu0\">100</span><br/>D = C <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>parent = <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j <span class=\"sy2\">&lt;</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span>; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     parent = parent randchar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">}</span><br/><span class=\"kw5\">print</span> <span class=\"st0\">\"target: \"</span> target<br/><span class=\"kw5\">print</span> <span class=\"st0\">\"fitness of target: \"</span> fitness<span class=\"br0\">(</span>target,target<span class=\"br0\">)</span><br/><span class=\"kw5\">print</span> <span class=\"st0\">\"initial parent: \"</span> parent<br/>gens = <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>parent <span class=\"sy2\">!=</span> target<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      evolve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      gens = gens <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gens <span class=\"sy3\">%</span> <span class=\"nu0\">10</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"after \"</span> gens <span class=\"st0\">\" generations,\"</span>,<span class=\"st0\">\"new parent: \"</span> parent,<span class=\"st0\">\" with fitness: \"</span> fitness<span class=\"br0\">(</span>parent,target<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw5\">print</span> <span class=\"st0\">\"after \"</span> gens <span class=\"st0\">\" generations,\"</span>,<span class=\"st0\">\" evolved parent: \"</span> parent<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 90, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> target=M E T H I N K S <span class=\"sy0\">@</span> I T <span class=\"sy0\">@</span> I S <span class=\"sy0\">@</span> L I K E <span class=\"sy0\">@</span> A <span class=\"sy0\">@</span> W E A S E L<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> chars=A B C D E F G H I J K L M N O P Q R S T U V W X Y Z <span class=\"sy0\">@</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">target</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> target<span class=\"sy0\">!</span><span class=\"re2\">tempcount</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:parent<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>  <span class=\"sy0\">%</span><span class=\"re3\">target</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>  --------------------------------------------------------<br/>\u00a0<br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:fitness parent<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> currentfit=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">currentfit</span><span class=\"sy0\">%</span>==28 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> end<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">parent</span><span class=\"sy0\">%</span> - <span class=\"sy0\">%</span><span class=\"re3\">currentfit</span><span class=\"sy0\">%</span> [<span class=\"sy0\">%</span><span class=\"re3\">attempts</span><span class=\"sy0\">%</span>]<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> attempts=0<br/>\u00a0<br/>:<span class=\"re0\">innerloop</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a attempts+=1<br/><a href=\"http://www.ss64.com/nt/title.html\"><span class=\"kw3\">title</span></a> Attemps - <span class=\"sy0\">%</span><span class=\"re3\">attempts</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:mutate <span class=\"sy0\">%</span><span class=\"re3\">parent</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:fitness tempparent<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> newfit=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">newfit</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/gtr.html\"><span class=\"kw2\">gtr</span></a> <span class=\"sy0\">%</span><span class=\"re3\">currentfit</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=0<br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"parent=\"<br/>  <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">tempparent</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> parent<span class=\"sy0\">!</span><span class=\"re2\">tempcount</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> parent=<span class=\"sy0\">!</span><span class=\"re2\">parent</span><span class=\"sy0\">!</span> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>  <span class=\"sy0\">)</span><br/>  <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> innerloop<br/>\u00a0<br/>:<span class=\"re0\">end</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">parent</span><span class=\"sy0\">%</span> - <span class=\"sy0\">%</span><span class=\"re3\">currentfit</span><span class=\"sy0\">%</span> [<span class=\"sy0\">%</span><span class=\"re3\">attempts</span><span class=\"sy0\">%</span>]<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Done.<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">parent</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"parent=\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,28<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a charchosen=<span class=\"sy0\">!</span><span class=\"re2\">random</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 27 + 1<br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=0<br/>  <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">chars</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/>    <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">charchosen</span><span class=\"sy0\">!</span><span class=\"re2\">==</span><span class=\"sy0\">!</span><span class=\"re2\">tempcount</span><span class=\"sy0\">!</span> <span class=\"sy0\">(</span><br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> parent<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=<span class=\"sy0\">%%</span><span class=\"re3\">j</span><br/>      <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> parent=<span class=\"sy0\">!</span><span class=\"re2\">parent</span><span class=\"sy0\">!</span> <span class=\"sy0\">%%</span><span class=\"re3\">j</span><br/>    <span class=\"sy0\">)</span><br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">fitness</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> fitness=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> array=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,28<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">array</span><span class=\"sy0\">%%%</span><span class=\"re3\">i</span></span><span class=\"sy0\">!</span><span class=\"re2\">==</span><span class=\"sy0\">!</span><span class=\"re2\">target%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a fitness+=1<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">fitness</span><span class=\"sy0\">%</span><br/>\u00a0<br/>:<span class=\"re0\">mutate</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> returnarray=tempparent<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">returnarray</span><span class=\"sy0\">%</span>=\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">*</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">returnarray</span><span class=\"sy0\">%!</span><span class=\"re2\">tempcount</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">returnarray</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">returnarray</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tomutate=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 28 + 1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a mutateto=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 27 + 1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">chars</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">mutateto</span><span class=\"sy0\">%</span>==<span class=\"sy0\">!</span><span class=\"re2\">tempcount</span><span class=\"sy0\">!</span> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">returnarray</span><span class=\"sy0\">%!</span><span class=\"re2\">tomutate</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">returnarray</span><span class=\"sy0\">%</span>=\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,28<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">returnarray</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">returnarray</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">returnarray</span><span class=\"sy0\">%%%</span><span class=\"re3\">i</span></span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 39, "block": "<pre class=\"text highlighted_source\">      target$ = \"METHINKS IT IS LIKE A WEASEL\"<br/>      parent$ = \"IU RFSGJABGOLYWF XSMFXNIABKT\"<br/>      mutation_rate = 0.5<br/>      children% = 10<br/>\u00a0<br/>      DIM child$(children%)<br/>\u00a0<br/>      REPEAT<br/>        bestfitness = 0<br/>        bestindex% = 0<br/>        FOR index% = 1 TO children%<br/>          child$(index%) = FNmutate(parent$, mutation_rate)<br/>          fitness = FNfitness(target$, child$(index%))<br/>          IF fitness &gt; bestfitness THEN<br/>            bestfitness = fitness<br/>            bestindex% = index%<br/>          ENDIF<br/>        NEXT index%<br/>\u00a0<br/>        parent$ = child$(bestindex%)<br/>        PRINT parent$<br/>      UNTIL parent$ = target$<br/>      END<br/>\u00a0<br/>      DEF FNfitness(text$, ref$)<br/>      LOCAL I%, F%<br/>      FOR I% = 1 TO LEN(text$)<br/>        IF MID$(text$, I%, 1) = MID$(ref$, I%, 1) THEN F% += 1<br/>      NEXT<br/>      = F% / LEN(text$)<br/>\u00a0<br/>      DEF FNmutate(text$, rate)<br/>      LOCAL C%<br/>      IF rate &gt; RND(1) THEN<br/>        C% = 63+RND(27)<br/>        IF C% = 64 C% = 32<br/>        MID$(text$, RND(LEN(text$)), 1) = CHR$(C%)<br/>      ENDIF<br/>      = text$</pre>"}, {"lang": "C", "loc": 67, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> target<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> tbl<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define CHOICE (sizeof(tbl) - 1)</span><br/><span class=\"co2\">#define MUTATE 15</span><br/><span class=\"co2\">#define COPIES 30</span><br/>\u00a0<br/><span class=\"coMULTI\">/* returns random integer from 0 to n - 1 */</span><br/><span class=\"kw4\">int</span> irand<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> rand_max <span class=\"sy0\">=</span> RAND_MAX <span class=\"sy0\">-</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> rand_max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> <span class=\"br0\">(</span>rand_max <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* number of different chars between a and b */</span><br/><span class=\"kw4\">int</span> unfitness<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tsum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* each char of b has 1/MUTATE chance of differing from a */</span><br/><span class=\"kw4\">void</span> mutate<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> irand<span class=\"br0\">(</span>MUTATE<span class=\"br0\">)</span> <span class=\"sy0\">?</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:</span> tbl<span class=\"br0\">[</span>irand<span class=\"br0\">(</span>CHOICE<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> best_i<span class=\"sy0\">,</span> unfit<span class=\"sy0\">,</span> best<span class=\"sy0\">,</span> iters <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> specimen<span class=\"br0\">[</span>COPIES<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* init rand string */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> target<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tspecimen<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tbl<span class=\"br0\">[</span>irand<span class=\"br0\">(</span>CHOICE<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tspecimen<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> COPIES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tmutate<span class=\"br0\">(</span>specimen<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> specimen<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* find best fitting string */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>best_i <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> COPIES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tunfit <span class=\"sy0\">=</span> unfitness<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> specimen<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>unfit <span class=\"sy0\">&lt;</span> best <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tbest <span class=\"sy0\">=</span> unfit<span class=\"sy0\">;</span><br/>\t\t\t\tbest_i <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>best_i<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>specimen<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> specimen<span class=\"br0\">[</span>best_i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"iter\u00a0%d, score\u00a0%d:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> iters<span class=\"sy0\">++,</span> best<span class=\"sy0\">,</span> specimen<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>best<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 110, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cassert&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> allowed_chars <span class=\"sy1\">=</span> <span class=\"st0\">\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// class selection contains the fitness function, encapsulates the</span><br/><span class=\"co1\">// target string and allows access to it's length. The class is only</span><br/><span class=\"co1\">// there for access control, therefore everything is static. The</span><br/><span class=\"co1\">// string target isn't defined in the function because that way the</span><br/><span class=\"co1\">// length couldn't be accessed outside.</span><br/><span class=\"kw2\">class</span> selection<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"co1\">// this function returns 0 for the destination string, and a</span><br/>  <span class=\"co1\">// negative fitness for a non-matching string. The fitness is</span><br/>  <span class=\"co1\">// calculated as the negated sum of the circular distances of the</span><br/>  <span class=\"co1\">// string letters with the destination letters.</span><br/>  <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> fitness<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> candidate<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">assert</span><span class=\"br0\">(</span>target.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> candidate.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> fitness_so_far <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> target.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> target_pos <span class=\"sy1\">=</span> allowed_chars.<span class=\"me1\">find</span><span class=\"br0\">(</span>target<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw4\">int</span> candidate_pos <span class=\"sy1\">=</span> allowed_chars.<span class=\"me1\">find</span><span class=\"br0\">(</span>candidate<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw4\">int</span> diff <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>target_pos <span class=\"sy2\">-</span> candidate_pos<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      fitness_so_far <span class=\"sy2\">-</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">min</span><span class=\"br0\">(</span>diff, <span class=\"kw4\">int</span><span class=\"br0\">(</span>allowed_chars.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> diff<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> fitness_so_far<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// get the target string length</span><br/>  <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> target_length<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> target.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> target<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> selection<span class=\"sy4\">::</span><span class=\"me2\">target</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// helper function: cyclically move a character through allowed_chars</span><br/><span class=\"kw4\">void</span> move_char<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy3\">&amp;</span> c, <span class=\"kw4\">int</span> distance<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>distance <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    distance <span class=\"sy2\">+</span><span class=\"sy1\">=</span> allowed_chars.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> char_pos <span class=\"sy1\">=</span> allowed_chars.<span class=\"me1\">find</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  c <span class=\"sy1\">=</span> allowed_chars<span class=\"br0\">[</span><span class=\"br0\">(</span>char_pos <span class=\"sy2\">+</span> distance<span class=\"br0\">)</span> <span class=\"sy2\">%</span> allowed_chars.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// mutate the string by moving the characters by a small random</span><br/><span class=\"co1\">// distance with the given probability</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> mutate<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> parent, <span class=\"kw4\">double</span> mutation_rate<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> parent.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"br0\">(</span><span class=\"kw2\">RAND_MAX</span> <span class=\"sy2\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> mutation_rate<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> distance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">3</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">%</span><span class=\"nu19\">2</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        move_char<span class=\"br0\">(</span>parent<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, distance<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span><br/>        move_char<span class=\"br0\">(</span>parent<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"sy2\">-</span>distance<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> parent<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// helper function: tell if the first argument is less fit than the</span><br/><span class=\"co1\">// second</span><br/><span class=\"kw4\">bool</span> less_fit<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> s1, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> s2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> selection<span class=\"sy4\">::</span><span class=\"me2\">fitness</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> selection<span class=\"sy4\">::</span><span class=\"me2\">fitness</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> <span class=\"kw4\">const</span> C <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> parent<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> selection<span class=\"sy4\">::</span><span class=\"me2\">target_length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    parent <span class=\"sy2\">+</span><span class=\"sy1\">=</span> allowed_chars<span class=\"br0\">[</span>std<span class=\"sy4\">::</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> allowed_chars.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> <span class=\"kw4\">const</span> initial_fitness <span class=\"sy1\">=</span> selection<span class=\"sy4\">::</span><span class=\"me2\">fitness</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> fitness <span class=\"sy1\">=</span> initial_fitness<span class=\"sy4\">;</span><br/>      fitness <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>      fitness <span class=\"sy1\">=</span> selection<span class=\"sy4\">::</span><span class=\"me2\">fitness</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> parent <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">&lt;&lt;</span> fitness <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">double</span> <span class=\"kw4\">const</span> mutation_rate <span class=\"sy1\">=</span> <span class=\"nu16\">0.02</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span><span class=\"nu16\">0.9</span><span class=\"sy2\">*</span>fitness<span class=\"br0\">)</span><span class=\"sy2\">/</span>initial_fitness<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> childs<span class=\"sy4\">;</span><br/>    childs.<span class=\"me1\">reserve</span><span class=\"br0\">(</span>C<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    childs.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> C<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>      childs.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>mutate<span class=\"br0\">(</span>parent, mutation_rate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    parent <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>std<span class=\"sy4\">::</span><span class=\"me2\">max_element</span><span class=\"br0\">(</span>childs.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, childs.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, less_fit<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"final string: \"</span> <span class=\"sy1\">&lt;&lt;</span> parent <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 54, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> Random Rng <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">.</span><span class=\"me1\">Ticks</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">char</span> NextCharacter<span class=\"br0\">(</span><span class=\"kw1\">this</span> Random self<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> AllowedChars <span class=\"sy0\">=</span> <span class=\"st0\">\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> AllowedChars<span class=\"br0\">[</span>self<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> AllowedChars<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> NextString<span class=\"br0\">(</span><span class=\"kw1\">this</span> Random self, <span class=\"kw4\">int</span> length<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, length<span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> Rng<span class=\"sy0\">.</span><span class=\"me1\">NextCharacter</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Fitness<span class=\"br0\">(</span><span class=\"kw4\">string</span> target, <span class=\"kw4\">string</span> current<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> target<span class=\"sy0\">.</span><span class=\"me1\">Zip</span><span class=\"br0\">(</span>current, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">==</span> b <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Mutate<span class=\"br0\">(</span><span class=\"kw4\">string</span> current, <span class=\"kw4\">double</span> rate<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, <span class=\"kw1\">from</span> c <span class=\"kw1\">in</span> current<br/>               <span class=\"kw1\">select</span> Rng<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> rate <span class=\"sy0\">?</span> Rng<span class=\"sy0\">.</span><span class=\"me1\">NextCharacter</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> C <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> P <span class=\"sy0\">=</span> <span class=\"nu0\">0.05</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Start with a random string the same length as the target.</span><br/>        <span class=\"kw4\">string</span> parent <span class=\"sy0\">=</span> Rng<span class=\"sy0\">.</span><span class=\"me1\">NextString</span><span class=\"br0\">(</span>target<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"START:       {0,20} fitness: {1}\"</span>, <br/>            parent, Fitness<span class=\"br0\">(</span>target, parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>parent <span class=\"sy0\">!=</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Create C mutated strings + the current parent.</span><br/>            <span class=\"kw1\">var</span> candidates <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, C <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> Mutate<span class=\"br0\">(</span>parent, P<span class=\"br0\">)</span> <span class=\"sy0\">:</span> parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// select the fittest</span><br/>            parent <span class=\"sy0\">=</span> candidates<span class=\"sy0\">.</span><span class=\"me1\">OrderByDescending</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> Fitness<span class=\"br0\">(</span>target, c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"sy0\">++</span>i<span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"     #{0,6} {1,20} fitness: {2}\"</span>, <br/>                i, parent, Fitness<span class=\"br0\">(</span>target, parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"END: #{0,6} {1,20}\"</span>, i, parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 49, "block": "<pre class=\"text highlighted_source\">import ceylon.random {<br/>\u00a0<br/>\tDefaultRandom<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>\tvalue mutationRate = 0.05;<br/>\tvalue childrenPerGeneration = 100;<br/>\tvalue target = \"METHINKS IT IS LIKE A WEASEL\";<br/>\tvalue alphabet = {' ', *('A'..'Z')};<br/>\tvalue random = DefaultRandom();<br/>\u00a0<br/>\tvalue randomLetter =&gt; random.nextElement(alphabet);<br/>\u00a0<br/>\tfunction fitness(String a, String b) =&gt;<br/>\t\t\tcount {for([c1, c2] in zipPairs(a, b)) c1 == c2};<br/>\u00a0<br/>\tfunction mutate(String string) =&gt;<br/>\t\t\tString {<br/>\t\t\t\tfor(letter in string) <br/>\t\t\t\tif(random.nextFloat() &lt; mutationRate) <br/>\t\t\t\tthen randomLetter <br/>\t\t\t\telse letter<br/>\t\t\t};<br/>\u00a0<br/>\tfunction makeCopies(String string) =&gt;<br/>\t\t\t{for(i in 1..childrenPerGeneration) mutate(string)};<br/>\u00a0<br/>\tfunction chooseFittest(String+ children) =&gt;<br/>\t\t\tchildren<br/>\t\t\t.map((String element) =&gt; element-&gt;fitness(element, target))<br/>\t\t\t.max(increasingItem)<br/>\t\t\t.key;<br/>\u00a0<br/>\tvariable value parent = String {for(i in 1..target.size) randomLetter};<br/>\tvariable value generationCount = 0;<br/>\tfunction display() =&gt; print(\"``generationCount``: ``parent``\");<br/>\u00a0<br/>\tdisplay();<br/>\twhile(parent\u00a0!= target) {<br/>\t\tparent = chooseFittest(parent, *makeCopies(parent));<br/>\t\tgenerationCount++;<br/>\t\tdisplay();<br/>\t}<br/>\u00a0<br/>\tprint(\"mutated into target in ``generationCount`` generations!\");<br/>\u00a0<br/>}</pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> c <span class=\"nu0\">100</span><span class=\"br0\">)</span>  <span class=\"co1\">;number of children in each generation</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> p <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"co1\">;mutation probability</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> target <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> tsize <span class=\"br0\">(</span><span class=\"kw1\">count</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> alphabet <span class=\"st0\">\" ABCDEFGHIJLKLMNOPQRSTUVWXYZ\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 88, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> evolutionary-<span class=\"kw3\">program</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  evolving-strings<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> target                <span class=\"kw3\">pic</span> a<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">value</span> <span class=\"st0\">'METHINKS IT IS LIKE A WEASEL'</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> parent                <span class=\"kw3\">pic</span> a<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> offspring-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">10</span> offspring         <span class=\"kw3\">pic</span> a<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">occurs</span> <span class=\"nu0\">50</span> <span class=\"kw2\">times</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  fitness-calculations<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> fitness               <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> highest-fitness       <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> fittest               <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  parameters<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> <span class=\"kw3\">character-set</span>         <span class=\"kw3\">pic</span> a<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">value</span> <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ '</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> size-of-generation    <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><br/>        <span class=\"kw3\">value</span> <span class=\"nu0\">50</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> mutation-rate         <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><br/>        <span class=\"kw3\">value</span> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  counters-and-working-variables<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> character-<span class=\"kw3\">position</span>    <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> randomization<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">10</span> random-seed       <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">10</span> random-<span class=\"kw3\">number</span>     <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">10</span> random-letter     <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> generation            <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> child                 <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> temporary-<span class=\"kw3\">string</span>      <span class=\"kw3\">pic</span> a<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>control-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">accept</span> random-seed <span class=\"kw3\">from</span> <span class=\"kw3\">time</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">random</span><span class=\"br0\">(</span>random-seed<span class=\"br0\">)</span> <span class=\"kw2\">to</span> random-<span class=\"kw3\">number</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> random-letter-paragraph<span class=\"sy0\">,</span><br/>    <span class=\"kw2\">varying</span> character-<span class=\"kw3\">position</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> character-<span class=\"kw3\">position</span> <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> <span class=\"nu0\">28</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> temporary-<span class=\"kw3\">string</span> <span class=\"kw2\">to</span> parent<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> generation<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> output-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> evolution-paragraph<span class=\"sy0\">,</span><br/>    <span class=\"kw2\">varying</span> generation <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> parent <span class=\"kw3\">is</span> <span class=\"kw3\">equal</span> <span class=\"kw2\">to</span> target<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>evolution-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> mutation-paragraph <span class=\"kw2\">varying</span> child <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> child <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> size-of-generation<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> highest-fitness<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> fittest<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> check-fitness-paragraph <span class=\"kw2\">varying</span> child <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> child <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> size-of-generation<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> offspring<span class=\"br0\">(</span>fittest<span class=\"br0\">)</span> <span class=\"kw2\">to</span> parent<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> output-paragraph<span class=\"sy0\">.</span><br/>output-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> generation <span class=\"st0\">': '</span> parent<span class=\"sy0\">.</span><br/>random-letter-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">random</span> <span class=\"kw2\">to</span> random-<span class=\"kw3\">number</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">divide</span> random-<span class=\"kw3\">number</span> <span class=\"kw3\">by</span> <span class=\"nu0\">3.80769</span> <span class=\"kw2\">giving</span> random-letter<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> random-letter<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">character-set</span><span class=\"br0\">(</span>random-letter:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">to</span> temporary-<span class=\"kw3\">string</span><span class=\"br0\">(</span>character-<span class=\"kw3\">position</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>mutation-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> parent <span class=\"kw2\">to</span> temporary-<span class=\"kw3\">string</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> character-mutation-paragraph<span class=\"sy0\">,</span><br/>    <span class=\"kw2\">varying</span> character-<span class=\"kw3\">position</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> character-<span class=\"kw3\">position</span> <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> <span class=\"nu0\">28</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> temporary-<span class=\"kw3\">string</span> <span class=\"kw2\">to</span> offspring<span class=\"br0\">(</span>child<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>character-mutation-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">random</span> <span class=\"kw2\">to</span> random-<span class=\"kw3\">number</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> random-<span class=\"kw3\">number</span> <span class=\"kw3\">is</span> <span class=\"kw3\">less</span> <span class=\"kw3\">than</span> mutation-rate<br/>    <span class=\"kw3\">then</span> <span class=\"kw2\">perform</span> random-letter-paragraph<span class=\"sy0\">.</span><br/>check-fitness-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> offspring<span class=\"br0\">(</span>child<span class=\"br0\">)</span> <span class=\"kw2\">to</span> temporary-<span class=\"kw3\">string</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> fitness-paragraph<span class=\"sy0\">.</span><br/>fitness-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> fitness<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> character-fitness-paragraph<span class=\"sy0\">,</span><br/>    <span class=\"kw2\">varying</span> character-<span class=\"kw3\">position</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> character-<span class=\"kw3\">position</span> <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> <span class=\"nu0\">28</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> fitness <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> highest-fitness<br/>    <span class=\"kw3\">then</span> <span class=\"kw2\">perform</span> fittest-paragraph<span class=\"sy0\">.</span><br/>character-fitness-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> temporary-<span class=\"kw3\">string</span><span class=\"br0\">(</span>character-<span class=\"kw3\">position</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw3\">equal</span> <span class=\"kw2\">to</span><br/>    target<span class=\"br0\">(</span>character-<span class=\"kw3\">position</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> fitness<span class=\"sy0\">.</span><br/>fittest-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> fitness <span class=\"kw2\">to</span> highest-fitness<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> child <span class=\"kw2\">to</span> fittest<span class=\"sy0\">.</span></pre>"}, {"lang": "ColdFusion", "loc": 69, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> theString <span class=\"sy0\">=</span> <span class=\"st0\">'METHINKS IT IS LIKE A WEASEL'</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfparam</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"parent\"</span> <span class=\"kw6\">default</span><span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> theAlphabet <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> fitness <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> children <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> counter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfloop</span> <span class=\"kw6\">from</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw6\">to</span><span class=\"sy0\">=</span><span class=\"st0\">\"#children#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"child\"</span><span class=\"sy0\">&gt;</span></span><br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfparam</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"child#child#\"</span> <span class=\"kw6\">default</span><span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">&gt;</span></span><br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfparam</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"fitness#child#\"</span> <span class=\"kw6\">default</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfloop</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfloop</span> condition<span class=\"sy0\">=</span><span class=\"st0\">\"fitness lt 1\"</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> oldparent <span class=\"sy0\">=</span> parent<span class=\"sy0\">&gt;</span></span><br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> counter <span class=\"sy0\">=</span> counter + <span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfloop</span> <span class=\"kw6\">from</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw6\">to</span><span class=\"sy0\">=</span><span class=\"st0\">\"#children#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"child\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thischild <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfloop</span> <span class=\"kw6\">from</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw6\">to</span><span class=\"sy0\">=</span><span class=\"st0\">\"#len(theString)#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"i\"</span><span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> Mutate <span class=\"sy0\">=</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>theAlphabet, <span class=\"kw5\">RandRange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">28</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> fitness <span class=\"kw7\">eq</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thischild <span class=\"sy0\">=</span> thischild <span class=\"sy0\">&amp;</span> mutate<span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfelse</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfif</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>theString, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw7\">eq</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>variables<span class=\"br0\">[</span><span class=\"st0\">\"child\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span>, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>          <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thischild <span class=\"sy0\">=</span> thischild <span class=\"sy0\">&amp;</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>variables<span class=\"br0\">[</span><span class=\"st0\">\"child\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span>, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfelse</span><span class=\"sy0\">&gt;</span></span>      <br/>          <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> MutateChance <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>fitness<span class=\"sy0\">&gt;</span></span><br/>          <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> MutateChanceRand <span class=\"sy0\">=</span> <span class=\"kw5\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>          <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfif</span> MutateChanceRand <span class=\"kw7\">lte</span> MutateChance<span class=\"sy0\">&gt;</span></span> <br/>            <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thischild <span class=\"sy0\">=</span> thischild <span class=\"sy0\">&amp;</span> mutate<span class=\"sy0\">&gt;</span></span><br/>          <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfelse</span><span class=\"sy0\">&gt;</span></span><br/>            <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thischild <span class=\"sy0\">=</span> thischild <span class=\"sy0\">&amp;</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>variables<span class=\"br0\">[</span><span class=\"st0\">\"child\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span>, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>          <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfif</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfif</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span> <br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfloop</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> variables<span class=\"br0\">[</span><span class=\"st0\">\"child\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span> <span class=\"sy0\">=</span> thischild<span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfloop</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfloop</span> <span class=\"kw6\">from</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw6\">to</span><span class=\"sy0\">=</span><span class=\"st0\">\"#children#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"child\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thisChildFitness <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfloop</span> <span class=\"kw6\">from</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw6\">to</span><span class=\"sy0\">=</span><span class=\"st0\">\"#len(theString)#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"i\"</span><span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfif</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>variables<span class=\"br0\">[</span><span class=\"st0\">\"child\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span>, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw7\">eq</span> <span class=\"kw5\">Mid</span><span class=\"br0\">(</span>theString, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> thisChildFitness <span class=\"sy0\">=</span> thisChildFitness + <span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfif</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfloop</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> variables<span class=\"br0\">[</span><span class=\"st0\">\"fitness\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>thisChildFitness<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw5\">len</span><span class=\"br0\">(</span>theString<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfif</span> variables<span class=\"br0\">[</span><span class=\"st0\">\"fitness\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span> <span class=\"kw7\">gt</span> fitness<span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> fitness <span class=\"sy0\">=</span> variables<span class=\"br0\">[</span><span class=\"st0\">\"fitness\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span></span><br/>      <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> parent <span class=\"sy0\">=</span> variables<span class=\"br0\">[</span><span class=\"st0\">\"child\"</span> <span class=\"sy0\">&amp;</span> child<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfif</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfloop</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfif</span> parent <span class=\"kw7\">neq</span> oldparent<span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfoutput</span><span class=\"sy0\">&gt;</span></span>##<span class=\"sc2\">#counter#</span> #numberformat(fitness*100, 99)#% fit: <span class=\"sc2\">#parent#</span><span class=\"sc5\"><span class=\"sy0\">&lt;</span><a href=\"http://december.com/html/4/element/br.html\"><span class=\"kw2\">br</span></a><span class=\"sy0\">&gt;</span></span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfflush</span><span class=\"sy0\">&gt;</span></span><br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfif</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfloop</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 39, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fitness <span class=\"br0\">(</span>string target<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Closeness of string to target; lower number is better\"</span><br/>  <span class=\"br0\">(</span>loop for c1 across string<br/>        for c2 across target<br/>        count <span class=\"br0\">(</span>char/<span class=\"sy0\">=</span> c1 c2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mutate <span class=\"br0\">(</span>string chars p<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Mutate each character of string with probablity p using characters from chars\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"kw1\">length</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> p<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> string n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> chars <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> chars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  string<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> random-string <span class=\"br0\">(</span>chars <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Generate a new random string consisting of letters from char and specified length\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>str <span class=\"br0\">(</span>make-string <span class=\"kw1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"kw1\">length</span><span class=\"br0\">)</span> str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> str n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> chars <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> chars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> evolve-string <span class=\"br0\">(</span>target string chars c p<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Generate new mutant strings, and choose the most fit string\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mutated-strs <span class=\"br0\">(</span><span class=\"kw1\">list</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>n c<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>push <span class=\"br0\">(</span>mutate <span class=\"br0\">(</span>copy-seq string<span class=\"br0\">)</span> chars p<span class=\"br0\">)</span> mutated-strs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>reduce #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>s0 s1<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>fitness s0 target<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>fitness s1 target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    s0<br/>                    s1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            mutated-strs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> evolve-gens <span class=\"br0\">(</span>target c p<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>chars <span class=\"st0\">\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>parent <span class=\"br0\">(</span>random-string chars <span class=\"br0\">(</span><span class=\"kw1\">length</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>evolve-string target parent chars c p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>n <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>string<span class=\"sy0\">=</span> target parent<span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"Generation ~A: ~S~%\"</span> n parent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"Generation ~A: ~S~%\"</span> n parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span>d<span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> C <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Number of children in each generation.</span><br/><span class=\"kw4\">enum</span> P <span class=\"sy0\">=</span> <span class=\"nu16\">0.05</span><span class=\"sy0\">;</span> <span class=\"co1\">// Mutation probability.</span><br/><span class=\"kw4\">enum</span> fitness <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">dchar</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> target.<span class=\"me1\">zip</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">dchar</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>uppercase <span class=\"sy0\">~</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">[</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">enum</span> mut <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">dchar</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> uniform01 <span class=\"sy0\">&lt;</span> P <span class=\"sy0\">?</span> rnd <span class=\"sy0\">:</span> a<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> parent <span class=\"sy0\">=</span> generate<span class=\"sy0\">!</span>rnd.<span class=\"me1\">take</span><span class=\"br0\">(</span>target.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> gen <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> parent <span class=\"sy0\">!=</span> target<span class=\"sy0\">;</span> gen<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// parent = parent.repeat(C).map!mut.array.max!fitness;</span><br/>        parent <span class=\"sy0\">=</span> parent.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>mut.<span class=\"me1\">array</span><br/>                 .<span class=\"me1\">minPos</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a.<span class=\"me1\">fitness</span> <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">fitness</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"Gen\u00a0%2d, dist=%2d:\u00a0%s\"</span><span class=\"sy0\">,</span> gen<span class=\"sy0\">,</span> parent.<span class=\"me1\">fitness</span><span class=\"sy0\">,</span> parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 44, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">syntax</span><span class=\"br0\">(</span><span class=\"st0\">\"0.9\"</span><span class=\"br0\">)</span><br/>pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> target <span class=\"sy0\">:=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> alphabet <span class=\"sy0\">:=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> C <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> RATE <span class=\"sy0\">:=</span> <span class=\"nu0\">0.05</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> randomCharString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>alphabet<span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>alphabet.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> fitness<span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">0</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <span class=\"sy0\">=&gt;</span> ch <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> string <span class=\"br0\">{</span><br/>      _ <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> target<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">pick</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> mutate<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> rate<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"st0\">\"\"</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <span class=\"sy0\">=&gt;</span> ch <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> string <span class=\"br0\">{</span><br/>    _ <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> rate<span class=\"br0\">)</span>.<span class=\"me1\">pick</span><span class=\"br0\">(</span>randomCharString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> weasel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> parent <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"st0\">\"\"</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"br0\">(</span>target.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> randomCharString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> generation <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>parent <span class=\"sy0\">!=</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`$generation $parent`</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> copies <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">C</span> <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span>mutate<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> RATE<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> best <span class=\"sy0\">:=</span> parent<br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> c <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> copies <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>fitness<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> fitness<span class=\"br0\">(</span>best<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        best <span class=\"sy0\">:=</span> c<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    parent <span class=\"sy0\">:=</span> best<br/>    generation <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`$generation $parent`</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>weasel<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "EchoLisp", "loc": 40, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'sequences<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> ALPHABET <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span>  <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span> .. <span class=\"st0\">\"Z\"</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>push ALPHABET <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fitness source target<span class=\"br0\">)</span> <span class=\"co1\">;; score &gt;=0, best is 0</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>sum  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> source<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">t</span> target<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"kw1\">s</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mutate source rate<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">string</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> source<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>random<span class=\"br0\">)</span> rate<span class=\"br0\">)</span> <span class=\"br0\">[</span>ALPHABET <span class=\"br0\">(</span>random <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>select parent target rate copies <span class=\"br0\">(</span>copy<span class=\"br0\">)</span> <span class=\"br0\">(</span>score<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> best <span class=\"br0\">(</span>fitness parent target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> selected parent<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>i copies<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> copy <span class=\"br0\">(</span>mutate parent rate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> score <span class=\"br0\">(</span>fitness copy target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> score  best<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> selected copy<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> best  score<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tselected <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> MUTATION_RATE <span class=\"nu0\">0.05</span><span class=\"br0\">)</span> <span class=\"co1\">;; 5% chances to change</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> COPIES <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> TARGET <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task <span class=\"br0\">(</span>rate MUTATION_RATE<span class=\"br0\">)</span> <span class=\"br0\">(</span>copies COPIES<span class=\"br0\">)</span> <span class=\"br0\">(</span>target TARGET<span class=\"br0\">)</span> <span class=\"br0\">(</span>score<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> parent <span class=\"co1\">;; random source</span><br/>\t\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">string</span> <br/>                <span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>ALPHABET <span class=\"br0\">(</span>random <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> score <span class=\"br0\">(</span>fitness parent target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>writeln i parent 'score score<span class=\"br0\">)</span><br/>\t\t#:break <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> score<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> parent <span class=\"br0\">(</span>select parent target rate copies<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 68, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>const Target = \"METHINKS IT IS LIKE A WEASEL\".<br/>const AllowedCharacters = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\".<br/>\u00a0<br/>const C = 100.<br/>const P = 0.05r.<br/>\u00a0<br/>rnd = randomGenerator.<br/>\u00a0<br/>randomChar <br/>    = AllowedCharacters[rnd nextInt(AllowedCharacters length)].<br/>\u00a0<br/>extension evoHelper<br/>{<br/>    randomString<br/>        = 0 till:self repeat(:x)( randomChar ); summarize:(String new); literal.<br/>\u00a0<br/>    fitnessOf:s<br/>        = self zip:s by(:a:b)( (a == b)iif(1,0) ); summarize(Integer new); int.<br/>\u00a0<br/>    mutate\u00a0: p<br/>        = self selectBy(:ch)( (rnd nextReal &lt;= p) iif(randomChar,ch) ); summarize(String new); literal.<br/>}<br/>\u00a0<br/>class EvoAlgorithm\u00a0:: Enumerator<br/>{<br/>    object theTarget.<br/>    object theCurrent.<br/>    object theVariantCount.<br/>\u00a0<br/>    constructor new\u00a0: s of:count<br/>    [<br/>        theTarget\u00a0:= s.<br/>        theVariantCount\u00a0:= count int.<br/>    ]<br/>\u00a0<br/>    get = theCurrent.<br/>\u00a0<br/>    next<br/>    [<br/>        if ($nil == theCurrent)<br/>            [ theCurrent\u00a0:= theTarget length; randomString. ^ true ].<br/>\u00a0<br/>        if (theTarget == theCurrent)<br/>            [ ^ false ].<br/>\u00a0<br/>        var variants\u00a0:= Array new:theVariantCount; populate(:x)( theCurrent mutate:P ).<br/>\u00a0<br/>        theCurrent\u00a0:= variants array; sort(:a:b)( a fitnessOf:Target &gt; b fitnessOf:Target ); getAt:0.<br/>\u00a0<br/>        ^ true.<br/>    ]            <br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var attempt\u00a0:= Integer new.<br/>    EvoAlgorithm new:Target of:C; forEach(:current)<br/>    [<br/>        console <br/>            printPaddingLeft(10,\"#\",attempt append:1);<br/>            printLine(\" \",current,\" fitness: \",current fitnessOf:Target).<br/>    ].<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 64, "block": "<pre class=\"text highlighted_source\">defmodule Log do<br/>  def show(offspring,i) do<br/>    IO.puts \"Generation: #{i}, Offspring: #{offspring}\"<br/>  end<br/>\u00a0<br/>  def found({target,i}) do<br/>    IO.puts \"#{target} found in #{i} iterations\"<br/>  end<br/>end<br/>\u00a0<br/>defmodule Evolution do<br/>  # char list from A to Z; 32 is the ord value for space.<br/>  @chars  [32 | Enum.to_list(?A..?Z)]<br/>\u00a0<br/>  def select(target) do <br/>    (1..String.length(target)) # Creates parent for generation 0.<br/>      |&gt; Enum.map(fn _-&gt; Enum.random(@chars) end) <br/>      |&gt; mutate(to_charlist(target),0)<br/>      |&gt; Log.found<br/>  end<br/>\u00a0<br/>  # w is used to denote fitness in population genetics.<br/>\u00a0<br/>  defp mutate(parent,target,i) when target == parent, do: {parent,i}<br/>  defp mutate(parent,target,i) do<br/>    w = fitness(parent,target) <br/>    prev = reproduce(target,parent,mu_rate(w))<br/>\u00a0<br/>    # Check if the most fit member of the new gen has a greater fitness than the parent.<br/>    if w &lt; fitness(prev,target) do<br/>      Log.show(prev,i)<br/>      mutate(prev,target,i+1)<br/>    else<br/>      mutate(parent,target,i+1)<br/>    end<br/>  end<br/>\u00a0<br/>  # Generate 100 offspring and select the one with the greatest fitness.<br/>\u00a0<br/>  defp reproduce(target,parent,rate) do<br/>    [parent | (for _ &lt;- 1..100, do: mutation(parent,rate))]<br/>      |&gt; Enum.max_by(fn n -&gt; fitness(n,target) end)<br/>  end<br/>\u00a0<br/>  # Calculate fitness by checking difference between parent and offspring chars.<br/>\u00a0<br/>  defp fitness(t,r) do<br/>    Enum.zip(t,r)<br/>      |&gt; Enum.reduce(0, fn {tn,rn},sum -&gt; abs(tn - rn) + sum end) <br/>      |&gt; calc<br/>  end<br/>\u00a0<br/>  # Generate offspring based on parent.<br/>\u00a0<br/>  defp mutation(p,r) do<br/>    # Copy the parent chars, then check each val against the random mutation rate<br/>    Enum.map(p, fn n -&gt; if\u00a0:rand.uniform &lt;= r, do: Enum.random(@chars), else: n end)<br/>  end<br/>\u00a0<br/>  defp calc(sum),  do: 100 *\u00a0:math.exp(sum/-10)<br/>  defp mu_rate(n), do: 1   -\u00a0:math.exp(-(100-n)/400)<br/>end<br/>\u00a0<br/>Evolution.select(\"METHINKS IT IS LIKE A WEASEL\")</pre>"}, {"lang": "Erlang", "loc": 62, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>evolution<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>run<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">MUTATE</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">POPULATION</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">TARGET</span><span class=\"sy1\">,</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">MAX_GENERATIONS</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Initial</span> <span class=\"sy3\">=</span> <span class=\"re3\">random_string</span><span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span>?<span class=\"re4\">TARGET</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"re5\">Initial</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">Initial</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Generation</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation[~w]: Achieved the target: ~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">Generation</span><span class=\"sy1\">,</span><span class=\"re5\">Parent</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Generation</span><span class=\"sy1\">,</span><span class=\"re5\">_Fitness</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Generation</span> <span class=\"sy3\">==</span>\u00a0?<span class=\"re4\">MAX_GENERATIONS</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Reached Max Generations~nFinal string is ~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">Parent</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Generation</span><span class=\"sy1\">,</span><span class=\"re5\">Fitness</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation[~w]: ~s, Fitness: ~w~n\"</span><span class=\"sy1\">,</span><br/>              <span class=\"br0\">[</span><span class=\"re5\">Generation</span><span class=\"sy1\">,</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Fitness</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Child</span> <span class=\"sy3\">=</span> <span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">evolve_gens</span><span class=\"br0\">(</span><span class=\"re5\">Child</span><span class=\"sy1\">,</span><span class=\"re5\">Generation</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">Child</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span>\u00a0?<span class=\"re4\">TARGET</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|Target<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span><span class=\"re5\">Target</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_H</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">_T</span>|Target<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy3\">+</span><span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span><span class=\"re5\">Target</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span>\u00a0?<span class=\"re4\">MUTATE</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">random_character</span><span class=\"br0\">(</span><span class=\"br0\">)</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"sy1\">,</span>?<span class=\"re4\">TARGET</span><span class=\"sy1\">,</span>?<span class=\"re4\">POPULATION</span><span class=\"sy1\">,</span><span class=\"re5\">String</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Child</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Child</span><span class=\"sy1\">;</span><br/><span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Target</span><span class=\"sy1\">,</span><span class=\"re5\">Population</span><span class=\"sy1\">,</span><span class=\"re5\">Best_Child</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Child</span> <span class=\"sy3\">=</span> <span class=\"re3\">mutate</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">Child</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span> <span class=\"re3\">fitness</span><span class=\"br0\">(</span><span class=\"re5\">Best_Child</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Target</span><span class=\"sy1\">,</span><span class=\"re5\">Population</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Child</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">evolve_string</span><span class=\"br0\">(</span><span class=\"re5\">Parent</span><span class=\"sy1\">,</span><span class=\"re5\">Target</span><span class=\"sy1\">,</span><span class=\"re5\">Population</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Best_Child</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">random_character</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">of</span><br/>        <span class=\"nu0\">26</span>  <span class=\"sy1\">-&gt;</span> $ <span class=\"sy1\">;</span><br/>        <span class=\"re5\">R</span> <span class=\"sy1\">-&gt;</span> <span class=\"re6\">$A</span><span class=\"sy3\">+</span><span class=\"re5\">R</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">random_string</span><span class=\"br0\">(</span><span class=\"re5\">Length</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">random_string</span><span class=\"br0\">(</span><span class=\"re5\">Length</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">random_string</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">random_string</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">random_string</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">random_character</span><span class=\"br0\">(</span><span class=\"br0\">)</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 51, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> table <span class=\"sy1\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/><span class=\"kw1\">function</span> random_generation<span class=\"br0\">(</span><span class=\"kw2\">integer</span> len<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> s<br/>    s <span class=\"sy1\">=</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>table<span class=\"br0\">)</span><span class=\"sy2\">,</span>len<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> len <span class=\"kw1\">do</span><br/>        s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> table<span class=\"br0\">[</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mutate<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> table<span class=\"br0\">[</span><span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> fitness<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> probe<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> target<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> sum<br/>    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> <span class=\"kw2\">power</span><span class=\"br0\">(</span><span class=\"kw2\">find</span><span class=\"br0\">(</span>target<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">,</span> table<span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw2\">find</span><span class=\"br0\">(</span>probe<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">,</span> table<span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>sum<span class=\"sy1\">/</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> target <span class=\"sy1\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy2\">,</span> C <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy2\">,</span> MUTATE <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><br/><span class=\"kw2\">sequence</span> parent<span class=\"sy2\">,</span> specimen<br/><span class=\"kw2\">integer</span> iter<span class=\"sy2\">,</span> best<br/><span class=\"kw2\">atom</span> fit<span class=\"sy2\">,</span> best_fit<br/>parent <span class=\"sy1\">=</span> random_generation<span class=\"br0\">(</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>iter <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span>parent<span class=\"sy2\">,</span>target<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    best_fit <span class=\"sy1\">=</span> fitness<span class=\"br0\">(</span>parent<span class=\"sy2\">,</span> target<span class=\"br0\">)</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Iteration:\u00a0%3d, <span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span>, deviation\u00a0%g<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>iter<span class=\"sy2\">,</span> parent<span class=\"sy2\">,</span> best_fit<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    specimen <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span>parent<span class=\"sy2\">,</span>C<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    best <span class=\"sy1\">=</span> C<span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> C <span class=\"kw1\">do</span><br/>        specimen<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> mutate<span class=\"br0\">(</span>specimen<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">,</span> MUTATE<span class=\"br0\">)</span><br/>        fit <span class=\"sy1\">=</span> fitness<span class=\"br0\">(</span>specimen<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">,</span> target<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> fit &lt; best_fit <span class=\"kw1\">then</span><br/>            best_fit <span class=\"sy1\">=</span> fit<br/>            best <span class=\"sy1\">=</span> i<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    parent <span class=\"sy1\">=</span> specimen<span class=\"br0\">[</span>best<span class=\"br0\">]</span><br/>    iter <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Finally, <span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>parent<span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 12, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">//A functional implementation of Evolutionary algorithm</span><br/><span class=\"co1\">//Nigel Galloway February 7th., 2018</span><br/><span class=\"kw1\">let</span> G<span class=\"sy0\">=</span>System.<span class=\"me1\">Random</span> <span class=\"nu0\">23</span><br/><span class=\"kw1\">let</span> fitness n<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">fold2</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> a n g<span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span> n<span class=\"sy0\">=</span>g <span class=\"kw1\">then</span> a <span class=\"kw1\">else</span> a<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> n <span class=\"br0\">(</span><span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> alphabet<span class=\"sy0\">=</span><span class=\"st0\">\"QWERTYUIOPASDFGHJKLZXCVBNM \"</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> mutate <span class=\"br0\">(</span>n:<span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> g<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">iter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span>n.<span class=\"br0\">[</span>g<span class=\"br0\">]</span><span class=\"sy0\">&lt;-</span>alphabet.<span class=\"br0\">[</span>G.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>27<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">init</span> g <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _<span class=\"sy0\">-&gt;</span>G.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">length</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>n<br/><span class=\"kw1\">let</span> nextParent n g<span class=\"sy0\">=</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">init</span> <span class=\"nu0\">500</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _<span class=\"sy0\">-&gt;</span>mutate <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">copy</span> n<span class=\"br0\">)</span> g<span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">minBy</span> fitness<br/><span class=\"kw1\">let</span> evolution n<span class=\"sy0\">=</span><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> evolution n g<span class=\"sy0\">=</span><span class=\"kw1\">match</span> fitness n <span class=\"kw1\">with</span> |<span class=\"nu0\">0</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,n<span class=\"br0\">)</span>::g |l<span class=\"sy0\">-&gt;</span>evolution <span class=\"br0\">(</span>nextParent n <span class=\"br0\">(</span><span class=\"br0\">(</span>l<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>l,n<span class=\"br0\">)</span>::g<span class=\"br0\">)</span><br/>                evolution n <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> evolution <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">init</span> <span class=\"nu0\">28</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _<span class=\"sy0\">-&gt;</span>alphabet.<span class=\"br0\">[</span>G.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>27<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 37, "block": "<pre class=\"text highlighted_source\">USING: arrays formatting io kernel literals math prettyprint<br/>random sequences strings\u00a0;<br/>FROM: math.extras =&gt; ...\u00a0;<br/>IN: rosetta-code.evolutionary-algorithm<br/>\u00a0<br/>CONSTANT: target \"METHINKS IT IS LIKE A WEASEL\"<br/>CONSTANT: mutation-rate 0.1<br/>CONSTANT: num-children 25<br/>CONSTANT: valid-chars<br/>    $[ CHAR: A ... CHAR: Z &gt;array { 32 } append ]<br/>\u00a0<br/>: rand-char ( -- n )<br/>    valid-chars random\u00a0;<br/>\u00a0<br/>: new-parent ( -- str )<br/>    target length [ rand-char ] replicate &gt;string\u00a0;<br/>\u00a0<br/>: fitness ( str -- n )<br/>    target [ = ] { } 2map-as sift length\u00a0;<br/>\u00a0<br/>: mutate ( str rate -- str/str' )<br/>    [ random-unit &gt; [ drop rand-char ] when ] curry map\u00a0;<br/>\u00a0<br/>: next-parent ( str -- str/str' )<br/>    dup [ mutation-rate mutate ] curry num-children 1 - swap<br/>    replicate [ 1array ] dip append [ fitness ] supremum-by\u00a0;<br/>\u00a0<br/>: print-parent ( str -- )<br/>    [ fitness pprint bl ] [ print ] bi\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    0 new-parent<br/>    [ dup target = ]<br/>    [ next-parent dup print-parent [ 1 + ] dip ] until drop<br/>    \"Finished in\u00a0%d generations.\" printf\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Fantom", "loc": 58, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  static const Str target\u00a0:= \"METHINKS IT IS LIKE A WEASEL\"<br/>  static const Int C\u00a0:= 100     // size of population<br/>  static const Float p\u00a0:= 0.1f  // chance any char is mutated<br/>\u00a0<br/>  // compute distance of str from target<br/>  static Int fitness (Str str)<br/>  {<br/>    Int sum\u00a0:= 0<br/>    str.each |Int c, Int index|<br/>    {<br/>      if (c\u00a0!= target[index]) sum += 1<br/>    }<br/>    return sum<br/>  }<br/>\u00a0<br/>  // mutate given parent string<br/>  static Str mutate (Str str)<br/>  {<br/>    Str result\u00a0:= \"\"<br/>    str.size.times |Int index| <br/>    {<br/>      result += ((Float.random &lt; p)\u00a0? randomChar()\u00a0: str[index]).toChar<br/>    }<br/>    return result<br/>  }<br/>\u00a0<br/>  // return a random char<br/>  static Int randomChar ()<br/>  {<br/>    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"[Int.random(0..26)]<br/>  }<br/>\u00a0<br/>  // make population by mutating parent and sorting by fitness<br/>  static Str[] makePopulation (Str parent)<br/>  {<br/>    Str[] result\u00a0:= [,]<br/>    C.times { result.add (mutate(parent)) }    <br/>    result.sort |Str a, Str b -&gt; Int| { fitness(a) &lt;=&gt; fitness(b) }<br/>    return result<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    Str parent\u00a0:= \"\"<br/>    target.size.times { parent += randomChar().toChar }<br/>\u00a0<br/>    while (parent\u00a0!= target)<br/>    {<br/>      echo (parent)<br/>      parent = makePopulation(parent).first<br/>    }<br/>    echo (parent)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 73, "block": "<pre class=\"text highlighted_source\">include lib/choose.4th<br/>                                       \\ target string<br/>s\" METHINKS IT IS LIKE A WEASEL\" sconstant target<br/>\u00a0<br/>27 constant /charset                   \\ size of characterset<br/>29 constant /target                    \\ size of target string<br/>32 constant #copies                    \\ number of offspring<br/>\u00a0<br/>/target string charset                 \\ characterset<br/>/target string this-generation         \\ current generation and offspring<br/>/target #copies [*] string new-generation<br/>\u00a0<br/>:this new-generation does&gt; swap /target chars * +\u00a0;<br/>                                       \\ generate a mutation<br/>: mutation charset /charset choose chars + <a class=\"__cf_email__\" data-cfemail=\"402300\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>                                       \\ print the current candidate<br/>: .candidate                           ( n1 n2 -- n1 f)<br/>  .\" Generation \" over 2 .r .\"\u00a0: \" this-generation count type cr /target -1 [+] =<br/>;                                      \\ test a candidate on <br/>                                       \\ THE NUMBER of correct genes<br/>: test-candidate                       ( a -- a n) <br/>  dup target 0 &gt;r &gt;r                   ( a1 a2)<br/>  begin                                ( a1 a2)<br/>    <a class=\"__cf_email__\" data-cfemail=\"84f6c4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                                 ( a1 a2 n)<br/>  while                                ( a1 a2)               <br/>    over <a class=\"__cf_email__\" data-cfemail=\"aac9ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over <a class=\"__cf_email__\" data-cfemail=\"660526\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =                  ( a1 a2 n)<br/>    r&gt; r&gt; rot if 1+ then &gt;r 1- &gt;r      ( a1 a2)<br/>    char+ swap char+ swap              ( a1+1 a2+1)<br/>  repeat                               ( a1+1 a2+1)<br/>  drop drop r&gt; drop r&gt;                 ( a n)<br/>;<br/>                                       \\ find the best candidate<br/>: get-candidate                        ( -- n)<br/>  #copies 0 &gt;r &gt;r                      ( --)<br/>  begin                                ( --)<br/>    <a class=\"__cf_email__\" data-cfemail=\"d2a092\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                                 ( n)<br/>  while                                ( --)<br/>    <a class=\"__cf_email__\" data-cfemail=\"5f2d1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1- new-generation               ( a)<br/>    test-candidate r'@ over &lt;          ( a n f)<br/>    if swap count this-generation place r&gt; 1- swap r&gt; drop &gt;r &gt;r<br/>    else drop drop r&gt; 1- &gt;r then       ( --)<br/>  repeat                               ( --)<br/>  r&gt; drop r&gt;                           ( n)<br/>;<br/>                                       \\ generate a new candidate<br/>: make-candidate                       ( a --)<br/>  dup charset count rot place          ( a1)<br/>  this-generation target &gt;r            ( a1 a2 a3)<br/>  begin                                ( a1 a2 a3)<br/>    <a class=\"__cf_email__\" data-cfemail=\"fc8ebc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                                 ( a1 a2 a3 n)<br/>  while                                ( a1 a2 a3)<br/>    over <a class=\"__cf_email__\" data-cfemail=\"88ebc8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> over <a class=\"__cf_email__\" data-cfemail=\"5d3e1d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =                  ( a1 a2 a3 f)<br/>    swap &gt;r &gt;r over r&gt;                 ( a1 a2 a1 f)<br/>    if over <a class=\"__cf_email__\" data-cfemail=\"365576\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> else mutation then      ( a1 a2 a1 c)<br/>    swap c! r&gt; r&gt; 1- &gt;r                ( a1 a2 a3)<br/>    char+ rot char+ rot char+ rot      ( a1+1 a2+1 a3+1)<br/>  repeat                               ( a1+1 a2+1 a3+1)<br/>  drop drop drop r&gt; drop               ( --)<br/>;<br/>                                       \\ make a whole new generation<br/>: make-generation #copies 0 do i new-generation make-candidate loop\u00a0;<br/>                                       \\ weasel program<br/>: weasel<br/>  s\"  ABCDEFGHIJKLMNOPQRSTUVWXYZ \" 2dup<br/>  charset place                        \\ initialize the characterset<br/>  this-generation place 0              \\ initialize the first generation<br/>  begin                                \\ start the program<br/>    1+ make-generation                 \\ make a new generation<br/>    get-candidate .candidate           \\ select the best candidate<br/>  until drop                           \\ stop when we've found perfection<br/>;<br/>\u00a0<br/>weasel</pre>"}, {"lang": "Fortran", "loc": 137, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/> <span class=\"co1\">!***************************************************************************************************</span><br/> \t<span class=\"kw1\">module</span> evolve_routines<br/> <span class=\"co1\">!***************************************************************************************************</span><br/> \t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/> \t<span class=\"co1\">!the target string:</span><br/> \t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">targ</span> <span class=\"sy0\">=</span> <span class=\"st0\">'METHINKS IT IS LIKE A WEASEL'</span><br/>\u00a0<br/> \t<span class=\"kw1\">contains</span><br/> <span class=\"co1\">!***************************************************************************************************</span><br/>\u00a0<br/> <span class=\"co1\">!********************************************************************</span><br/> \tpure elemental <span class=\"kw1\">function</span> fitness<span class=\"br0\">(</span>member<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/> <span class=\"co1\">!********************************************************************</span><br/> <span class=\"co1\">! The fitness function.  The lower the value, the better the match.</span><br/> <span class=\"co1\">! It is zero if they are identical.</span><br/> <span class=\"co1\">!********************************************************************</span><br/>\u00a0<br/> \t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/> \t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/> \t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">member</span><br/>\u00a0<br/> \t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/> \tn<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/> \t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">len</span><span class=\"br0\">(</span>targ<span class=\"br0\">)</span><br/> \t\tn <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span> <span class=\"kw4\">ichar</span><span class=\"br0\">(</span>targ<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">ichar</span><span class=\"br0\">(</span>member<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">)</span><br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/> <span class=\"co1\">!********************************************************************</span><br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">function</span> fitness<br/> <span class=\"co1\">!********************************************************************</span><br/>\u00a0<br/> <span class=\"co1\">!********************************************************************</span><br/> \tpure elemental <span class=\"kw1\">subroutine</span> mutate<span class=\"br0\">(</span>member,factor<span class=\"br0\">)</span><br/> <span class=\"co1\">!********************************************************************</span><br/> <span class=\"co1\">! mutate a member of the population.</span><br/> <span class=\"co1\">!********************************************************************</span><br/>\u00a0<br/> \t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/> \t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">member</span>   <span class=\"co1\">!population member</span><br/> \t<span class=\"kw3\">real</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">factor</span>                  <span class=\"co1\">!mutation factor</span><br/>\u00a0<br/> \t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">n_chars</span> <span class=\"sy0\">=</span> <span class=\"nu0\">27</span>\t<span class=\"co1\">!number of characters in set</span><br/> \t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span>n_chars<span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">chars</span> <span class=\"sy0\">=</span> <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ '</span><br/>\u00a0<br/> \t<span class=\"kw3\">real</span>    <span class=\"sy0\">::</span> <span class=\"me2\">rnd_val</span><br/> \t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,j,n<br/>\u00a0<br/> \tn <span class=\"sy0\">=</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>member<span class=\"br0\">)</span><br/>\u00a0<br/> \t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<br/> \t\trnd_val <span class=\"sy0\">=</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/> \t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>rnd_val&lt;<span class=\"sy0\">=</span>factor<span class=\"br0\">)</span> <span class=\"kw1\">then</span>   <span class=\"co1\">!mutate this element\t\t\t</span><br/> \t\t\trnd_val <span class=\"sy0\">=</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/> \t\t\tj <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>rnd_val<span class=\"sy0\">*</span>n_chars<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>   <span class=\"co1\">!an integer between 1 and n_chars</span><br/> \t\t\tmember<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> chars<span class=\"br0\">(</span>j<span class=\"sy0\">:</span>j<span class=\"br0\">)</span><br/> \t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/> <span class=\"co1\">!********************************************************************</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> mutate<br/> <span class=\"co1\">!********************************************************************</span><br/>\u00a0<br/> <span class=\"co1\">!***************************************************************************************************</span><br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">module</span> evolve_routines<br/> <span class=\"co1\">!***************************************************************************************************</span><br/>\u00a0<br/> <span class=\"co1\">!***************************************************************************************************</span><br/> \t<span class=\"kw1\">program</span> evolve<br/> <span class=\"co1\">!***************************************************************************************************</span><br/> <span class=\"co1\">! The main program</span><br/> <span class=\"co1\">!***************************************************************************************************</span><br/> \t<span class=\"kw3\">use</span> evolve_routines<br/>\u00a0<br/> \t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/> \t<span class=\"co1\">!Tuning parameters:</span><br/> \t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">seed</span> <span class=\"sy0\">=</span> <span class=\"nu0\">12345</span>             <span class=\"co1\">!random number generator seed</span><br/> \t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">max_iter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span>         <span class=\"co1\">!maximum number of iterations</span><br/> \t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">population_size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">200</span>    <span class=\"co1\">!size of the population</span><br/> \t<span class=\"kw3\">real</span>,<span class=\"kw3\">parameter</span>    <span class=\"sy0\">::</span> <span class=\"me2\">factor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.04</span>            <span class=\"co1\">![0,1] mutation factor</span><br/> \t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">iprint</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>               <span class=\"co1\">!print every iprint iterations</span><br/>\u00a0<br/> \t<span class=\"co1\">!local variables:</span><br/> \t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,iter<br/> \t<span class=\"kw3\">integer</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i_best</span><br/> \t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>targ<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span>population_size<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">population</span><br/>\u00a0<br/> \t<span class=\"co1\">!initialize random number generator:</span><br/> \t<span class=\"kw1\">call</span> srand<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>\u00a0<br/> \t<span class=\"co1\">!create initial population:</span><br/> \t<span class=\"co1\">! [the first element of the population will hold the best member]</span><br/> \tpopulation<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'PACQXJB CQPWEYKSVDCIOUPKUOJY'</span>  <span class=\"co1\">!initial guess</span><br/> \titer<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/> \twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A10,A30,A10)'</span><span class=\"br0\">)</span> <span class=\"st0\">'iter'</span>,<span class=\"st0\">'best'</span>,<span class=\"st0\">'fitness'</span><br/> \twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(I10,A30,I10)'</span><span class=\"br0\">)</span> iter,population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,fitness<span class=\"br0\">(</span>population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> \t<span class=\"kw1\">do</span> <br/>\u00a0<br/> \t\titer <span class=\"sy0\">=</span> iter <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">!iteration counter</span><br/>\u00a0<br/>  \t\t<span class=\"co1\">!write the iteration:</span><br/> \t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>iter,iprint<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(I10,A30,I10)'</span><span class=\"br0\">)</span> iter,population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,fitness<span class=\"br0\">(</span>population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> \t\t<span class=\"co1\">!check exit conditions:</span><br/> \t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> iter&gt;max_iter <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> fitness<span class=\"br0\">(</span>population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>\u00a0<br/> \t\t<span class=\"co1\">!copy best member and mutate:</span><br/> \t\tpopulation <span class=\"sy0\">=</span> population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<br/> \t\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,population_size<br/> \t\t\t<span class=\"kw1\">call</span> mutate<span class=\"br0\">(</span>population<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,factor<span class=\"br0\">)</span>\t<br/> \t\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/> \t\t<span class=\"co1\">!select the new best population member:</span><br/> \t\t<span class=\"co1\">! [the best has the lowest value]</span><br/> \t\ti_best <span class=\"sy0\">=</span> <span class=\"kw4\">minloc</span><span class=\"br0\">(</span>fitness<span class=\"br0\">(</span>population<span class=\"br0\">)</span><span class=\"br0\">)</span><br/> \t\tpopulation<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> population<span class=\"br0\">(</span>i_best<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/> \t<span class=\"co1\">!write the last iteration:</span><br/> \t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>iter,iprint<span class=\"br0\">)</span><span class=\"sy0\">/=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(I10,A30,I10)'</span><span class=\"br0\">)</span> iter,population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,fitness<span class=\"br0\">(</span>population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> \t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>iter&gt;max_iter<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/> \t\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'No solution found.'</span><br/> \t<span class=\"kw1\">else</span><br/> \t\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Solution found.'</span><br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/> <span class=\"co1\">!***************************************************************************************************</span><br/> \t<span class=\"kw1\">end</span> <span class=\"kw1\">program</span> evolve<br/> <span class=\"co1\">!***************************************************************************************************</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 84, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 01-07-2018</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span> <span class=\"kw1\">Timer</span><br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> children = <span class=\"nu0\">100</span><br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> mutate_rate = <span class=\"nu0\">0.05</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> fitness<span class=\"br0\">(</span>target <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, tmp <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x, f<br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> tmp<span class=\"br0\">[</span>x<span class=\"br0\">]</span> = target<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">Then</span> f += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Return</span> f<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> mutate<span class=\"br0\">(</span>tmp <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, chars <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, mute_rate <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Rnd</span> &lt;= mute_rate <span class=\"kw1\">Then</span><br/>        tmp<span class=\"br0\">[</span><span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * <span class=\"kw1\">Len</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> = chars<span class=\"br0\">[</span><span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * <span class=\"kw1\">Len</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> target = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> chars  = <span class=\"st0\">\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> parent, mutation<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x, iter, f, fit<span class=\"br0\">(</span><span class=\"br0\">)</span>, best_fit, parent_fit<br/>\u00a0<br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><br/>    parent += <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * <span class=\"kw1\">Len</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>f = fitness<span class=\"br0\">(</span>target, parent<span class=\"br0\">)</span><br/>parent_fit = f<br/>best_fit = f<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"iteration  best fit   Parent\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"=========  ========   ============================\"</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"     ####      ####   \"</span>;iter; best_fit;<br/><span class=\"kw1\">Print</span> parent<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    iter += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ReDim</span> mutation<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> children<span class=\"br0\">)</span>,fit<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> children<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> children<br/>        mutation<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = parent<br/>        mutate<span class=\"br0\">(</span>mutation<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, chars, mutate_rate<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> children<br/>        <span class=\"kw1\">If</span> mutation<span class=\"br0\">(</span>x<span class=\"br0\">)</span> &lt;&gt; parent <span class=\"kw1\">Then</span><br/>            f = fitness<span class=\"br0\">(</span>target, mutation<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> best_fit &lt; f <span class=\"kw1\">Then</span><br/>                best_fit = f<br/>                fit<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = f<br/>            <span class=\"kw1\">Else</span><br/>                fit<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = parent_fit<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> best_fit &gt; parent_fit <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> children<br/>            <span class=\"kw1\">If</span> fit<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = best_fit <span class=\"kw1\">Then</span><br/>                parent = mutation<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"     ####      ####   \"</span>;iter; best_fit;<br/>                <span class=\"kw1\">Print</span> parent<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> parent = target<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 65, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> target <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> set <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> parent <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw4\">func</span> init<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    parent <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>target<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> parent <span class=\"sy1\">{</span><br/>        parent<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> set<span class=\"sy1\">[</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>set<span class=\"sy1\">))]</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// fitness:  0 is perfect fit.  greater numbers indicate worse fit.</span><br/><span class=\"kw4\">func</span> fitness<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>h <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// (hamming distance)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> tc <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> target <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> tc <span class=\"sy1\">{</span><br/>            h<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// set m to mutation of p, with each character of p mutated with probability r</span><br/><span class=\"kw4\">func</span> mutate<span class=\"sy1\">(</span>p<span class=\"sy1\">,</span> m <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> r <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> ch <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> p <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> &lt; r <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> set<span class=\"sy1\">[</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>set<span class=\"sy1\">))]</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> ch<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> c <span class=\"sy2\">=</span> <span class=\"nu0\">20</span> <span class=\"co1\">// number of times to copy and mutate parent</span><br/>\u00a0<br/>    copies <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> copies <span class=\"sy1\">{</span><br/>        copies<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>parent<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>parent<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> best <span class=\"sy2\">:=</span> fitness<span class=\"sy1\">(</span>parent<span class=\"sy1\">);</span> best &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> cp <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> copies <span class=\"sy1\">{</span><br/>            mutate<span class=\"sy1\">(</span>parent<span class=\"sy1\">,</span> cp<span class=\"sy1\">,</span> <span class=\"sy3\">.</span><span class=\"nu0\">05</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> cp <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> copies <span class=\"sy1\">{</span><br/>            fm <span class=\"sy2\">:=</span> fitness<span class=\"sy1\">(</span>cp<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> fm &lt; best <span class=\"sy1\">{</span><br/>                best <span class=\"sy2\">=</span> fm<br/>                <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>parent<span class=\"sy1\">,</span> cp<span class=\"sy1\">)</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>parent<span class=\"sy1\">))</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 48, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/>\u00a0<br/>showNum <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>showNum w <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:until\"><span class=\"kw3\">until</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span>w<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">' '</span>:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <br/>\u00a0<br/>replace <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>replace n c ls <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> ls <span class=\"sy0\">++</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> n ls<br/>\u00a0<br/>target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>pfit <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> target<br/>mutateRate <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>popsize <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>charSet <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <span class=\"st0\">' '</span>: <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">..</span><span class=\"st0\">'Z'</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> Array <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>\u00a0<br/>fitness <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> target<br/>\u00a0<br/>printRes i g <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>     <span class=\"st0\">\"gen:\"</span> <span class=\"sy0\">++</span> showNum <span class=\"nu0\">4</span> i <span class=\"sy0\">++</span> <span class=\"st0\">\"  \"</span><br/>     <span class=\"sy0\">++</span> <span class=\"st0\">\"fitn:\"</span> <span class=\"sy0\">++</span> showNum <span class=\"nu0\">4</span>  <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:round\"><span class=\"kw3\">round</span></a> <span class=\"sy0\">$</span> <span class=\"nu0\">100</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> s <span class=\"sy0\">/</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> pfit <span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\"%  \"</span><br/>     <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> g<br/>    <span class=\"kw1\">where</span> s <span class=\"sy0\">=</span> fitness g<br/>\u00a0<br/>mutate <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"br0\">]</span><br/>mutate g mr <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> g<br/>  chances <span class=\"sy0\">&lt;-</span> replicateM r <span class=\"sy0\">$</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>mr<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> pos <span class=\"sy0\">=</span> elemIndices <span class=\"nu0\">1</span> chances<br/>  chrs <span class=\"sy0\">&lt;-</span> replicateM <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> pos<span class=\"br0\">)</span> <span class=\"sy0\">$</span> randomRIO <span class=\"br0\">(</span>bounds charSet<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> nchrs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>charSet<span class=\"sy0\">!</span><span class=\"br0\">)</span> chrs<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span>\\ng <span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> replace <span class=\"br0\">(</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> c ng<span class=\"br0\">)</span> g <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> pos nchrs<span class=\"br0\">)</span><br/>\u00a0<br/>evolve <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>evolve parent gen mr <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  when <span class=\"br0\">(</span><span class=\"br0\">(</span>gen<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">20</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> printRes <span class=\"br0\">(</span>gen<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> parent<br/>  children <span class=\"sy0\">&lt;-</span> replicateM popsize <span class=\"br0\">(</span>mutate parent mr<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> child <span class=\"sy0\">=</span> maximumBy <span class=\"br0\">(</span>comparing fitness<span class=\"br0\">)</span> <span class=\"br0\">(</span>parent:children<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> fitness child <span class=\"sy0\">==</span> pfit <span class=\"kw1\">then</span> printRes gen child<br/>                           <span class=\"kw1\">else</span> evolve child <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a> gen<span class=\"br0\">)</span> mr<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> target<br/>  genes <span class=\"sy0\">&lt;-</span> replicateM r <span class=\"sy0\">$</span> randomRIO <span class=\"br0\">(</span>bounds charSet<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> parent <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>charSet<span class=\"sy0\">!</span><span class=\"br0\">)</span> genes<br/>  evolve parent <span class=\"nu0\">1</span> mutateRate</pre>"}, {"lang": "Icon and Unicon", "loc": 52, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw2\">global</span> target<span class=\"sy1\">,</span> chars<span class=\"sy1\">,</span> <span class=\"kw4\">parent</span><span class=\"sy1\">,</span> C<span class=\"sy1\">,</span> M<span class=\"sy1\">,</span> current_fitness<br/>\u00a0<br/><span class=\"kw1\">procedure</span> fitness<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\tfit <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"co1\">#Increment the fitness for every position in the string s that matches the target</span><br/>\t<span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>target <span class=\"sy1\">&amp;</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">==</span> target<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span> fit <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> fit<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mutate<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t<span class=\"co1\">#If a random number between 0 and 1 is inside the bounds of mutation randomly alter a character in the string </span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">?</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> M<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"sy1\">?</span>s <span class=\"sy1\">:=</span> <span class=\"sy1\">?</span>chars<br/>\t<span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> generation<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tpopulation <span class=\"sy1\">:=</span> <span class=\"br0\">[</span> <span class=\"br0\">]</span><br/>\tnext_parent <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>\tnext_fitness <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/>\t<span class=\"co1\">#Create the next population</span><br/>\t<span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> C <span class=\"kw1\">do</span> <span class=\"kw4\">push</span><span class=\"br0\">(</span>population<span class=\"sy1\">,</span> mutate<span class=\"br0\">(</span><span class=\"kw4\">parent</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">#Find the member of the population with highest fitness, or use the last one inspected</span><br/>\t<span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>population <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span>xf <span class=\"sy1\">:=</span> fitness<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> next_fitness <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\tnext_parent <span class=\"sy1\">:=</span> x<br/>\t\tnext_fitness <span class=\"sy1\">:=</span> xf<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">parent</span> <span class=\"sy1\">:=</span> next_parent<br/>\u00a0<br/>\t<span class=\"kw1\">return</span> next_fitness<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\ttarget <span class=\"sy1\">:=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span>\t\t\t<span class=\"co1\">#Our target string</span><br/>\tchars <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">ucase</span> <span class=\"sy1\">++</span> <span class=\"st0\">\" \"</span>\t\t\t\t\t\t<span class=\"co1\">#Set of usable characters</span><br/>\t<span class=\"kw4\">parent</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">&amp;</span> <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>target <span class=\"kw1\">do</span> <span class=\"kw4\">parent</span> <span class=\"sy1\">||:=</span> <span class=\"sy1\">?</span>chars\t\t<span class=\"co1\">#The universal common ancestor!</span><br/>\tcurrent_fitness <span class=\"sy1\">:=</span> fitness<span class=\"br0\">(</span><span class=\"kw4\">parent</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">#The best fitness we have so far</span><br/>\u00a0<br/>\u00a0<br/>\tC <span class=\"sy1\">:=</span> <span class=\"nu0\">50</span>\t\t<span class=\"co1\">#Population size in each generation</span><br/>\tM <span class=\"sy1\">:=</span> <span class=\"nu0\">0.5</span>\t<span class=\"co1\">#Mutation rate per individual in a generation</span><br/>\u00a0<br/>\tgen <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"co1\">#Until current fitness reaches a score of perfect match with the target string keep generating new populations</span><br/>\t<span class=\"kw1\">until</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>current_fitness <span class=\"sy1\">:=</span> generation<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"sy1\">*</span>target<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">write</span><span class=\"br0\">(</span>gen <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> current_fitness <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">parent</span><span class=\"br0\">)</span><br/>                gen <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span> \t<br/>\t<span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"At generation \"</span> <span class=\"sy1\">||</span> gen <span class=\"sy1\">||</span> <span class=\"st0\">\" we found a string with perfect fitness at \"</span> <span class=\"sy1\">||</span> current_fitness <span class=\"sy1\">||</span> <span class=\"st0\">\" reading: \"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">parent</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">CHARSET=: <span class=\"st_h\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ '</span><br/>NPROG=:   <span class=\"nu0\">100</span>                            <span class=\"co1\">NB. number of progeny (C)</span><br/>MRATE=:   <span class=\"nu0\">0.05</span>                           <span class=\"co1\">NB. mutation rate</span><br/>\u00a0<br/>create  =: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"695629\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$&amp;$ { ]<span class=\"sy0\">)</span>&amp;CHARSET           <span class=\"co1\">NB. creates random list from charset of same shape as y</span><br/>fitness =: +/@:~:\"<span class=\"nu0\">1</span><br/>copy    =: # ,:<br/>mutate  =: &amp;<span class=\"sy0\">(</span>&gt;: $\u00a0<a class=\"__cf_email__\" data-cfemail=\"132c53\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$ 0:<span class=\"sy0\">)(</span>`<span class=\"sy0\">(</span>,: create<span class=\"sy0\">))</span>} <span class=\"co1\">NB. adverb</span><br/>select  =: ] {~ <span class=\"sy0\">(</span>i. &lt;./<span class=\"sy0\">)</span>@:fitness        <span class=\"co1\">NB. select fittest member of population</span><br/>\u00a0<br/>nextgen =: select ] , [: MRATE mutate NPROG copy ]<br/>while   =: conjunction def <span class=\"st_h\">'(] , (u {:))^:(v {:)^:_ ,:'</span><br/>\u00a0<br/>evolve=: nextgen while <span class=\"sy0\">(</span><span class=\"nu0\">0</span> &lt; fitness<span class=\"sy0\">)</span> create</pre>"}, {"lang": "Java", "loc": 59, "block": "<pre class=\"java5 highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> EvoAlgo <span class=\"br0\">{</span><br/>  <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> target = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> possibilities = <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> C = <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"co1\">//number of spawn per generation</span><br/>  <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> minMutateRate = <span class=\"nu0\">0.09</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> perfectFitness = target.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> parent<span class=\"sy0\">;</span><br/>  <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Random.html\"><span class=\"kw46\">Random</span></a> rand = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Random.html\"><span class=\"kw46\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> fitness<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> trial<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw3\">int</span> retVal = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> trial.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trial.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> == target.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> retVal++<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> retVal<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> newMutateRate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>perfectFitness - fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span> / perfectFitness <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> - minMutateRate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> mutate<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> parent, <span class=\"kw3\">double</span> rate<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> retVal = <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> parent.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      retVal += <span class=\"br0\">(</span>rand.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= rate<span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>        possibilities<span class=\"br0\">[</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>possibilities.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span>:<br/>        parent.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> retVal<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    parent = mutate<span class=\"br0\">(</span>target, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">int</span> iter = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>target.<span class=\"me1\">equals</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw3\">double</span> rate = newMutateRate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      iter++<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>iter <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>iter +<span class=\"st0\">\": \"</span>+parent+ <span class=\"st0\">\", fitness: \"</span>+fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span>+<span class=\"st0\">\", rate: \"</span>+rate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> bestSpawn = <span class=\"kw4\">null</span><span class=\"sy0\">;</span><br/>      <span class=\"kw3\">int</span> bestFit = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> C<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> spawn = mutate<span class=\"br0\">(</span>parent, rate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> fitness = fitness<span class=\"br0\">(</span>spawn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>fitness <span class=\"sy0\">&gt;</span> bestFit<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          bestSpawn = spawn<span class=\"sy0\">;</span><br/>          bestFit = fitness<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      parent = bestFit <span class=\"sy0\">&gt;</span> fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"sy0\">?</span> bestSpawn\u00a0: parent<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>parent+<span class=\"st0\">\", \"</span>+iter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 230, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// ------------------------------------- Cross-browser Compatibility -------------------------------------</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Compatibility code to reduce an array<br/> * Source: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce<br/> */</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">reduce</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">reduce</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>fun <span class=\"coMULTI\">/*, initialValue */</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"use strict\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"sy0\">===</span> <span class=\"kw1\">void</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"kw1\">this</span> <span class=\"sy0\">===</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> TypeError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> t <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> len <span class=\"sy0\">=</span> t.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> fun <span class=\"sy0\">!==</span> <span class=\"st0\">\"function\"</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> TypeError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// no value to return if no initial value and an empty array</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> arguments.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> TypeError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> accumulator<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arguments.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            accumulator <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"kw1\">in</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    accumulator <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>k<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">// if array contains no values, no initial value to return</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>k <span class=\"sy0\">&gt;=</span> len<span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> TypeError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        while <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"kw1\">in</span> t<span class=\"br0\">)</span> accumulator <span class=\"sy0\">=</span> fun.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"kw2\">undefined</span><span class=\"sy0\">,</span> accumulator<span class=\"sy0\">,</span> t<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            k<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> accumulator<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Compatibility code to map an array<br/> * Source: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map<br/> */</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">map</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">map</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>fun <span class=\"coMULTI\">/*, thisp */</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"use strict\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"sy0\">===</span> <span class=\"kw1\">void</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"kw1\">this</span> <span class=\"sy0\">===</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> TypeError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> t <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> len <span class=\"sy0\">=</span> t.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> fun <span class=\"sy0\">!==</span> <span class=\"st0\">\"function\"</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> TypeError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> res <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> thisp <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> t<span class=\"br0\">)</span> res<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> fun.<span class=\"me1\">call</span><span class=\"br0\">(</span>thisp<span class=\"sy0\">,</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------- Generator -------------------------------------<br/> * Generates a fixed length gene sequence via a gene strategy object.<br/> * The gene strategy object must have two functions:<br/> *\t- \"create\": returns create a new gene <br/> *\t- \"mutate(existingGene)\": returns mutation of an existing gene  <br/> */</span><br/><span class=\"kw1\">function</span> Generator<span class=\"br0\">(</span>length<span class=\"sy0\">,</span> mutationRate<span class=\"sy0\">,</span> geneStrategy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">size</span> <span class=\"sy0\">=</span> length<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">mutationRate</span> <span class=\"sy0\">=</span> mutationRate<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">geneStrategy</span> <span class=\"sy0\">=</span> geneStrategy<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Generator.<span class=\"kw1\">prototype</span>.<span class=\"me1\">spawn</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> genes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">size</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        genes.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">geneStrategy</span>.<span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> genes<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Generator.<span class=\"kw1\">prototype</span>.<span class=\"me1\">mutate</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> parent.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"kw5\">char</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">mutationRate</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw5\">char</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">geneStrategy</span>.<span class=\"me1\">mutate</span><span class=\"br0\">(</span><span class=\"kw5\">char</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------- Population -------------------------------------<br/> * Helper class that holds and spawns a new population.<br/> */</span><br/><span class=\"kw1\">function</span> Population<span class=\"br0\">(</span>size<span class=\"sy0\">,</span> generator<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">size</span> <span class=\"sy0\">=</span> size<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">generator</span> <span class=\"sy0\">=</span> generator<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">population</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Build initial popuation;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">size</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">population</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">generator</span>.<span class=\"me1\">spawn</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Population.<span class=\"kw1\">prototype</span>.<span class=\"me1\">spawn</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">population</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">size</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">population</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">generator</span>.<span class=\"me1\">mutate</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------- Evolver -------------------------------------<br/> * Attempts to converge a population based a fitness strategy object.<br/> * The fitness strategy object must have three function  <br/> *\t- \"score(individual)\": returns a score for an individual.<br/> *\t- \"compare(scoreA, scoreB)\": return true if scoreA is better (ie more fit) then scoreB<br/> *\t- \"done( score )\": return true if score is acceptable (ie we have successfully converged). <br/> */</span><br/><span class=\"kw1\">function</span> Evolver<span class=\"br0\">(</span>size<span class=\"sy0\">,</span> generator<span class=\"sy0\">,</span> fitness<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">done</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">fitness</span> <span class=\"sy0\">=</span> fitness<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">population</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Population<span class=\"br0\">(</span>size<span class=\"sy0\">,</span> generator<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Evolver.<span class=\"kw1\">prototype</span>.<span class=\"me1\">getFittest</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">population</span>.<span class=\"me1\">population</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>best<span class=\"sy0\">,</span> individual<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> currentScore <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">fitness</span>.<span class=\"me1\">score</span><span class=\"br0\">(</span>individual<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>best <span class=\"sy0\">===</span> <span class=\"kw2\">null</span> <span class=\"sy0\">||</span> <span class=\"kw1\">this</span>.<span class=\"me1\">fitness</span>.<span class=\"me1\">compare</span><span class=\"br0\">(</span>currentScore<span class=\"sy0\">,</span> best.<span class=\"me1\">score</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                score<span class=\"sy0\">:</span> currentScore<span class=\"sy0\">,</span><br/>                individual<span class=\"sy0\">:</span> individual<br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> best<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Evolver.<span class=\"kw1\">prototype</span>.<span class=\"me1\">doGeneration</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">fittest</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">getFittest</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">done</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">fitness</span>.<span class=\"me1\">done</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">fittest</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">this</span>.<span class=\"me1\">done</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">population</span>.<span class=\"me1\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">fittest</span>.<span class=\"me1\">individual</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Evolver.<span class=\"kw1\">prototype</span>.<span class=\"me1\">run</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>onCheckpoint<span class=\"sy0\">,</span> checkPointFrequency<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    checkPointFrequency <span class=\"sy0\">=</span> checkPointFrequency <span class=\"sy0\">||</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"co1\">// Default to Checkpoints every 10 generations</span><br/>    <span class=\"kw1\">var</span> generation <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">this</span>.<span class=\"me1\">done</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">doGeneration</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>generation <span class=\"sy0\">%</span> checkPointFrequency <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            onCheckpoint<span class=\"br0\">(</span>generation<span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">fittest</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        generation <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    onCheckpoint<span class=\"br0\">(</span>generation<span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">fittest</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">fittest</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// ------------------------------------- Exports -------------------------------------</span><br/>window.<span class=\"me1\">Generator</span> <span class=\"sy0\">=</span> Generator<span class=\"sy0\">;</span><br/>window.<span class=\"me1\">Evolver</span> <span class=\"sy0\">=</span> Evolver<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// helper utitlity to combine elements of two arrays.</span><br/><span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">zip</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        max <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span> b.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> max<span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result.<span class=\"me1\">push</span><span class=\"br0\">(</span>func<span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">,</span> geneStrategy<span class=\"sy0\">,</span> fitness<span class=\"sy0\">,</span> target<span class=\"sy0\">,</span> generator<span class=\"sy0\">,</span> evolver<span class=\"sy0\">,</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>geneStrategy <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// The allowed character set (as an array) </span><br/>    characterSet<span class=\"sy0\">:</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>        Pick a random character from the characterSet<br/>    */</span><br/>    create<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> getRandomGene<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> randomNumber <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw1\">this</span>.<span class=\"me1\">characterSet</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">characterSet</span><span class=\"br0\">[</span>randomNumber<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>geneStrategy.<span class=\"me1\">mutate</span> <span class=\"sy0\">=</span> geneStrategy.<span class=\"me1\">create</span><span class=\"sy0\">;</span> <span class=\"co1\">// Our mutation stragtegy is to simply get a random gene</span><br/>fitness <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// The target (as an array of characters)</span><br/>    target<span class=\"sy0\">:</span> target.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    equal<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>geneA<span class=\"sy0\">,</span> geneB<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>geneA <span class=\"sy0\">===</span> geneB <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    sum<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>runningTotal<span class=\"sy0\">,</span> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> runningTotal <span class=\"sy0\">+</span> value<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>        We give one point to for each corect letter<br/>    */</span><br/>    score<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>genes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> diff <span class=\"sy0\">=</span> genes.<span class=\"me1\">zip</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">target</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">equal</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// create an array of ones and zeros </span><br/>        <span class=\"kw1\">return</span> diff.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">sum</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Sum the array values together.</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    compare<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>scoreA<span class=\"sy0\">,</span> scoreB<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> scoreA <span class=\"sy0\">&lt;=</span> scoreB<span class=\"sy0\">;</span> <span class=\"co1\">// Lower scores are better</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    done<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>score<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> score <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// We have matched the target string.</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>generator <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Generator<span class=\"br0\">(</span>target.<span class=\"me1\">length</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.05</span><span class=\"sy0\">,</span> geneStrategy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>evolver <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Evolver<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> generator<span class=\"sy0\">,</span> fitness<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> showProgress<span class=\"br0\">(</span>generation<span class=\"sy0\">,</span> fittest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation: \"</span> <span class=\"sy0\">+</span> generation <span class=\"sy0\">+</span> <span class=\"st0\">\", Best: \"</span> <span class=\"sy0\">+</span> fittest.<span class=\"me1\">individual</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", fitness:\"</span> <span class=\"sy0\">+</span> fittest.<span class=\"me1\">score</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"&lt;br&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>result <span class=\"sy0\">=</span> evolver.<span class=\"me1\">run</span><span class=\"br0\">(</span>showProgress<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\">fitness(a::AbstractString, b::AbstractString) = count(l == t for (l, t) in zip(a, b))<br/>function mutate(str::AbstractString, rate::Float64)<br/>    L = collect(Char, \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\")<br/>    return map(str) do c<br/>        if rand() &lt; rate rand(L) else c end<br/>    end<br/>end<br/>\u00a0<br/>function evolve(parent::String, target::String, mutrate::Float64, nchild::Int)<br/>    println(\"Initial parent is $parent, its fitness is $(fitness(parent, target))\")<br/>    gens = 0<br/>    while parent\u00a0!= target<br/>        children = collect(mutate(parent, mutrate) for i in 1:nchild)<br/>        bestfit, best = findmax(fitness.(children, target))<br/>        parent = children[best]<br/>        gens += 1<br/>        if gens\u00a0% 10 == 0<br/>            println(\"After $gens generations, the new parent is $parent and its fitness is $(fitness(parent, target))\")<br/>        end<br/>    end<br/>    println(\"After $gens generations, the parent evolved into the target $target\")<br/>end<br/>\u00a0<br/>evolve(\"IU RFSGJABGOLYWF XSMFXNIABKT\", \"METHINKS IT IS LIKE A WEASEL\", 0.08998, 100)</pre>"}, {"lang": "Kotlin", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> validChars <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> random <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun randomChar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> validChars<span class=\"br0\">[</span>random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>validChars.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>fun hammingDistance<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String, s2<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        s1.<span class=\"me1\">zip</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>it.<span class=\"me1\">first</span> <span class=\"sy0\">==</span> it.<span class=\"me1\">second</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun fitness<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> target.<span class=\"me1\">length</span> - hammingDistance<span class=\"br0\">(</span>s1, target<span class=\"br0\">)</span><br/>\u00a0<br/>fun mutate<span class=\"br0\">(</span>s1<span class=\"sy0\">:</span> String, mutationRate<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        s1.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>random.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> mutationRate<span class=\"br0\">)</span> it <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> randomChar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                .<span class=\"me1\">joinToString</span><span class=\"br0\">(</span>separator <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> initialString <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> until target.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> randomChar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span>separator <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>initialString<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>mutate<span class=\"br0\">(</span>initialString, <span class=\"nu0\">0.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mutationRate <span class=\"sy0\">=</span> <span class=\"nu0\">0.05</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> childrenPerGen <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> currVal <span class=\"sy0\">=</span> initialString<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>currVal <span class=\"sy0\">!=</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        currVal <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">childrenPerGen</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> mutate<span class=\"br0\">(</span>currVal, mutationRate<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">maxBy</span> <span class=\"br0\">{</span> fitness<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">!!</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Evolution found target after $i generations\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 69, "block": "<pre class=\"lb highlighted_source\">C <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><span class=\"co1\">'mutaterate has to be greater than 1 or it will not mutate</span><br/>mutaterate <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>mutationstaken <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>generations <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">Dim</span> parentcopies$<span class=\"br0\">(</span><span class=\"br0\">(</span>C <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Global</span> targetString$ <span class=\"sy0\">:</span> targetString$ <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><span class=\"kw1\">Global</span> allowableCharacters$ <span class=\"sy0\">:</span> allowableCharacters$ <span class=\"sy0\">=</span> <span class=\"st0\">\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><br/>currentminFitness <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>targetString$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>targetString$<span class=\"br0\">)</span><br/>    parent$ <span class=\"sy0\">=</span> parent$ <span class=\"sy0\">+</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>allowableCharacters$<span class=\"sy0\">,</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>allowableCharacters$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Parent = \"</span> <span class=\"sy0\">+</span> parent$<br/>\u00a0<br/><span class=\"kw1\">While</span> parent$ <span class=\"sy0\">&lt;&gt;</span> targetString$<br/>    generations <span class=\"sy0\">=</span> <span class=\"br0\">(</span>generations <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>C <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        parentcopies$<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> mutate$<span class=\"br0\">(</span>parent$<span class=\"sy0\">,</span> mutaterate<span class=\"br0\">)</span><br/>        mutationstaken <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mutationstaken <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>C <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        currentFitness <span class=\"sy0\">=</span> Fitness<span class=\"br0\">(</span>targetString$<span class=\"sy0\">,</span> parentcopies$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> currentFitness <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            parent$ <span class=\"sy0\">=</span> parentcopies$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">Else</span><br/>            <span class=\"kw1\">If</span> currentFitness <span class=\"sy0\">&lt;</span> currentminFitness <span class=\"kw1\">Then</span><br/>                currentminFitness <span class=\"sy0\">=</span> currentFitness<br/>                parent$ <span class=\"sy0\">=</span> parentcopies$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">CLS</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Generation - \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>generations<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Parent - \"</span> <span class=\"sy0\">+</span> parent$<br/>    <span class=\"kw1\">Scan</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Congratulations to me; I finished!\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Final Mutation: \"</span> <span class=\"sy0\">+</span> parent$<br/><span class=\"co1\">'The ((i + 1) - (C)) reduces the total number of mutations that it took by one generation</span><br/><span class=\"co1\">'minus the perfect child mutation since any after that would not have been required.</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Total Mutations Taken - \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>mutationstaken <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Total Generations Taken - \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>generations<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Child Number \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" has perfect similarities to your target.\"</span><br/><span class=\"kw1\">End</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Function</span> mutate$<span class=\"br0\">(</span>mutate$<span class=\"sy0\">,</span> mutaterate<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> mutaterate<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            <span class=\"co1\">'The mutatingcharater randomizer needs 1 more than the length of the string</span><br/>            <span class=\"co1\">'otherwise it will likely take forever to get exactly that as a random number</span><br/>            mutatingcharacter <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>targetString$<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            mutate$ <span class=\"sy0\">=</span> <span class=\"kw2\">Left$</span><span class=\"br0\">(</span>mutate$<span class=\"sy0\">,</span> <span class=\"br0\">(</span>mutatingcharacter <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"sy0\">+</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>allowableCharacters$<span class=\"sy0\">,</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>allowableCharacters$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> _<br/>                      <span class=\"sy0\">+</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>mutate$<span class=\"sy0\">,</span> <span class=\"br0\">(</span>mutatingcharacter <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Fitness<span class=\"br0\">(</span>parent$<span class=\"sy0\">,</span> offspring$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>targetString$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>parent$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>offspring$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>            Fitness <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Fitness <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Logo", "loc": 44, "block": "<pre class=\"text highlighted_source\">make \"target \"|METHINKS IT IS LIKE A WEASEL|<br/>\u00a0<br/>to distance\u00a0:w<br/>  output reduce \"sum (map.se [ifelse equal?\u00a0?1\u00a0?2 [0][1]]\u00a0:w\u00a0:target)<br/>end<br/>\u00a0<br/>to random.letter<br/>  output pick \"| ABCDEFGHIJKLMNOPQRSTUVWXYZ|<br/>end<br/>\u00a0<br/>to mutate\u00a0:parent\u00a0:rate<br/>  output map [ifelse random 100 &lt;\u00a0:rate [random.letter] [?]]\u00a0:parent<br/>end<br/>\u00a0<br/>make \"C 100<br/>make \"mutate.rate 10    \u00a0; percent<br/>\u00a0<br/>to breed\u00a0:parent<br/>  make \"parent.distance distance\u00a0:parent<br/>  localmake \"best.child\u00a0:parent<br/>  repeat\u00a0:C [<br/>    localmake \"child mutate\u00a0:parent\u00a0:mutate.rate<br/>    localmake \"child.distance distance\u00a0:child<br/>    if greater?\u00a0:parent.distance\u00a0:child.distance [<br/>      make \"parent.distance\u00a0:child.distance<br/>      make \"best.child\u00a0:child<br/>    ]<br/>  ]<br/>  output\u00a0:best.child<br/>end<br/>\u00a0<br/>to progress<br/>  output (sentence\u00a0:trials\u00a0:parent \"distance:\u00a0:parent.distance)<br/>end<br/>\u00a0<br/>to evolve<br/>  make \"parent cascade count\u00a0:target [lput random.letter\u00a0?] \"||<br/>  make \"trials 0<br/>  while [not equal?\u00a0:parent\u00a0:target] [<br/>    make \"parent breed\u00a0:parent<br/>    print progress<br/>    make \"trials\u00a0:trials + 1<br/>  ]<br/>end</pre>"}, {"lang": "Lua", "loc": 52, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><span class=\"kw1\">local</span> alphabet <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/><span class=\"kw1\">local</span> c<span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.06</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> fitness<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> score <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>target<br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,#</span>target <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> s<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> target<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> score <span class=\"sy0\">=</span> score <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> score<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> mutate<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> rate<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result<span class=\"sy0\">,</span> idx <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,#</span>s <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> rate <span class=\"kw1\">then</span><br/>\t\t\tidx <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"sy0\">#</span>alphabet<span class=\"br0\">)</span><br/>\t\t\tresult <span class=\"sy0\">=</span> result <span class=\"sy0\">..</span> alphabet<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>idx<span class=\"sy0\">,</span>idx<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tresult <span class=\"sy0\">=</span> result <span class=\"sy0\">..</span> s<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy0\">,</span> fitness<span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> randomString<span class=\"br0\">(</span>len<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> result<span class=\"sy0\">,</span> idx <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>len <span class=\"kw1\">do</span><br/>\t\tidx <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"sy0\">#</span>alphabet<span class=\"br0\">)</span><br/>\t\tresult <span class=\"sy0\">=</span> result <span class=\"sy0\">..</span> alphabet<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>idx<span class=\"sy0\">,</span>idx<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> printStep<span class=\"br0\">(</span>step<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> fit<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"%04d: \"</span><span class=\"sy0\">,</span> step<span class=\"br0\">)</span> <span class=\"sy0\">..</span> s <span class=\"sy0\">..</span> <span class=\"st0\">\" [\"</span> <span class=\"sy0\">..</span> fit <span class=\"sy0\">..</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> parent <span class=\"sy0\">=</span> randomString<span class=\"br0\">(</span><span class=\"sy0\">#</span>target<span class=\"br0\">)</span><br/>printStep<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> parent<span class=\"sy0\">,</span> fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> step <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> parent <span class=\"sy0\">~=</span> target <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">local</span> bestFitness<span class=\"sy0\">,</span> bestChild<span class=\"sy0\">,</span> child<span class=\"sy0\">,</span> fitness <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>target <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>c <span class=\"kw1\">do</span><br/>\t\tchild<span class=\"sy0\">,</span> fitness <span class=\"sy0\">=</span> mutate<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> fitness <span class=\"sy0\">&lt;</span> bestFitness <span class=\"kw1\">then</span> bestFitness<span class=\"sy0\">,</span> bestChild <span class=\"sy0\">=</span> fitness<span class=\"sy0\">,</span> child <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\tparent<span class=\"sy0\">,</span> step <span class=\"sy0\">=</span> bestChild<span class=\"sy0\">,</span> step <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\tprintStep<span class=\"br0\">(</span>step<span class=\"sy0\">,</span> parent<span class=\"sy0\">,</span> bestFitness<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 22, "block": "<pre class=\"text highlighted_source\">target = \"METHINKS IT IS LIKE A WEASEL\";<br/>alphabet = CharacterRange[\"A\", \"Z\"]~Join~{\" \"};<br/>fitness = HammingDistance[target, #] &amp;;<br/>Mutate[parent_String, rate_: 0.01, fertility_Integer: 25]\u00a0:= Module[<br/>   {offspring, kidfits, gen = 0, alphabet = CharacterRange[\"A\", \"Z\"]~Join~{\" \"}},<br/>   offspring = ConstantArray[Characters[parent], fertility];<br/>   Table[<br/>    If[RandomReal[] &lt;= rate, offspring[[j, k]] = RandomChoice[alphabet]],<br/>    {j, fertility}, {k, <a class=\"__cf_email__\" data-cfemail=\"aefddadcc7c0c9e2cbc0c9dac6eedecfdccbc0da\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}<br/>    ];<br/>   offspring = StringJoin[#] &amp; /@ offspring;<br/>   kidfits = fitness[#] &amp; /@ Flatten[{offspring, parent}];<br/>   Return[offspring[[<a class=\"__cf_email__\" data-cfemail=\"b0f6d9c2c3c4f0ffc2d4d5c2d9ded7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[kidfits]]]];<br/>   ];<br/>\u00a0<br/>mutationRate = 0.02;<br/>parent = StringJoin[ alphabet[[RandomInteger[{1, <a class=\"__cf_email__\" data-cfemail=\"1559707b72617d557479657d74777061\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}, <a class=\"__cf_email__\" data-cfemail=\"8eddfafce7e0e9c2ebe0e9fae6cefaeffce9ebfa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]]] ];<br/>results = NestWhileList[Mutate[#, mutationRate, 100] &amp;, parent, fitness[#] &gt; 0 &amp;];<br/>fits = fitness[#] &amp; /@ results;<br/>results = Transpose[{results, fits}];<br/>TableForm[results[[;;\u00a0;; 2]], TableHeadings-&gt;{Range[1, <a class=\"__cf_email__\" data-cfemail=\"713d141f16051931031402041d0502\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, 2],{\"String\",\"Fitness\"}}, TableSpacing -&gt; {1, 2}]<br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 220, "block": "<pre class=\"matlab highlighted_source\"><span class=\"co1\">%This class impliments a string that mutates to a target</span><br/>classdef EvolutionaryAlgorithm<br/>\u00a0<br/>    properties<br/>\u00a0<br/>        target;<br/>        parent;<br/>        children = <span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>        validAlphabet;<br/>\u00a0<br/>        <span class=\"co1\">%Constants</span><br/>        numChildrenPerIteration;<br/>        maxIterations;<br/>        mutationRate;<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    methods<br/>\u00a0<br/>        <span class=\"co1\">%Class constructor</span><br/>        <span class=\"kw1\">function</span> family = EvolutionaryAlgorithm<span class=\"br0\">(</span>target,mutationRate,numChildren,maxIterations<span class=\"br0\">)</span><br/>\u00a0<br/>            family.<span class=\"me1\">validAlphabet</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">32</span> <span class=\"br0\">(</span><span class=\"nu0\">65</span>:<span class=\"nu0\">90</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>; <span class=\"co1\">%Space char and A-Z</span><br/>            family.<span class=\"me1\">target</span> = target;<br/>            family.<span class=\"me1\">children</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cell.html\"><span class=\"kw2\">cell</span></a><span class=\"br0\">(</span>numChildren,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            family.<span class=\"me1\">numChildrenPerIteration</span> = numChildren;<br/>            family.<span class=\"me1\">maxIterations</span> = maxIterations;<br/>            family.<span class=\"me1\">mutationRate</span> = mutationRate;<br/>            initialize<span class=\"br0\">(</span>family<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%class constructor</span><br/>\u00a0<br/>        <span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>        <span class=\"co1\">%Helper functions and class get/set functions</span><br/>        <span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>\u00a0<br/>        <span class=\"co1\">%setAlphabet() - sets the valid alphabet for the current instance</span><br/>        <span class=\"co1\">%of the EvolutionaryAlgorithm class.</span><br/>        <span class=\"kw1\">function</span> setAlphabet<span class=\"br0\">(</span>family,alphabet<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>ischar<span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                family.<span class=\"me1\">validAlphabet</span> = alphabet;<br/>\u00a0<br/>                <span class=\"co1\">%Makes change permanent</span><br/>                assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>; <br/>            <span class=\"kw1\">else</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'New alphabet must be a string or character array'</span>;<br/>            <span class=\"kw1\">end</span>            <br/>\u00a0<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%setTarget() - sets the target for the current instance</span><br/>        <span class=\"co1\">%of the EvolutionaryAlgorithm class.</span><br/>        <span class=\"kw1\">function</span> setTarget<span class=\"br0\">(</span>family,target<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>ischar<span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                family.<span class=\"me1\">target</span> = target;<br/>\u00a0<br/>                <span class=\"co1\">%Makes change permanent</span><br/>                assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>; <br/>            <span class=\"kw1\">else</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'New target must be a string or character array'</span>;<br/>            <span class=\"kw1\">end</span>            <br/>\u00a0<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%setMutationRate() - sets the mutation rate for the current instance</span><br/>        <span class=\"co1\">%of the EvolutionaryAlgorithm class.</span><br/>        <span class=\"kw1\">function</span> setMutationRate<span class=\"br0\">(</span>family,mutationRate<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>isnumeric<span class=\"br0\">(</span>mutationRate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                family.<span class=\"me1\">mutationRate</span> = mutationRate;<br/>\u00a0<br/>                <span class=\"co1\">%Makes change permanent</span><br/>                assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>; <br/>            <span class=\"kw1\">else</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'New mutation rate must be a double precision number'</span>;<br/>            <span class=\"kw1\">end</span>            <br/>\u00a0<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%setMaxIterations() - sets the maximum number of iterations during</span><br/>        <span class=\"co1\">%evolution for the current instance of the EvolutionaryAlgorithm class.</span><br/>        <span class=\"kw1\">function</span> setMaxIterations<span class=\"br0\">(</span>family,maxIterations<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>isnumeric<span class=\"br0\">(</span>maxIterations<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                family.<span class=\"me1\">maxIterations</span> = maxIterations;<br/>\u00a0<br/>                <span class=\"co1\">%Makes change permanent</span><br/>                assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>; <br/>            <span class=\"kw1\">else</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'New maximum amount of iterations must be a double precision number'</span>;<br/>            <span class=\"kw1\">end</span>            <br/>\u00a0<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%display() - overrides the built-in MATLAB display() function, to</span><br/>        <span class=\"co1\">%display the important class variables</span><br/>        <span class=\"kw1\">function</span> display<span class=\"br0\">(</span>family<span class=\"br0\">)</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Target:\u00a0%s\\n'</span>,family.<span class=\"me1\">target</span><span class=\"br0\">)</span><span class=\"sy0\">...</span><br/>                  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Parent:\u00a0%s\\n'</span>,family.<span class=\"me1\">parent</span><span class=\"br0\">)</span><span class=\"sy0\">...</span><br/>                  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Valid Alphabet:\u00a0%s\\n'</span>,family.<span class=\"me1\">validAlphabet</span><span class=\"br0\">)</span><span class=\"sy0\">...</span><br/>                  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Number of Children:\u00a0%d\\n'</span>,family.<span class=\"me1\">numChildrenPerIteration</span><span class=\"br0\">)</span><span class=\"sy0\">...</span><br/>                  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Mutation Rate [0,1]:\u00a0%d\\n'</span>,family.<span class=\"me1\">mutationRate</span><span class=\"br0\">)</span><span class=\"sy0\">...</span><br/>                  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Maximum Iterations:\u00a0%d\\n'</span>,family.<span class=\"me1\">maxIterations</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;                 <br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%disp() - overrides the built-in MATLAB disp() function, to</span><br/>        <span class=\"co1\">%display the important class variables</span><br/>        <span class=\"kw1\">function</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>family<span class=\"br0\">)</span><br/>            display<span class=\"br0\">(</span>family<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%randAlphabetElement() - Generates a random character from the</span><br/>        <span class=\"co1\">%valid alphabet for the current instance of the class.</span><br/>        <span class=\"kw1\">function</span> elements = randAlphabetElements<span class=\"br0\">(</span>family,numChars<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"co1\">%Sample the valid alphabet randomly from the uniform</span><br/>            <span class=\"co1\">%distribution</span><br/>            N = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>family.<span class=\"me1\">validAlphabet</span><span class=\"br0\">)</span>;<br/>            choices = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span>N*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,numChars<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            elements = family.<span class=\"me1\">validAlphabet</span><span class=\"br0\">(</span>choices<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%initialize() - Sets the parent to a random string of length equal</span><br/>        <span class=\"co1\">%to the length of the target</span><br/>        <span class=\"kw1\">function</span> parent = initialize<span class=\"br0\">(</span>family<span class=\"br0\">)</span><br/>\u00a0<br/>            family.<span class=\"me1\">parent</span> = randAlphabetElements<span class=\"br0\">(</span>family,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>family.<span class=\"me1\">target</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            parent = family.<span class=\"me1\">parent</span>;<br/>\u00a0<br/>            <span class=\"co1\">%Makes changes to the instance of EvolutionaryAlgorithm permanent</span><br/>            assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>; <br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%initialize</span><br/>\u00a0<br/>        <span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>        <span class=\"co1\">%Functions required by task specification</span><br/>        <span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/>\u00a0<br/>        <span class=\"co1\">%mutate() - generates children from the parent and mutates them</span><br/>        <span class=\"kw1\">function</span> mutate<span class=\"br0\">(</span>family<span class=\"br0\">)</span><br/>\u00a0<br/>            sizeParent = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>family.<span class=\"me1\">parent</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"co1\">%Generate mutatant children sequentially</span><br/>            <span class=\"kw1\">for</span> child = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:family.<span class=\"me1\">numChildrenPerIteration</span><span class=\"br0\">)</span><br/>\u00a0<br/>                parentCopy = family.<span class=\"me1\">parent</span>;<br/>\u00a0<br/>                <span class=\"kw1\">for</span> charIndex = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:sizeParent<span class=\"br0\">)</span> <br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt; family.<span class=\"me1\">mutationRate</span><span class=\"br0\">)</span><br/>                        parentCopy<span class=\"br0\">(</span>charIndex<span class=\"br0\">)</span> = randAlphabetElements<span class=\"br0\">(</span>family,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">end</span><br/>                <span class=\"kw1\">end</span><br/>\u00a0<br/>                family.<span class=\"me1\">children</span><span class=\"br0\">{</span>child<span class=\"br0\">}</span> = parentCopy;<br/>\u00a0<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"co1\">%Makes changes to the instance of EvolutionaryAlgorithm permanent</span><br/>            assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>;  <br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%mutate</span><br/>\u00a0<br/>        <span class=\"co1\">%fitness() - Computes the Hamming distance between the target</span><br/>        <span class=\"co1\">%string and the string input as the familyMember argument</span><br/>        <span class=\"kw1\">function</span> theFitness = fitness<span class=\"br0\">(</span>family,familyMember<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> not<span class=\"br0\">(</span>ischar<span class=\"br0\">(</span>familyMember<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'The second argument must be a string'</span>;<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            theFitness = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>family.<span class=\"me1\">target</span> == familyMember<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%evolve() - evolves the family until the target is reached or it </span><br/>        <span class=\"co1\">%exceeds the maximum amount of iterations        </span><br/>        <span class=\"kw1\">function</span> <span class=\"br0\">[</span>iteration,mostFitFitness<span class=\"br0\">]</span> = evolve<span class=\"br0\">(</span>family<span class=\"br0\">)</span><br/>\u00a0<br/>            iteration = <span class=\"nu0\">0</span>;<br/>            mostFitFitness = <span class=\"nu0\">0</span>;<br/>            targetFitness = fitness<span class=\"br0\">(</span>family,family.<span class=\"me1\">target</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"co2\">'Target fitness is '</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>targetFitness<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>mostFitFitness &lt; targetFitness<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>iteration &lt; family.<span class=\"me1\">maxIterations</span><span class=\"br0\">)</span><br/>\u00a0<br/>                iteration = iteration + <span class=\"nu0\">1</span>;<br/>\u00a0<br/>                mutate<span class=\"br0\">(</span>family<span class=\"br0\">)</span>;<br/>\u00a0<br/>                parentFitness = fitness<span class=\"br0\">(</span>family,family.<span class=\"me1\">parent</span><span class=\"br0\">)</span>;                <br/>                mostFit = family.<span class=\"me1\">parent</span>;<br/>                mostFitFitness = parentFitness;<br/>\u00a0<br/>                <span class=\"kw1\">for</span> child = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:family.<span class=\"me1\">numChildrenPerIteration</span><span class=\"br0\">)</span><br/>\u00a0<br/>                    childFitness = fitness<span class=\"br0\">(</span>family,family.<span class=\"me1\">children</span><span class=\"br0\">{</span>child<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">if</span> childFitness &gt; mostFitFitness<br/>                        mostFit = family.<span class=\"me1\">children</span><span class=\"br0\">{</span>child<span class=\"br0\">}</span>;<br/>                        mostFitFitness = childFitness;<br/>                    <span class=\"kw1\">end</span><br/>\u00a0<br/>                <span class=\"kw1\">end</span>               <br/>\u00a0<br/>                family.<span class=\"me1\">parent</span> = mostFit;<br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>iteration<span class=\"br0\">)</span> <span class=\"co2\">': '</span> mostFit <span class=\"co2\">' - Fitness: '</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>mostFitFitness<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"co1\">%Makes changes to the instance of EvolutionaryAlgorithm permanent</span><br/>            assignin<span class=\"br0\">(</span><span class=\"co2\">'caller'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inputname.html\"><span class=\"kw2\">inputname</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,family<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%evolve</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%methods</span><br/><span class=\"kw1\">end</span> <span class=\"co1\">%classdef</span></pre>"}, {"lang": "Nim", "loc": 34, "block": "<pre class=\"text highlighted_source\">import math, os<br/>randomize()<br/>\u00a0<br/>const<br/>  target = \"METHINKS IT IS LIKE A WEASEL\"<br/>  alphabet = \" ABCDEFGHIJLKLMNOPQRSTUVWXYZ\"<br/>  p = 0.05<br/>  c = 100<br/>\u00a0<br/>proc random(a: string): char = a[random(a.low..a.len)]<br/>\u00a0<br/>proc negFitness(trial): int =<br/>  for i in 0 .. &lt;trial.len:<br/>    if target[i]\u00a0!= trial[i]: inc result<br/>\u00a0<br/>proc mutate(parent): string =<br/>  result = \"\"<br/>  for c in parent: result.add if random(1.0) &lt; p: random(alphabet) else: c<br/>\u00a0<br/>var parent = \"\"<br/>for i in 1..target.len: parent.add random(alphabet)<br/>\u00a0<br/>var i = 0<br/>while parent\u00a0!= target:<br/>  var copies = newSeq[string](c)<br/>  for i in 0 .. &lt;copies.len: copies[i] = mutate(parent)<br/>\u00a0<br/>  var best = copies[0]<br/>  for i in 1 .. &lt;copies.len:<br/>    if negFitness(copies[i]) &lt; negFitness(best): best = copies[i]<br/>  parent = best<br/>\u00a0<br/>  echo i, \" \", parent<br/>  inc i</pre>"}, {"lang": "Objeck", "loc": 91, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Evolutionary <span class=\"br0\">{</span><br/>    target <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">;</span><br/>    possibilities <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">Char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    C <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    minMutateRate <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">;</span><br/>    perfectFitness <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    parent <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">String</span> <span class=\"sy0\">;</span><br/>    rand <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Init<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      target <span class=\"sy0\">:=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/>      possibilities <span class=\"sy0\">:=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      C <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>      minMutateRate <span class=\"sy0\">:=</span> <span class=\"nu0\">0.09</span><span class=\"sy0\">;</span><br/>      perfectFitness <span class=\"sy0\">:=</span> target<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> fitness<span class=\"br0\">(</span>trial <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>        retVal <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> trial<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>trial<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> target<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            retVal <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> retVal<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> newMutateRate<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span> <span class=\"sy0\">:=</span> perfectFitness <span class=\"sy0\">-</span> fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        y <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span> <span class=\"sy0\">:=</span> perfectFitness<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1.01</span> <span class=\"sy0\">-</span> minMutateRate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>         <span class=\"kw1\">return</span> x <span class=\"sy0\">/</span> y<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> mutate<span class=\"br0\">(</span>parent <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span> rate <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>        retVal <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> parent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          rand <span class=\"sy0\">:=</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>rand <span class=\"sy0\">&lt;=</span> rate<span class=\"br0\">)</span> <span class=\"br0\">{</span>        <br/>            rand <span class=\"sy0\">*=</span> <span class=\"nu0\">1000.0</span><span class=\"sy0\">;</span><br/>            intRand <span class=\"sy0\">:=</span> rand<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            index <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span> <span class=\"sy0\">:=</span> intRand <span class=\"sy0\">%</span> possibilities<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            retVal<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>possibilities<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>          <span class=\"kw1\">else</span> <span class=\"br0\">{</span>    <br/>            retVal<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>parent<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> retVal<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>        Init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        parent <span class=\"sy0\">:=</span> mutate<span class=\"br0\">(</span>target<span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        iter <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>target<span class=\"sy0\">-&gt;</span><span class=\"me1\">Equals</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          rate <span class=\"sy0\">:=</span> newMutateRate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          iter <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>iter <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Instance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>iter<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>          bestSpawn <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">;</span><br/>          bestFit <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>          <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> C<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            spawn <span class=\"sy0\">:=</span> mutate<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> rate<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            fitness <span class=\"sy0\">:=</span> fitness<span class=\"br0\">(</span>spawn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>fitness <span class=\"sy0\">&gt;</span> bestFit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              bestSpawn <span class=\"sy0\">:=</span> spawn<span class=\"sy0\">;</span><br/>              bestFit <span class=\"sy0\">:=</span> fitness<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>bestFit <span class=\"sy0\">&gt;</span> fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            parent <span class=\"sy0\">:=</span> bestSpawn<span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><span class=\"sy0\">;</span>  <br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        parent<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span>  <br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 41, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><span class=\"kw1\">let</span> charset <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/><span class=\"kw1\">let</span> tlen <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length target<br/><span class=\"kw1\">let</span> clen <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length charset<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> parent <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>create tlen <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> tlen<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> charset<span class=\"sy0\">.</span><span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> clen<span class=\"br0\">]</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  s<br/>\u00a0<br/><span class=\"kw1\">let</span> fitness <span class=\"re1\">~trial</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i d <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> tlen <span class=\"kw1\">then</span> d <span class=\"kw1\">else</span><br/>      aux <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> target<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> trial<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span> d<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">else</span> d<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> mutate parent rate <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>copy parent <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> tlen<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">1.0</span> <span class=\"sy0\">&gt;</span> rate <span class=\"kw1\">then</span><br/>      s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> charset<span class=\"sy0\">.</span><span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> clen<span class=\"br0\">]</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  s, fitness s<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> i <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">while</span> parent <span class=\"sy0\">&lt;&gt;</span> target <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> pfit <span class=\"sy0\">=</span> fitness parent <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> rate <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> pfit <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> tlen <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> tries <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">200</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> mutate parent rate<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> min_by <span class=\"br0\">(</span>a, fa<span class=\"br0\">)</span> <span class=\"br0\">(</span>b, fb<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> fa <span class=\"sy0\">&gt;</span> fb <span class=\"kw1\">then</span> a, fa <span class=\"kw1\">else</span> b, fb <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> best, f <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left min_by <span class=\"br0\">(</span>parent, pfit<span class=\"br0\">)</span> tries <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%5d - '%s'  (fitness:%2d)\\n%!\"</span> <span class=\"sy0\">!</span>i best f<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>blit best <span class=\"nu0\">0</span> parent <span class=\"nu0\">0</span> tlen<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">incr</span> i<br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%5d - '%s'\\n\"</span> <span class=\"sy0\">!</span>i parent</pre>"}, {"lang": "Octave", "loc": 53, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw2\">global</span> target<span class=\"sy5\">;</span><br/>target <span class=\"sy3\">=</span> split<span class=\"br0\">(</span><span class=\"co4\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy5\">,</span> <span class=\"co4\">\"\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>charset <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"co4\">\"A\"</span><span class=\"sy4\">:</span><span class=\"co4\">\"Z\"</span><span class=\"sy5\">,</span> <span class=\"co4\">\" \"</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>p <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/ones.html\"><span class=\"kw5\">ones</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>charset<span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">./</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>charset<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>parent <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/discrete_rnd.html\"><span class=\"kw6\">discrete_rnd</span></a><span class=\"br0\">(</span>charset<span class=\"sy5\">,</span> p<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>mutaterate <span class=\"sy3\">=</span> <span class=\"nu19\">0.1</span><span class=\"sy5\">;</span><br/>\u00a0<br/>C <span class=\"sy3\">=</span> <span class=\"nu0\">1000</span><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> fitness<span class=\"br0\">(</span>parent<span class=\"sy5\">,</span> target<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/sum.html\"><span class=\"kw5\">sum</span></a><span class=\"br0\">(</span>parent <span class=\"sy0\">==</span> target<span class=\"br0\">)</span> <span class=\"sy2\">./</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> mutate<span class=\"br0\">(</span>parent<span class=\"sy5\">,</span> mutaterate<span class=\"sy5\">,</span> charset<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> parent<span class=\"sy5\">;</span><br/>  p <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/unifrnd.html\"><span class=\"kw6\">unifrnd</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  nmutants <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/sum.html\"><span class=\"kw5\">sum</span></a><span class=\"br0\">(</span> p <span class=\"sy0\">&lt;</span> mutaterate <span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span>nmutants<span class=\"br0\">)</span><br/>    s <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/discrete_rnd.html\"><span class=\"kw6\">discrete_rnd</span></a><span class=\"br0\">(</span>charset<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/ones.html\"><span class=\"kw5\">ones</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>charset<span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">./</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>charset<span class=\"br0\">)</span><span class=\"sy5\">,</span>nmutants<span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    r<span class=\"br0\">(</span> p <span class=\"sy0\">&lt;</span> mutaterate <span class=\"br0\">)</span> <span class=\"sy3\">=</span> s<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> evolve<span class=\"br0\">(</span>parent<span class=\"sy5\">,</span> mutatefunc<span class=\"sy5\">,</span> fitnessfunc<span class=\"sy5\">,</span> C<span class=\"sy5\">,</span> mutaterate<span class=\"sy5\">,</span> charset<span class=\"br0\">)</span><br/>  <span class=\"kw2\">global</span> target<span class=\"sy5\">;</span><br/>  children <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>C<br/>    children <span class=\"sy3\">=</span> <span class=\"br0\">[</span>children<span class=\"sy5\">,</span> mutatefunc<span class=\"br0\">(</span>parent<span class=\"sy5\">,</span> mutaterate<span class=\"sy5\">,</span> charset<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/>  children <span class=\"sy3\">=</span> <span class=\"br0\">[</span>parent<span class=\"sy5\">,</span> children<span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>  fitval <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/columns.html\"><span class=\"kw5\">columns</span></a><span class=\"br0\">(</span>children<span class=\"br0\">)</span><br/>    fitval <span class=\"sy3\">=</span> <span class=\"br0\">[</span>fitval<span class=\"sy5\">,</span> fitnessfunc<span class=\"br0\">(</span>children<span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span><span class=\"sy5\">,</span> target<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/>  <span class=\"br0\">[</span>m<span class=\"sy5\">,</span> im<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/max.html\"><span class=\"kw6\">max</span></a><span class=\"br0\">(</span>fitval<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  r <span class=\"sy3\">=</span> children<span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span> im<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> printgen<span class=\"br0\">(</span>p<span class=\"sy5\">,</span> t<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%3d\u00a0%5.2f\u00a0%s\\n\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">,</span> fitness<span class=\"br0\">(</span>p<span class=\"sy5\">,</span> t<span class=\"br0\">)</span><span class=\"sy5\">,</span> p<span class=\"sy1\">'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"kw4\">while</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://octave.sourceforge.net/octave/function/all.html\"><span class=\"kw5\">all</span></a><span class=\"br0\">(</span>parent <span class=\"sy0\">==</span> target<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy1\">++</span><span class=\"sy5\">;</span><br/>  parent <span class=\"sy3\">=</span> evolve<span class=\"br0\">(</span>parent<span class=\"sy5\">,</span> <span class=\"co7\">@mutate</span><span class=\"sy5\">,</span> <span class=\"co7\">@fitness</span><span class=\"sy5\">,</span> C<span class=\"sy5\">,</span> mutaterate<span class=\"sy5\">,</span> charset<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>    printgen<span class=\"br0\">(</span>parent<span class=\"sy5\">,</span> target<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endwhile</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>parent<span class=\"sy1\">'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span> <br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 20, "block": "<pre class=\"text highlighted_source\">200 Constant new: C<br/>  5 Constant new: RATE<br/>\u00a0<br/>: randChar  // -- c<br/>   27 rand dup 27 == ifTrue: [ drop ' ' ] else: [ 'A' + 1- ]\u00a0;<br/>\u00a0<br/>: fitness(a b -- n) <br/>   a b zipWith(#==) sum\u00a0;<br/>\u00a0<br/>: mutate(s -- s')  <br/>   s map(#[ 100 rand RATE &lt;= ifTrue: [ drop randChar ] ]) charsAsString\u00a0;<br/>\u00a0<br/>\u00a0: evolve(target)<br/>| parent |<br/>   ListBuffer init(target size, #randChar) charsAsString -&gt;parent<br/>\u00a0<br/>   1 while ( parent target &lt;&gt; ) [ <br/>      ListBuffer init(C, #[ parent mutate ]) dup add(parent)<br/>      maxFor(#[ target fitness ]) dup -&gt;parent . dup println 1+<br/>      ] drop\u00a0;</pre>"}, {"lang": "OoRexx", "loc": 56, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Weasel.rex - Me thinks thou art a weasel. - G,M.D. - 2/25/2011 */</span><br/><span class=\"kw1\">arg</span> C M<br/><span class=\"coMULTI\">/* C is the number of children parent produces each generation. */</span><br/><span class=\"coMULTI\">/* M is the mutation rate of each gene (character) */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> initialize<br/>generation = <span class=\"nu0\">0</span><br/><span class=\"kw1\">do</span> <span class=\"kw2\">until</span> parent = target<br/>   most_fitness = fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><br/>   most_fit     = parent<br/>   <span class=\"kw1\">do</span> C<br/>      child = mutate<span class=\"br0\">(</span>parent, M<span class=\"br0\">)</span><br/>      child_fitness = fitness<span class=\"br0\">(</span>child<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> child_fitness <span class=\"sy0\">&gt;</span> most_fitness <span class=\"kw3\">then</span><br/>      <span class=\"kw1\">do</span><br/>         most_fitness = child_fitness<br/>         most_fit = child<br/>         <span class=\"kw1\">say</span> <span class=\"st0\">\"Generation\"</span> generation<span class=\"st0\">\": most fit='\"</span>most_fit<span class=\"st0\">\"', fitness=\"</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>most_fitness,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>   <span class=\"kw3\">end</span><br/>   parent = most_fit<br/>   generation = generation + <span class=\"nu0\">1</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/>initialize:<br/>   target   = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>   alphabet = <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/>   c_length_target = <span class=\"kw6\">length</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><br/>   parent  = mutate<span class=\"br0\">(</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, c_length_target<span class=\"br0\">)</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">do</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> c_length_target<br/>      target_ch<span class=\"sy0\">.</span>i = <span class=\"kw6\">substr</span><span class=\"br0\">(</span>target,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>fitness: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> target_ch<span class=\"sy0\">.</span> c_length_target<br/>   <span class=\"kw1\">arg</span> parm_string<br/>   fitness = <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">do</span> i_target = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> c_length_target<br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>parm_string,i_target,<span class=\"nu0\">1</span><span class=\"br0\">)</span> = target_ch<span class=\"sy0\">.</span>i_target <span class=\"kw3\">then</span><br/>         fitness = fitness + <span class=\"nu0\">1</span><br/>   <span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span> fitness<br/>\u00a0<br/>mutate:<span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> alphabet<br/><span class=\"kw1\">arg</span> string, parm_mutation_rate<br/>   <span class=\"kw4\">result</span> = <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">do</span> istr = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000</span> <span class=\"sy0\">&lt;</span>= parm_mutation_rate <span class=\"kw3\">then</span><br/>         <span class=\"kw4\">result</span> = <span class=\"kw4\">result</span> <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>alphabet,<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">else</span><br/>         <span class=\"kw4\">result</span> = <span class=\"kw4\">result</span> <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>string,istr,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">end</span><br/><span class=\"kw1\">return</span> <span class=\"kw4\">result</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>'EVOLUTION<br/>\u00a0<br/>target=\"METHINKS IT IS LIKE A WEASEL\"<br/>le=len target<br/>progeny=string le,\"X\"<br/>\u00a0<br/>quad seed<br/>declare QueryPerformanceCounter lib \"kernel32.dll\" (quad*q)<br/>QueryPerformanceCounter seed<br/>\u00a0<br/>Function Rand(sys max) as sys<br/>  mov    eax,max<br/>  inc    eax<br/>  imul   edx,seed,0x8088405<br/>  inc    edx<br/>  mov    seed,edx<br/>  mul    edx<br/>  return edx<br/>End Function<br/>\u00a0<br/>sys ls=le-1,cp=0,ct=0,ch=0,fit=0,gens=0<br/>\u00a0<br/>do                         '1 mutation per generation<br/>  i=1+rand ls              'mutation position<br/>  ch=64+rand 26            'mutation ascii code<br/>  if ch=64 then ch=32      'change '@' to ' '<br/>  ct=asc target,i          'target ascii code<br/>  cp=asc progeny,i         'parent ascii code<br/>  '<br/>  if ch=ct then<br/>    if cp&lt;&gt;ct then<br/>      mid progeny,i,chr ch 'carry improvement<br/>      fit++                'increment fitness<br/>    end if<br/>  end if<br/>  gens++<br/>  if fit=le then exit do   'matches target<br/>end do<br/>print progeny \"  \" gens 'RESULT (range 1200-6000 generations)<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 60, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Target = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>  C = 100<br/>  MutateRate = 5 <span class=\"co1\">%% percent</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Main</span><span class=\"br0\">}</span><br/>     X0 = <span class=\"br0\">{</span>MakeN <span class=\"br0\">{</span>Length Target<span class=\"br0\">}</span> RandomChar<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> Xi <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Iterate Evolve X0<span class=\"br0\">}</span> break:Break <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo Xi<span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> Xi <span class=\"sy0\">==</span> Target <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Break<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Evolve</span> Xi<span class=\"br0\">}</span><br/>     Copies = <span class=\"br0\">{</span>MakeN C <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>Mutate Xi<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>FoldL Copies MaxByFitness Xi<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Mutate</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Map Xs<br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span> <span class=\"kw1\">mod</span> 100 <span class=\"sy0\">&lt;</span> MutateRate <span class=\"kw1\">then</span> <span class=\"br0\">{</span>RandomChar<span class=\"br0\">}</span><br/>         <span class=\"kw1\">else</span> X<br/>         <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">MaxByFitness</span> A B<span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Fitness B<span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span>Fitness A<span class=\"br0\">}</span> <span class=\"kw1\">then</span> B <span class=\"kw1\">else</span> A <span class=\"kw1\">end</span> <br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Fitness</span> Candidate<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Length <span class=\"br0\">{</span>Filter <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>zip Candidate Target Value<span class=\"sy0\">.</span><span class=\"st0\">'=='</span><span class=\"br0\">}</span> Id<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Alphabet = <span class=\"re3\">&amp; </span><span class=\"sy0\">|</span><span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number <span class=\"re3\">&amp;A</span> <span class=\"re3\">&amp;Z</span> 1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">RandomChar</span><span class=\"br0\">}</span><br/>     I = <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span> <span class=\"kw1\">mod</span> <span class=\"br0\">{</span>Length Alphabet<span class=\"br0\">}</span> <span class=\"sy0\">+</span> 1<br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Nth Alphabet I<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% General purpose helpers</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Id</span> X<span class=\"br0\">}</span> X <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">MakeN</span> N F<span class=\"br0\">}</span><br/>     Xs = <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>make N<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>ForAll Xs F<span class=\"br0\">}</span><br/>     Xs<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">Iterate</span> F X<span class=\"br0\">}</span><br/>     X<span class=\"sy0\">|</span><span class=\"br0\">{</span>Iterate F <span class=\"br0\">{</span>F X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Main<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 46, "block": "<pre class=\"parigp highlighted_source\">target<span class=\"sy0\">=</span><span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/>fitness<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=-</span>dist<span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>dist<span class=\"br0\">(</span>u<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>#u<span class=\"sy0\">,</span>#v<span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>#u<span class=\"sy0\">-</span>#v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>letter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy0\">==</span><span class=\"nu1\">26</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"kw1\">Strchr</span><span class=\"br0\">(</span>r<span class=\"sy0\">+</span><span class=\"nu1\">65</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>insert<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>x<span class=\"sy0\">=</span>letter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>#v<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy0\">==</span>#v<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"me1\">r</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>r<span class=\"sy0\">+</span><span class=\"nu1\">1</span>..#v<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>delete<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">&lt;</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmy<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>#v<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">2</span>..#v<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy0\">==</span>#v<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span>..#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>r<span class=\"sy0\">+</span><span class=\"nu1\">1</span>..#v<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>mutate<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>rateM<span class=\"sy0\">,</span>rateI<span class=\"sy0\">,</span>rateD<span class=\"br0\">)</span><span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>rateI<span class=\"sy0\">,</span> v<span class=\"sy0\">=</span>insert<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>rateD<span class=\"sy0\">,</span> v<span class=\"sy0\">=</span>delete<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>rateM<span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>letter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>evolve<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>rate<span class=\"br0\">)</span><span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>parent<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#target<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>letter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>ct<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>parent <span class=\"sy0\">!=</span> target<span class=\"sy0\">,</span><br/>\t\t<span class=\"kw1\">print</span><span class=\"br0\">(</span>parent<span class=\"st0\">\" \"</span>fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tmy<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>C<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>mutate<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span>rate<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>best<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tbest<span class=\"sy0\">=</span>fitness<span class=\"br0\">(</span>parent<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>C<span class=\"sy0\">,</span><br/>\t\t\tt<span class=\"sy0\">=</span>fitness<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">&gt;</span>best<span class=\"sy0\">,</span> best<span class=\"sy0\">=</span>t<span class=\"sy0\">;</span> parent<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tct<span class=\"sy0\">++</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span>parent<span class=\"st0\">\" \"</span>fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tct<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>evolve<span class=\"br0\">(</span><span class=\"nu1\">35</span><span class=\"sy0\">,</span><span class=\"nu2\">.05</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 108, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">PROGRAM</span> EVOLUTION <span class=\"br0\">(</span>OUTPUT<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">CONST</span><br/>\tTARGET <span class=\"sy3\">=</span> <span class=\"st0\">'METHINKS IT IS LIKE A WEASEL'</span><span class=\"sy1\">;</span><br/>\tCOPIES <span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span>  <span class=\"coMULTI\">(* 100 children in each generation. *)</span><br/>\tRATE <span class=\"sy3\">=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span>  <span class=\"coMULTI\">(* About one character in 1000 will be a mutation. *)</span><br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\tSTRLIST <span class=\"sy3\">=</span> <span class=\"kw4\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">COPIES</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> RANDCHAR <span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">(* Generate a random letter or space. *)</span><br/> <span class=\"kw1\">VAR</span> RANDNUM <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>\tRANDNUM <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RANDOM<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">IF</span> RANDNUM <span class=\"sy3\">=</span> <span class=\"nu0\">26</span> <span class=\"kw1\">THEN</span><br/>\t\tRANDCHAR <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">' '</span><br/>\t<span class=\"kw1\">ELSE</span><br/>\t\tRANDCHAR <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">CHR</span><span class=\"br0\">(</span>RANDNUM <span class=\"sy3\">+</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> RANDSTR <span class=\"br0\">(</span>SIZE <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">(* Generate a random string. *)</span><br/> <span class=\"kw1\">VAR</span><br/>\tN <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/>\tS <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>\tS <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">FOR</span> N <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> SIZE <span class=\"kw1\">DO</span><br/>\t\tINSERT<span class=\"br0\">(</span>RANDCHAR<span class=\"sy1\">,</span> S<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tRANDSTR <span class=\"sy1\">:</span><span class=\"sy3\">=</span> S<br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> FITNESS <span class=\"br0\">(</span>CANDIDATE<span class=\"sy1\">,</span> GOAL <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">(* Count the number of correct letters in the correct places *)</span><br/> <span class=\"kw1\">VAR</span> N<span class=\"sy1\">,</span> MATCHES <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>\tMATCHES <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">FOR</span> N <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> LENGTH<span class=\"br0\">(</span>GOAL<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> CANDIDATE<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy3\">=</span> GOAL<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>\t\t\tMATCHES <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MATCHES <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\tFITNESS <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MATCHES<br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> MUTATE <span class=\"br0\">(</span>RATE <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span> S <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">(* Randomly alter a string. Characters change with probability 1/RATE. *)</span><br/> <span class=\"kw1\">VAR</span><br/>\tN <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/>\tCHANGE <span class=\"sy1\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">FOR</span> N <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> LENGTH<span class=\"br0\">(</span>TARGET<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t <span class=\"kw1\">BEGIN</span><br/>\t\tCHANGE <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RANDOM<span class=\"br0\">(</span>RATE<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> CHANGE <span class=\"kw1\">THEN</span><br/>\t\t\tS<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RANDCHAR<br/>\t <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\tMUTATE <span class=\"sy1\">:</span><span class=\"sy3\">=</span> S<br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> REPRODUCE <span class=\"br0\">(</span>RATE <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span> PARENT <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span> <span class=\"kw1\">VAR</span> CHILDREN <span class=\"sy1\">:</span> STRLIST<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">(* Generate children with random mutations. *)</span><br/> <span class=\"kw1\">VAR</span> N <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">FOR</span> N <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> COPIES <span class=\"kw1\">DO</span><br/>\t\tCHILDREN<span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MUTATE<span class=\"br0\">(</span>RATE<span class=\"sy1\">,</span> PARENT<span class=\"br0\">)</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> FITTEST<span class=\"br0\">(</span>CHILDREN <span class=\"sy1\">:</span> STRLIST<span class=\"sy1\">;</span> GOAL <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/> <span class=\"coMULTI\">(* Measure the fitness of each child and return the fittest. *)</span><br/> <span class=\"coMULTI\">(* If multiple children equally match the target, then return the first. *)</span><br/> <span class=\"kw1\">VAR</span><br/>\tMATCHES<span class=\"sy1\">,</span> MOST_MATCHES<span class=\"sy1\">,</span> BEST_INDEX<span class=\"sy1\">,</span> N <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">BEGIN</span><br/>\tMOST_MATCHES <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\tBEST_INDEX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">FOR</span> N <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> COPIES <span class=\"kw1\">DO</span><br/>\t <span class=\"kw1\">BEGIN</span><br/>\t\tMATCHES <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FITNESS<span class=\"br0\">(</span>CHILDREN<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy1\">,</span> GOAL<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> MATCHES &gt; MOST_MATCHES <span class=\"kw1\">THEN</span><br/>\t\t <span class=\"kw1\">BEGIN</span><br/>\t\t\tMOST_MATCHES <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MATCHES<span class=\"sy1\">;</span><br/>\t\t\tBEST_INDEX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> N<br/>\t\t <span class=\"kw1\">END</span><br/>\t <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\tFITTEST <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CHILDREN<span class=\"br0\">[</span>BEST_INDEX<span class=\"br0\">]</span><br/> <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>\tPARENT<span class=\"sy1\">,</span> BEST_CHILD <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\tCHILDREN <span class=\"sy1\">:</span> STRLIST<span class=\"sy1\">;</span><br/>\tGENERATIONS <span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\tRANDOMIZE<span class=\"sy1\">;</span><br/>\tGENERATIONS <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\tPARENT <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RANDSTR<span class=\"br0\">(</span>LENGTH<span class=\"br0\">(</span>TARGET<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">WHILE</span> <span class=\"kw1\">NOT</span> <span class=\"br0\">(</span>PARENT <span class=\"sy3\">=</span> TARGET<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t <span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>GENERATIONS <span class=\"kw1\">MOD</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">WRITELN</span><span class=\"br0\">(</span>PARENT<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tGENERATIONS <span class=\"sy1\">:</span><span class=\"sy3\">=</span> GENERATIONS <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\t\tREPRODUCE<span class=\"br0\">(</span>RATE<span class=\"sy1\">,</span> PARENT<span class=\"sy1\">,</span> CHILDREN<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tBEST_CHILD <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FITTEST<span class=\"br0\">(</span>CHILDREN<span class=\"sy1\">,</span> TARGET<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> FITNESS<span class=\"br0\">(</span>PARENT<span class=\"sy1\">,</span> TARGET<span class=\"br0\">)</span> &lt; FITNESS<span class=\"br0\">(</span>BEST_CHILD<span class=\"sy1\">,</span> TARGET<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tPARENT <span class=\"sy1\">:</span><span class=\"sy3\">=</span> BEST_CHILD<br/>\t <span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">WRITE</span><span class=\"br0\">(</span><span class=\"st0\">'The string was matched in '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">WRITELN</span><span class=\"br0\">(</span>GENERATIONS<span class=\"sy1\">,</span> <span class=\"st0\">' generations.'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 45, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'reduce'</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">MoreUtils</span> <span class=\"st_h\">'false'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">### Generally useful declarations</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> randElm<br/> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"co5\">@_</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> minBy <span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  reduce <span class=\"br0\">{</span><span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"re0\">$b</span> <span class=\"sy0\">:</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> zip<br/> <span class=\"br0\">{</span><span class=\"co5\">@_</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;;</span> <span class=\"sy0\">++</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">@row</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@row</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>     <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@row</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">### Task-specific declarations</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$C</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$mutation_rate</span> <span class=\"sy0\">=</span> <span class=\"sy0\">.</span>05<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@target</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">'METHINKS IT IS LIKE A WEASEL'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@valid_chars</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"st_h\">'A'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'Z'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fitness<br/> <span class=\"br0\">{</span>false <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> zip <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span> <span class=\"re0\">\\@target</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mutate<br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$rate</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rate</span> <span class=\"sy0\">?</span> randElm <span class=\"re0\">@valid_chars</span> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">### Main loop</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$parent</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span>randElm <span class=\"re0\">@valid_chars</span><span class=\"br0\">}</span> <span class=\"re0\">@target</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>fitness <span class=\"re0\">$parent</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><span class=\"re0\">$parent</span> <span class=\"sy0\">=</span><br/>       minBy <span class=\"re0\">\\&amp;fitness</span><span class=\"sy0\">,</span><br/>       <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span>mutate <span class=\"re0\">$mutation_rate</span><span class=\"sy0\">,</span> <span class=\"re0\">$parent</span><span class=\"br0\">}</span><br/>       <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$C</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">@$parent</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> mutate_chance <span class=\"sy0\">=</span> <span class=\"sy0\">.</span>08<span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@alphabet</span> <span class=\"sy0\">=</span> flat <span class=\"st_h\">'A'</span><span class=\"sy0\">..</span><span class=\"st_h\">'Z'</span><span class=\"sy0\">,</span><span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> C <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mutate <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> mutate_chance <span class=\"sy0\">??</span> <span class=\"re0\">@alphabet</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">$^string</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> fitness <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">$^string</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span> Zeq <span class=\"kw1\">state</span> <span class=\"sy0\">@</span> <span class=\"sy0\">=</span> target<span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> <span class=\"br0\">(</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$parent</span> <span class=\"sy0\">=</span> <span class=\"re0\">@alphabet</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span>target<span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$parent</span> <span class=\"kw1\">ne</span> target<span class=\"sy0\">;</span><br/>    <span class=\"re0\">$parent</span> <span class=\"sy0\">=</span> <span class=\"kw3\">max</span> <span class=\"sy0\">:</span>by<span class=\"br0\">(</span><span class=\"re0\">&amp;fitness</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> mutate<span class=\"br0\">(</span><span class=\"re0\">$parent</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> C<br/><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"%6d: '%s'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> $<span class=\"sy0\">++,</span> <span class=\"re0\">$parent</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 36, "block": "<pre class=\"text highlighted_source\">constant target = \"METHINKS IT IS LIKE A WEASEL\",<br/>         AZS    = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \",<br/>         C = 5000,  -- children in each generation<br/>         P = 15     -- probability of mutation (1 in 15)<br/>\u00a0<br/>function fitness(string sample, string target)<br/>    return sum(sq_eq(sample,target))<br/>end function<br/>\u00a0<br/>function mutate(string s, integer n)<br/>    for i=1 to length(s) do<br/>        if rand(n)=1 then<br/>            s[i] = AZS[rand(length(AZS))]<br/>        end if<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>string parent = mutate(target,1) -- (mutate with 100% probability)<br/>sequence samples = repeat(0,C)<br/>integer gen = 0, best, fit, best_fit = fitness(parent,target)<br/>while parent!=target do<br/>    printf(1,\"Generation%3d:\u00a0%s, fitness\u00a0%3.2f%%\\n\", {gen, parent, (best_fit/length(target))*100})<br/>    best_fit = -1<br/>    for i=1 to C do<br/>        samples[i] = mutate(parent, P)<br/>        fit = fitness(samples[i], target)<br/>        if fit &gt; best_fit then<br/>            best_fit = fit<br/>            best = i<br/>        end if<br/>    end for<br/>    parent = samples[best]<br/>    gen += 1<br/>end while<br/>printf(1,\"Finally, \\\"%s\\\"\\n\",{parent})</pre>"}, {"lang": "PicoLisp", "loc": 37, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(setq *Target (chop \"METHINKS IT IS LIKE A WEASEL\"))<br/>\u00a0<br/># Generate random character<br/>(de randChar ()<br/>   (if (=0 (rand 0 26))<br/>      \" \"<br/>      (char (rand `(char \"A\") `(char \"Z\"))) ) )<br/>\u00a0<br/># Fitness function (Hamming distance)<br/>(de fitness (A)<br/>   (cnt = A *Target) )<br/>\u00a0<br/># Genetic algorithm<br/>(gen<br/>   (make                               # Parent population<br/>      (do 100                             # C = 100 children<br/>         (link<br/>            (make<br/>               (do (length *Target)<br/>                  (link (randChar)) ) ) ) ) )<br/>   '((A)                               # Termination condition<br/>      (prinl (maxi fitness A))            # Print the fittest element<br/>      (member *Target A) )                # and check if solution is found<br/>   '((A B)                             # Recombination function<br/>      (mapcar<br/>         '((C D) (if (rand T) C D))       # Pick one of the chars<br/>         A B ) )<br/>   '((A)                               # Mutation function<br/>      (mapcar<br/>         '((C)<br/>            (if (=0 (rand 0 10))          # With a proability of 10%<br/>               (randChar)                 # generate a new char, otherwise<br/>               C ) )                      # return the current char<br/>         A ) )<br/>   fitness )                           # Selection function</pre>"}, {"lang": "PHP", "loc": 48, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'TARGET'</span><span class=\"sy0\">,</span><span class=\"st_h\">'METHINKS IT IS LIKE A WEASEL'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'TBL'</span><span class=\"sy0\">,</span><span class=\"st_h\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'MUTATE'</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'COPIES'</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'TARGET_COUNT'</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>TARGET<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'TBL_COUNT'</span><span class=\"sy0\">,</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>TBL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Determine number of different chars between a and b</span><br/>\u00a0<br/><span class=\"kw2\">function</span> unfitness<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"re0\">$sum</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"re0\">$sum</span><span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"re0\">$sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> mutate<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"re0\">$tbl</span><span class=\"sy0\">=</span>TBL<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>MUTATE<span class=\"br0\">)</span>?<span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"re0\">$tbl</span><span class=\"br0\">[</span><a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>TBL_COUNT<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span><span class=\"br0\">(</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span><span class=\"re0\">$out</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re0\">$tbl</span><span class=\"sy0\">=</span>TBL<span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>TARGET_COUNT<span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"re0\">$tspec</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"re0\">$tbl</span><span class=\"br0\">[</span><a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>TBL_COUNT<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$parent</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span><span class=\"re0\">$tspec</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$best</span><span class=\"sy0\">=</span>TARGET_COUNT<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$iters</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>COPIES<span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"re0\">$parent</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>mutate<span class=\"br0\">(</span><span class=\"re0\">$parent</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$best_i</span><span class=\"sy0\">=</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span>COPIES<span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$unfit</span><span class=\"sy0\">=</span>unfitness<span class=\"br0\">(</span>TARGET<span class=\"sy0\">,</span><span class=\"re0\">$parent</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$unfit</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$best</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"re0\">$best</span><span class=\"sy0\">=</span><span class=\"re0\">$unfit</span><span class=\"sy0\">;</span><br/>                        <span class=\"re0\">$best_i</span><span class=\"sy0\">=</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$best_i</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"re0\">$parent</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"re0\">$parent</span><span class=\"br0\">[</span><span class=\"re0\">$best_i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$iters</span><span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Generation <span class=\"es4\">$iters</span>, score <span class=\"es4\">$best</span>: <span class=\"es4\">$parent[0]</span><span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"re0\">$best</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Pike", "loc": 44, "block": "<pre class=\"pike highlighted_source\">string chars <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>string mutate<span class=\"br0\">(</span>string data, int rate<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> alphabet<span class=\"sy0\">=</span><span class=\"br0\">(</span>array<span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"br0\">)</span>chars<span class=\"sy0\">;</span><br/>    multiset index <span class=\"sy0\">=</span> <span class=\"br0\">(</span>multiset<span class=\"br0\">)</span>enumerate<span class=\"br0\">(</span>sizeof<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>rate<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <br/>        int pos <span class=\"sy0\">=</span> random<span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        data<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">=</span>random<span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        rate<span class=\"sy0\">--;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> data<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>int fitness<span class=\"br0\">(</span>string input, string target<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> `<span class=\"sy0\">+</span><span class=\"br0\">(</span>@`<span class=\"sy0\">==</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>input<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span>, <span class=\"br0\">(</span><span class=\"br0\">(</span>array<span class=\"br0\">)</span>target<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array<span class=\"br0\">(</span>string<span class=\"br0\">)</span> alphabet <span class=\"sy0\">=</span> chars<span class=\"sy0\">/</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    string target <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"sy0\">;</span><br/>    string parent <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>sizeof<span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> sizeof<span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        parent <span class=\"sy0\">+=</span> random<span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    int count<span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%5d:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, count, parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>parent <span class=\"sy0\">!=</span> target<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <br/>        string child <span class=\"sy0\">=</span> mutate<span class=\"br0\">(</span>parent, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        count<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fitness<span class=\"br0\">(</span>child, target<span class=\"br0\">)</span> &gt; fitness<span class=\"br0\">(</span>parent, target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span>  <br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%5d:\u00a0%s<span class=\"es0\">\\n</span>\"</span>, count, child<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            parent <span class=\"sy0\">=</span> child<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pony", "loc": 73, "block": "<pre class=\"text highlighted_source\">use \"random\"<br/>\u00a0<br/>actor Main<br/>  let _env: Env<br/>  let _rand: MT = MT\t// Mersenne Twister<br/>  let _target: String = \"METHINKS IT IS LIKE A WEASEL\"<br/>  let _possibilities: String = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"<br/>  let _c: U16 = 100\t// number of spawn per generation<br/>  let _min_mutate_rate: F64 = 0.09<br/>  let _perfect_fitness: USize = _target.size()<br/>  var _parent: String = \"\"<br/>\u00a0<br/>  new create(env: Env) =&gt;<br/>    _env = env<br/>    _parent = mutate(_target, 1.0)<br/>    var iter: U64 = 0<br/>    while not _target.eq(_parent) do<br/>      let rate: F64 = new_mutate_rate()<br/>      iter = iter + 1<br/>      if (iter\u00a0% 100) == 0 then<br/>        _env.out.write(iter.string() + \": \" + _parent)<br/>        _env.out.write(\", fitness: \" + fitness(_parent).string())<br/>        _env.out.print(\", rate: \" + rate.string())<br/>      end<br/>      var best_spawn = \"\"<br/>      var best_fit: USize = 0<br/>      var i: U16 = 0<br/>      while i &lt; _c do<br/>        let spawn = mutate(_parent, rate)<br/>        let spawn_fitness = fitness(spawn)<br/>        if spawn_fitness &gt; best_fit then<br/>          best_spawn = spawn<br/>          best_fit = spawn_fitness<br/>        end<br/>        i = i + 1<br/>      end<br/>      if best_fit &gt; fitness(_parent) then<br/>        _parent = best_spawn<br/>      end<br/>    end<br/>    _env.out.print(_parent + \", \" + iter.string())<br/>\u00a0<br/>  fun fitness(trial: String): USize =&gt;<br/>    var ret_val: USize = 0<br/>    var i: USize = 0<br/>    while i &lt; trial.size() do<br/>      try<br/>        if trial(i)? == _target(i)? then<br/>          ret_val = ret_val + 1<br/>        end<br/>      end<br/>      i = i + 1<br/>    end<br/>    ret_val<br/>\u00a0<br/>  fun new_mutate_rate(): F64 =&gt;<br/>    let perfect_fit = _perfect_fitness.f64()<br/>    ((perfect_fit - fitness(_parent).f64()) / perfect_fit) * (1.0 - _min_mutate_rate)<br/>\u00a0<br/>  fun ref mutate(parent: String box, rate: F64): String =&gt;<br/>    var ret_val = recover trn String end<br/>    for char in parent.values() do<br/>      let rnd_real: F64 = _rand.real()<br/>      if rnd_real &lt;= rate then<br/>        let rnd_int: U64 = _rand.int(_possibilities.size().u64())<br/>        try<br/>          ret_val.push(_possibilities(rnd_int.usize())?)<br/>        end<br/>      else<br/>        ret_val.push(char)<br/>      end<br/>    end<br/>    consume ret_val</pre>"}, {"lang": "Prolog", "loc": 32, "block": "<pre class=\"prolog highlighted_source\">target<span class=\"br0\">(</span>\"METHINKS IT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">IS</span></a> LIKE A WEASEL\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>rndAlpha<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy4\">,</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>     <span class=\"co1\">% Generate a single random character</span><br/>rndAlpha<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">.</span>\t      <span class=\"co1\">% 32 is a space, and 65-&gt;90 are upper case</span><br/>rndAlpha<span class=\"br0\">(</span>Ch<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> random<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span> P <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">truncate</span></a><span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy3\">+</span><span class=\"br0\">(</span>N<span class=\"sy3\">*</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> rndAlpha<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Ch<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>rndTxt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>        <span class=\"co1\">% Generate some random text (fixed length)</span><br/>rndTxt<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> succ<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span> rndAlpha<span class=\"br0\">(</span>H<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> rndTxt<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>score<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Score<span class=\"sy4\">,</span> Score<span class=\"br0\">)</span><span class=\"sy4\">.</span>   <span class=\"co1\">% Score a generated mutation (count diffs)</span><br/>score<span class=\"br0\">(</span><span class=\"br0\">[</span>Ht<span class=\"sy5\">|</span>Tt<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Ht<span class=\"sy5\">|</span>Tp<span class=\"br0\">]</span><span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> Score<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> score<span class=\"br0\">(</span>Tt<span class=\"sy4\">,</span> Tp<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> Score<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>score<span class=\"br0\">(</span><span class=\"br0\">[</span>_<span class=\"sy5\">|</span>Tt<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>Tp<span class=\"br0\">]</span><span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> Score<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> succ<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> score<span class=\"br0\">(</span>Tt<span class=\"sy4\">,</span> Tp<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> Score<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>score<span class=\"br0\">(</span>Txt<span class=\"sy4\">,</span> Score<span class=\"sy4\">,</span> Target<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> score<span class=\"br0\">(</span>Target<span class=\"sy4\">,</span> Txt<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Score<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>mutate<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>             <span class=\"co1\">% mutate(Probability, Input, Output)</span><br/>mutate<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>Txt<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>Mut<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> random<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy4\">,</span> R <span class=\"sy6\">&lt;</span> P<span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> mutate<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Txt<span class=\"sy4\">,</span> Mut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>mutate<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>Txt<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>M<span class=\"sy5\">|</span>Mut<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> rndAlpha<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> mutate<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Txt<span class=\"sy4\">,</span> Mut<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>weasel<span class=\"br0\">(</span>Tries<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> mutation<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Result<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>               <span class=\"co1\">% No differences=success</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w~4|:~w~3| - ~s\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Tries<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Result<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>weasel<span class=\"br0\">(</span>Tries<span class=\"sy4\">,</span> Chance<span class=\"sy4\">,</span> Target<span class=\"sy4\">,</span> mutation<span class=\"br0\">(</span>S<span class=\"sy4\">,</span> Value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>\t    <span class=\"co1\">% output progress</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w~4|:~w~3| - ~s\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Tries<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Value<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> <span class=\"co1\">% and call again</span><br/>\tweasel<span class=\"br0\">(</span>Tries<span class=\"sy4\">,</span> Chance<span class=\"sy4\">,</span> Target<span class=\"sy4\">,</span> Value<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>weasel<span class=\"br0\">(</span>Tries<span class=\"sy4\">,</span> Chance<span class=\"sy4\">,</span> Target<span class=\"sy4\">,</span> Start<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>mutation<span class=\"br0\">(</span>S<span class=\"sy4\">,</span>M<span class=\"br0\">)</span><span class=\"sy4\">,</span>  <span class=\"co1\">% Generate 30 mutations, select the best.</span><br/>\t\t<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span> mutate<span class=\"br0\">(</span>Chance<span class=\"sy4\">,</span> Start<span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">,</span> score<span class=\"br0\">(</span>M<span class=\"sy4\">,</span>S<span class=\"sy4\">,</span>Target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tMutations<span class=\"br0\">)</span><span class=\"sy4\">,</span>     <span class=\"co1\">% List of 30 mutations and their scores</span><br/>\tsort<span class=\"br0\">(</span>Mutations<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Best<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> succ<span class=\"br0\">(</span>Tries<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span> weasel<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Chance<span class=\"sy4\">,</span> Target<span class=\"sy4\">,</span> Best<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>weasel <span class=\"sy1\">:-</span>  <span class=\"co1\">% Chance-&gt;probability for a mutation, T=Target, Start=initial text</span><br/>\ttarget<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">,</span> length<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span> rndTxt<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> Start<span class=\"br0\">)</span><span class=\"sy4\">,</span> Chance <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>Len<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span> weasel<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Chance<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Start<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 71, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Define</span> population <span class=\"sy0\">=</span> <span class=\"nu0\">100</span>, mutationRate <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><br/><span class=\"kw1\">Define</span>.s target$ <span class=\"sy0\">=</span> <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><span class=\"kw1\">Define</span>.s charSet$ <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i fitness<span class=\"br0\">(</span>Array aspirant.c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array target.c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, <span class=\"kw2\">len</span>, fit <br/>  <span class=\"kw2\">len</span> <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>aspirant<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw2\">len</span><br/>    <span class=\"kw1\">If</span> aspirant<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> target<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: fit <span class=\"sy0\">+</span><span class=\"nu0\">1</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> fit<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> mutatae<span class=\"br0\">(</span>Array parent.c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array child.c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array charSetA.c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, rate.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, L, maxC<br/>  L <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>child<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  maxC <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>charSetA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> L<br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> rate<br/>      child<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> charSetA<span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>maxC<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span> <br/>      child<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> parent<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span>   <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s cArray2string<span class=\"br0\">(</span>Array A.c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> S.s, <span class=\"kw2\">len</span><br/>  <span class=\"kw2\">len</span> <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: S <span class=\"sy0\">=</span> <span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">)</span> <br/>  <span class=\"kw2\">CopyMemory</span><span class=\"br0\">(</span>@A<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, @S, <span class=\"kw2\">len</span> <span class=\"sy0\">*</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> S<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> mutationRate, maxChar, target_len, i, maxfit, gen, fit, bestfit <br/><span class=\"kw1\">Dim</span> targetA.c<span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>target$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw2\">CopyMemory</span><span class=\"br0\">(</span>@target$, @targetA<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">StringByteLength</span><span class=\"br0\">(</span>target$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> charSetA.c<span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>charSet$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw2\">CopyMemory</span><span class=\"br0\">(</span>@charSet$, @charSetA<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">StringByteLength</span><span class=\"br0\">(</span>charSet$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>maxChar   <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>charSet$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>maxfit <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>target$<span class=\"br0\">)</span><br/>target_len   <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>target$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">Dim</span>    parent.c<span class=\"br0\">(</span>target_len<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span>     child.c<span class=\"br0\">(</span>target_len<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> Bestchild.c<span class=\"br0\">(</span>target_len<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> target_len<br/>  parent<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> charSetA<span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>maxChar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>fit <span class=\"sy0\">=</span> fitness <span class=\"br0\">(</span>parent<span class=\"br0\">(</span><span class=\"br0\">)</span>, targetA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>gen<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> cArray2string<span class=\"br0\">(</span>parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": Fitness= \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>fit<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"/\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>maxfit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">While</span> bestfit <span class=\"sy0\">&lt;&gt;</span> maxfit<br/>  gen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> population<br/>    mutatae<span class=\"br0\">(</span>parent<span class=\"br0\">(</span><span class=\"br0\">)</span>,child<span class=\"br0\">(</span><span class=\"br0\">)</span>,charSetA<span class=\"br0\">(</span><span class=\"br0\">)</span>, mutationRate<span class=\"br0\">)</span><br/>    fit <span class=\"sy0\">=</span> fitness <span class=\"br0\">(</span>child<span class=\"br0\">(</span><span class=\"br0\">)</span>, targetA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> fit <span class=\"sy0\">&gt;</span> bestfit<br/>      bestfit <span class=\"sy0\">=</span> fit: CopyArray<span class=\"br0\">(</span>child<span class=\"br0\">(</span><span class=\"br0\">)</span>, Bestchild<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span>   <br/>  <span class=\"kw1\">Next</span><br/>  CopyArray<span class=\"br0\">(</span>Bestchild<span class=\"br0\">(</span><span class=\"br0\">)</span>, parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>gen<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> cArray2string<span class=\"br0\">(</span>parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": Fitness= \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>bestfit<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"/\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>maxfit<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Wend</span> <br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "Python", "loc": 47, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">string</span> <span class=\"kw1\">import</span> letters<br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> choice<span class=\"sy0\">,</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>target  <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"br0\">)</span><br/>charset <span class=\"sy0\">=</span> letters + <span class=\"st0\">' '</span><br/>parent  <span class=\"sy0\">=</span> <span class=\"br0\">[</span>choice<span class=\"br0\">(</span>charset<span class=\"br0\">)</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>minmutaterate  <span class=\"sy0\">=</span> <span class=\"nu0\">.09</span><br/>C <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/>perfectfitness <span class=\"sy0\">=</span> <span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fitness<span class=\"br0\">(</span>trial<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Sum of matching chars by position'</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>t<span class=\"sy0\">==</span>h <span class=\"kw1\">for</span> t<span class=\"sy0\">,</span>h <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>trial<span class=\"sy0\">,</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mutaterate<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Less mutation the closer the fit of the parent'</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>-<span class=\"br0\">(</span><span class=\"br0\">(</span>perfectfitness - fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span> / perfectfitness * <span class=\"br0\">(</span><span class=\"nu0\">1</span> - minmutaterate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mutate<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> rate<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>ch <span class=\"kw1\">if</span> <span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> rate <span class=\"kw1\">else</span> choice<span class=\"br0\">(</span>charset<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> parent<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> que<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'(from the favourite saying of Manuel in Fawlty Towers)'</span><br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"#%-4i, fitness:\u00a0%4.1f%%, '%s'\"</span>\u00a0%<br/>           <span class=\"br0\">(</span>iterations<span class=\"sy0\">,</span> fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span>*<span class=\"nu0\">100</span>./perfectfitness<span class=\"sy0\">,</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mate<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    place <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> choice<span class=\"br0\">(</span><span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span>:<br/>        place <span class=\"sy0\">=</span> choice<span class=\"br0\">(</span><span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> a<span class=\"sy0\">,</span> b<br/>\u00a0<br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> a<span class=\"br0\">[</span>:place<span class=\"br0\">]</span> + b<span class=\"br0\">[</span>place:<span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span>:place<span class=\"br0\">]</span> + a<span class=\"br0\">[</span>place:<span class=\"br0\">]</span><br/>\u00a0<br/>iterations <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>center <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/><span class=\"kw1\">while</span> parent <span class=\"sy0\">!=</span> target:<br/>    rate <span class=\"sy0\">=</span> mutaterate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    iterations +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> iterations\u00a0% <span class=\"nu0\">100</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>: que<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    copies <span class=\"sy0\">=</span> <span class=\"br0\">[</span> mutate<span class=\"br0\">(</span>parent<span class=\"sy0\">,</span> rate<span class=\"br0\">)</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> C <span class=\"br0\">]</span>  + <span class=\"br0\">[</span>parent<span class=\"br0\">]</span><br/>    parent1 <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>copies<span class=\"br0\">[</span>:center<span class=\"br0\">]</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span>fitness<span class=\"br0\">)</span><br/>    parent2 <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>copies<span class=\"br0\">[</span>center:<span class=\"br0\">]</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span>fitness<span class=\"br0\">)</span><br/>    parent <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>mate<span class=\"br0\">(</span>parent1<span class=\"sy0\">,</span> parent2<span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span>fitness<span class=\"br0\">)</span><br/>que<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 52, "block": "<pre class=\"text highlighted_source\">set.seed(1234, kind=\"Mersenne-Twister\")<br/>\u00a0<br/>## Easier if the string is a character vector<br/>target &lt;- unlist(strsplit(\"METHINKS IT IS LIKE A WEASEL\", \"\"))<br/>\u00a0<br/>charset &lt;- c(LETTERS, \" \")<br/>parent &lt;- sample(charset, length(target), replace=TRUE)<br/>\u00a0<br/>mutaterate &lt;- 0.01<br/>\u00a0<br/>## Number of offspring in each generation<br/>C &lt;- 100<br/>\u00a0<br/>## Hamming distance between strings normalized by string length is used<br/>## as the fitness function.<br/>fitness &lt;- function(parent, target) {<br/>    sum(parent == target) / length(target)<br/>}<br/>\u00a0<br/>mutate &lt;- function(parent, rate, charset) {<br/>    p &lt;- runif(length(parent))<br/>    nMutants &lt;- sum(p &lt; rate)<br/>    if (nMutants) {<br/>        parent[ p &lt; rate ] &lt;- sample(charset, nMutants, replace=TRUE)<br/>    }<br/>    parent<br/>}<br/>\u00a0<br/>evolve &lt;- function(parent, mutate, fitness, C, mutaterate, charset) {<br/>    children &lt;- replicate(C, mutate(parent, mutaterate, charset),<br/>                          simplify=FALSE)<br/>    children &lt;- c(list(parent), children)<br/>    children[[which.max(sapply(children, fitness, target=target))]]<br/>}<br/>\u00a0<br/>.printGen &lt;- function(parent, target, gen) {<br/>    cat(format(i, width=3),<br/>        formatC(fitness(parent, target), digits=2, format=\"f\"),<br/>        paste(parent, collapse=\"\"), \"\\n\")<br/>}<br/>\u00a0<br/>i &lt;- 0<br/>.printGen(parent, target, i)<br/>while (\u00a0! all(parent == target)) {<br/>    i &lt;- i + 1<br/>    parent &lt;- evolve(parent, mutate, fitness, C, mutaterate, charset)<br/>\u00a0<br/>    if (i\u00a0%% 20 == 0) {<br/>        .printGen(parent, target, i)<br/>    }<br/>}<br/>.printGen(parent, target, i)</pre>"}, {"lang": "Racket", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define alphabet \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\")<br/>(define (randch) (string-ref alphabet (random 27)))<br/>\u00a0<br/>(define (fitness s1 s2)<br/>  (for/sum ([c1 (in-string s1)] [c2 (in-string s2)])<br/>    (if (eq? c1 c2) 1 0)))<br/>\u00a0<br/>(define (mutate s P)<br/>  (define r (string-copy s))<br/>  (for ([i (in-range (string-length r))] #:when (&lt;= (random) P))<br/>    (string-set! r i (randch)))<br/>  r)<br/>\u00a0<br/>(define (evolution target C P)<br/>  (let loop ([parent (mutate target 1.0)] [n 0])<br/>   \u00a0;; (printf \"~a: ~a\\n\" n parent)<br/>    (if (equal? parent target)<br/>      n<br/>      (let cloop ([children (for/list ([i (in-range C)]) (mutate parent P))]<br/>                  [best #f] [fit -1])<br/>        (if (null? children)<br/>          (loop best (add1 n))<br/>          (let ([f (fitness target (car children))])<br/>            (if (&gt; f fit)<br/>              (cloop (cdr children) (car children) f)<br/>              (cloop (cdr children) best fit))))))))<br/>\u00a0<br/>;; Some random experiment using all of this<br/>(define (try-run C P)<br/>  (define ns<br/>    (for/list ([i 10])<br/>      (evolution \"METHINKS IT IS LIKE A WEASEL\" C P)))<br/>  (printf \"~s Average generation: ~s\\n\" C (/ (apply + 0.0 ns) (length ns)))<br/>  (printf \"~s      Total strings: ~s\\n\" C (for/sum ([n ns]) (* n 50))))<br/>(for ([C (in-range 10 501 10)]) (try-run C 0.001))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 33, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates  an  evolutionary algorithm  (by using mutation).          */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>  children  MR  seed <span class=\"sy0\">.</span>                  <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span> children==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> children = <span class=\"nu0\">10</span>              <span class=\"coMULTI\">/*# children produced each generation. */</span><br/><span class=\"kw1\">if</span> MR      ==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> MR       = <span class=\"st0\">\"4%\"</span>            <span class=\"coMULTI\">/*the character Mutation Rate each gen.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>MR,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"st0\">'%'</span>  <span class=\"kw3\">then</span> MR=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>MR,,<span class=\"st0\">\"%\"</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">100</span>  <span class=\"coMULTI\">/*expressed as a percent?  Then adjust.*/</span><br/><span class=\"kw1\">if</span> seed<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed             <span class=\"coMULTI\">/*SEED allow the runs to be repeatable.*/</span><br/>abc   = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ '</span> \u00a0;     Labc=<span class=\"kw6\">length</span><span class=\"br0\">(</span>abc<span class=\"br0\">)</span><br/>target= <span class=\"st0\">'METHINKS IT IS LIKE A WEASEL'</span>\u00a0;     Ltar=<span class=\"kw6\">length</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span><br/>parent= mutate<span class=\"br0\">(</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,Ltar<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*gen rand string,same length as target*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'target string'</span>, Ltar, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span>   <span class=\"st0\">'children'</span>        <span class=\"st0\">\"mutationRate\"</span><br/><span class=\"kw1\">say</span> target  <span class=\"kw6\">center</span><span class=\"br0\">(</span>children,<span class=\"nu0\">8</span><span class=\"br0\">)</span>    <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"br0\">(</span>MR<span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">'%'</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span>;                  <span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'new string'</span>    ,Ltar, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span>   <span class=\"st0\">\"closeness\"</span>       <span class=\"st0\">'generation'</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> gen=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span>  parent==target;                     close=fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><br/>       almost=parent<br/>                        <span class=\"kw1\">do</span>  children;                       child=mutate<span class=\"br0\">(</span>parent,MR<span class=\"br0\">)</span><br/>                        _=fitness<span class=\"br0\">(</span>child<span class=\"br0\">)</span>;                   <span class=\"kw1\">if</span> _<span class=\"sy0\">&lt;</span>=close  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                        close=_;                            almost=child<br/>                        <span class=\"kw1\">say</span> almost  <span class=\"kw6\">right</span><span class=\"br0\">(</span>close, <span class=\"nu0\">9</span><span class=\"br0\">)</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>gen,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*children*/</span><br/>       parent=almost<br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*gen*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fitness: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; $=<span class=\"nu0\">0</span>;   <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> Ltar; $=$+<span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"kw6\">substr</span><span class=\"br0\">(</span>target,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw3\">end</span><br/>         <span class=\"kw1\">return</span> $<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>mutate:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,rate;  $=                   <span class=\"coMULTI\">/*set  X  to 1st argument, RATE to 2nd.*/</span><br/>                   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> Ltar;       r=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100000</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*REXX's max for RANDOM*/</span><br/>                   <span class=\"kw1\">if</span> <span class=\"sy0\">.</span>00001<span class=\"sy0\">*</span>r<span class=\"sy0\">&lt;</span>=rate  <span class=\"kw3\">then</span> $=$ <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>abc,r<span class=\"sy0\">//</span>Labc+<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                      <span class=\"kw3\">else</span> $=$ <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>x  ,j        , <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>         <span class=\"kw1\">return</span> $</pre>"}, {"lang": "Ring", "loc": 59, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Evolutionary algorithm<br/>\u00a0<br/>target = \"METHINKS IT IS LIKE A WEASEL\"<br/>parent = \"IU RFSGJABGOLYWF XSMFXNIABKT\"<br/>num = 0<br/>mutationrate = 0.5<br/>children = len(target) <br/>child = list(children)<br/>while parent\u00a0!= target<br/>        bestfitness = 0<br/>        bestindex = 0<br/>        for index = 1 to children<br/>             child[index] = mutate(parent, mutationrate)<br/>             fitness = fitness(target, child[index])<br/>             if fitness &gt; bestfitness <br/>                bestfitness = fitness<br/>                bestindex = index<br/>             ok<br/>        next <br/>        if bestindex &gt; 0<br/>           parent = child[bestindex]<br/>           num = num + 1<br/>           see \"\" + num + \": \" + parent + nl<br/>        ok<br/>end <br/>\u00a0<br/>func fitness(text, ref)<br/>       f = 0<br/>       for i = 1 to len(text)<br/>            if substr(text, i, 1) = substr(ref, i, 1)<br/>               f = f + 1<br/>            ok<br/>       next<br/>       return (f / len(text))<br/>\u00a0<br/>func mutate(text, rate)<br/>        rnd = randomf()<br/>        if rate &gt; rnd<br/>           c = 63+random(27)<br/>           if c = 64<br/>              c = 32<br/>           ok<br/>           rnd2 = random(len(text))<br/>           if rnd2 &gt; 0<br/>              text[rnd2] = char(c)<br/>           ok<br/>        ok<br/>        return text<br/>\u00a0<br/>func randomf()<br/>       decimals(10)<br/>       str = \"0.\"<br/>       for i = 1 to 10<br/>            nr = random(9)<br/>            str = str + string(nr)<br/>       next<br/>       return number(str)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 39, "block": "<pre class=\"ruby highlighted_source\"><span class=\"re1\">@target</span> = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>Charset = <span class=\"br0\">[</span><span class=\"st0\">\" \"</span>, <span class=\"sy0\">*</span><span class=\"st0\">\"A\"</span>..<span class=\"st0\">\"Z\"</span><span class=\"br0\">]</span><br/>COPIES = <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"kw1\">def</span> random_char; Charset.<span class=\"me1\">sample</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fitness<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>  sum = <span class=\"nu0\">0</span><br/>  candidate.<span class=\"me1\">chars</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>@target.<span class=\"me1\">chars</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">ord</span> <span class=\"sy0\">-</span> y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">ord</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">}</span><br/>  <span class=\"nu0\">100.0</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"kw3\">Float</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"sy0\">-</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mutation_rate<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><br/>  <span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span> <span class=\"sy0\">-</span> fitness<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">400.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mutate<span class=\"br0\">(</span>parent, rate<span class=\"br0\">)</span><br/>  parent.<span class=\"me1\">each_char</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>ch<span class=\"sy0\">|</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span>= rate\u00a0? random_char\u00a0: ch<span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> log<span class=\"br0\">(</span>iteration, rate, parent<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%4d\u00a0%.2f\u00a0%5.1f\u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>iteration, rate, fitness<span class=\"br0\">(</span>parent<span class=\"br0\">)</span>, parent<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>iteration = <span class=\"nu0\">0</span><br/>parent = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>@target.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>random_char<span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>prev = <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">while</span> parent\u00a0!= <span class=\"re1\">@target</span><br/>  iteration <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  rate = mutation_rate<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> prev\u00a0!= parent<br/>    log<span class=\"br0\">(</span>iteration, rate, parent<span class=\"br0\">)</span><br/>    prev = parent<br/>  <span class=\"kw1\">end</span><br/>  copies = <span class=\"br0\">[</span>parent<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>COPIES<span class=\"br0\">)</span> <span class=\"br0\">{</span>mutate<span class=\"br0\">(</span>parent, rate<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  parent = copies.<span class=\"me1\">max_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> fitness<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>log<span class=\"br0\">(</span>iteration, rate, parent<span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 101, "block": "<pre class=\"text highlighted_source\">//! Author\u00a0: Thibault Barbie<br/>//!<br/>//! A simple evolutionary algorithm written in Rust.<br/>\u00a0<br/>extern crate rand;<br/>\u00a0<br/>use rand::Rng;<br/>\u00a0<br/>fn main() {<br/>    let target = \"METHINKS IT IS LIKE A WEASEL\";<br/>    let copies = 100;<br/>    let mutation_rate = 20; // 1/20 = 0.05 = 5%<br/>\u00a0<br/>    let mut rng = rand::weak_rng();<br/>\u00a0<br/>    // Generate first sentence, mutating each character<br/>    let start = mutate(&amp;mut rng, target, 1); // 1/1 = 1 = 100%<br/>\u00a0<br/>    println!(\"{}\", target);<br/>    println!(\"{}\", start);<br/>\u00a0<br/>    evolve(&amp;mut rng, target, start, copies, mutation_rate);<br/>}<br/>\u00a0<br/>/// Evolution algorithm<br/>///<br/>/// Evolves `parent` to match `target`.  Returns the number of evolutions performed.<br/>fn evolve&lt;R: Rng&gt;(<br/>    rng: &amp;mut R,<br/>    target: &amp;str,<br/>    mut parent: String,<br/>    copies: usize,<br/>    mutation_rate: u32,<br/>) -&gt; usize {<br/>    let mut counter = 0;<br/>    let mut parent_fitness = target.len() + 1;<br/>\u00a0<br/>    loop {<br/>        counter += 1;<br/>\u00a0<br/>        let (best_fitness, best_sentence) = (0..copies)<br/>            .map(|_| {<br/>                // Copy and mutate a new sentence.<br/>                let sentence = mutate(rng, &amp;parent, mutation_rate);<br/>                // Find the fitness of the new mutation<br/>                (fitness(target, &amp;sentence), sentence)<br/>            })<br/>            .min_by_key(|&amp;(f, _)| f) // find the closest mutation to the target<br/>            .unwrap(); // fails if `copies == 0`<br/>\u00a0<br/>        // If the best mutation of this generation is better than `parent` then \"the fittest<br/>        // survives\" and the next parent becomes the best of this generation.<br/>        if best_fitness &lt; parent_fitness {<br/>            parent = best_sentence;<br/>            parent_fitness = best_fitness;<br/>            println!(<br/>                \"{}\u00a0: generation {} with fitness {}\",<br/>                parent, counter, best_fitness<br/>            );<br/>\u00a0<br/>            if best_fitness == 0 {<br/>                return counter;<br/>            }<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>/// Computes the fitness of a sentence against a target string, returning the number of<br/>/// incorrect characters.<br/>fn fitness(target: &amp;str, sentence: &amp;str) -&gt; usize {<br/>    sentence<br/>        .chars()<br/>        .zip(target.chars())<br/>        .filter(|&amp;(c1, c2)| c1\u00a0!= c2)<br/>        .count()<br/>}<br/>\u00a0<br/>/// Mutation algorithm.<br/>///<br/>/// It mutates each character of a string, according to a `mutation_rate`.<br/>fn mutate&lt;R: Rng&gt;(rng: &amp;mut R, sentence: &amp;str, mutation_rate: u32) -&gt; String {<br/>    let maybe_mutate = |c| {<br/>        if rng.gen_weighted_bool(mutation_rate) {<br/>            random_char(rng)<br/>        } else {<br/>            c<br/>        }<br/>    };<br/>    sentence.chars().map(maybe_mutate).collect()<br/>}<br/>\u00a0<br/>/// Generates a random letter or space.<br/>fn random_char&lt;R: Rng&gt;(rng: &amp;mut R) -&gt; char {<br/>    // Returns a value in the range [A, Z] + an extra slot for the space character.  (The `u8`<br/>    // values could be cast to larger integers for a better chance of the RNG hitting the proper<br/>    // range).<br/>    match rng.gen_range(b'A', b'Z' + 2) {<br/>        c if c == b'Z' + 1 =&gt; ' ', // the `char` after 'Z'<br/>        c =&gt; c as char,<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 37, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> LearnerParams<span class=\"br0\">(</span>target<span class=\"sy0\">:</span>String,rate<span class=\"sy0\">:</span>Double,C<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> chars <span class=\"sy0\">=</span>  <span class=\"br0\">(</span><span class=\"st0\">'A'</span> to <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> ++ List<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> randgen <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> randchar <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> charnum <span class=\"sy0\">=</span> randgen.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>chars.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>   chars<span class=\"br0\">(</span>charnum<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RichTraversable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>t<span class=\"sy0\">:</span> Traversable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> maxBy<span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">(</span>fn<span class=\"sy0\">:</span> T <span class=\"sy0\">=&gt;</span> B<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> ord<span class=\"sy0\">:</span> Ordering<span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> t.<span class=\"me1\">max</span><span class=\"br0\">(</span>ord on fn<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> minBy<span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">(</span>fn<span class=\"sy0\">:</span> T <span class=\"sy0\">=&gt;</span> B<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> ord<span class=\"sy0\">:</span> Ordering<span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> t.<span class=\"me1\">min</span><span class=\"br0\">(</span>ord on fn<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toRichTraversable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>t<span class=\"sy0\">:</span> Traversable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> RichTraversable<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fitness<span class=\"br0\">(</span>candidate<span class=\"sy0\">:</span>String<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> params<span class=\"sy0\">:</span>LearnerParams<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"br0\">(</span>candidate zip params.<span class=\"me1\">target</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"sy0\">==</span>b<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mutate<span class=\"br0\">(</span>initial<span class=\"sy0\">:</span>String<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> params<span class=\"sy0\">:</span>LearnerParams<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   initial.<span class=\"me1\">map</span><span class=\"br0\">{</span> samechar <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>randgen.<span class=\"me1\">nextDouble</span> <span class=\"sy0\">&lt;</span> params.<span class=\"me1\">rate</span><span class=\"br0\">)</span> randchar <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> samechar <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">@</span>tailrec<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> evolve<span class=\"br0\">(</span>generation<span class=\"sy0\">:</span>Int, initial<span class=\"sy0\">:</span>String<span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> params<span class=\"sy0\">:</span>LearnerParams<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> params.<span class=\"sy0\">_</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"Generation:\u00a0%3d \u00a0%s<span class=\"es1\">\\n</span>\"</span>,generation, initial<span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>initial <span class=\"sy0\">==</span> target<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>number <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to C<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> mutate<span class=\"br0\">(</span>initial<span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> next <span class=\"sy0\">=</span> candidates.<span class=\"me1\">maxBy</span><span class=\"br0\">(</span>fitness<span class=\"br0\">)</span><br/>   evolve<span class=\"br0\">(</span>generation+<span class=\"nu0\">1</span>,next<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> params <span class=\"sy0\">=</span> LearnerParams<span class=\"br0\">(</span><span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span>,<span class=\"nu0\">0.01</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> initial <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to params.<span class=\"me1\">target</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> map<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> randchar<span class=\"br0\">)</span> mkString<br/>evolve<span class=\"br0\">(</span><span class=\"nu0\">0</span>,initial<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 59, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; random numbers</span><br/>\u00a0<br/><span class=\"br0\">(</span>random<span class=\"sy0\">-</span>source<span class=\"sy0\">-</span>randomize<span class=\"sy0\">!</span> default<span class=\"sy0\">-</span>random<span class=\"sy0\">-</span>source<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> target <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><span class=\"br0\">)</span> <span class=\"co1\">; target string</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> C <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"co1\">; size of population</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> p <span class=\"nu0\">0.1</span><span class=\"br0\">)</span> <span class=\"co1\">; chance any char is mutated</span><br/>\u00a0<br/><span class=\"co1\">;; return a random character in given range</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span> <br/>              <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; compute distance of given string from target</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fitness str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c1 c2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">char=?</span> c1 c2<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> str<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; mutate given parent string, returning a new string</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mutate str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>string<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>real<span class=\"br0\">)</span> p<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>char<span class=\"br0\">)</span><br/>                  c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; create a population by mutating parent, </span><br/><span class=\"co1\">;; returning a list of variations</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>population parent<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pop '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>mutate parent<span class=\"br0\">)</span> pop<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> C <span class=\"br0\">(</span><span class=\"kw1\">length</span> pop<span class=\"br0\">)</span><span class=\"br0\">)</span> pop<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; find the most fit candidate in given list</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>best candidates<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>select<span class=\"sy0\">-</span>best a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>fitness a<span class=\"br0\">)</span> <span class=\"br0\">(</span>fitness b<span class=\"br0\">)</span><span class=\"br0\">)</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>best <span class=\"br0\">(</span><span class=\"kw1\">car</span> candidates<span class=\"br0\">)</span> <span class=\"br0\">(</span>select<span class=\"sy0\">-</span>best best <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>rem <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> candidates<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span> best<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; create first parent from random characters</span><br/><span class=\"co1\">;; of same size as target string</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>initial<span class=\"sy0\">-</span>parent<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>res '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>char<span class=\"br0\">)</span> res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> res<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> target<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; run the search</span><br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>parent <span class=\"br0\">(</span>initial<span class=\"sy0\">-</span>parent<span class=\"br0\">)</span> <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>best <span class=\"br0\">(</span><span class=\"kw1\">cons</span> parent <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>population parent<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; select best from parent and population</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">string=?</span> parent target<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"Found: \"</span> parent <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> parent<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 62, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const string: table is \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \";<br/>\u00a0<br/>const func integer: unfitness (in string: a, in string: b) is func<br/>  result<br/>    var integer: sum is 0;<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    for index range 1 to length(a) do<br/>      sum +:= ord(a[index] &lt;&gt; b[index]);<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: mutate (in string: a, inout string: b) is func<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    b\u00a0:= a;<br/>    for index range 1 to length(a) do<br/>      if rand(1, 15) = 1 then<br/>        b @:= [index] table[rand(1, 27)];<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>     const string: target is \"METHINKS IT IS LIKE A WEASEL\";<br/>     const integer: OFFSPRING is 30;<br/>     var integer: index is 0;<br/>     var integer: unfit is 0;<br/>     var integer: best is 0;<br/>     var integer: bestIndex is 0;<br/>     var integer: generation is 1;<br/>     var string: parent is \" \" mult length(target);<br/>     var array string: children is OFFSPRING times \" \" mult length(target);<br/>  begin<br/>    for index range 1 to length(target) do<br/>      parent @:= [index] table[rand(1, 27)];<br/>    end for;<br/>    repeat<br/>      for index range 1 to OFFSPRING do<br/>        mutate(parent, children[index]);<br/>      end for;<br/>      best\u00a0:= succ(length(parent));<br/>      bestIndex\u00a0:= 0;<br/>      for index range 1 to OFFSPRING do<br/>        unfit\u00a0:= unfitness(target, children[index]);<br/>        if unfit &lt; best then<br/>          best\u00a0:= unfit;<br/>          bestIndex\u00a0:= index;<br/>        end if;<br/>      end for; <br/>      if bestIndex &lt;&gt; 0 then<br/>        parent\u00a0:= children[bestIndex];<br/>      end if;<br/>      writeln(\"generation \" &lt;&amp; generation &lt;&amp; \": score \" &lt;&amp; best &lt;&amp; \": \" &lt;&amp; parent);<br/>      incr(generation);<br/>    until best = 0;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 23, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>AllowedChars\u00a0:= \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\";<br/>\u00a0<br/>initializeParent(randChars(1))\u00a0:= AllowedChars[randChars];<br/>\u00a0<br/>Fitness(target(1), current(1))\u00a0:=<br/>\tlet<br/>\t\tfit[i]\u00a0:= true when target[i] = current[i];<br/>\tin<br/>\t\tsize(fit);<br/>\u00a0<br/>Mutate(letter(0), rate(0), randRate(0), randChar(0))\u00a0:= <br/>\t\tletter when randRate &gt; rate<br/>\telse<br/>\t\tAllowedChars[randChar];<br/>\u00a0<br/>evolve(target(1), parent(1), C(0), P(0), rateRands(2), charRands(2))\u00a0:=<br/>\tlet<br/>\t\tmutations[i]\u00a0:= Mutate(parent, P, rateRands[i], charRands[i]) foreach i within 1 ... C;<br/>\t\tfitnesses\u00a0:= Fitness(target, mutations);<br/>\tin<br/>\t\tmutations[firstIndexOf(fitnesses, vectorMax(fitnesses))];</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">define target = <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/>define mutate_chance = <span class=\"nu0\">0.08</span><br/>define alphabet = <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span>..<span class=\"st0\">'Z'</span><span class=\"br0\">)</span>..., <span class=\"st0\">' '</span><span class=\"br0\">]</span><br/>define C = <span class=\"nu0\">100</span><br/>\u00a0<br/>func fitness<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span> str.<span class=\"me1\">chars</span> ~Z== target.<span class=\"me1\">chars</span> <span class=\"sy0\">-&gt;</span> count<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func mutate<span class=\"br0\">(</span>str<span class=\"br0\">)</span>  <span class=\"br0\">{</span> str.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span><span class=\"sy0\">/</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s1<span class=\"sy0\">|</span> <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> mutate_chance\u00a0? alphabet.<span class=\"me1\">pick</span>\u00a0: s1 <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><br/>    var <span class=\"br0\">(</span>i, parent<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">0</span>, alphabet.<span class=\"kw3\">rand</span><span class=\"br0\">(</span>target.<span class=\"me1\">len</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">)</span>;<br/>    parent\u00a0!= target;<br/>    parent = C.<span class=\"me1\">of</span><span class=\"br0\">{</span> mutate<span class=\"br0\">(</span>parent<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">max_by</span><span class=\"br0\">(</span>fitness<span class=\"br0\">)</span><br/><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%6d: '%s'<span class=\"es0\">\\n</span>\"</span>, i<span class=\"sy0\">++</span>, parent<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 43, "block": "<pre class=\"text highlighted_source\"> 10 LET A$=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"<br/> 20 LET T$=\"METHINKS IT IS LIKE A WEASEL\"<br/> 30 LET L=LEN T$<br/> 40 LET C=10<br/> 50 LET M=0.05<br/> 60 LET G=0<br/> 70 DIM C$(C,L)<br/> 80 LET P$=\"\"<br/> 90 FOR I=1 TO L<br/>100 LET P$=P$+A$(INT (RND*LEN A$)+1)<br/>110 NEXT I<br/>120 PRINT AT 1,0;P$<br/>130 LET S$=P$<br/>140 GOSUB 390<br/>150 LET N=R<br/>160 PRINT AT 1,30;N<br/>170 PRINT AT 0,4;G<br/>180 IF P$=T$ THEN GOTO 440<br/>190 FOR I=1 TO C<br/>200 FOR J=1 TO L<br/>210 LET C$(I,J)=P$(J)<br/>220 IF RND&lt;=M THEN LET C$(I,J)=A$(INT (RND*LEN A$)+1)<br/>230 PRINT AT I+2,J-1;C$(I,J)<br/>240 NEXT J<br/>250 PRINT AT I+2,30;\"  \"<br/>260 NEXT I<br/>270 LET F=0<br/>280 FOR I=1 TO C<br/>290 LET S$=C$(I)<br/>300 GOSUB 390<br/>310 PRINT AT I+2,30;R<br/>320 IF R&gt;N THEN LET F=I<br/>330 IF R&gt;N THEN LET N=R<br/>340 NEXT I<br/>350 IF F&gt;0 THEN LET P$=C$(F)<br/>360 LET G=G+1<br/>370 PRINT AT 1,0;P$<br/>380 GOTO 160<br/>390 LET R=0<br/>400 FOR K=1 TO L<br/>410 IF S$(K)=T$(K) THEN LET R=R+1<br/>420 NEXT K<br/>430 RETURN</pre>"}, {"lang": "Smalltalk", "loc": 47, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">String</span> subclass: <span class=\"re0\">Mutant</span> <span class=\"br0\">[</span><br/>    &lt;shape: <span class=\"re1\">#character</span>&gt;<br/>\u00a0<br/>    <span class=\"re0\">Target</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Mutant</span> from: <span class=\"st0\">'METHINKS IT IS LIKE A WEASEL'</span>.<br/>    <span class=\"re0\">Letters</span> <span class=\"sy0\">:=</span> <span class=\"st0\">' ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>.<br/>\u00a0<br/>    <span class=\"re0\">Mutant</span> class &gt;&gt; run: <span class=\"re5\">c</span> rate: <span class=\"re5\">p</span><br/>        <span class=\"br0\">[</span><span class=\"coMULTI\">\"Run Evolutionary algorighm, using c copies and mutate rate p.\"</span><br/>        |<span class=\"re3\"> pool parent </span>|<br/>        <span class=\"re6\">parent</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> newRandom.<br/>        <span class=\"re5\">pool</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Array</span> new: <span class=\"re5\">c</span>+<span class=\"re5\">1</span>.<br/>\u00a0<br/>        <span class=\"br0\">[</span><span class=\"re5\">parent</span> displayNl.<br/>        <span class=\"re5\">parent</span> <span class=\"sy0\">=</span> <span class=\"re0\">Target</span><span class=\"br0\">]</span> whileFalse:<br/>            <span class=\"br0\">[</span><span class=\"re5\">1</span> to: <span class=\"re5\">c</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">i</span> | pool at: <span class=\"re5\">i</span> put: <span class=\"br0\">(</span><span class=\"re5\">parent</span> copy mutate: <span class=\"re5\">p</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<br/>            <span class=\"re5\">pool</span> at: <span class=\"re5\">c</span>+<span class=\"re5\">1</span> put: <span class=\"re5\">parent</span>.<br/>            <span class=\"re5\">parent</span> <span class=\"sy0\">:=</span> <span class=\"re5\">pool</span> fold: <span class=\"br0\">[</span>:<span class=\"re5\">winner</span>\u00a0:<span class=\"re5\">each</span> | winner fittest: <span class=\"re5\">each</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"re0\">Mutant</span> class &gt;&gt; newRandom<br/>        <span class=\"br0\">[</span>^<span class=\"br0\">(</span><span class=\"kw1\">self</span> new: <span class=\"re0\">Target</span> size<span class=\"br0\">)</span><br/>            initializeToRandom;<br/>            yourself<span class=\"br0\">]</span><br/>\u00a0<br/>    initializeToRandom<br/>        <span class=\"br0\">[</span><span class=\"kw1\">self</span> keys do: <span class=\"br0\">[</span>:<span class=\"re5\">i</span> | <span class=\"kw1\">self</span> at: <span class=\"re5\">i</span> put: <span class=\"kw1\">self</span> randomLetter<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    mutate: <span class=\"re5\">p</span><br/>        <span class=\"br0\">[</span><span class=\"kw1\">self</span> keys do:<br/>            <span class=\"br0\">[</span>:<span class=\"re5\">i</span> |<br/>            <span class=\"re0\">Random</span> next &lt;<span class=\"sy0\">=</span> <span class=\"re5\">p</span> ifTrue: <span class=\"br0\">[</span><span class=\"kw1\">self</span> at: <span class=\"re5\">i</span> put: <span class=\"kw1\">self</span> randomLetter<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    fitness<br/>        <span class=\"br0\">[</span>|<span class=\"re3\"> score </span>|<br/>        <span class=\"re6\">score</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/>        <span class=\"kw1\">self</span> with: <span class=\"re0\">Target</span> do:<br/>            <span class=\"br0\">[</span>:<span class=\"re5\">me</span>\u00a0:<span class=\"re5\">you</span> |<br/>            me <span class=\"sy0\">=</span> <span class=\"re5\">you</span> ifTrue: <span class=\"br0\">[</span><span class=\"re5\">score</span> <span class=\"sy0\">:=</span> <span class=\"re5\">score</span> + <span class=\"re5\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/>        ^score<span class=\"br0\">]</span><br/>\u00a0<br/>    fittest: <span class=\"re5\">aMutant</span><br/>        <span class=\"br0\">[</span>^self fitness &gt; aMutant fitness<br/>            ifTrue: <span class=\"br0\">[</span><span class=\"kw1\">self</span><span class=\"br0\">]</span><br/>            ifFalse: <span class=\"br0\">[</span><span class=\"re5\">aMutant</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    randomLetter<br/>        <span class=\"br0\">[</span>^<span class=\"re0\">Letters</span> at: <span class=\"br0\">(</span><span class=\"re0\">Random</span> between: <span class=\"re5\">1</span> and: <span class=\"re0\">Letters</span> size<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "Tcl", "loc": 55, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># A function to select a random character from an argument string</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">randchar</span> s <span class=\"br0\">{</span><br/>    <span class=\"kw2\">string</span> index <span class=\"re0\">$s</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Set up the initial variables</span><br/><span class=\"kw1\">set</span> target <span class=\"st0\">\"METHINKS IT IS LIKE A WEASEL\"</span><br/><span class=\"kw1\">set</span> charset <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ \"</span><br/><span class=\"kw1\">set</span> parent <span class=\"br0\">[</span><span class=\"kw2\">subst</span> <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> -all . <span class=\"re0\">$target</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>randchar<span class=\"br0\">(</span><span class=\"re0\">$charset</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> MaxMutateRate <span class=\"nu0\">0.91</span><br/><span class=\"kw1\">set</span> C <span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"co1\"># Work with parent and target as lists of characters so iteration is more efficient</span><br/><span class=\"kw1\">set</span> target <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$target</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> parent <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$parent</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Generate the fitness *ratio*</span><br/><span class=\"kw1\">proc</span> fitness s <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> target<br/>    <span class=\"kw1\">set</span> count <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> c1 <span class=\"re0\">$s</span> c2 <span class=\"re0\">$target</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c1</span> eq <span class=\"re0\">$c2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> count<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span>/double<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$target</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># This generates the converse of the Python version; logically saner naming</span><br/><span class=\"kw1\">proc</span> mutateRate <span class=\"br0\">{</span>parent<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>-<span class=\"br0\">[</span>fitness <span class=\"re0\">$parent</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">$</span>::<span class=\"me1\">MaxMutateRate</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> mutate <span class=\"br0\">{</span>rate<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> charset parent<br/>    <span class=\"kw1\">foreach</span> c <span class=\"re0\">$parent</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$rate</span> <span class=\"sy0\">?</span> randchar<span class=\"br0\">(</span><span class=\"re0\">$charset</span><span class=\"br0\">)</span>\u00a0: <span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> que <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> iterations parent<br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"#%-4i, fitness\u00a0%4.1f%%, '%s'\"</span> \\<br/>\t    <span class=\"re0\">$iterations</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>fitness <span class=\"re0\">$parent</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$parent</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$parent</span> ne <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> rate <span class=\"br0\">[</span>mutateRate <span class=\"re0\">$parent</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> iterations<span class=\"br0\">]</span> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">}</span> que<br/>    <span class=\"kw1\">set</span> copies <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$parent</span> <span class=\"br0\">[</span>fitness <span class=\"re0\">$parent</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$C</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> copies <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> copy <span class=\"br0\">[</span>mutate <span class=\"re0\">$rate</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>fitness <span class=\"re0\">$copy</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> parent <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -real -decreasing -index <span class=\"nu0\">1</span> <span class=\"re0\">$copies</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>que</pre>"}, {"lang": "uBasic/4tH", "loc": 108, "block": "<pre class=\"text highlighted_source\">T = 0                                  ' Address of target<br/>L = 28                                 ' Length of string<br/>P = T + L                              ' Address of parent<br/>R = 6                                  ' Mutation rate in percent<br/>C = 7                                  ' Number of children<br/>B = 0                                  ' Best rate so far<br/>\u00a0<br/>Proc _Initialize                       ' Initialize<br/>\u00a0<br/>Do                                     ' Now start mutating<br/>  I = 0                                ' Nothing does it better so far<br/>\u00a0<br/>  For x = 2 To C+1                     ' Addresses of children<br/>    Proc _MutateDNA (x, P, R)          ' Now mutate their DNA<br/>    F = FUNC(_Fitness (x, T))          ' Check for fitness<br/>    If F &gt; B Then B = F\u00a0: I = x        ' If fitness of child is better<br/>  Next                                 ' Make it the best score<br/>\u00a0<br/>  If I Then                            ' If a better child was found<br/>    Proc _MakeParent (P, I)            ' Make the child the parent<br/>    Proc _PrintParent (P)              ' Print the new parent<br/>  EndIf<br/>\u00a0<br/>  Until B = L                          ' Until top score equals length<br/>Loop<br/>\u00a0<br/>End<br/>\u00a0<br/>\u00a0<br/>_MutateDNA Param(3)                    ' Mutate an entire DNA<br/>  Local(1)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"99fdd9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 to L-1                    ' For the entire string<br/>    If <a class=\"__cf_email__\" data-cfemail=\"781b38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; Rnd(100) Then              ' If mutation rate is met<br/>       @(<a class=\"__cf_email__\" data-cfemail=\"98f9d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"b8f493dcf8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = Ord(\"A\") + Rnd(27) ' Mutate the gene<br/>    Else<br/>       @(<a class=\"__cf_email__\" data-cfemail=\"563716\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"d894f3bc98\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = @(<a class=\"__cf_email__\" data-cfemail=\"3c5e7c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"3f145b7f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)           ' Otherwise copy it from the parent<br/>    EndIf<br/>  Next<br/>Return<br/>\u00a0<br/>\u00a0<br/>_Fitness Param(2)                      ' Check for fitness<br/>  Local(2)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"0e6d4e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0                               ' Fitness is zero<br/>  For <a class=\"__cf_email__\" data-cfemail=\"600420\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 to L-1                    ' For the entire string<br/>    If @(<a class=\"__cf_email__\" data-cfemail=\"3b5a7b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"96dabdf2d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = @(<a class=\"__cf_email__\" data-cfemail=\"bddffd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"72591632\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) Then <a class=\"__cf_email__\" data-cfemail=\"442704\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"264566\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>  Next                                 ' If string matches, increment score<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"85e6c5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' Return the fitness<br/>\u00a0<br/>\u00a0<br/>_MakeParent Param(2)                   ' Make a child into a parent<br/>  Local(1)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"5f3c1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 to L-1                    ' For the entire string<br/>    @(<a class=\"__cf_email__\" data-cfemail=\"056445\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"b69dd5f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = @(<a class=\"__cf_email__\" data-cfemail=\"0e6c4e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"b5f99ed6f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)              ' Copy the DNA gene by gene<br/>  Next<br/>Return<br/>\u00a0<br/>\u00a0<br/>_PrintParent Param(1)                  ' Print the parent<br/>  Local(1)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"cba98b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 to L-1                    ' For the entire string<br/>    If (@(<a class=\"__cf_email__\" data-cfemail=\"9cfddc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"270c4567\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) &gt; Ord (\"Z\") Then<br/>      Print \" \";                       ' Cater for the space<br/>    Else<br/>      Print CHR(@(<a class=\"__cf_email__\" data-cfemail=\"c2a382\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"5f743d1f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>));             ' Print a gene<br/>    EndIf<br/>  Next<br/>\u00a0<br/>  Print                                ' Issue a linefeed<br/>Return<br/>\u00a0<br/>\u00a0<br/>_Initialize                            ' Initialize target and parent<br/>  @(0)=Ord(\"M\")                        ' Initialize target (long!)<br/>  @(1)=Ord(\"E\")                        ' Character by character<br/>  @(2)=Ord(\"T\")<br/>  @(3)=Ord(\"H\")<br/>  @(4)=Ord(\"I\")<br/>  @(5)=Ord(\"N\")<br/>  @(6)=Ord(\"K\")<br/>  @(7)=Ord(\"S\")<br/>  @(8)=Ord(\"Z\")+1<br/>  @(9)=Ord(\"I\")<br/>  @(10)=Ord(\"T\")<br/>  @(11)=Ord(\"Z\")+1<br/>  @(12)=Ord(\"I\")<br/>  @(13)=Ord(\"S\")<br/>  @(14)=Ord(\"Z\")+1<br/>  @(15)=Ord(\"L\")<br/>  @(16)=Ord(\"I\")<br/>  @(17)=Ord(\"K\")<br/>  @(18)=Ord(\"E\")<br/>  @(19)=Ord(\"Z\")+1<br/>  @(20)=Ord(\"A\")<br/>  @(21)=Ord(\"Z\")+1<br/>  @(22)=Ord(\"W\")<br/>  @(23)=Ord(\"E\")<br/>  @(24)=Ord(\"A\")<br/>  @(25)=Ord(\"S\")<br/>  @(26)=Ord(\"E\")<br/>  @(27)=Ord(\"L\")<br/>\u00a0<br/>  Proc _MutateDNA (P/L, P, 100)          ' Now mutate the parent DNA<br/>Return</pre>"}, {"lang": "Ursala", "loc": 20, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>rand_char = arc ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'<br/>\u00a0<br/>target = 'METHINKS IT IS LIKE A WEASEL'<br/>\u00a0<br/>parent = rand_char* target<br/>\u00a0<br/>fitness = length+ (filter ~=)+ zip/target<br/>\u00a0<br/>mutate(\"string\",\"rate\") = \"rate\"%~?(rand_char,~&amp;)* \"string\"<br/>\u00a0<br/>C = 32<br/>\u00a0<br/>evolve = @iiX ~&amp;l-&gt;r @r -*iota(C); @lS nleq$-&amp;l+ ^(fitness,~&amp;)^*C/~&amp;h mutate\\*10<br/>\u00a0<br/>#cast\u00a0%s<br/>\u00a0<br/>main = evolve parent</pre>"}, {"lang": "UTFool", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00b7\u00b7\u00b7<br/>http://rosettacode.org/wiki/Evolutionary_algorithm<br/>\u00b7\u00b7\u00b7<br/>\u25a0 Evolutionary<br/>  \u00a7 static<br/>    target\u2982 String: \"METHINKS IT IS LIKE A WEASEL\"<br/>    letter\u2982 char[]: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \".toCharArray\u00b0<br/>    parent\u2982 String<br/>    random\u2982 java.util.Random\u00b0<br/>    rate\u2982 double: 0.5<br/>    C\u2982 int: 1000<br/>\u00a0<br/>    \u25b6 fittness\u2982 int    \u00b7 computes the 'closeness' of its<br/>    \u2022 argument\u2982 String \u00b7 to the target string<br/>      closeness\u2982 int: 0<br/>      \u2200 i \u2208 0 \u2026 target.length\u00b0<br/>        closeness\u25e5 if target.charAt i = argument.charAt i<br/>      return closeness<br/>\u00a0<br/>    \u25b6 mutate\u2982 String \u00b7 returns a copy of the<br/>    \u2022 given\u2982 String  \u00b7 with some characters probably mutated<br/>    \u2022 rate\u2982 double<br/>      copy\u2982 char[]: given.toCharArray\u00b0<br/>      \u2200 i \u2208 0 \u2026 given.length\u00b0<br/>        copy[i]: letter[random.nextInt letter.length] if rate &gt; random.nextDouble\u00b0<br/>      return String.valueOf copy<br/>\u00a0<br/>    \u25b6 main<br/>    \u2022 args\u2982 String[]<br/>      ancest\u2982 StringBuilder\u00b0<br/>      \u2200 i \u2208 0 \u2026 target.length\u00b0<br/>        ancest.append letter[random.nextInt letter.length]<br/>      parent: ancest.toString\u00b0<br/>      currentFittness\u2982 int: fittness parent<br/>      generation\u2982 int: 0<br/>      \ud83d\udd01 until the parent \u2248 target<br/>        if fittness parent &gt; currentFittness<br/>           currentFittness: fittness parent<br/>           System.out.println \"Fittness of generation #\u2e28generation\u2e29 is \u2e28currentFittness\u2e29\"<br/>        for each time from 1 to C<br/>            mutation\u2982 String: mutate parent, rate<br/>            parent: mutation if fittness parent &lt; fittness mutation<br/>        generation\u25e5<br/>      System.out.println \"Target reached by generation #\u2e28generation\u2e29\"<br/>\u00a0</pre>"}, {"lang": "vbscript", "loc": 99, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'This is the string we want to \"evolve\" to. Any string of any length will<br/>'do as long as it consists only of upper case letters and spaces.<br/>\u00a0<br/>Target  = \"METHINKS IT IS LIKE A WEASEL\"<br/>\u00a0<br/>'This is the pool of letters that will be selected at random for a mutation<br/>\u00a0<br/>letters = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"<br/>\u00a0<br/>'A mutation rate of 0.5 means that there is a 50% chance that one letter<br/>'will be mutated at random in the next child<br/>\u00a0<br/>mutation_rate = 0.5<br/>\u00a0<br/>'Set for 10 children per generation<br/>\u00a0<br/>Dim child(10)<br/>\u00a0<br/>'Generate the first guess as random letters<br/>\u00a0<br/>Randomize<br/>Parent = \"\"<br/>\u00a0<br/>for i = 1 to len(Target)<br/>    Parent = Parent &amp; Mid(letters,Random(1,Len(letters)),1)<br/>next<br/>\u00a0<br/>gen = 0<br/>\u00a0<br/>Do<br/>    bestfit = 0<br/>    bestind = 0<br/>\u00a0<br/>    gen = gen + 1<br/>\u00a0<br/>    'make n copies of the current string and find the one<br/>    'that best matches the target string<br/>\u00a0<br/>    For i = 0 to ubound(child)<br/>\u00a0<br/>        child(i) = Mutate(Parent, mutation_rate)<br/>\u00a0<br/>        fit = Fitness(Target, child(i))<br/>\u00a0<br/>        If fit &gt; bestfit Then<br/>            bestfit = fit<br/>            bestind = i<br/>        End If<br/>\u00a0<br/>    Next<br/>\u00a0<br/>    'Select the child that has the best fit with the target string<br/>\u00a0<br/>    Parent = child(bestind)<br/>    Wscript.Echo parent, \"(fit=\" &amp; bestfit &amp; \")\"<br/>\u00a0<br/>Loop Until Parent = Target<br/>\u00a0<br/>Wscript.Echo vbcrlf &amp; \"Generations = \" &amp; gen<br/>\u00a0<br/>'apply a random mutation to a random character in a string<br/>\u00a0<br/>Function Mutate ( ByVal str , ByVal rate )<br/>\u00a0<br/>    Dim pos        'a random position in the string'<br/>    Dim ltr        'a new letter chosen at random    '<br/>\u00a0<br/>    If rate &gt; Rnd(1) Then<br/>\u00a0<br/>        ltr = Mid(letters,Random(1,len(letters)),1)<br/>        pos = Random(1,len(str))<br/>        str = Left(str, pos - 1) &amp; ltr &amp; Mid(str, pos + 1)<br/>\u00a0<br/>    End If<br/>\u00a0<br/>    Mutate = str<br/>\u00a0<br/>End Function<br/>\u00a0<br/>'returns the number of letters in the two strings that match<br/>\u00a0<br/>Function Fitness (ByVal str , ByVal ref )<br/>\u00a0<br/>    Dim i<br/>\u00a0<br/>    Fitness = 0<br/>\u00a0<br/>    For i = 1 To Len(str)<br/>        If Mid(str, i, 1) = Mid(ref, i, 1) Then Fitness = Fitness + 1<br/>    Next<br/>\u00a0<br/>End Function<br/>\u00a0<br/>'Return a random integer in the range lower to upper (inclusive)<br/>\u00a0<br/>Private Function Random ( lower , upper )<br/>  Random = Int((upper - lower + 1) * Rnd + lower)<br/>End Function</pre>"}, {"lang": "Visual Basic", "loc": 64, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>\u00a0<br/>Option Explicit<br/>\u00a0<br/>Private Sub Main()<br/>   Dim Target<br/>   Dim Parent<br/>   Dim mutation_rate<br/>   Dim children<br/>   Dim bestfitness<br/>   Dim bestindex<br/>   Dim Index<br/>   Dim fitness<br/>\u00a0<br/>      Target = \"METHINKS IT IS LIKE A WEASEL\"<br/>      Parent = \"IU RFSGJABGOLYWF XSMFXNIABKT\"<br/>      mutation_rate = 0.5<br/>       children = 10<br/>      ReDim child(children)<br/>\u00a0<br/>      Do<br/>        bestfitness = 0<br/>        bestindex = 0<br/>        For Index = 1 To children<br/>          child(Index) = FNmutate(Parent, mutation_rate, Target)<br/>          fitness = FNfitness(Target, child(Index))<br/>          If fitness &gt; bestfitness Then<br/>            bestfitness = fitness<br/>            bestindex = Index<br/>          End If<br/>        Next Index<br/>\u00a0<br/>        Parent = child(bestindex)<br/>        Debug.Print Parent<br/>      Loop Until Parent = Target<br/>      End<br/>\u00a0<br/>\u00a0<br/>End Sub<br/>\u00a0<br/>Function FNmutate(Text, Rate, ref)<br/>   Dim C As Integer<br/>   Dim Aux As Integer<br/>\u00a0<br/>     If Rate &gt; Rnd(1) Then<br/>        C = 63 + 27 * Rnd() + 1<br/>        If C = 64 Then C = 32<br/>        Aux = Len(Text) * Rnd() + 1<br/>        If Mid(Text, Aux, 1) &lt;&gt; Mid(ref, Aux, 1) Then<br/>            Text = Left(Text, Aux - 1) &amp; Chr(C) &amp; Mid(Text, Aux + 1)<br/>        End If<br/>\u00a0<br/>     End If<br/>      FNmutate = Text<br/>End Function<br/>Function FNfitness(Text, ref)<br/>    Dim I, F<br/>      For I = 1 To Len(Text)<br/>        If Mid(Text, I, 1) = Mid(ref, I, 1) Then F = F + 1<br/>      Next<br/>      FNfitness = F / Len(Text)<br/>End Function<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 69, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic code declarations<br/>string  0;                      \\use zero-terminated convention (instead of MSb)<br/>\u00a0<br/>def     MutateRate = 15,        \\1 chance in 15 of a mutation<br/>        Copies = 30;            \\number of mutated copies<br/>char    Target, AlphaTbl;<br/>int     SizeOfAlpha;<br/>\u00a0<br/>\u00a0<br/>func    StrLen(Str);    \\Return the number of characters in a string<br/>char    Str;<br/>int     I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>        if Str(I) = 0 then return I;<br/>\u00a0<br/>\u00a0<br/>func    Unfitness(A, B); \\Return number of characters different between A and B<br/>char    A, B;<br/>int     I, C;<br/>[C:= 0;<br/>for I:= 0 to StrLen(A)-1 do<br/>        if A(I) # B(I) then C:= C+1;<br/>return C;<br/>];      \\Unfitness<br/>\u00a0<br/>\u00a0<br/>proc    Mutate(A, B);   \\Copy string A to B, but with each character of B having<br/>char    A, B;           \\ a 1 in MutateRate chance of differing from A<br/>int     I;<br/>[for I:= 0 to StrLen(A)-1 do<br/>        B(I):= if Ran(MutateRate) then A(I) else AlphaTbl(Ran(SizeOfAlpha));<br/>B(I):= 0;               \\terminate string<br/>];      \\Mutate<br/>\u00a0<br/>\u00a0<br/>int     I, BestI, Diffs, Best, Iter;<br/>def     SizeOfTarget = 28;<br/>char    Specimen(Copies, SizeOfTarget+1);<br/>int     ISpecimen, Temp;<br/>\u00a0<br/>[Target:= \"METHINKS IT IS LIKE A WEASEL\";<br/>AlphaTbl:= \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \";<br/>SizeOfAlpha:= StrLen(AlphaTbl);<br/>ISpecimen:= Specimen;   \\integer accesses pointers rather than bytes<br/>\u00a0<br/>\\Initialize first Specimen, the parent, to a random string<br/>for I:= 0 to SizeOfTarget-1 do<br/>        Specimen(0,I):= AlphaTbl(Ran(SizeOfAlpha));<br/>Specimen(0,I):= 0;      \\terminate string<br/>\u00a0<br/>Iter:= 0;<br/>repeat  for I:= 1 to Copies-1 do Mutate(ISpecimen(0), ISpecimen(I));<br/>\u00a0<br/>        Best:= SizeOfTarget;            \\find best matching string<br/>        for I:= 0 to Copies-1 do<br/>                [Diffs:= Unfitness(Target, ISpecimen(I));<br/>                if Diffs &lt; Best then [Best:= Diffs;  BestI:= I];<br/>                ];<br/>        if BestI \\#0\\ then              \\swap best string with first string<br/>                [Temp:= ISpecimen(0);<br/>                ISpecimen(0):= ISpecimen(BestI);<br/>                ISpecimen(BestI):= Temp;<br/>                ];<br/>        Text(0, \"Iter \");  IntOut(0, Iter);<br/>        Text(0, \" Score \");  IntOut(0, Best);<br/>        Text(0, \": \");  Text(0, ISpecimen(0));  CrLf(0);<br/>        Iter:= Iter+1;<br/>until   Best = 0;<br/>]</pre>"}, {"lang": "zkl", "loc": 14, "block": "<pre class=\"text highlighted_source\">const target = \"METHINKS IT IS LIKE A WEASEL\";<br/>const C = 100;  // Number of children in each generation.<br/>const P = 0.05; // Mutation probability.<br/>const A2ZS = [\"A\"..\"Z\"].walk().append(\" \").concat();<br/>fcn fitness(s){ Utils.zipWith('!=,target,s).sum(0) } // bigger is worser<br/>fcn rnd{ A2ZS[(0).random(27)] }<br/>fcn mutate(s){ s.apply(fcn(c){ if((0.0).random(1) &lt; P) rnd() else c }) }<br/>\u00a0<br/>parent\u00a0:= target.len().pump(String,rnd);  // random string of \"A..Z \"<br/>gen:=0; do{  // mutate C copies of parent and pick the fittest<br/>   parent = (0).pump(C,List,T(Void,parent),mutate)<br/>\t    .reduce(fcn(a,b){ if(fitness(a)&lt;fitness(b)) a else b });<br/>   println(\"Gen\u00a0%2d, dist=%2d:\u00a0%s\".fmt(gen+=1, fitness(parent), parent));<br/>}while(parent\u00a0!= target);</pre>"}]}