{"task": "Tic-tac-toe", "blocks": [{"lang": "Ada", "loc": 124, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/>  <span class=\"co1\">-- can play human-human, human-computer, computer-human or computer-computer</span><br/>  <span class=\"co1\">-- the computer isn't very clever: it just chooses a legal random move</span><br/>\u00a0<br/><span class=\"kw3\">procedure</span> Tic_Tac_Toe <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> The_Range <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span>;<br/>   <span class=\"kw3\">type</span> Board_Type <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>The_Range, The_Range<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Rand <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span><span class=\"br0\">(</span>The_Range<span class=\"br0\">)</span>;<br/>   Gen: Rand.<span class=\"me1\">Generator</span>; <span class=\"co1\">-- required for the random moves</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Show_Board<span class=\"br0\">(</span>Board: Board_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Row <span class=\"kw3\">in</span> The_Range <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> Column <span class=\"kw3\">in</span> The_Range <span class=\"kw1\">loop</span><br/>            Put<span class=\"br0\">(</span>Board<span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Show_Board;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Find_Winner<span class=\"br0\">(</span>Board: Board_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Character <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- if 'x' or 'o' wins, it returns that, else it returns ' '</span><br/>\u00a0<br/>      <span class=\"kw3\">function</span> Three_Equal<span class=\"br0\">(</span>A,B,C: Character<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> <span class=\"br0\">(</span>A=B<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>A=C<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Three_Equal;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span> <span class=\"co1\">-- Find_Winner</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> The_Range <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span>    Three_Equal<span class=\"br0\">(</span>Board<span class=\"br0\">(</span>I,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, Board<span class=\"br0\">(</span>I,<span class=\"nu0\">2</span><span class=\"br0\">)</span>, Board<span class=\"br0\">(</span>I,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Board<span class=\"br0\">(</span>I,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">elsif</span>  Three_Equal<span class=\"br0\">(</span>Board<span class=\"br0\">(</span><span class=\"nu0\">1</span>,I<span class=\"br0\">)</span>, Board<span class=\"br0\">(</span><span class=\"nu0\">2</span>,I<span class=\"br0\">)</span>, Board<span class=\"br0\">(</span><span class=\"nu0\">3</span>,I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> Board<span class=\"br0\">(</span><span class=\"nu0\">1</span>,I<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">if</span> Three_Equal<span class=\"br0\">(</span>Board<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, Board<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>, Board <span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span><br/>         Three_Equal<span class=\"br0\">(</span>Board<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, Board<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>, Board <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> Board<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> ' ';<br/>   <span class=\"kw1\">end</span> Find_Winner;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Do_Move<span class=\"br0\">(</span>Board: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Board_Type;<br/>                     New_Char: Character; Computer_Move: Boolean<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Done: Boolean\u00a0:= False;<br/>      C: Character;<br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/>      <span class=\"kw3\">procedure</span> Do_C_Move<span class=\"br0\">(</span>Board: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Board_Type; New_Char: Character<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         Found: Boolean\u00a0:= False;<br/>         X,Y: The_Range;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Found <span class=\"kw1\">loop</span><br/>            X\u00a0:= Rand.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>            Y\u00a0:= Rand.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Board<span class=\"br0\">(</span>X,Y<span class=\"br0\">)</span> /= 'x'<span class=\"br0\">)</span> <span class=\"kw2\">and</span>  <span class=\"br0\">(</span>Board<span class=\"br0\">(</span>X,Y<span class=\"br0\">)</span> /= 'o'<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               Found\u00a0:= True;<br/>               Board<span class=\"br0\">(</span>X,Y<span class=\"br0\">)</span>\u00a0:= New_Char;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> Do_C_Move;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Computer_Move <span class=\"kw1\">then</span><br/>         Do_C_Move<span class=\"br0\">(</span>Board, New_Char<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span> <span class=\"co1\">-- read move;</span><br/>         Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Choose your move, \"</span> &amp; New_Char<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Done <span class=\"kw1\">loop</span><br/>            Get<span class=\"br0\">(</span>C<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">for</span> Row <span class=\"kw3\">in</span> The_Range <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">for</span> Col <span class=\"kw3\">in</span> The_Range <span class=\"kw1\">loop</span><br/>                  <span class=\"kw1\">if</span> Board<span class=\"br0\">(</span>Row, Col<span class=\"br0\">)</span> = C <span class=\"kw1\">then</span><br/>                     Board<span class=\"br0\">(</span>Row, Col<span class=\"br0\">)</span>\u00a0:= New_Char;<br/>                     Done\u00a0:= True;<br/>                  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Do_Move;<br/>\u00a0<br/>   The_Board\u00a0: Board_Type\u00a0:= <span class=\"br0\">(</span><span class=\"br0\">(</span>'<span class=\"nu0\">1</span>','<span class=\"nu0\">2</span>','<span class=\"nu0\">3</span>'<span class=\"br0\">)</span>, <span class=\"br0\">(</span>'<span class=\"nu0\">4</span>','<span class=\"nu0\">5</span>','<span class=\"nu0\">6</span>'<span class=\"br0\">)</span>, <span class=\"br0\">(</span>'<span class=\"nu0\">7</span>','<span class=\"nu0\">8</span>','<span class=\"nu0\">9</span>'<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Cnt_Moves: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   Players: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character\u00a0:= <span class=\"br0\">(</span>'x', 'o'<span class=\"br0\">)</span>; <span class=\"co1\">-- 'x' begins</span><br/>   C_Player: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean\u00a0:= <span class=\"br0\">(</span>False, False<span class=\"br0\">)</span>;<br/>   Reply: Character;<br/>\u00a0<br/><span class=\"kw1\">begin</span> <span class=\"co1\">-- Tic_Tac_Toe</span><br/>\u00a0<br/>   <span class=\"co1\">-- firstly, ask whether the computer shall take over either player</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Players'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Shall \"</span> &amp; Players<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp;<br/>                             <span class=\"st0\">\" be run by the computer? (y=yes)\"</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get</span><span class=\"br0\">(</span>Reply<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Reply='y' <span class=\"kw2\">or</span> Reply='Y' <span class=\"kw1\">then</span><br/>         C_Player<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= True;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Yes!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"No!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Rand.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>; <span class=\"co1\">-- to initalize the random generator</span><br/>\u00a0<br/>   <span class=\"co1\">-- now run the game</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>Find_Winner<span class=\"br0\">(</span>The_Board<span class=\"br0\">)</span> = ' '<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>Cnt_Moves &lt; <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      Show_Board<span class=\"br0\">(</span>The_Board<span class=\"br0\">)</span>;<br/>      Do_Move<span class=\"br0\">(</span>The_Board, Players<span class=\"br0\">(</span>Cnt_Moves <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, C_Player<span class=\"br0\">(</span>Cnt_Moves <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Cnt_Moves\u00a0:= Cnt_Moves + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"This is the end!\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- finally, output the outcome</span><br/>   Show_Board <span class=\"br0\">(</span>The_Board<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">if</span> Find_Winner<span class=\"br0\">(</span>The_Board<span class=\"br0\">)</span> = ' ' <span class=\"kw1\">then</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Draw\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">else</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"The winner is: \"</span> &amp; Find_Winner<span class=\"br0\">(</span>The_Board<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span> Tic_Tac_Toe;</pre>"}, {"lang": "ALGOL W", "loc": 180, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>    string(10) board;<br/>\u00a0<br/>   \u00a0% initialise the board                                                  \u00a0%<br/>    procedure initBoard\u00a0; board\u00a0:= \" 123456789\";<br/>\u00a0<br/>   \u00a0% display the board                                                     \u00a0%<br/>    procedure showBoard\u00a0;<br/>        begin<br/>            s_w\u00a0:= 0;<br/>            write( board(1//1), \"|\", board(2//1), \"|\", board(3//1) );<br/>            write( \"-+-+-\" );<br/>            write( board(4//1), \"|\", board(5//1), \"|\", board(6//1) );<br/>            write( \"-+-+-\" );<br/>            write( board(7//1), \"|\", board(8//1), \"|\", board(9//1) )<br/>        end showBoard\u00a0;<br/>\u00a0<br/>   \u00a0% returns true if board pos is free, false otherwise                    \u00a0%<br/>    logical procedure freeSpace( integer value pos )\u00a0;<br/>        ( board(pos//1) &gt;= \"1\" and board(pos//1) &lt;= \"9\" );<br/>\u00a0<br/>   \u00a0% check for game over                                                   \u00a0%<br/>    logical procedure gameOver\u00a0;<br/>        begin<br/>            logical noMoves;<br/>            noMoves\u00a0:= true;<br/>            for i\u00a0:= 1 until 9 do if noMoves then noMoves\u00a0:= not freeSpace( i );<br/>            noMoves<br/>        end gameOver\u00a0;<br/>\u00a0<br/>   \u00a0% makes the specified winning move or blocks it, if it will win         \u00a0%<br/>    logical procedure winOrBlock( integer   value pos1, pos2, pos3<br/>                               \u00a0; string(1) value searchCharacter<br/>                               \u00a0; string(1) value playerCharacter<br/>                                )\u00a0;<br/>        if      board(pos1//1) = searchCharacter<br/>            and board(pos2//1) = searchCharacter<br/>            and freeSpace( pos3 )<br/>        then begin<br/>            board(pos3//1)\u00a0:= playerCharacter;<br/>            true<br/>            end<br/>        else if board(pos1//1) = searchCharacter<br/>            and freeSpace( pos2 )<br/>            and board(pos3//1) = searchCharacter<br/>        then begin<br/>            board(pos2//1)\u00a0:= playerCharacter;<br/>            true<br/>            end<br/>        else if freeSpace( pos1 )<br/>            and board(pos2//1) = searchCharacter<br/>            and board(pos3//1) = searchCharacter<br/>        then begin<br/>            board(pos1//1)\u00a0:= playerCharacter;<br/>            true<br/>            end<br/>        else begin<br/>            false<br/>        end winOrBlock\u00a0;<br/>\u00a0<br/>   \u00a0% makes a winning move or blocks a winning move, if there is one        \u00a0%<br/>    logical procedure makeOrBlockWinningMove( string(1) value searchCharacter<br/>                                           \u00a0; string(1) value playerCharacter<br/>                                            )\u00a0;<br/>        (  winOrBlock( 1, 2, 3, searchCharacter, playerCharacter )<br/>        or winOrBlock( 4, 5, 6, searchCharacter, playerCharacter )<br/>        or winOrBlock( 7, 8, 9, searchCharacter, playerCharacter )<br/>        or winOrBlock( 1, 4, 7, searchCharacter, playerCharacter )<br/>        or winOrBlock( 2, 5, 8, searchCharacter, playerCharacter )<br/>        or winOrBlock( 3, 6, 9, searchCharacter, playerCharacter )<br/>        or winOrBlock( 1, 5, 9, searchCharacter, playerCharacter )<br/>        or winOrBlock( 3, 5, 7, searchCharacter, playerCharacter )<br/>        )\u00a0;<br/>\u00a0<br/>   \u00a0% makes a move when there isn't an obvious winning/blocking move        \u00a0%<br/>    procedure move ( string(1) value playerCharacter )\u00a0;<br/>        begin<br/>            logical moved;<br/>            moved\u00a0:= false;<br/>           \u00a0% try for the centre, a corner or the midle of a line           \u00a0%<br/>            for pos\u00a0:= 5, 1, 3, 7, 9, 2, 4, 6, 8 do begin<br/>                if not moved and freeSpace( pos ) then begin<br/>                    moved\u00a0:= true;<br/>                    board(pos//1)\u00a0:= playerCharacter<br/>                end<br/>            end<br/>        end move\u00a0;<br/>\u00a0<br/>   \u00a0% gets a move from the user                                             \u00a0%<br/>    procedure userMove( string(1) value playerCharacter )\u00a0;<br/>        begin<br/>            integer move;<br/>            while<br/>                begin<br/>                    write( \"Please enter the move for \", playerCharacter, \" \" );<br/>                    read( move );<br/>                    ( move &lt; 1 or move &gt; 9 or not freeSpace( move ) )<br/>                end<br/>            do  begin<br/>                write( \"Invalid move\" )<br/>            end;<br/>            board(move//1)\u00a0:= playerCharacter<br/>        end userMove\u00a0;<br/>\u00a0<br/>   \u00a0% returns true if the three board positions have the player character,  \u00a0%<br/>   \u00a0%         false otherwise                                               \u00a0%<br/>    logical procedure same( integer   value pos1, pos2, pos3<br/>                         \u00a0; string(1) value playerCharacter<br/>                          )\u00a0;<br/>        (   board(pos1//1) = playerCharacter<br/>        and board(pos2//1) = playerCharacter<br/>        and board(pos3//1) = playerCharacter<br/>        );<br/>\u00a0<br/>   \u00a0% returns true if the player has made a winning move, false otherwise   \u00a0%<br/>    logical procedure playerHasWon( string(1) value playerCharacter )\u00a0;<br/>        (  same( 1, 2, 3, playerCharacter )<br/>        or same( 4, 5, 6, playerCharacter )<br/>        or same( 7, 8, 9, playerCharacter )<br/>        or same( 1, 4, 7, playerCharacter )<br/>        or same( 2, 5, 8, playerCharacter )<br/>        or same( 3, 6, 9, playerCharacter )<br/>        or same( 1, 5, 9, playerCharacter )<br/>        or same( 3, 5, 7, playerCharacter )<br/>        )\u00a0;<br/>\u00a0<br/>   \u00a0% takes a players turn - either automated or user input                 \u00a0%<br/>    procedure turn ( string(1) value playerCharacter, otherCharacter<br/>                  \u00a0; logical   value playerIsUser<br/>                   )\u00a0;<br/>        begin<br/>            if playerIsUser then userMove( playerCharacter )<br/>            else begin<br/>                write( playerCharacter, \" moves...\" );<br/>                if  not makeOrBlockWinningMove( playerCharacter, playerCharacter )<br/>                and not makeOrBlockWinningMove( otherCharacter,  playerCharacter )<br/>                then move( playerCharacter )<br/>            end;<br/>            showBoard<br/>        end turn\u00a0;<br/>\u00a0<br/>   \u00a0% asks a question and returns true if the user inputs y/Y,              \u00a0%<br/>   \u00a0% false otherwise                                                       \u00a0%<br/>    logical procedure yes( string(32) value question )\u00a0;<br/>        begin<br/>            string(1) answer;<br/>            write( question );<br/>            read( answer );<br/>            answer = \"y\" or answer = \"Y\"<br/>        end yes\u00a0;<br/>\u00a0<br/>   \u00a0% play the game                                                         \u00a0%<br/>    while<br/>        begin<br/>            string(1)  again;<br/>            string(32) gameResult;<br/>            logical    oIsUser, xIsUser;<br/>\u00a0<br/>            oIsUser\u00a0:= yes( \"Do you want to play O? \" );<br/>            xIsUser\u00a0:= yes( \"Do you want to play X? \" );<br/>\u00a0<br/>            gameResult\u00a0:= \"it's a draw\";<br/>            initBoard;<br/>            showBoard;<br/>            while not gameOver and not playerHasWon( \"O\" ) and not playerHasWon( \"X\" ) do begin<br/>                turn( \"O\", \"X\", oIsUser );<br/>                if playerHasWon( \"O\" ) then gameResult\u00a0:= \"O wins\"<br/>                else if not gameOver then begin<br/>                    turn( \"X\", \"O\", xIsUser );<br/>                    if playerHasWon( \"X\" ) then gameResult\u00a0:= \"X wins\"<br/>                end<br/>            end\u00a0;<br/>            write( gameResult );<br/>\u00a0<br/>            yes( \"Play again? \" )<br/>        end<br/>    do  begin end<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 113, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">property</span> OMask\u00a0: <span class=\"kw1\">missing value</span><br/><span class=\"kw3\">property</span> XMask\u00a0: <span class=\"kw1\">missing value</span><br/><span class=\"kw3\">property</span> winningNumbers\u00a0: <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">56</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">84</span>, <span class=\"nu0\">146</span>, <span class=\"nu0\">273</span>, <span class=\"nu0\">292</span>, <span class=\"nu0\">448</span><span class=\"br0\">}</span><br/><span class=\"kw3\">property</span> difficulty\u00a0: <span class=\"kw1\">missing value</span><br/>\u00a0<br/><span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">set</span> OMask <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw3\">set</span> XMask <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>   <span class=\"kw3\">if</span> button returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Who should start?\"</span> <span class=\"kw1\">buttons</span> <span class=\"br0\">{</span><span class=\"st0\">\"I shoud\"</span>, <span class=\"st0\">\"CPU\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"CPU\"</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> OMask <span class=\"kw3\">to</span> npcGet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">set</span> difficulty <span class=\"kw3\">to</span> button returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Please choose your difficulty\"</span> <span class=\"kw1\">buttons</span> <span class=\"br0\">{</span><span class=\"st0\">\"Hard\"</span>, <span class=\"st0\">\"Normal\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw3\">repeat</span><br/>       <span class=\"kw3\">set</span> XMask <span class=\"kw3\">to</span> XMask <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>nGet<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>XMask<span class=\"br0\">)</span> <span class=\"kw2\">or</span> OMask <span class=\"sy0\">+</span> XMask <span class=\"sy0\">=</span> <span class=\"nu0\">511</span> <span class=\"kw3\">then</span> <span class=\"kw3\">exit</span> <span class=\"kw3\">repeat</span><br/>       <span class=\"kw3\">set</span> OMask <span class=\"kw3\">to</span> npcGet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>OMask<span class=\"br0\">)</span> <span class=\"kw2\">or</span> OMask <span class=\"sy0\">+</span> XMask <span class=\"sy0\">=</span> <span class=\"nu0\">511</span> <span class=\"kw3\">then</span> <span class=\"kw3\">exit</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/>   <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>OMask<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>       <span class=\"kw3\">set</span> msg <span class=\"kw3\">to</span> <span class=\"st0\">\"CPU Wins!\"</span><br/>   <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>XMask<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>       <span class=\"kw3\">set</span> msg <span class=\"kw3\">to</span> <span class=\"st0\">\"You WON!!!\"</span><br/>   <span class=\"kw3\">else</span><br/>       <span class=\"kw3\">set</span> msg <span class=\"kw3\">to</span> <span class=\"st0\">\"It's a draw\"</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>   <span class=\"kw1\">display dialog</span> msg <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> drawGrid<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"Do you want to play again?\"</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/><span class=\"kw3\">on</span> nGet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">set</span> theMessage <span class=\"kw3\">to</span> <span class=\"st0\">\"It's your turn Player 1, please fill in the number for X\"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span> <span class=\"sy0\">&amp;</span> drawGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">repeat</span><br/>       <span class=\"kw3\">set</span> value <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> theMessage <span class=\"kw1\">default answer</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">offset of</span> value <span class=\"kw3\">in</span> <span class=\"st0\">\"123456789\"</span><span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw3\">if</span> <span class=\"kw2\">not</span> positionIsUsed<span class=\"br0\">(</span>value <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">exit</span> <span class=\"kw3\">repeat</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">return</span> value <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">end</span> nGet<br/>\u00a0<br/><span class=\"kw3\">on</span> npcGet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">--first get the free positions</span><br/>   <span class=\"kw3\">set</span> freeSpots <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> s <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"nu0\">9</span><br/>       <span class=\"kw3\">if</span> <span class=\"kw2\">not</span> positionIsUsed<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> freeSpots <span class=\"kw3\">to</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"co1\">--second check if 1 move can make the CPU win</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> spot <span class=\"kw3\">in</span> freeSpots<br/>       <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>OMask <span class=\"sy0\">+</span> spot<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> OMask <span class=\"sy0\">+</span> spot<br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/>   <span class=\"kw3\">if</span> difficulty <span class=\"kw3\">is</span> <span class=\"st0\">\"Hard\"</span> <span class=\"kw2\">and</span> OMask <span class=\"kw3\">is</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>       <span class=\"kw3\">if</span> XMask <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> XMask <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">2</span><br/>       <span class=\"kw3\">if</span> XMask <span class=\"sy0\">=</span> <span class=\"nu0\">64</span> <span class=\"kw2\">or</span> XMask <span class=\"sy0\">=</span> <span class=\"nu0\">256</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">128</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>   <span class=\"co1\">--third check if a user can make make it win (defensive) place it on position</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> spot <span class=\"kw3\">in</span> freeSpots<br/>       <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>XMask <span class=\"sy0\">+</span> spot<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> OMask <span class=\"sy0\">+</span> spot<br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/>   <span class=\"co1\">--fourth check if CPU can win in two moves</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> spot1 <span class=\"kw3\">in</span> freeSpots<br/>       <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> spot2 <span class=\"kw3\">in</span> freeSpots<br/>           <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>OMask <span class=\"sy0\">+</span> spot1 <span class=\"sy0\">+</span> spot2<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> OMask <span class=\"sy0\">+</span> spot2<br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"co1\">--fifth check if player can win in two moves</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> spot1 <span class=\"kw3\">in</span> freeSpots<br/>       <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> spot2 <span class=\"kw3\">in</span> reverse <span class=\"kw3\">of</span> freeSpots<br/>           <span class=\"kw3\">if</span> winnerForMask<span class=\"br0\">(</span>XMask <span class=\"sy0\">+</span> spot1 <span class=\"sy0\">+</span> spot2<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> OMask <span class=\"sy0\">+</span> spot1<br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"co1\">--at last pick a random spot</span><br/>   <span class=\"kw3\">if</span> XMask <span class=\"sy0\">+</span> OMask <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> difficulty <span class=\"sy0\">=</span> <span class=\"st0\">\"Hard\"</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>   <span class=\"kw3\">return</span> OMask <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw2\">some</span> <span class=\"kw1\">item</span> <span class=\"kw3\">of</span> freeSpots<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> npcGet<br/>\u00a0<br/><span class=\"kw3\">on</span> winnerForMask<span class=\"br0\">(</span>mask<span class=\"br0\">)</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> winLine <span class=\"kw3\">in</span> winningNumbers<br/>       <span class=\"kw3\">if</span> BWAND<span class=\"br0\">(</span>winLine, mask<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> winLine <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"kw1\">true</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">return</span> <span class=\"kw1\">false</span><br/><span class=\"kw3\">end</span> winnerForMask<br/>\u00a0<br/><span class=\"kw3\">on</span> drawGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">set</span> grid <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> o <span class=\"kw3\">from</span> <span class=\"nu0\">0</span> <span class=\"kw3\">to</span> <span class=\"nu0\">8</span><br/>       <span class=\"kw3\">if</span> BWAND<span class=\"br0\">(</span>OMask, <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> o<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> o <span class=\"kw3\">then</span><br/>           <span class=\"kw3\">set</span> grid <span class=\"kw3\">to</span> grid <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"O\"</span><br/>       <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> BWAND<span class=\"br0\">(</span>XMask, <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> o<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> o <span class=\"kw3\">then</span><br/>           <span class=\"kw3\">set</span> grid <span class=\"kw3\">to</span> grid <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"X\"</span><br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw3\">set</span> grid <span class=\"kw3\">to</span> grid <span class=\"sy0\">&amp;</span> o <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>       <span class=\"kw3\">if</span> o <span class=\"kw3\">is</span> <span class=\"kw3\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> grid <span class=\"kw3\">to</span> grid <span class=\"sy0\">&amp;</span> <span class=\"kw3\">return</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">return</span> grid<br/><span class=\"kw3\">end</span> drawGrid<br/>\u00a0<br/><span class=\"kw3\">on</span> positionIsUsed<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><br/>   <span class=\"kw3\">return</span> BWAND<span class=\"br0\">(</span>OMask <span class=\"sy0\">+</span> XMask, <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> positionIsUsed<br/>\u00a0<br/><span class=\"kw3\">on</span> BWAND<span class=\"br0\">(</span>n1, n2<span class=\"br0\">)</span><br/>   <span class=\"kw3\">set</span> theResult <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> o <span class=\"kw3\">from</span> <span class=\"nu0\">0</span> <span class=\"kw3\">to</span> <span class=\"nu0\">8</span><br/>       <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n1 <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>n2 <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> theResult <span class=\"kw3\">to</span> theResult <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">^</span> o<br/>       <span class=\"kw3\">set</span> <span class=\"br0\">{</span>n1, n2<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>n1 <span class=\"kw2\">div</span> <span class=\"nu0\">2</span>, n2 <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>   <span class=\"kw3\">return</span> theResult <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">end</span> BWAND</pre>"}, {"lang": "AutoHotkey", "loc": 107, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x12 y12 w30 h30 vB1 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x52 y12 w30 h30 vB2 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x92 y12 w30 h30 vB3 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x12 y52 w30 h30 vB4 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x52 y52 w30 h30 vB5 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x92 y52 w30 h30 vB6 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x12 y92 w30 h30 vB7 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x52 y92 w30 h30 vB8 gButtonHandler<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x92 y92 w30 h30 vB9 gButtonHandler<span class=\"sy0\">,</span><br/><span class=\"co1\">; Generated using SmartGUI Creator 4.0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span> x127 y87 h150 w141<span class=\"sy0\">,</span> Tic<span class=\"sy0\">-</span>Tac<span class=\"sy0\">-</span>Toe<br/>Winning_Moves <span class=\"sy0\">:=</span> <span class=\"st0\">\"123,456,789,147,258,369,159,357\"</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">ButtonHandler:<br/></span>    <span class=\"co1\">; Fired whenever the user clicks on an enabled button</span><br/>    Go<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_GuiControl\"><span class=\"kw2\">A_GuiControl</span></a><span class=\"sy0\">,</span><span class=\"st0\">\"X\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a> MyMove<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">MyMove: </span><span class=\"co1\">; Loops through winning moves. First attempts to win, then to block, then a random move</span><br/>    Went<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> Winning_Moves<span class=\"sy0\">,</span>`<span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><br/>        Current_Set <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>        X<span class=\"sy0\">:=</span>O<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> Current_Set<br/>        <span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> Char<span class=\"sy0\">,,</span>Button<span class=\"re0\">%A_LoopField%</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Char <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span> <span class=\"br0\">)</span><br/>                O<span class=\"sy0\">++</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Char <span class=\"sy0\">=</span> <span class=\"st0\">\"X\"</span> <span class=\"br0\">)</span><br/>                X<span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span> O <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">and</span> X <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span> X <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">and</span> O <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            Finish_Line<span class=\"br0\">(</span>Current_Set<span class=\"br0\">)</span><br/>            Went <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a> <span class=\"co1\">; out of the Winning_Moves Loop to ensure the computer goes only once</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>!Went<span class=\"br0\">)</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a> RandomMove<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>Go<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Control.htm\"><span class=\"kw3\">Control</span></a><span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">chr</span></a><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span><span class=\"re0\">%Control%</span><span class=\"sy0\">,</span> <span class=\"re0\">%chr%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span>Disable<span class=\"sy0\">,</span><span class=\"re0\">%Control%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a><span class=\"sy0\">,</span> CheckWin<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">CheckWin:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> Winning_Moves<span class=\"sy0\">,</span>`<span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><br/>        Current_Set <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>        X<span class=\"sy0\">:=</span>O<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> Current_Set<br/>        <span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> Char<span class=\"sy0\">,,</span>Button<span class=\"re0\">%A_LoopField%</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Char <span class=\"sy0\">=</span> <span class=\"st0\">\"O\"</span> <span class=\"br0\">)</span><br/>                O<span class=\"sy0\">++</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Char <span class=\"sy0\">=</span> <span class=\"st0\">\"X\"</span> <span class=\"br0\">)</span><br/>                X<span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span> O <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> O Wins!<br/>            <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a> DisableAll<br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span> X <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> X Wins!<br/>            <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a> DisableAll<br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"re2\">DisableAll:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Disable<span class=\"sy0\">,</span> Button<span class=\"re0\">%A_Index%</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>Finish_Line<span class=\"br0\">(</span>Set<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">;   Finish_Line is called when a line exists with 2 of the same character. It goes in the remaining spot, thereby blocking or winning.</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> set<br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> IsEnabled<span class=\"sy0\">,</span> Enabled<span class=\"sy0\">,</span> Button<span class=\"re0\">%A_LoopField%</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Control.htm\"><span class=\"kw3\">Control</span></a><span class=\"sy0\">=</span>Button<span class=\"re0\">%A_LoopField%</span><br/>        <span class=\"kw1\">If</span> IsEnabled<br/>            Go<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Control.htm\"><span class=\"kw3\">Control</span></a><span class=\"sy0\">,</span><span class=\"st0\">\"O\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">RandomMove:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> rnd<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> IsEnabled<span class=\"sy0\">,</span> Enabled<span class=\"sy0\">,</span> Button<span class=\"re0\">%rnd%</span><br/>        <span class=\"kw1\">If</span> IsEnabled<br/>        <span class=\"br0\">{</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Control.htm\"><span class=\"kw3\">Control</span></a><span class=\"sy0\">=</span>Button<span class=\"re0\">%rnd%</span><br/>            Go<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/Control.htm\"><span class=\"kw3\">Control</span></a><span class=\"sy0\">,</span><span class=\"st0\">\"O\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 115, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f TIC-TAC-TOE.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> = <span class=\"st0\">\"3 7 4 6 8\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span> = <span class=\"st0\">\"2 8 6 4 7\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span> = <span class=\"st0\">\"7 3 2 8 6\"</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span> = <span class=\"st0\">\"8 2 3 7 4\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">17</span><span class=\"br0\">]</span> = <span class=\"st0\">\"4 6 8 2 3\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"br0\">]</span> = <span class=\"st0\">\"6 4 7 3 2\"</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">19</span><span class=\"br0\">]</span> = <span class=\"st0\">\"8 2 3 7 4\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">23</span><span class=\"br0\">]</span> = <span class=\"st0\">\"1 9 6 4 8\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"br0\">]</span> = <span class=\"st0\">\"1 9 3 7 8\"</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"br0\">]</span> = <span class=\"st0\">\"8 3 7 4 0\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">26</span><span class=\"br0\">]</span> = <span class=\"st0\">\"3 7 1 9 8\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">27</span><span class=\"br0\">]</span> = <span class=\"st0\">\"6 4 1 9 8\"</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">28</span><span class=\"br0\">]</span> = <span class=\"st0\">\"1 9 7 3 4\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">29</span><span class=\"br0\">]</span> = <span class=\"st0\">\"4 6 3 7 8\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">35</span><span class=\"br0\">]</span> = <span class=\"st0\">\"7 4 6 8 2\"</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">45</span><span class=\"br0\">]</span> = <span class=\"st0\">\"6 7 3 2 0\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">56</span><span class=\"br0\">]</span> = <span class=\"st0\">\"4 7 3 2 8\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">57</span><span class=\"br0\">]</span> = <span class=\"st0\">\"3 2 8 4 6\"</span><br/>    move<span class=\"br0\">[</span><span class=\"nu0\">58</span><span class=\"br0\">]</span> = <span class=\"st0\">\"2 3 7 4 6\"</span>; move<span class=\"br0\">[</span><span class=\"nu0\">59</span><span class=\"br0\">]</span> = <span class=\"st0\">\"3 2 8 4 6\"</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"7 4 1 8 5 2 9 6 3\"</span>,rotate<span class=\"br0\">)</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"253 280 457 254 257 350 452 453 570 590\"</span>,special<span class=\"br0\">)</span><br/>    i = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> s<span class=\"br0\">[</span><span class=\"sy3\">++</span>i<span class=\"br0\">]</span> = <span class=\"st0\">\" \"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"You move first, use the keypad:\"</span><span class=\"br0\">)</span><br/>    board = <span class=\"st0\">\"<span class=\"es0\">\\n</span>7 * 8 * 9<span class=\"es0\">\\n</span>*********<span class=\"es0\">\\n</span>4 * 5 * 6<span class=\"es0\">\\n</span>*********<span class=\"es0\">\\n</span>1 * 2 * 3<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>? \"</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">&lt;</span> <span class=\"nu0\">7</span> <span class=\"br0\">{</span><br/>    x = <span class=\"re0\">$0</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"? \"</span><span class=\"br0\">)</span><br/>      next<br/>    <span class=\"br0\">}</span><br/>    s<span class=\"br0\">[</span>x<span class=\"br0\">]</span> = <span class=\"st0\">\"X\"</span><br/>    <span class=\"sy3\">++</span>state<br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>state <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;</span>r; <span class=\"sy3\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> x = rotate<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>r=<span class=\"nu0\">0</span>; x<span class=\"sy2\">&gt;</span><span class=\"nu0\">2</span> <span class=\"sy1\">&amp;&amp;</span> x<span class=\"sy2\">!=</span><span class=\"nu0\">5</span>; <span class=\"sy3\">++</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span> x = rotate<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    k = x<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> d = <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> d = <span class=\"nu0\">5</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>    c = <span class=\"nu0\">5.5</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span>k <span class=\"sy3\">+</span> x<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">4.5</span> <span class=\"sy3\">*</span> abs<span class=\"br0\">(</span>k <span class=\"sy3\">-</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span>move<span class=\"br0\">[</span>c<span class=\"br0\">]</span>,t<span class=\"br0\">)</span><br/>    d = t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    e = t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    f = t<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    g = t<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>    h = t<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">{</span><br/>    k = x <span class=\"sy3\">/</span> <span class=\"nu0\">2</span>.<br/>    c = c <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><br/>    d = f<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>c<span class=\"sy3\">-</span><span class=\"nu0\">350</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">!=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> d = <span class=\"nu0\">10</span> <span class=\"sy3\">-</span> x <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy2\">==</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span> g = f <span class=\"br0\">}</span><br/>      h = <span class=\"nu0\">10</span> <span class=\"sy3\">-</span> g<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy3\">+</span><span class=\"nu0\">0</span> <span class=\"sy2\">==</span> e<span class=\"sy3\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        h = g<br/>        g = <span class=\"nu0\">9</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy3\">+</span><span class=\"nu0\">0</span> <span class=\"sy2\">!=</span> e<span class=\"sy3\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      d = e<br/>      state = <span class=\"nu0\">6</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy3\">+</span><span class=\"nu0\">0</span> <span class=\"sy2\">==</span> g<span class=\"sy3\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      d = h<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      d = g<br/>      state = <span class=\"nu0\">6</span><br/>    <span class=\"br0\">}</span><br/>    x = <span class=\"nu0\">6</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; <span class=\"sy3\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      b = special<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy2\">==</span> <span class=\"nu0\">254</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x = <span class=\"nu0\">4</span> <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k<span class=\"sy3\">+</span><span class=\"nu0\">0</span> <span class=\"sy2\">==</span> abs<span class=\"br0\">(</span>b<span class=\"sy3\">-</span>c<span class=\"sy3\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> state = x <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">&lt;</span> <span class=\"nu0\">7</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>state <span class=\"sy2\">!=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy3\">-</span>r; <span class=\"sy3\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> d = rotate<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>      s<span class=\"br0\">[</span>d<span class=\"br0\">]</span> = <span class=\"st0\">\"O\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b=<span class=\"nu0\">7</span>; b<span class=\"sy2\">&gt;</span><span class=\"nu0\">0</span>; b<span class=\"sy3\">-</span>=<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s *\u00a0%s *\u00a0%s<span class=\"es0\">\\n</span>\"</span>,s<span class=\"br0\">[</span>b<span class=\"sy3\">++</span><span class=\"br0\">]</span>,s<span class=\"br0\">[</span>b<span class=\"sy3\">++</span><span class=\"br0\">]</span>,s<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy2\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"*********\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">&lt;</span> <span class=\"nu0\">5</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"? \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">5</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"tie game\"</span><span class=\"br0\">)</span><br/>    state = <span class=\"nu0\">7</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">6</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"you lost\"</span><span class=\"br0\">)</span><br/>    state = <span class=\"nu0\">7</span><br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">7</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\", play again? \"</span><span class=\"br0\">)</span><br/>    <span class=\"sy3\">++</span>state<br/>    next<br/><span class=\"br0\">}</span><br/>state <span class=\"sy2\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$1</span> <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span>yY<span class=\"br0\">]</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    i = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> s<span class=\"br0\">[</span><span class=\"sy3\">++</span>i<span class=\"br0\">]</span> = <span class=\"st0\">\" \"</span> <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>    state = <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> x <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span> <span class=\"sy3\">-</span>x <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bash", "loc": 66, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/bash</span><br/><span class=\"kw3\">declare</span> <span class=\"re5\">-a</span> <span class=\"re2\">B</span>=<span class=\"br0\">(</span> e e e  e e e  e e e <span class=\"br0\">)</span>  <span class=\"co0\"># Board</span><br/>\u00a0<br/><span class=\"kw1\">function</span> show<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"co0\"># show B - underline first 2 rows; highlight position; number empty positoins</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> p <span class=\"re2\">POS</span>=<span class=\"co1\">${1:-9}</span>; <span class=\"kw3\">local</span> UL <span class=\"re2\">BOLD</span>=<span class=\"st0\">\"\\e[1m\"</span> <span class=\"re2\">GREEN</span>=<span class=\"st0\">\"\\e[32m\"</span> <span class=\"re2\">DIM</span>=<span class=\"st0\">\"\\e[2m\"</span> <span class=\"re2\">OFF</span>=<span class=\"st0\">\"\\e[m\"</span> <span class=\"re2\">ULC</span>=<span class=\"st0\">\"\\e[4m\"</span><br/>  <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span>; <span class=\"kw1\">do</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> p<span class=\"sy0\">%</span>3 <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"  \"</span>                             <span class=\"co0\"># indent boards</span><br/>    <span class=\"re2\">UL</span>=<span class=\"st0\">\"\"</span>; <span class=\"br0\">[</span><span class=\"br0\">[</span> p<span class=\"sy0\">/</span><span class=\"nu0\">3</span> <span class=\"re5\">-lt</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">UL</span>=<span class=\"re1\">$ULC</span>                          <span class=\"co0\"># underline first 2 rows</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> p <span class=\"re5\">-eq</span> POS <span class=\"br0\">]</span><span class=\"br0\">]</span>   <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"<span class=\"es2\">$BOLD</span><span class=\"es2\">$GREEN</span>\"</span>                  <span class=\"co0\"># bold and colour for this position</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[p]}</span> = e <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"<span class=\"es2\">$UL</span><span class=\"es2\">$DIM</span>%d<span class=\"es2\">$OFF</span>\"</span> <span class=\"re1\">$p</span> <span class=\"sy0\">||</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"<span class=\"es2\">$UL</span>%s<span class=\"es2\">$OFF</span>\"</span> <span class=\"co1\">${B[p]}</span>  <span class=\"co0\"># num or UL</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> p<span class=\"sy0\">%</span>3 <span class=\"re5\">-lt</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"<span class=\"es2\">$UL</span> | <span class=\"es2\">$OFF</span>\"</span>; <span class=\"br0\">}</span> <span class=\"sy0\">||</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"co0\"># underline vertical bars or NL</span><br/>  <span class=\"kw1\">done</span><br/><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">function</span> win<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"co0\"># win 'X' 3 return true if X wins after move in position 3</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">ME</span>=<span class=\"re4\">$1</span>; <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">p</span>=<span class=\"re4\">$2</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[p/3*3]}</span> = <span class=\"re1\">$ME</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[p/3*3+1]}</span> = <span class=\"re1\">$ME</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[p/3*3+2]}</span> = <span class=\"re1\">$ME</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span>  <span class=\"co0\"># row</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[p]}</span>     = <span class=\"re1\">$ME</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[(p+3)%9]}</span> = <span class=\"re1\">$ME</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[(p+6)%9]}</span> = <span class=\"re1\">$ME</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span>  <span class=\"co0\"># col</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[4]}</span> <span class=\"sy0\">!</span>= <span class=\"re1\">$ME</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span>                                                   <span class=\"co0\"># don't test diags</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> p<span class=\"sy0\">%</span>4 <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[0]}</span> = <span class=\"re1\">$ME</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[8]}</span> = <span class=\"re1\">$ME</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span>                      <span class=\"co0\"># TL - BR diag</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> p<span class=\"sy0\">%</span>4 <span class=\"re5\">-eq</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> p <span class=\"re5\">-eq</span> <span class=\"nu0\">4</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[2]}</span> = <span class=\"re1\">$ME</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co1\">${B[6]}</span> = <span class=\"re1\">$ME</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>                 <span class=\"co0\"># TR - BL diag</span><br/><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">function</span> bestMove<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"co0\"># return best move or 9 if none possible</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">ME</span>=<span class=\"re4\">$1</span> <span class=\"re2\">OP</span>=<span class=\"re4\">$2</span>; <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> o s p<br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-ia</span> <span class=\"re2\">S</span>=<span class=\"br0\">(</span> <span class=\"re5\">-9</span> <span class=\"re5\">-9</span> <span class=\"re5\">-9</span>  <span class=\"re5\">-9</span> <span class=\"re5\">-9</span> <span class=\"re5\">-9</span>  <span class=\"re5\">-9</span> <span class=\"re5\">-9</span> <span class=\"re5\">-9</span> <span class=\"br0\">)</span>  <span class=\"co0\"># score board</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-a</span> SB                                   <span class=\"co0\"># save board</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[*]//[!e]}</span> = <span class=\"st0\">\"\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">9</span>          <span class=\"co0\"># game over</span><br/>  <span class=\"re2\">SB</span>=<span class=\"br0\">(</span> <span class=\"co1\">${B[*]}</span> <span class=\"br0\">)</span>                                <span class=\"co0\"># save Board</span><br/>  <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span>; <span class=\"kw1\">do</span>                          <span class=\"co0\"># for each board position</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[p]}</span> <span class=\"sy0\">!</span>= e <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">continue</span>                        <span class=\"co0\"># skip occupied positions</span><br/>    B<span class=\"br0\">[</span>p<span class=\"br0\">]</span>=<span class=\"re1\">$ME</span>                                              <span class=\"co0\"># occupy position</span><br/>    win <span class=\"re1\">$ME</span> <span class=\"re1\">$p</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> S<span class=\"br0\">[</span>p<span class=\"br0\">]</span>=<span class=\"nu0\">2</span>; <span class=\"re2\">B</span>=<span class=\"br0\">(</span> <span class=\"co1\">${SB[*]}</span> <span class=\"br0\">)</span>; <span class=\"kw3\">return</span> <span class=\"re1\">$p</span>; <span class=\"br0\">}</span>  <span class=\"co0\"># ME wins so this is best move</span><br/>    bestMove <span class=\"re1\">$OP</span> <span class=\"re1\">$ME</span>; <span class=\"re2\">o</span>=<span class=\"re4\">$?</span>                                <span class=\"co0\"># what will opponent do</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> o <span class=\"re5\">-le</span> <span class=\"nu0\">8</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> B<span class=\"br0\">[</span>o<span class=\"br0\">]</span>=<span class=\"re1\">$OP</span>; win <span class=\"re1\">$OP</span> <span class=\"re1\">$o</span>; <span class=\"re2\">s</span>=<span class=\"re4\">$?</span>; <span class=\"br0\">}</span>      <span class=\"co0\"># opponent can make a legal move</span><br/>    S<span class=\"br0\">[</span>p<span class=\"br0\">]</span>=<span class=\"co1\">${s:-1}</span>                                          <span class=\"co0\"># save result of opponent move</span><br/>    <span class=\"re2\">B</span>=<span class=\"br0\">(</span> <span class=\"co1\">${SB[*]}</span> <span class=\"br0\">)</span>                                        <span class=\"co0\"># restore board after each trial run</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">best</span>=-<span class=\"nu0\">1</span>; <span class=\"kw3\">local</span> <span class=\"re5\">-ia</span> <span class=\"re2\">MOV</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span>; <span class=\"kw1\">do</span>                     <span class=\"co0\"># find all best moves</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> S<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"re5\">-lt</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">continue</span>                     <span class=\"co0\"># dont bother with occupied positions</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> S<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"re5\">-eq</span> S<span class=\"br0\">[</span>best<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> MOV+=<span class=\"br0\">(</span>p<span class=\"br0\">)</span>; <span class=\"re2\">best</span>=p; <span class=\"br0\">}</span>  <span class=\"co0\"># add this move to current list</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span> S<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"re5\">-gt</span> S<span class=\"br0\">[</span>best<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> <span class=\"re2\">MOV</span>=<span class=\"br0\">(</span>p<span class=\"br0\">)</span>; <span class=\"re2\">best</span>=p; <span class=\"br0\">}</span>   <span class=\"co0\"># a better move so scrap list and start again</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">return</span> <span class=\"co1\">${MOV[ RANDOM%${#MOV[*]}</span> <span class=\"br0\">]</span><span class=\"br0\">}</span>  <span class=\"co0\"># pick one at random</span><br/><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">function</span> getMove<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"co0\"># getMove from opponent</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$ME</span> = X <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> bestMove <span class=\"re1\">$ME</span> <span class=\"re1\">$OP</span>; <span class=\"kw3\">return</span> <span class=\"re4\">$?</span>; <span class=\"br0\">}</span>     <span class=\"co0\"># pick X move automatically</span><br/>  <span class=\"kw2\">read</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"O move: \"</span> <span class=\"re5\">-n</span> <span class=\"nu0\">1</span>; <span class=\"kw3\">printf</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span>; <span class=\"kw3\">return</span> <span class=\"re1\">$REPLY</span>   <span class=\"co0\"># get opponents move</span><br/><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">function</span> turn<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"co0\"># turn starts or continues a game. It is ME's turn</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> p; <span class=\"kw3\">local</span> <span class=\"re2\">ME</span>=<span class=\"re4\">$1</span> <span class=\"re2\">OP</span>=<span class=\"re4\">$2</span><br/>  getMove; <span class=\"re2\">p</span>=<span class=\"re4\">$?</span>; <span class=\"br0\">[</span><span class=\"br0\">[</span> p <span class=\"re5\">-gt</span> <span class=\"nu0\">8</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"Draw!<span class=\"es1\">\\n</span>\"</span>; show; <span class=\"kw3\">return</span> <span class=\"nu0\">1</span>; <span class=\"br0\">}</span>  <span class=\"co0\"># no move so a draw</span><br/>  B<span class=\"br0\">[</span>p<span class=\"br0\">]</span>=<span class=\"re1\">$ME</span>; <span class=\"kw3\">printf</span> <span class=\"st0\">\"%s moves\u00a0%d<span class=\"es1\">\\n</span>\"</span> <span class=\"re1\">$ME</span> <span class=\"re1\">$p</span>                                <span class=\"co0\"># mark board</span><br/>  win <span class=\"re1\">$ME</span> <span class=\"re1\">$p</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"%s wins!<span class=\"es1\">\\n</span>\"</span> <span class=\"re1\">$ME</span>; show <span class=\"re1\">$p</span>; <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$ME</span> = X <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">2</span>; <span class=\"kw3\">return</span> <span class=\"nu0\">0</span>; <span class=\"br0\">}</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"co1\">${B[*]//[!e]}</span> = <span class=\"st0\">\"\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"Draw!<span class=\"es1\">\\n</span>\"</span>; show; <span class=\"kw3\">return</span> <span class=\"nu0\">1</span>; <span class=\"br0\">}</span>      <span class=\"co0\"># no move so a draw</span><br/>  show <span class=\"re1\">$p</span>; turn <span class=\"re1\">$OP</span> <span class=\"re1\">$ME</span>                                                  <span class=\"co0\"># opponent moves</span><br/><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"Bic Bash Bow<span class=\"es1\">\\n</span>\"</span><br/>show; <span class=\"br0\">[</span><span class=\"br0\">[</span> RANDOM<span class=\"sy0\">%</span>2 <span class=\"re5\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">{</span> turn O X; <span class=\"kw3\">exit</span> <span class=\"re4\">$?</span>; <span class=\"br0\">}</span> <span class=\"sy0\">||</span> turn X O<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 144, "block": "<pre class=\"text highlighted_source\">place1 = 1<br/>place2 = 2<br/>place3 = 3<br/>place4 = 4<br/>place5 = 5<br/>place6 = 6<br/>place7 = 7<br/>place8 = 8<br/>place9 = 9<br/>symbol1 = \"X\"<br/>symbol2 = \"O\"<br/>reset:<br/>TextWindow.Clear()<br/>TextWindow.Write(place1 + \" \")<br/>TextWindow.Write(place2 + \" \")<br/>TextWindow.WriteLine(place3 + \" \")<br/>TextWindow.Write(place4 + \" \")<br/>TextWindow.Write(place5 + \" \")<br/>TextWindow.WriteLine(place6 + \" \")<br/>TextWindow.Write(place7 + \" \")<br/>TextWindow.Write(place8 + \" \")<br/>TextWindow.WriteLine(place9 + \" \")<br/>TextWindow.WriteLine(\"Where would you like to go to (choose a number from 1 to 9 and press enter)?\")<br/>n = TextWindow.Read()<br/>If n = 1 then<br/>  If place1 = symbol1 or place1 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place1 = symbol1<br/>  EndIf<br/>ElseIf n = 2 then<br/>  If place2 = symbol1 or place2 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place2 = symbol1<br/>  EndIf<br/>ElseIf n = 3 then<br/>  If place3 = symbol1 or place3 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place3 = symbol1<br/>  EndIf<br/>ElseIf n = 4 then<br/>  If place4 = symbol1 or place4 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place4 = symbol1<br/>  EndIf<br/>ElseIf n = 5 then<br/>  If place5 = symbol1 or place5 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place5 = symbol1<br/>  EndIf<br/>ElseIf n = 6 then<br/>  If place6 = symbol1 or place6 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place6 = symbol1<br/>  EndIf<br/>ElseIf n = 7 then<br/>  If place8 = symbol1 or place7 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place7 = symbol1<br/>  EndIf<br/>ElseIf n = 8 then<br/>  If place8 = symbol1 or place8 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place8 = symbol1<br/>  EndIf<br/>ElseIf n = 9 then<br/>  If place9 = symbol1 or place9 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place9 = symbol1<br/>  EndIf<br/>EndIf<br/>Goto ai<br/>ai:<br/>n = Math.GetRandomNumber(9)<br/>If n = 1 then<br/>  If place1 = symbol1 or place1 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place1 = symbol2<br/>  EndIf<br/>ElseIf n = 2 then<br/>  If place2 = symbol1 or place2 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place2 = symbol2<br/>  EndIf<br/>ElseIf n = 3 then<br/>  If place3 = symbol1 or place3 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place3 = symbol2<br/>  EndIf<br/>ElseIf n = 4 then<br/>  If place4 = symbol1 or place4 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place4 = symbol2<br/>  EndIf<br/>ElseIf n = 5 then<br/>  If place5 = symbol1 or place5 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place5 = symbol2<br/>  EndIf<br/>ElseIf n = 6 then<br/>  If place6 = symbol1 or place6 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place6 = symbol2<br/>  EndIf<br/>ElseIf n = 7 then<br/>  If place7 = symbol1 or place7 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place7 = symbol2<br/>  EndIf<br/>ElseIf n = 8 then<br/>  If place8 = symbol1 or place8 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place8 = symbol2<br/>  EndIf<br/>ElseIf n = 9 then<br/>  If place9 = symbol1 or place9 = symbol2 then<br/>    Goto ai<br/>  Else<br/>    place9 = symbol2<br/>  EndIf<br/>EndIf<br/>If place1 = symbol1 and place2 = symbol1 and place3 = symbol1 or place4 = symbol1 and place5 = symbol1 and place6 = symbol1 or place7 = symbol1 and place8 = symbol1 and place9 = symbol1 or place1 = symbol1 and place4 = symbol1 and place7 = symbol1 or place2 = symbol1 and place5 = symbol1 and place8 = symbol1 or place3 = symbol1 and place6 = symbol1 and place9 = symbol1 or place1 = symbol1 and place5 = symbol1 and place9 = symbol1 or place3 = symbol1 and place5 = symbol1 and place7 = symbol1 then<br/>  TextWindow.WriteLine(\"Player 1 (\" + symbol1 + \") wins!\")<br/>ElseIf place1 = symbol2 and place2 = symbol2 and place3 = symbol2 or place4 = symbol2 and place5 = symbol2 and place6 = symbol2 or place7 = symbol2 and place8 = symbol2 and place9 = symbol2 or place1 = symbol2 and place4 = symbol2 and place7 = symbol2 or place2 = symbol2 and place5 = symbol2 and place8 = symbol2 or place3 = symbol2 and place6 = symbol2 and place9 = symbol2 or place1 = symbol2 and place5 = symbol2 and place8 = symbol2 or place3 = symbol2 and place5 = symbol2 and place7 = symbol2 then<br/>  TextWindow.WriteLine(\"Player 2 (\" + symbol2 + \") wins!\")<br/>Else<br/>  Goto reset<br/>EndIf</pre>"}, {"lang": "Batch File", "loc": 49, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>:<span class=\"re0\">newgame</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a1=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a2=2<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a3=3<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a4=4<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a5=5<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a6=6<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a7=7<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a8=8<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a9=9<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> ll=X<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a zz=0<br/>:<span class=\"re0\">display1</span><br/>cls<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Player: <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a7</span><span class=\"sy0\">%</span>_<span class=\"sy0\">%</span><span class=\"re3\">a8</span><span class=\"sy0\">%</span>_<span class=\"sy0\">%</span><span class=\"re3\">a9</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a4</span><span class=\"sy0\">%</span>_<span class=\"sy0\">%</span><span class=\"re3\">a5</span><span class=\"sy0\">%</span>_<span class=\"sy0\">%</span><span class=\"re3\">a6</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a1</span><span class=\"sy0\">%</span>_<span class=\"sy0\">%</span><span class=\"re3\">a2</span><span class=\"sy0\">%</span>_<span class=\"sy0\">%</span><span class=\"re3\">a3</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p myt=Where would you like to go <span class=\"sy0\">(</span>choose a number from 1-9 and press enter<span class=\"sy0\">)</span>?<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">a</span><span class=\"sy0\">%</span><span class=\"re3\">myt</span><span class=\"sy0\">%!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">myt</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> a<span class=\"sy0\">%</span><span class=\"re3\">myt</span><span class=\"sy0\">%</span>=<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> check<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> display1<br/>:<span class=\"re0\">check</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a zz=<span class=\"sy0\">%</span><span class=\"re3\">zz</span><span class=\"sy0\">%</span>+1<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">zz</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/geq.html\"><span class=\"kw2\">geq</span></a> 9 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> newgame<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a7</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a8</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a9</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a4</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a5</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a6</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a1</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a2</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a3</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a7</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a5</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a3</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a1</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a5</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a9</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a7</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a4</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a1</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a8</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a5</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a2</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a9</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a6</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">a3</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> win<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">X</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> ll=O<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> display1<br/>:<span class=\"re0\">O</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> ll=X<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> display1<br/>:<span class=\"re0\">win</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">ll</span><span class=\"sy0\">%</span> wins<span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a> <br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> newgame<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 15, "block": "<pre class=\"text highlighted_source\">v123456789 --- &gt;9 &gt;48*,:55+\\-0g,1v<br/>&gt;9&gt;066+0p076+0p^  ^,,\" |\"_v#%3:- &lt;<br/>:,,0537051v&gt;:#,_$#^5#,5#+&lt;&gt;:#v_55+<br/>74 1098709&lt;^+55\"---+---+---\"0&lt;v520<br/>69 04560123 &gt;:!#v_0\\1v&gt;$2-:6%v&gt;803<br/>6 +0g\\66++0p^   $_&gt;#%  v#9:-1_ 6/5<br/>5  vv5!/*88\\%*28\u00a0::g0_^&gt;9/#v_ \"I\",<br/>,,5v&gt;5++0p82*/3-:*+\\:^v,<a class=\"__cf_email__\" data-cfemail=\"2e716e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt;\"uoY\",<br/>0+5&lt;v0+66_v#!%2:_55v  &gt;:^:\" win!\"\\<br/>1-^ g   &gt;$&gt;0\"\u00a0:evom ruoY\"&gt;:#,_$v&gt;p<br/>\\*8+ 65_^#!/*88g0** `0\\!`9:::&lt;&amp;&lt;^0<br/>v   &gt;:!67+0g:!56+0g *+*+0\"\u00a0:evom \"<br/>&gt;\"yM\"&gt;:#,_$\u00a0:. 1234+++, 789*+ \\0^&lt;<br/>\"a s't\"98:*+&gt;:#,<a class=\"__cf_email__\" data-cfemail=\"aaf58eea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;365*+\"ward\"48*<br/>\u00a0</pre>"}, {"lang": "C", "loc": 103, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> b<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* board. 0: blank; -1: computer; 1: human */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> check_winner<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> showboard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>t <span class=\"sy0\">=</span> <span class=\"st0\">\"X O\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c \"</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"-----<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define for_ij for (i = 0; i &lt; 3; i++) for (j = 0; j &lt; 3; j++)</span><br/><span class=\"kw4\">int</span> best_i<span class=\"sy0\">,</span> best_j<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> test_move<span class=\"br0\">(</span><span class=\"kw4\">int</span> val<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> depth<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> score<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> best <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> changed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>score <span class=\"sy0\">=</span> check_winner<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>score <span class=\"sy0\">==</span> val<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tfor_ij <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tchanged <span class=\"sy0\">=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>\t\tscore <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>test_move<span class=\"br0\">(</span><span class=\"sy0\">-</span>val<span class=\"sy0\">,</span> depth <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>score <span class=\"sy0\">&lt;=</span> best<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tbest_i <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\tbest_j <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tbest <span class=\"sy0\">=</span> score<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> changed <span class=\"sy0\">?</span> best <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> game<span class=\"br0\">(</span><span class=\"kw4\">int</span> user<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> move<span class=\"sy0\">,</span> win <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tfor_ij b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Board postions are numbered so:<span class=\"es1\">\\n</span>1 2 3<span class=\"es1\">\\n</span>4 5 6<span class=\"es1\">\\n</span>7 8 9<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"You have O, I have X.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++,</span> user <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>user<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>user<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"your move: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>move<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*s\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>move <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> move <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i <span class=\"sy0\">=</span> move <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">=</span> move <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tb<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>user<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"coMULTI\">/* randomize if computer opens, less boring */</span><br/>\t\t\t\tbest_i <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t\t\tbest_j <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>\t\t\t\ttest_move<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tb<span class=\"br0\">[</span>best_i<span class=\"br0\">]</span><span class=\"br0\">[</span>best_j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"My move:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> best_i <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> best_j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tshowboard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>win <span class=\"sy0\">=</span> check_winner<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t\t<span class=\"kw1\">return</span> win <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"You win.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"I win.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"st0\">\"A draw.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> first <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> game<span class=\"br0\">(</span>first <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>first<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 181, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">enum</span> players <span class=\"br0\">{</span> Computer, Human, Draw, None <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> iWin<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">7</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> ttt<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    ttt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _p <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> play<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> res <span class=\"sy1\">=</span> Draw<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    drawGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> _p <span class=\"br0\">)</span> getHumanMove<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">else</span> getComputerMove<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\tdrawGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\tres <span class=\"sy1\">=</span> checkVictory<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> res <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"sy2\">++</span>_p <span class=\"sy2\">%</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> res <span class=\"sy1\">==</span> Human <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"CONGRATULATIONS HUMAN --- You won!\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> res <span class=\"sy1\">==</span> Computer <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"NOT SO MUCH A SURPRISE --- I won!\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">else</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"It's a draw!\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>\t    string r<span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Play again( Y / N )? \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> r<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> r <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\"Y\"</span> <span class=\"sy3\">&amp;&amp;</span> r <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\"y\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"sy2\">++</span>_p <span class=\"sy2\">%</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t    reset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    _field<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">=</span> None<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        COORD c <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\tSetConsoleCursorPosition<span class=\"br0\">(</span> GetStdHandle<span class=\"br0\">(</span> STD_OUTPUT_HANDLE <span class=\"br0\">)</span>, c <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" 1 | 2 | 3 \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"---+---+---\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" 4 | 5 | 6 \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"---+---+---\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" 7 | 8 | 9 \"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span> y <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy4\">;</span> x <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    COORD c <span class=\"sy1\">=</span> <span class=\"br0\">{</span> x, <span class=\"nu0\">2</span> <span class=\"sy2\">+</span> y <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t\t    SetConsoleCursorPosition<span class=\"br0\">(</span> GetStdHandle<span class=\"br0\">(</span> STD_OUTPUT_HANDLE <span class=\"br0\">)</span>, c <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t    string o <span class=\"sy1\">=</span> _field<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy1\">==</span> Computer <span class=\"sy4\">?</span> <span class=\"st0\">\"X\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"O\"</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> o<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tf<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>        c.<span class=\"me1\">Y</span> <span class=\"sy1\">=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span><br/>\tSetConsoleCursorPosition<span class=\"br0\">(</span> GetStdHandle<span class=\"br0\">(</span> STD_OUTPUT_HANDLE <span class=\"br0\">)</span>, c <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> checkVictory<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"sy3\">&amp;&amp;</span><br/>\t\t_field<span class=\"br0\">[</span>iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> _field<span class=\"br0\">[</span>iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> _field<span class=\"br0\">[</span>iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> _field<span class=\"br0\">[</span>iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> f <span class=\"sy1\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> f<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"br0\">)</span><br/>\t\ti<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> Draw<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> None<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> getHumanMove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> m<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter your move ( 1 - 9 ) \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    m <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">do</span><br/>\t    <span class=\"br0\">{</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> m<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> m <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> m <span class=\"sy1\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>m <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"br0\">)</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Invalid move. Try again!\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">else</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t_field<span class=\"br0\">[</span>m <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> Human<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> getComputerMove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> move <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span><span class=\"br0\">{</span> move <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>move<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> try1 <span class=\"sy1\">=</span> iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, try2 <span class=\"sy1\">=</span> iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, try3 <span class=\"sy1\">=</span> iWin<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> _field<span class=\"br0\">[</span>try2<span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>try3<span class=\"br0\">]</span> <span class=\"sy1\">==</span> None <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tmove <span class=\"sy1\">=</span> try3<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> Computer <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> _field<span class=\"br0\">[</span>try3<span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>try2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> None <span class=\"br0\">)</span> <br/>\t    <span class=\"br0\">{</span>\t\t\t<br/>\t\tmove <span class=\"sy1\">=</span> try2<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> Computer <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>try2<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> None <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>try2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> _field<span class=\"br0\">[</span>try3<span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> _field<span class=\"br0\">[</span>try1<span class=\"br0\">]</span> <span class=\"sy1\">==</span> None <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tmove <span class=\"sy1\">=</span> try1<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> _field<span class=\"br0\">[</span>try2<span class=\"br0\">]</span> <span class=\"sy1\">==</span> Computer <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\t_field<span class=\"br0\">[</span>move<span class=\"br0\">]</span> <span class=\"sy1\">=</span> Computer<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> _p<span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> _field<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    ttt tic<span class=\"sy4\">;</span><br/>    tic.<span class=\"me1\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 246, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaTicTacToe<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">class</span> Program<br/>  <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*================================================================<br/>     *Pieces (players and board)<br/>     *================================================================*/</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Players <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <br/>      <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"COMPUTER\"</span>, <span class=\"st0\">\"X\"</span> <span class=\"br0\">}</span>, <span class=\"co1\">// computer player</span><br/>      <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">\"HUMAN\"</span>, <span class=\"st0\">\"O\"</span> <span class=\"br0\">}</span>     <span class=\"co1\">// human player</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> Unplayed <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> Computer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> Human <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GameBoard holds index into Players[] (0 or 1) or Unplayed (-1) if location not yet taken</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> GameBoard <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> corners <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> wins <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <br/>      <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>, <br/>      <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">7</span> <span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>, <br/>      <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"coMULTI\">/*================================================================<br/>     *Main Game Loop (this is what runs/controls the game)<br/>     *================================================================*/</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Welcome to Rosetta Code Tic-Tac-Toe for C#.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        initializeGameBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        displayGameBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> currentPlayer <span class=\"sy0\">=</span> rnd<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// current player represented by Players[] index of 0 or 1</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The first move goes to {0} who is playing {1}s.<span class=\"es0\">\\n</span>\"</span>, playerName<span class=\"br0\">(</span>currentPlayer<span class=\"br0\">)</span>, playerToken<span class=\"br0\">(</span>currentPlayer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw4\">int</span> thisMove <span class=\"sy0\">=</span> getMoveFor<span class=\"br0\">(</span>currentPlayer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>thisMove <span class=\"sy0\">==</span> Unplayed<span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}, you've quit the game ... am I that good?\"</span>, playerName<span class=\"br0\">(</span>currentPlayer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>          playMove<span class=\"br0\">(</span>thisMove, currentPlayer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          displayGameBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isGameWon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} has won the game!\"</span>, playerName<span class=\"br0\">(</span>currentPlayer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>          <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isGameTied<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Cat game ... we have a tie.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>          currentPlayer <span class=\"sy0\">=</span> getNextPlayer<span class=\"br0\">(</span>currentPlayer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>playAgain<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*================================================================<br/>     *Move Logic<br/>     *================================================================*/</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getMoveFor<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>player <span class=\"sy0\">==</span> Human<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> getManualMove<span class=\"br0\">(</span>player<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"co1\">//int selectedMove = getManualMove(player);</span><br/>        <span class=\"co1\">//int selectedMove = getRandomMove(player);</span><br/>        <span class=\"kw4\">int</span> selectedMove <span class=\"sy0\">=</span> getSemiRandomMove<span class=\"br0\">(</span>player<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//int selectedMove = getBestMove(player);</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} selects position {1}.\"</span>, playerName<span class=\"br0\">(</span>player<span class=\"br0\">)</span>, selectedMove <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> selectedMove<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getManualMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}, enter you move (number): \"</span>, playerName<span class=\"br0\">(</span>player<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ConsoleKeyInfo keyInfo <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// keep the display pretty</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>keyInfo<span class=\"sy0\">.</span><span class=\"me1\">Key</span> <span class=\"sy0\">==</span> ConsoleKey<span class=\"sy0\">.</span><span class=\"me1\">Escape</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> Unplayed<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>keyInfo<span class=\"sy0\">.</span><span class=\"me1\">Key</span> <span class=\"sy0\">&gt;=</span> ConsoleKey<span class=\"sy0\">.</span><span class=\"me1\">D1</span> <span class=\"sy0\">&amp;&amp;</span> keyInfo<span class=\"sy0\">.</span><span class=\"me1\">Key</span> <span class=\"sy0\">&lt;=</span> ConsoleKey<span class=\"sy0\">.</span><span class=\"me1\">D9</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw4\">int</span> move <span class=\"sy0\">=</span> keyInfo<span class=\"sy0\">.</span><span class=\"me1\">KeyChar</span> <span class=\"sy0\">-</span> <span class=\"st0\">'1'</span><span class=\"sy0\">;</span>  <span class=\"co1\">// convert to between 0..8, a GameBoard index position.</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>GameBoard<span class=\"br0\">[</span>move<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Unplayed<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> move<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">else</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Spot {0} is already taken, please select again.\"</span>, move <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>          Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Illegal move, please select again.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getRandomMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> movesLeft <span class=\"sy0\">=</span> GameBoard<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>position <span class=\"sy0\">=&gt;</span> position <span class=\"sy0\">==</span> Unplayed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> rnd<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, movesLeft<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> GameBoard<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>  <span class=\"co1\">// walk board ...</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>GameBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Unplayed <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>    <span class=\"co1\">// until we reach the unplayed move.</span><br/>          <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">--;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> Unplayed<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// plays random if no winning move or needed block.</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getSemiRandomMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> posToPlay<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkForWinningMove<span class=\"br0\">(</span>player, <span class=\"kw1\">out</span> posToPlay<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> posToPlay<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkForBlockingMove<span class=\"br0\">(</span>player, <span class=\"kw1\">out</span> posToPlay<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> posToPlay<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> getRandomMove<span class=\"br0\">(</span>player<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// purposely not implemented (this is the thinking part).</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getBestMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> checkForWinningMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> player, <span class=\"kw1\">out</span> <span class=\"kw4\">int</span> posToPlay<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      posToPlay <span class=\"sy0\">=</span> Unplayed<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> line <span class=\"kw1\">in</span> wins<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>twoOfThreeMatchPlayer<span class=\"br0\">(</span>player, line, <span class=\"kw1\">out</span> posToPlay<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> checkForBlockingMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> player, <span class=\"kw1\">out</span> <span class=\"kw4\">int</span> posToPlay<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      posToPlay <span class=\"sy0\">=</span> Unplayed<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> line <span class=\"kw1\">in</span> wins<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>twoOfThreeMatchPlayer<span class=\"br0\">(</span>getNextPlayer<span class=\"br0\">(</span>player<span class=\"br0\">)</span>, line, <span class=\"kw1\">out</span> posToPlay<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> twoOfThreeMatchPlayer<span class=\"br0\">(</span><span class=\"kw4\">int</span> player, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> line, <span class=\"kw1\">out</span> <span class=\"kw4\">int</span> posToPlay<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      posToPlay <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MinValue</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> pos <span class=\"kw1\">in</span> line<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>GameBoard<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">==</span> player<span class=\"br0\">)</span><br/>          cnt<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>GameBoard<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Unplayed<span class=\"br0\">)</span><br/>          posToPlay <span class=\"sy0\">=</span> pos<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> cnt <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> posToPlay <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> playMove<span class=\"br0\">(</span><span class=\"kw4\">int</span> boardPosition, <span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      GameBoard<span class=\"br0\">[</span>boardPosition<span class=\"br0\">]</span> <span class=\"sy0\">=</span> player<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> isGameWon<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> wins<span class=\"sy0\">.</span><span class=\"me1\">Any</span><span class=\"br0\">(</span>line <span class=\"sy0\">=&gt;</span> takenBySamePlayer<span class=\"br0\">(</span>line<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, line<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, line<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> takenBySamePlayer<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> GameBoard<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Unplayed <span class=\"sy0\">&amp;&amp;</span> GameBoard<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">==</span> GameBoard<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> GameBoard<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">==</span> GameBoard<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> isGameTied<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>GameBoard<span class=\"sy0\">.</span><span class=\"me1\">Any</span><span class=\"br0\">(</span>spot <span class=\"sy0\">=&gt;</span> spot <span class=\"sy0\">==</span> Unplayed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*================================================================<br/>     *Misc Methods<br/>     *================================================================*/</span><br/>    <span class=\"kw1\">static</span> Random rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> initializeGameBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> GameBoard<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        GameBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Unplayed<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> playerName<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> Players<span class=\"br0\">[</span>player<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> playerToken<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> Players<span class=\"br0\">[</span>player<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> getNextPlayer<span class=\"br0\">(</span><span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>player <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> displayGameBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" {0} | {1} | {2}\"</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"---|---|---\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" {0} | {1} | {2}\"</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"---|---|---\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" {0} | {1} | {2}\"</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>, pieceAt<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> pieceAt<span class=\"br0\">(</span><span class=\"kw4\">int</span> boardPosition<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>GameBoard<span class=\"br0\">[</span>boardPosition<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Unplayed<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>boardPosition <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// display 1..9 on board rather than 0..8</span><br/>      <span class=\"kw1\">return</span> playerToken<span class=\"br0\">(</span>GameBoard<span class=\"br0\">[</span>boardPosition<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> playAgain<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Do you want to play again?\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Key</span> <span class=\"sy0\">==</span> ConsoleKey<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 94, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> generate-board <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop repeat <span class=\"nu0\">9</span> collect <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *straights* '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *current-player* 'x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-board-elt <span class=\"br0\">(</span>n board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> board<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> legal-p <span class=\"br0\">(</span>n board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>get-board-elt n board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> set-board-elt <span class=\"br0\">(</span>n board <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>legal-p n board<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> board<span class=\"br0\">)</span> <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"Illegal move. Try again.~&amp;\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>set-board-elt <span class=\"br0\">(</span>read<span class=\"br0\">)</span> board <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> list-legal-moves <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to <span class=\"br0\">(</span><span class=\"kw1\">length</span> board<span class=\"br0\">)</span><br/>     <span class=\"kw1\">when</span> <span class=\"br0\">(</span>legal-p i board<span class=\"br0\">)</span><br/>     collect i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-random-element <span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multi-non-nil-<span class=\"kw1\">eq</span> <span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>notany #'<span class=\"kw1\">null</span> lst<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>notany #'<span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> elements-of-straights <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i in *straights*<br/>     collect <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to <span class=\"nu0\">2</span><br/>\t   collect <span class=\"br0\">(</span>get-board-elt <span class=\"br0\">(</span><span class=\"kw1\">nth</span> j i<span class=\"br0\">)</span> board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> find-winner <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>remove-<span class=\"kw1\">if</span> #'<span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'multi-non-nil-<span class=\"kw1\">eq</span> <span class=\"br0\">(</span>elements-of-straights board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> set-player <span class=\"br0\">(</span>mark<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Shall a computer play as ~a? (y/n)~&amp;\"</span> mark<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>response <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>equalp response 'y<span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">(</span>equalp response 'n<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>t <span class=\"br0\">(</span>format t <span class=\"st0\">\"Come again?~&amp;\"</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span>set-player mark<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> player-move <span class=\"br0\">(</span>board <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%Player ~a, please input your move.~&amp;\"</span> <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>set-board-elt <span class=\"br0\">(</span>read<span class=\"br0\">)</span> board <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> computer-move <span class=\"br0\">(</span>board <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>move <span class=\"br0\">(</span>get-random-element <span class=\"br0\">(</span>list-legal-moves board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>set-board-elt move board <span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%computer selects ~a~%~%\"</span> move<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> computer-move-p <span class=\"br0\">(</span>current-player autoplay-x-p autoplay-o-p<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> current-player 'x<span class=\"br0\">)</span><br/>      autoplay-x-p<br/>      autoplay-o-p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> perform-turn <span class=\"br0\">(</span>current-player board autoplay-x-p autoplay-o-p<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>computer-move-p current-player autoplay-x-p autoplay-o-p<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>computer-move board current-player<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>player-move board current-player<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> switch-player <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> *current-player* 'x<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> *current-player* 'o<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> *current-player* 'x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> display-board <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i downfrom <span class=\"nu0\">2</span> to <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span><br/>\t   initially <span class=\"br0\">(</span>format t <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>\t   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a|\"</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>get-board-elt <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">3</span> i<span class=\"br0\">)</span> j<span class=\"br0\">)</span> board<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">3</span> i<span class=\"br0\">)</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   finally <span class=\"br0\">(</span>format t <span class=\"st0\">\"~&amp;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> tic-tac-toe <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> *current-player* 'x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>board <span class=\"br0\">(</span>generate-board<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>autoplay-x-p <span class=\"br0\">(</span>set-player 'x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>autoplay-o-p <span class=\"br0\">(</span>set-player 'o<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop until <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>find-winner board<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>list-legal-moves board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>display-board board<span class=\"br0\">)</span>      <br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>perform-turn *current-player* board autoplay-x-p autoplay-o-p<span class=\"br0\">)</span><br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>switch-player<span class=\"br0\">)</span><br/>       finally <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>find-winner board<span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span>format t <span class=\"st0\">\"The winner is ~a!\"</span> <span class=\"br0\">(</span>find-winner board<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span>format t <span class=\"st0\">\"It's a tie.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 115, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> GameBoard <span class=\"br0\">{</span><br/>    <span class=\"kw4\">dchar</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> board <span class=\"sy0\">=</span> <span class=\"st0\">\"123456789\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> <span class=\"sy0\">:</span> <span class=\"kw4\">dchar</span> <span class=\"br0\">{</span> human <span class=\"sy0\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">,</span> computer <span class=\"sy0\">=</span> <span class=\"st0\">'O'</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">enum</span> Game <span class=\"br0\">{</span> going<span class=\"sy0\">,</span> humanWins<span class=\"sy0\">,</span> computerWins<span class=\"sy0\">,</span> draw <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"kw2\">invariant</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> nHuman <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> nComputer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> board<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c.<span class=\"me1\">isDigit</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// In correct position?</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span>c <span class=\"sy0\">==</span> human <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> computer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> human <span class=\"sy0\">?</span> nHuman <span class=\"sy0\">:</span> nComputer<span class=\"br0\">)</span><span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>abs<span class=\"br0\">(</span>nHuman <span class=\"sy0\">-</span> nComputer<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"%(%-(%s|%)<span class=\"es1\">\\n</span>-+-+-<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> board<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">chunks</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> isAvailable<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">isDigit</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> availablePositions<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">9</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> isAvailable<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Game winner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> wins <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> win<span class=\"sy0\">;</span> wins<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> bw0 <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>win<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bw0.<span class=\"me1\">isDigit</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span> <span class=\"co1\">// Nobody wins on this one.</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bw0 <span class=\"sy0\">==</span> board<span class=\"br0\">[</span>win<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> bw0 <span class=\"sy0\">==</span> board<span class=\"br0\">[</span>win<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> bw0 <span class=\"sy0\">==</span> GameBoard.<span class=\"me1\">human</span> <span class=\"sy0\">?</span><br/>                              Game.<span class=\"me1\">humanWins</span> <span class=\"sy0\">:</span><br/>                              Game.<span class=\"me1\">computerWins</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> availablePositions.<span class=\"me1\">empty</span> <span class=\"sy0\">?</span> Game.<span class=\"me1\">draw</span><span class=\"sy0\">:</span> Game.<span class=\"me1\">going</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> isFinished<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> winner <span class=\"sy0\">!=</span> Game.<span class=\"me1\">going</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> computerMove<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"co1\">// Random move.</span><br/>    <span class=\"kw2\">out</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>res <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> res <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">&amp;&amp;</span> isAvailable<span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// return availablePositions.array.choice;</span><br/>        <span class=\"kw1\">return</span> availablePositions.<span class=\"me1\">array</span><span class=\"br0\">[</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>GameBoard playGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    GameBoard board<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span> playsHuman <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board.<span class=\"me1\">isFinished</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        board.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> move<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>playsHuman<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                writef<span class=\"br0\">(</span><span class=\"st0\">\"Your move (available moves:\u00a0%s)? \"</span><span class=\"sy0\">,</span><br/>                       board.<span class=\"me1\">availablePositions</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                readf<span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>move<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                move<span class=\"sy0\">--;</span> <span class=\"co1\">// Zero based indexing.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>move <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> board<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board.<span class=\"me1\">isAvailable</span><span class=\"br0\">(</span>move<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>            move <span class=\"sy0\">=</span> board.<span class=\"me1\">computerMove</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>board.<span class=\"me1\">isAvailable</span><span class=\"br0\">(</span>move<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s chose\u00a0%d\"</span><span class=\"sy0\">,</span> playsHuman <span class=\"sy0\">?</span> <span class=\"st0\">\"You\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"I\"</span><span class=\"sy0\">,</span> move <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        board.<span class=\"me1\">board</span><span class=\"br0\">[</span>move<span class=\"br0\">]</span> <span class=\"sy0\">=</span> playsHuman <span class=\"sy0\">?</span> GameBoard.<span class=\"me1\">human</span> <span class=\"sy0\">:</span><br/>                                         GameBoard.<span class=\"me1\">computer</span><span class=\"sy0\">;</span><br/>        playsHuman <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>playsHuman<span class=\"sy0\">;</span> <span class=\"co1\">// Switch player.</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> board<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"Tic-tac-toe game player.<span class=\"es1\">\\n</span>\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> outcome <span class=\"sy0\">=</span> playGame.<span class=\"me1\">winner</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>outcome<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> GameBoard.<span class=\"me1\">Game</span>.<span class=\"me1\">going</span><span class=\"sy0\">:</span><br/>            <span class=\"st0\">\"Game stopped.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> GameBoard.<span class=\"me1\">Game</span>.<span class=\"me1\">humanWins</span><span class=\"sy0\">:</span><br/>            <span class=\"st0\">\"<span class=\"es1\">\\n</span>You win!\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> GameBoard.<span class=\"me1\">Game</span>.<span class=\"me1\">computerWins</span><span class=\"sy0\">:</span><br/>            <span class=\"st0\">\"<span class=\"es1\">\\n</span>I win.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> GameBoard.<span class=\"me1\">Game</span>.<span class=\"me1\">draw</span><span class=\"sy0\">:</span><br/>            <span class=\"st0\">\"<span class=\"es1\">\\n</span>Draw\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 107, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>tic_tac_toe<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Result: ~p.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">turn</span><span class=\"br0\">(</span><span class=\"re3\">player</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">board</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">board</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">board_tuples</span><span class=\"br0\">(</span> <span class=\"re5\">Selections</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Selections</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">N</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">(</span><span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"kw1\">fun</span> computer_move_win<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> computer_move_block<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> computer_move_middle<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> computer_move_random<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">N</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_block</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\t<span class=\"re3\">computer_move_two_same_player</span><span class=\"br0\">(</span> <span class=\"re3\">player</span><span class=\"br0\">(</span>false<span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_middle</span><span class=\"br0\">(</span> <span class=\"re5\">_Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">computer_move_middle</span><span class=\"br0\">(</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_middle</span><span class=\"br0\">(</span> true <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">computer_move_middle</span><span class=\"br0\">(</span> false <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_random</span><span class=\"br0\">(</span> <span class=\"re5\">_Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Ns</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Board</span><span class=\"sy1\">,</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Ns</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Selections</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">three_in_row_all</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">is_two_same_player</span><span class=\"br0\">(</span><span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">computer_move_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"sy1\">,</span> <span class=\"re5\">Selections</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">_Player</span><span class=\"sy1\">,</span> <span class=\"re5\">_Board</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">computer_move_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">_Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Selection</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">board_tuples</span><span class=\"br0\">(</span><span class=\"re5\">Selection</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">computer_move_win</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">computer_move_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_empty</span><span class=\"br0\">(</span> <span class=\"re5\">Square</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Square</span> <span class=\"sy3\">=&lt;</span> <span class=\"st0\">\"9\"</span><span class=\"sy1\">.</span> <span class=\"co1\">% Do not use &lt; \"10\".</span><br/>\u00a0<br/><span class=\"re3\">is_finished</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_full</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"re3\">is_three_in_row</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_full</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy3\">=:=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Board</span><span class=\"sy1\">,</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_three_in_row</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Fun</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">Selections</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_three_in_row_same_player</span><span class=\"br0\">(</span> <span class=\"re3\">board_tuples</span><span class=\"br0\">(</span><span class=\"re5\">Selections</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">any</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re3\">three_in_row_all</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_three_in_row_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Selected</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> <span class=\"re5\">Selected</span> <span class=\"br0\">)</span> <span class=\"sy3\">=/=</span> no_player<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Selections</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">board_tuples</span><span class=\"br0\">(</span><span class=\"re5\">Selections</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw2\">not</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_two_same_player</span><span class=\"br0\">(</span> <span class=\"re5\">_Player</span><span class=\"sy1\">,</span> <span class=\"re5\">_Selected</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">player</span><span class=\"br0\">(</span> <span class=\"re5\">Random</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Random</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0.5</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"O\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">player</span><span class=\"br0\">(</span> <span class=\"re5\">_Random</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"X\"</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">player</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">_Player</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">finished</span><span class=\"sy1\">;</span><br/><span class=\"re3\">player</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"st0\">\"X\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"O\"</span><span class=\"sy1\">;</span><br/><span class=\"re3\">player</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"st0\">\"O\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"st0\">\"X\"</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">result</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">result</span><span class=\"br0\">(</span> <span class=\"re3\">is_full</span><span class=\"br0\">(</span><span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">result</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">_Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">draw</span><span class=\"sy1\">;</span><br/><span class=\"re3\">result</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">Winners</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Selections</span> <span class=\"sy3\">||</span> <span class=\"re5\">Selections</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">three_in_row_all</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span><span class=\"re3\">board_tuples</span><span class=\"br0\">(</span><span class=\"re5\">Selections</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">=/=</span> no_player<span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"st0\">\"Winner is \"</span> <span class=\"sy3\">++</span> <span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> <span class=\"re3\">board_tuples</span><span class=\"br0\">(</span><span class=\"re5\">Winners</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">three_in_row_all</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">three_in_row_horisontal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re3\">three_in_row_vertical</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re3\">three_in_row_diagonal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">three_in_row_diagonal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re3\">three_in_row_horisontal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"re3\">three_in_row_vertical</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">_Z</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> <span class=\"kw2\">not</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Player</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> <span class=\"re5\">_Selected</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">no_player</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">Player</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Player</span><span class=\"sy1\">;</span><br/><span class=\"re3\">three_in_row_player</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">_Player</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">no_player</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">turn</span><span class=\"br0\">(</span> finished<span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">result</span><span class=\"br0\">(</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">turn</span><span class=\"br0\">(</span> <span class=\"st0\">\"X\"</span><span class=\"sy3\">=</span><span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">N</span> <span class=\"sy3\">=</span> <span class=\"re3\">computer_move</span><span class=\"br0\">(</span> <span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Computer, ~p, selected ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">New_board</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span> | <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keydelete</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">turn</span><span class=\"br0\">(</span> <span class=\"re3\">player</span><span class=\"br0\">(</span><span class=\"re3\">is_finished</span><span class=\"br0\">(</span><span class=\"re5\">New_board</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">New_board</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">turn</span><span class=\"br0\">(</span> <span class=\"st0\">\"O\"</span><span class=\"sy3\">=</span><span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">turn_board_write_horisontal</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">three_in_row_horisontal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <br/>    <span class=\"re5\">Ns</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Board</span><span class=\"sy1\">,</span> <span class=\"re3\">is_empty</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Prompt</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Player, ~p, select one of ~p: \"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Player</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">N</span> <span class=\"sy3\">=</span> <span class=\"re3\">turn_next_move</span><span class=\"br0\">(</span> <span class=\"re5\">Prompt</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">New_board</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">}</span> | <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keydelete</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <br/>    <span class=\"re3\">turn</span><span class=\"br0\">(</span> <span class=\"re3\">player</span><span class=\"br0\">(</span><span class=\"re3\">is_finished</span><span class=\"br0\">(</span><span class=\"re5\">New_board</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Player</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">New_board</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">turn_board_write_horisontal</span><span class=\"br0\">(</span> <span class=\"re5\">Selections</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Tuples</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keyfind</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Selections</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p \"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Y</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Tuples</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">turn_next_move</span><span class=\"br0\">(</span> <span class=\"re5\">Prompt</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fread</span><span class=\"br0\">(</span> <span class=\"re5\">Prompt</span><span class=\"sy1\">,</span> <span class=\"st0\">\"~d\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">turn_next_move_ok</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Prompt</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">turn_next_move_ok</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">_Prompt</span><span class=\"sy1\">,</span> <span class=\"re5\">_Ns</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span><span class=\"sy1\">;</span><br/><span class=\"re3\">turn_next_move_ok</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Prompt</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"sy1\">,</span> <span class=\"re5\">_N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">turn_next_move</span><span class=\"br0\">(</span> <span class=\"re5\">Prompt</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 1, "block": "<pre>!--------------------------------------------\n! TRIS.R\u00a0: gioca a tris contro l'operatore\n!--------------------------------------------\n\nPROGRAM TRIS\n\nDIM TRIS%[9],T1%[9],PIECES$[3]\n\n!$SEGMENT=$B800\n\n!$INCLUDE=\"PC.LIB\"\n\nPROCEDURE DELAY(COUNT%)\n  FOR Z%=1 TO COUNT DO\n  END FOR\nEND PROCEDURE\n\nPROCEDURE SET_BOARD\n!\n! Disegna lo schema del gioco\n!\n  CLS\n  BLOAD(\"TRIS.BLD\",0)\n!$KEY\nEND PROCEDURE\n\nPROCEDURE PUT_PIECES\n!\n! Pone i pezzi sulla scacchiera\n!\n  Z%=0\n  FOR ROW%=6 TO 12 STEP 3 DO    \u00a0! posizioni assolute sullo schermo\n    FOR COL%=32 TO 48 STEP 8 DO\n      LOCATE(ROW%+1,COL%+1)\n      Z%=Z%+1\n      PRINT(PIECES$[TRIS%[Z%]])\n    END FOR\n  END FOR\nEND PROCEDURE\n\nPROCEDURE COMPUTE_MOVE(A%)\n  CASE A% OF\n    2-&gt; C1%=C1%+1            END -&gt;\n    4-&gt; C2%=C2%+1            END -&gt;\n    8-&gt; S1%=TRUE  S2%=TRUE   END -&gt;\n    3-&gt; N1%=N1%+1            END -&gt;\n    9-&gt; N2%=N2%+1            END -&gt;\n   27-&gt; S1%=FALSE S2%=FALSE  END -&gt;\n END CASE\nEND PROCEDURE\n\nPROCEDURE PREPAREMOVE(T1%[],I%-&gt;M%)\n!\n! Prepara la mossa del calcolatore\n!\n   T1%[I%]=2\n   C1%=0\n   C2%=0\n   N1%=0\n   N2%=0\n   FOR K%=0 TO 2 DO\n     COMPUTE_MOVE(T1%[3*K%+1]*T1%[3*K%+2]*T1%[3*K%+3])\n     COMPUTE_MOVE(T1%[K%+1]*T1%[K%+4]*T1%[K%+7])\n   END FOR\n   COMPUTE_MOVE(T1%[1]*T1%[5]*T1%[9])\n   COMPUTE_MOVE(T1%[3]*T1%[5]*T1%[7])\n   M%=-63*N2%+31*C2%-15*N1%+7*C1%\nEND PROCEDURE\n\nPROCEDURE COMPUTER_MOVE\n!\n! Coordina le mosse del calcolatore\n!\n  MAXSCORE%=-1000\n  FOR I%=1 TO 9 DO\n    IF TRIS%[I%]=1\n      THEN\n       PREPAREMOVE(TRIS%[],I%-&gt;MV%)\n       EXIT IF S2% AND NOT S1%\n       IF S1% AND S2%\n         THEN\n          TRIS%[I%]=2\n          DIARY$=DIARY$+\"c\"+MID$(STR$(I%),2)+\"*\"\n          PUT_PIECES\n          EXIT\n       END IF\n       IF MV%=0\n         THEN\n          MOVE%=I%\n          EXIT\n       END IF\n       IF MV%&gt;MAXSCORE%\n         THEN\n          MOVE%=I%\n          MAXSCORE%=MV%\n       END IF\n    END IF\n  END FOR\n  IF NOT S2%\n    THEN\n     TRIS%[MOVE%]=2\n     DIARY$=DIARY$+\"c\"+MID$(STR$(MOVE%),2)+\";\"\n     PUT_PIECES\n     NMOVE%=NMOVE%-1\n     S1%=(NMOVE%=0)\n  END IF\nEND PROCEDURE\n\nPROCEDURE PLAYER_MOVE\n!\n! Gioca l'avversario umano usando i tasti cursore per lo spostamento\n!\n  LOCATE(19,13)\n  PRINT(\"Tocca a te ....                  \")\n  REPEAT\n    ROW%=7\n    COL%=32\n    LOCATE(ROW%+1,COL%+1)\n    PRINT(\"\u00dc\")\n    REPEAT\n      GET(B$)\n      IF LEN(B$)=2 THEN\n        CASE ASC(RIGHT$(B$,1)+CHR$(0)) OF\n          77-&gt;\u00a0! codice tastiera per CRSR =&gt;\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\" \")\n             COL%=-(COL%+8)*(COL%&lt;=40)-32*(COL%&gt;40)\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\"\u00dc\")\n          END -&gt;\n          75-&gt;\u00a0! codice tastiera per CRSR &lt;=\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\" \")\n             COL%=-(COL%-8)*(COL%&gt;=40)-48*(COL%&lt;40)\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\"\u00dc\")\n          END -&gt;\n          80-&gt;\u00a0! codice tastiera per CRSR DOWN\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\" \")\n             ROW%=-(ROW%+3)*(ROW%&lt;=10)-7*(ROW%&gt;10)\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\"\u00dc\")\n          END -&gt;\n          72-&gt;\u00a0! codice tastiera per CRSR UP\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\" \")\n             ROW%=-(ROW%-3)*(ROW%&gt;=10)-13*(ROW%&lt;10)\n             LOCATE(ROW%+1,COL%+1)\n             PRINT(\"\u00dc\")\n          END -&gt;\n       END CASE\n      END IF\n     UNTIL B$=CHR$(13)\n     MM%=ROW%+COL%/8-10\u00a0! da coordinate schermo a coordinate scacchiera\n   UNTIL TRIS%[MM%]=1\n  TRIS%[MM%]=3\n  LOCATE(ROW%+1,COL%+1)\n  PRINT(\" \")\n  DIARY$=DIARY$+\"p\"+MID$(STR$(MM%),2)+\";\"\n  PUT_PIECES\n  NMOVE%=NMOVE%-1\n  S1%=(NMOVE%=0)\n  LOCATE(19,13)\n  PRINT(STRING$(45,\" \"))\nEND PROCEDURE\n\nBEGIN\n  DATA(\" \",\"+\",\"o\")\n  SET_BOARD\n  REPEAT\n    S1%=FALSE    S2%=FALSE  \u00a0! determinano lo stato della partita\n    NMOVE%=9\n    FOR Z%=1 TO 3 DO\n       READ(PIECES$[Z%])\n    END FOR\n    FOR Z%=1 TO 9 DO\n        TRIS%[Z%]=1\n    END FOR\n    LOCATE(19,13)\n    PRINT(\"Giochi per primo\u00a0?\")\n    REPEAT\n      GET(A$)\n    UNTIL A$=\"S\" OR A$=\"s\" OR A$=\"N\" OR A$=\"n\"\n    PUT_PIECES\n    FOR INDICE%=1 TO 9 DO\n      IF A$=\"s\" OR A$=\"S\"\n        THEN\n          PLAYER_MOVE\n          EXIT IF S1% OR S2%\n          COMPUTER_MOVE\n          EXIT IF S1% OR S2%\n        ELSE\n          COMPUTER_MOVE\n          EXIT IF S1% OR S2%\n          PLAYER_MOVE\n          EXIT IF S1% OR S2%\n      END IF\n   END FOR\n   LOCATE(19,13)\n   CASE TRUE OF\n     (S1% AND NOT S2%)-&gt;\n        PRINT(\"E' finita pari\u00a0!!!     \")\n     END -&gt;\n     (S2% AND NOT S1%)-&gt;\n        PRINT(\"HAI VINTO\u00a0!!!          \")\n     END -&gt;\n     (S1% AND S2%)-&gt;\n        PRINT(\"HO VINTO IO\u00a0!!!        \")\n     END -&gt;\n   END CASE\n   DELAY(500)\n   LOCATE(19,13)\n   PRINT(DIARY$)\n   DELAY(500)\n   LOCATE(19,13)\n   PRINT(\"Vuoi giocare ancora\u00a0?       \")\n   REPEAT\n     GET(A$)\n   UNTIL A$=\"S\" OR A$=\"s\" OR A$=\"N\" OR A$=\"n\"\n UNTIL A$=\"N\" OR A$=\"n\"\nEND PROGRAM\n</pre>"}, {"lang": "Euphoria", "loc": 102, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>console.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>text.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>search.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span><span class=\"kw2\">sequence</span>.e<br/>\u00a0<br/><span class=\"kw2\">sequence</span> board <br/><span class=\"kw2\">sequence</span> players <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> DisplayBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%s\"</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> j &lt; <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%s\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t\t<span class=\"kw1\">if</span> i &lt; <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>-----<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CheckWinner<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">sequence</span> temp <span class=\"sy1\">=</span> board<br/>\t<span class=\"kw1\">for</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"X\"</span><span class=\"br0\">}</span><span class=\"sy2\">,</span>temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"X wins<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">elsif</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"O\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"br0\">}</span><span class=\"sy2\">,</span>temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"O wins<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t\ttemp <span class=\"sy1\">=</span> columnize<span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"X\"</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>board<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span><br/>\t   <span class=\"kw2\">equal</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"X\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"X\"</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>board<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"X wins<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">elsif</span> <span class=\"kw2\">equal</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"O\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>board<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span><br/>\t   <span class=\"kw2\">equal</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"O\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"O\"</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>board<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>board<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"O wins<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span>\t<br/>\u00a0<br/>\t<span class=\"kw1\">if</span> moves <span class=\"sy1\">=</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Draw<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> turn<span class=\"sy2\">,</span> row<span class=\"sy2\">,</span> column<span class=\"sy2\">,</span> moves<br/><span class=\"kw2\">sequence</span> replay<br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\tboard <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\tDisplayBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tturn <span class=\"sy1\">=</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\tmoves <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%s's turn<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>players<span class=\"br0\">[</span>turn<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\trow <span class=\"sy1\">=</span> prompt_number<span class=\"br0\">(</span><span class=\"st0\">\"Enter row: \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\t\tcolumn <span class=\"sy1\">=</span> prompt_number<span class=\"br0\">(</span><span class=\"st0\">\"Enter column: \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">match</span><span class=\"br0\">(</span>board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>column<span class=\"br0\">]</span><span class=\"sy2\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t\tboard<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>column<span class=\"br0\">]</span> <span class=\"sy1\">=</span> players<span class=\"br0\">[</span>turn<span class=\"br0\">]</span><br/>\t\t\t\tmoves <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw1\">exit</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Space already taken - pick again<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>\t\tDisplayBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> CheckWinner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">exit</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> turn <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>\t\t\tturn <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tturn <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>\treplay <span class=\"sy1\">=</span> lower<span class=\"br0\">(</span>prompt_string<span class=\"br0\">(</span><span class=\"st0\">\"Play again (y/n)?<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"kw2\">match</span><span class=\"br0\">(</span>replay<span class=\"sy2\">,</span><span class=\"st0\">\"n\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">exit</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 133, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> Brick <span class=\"sy0\">=</span><br/> | Empty<br/> | Computer<br/> | User<br/>\u00a0<br/><span class=\"kw1\">let</span> brickToString <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/> | Empty <span class=\"sy0\">-&gt;</span> <span class=\"st0\">' '</span><br/> | Computer <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'X'</span><br/> | User <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'O'</span><br/>\u00a0<br/><span class=\"co1\">// y -&gt; x -&gt; Brick</span><br/><span class=\"kw1\">type</span> Board <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a><span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, Brick<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> emptyBoard <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> emptyRow <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">ofList</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>,Empty<span class=\"sy0\">;</span> <span class=\"nu0\">1</span>,Empty<span class=\"sy0\">;</span> <span class=\"nu0\">2</span>,Empty<span class=\"br0\">]</span><br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">ofList</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>,emptyRow<span class=\"sy0\">;</span> <span class=\"nu0\">1</span>,emptyRow<span class=\"sy0\">;</span> <span class=\"nu0\">2</span>,emptyRow<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> get <span class=\"br0\">(</span>b:Board<span class=\"br0\">)</span> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> b.<span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> set player <span class=\"br0\">(</span>b:Board<span class=\"br0\">)</span> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>\u00a0: Board <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> row <span class=\"sy0\">=</span> b.<span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">Add</span><span class=\"br0\">(</span>x, player<span class=\"br0\">)</span><br/>  b.<span class=\"me1\">Add</span><span class=\"br0\">(</span>y, row<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> winningPositions <span class=\"sy0\">=</span> <br/>  <span class=\"br0\">[</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> x,x<span class=\"br0\">]</span> <span class=\"co1\">// first diagonal</span><br/> \u00a0::<span class=\"br0\">[</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">-</span>x,x<span class=\"br0\">]</span> <span class=\"co1\">// second diagonal</span><br/> \u00a0::<span class=\"br0\">[</span><span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>     <span class=\"kw1\">yield!</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>y,x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// columns</span><br/>             <span class=\"br0\">[</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"co1\">// rows</span><br/>\u00a0<br/><span class=\"kw1\">let</span> hasWon player board <span class=\"sy0\">=</span> <br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">exists</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">fun</span> ps <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> pos <span class=\"sy0\">-&gt;</span> get board pos <span class=\"sy0\">=</span> player<span class=\"br0\">)</span> ps<span class=\"br0\">)</span><br/>    winningPositions<br/>\u00a0<br/><span class=\"kw1\">let</span> freeSpace board <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>     <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">if</span> get board <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Empty <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> x,y<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Evaluation <span class=\"sy0\">=</span><br/> | Win<br/> | Draw<br/> | Lose<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> evaluate board move <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> b2 <span class=\"sy0\">=</span> set Computer board move<br/>  <span class=\"kw1\">if</span> hasWon Computer b2 <span class=\"kw1\">then</span> Win<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">match</span> freeSpace b2 <span class=\"kw1\">with</span><br/>    | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Draw<br/>    | userChoices <span class=\"sy0\">-&gt;</span> <br/>       <span class=\"kw1\">let</span> b3s <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span>set User b2<span class=\"br0\">)</span> userChoices<br/>       <span class=\"kw1\">if</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">exists</span> <span class=\"br0\">(</span>hasWon User<span class=\"br0\">)</span> b3s <span class=\"kw1\">then</span> Lose<br/>       <span class=\"kw1\">elif</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">exists</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> b3 <span class=\"sy0\">-&gt;</span> bestOutcome b3 <span class=\"sy0\">=</span> Lose<span class=\"br0\">)</span> b3s<br/>       <span class=\"kw1\">then</span> Lose<br/>       <span class=\"kw1\">elif</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">exists</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> b3 <span class=\"sy0\">-&gt;</span> bestOutcome b3 <span class=\"sy0\">=</span> Draw<span class=\"br0\">)</span> b3s<br/>       <span class=\"kw1\">then</span> Draw<br/>       <span class=\"kw1\">else</span> Win<br/>\u00a0<br/><span class=\"kw1\">and</span> findBestChoice b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> freeSpace b <span class=\"kw1\">with</span><br/>  | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Draw<span class=\"br0\">)</span><br/>  | choices <span class=\"sy0\">-&gt;</span> <br/>    <span class=\"kw1\">match</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">tryFind</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> evaluate b c <span class=\"sy0\">=</span> Win<span class=\"br0\">)</span> choices <span class=\"kw1\">with</span><br/>    | Some c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>c, Win<span class=\"br0\">)</span><br/>    | None <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">tryFind</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> evaluate b c <span class=\"sy0\">=</span> Draw<span class=\"br0\">)</span> choices <span class=\"kw1\">with</span><br/>              | Some c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>c, Draw<span class=\"br0\">)</span><br/>              | None <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">head</span> choices, Lose<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">and</span> bestOutcome b <span class=\"sy0\">=</span> <span class=\"kw3\">snd</span> <span class=\"br0\">(</span>findBestChoice b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bestChoice b <span class=\"sy0\">=</span> <span class=\"kw3\">fst</span> <span class=\"br0\">(</span>findBestChoice b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> computerPlay b <span class=\"sy0\">=</span> set Computer b <span class=\"br0\">(</span>bestChoice b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> printBoard b <span class=\"sy0\">=</span><br/>  printfn <span class=\"st0\">\"   | A | B | C |\"</span><br/>  printfn <span class=\"st0\">\"---+---+---+---+\"</span><br/>  <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>   printfn <span class=\"st0\">\"\u00a0%d |\u00a0%c |\u00a0%c |\u00a0%c |\"</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">-</span>y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>get b <span class=\"br0\">(</span><span class=\"nu0\">0</span>,y<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> brickToString<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>get b <span class=\"br0\">(</span><span class=\"nu0\">1</span>,y<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> brickToString<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>get b <span class=\"br0\">(</span><span class=\"nu0\">2</span>,y<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> brickToString<span class=\"br0\">)</span><br/>   printfn <span class=\"st0\">\"---+---+---+---+\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> userPlay b <span class=\"sy0\">=</span><br/>  printfn <span class=\"st0\">\"Which field do you play? (format: a1)\"</span><br/>  <span class=\"kw1\">let</span> input <span class=\"sy0\">=</span> System.<span class=\"me1\">Console</span>.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> input.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">2</span><br/>     || input.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">'a'</span> || input.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">'c'</span><br/>     || input.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">'1'</span> || input.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">'3'</span> <span class=\"kw1\">then</span><br/>     printfn <span class=\"st0\">\"illegal input\"</span><br/>     userPlay b<br/>  <span class=\"kw1\">else</span><br/>     <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>input.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">let</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>input.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> get b <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> Empty <span class=\"kw1\">then</span><br/>       printfn <span class=\"st0\">\"Field is not free.\"</span><br/>       userPlay b<br/>     <span class=\"kw1\">else</span><br/>       set User b <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gameLoop b player <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> freeSpace b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>    printfn <span class=\"st0\">\"Game over. Draw.\"</span><br/>  <span class=\"kw1\">elif</span> player <span class=\"sy0\">=</span> Computer <span class=\"kw1\">then</span><br/>    printfn <span class=\"st0\">\"Computer plays...\"</span><br/>    <span class=\"kw1\">let</span> b2 <span class=\"sy0\">=</span> computerPlay b<br/>    printBoard b2<br/>    <span class=\"kw1\">if</span> hasWon Computer b2 <span class=\"kw1\">then</span><br/>      printfn <span class=\"st0\">\"Game over. I have won.\"</span><br/>    <span class=\"kw1\">else</span><br/>      gameLoop b2 User<br/>  <span class=\"kw1\">elif</span> player <span class=\"sy0\">=</span> User <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">let</span> b2 <span class=\"sy0\">=</span> userPlay b<br/>    printBoard b2<br/>    <span class=\"kw1\">if</span> hasWon User b2 <span class=\"kw1\">then</span><br/>      printfn <span class=\"st0\">\"Game over. You have won.\"</span><br/>    <span class=\"kw1\">else</span><br/>      gameLoop b2 Computer<br/>\u00a0<br/><span class=\"co1\">// randomly choose an element of a list</span><br/><span class=\"kw1\">let</span> choose <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rnd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>xs:_ list<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> xs.<span class=\"br0\">[</span>rnd.<span class=\"me1\">Next</span><span class=\"br0\">(</span>xs.<span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">// play first brick randomly</span><br/>printfn <span class=\"st0\">\"Computer starts.\"</span><br/><span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> set Computer emptyBoard <span class=\"br0\">(</span>choose <span class=\"br0\">(</span>freeSpace emptyBoard<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>printBoard b<br/>gameLoop b User</pre>"}, {"lang": "Fortran", "loc": 101, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">! This is a fortran95 implementation of the game of tic-tac-toe.</span><br/><span class=\"co1\">! - Objective was to use less than 100 lines.</span><br/><span class=\"co1\">! - No attention has been devoted to efficiency.</span><br/><span class=\"co1\">! - Indentation by findent: https://sourceforge.net/projects/findent/</span><br/><span class=\"co1\">! - This is free software, use as you like at own risk.</span><br/><span class=\"co1\">! - Compile: gfortran -o tictactoe tictactoe.f90</span><br/><span class=\"co1\">! - Run: ./tictactoe</span><br/><span class=\"co1\">! Comments to: wvermin at gmail dot com</span><br/><span class=\"kw1\">module</span> tic<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"co1\">contains</span><br/>   <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> iswin<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>      iswin <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><br/>         <span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"sy0\">&amp;</span><br/>         <span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"sy0\">&amp;</span><br/>         <span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span>.<span class=\"me1\">or</span>.<span class=\"kw4\">all</span><span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>p<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> iswin<br/>   <span class=\"kw1\">subroutine</span> printb<span class=\"br0\">(</span>mes<span class=\"br0\">)</span><br/>      <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">mes</span><br/>      <span class=\"kw3\">integer</span>          <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,j<br/>      <span class=\"kw3\">character</span>        <span class=\"sy0\">::</span> <span class=\"me2\">s</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'.'</span>,<span class=\"st0\">'X'</span>,<span class=\"st0\">'O'</span><span class=\"br0\">]</span><br/>      print <span class=\"st0\">\"(3a3,'   ',3i3)\"</span>,<span class=\"br0\">(</span>s<span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span>j,j<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>mes <span class=\"sy0\">/=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> print <span class=\"st0\">\"(/,a)\"</span>,mes<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> printb<br/>   <span class=\"kw3\">integer</span> <span class=\"kw1\">recursive</span> <span class=\"kw1\">function</span> minmax<span class=\"br0\">(</span>player,bestm<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>bestv<span class=\"br0\">)</span><br/>      <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">player</span>,bestm,move,v,bm,win<span class=\"sy0\">=</span><span class=\"nu0\">1000</span>,inf<span class=\"sy0\">=</span><span class=\"nu0\">100000</span><br/>      <span class=\"kw3\">real</span>    <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">all</span><span class=\"br0\">(</span>b <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         bestv <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">else</span><br/>         bestv <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>inf<br/>         <span class=\"kw1\">do</span> move<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">(</span>move<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               b<span class=\"br0\">(</span>move<span class=\"br0\">)</span> <span class=\"sy0\">=</span> player<br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iswin<span class=\"br0\">(</span>player<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  v <span class=\"sy0\">=</span> win<br/>               <span class=\"kw1\">else</span><br/>                  <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                  v <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>minmax<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">-</span>player,bm<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span>x<span class=\"br0\">)</span><br/>               <span class=\"kw1\">endif</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v &gt; bestv<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  bestv <span class=\"sy0\">=</span> v<br/>                  bestm <span class=\"sy0\">=</span> move<br/>               <span class=\"kw1\">endif</span><br/>               b<span class=\"br0\">(</span>move<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v <span class=\"sy0\">==</span> win<span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>            <span class=\"kw1\">endif</span><br/>         <span class=\"kw1\">enddo</span><br/>      <span class=\"kw1\">endif</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> minmax<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> tic<br/><span class=\"kw1\">program</span> tictactoe<br/>   <span class=\"co1\">! computer: player=1, user: player=2</span><br/>   <span class=\"kw3\">use</span> tic<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span> <br/>   <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">move</span>,ios,v,bestmove,ply,player<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,k,values<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">integer</span>,<span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">seed</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">call</span> <span class=\"kw4\">date_and_time</span><span class=\"br0\">(</span>values<span class=\"sy0\">=</span>values<span class=\"br0\">)</span><br/>   <span class=\"kw1\">call</span> <span class=\"kw4\">random_seed</span><span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"sy0\">=</span>k<span class=\"br0\">)</span><br/>   <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>seed<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   seed <span class=\"sy0\">=</span> values<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1000</span><span class=\"sy0\">*</span>values<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">60</span><span class=\"sy0\">*</span><span class=\"nu0\">1000</span><span class=\"sy0\">*</span>values<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">60</span><span class=\"sy0\">*</span><span class=\"nu0\">60</span><span class=\"sy0\">*</span><span class=\"nu0\">1000</span><span class=\"sy0\">*</span>values<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">call</span> <span class=\"kw4\">random_seed</span><span class=\"br0\">(</span>put<span class=\"sy0\">=</span>seed<span class=\"br0\">)</span><br/>   mainloop<span class=\"sy0\">:</span> <span class=\"kw1\">do</span><br/>      b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">call</span> printb<span class=\"br0\">(</span><span class=\"st0\">'You have O, I have X. You enter 0: game ends.'</span><span class=\"br0\">)</span><br/>      plyloop<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> ply<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,<span class=\"nu0\">4</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>player <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> ply &gt;<span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span>  <span class=\"co1\">! user move</span><br/>            write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(/,a)\"</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span>,<span class=\"st0\">'Your move? (0..9) '</span><br/>            getloop<span class=\"sy0\">:</span> <span class=\"kw1\">do</span><br/>               readloop<span class=\"sy0\">:</span> <span class=\"kw1\">do</span><br/>                  read <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span>,<span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>ios<span class=\"br0\">)</span>,move<br/>                  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ios <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> move  &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> move &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span> readloop<br/>                  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(a)\"</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span>,<span class=\"st0\">'huh? Try again (0..9): '</span><br/>               <span class=\"kw1\">enddo</span> readloop<br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>  move  <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span> mainloop<br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"br0\">(</span>move<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span> getloop<br/>               write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(a)\"</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span>,<span class=\"st0\">'Already occupied, again (0..9): '</span><br/>            <span class=\"kw1\">enddo</span> getloop<br/>            b<span class=\"br0\">(</span>move<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>iswin<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>   <span class=\"co1\">! this should not happen</span><br/>               <span class=\"kw1\">call</span> printb<span class=\"br0\">(</span><span class=\"st0\">'***** You win *****'</span><span class=\"br0\">)</span><br/>               <span class=\"kw1\">exit</span> plyloop<br/>            <span class=\"kw1\">endif</span><br/>         <span class=\"kw1\">endif</span><br/>         v <span class=\"sy0\">=</span> minmax<span class=\"br0\">(</span><span class=\"nu0\">1</span>,bestmove<span class=\"br0\">)</span>   <span class=\"co1\">! computer move</span><br/>         b<span class=\"br0\">(</span>bestmove<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span>iswin<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">call</span> printb<span class=\"br0\">(</span><span class=\"st0\">'***** I win *****'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">exit</span> plyloop<br/>         <span class=\"kw1\">endif</span><br/>         write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(/,a,i3)\"</span><span class=\"br0\">)</span>, <span class=\"st0\">'My move: '</span>,bestmove<br/>         <span class=\"kw1\">call</span> printb<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">enddo</span> plyloop<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>ply <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"('***** Draw *****',/)\"</span><span class=\"br0\">)</span><br/>      player <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">-</span>player<br/>   <span class=\"kw1\">enddo</span> mainloop<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 160, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bufio\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> b <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printBoard<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">9</span><span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> pScore<span class=\"sy1\">,</span> cScore <span class=\"kw4\">int</span><br/><span class=\"kw1\">var</span> pMark<span class=\"sy1\">,</span> cMark <span class=\"kw4\">byte</span> <span class=\"sy2\">=</span> <span class=\"st0\">'X'</span><span class=\"sy1\">,</span> <span class=\"st0\">'O'</span><br/><span class=\"kw1\">var</span> in <span class=\"sy2\">=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdin<span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    b <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Play by entering a digit.\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// start of game</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>            b<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'1'</span> <span class=\"sy3\">+</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        computerStart <span class=\"sy2\">:=</span> cMark <span class=\"sy3\">==</span> <span class=\"st0\">'X'</span><br/>        <span class=\"kw1\">if</span> computerStart <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"I go first, playing X's\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"You go first, playing X's\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    TakeTurns<span class=\"sy1\">:</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>computerStart <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>playerTurn<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">if</span> gameOver<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">break</span> TakeTurns<br/>                <span class=\"sy1\">}</span><br/>\u00a0<br/>            <span class=\"sy1\">}</span><br/>            computerStart <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>            computerTurn<span class=\"sy1\">()</span><br/>            <span class=\"kw1\">if</span> gameOver<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span> TakeTurns<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Score: you\"</span><span class=\"sy1\">,</span> pScore<span class=\"sy1\">,</span> <span class=\"st0\">\"me\"</span><span class=\"sy1\">,</span> cScore<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Let's play again.\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> playerTurn<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> pm <span class=\"kw4\">string</span><br/>    <span class=\"kw1\">var</span> err error<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">3</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span> <span class=\"co1\">// retry loop</span><br/>        printBoard<span class=\"sy1\">()</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%c's move? \"</span><span class=\"sy1\">,</span> pMark<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> pm<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> in<span class=\"sy3\">.</span>ReadString<span class=\"sy1\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        pm <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>TrimSpace<span class=\"sy1\">(</span>pm<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> pm &gt;<span class=\"sy2\">=</span> <span class=\"st0\">\"1\"</span> <span class=\"sy3\">&amp;&amp;</span> pm <span class=\"sy3\">&lt;=</span> <span class=\"st0\">\"9\"</span> &amp;&amp; b<span class=\"sy1\">[</span>pm<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">-</span><span class=\"st0\">'1'</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> pm<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            x <span class=\"sy2\">:=</span> pm<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy3\">-</span> <span class=\"st0\">'1'</span><br/>            b<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> pMark<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"You're not playing right.\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> choices <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> computerTurn<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    printBoard<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">var</span> x <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"My move:\"</span><span class=\"sy1\">,</span> x<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        b<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> cMark<br/>    <span class=\"sy1\">}()</span><br/>    <span class=\"co1\">// look for two in a row</span><br/>    block <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> l <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lines <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> mine<span class=\"sy1\">,</span> yours <span class=\"kw4\">int</span><br/>        x <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> sq <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> l <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> b<span class=\"sy1\">[</span>sq<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> cMark<span class=\"sy1\">:</span><br/>                mine<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> pMark<span class=\"sy1\">:</span><br/>                yours<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                x <span class=\"sy2\">=</span> sq<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> mine <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> &amp;&amp; x &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"co1\">// strategy 1: make winning move</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> yours <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> &amp;&amp; x &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            block <span class=\"sy2\">=</span> x<br/>        <span class=\"sy1\">}</span> <br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> block &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        x <span class=\"sy2\">=</span> block <span class=\"co1\">// strategy 2: make blocking move</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// default strategy: random move</span><br/>    choices <span class=\"sy2\">=</span> choices<span class=\"sy1\">[:</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> sq <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span> <br/>        <span class=\"kw1\">if</span> sq <span class=\"sy3\">==</span> <span class=\"st0\">'1'</span><span class=\"sy3\">+</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            choices <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>choices<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    x <span class=\"sy2\">=</span> choices<span class=\"sy1\">[</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>choices<span class=\"sy1\">))]</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"kw4\">func</span> gameOver<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// check for win</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> l <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lines <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> b<span class=\"sy1\">[</span>l<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]]</span> <span class=\"sy3\">==</span> b<span class=\"sy1\">[</span>l<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span> &amp;&amp; b<span class=\"sy1\">[</span>l<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span> <span class=\"sy3\">==</span> b<span class=\"sy1\">[</span>l<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]]</span> <span class=\"sy1\">{</span><br/>            printBoard<span class=\"sy1\">()</span><br/>            <span class=\"kw1\">if</span> b<span class=\"sy1\">[</span>l<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]]</span> <span class=\"sy3\">==</span> cMark <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"I win!\"</span><span class=\"sy1\">)</span><br/>                cScore<span class=\"sy2\">++</span><br/>                pMark<span class=\"sy1\">,</span> cMark <span class=\"sy2\">=</span> <span class=\"st0\">'X'</span><span class=\"sy1\">,</span> <span class=\"st0\">'O'</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"You win!\"</span><span class=\"sy1\">)</span><br/>                pScore<span class=\"sy2\">++</span><br/>                pMark<span class=\"sy1\">,</span> cMark <span class=\"sy2\">=</span> <span class=\"st0\">'O'</span><span class=\"sy1\">,</span> <span class=\"st0\">'X'</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span> <br/>        <span class=\"sy1\">}</span> <br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// check for empty squares</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> sq <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> sq <span class=\"sy3\">==</span> <span class=\"st0\">'1'</span><span class=\"sy3\">+</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Cat game.\"</span><span class=\"sy1\">)</span><br/>    pMark<span class=\"sy1\">,</span> cMark <span class=\"sy2\">=</span> cMark<span class=\"sy1\">,</span> pMark<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> lines <span class=\"sy2\">=</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"co1\">// rows</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">},</span> <span class=\"co1\">// columns</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">},</span> <span class=\"co1\">// diagonals</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 134, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Main <span class=\"br0\">{</span><br/>\u00a0<br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> input <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> main<span class=\"br0\">(</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tMain main <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tmain.<span class=\"me1\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> play<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\tTicTackToe game <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> TicTackToe<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tgame.<span class=\"me1\">init</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> gameOver <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a>\t\t<br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> player <span class=\"sy0\">=</span> game.<span class=\"me1\">player1</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Players take turns marking a square. Only squares <span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">+</span><br/>\t\t\t\t<span class=\"st0\">\"not already marked can be picked. Once a player has <span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">+</span><br/>    \t\t\t<span class=\"st0\">\"marked three squares in a row, column or diagonal, they win! If all squares <span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">+</span><br/>    \t\t\t<span class=\"st0\">\"are marked and no three squares are the same, a tied game is declared.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">+</span><br/>\t\t\t\t<span class=\"st0\">\"Player 1 is O and Player 2 is X <span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">+</span><br/>    \t\t\t<span class=\"st0\">\"Have Fun! <span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"${game.drawBoard()}\"</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>gameOver <span class=\"sy0\">&amp;&amp;</span> game.<span class=\"me1\">plays</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\tplayer <span class=\"sy0\">=</span> game.<span class=\"me1\">currentPlayer</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> game.<span class=\"me1\">player1</span>\u00a0:game.<span class=\"me1\">player2</span><br/>\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> validPick <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>validPick<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> square<br/>\t\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Next $player, enter move by selecting square's number\u00a0:\"</span>\t<br/>\t\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span><br/>\t\t\t\t\tsquare <span class=\"sy0\">=</span> input.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Exception&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Exception</span></a> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>\t\t\t\t\t<br/>\u00a0<br/>\t\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>square.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.google.de/search?as_q=Character&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">isDigit</span><span class=\"br0\">(</span>square.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\tvalidPick <span class=\"sy0\">=</span> game.<span class=\"me1\">placeMarker</span><span class=\"br0\">(</span>square<span class=\"br0\">)</span>\t<span class=\"br0\">}</span><br/>\t\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>validPick<span class=\"br0\">)</span> <span class=\"br0\">{</span>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Select another Square\"</span>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">(</span>game.<span class=\"me1\">checkWinner</span><span class=\"br0\">(</span>player<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span>\tgameOver <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a>\t: game.<span class=\"me1\">switchPlayers</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\t<br/>\t\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span>game.<span class=\"me1\">drawBoard</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>\u00a0<br/>\t\t<span class=\"br0\">}</span>\t\t<br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Game Over, \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>gameOver <span class=\"sy0\">==</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">\"$player Wins\"</span>\u00a0: <span class=\"st0\">\"Draw\"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> TicTackToe <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> board <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=Object&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Object</span></a><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> player1 <span class=\"sy0\">=</span> <span class=\"st0\">\"player 1\"</span><br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> player2 <span class=\"sy0\">=</span> <span class=\"st0\">\"player 2\"</span><br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> marker1 <span class=\"sy0\">=</span> <span class=\"st0\">'X'</span><br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> marker2 <span class=\"sy0\">=</span> <span class=\"st0\">'O'</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> currentPlayer<br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> plays<br/>\u00a0<br/>\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> TicTacToe<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> init<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> counter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>       <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span><br/>           <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> col <span class=\"sy0\">-&gt;</span><br/>                board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>counter<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\t   plays <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t   currentPlayer <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> switchPlayers<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        currentPlayer <span class=\"sy0\">=</span> <span class=\"br0\">(</span>currentPlayer <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span>:<span class=\"nu0\">1</span><br/>        plays<span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> placeMarker<span class=\"br0\">(</span>play<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> result <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span><br/>            <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> col <span class=\"sy0\">-&gt;</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>play.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>currentPlayer <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> marker2\u00a0: marker1<span class=\"sy0\">;</span><br/>                    result <span class=\"sy0\">=</span>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> checkWinner<span class=\"br0\">(</span>player<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    \t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20char\"><span class=\"kw4\">char</span></a> current <span class=\"sy0\">=</span> <span class=\"br0\">(</span>player <span class=\"sy0\">==</span> player1<span class=\"br0\">)</span><span class=\"sy0\">?</span> marker2:  marker1<br/>        <span class=\"co1\">//Checking </span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> checkRows<span class=\"br0\">(</span>current<span class=\"br0\">)</span> <span class=\"sy0\">||</span> checkColumns<span class=\"br0\">(</span>current<span class=\"br0\">)</span> <span class=\"sy0\">||</span>checkDiagonals<span class=\"br0\">(</span>current<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> checkRows<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20char\"><span class=\"kw4\">char</span></a> current<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span><span class=\"br0\">{</span> line <span class=\"sy0\">-&gt;</span><br/>\t\t\t  board<span class=\"br0\">[</span>line<span class=\"br0\">]</span>.<span class=\"me1\">every</span> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> current<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> checkColumns<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20char\"><span class=\"kw4\">char</span></a> current<span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t<br/>\t\t<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span><span class=\"br0\">{</span>i <span class=\"sy0\">-&gt;</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">every</span><span class=\"br0\">{</span>j <span class=\"sy0\">-&gt;</span><br/>\t\t\t\t board<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span>current <span class=\"br0\">}</span>\t\t<br/>\t\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> checkDiagonals<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20char\"><span class=\"kw4\">char</span></a> current<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rightDiag <span class=\"sy0\">=</span> <span class=\"br0\">[</span>board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,board<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,board<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> leftDiag <span class=\"sy0\">=</span>  <span class=\"br0\">[</span>board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>,board<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,board<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> rightDiag.<span class=\"me1\">every</span><span class=\"br0\">{</span>it <span class=\"sy0\">==</span> current<span class=\"br0\">}</span> <span class=\"sy0\">||</span> leftDiag.<span class=\"me1\">every</span><span class=\"br0\">{</span>it <span class=\"sy0\">==</span> current<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> drawBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        StringBuilder builder <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"Game board: <span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> row<span class=\"sy0\">-&gt;</span><br/>            <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span>col <span class=\"sy0\">-&gt;</span><br/>                builder.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append\"><span class=\"kw7\">append</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span> <span class=\"sy0\">+</span> board<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            builder.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append\"><span class=\"kw7\">append</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        builder.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20append\"><span class=\"kw7\">append</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> builder.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 222, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intercalate<span class=\"sy0\">,</span> find<span class=\"sy0\">,</span> minimumBy<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>digitToInt<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>listToMaybe<span class=\"sy0\">,</span> mapMaybe<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>guard<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- check if there is a horizontal, vertical or diagonal line of</span><br/><span class=\"co1\">-- X or O</span><br/>tictactoe <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>tictactoe a <span class=\"sy0\">=</span> tictactoeFor <span class=\"st0\">'X'</span> a <span class=\"sy0\">/=</span> tictactoeFor <span class=\"st0\">'O'</span> a<br/>\u00a0<br/><span class=\"co1\">-- check if there is a horizontal, vertical or diagonal line</span><br/><span class=\"co1\">-- for the given player \"n\"</span><br/>tictactoeFor <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>tictactoeFor n <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>h<span class=\"sy0\">,</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">]</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>f<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>g<span class=\"sy0\">,</span>h<span class=\"sy0\">,</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>g<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">[</span>b<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>h<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>c<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>c<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>g<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- empty game board</span><br/>start <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>start <span class=\"sy0\">=</span> <span class=\"st0\">\"         \"</span><br/>\u00a0<br/><span class=\"co1\">-- check if there is an X or an O at the given position</span><br/>isPossible <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isPossible n game <span class=\"sy0\">=</span> <span class=\"br0\">(</span>game <span class=\"sy0\">!!</span> n<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:notElem\"><span class=\"kw3\">notElem</span></a>` <span class=\"st0\">\"XO\"</span><br/>\u00a0<br/><span class=\"co1\">-- try to place an X or an O at a given position.</span><br/><span class=\"co1\">-- \"Right\" + modified board means success, \"Left\" + unmodified board</span><br/><span class=\"co1\">-- means failure</span><br/>place <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Either\"><span class=\"kw4\">Either</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>place i c game <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> isPossible i game<br/>    <span class=\"kw1\">then</span> Right <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> i game <span class=\"sy0\">++</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> game<br/>    <span class=\"kw1\">else</span> Left game<br/>\u00a0<br/><span class=\"co1\">-- COMPUTER AI</span><br/><span class=\"co1\">-- get the number of movements, starting from a given non-empty board</span><br/><span class=\"co1\">-- and a position for the next movement, until the specified player</span><br/><span class=\"co1\">-- wins or no movement is possible</span><br/><span class=\"co1\">-- the positions are chosen sequentially, so there's not much</span><br/><span class=\"co1\">-- intelligence here anyway</span><br/>developGame <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>developGame iterateMore moves i player game<br/>    <span class=\"sy0\">|</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">=</span> <br/>        <span class=\"co1\">-- if i arrives to the last position, iterate again from 0</span><br/>        <span class=\"co1\">-- but do it only once</span><br/>        <span class=\"kw1\">if</span> iterateMore<br/>        <span class=\"kw1\">then</span> developGame False moves <span class=\"nu0\">0</span> player game<br/>        <span class=\"co1\">-- draw game (after one iteration, still no winning moves)</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">(</span>moves<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> game<span class=\"br0\">)</span><br/>        <span class=\"co1\">-- draw game (game board full) or a win for the player</span><br/>    <span class=\"sy0\">|</span> moves <span class=\"sy0\">==</span> <span class=\"nu0\">9</span> <span class=\"sy0\">||</span> tictactoeFor player game <span class=\"sy0\">=</span> <span class=\"br0\">(</span>moves<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> game<span class=\"br0\">)</span><br/>        <span class=\"co1\">-- make a move, if possible, and continue playing</span><br/>    <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> place i otherPlayer game <span class=\"kw1\">of</span><br/>        <span class=\"co1\">-- position i is not empty. try with the next position</span><br/>        Left <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> developGame iterateMore moves <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    otherPlayer game<br/>        <span class=\"co1\">-- position i was empty, so it was a valid move.</span><br/>        <span class=\"co1\">-- change the player and make a new move, starting at pos 0</span><br/>        Right newGame <span class=\"sy0\">-&gt;</span> developGame iterateMore <span class=\"br0\">(</span>moves <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>                    otherPlayer newGame<br/>        <span class=\"kw1\">where</span><br/>            otherPlayer <span class=\"sy0\">=</span> changePlayer player<br/>\u00a0<br/><span class=\"co1\">-- COMPUTER AI</span><br/><span class=\"co1\">-- starting from a given non-empty board, try to guess which position</span><br/><span class=\"co1\">-- could lead the player to the fastest victory.</span><br/>bestMoveFor <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>bestMoveFor player game <span class=\"sy0\">=</span> bestMove<br/>    <span class=\"kw1\">where</span><br/>        <span class=\"co1\">-- drive the game to its end for each starting position</span><br/>        continuations <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> developGame True <span class=\"nu0\">0</span> x player game<span class=\"br0\">)</span> <span class=\"sy0\">|</span><br/>            x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>        <span class=\"co1\">-- compare the number of moves of the game and take the</span><br/>        <span class=\"co1\">-- shortest one</span><br/>        move <span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"sy0\">_,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> m<br/>        <span class=\"br0\">(</span>bestMove<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> minimumBy <span class=\"br0\">(</span>comparing move<span class=\"br0\">)</span> continuations<br/>\u00a0<br/><span class=\"co1\">-- canBlock checks if the opponent has two pieces in a row and the</span><br/><span class=\"co1\">-- other cell in the row is empty, and places the player's piece there,</span><br/><span class=\"co1\">-- blocking the opponent</span><br/>canBlock <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>canBlock p <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>h<span class=\"sy0\">,</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    listToMaybe <span class=\"sy0\">$</span> mapMaybe blockable <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>f<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>g<span class=\"sy0\">,</span>h<span class=\"sy0\">,</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>g<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                      <span class=\"br0\">[</span>b<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>h<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>c<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>c<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>g<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span><br/>        blockable xs <span class=\"sy0\">=</span> <span class=\"kw1\">do</span>          <br/>          guard <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span> otherPlayer<span class=\"br0\">)</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>          x <span class=\"sy0\">&lt;-</span> find <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"st0\">\"123456789\"</span><span class=\"br0\">)</span> xs<br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> digitToInt x<br/>        otherPlayer <span class=\"sy0\">=</span> changePlayer p<br/>\u00a0<br/><span class=\"co1\">-- format a game board for on-screen printing</span><br/>showGame <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>showGame <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>h<span class=\"sy0\">,</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    topBottom <span class=\"sy0\">++</span><br/>    <span class=\"st0\">\"|    | 1 | 2 | 3 |<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span><br/>    topBottom <span class=\"sy0\">++</span><br/>    row <span class=\"st0\">\"0\"</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span><br/>    row <span class=\"st0\">\"3\"</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>e<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span><br/>    row <span class=\"st0\">\"6\"</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>g<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>h<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span><br/>        topBottom <span class=\"sy0\">=</span> <span class=\"st0\">\"+----+---+---+---+<span class=\"es0\">\\n</span>\"</span><br/>        row n x <span class=\"sy0\">=</span> <span class=\"st0\">\"| \"</span> <span class=\"sy0\">++</span> n <span class=\"sy0\">++</span> <span class=\"st0\">\"+ | \"</span> <span class=\"sy0\">++</span><br/>            intercalate <span class=\"st0\">\" | \"</span> x <span class=\"sy0\">++</span> <span class=\"st0\">\" |<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span> topBottom<br/>\u00a0<br/><span class=\"co1\">-- ask the user to press a numeric key and convert it to an int</span><br/>enterNumber <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>enterNumber <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    c <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getChar\"><span class=\"kw3\">getChar</span></a><br/>    <span class=\"kw1\">if</span> c `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"st0\">\"123456789\"</span><br/>    <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> digitToInt c<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Please enter a digit!\"</span><br/>        enterNumber<br/>\u00a0<br/><span class=\"co1\">-- a human player's turn: get the number of pieces put on the board,</span><br/><span class=\"co1\">-- the next piece to be put (X or O) and a game board, and return</span><br/><span class=\"co1\">-- a new game state, checking if the piece can be placed on the board.</span><br/><span class=\"co1\">-- if it can't, make the user try again.</span><br/>turn <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>turn <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> game<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Please tell me where you want to put an \"</span> <span class=\"sy0\">++</span><br/>        <span class=\"br0\">[</span>player<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span><br/>    pos <span class=\"sy0\">&lt;-</span> enterNumber<br/>    <span class=\"kw1\">case</span> place <span class=\"br0\">(</span>pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> player game <span class=\"kw1\">of</span><br/>        Left oldGame <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"That place is already taken!<span class=\"es0\">\\n</span>\"</span><br/>            turn <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> oldGame<span class=\"br0\">)</span><br/>        Right newGame <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> changePlayer player<span class=\"sy0\">,</span> newGame<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- alternate between X and O players</span><br/>changePlayer <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>changePlayer <span class=\"st0\">'O'</span> <span class=\"sy0\">=</span> <span class=\"st0\">'X'</span><br/>changePlayer <span class=\"st0\">'X'</span> <span class=\"sy0\">=</span> <span class=\"st0\">'O'</span><br/>\u00a0<br/><span class=\"co1\">-- COMPUTER AI</span><br/><span class=\"co1\">-- make an automatic turn, placing an X or an O game board.</span><br/><span class=\"co1\">-- the first movement is always random.</span><br/><span class=\"co1\">-- first, the computer looks for two pieces of his opponent in a row</span><br/><span class=\"co1\">-- and tries to block.</span><br/><span class=\"co1\">-- otherwise, it tries to guess the best position for the next movement.</span><br/><span class=\"co1\">-- as a last resort, it places a piece randomly.</span><br/>autoTurn <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>autoTurn forceRandom <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> game<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">-- try a random position 'cause everything else failed</span><br/>    <span class=\"co1\">-- count == 0 overrides the value of forceRandom</span><br/>    i <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">if</span> count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> forceRandom<br/>            <span class=\"kw1\">then</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span><br/>                <span class=\"kw1\">case</span> canBlock player game <span class=\"kw1\">of</span><br/>                    <span class=\"co1\">-- opponent can't be blocked. try to guess</span><br/>                    <span class=\"co1\">-- the best movement</span><br/>                    Nothing <span class=\"sy0\">-&gt;</span> bestMoveFor player game<br/>                    <span class=\"co1\">-- opponent can be blocked, so just do it!</span><br/>                    Just blockPos <span class=\"sy0\">-&gt;</span> blockPos<br/>    <span class=\"co1\">-- if trying to place a piece at a calculated position doesn't work,</span><br/>    <span class=\"co1\">-- just try again with a random value</span><br/>    <span class=\"kw1\">case</span> place i player game <span class=\"kw1\">of</span><br/>        Left oldGame <span class=\"sy0\">-&gt;</span> autoTurn True <span class=\"br0\">(</span>count<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> oldGame<span class=\"br0\">)</span><br/>        Right newGame <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"It's player \"</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span>player<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <span class=\"st0\">\"'s turn.\"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> changePlayer player<span class=\"sy0\">,</span> newGame<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- play a game until someone wins or the board becomes full.</span><br/><span class=\"co1\">-- depending on the value of the variable \"auto\", ask the user(s) to</span><br/><span class=\"co1\">-- put some pieces on the board or do it automatically</span><br/>play <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>play auto cpg<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> player<span class=\"sy0\">,</span> game<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    newcpg<span class=\"sy0\">@</span><span class=\"br0\">(</span>newCount<span class=\"sy0\">,</span> newPlayer<span class=\"sy0\">,</span> newGame<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">case</span> auto <span class=\"kw1\">of</span><br/>        <span class=\"co1\">-- if both players are human, always ask them</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> turn cpg<br/>        <span class=\"co1\">-- if both players are computer, always play auto</span><br/>        <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> autoTurn False cpg<br/>        <span class=\"co1\">-- X is computer, O is human</span><br/>        <span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> player <span class=\"sy0\">==</span> <span class=\"st0\">'X'</span> <span class=\"kw1\">then</span> autoTurn False cpg <span class=\"kw1\">else</span> turn cpg<br/>        <span class=\"co1\">-- X is human, O is computer</span><br/>        <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> player <span class=\"sy0\">==</span> <span class=\"st0\">'O'</span> <span class=\"kw1\">then</span> autoTurn False cpg <span class=\"kw1\">else</span> turn cpg<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span> showGame newGame<br/>    <span class=\"kw1\">if</span> tictactoe newGame<br/>    <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Player \"</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span>changePlayer newPlayer<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" wins!<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">if</span> newCount <span class=\"sy0\">==</span> <span class=\"nu0\">9</span><br/>        <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Draw!<span class=\"es0\">\\n</span>\"</span><br/>        <span class=\"kw1\">else</span> play auto newcpg<br/>\u00a0<br/><span class=\"co1\">-- main program: greet the user, ask for a game type, ask for the</span><br/><span class=\"co1\">-- player that'll start the game, and play the game beginning with an</span><br/><span class=\"co1\">-- empty board</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    a <span class=\"sy0\">&lt;-</span> getArgs<br/>    <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> a<br/>    <span class=\"kw1\">then</span> usage<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> option <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> a<br/>        <span class=\"kw1\">if</span> option `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"br0\">[</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"3\"</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">++</span> showGame start<br/>            <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> option <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>            play m <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'X'</span><span class=\"sy0\">,</span> start<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> usage<br/>\u00a0<br/>usage <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>usage <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"TIC-TAC-TOE GAME<span class=\"es0\">\\n</span>================<span class=\"es0\">\\n</span>\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"How do you want to play?\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Run the program with one of the following options.\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"0\u00a0: both players are human\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"1\u00a0: both players are computer\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"2\u00a0: player X is computer and player O is human\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"3\u00a0: player X is human and player O is computer\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Player X always begins.\"</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 114, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"co1\"># Play TicTacToe</span><br/>\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> E <span class=\"st0\">\" \"</span> <span class=\"co1\"># empty square</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> X <span class=\"st0\">\"X\"</span> <span class=\"co1\"># X piece</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> O <span class=\"st0\">\"O\"</span> <span class=\"co1\"># O piece</span><br/>\u00a0<br/><span class=\"co1\"># -- define a board </span><br/><span class=\"kw1\">record</span> Board<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> e<span class=\"sy1\">,</span> f<span class=\"sy1\">,</span> g<span class=\"sy1\">,</span> h<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> display_board <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>===============\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">a</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" | \"</span> <span class=\"sy1\">||</span> board<span class=\"sy1\">.</span><span class=\"me1\">b</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" | \"</span> <span class=\"sy1\">||</span> board<span class=\"sy1\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"---------\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">d</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" | \"</span> <span class=\"sy1\">||</span> board<span class=\"sy1\">.</span><span class=\"me1\">e</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" | \"</span> <span class=\"sy1\">||</span> board<span class=\"sy1\">.</span><span class=\"me1\">f</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"---------\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">g</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" | \"</span> <span class=\"sy1\">||</span> board<span class=\"sy1\">.</span><span class=\"me1\">h</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" | \"</span> <span class=\"sy1\">||</span> board<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># return a set of valid moves (empty positions) in given board</span><br/><span class=\"kw1\">procedure</span> empty_fields <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  fields <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">fieldnames</span><span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">==</span> E<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw4\">insert</span> <span class=\"br0\">(</span>fields<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> fields<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> game_start <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> Board <span class=\"br0\">(</span>E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"sy1\">,</span> E<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> game_is_drawn <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy1\">*</span>empty_fields<span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> game_won_by <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">a</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">b</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">c</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">d</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">e</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">f</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">g</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">h</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">i</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">a</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">d</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">g</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">b</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">e</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">h</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">c</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">f</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">i</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">a</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">e</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">i</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>         <span class=\"br0\">(</span>board<span class=\"sy1\">.</span><span class=\"me1\">g</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">e</span> <span class=\"sy1\">==</span> board<span class=\"sy1\">.</span><span class=\"me1\">c</span> <span class=\"sy1\">==</span> player<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> game_over <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> game_is_drawn <span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"sy1\">|</span> game_won_by <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> O<span class=\"br0\">)</span> <span class=\"sy1\">|</span> game_won_by <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> X<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># -- players make their move on the board</span><br/><span class=\"co1\">#    assume there is at least one empty square</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> human_move <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><br/>  choice <span class=\"sy1\">:=</span> <span class=\"st0\">\"z\"</span><br/>  options <span class=\"sy1\">:=</span> empty_fields <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"co1\"># keep prompting until player selects a valid square</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw4\">member</span> <span class=\"br0\">(</span>options<span class=\"sy1\">,</span> choice<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"Choose one of: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>options <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>&gt; \"</span><span class=\"br0\">)</span> <br/>    choice <span class=\"sy1\">:=</span> <span class=\"kw4\">read</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  board<span class=\"br0\">[</span>choice<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> player<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># pick and make a move at random from empty positions</span><br/><span class=\"kw1\">procedure</span> random_move <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><br/>  board<span class=\"br0\">[</span><span class=\"sy1\">?</span>empty_fields<span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> player<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># -- manage the game play</span><br/><span class=\"kw1\">procedure</span> play_game <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># hold procedures for players' move in variables</span><br/>  player_O <span class=\"sy1\">:=</span> random_move<br/>  player_X <span class=\"sy1\">:=</span> human_move<br/>\u00a0<br/>  <span class=\"co1\"># randomly determine if human or computer moves first</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">?</span><span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Human plays first as O\"</span><span class=\"br0\">)</span><br/>      player_O <span class=\"sy1\">:=</span> human_move<br/>      player_X <span class=\"sy1\">:=</span> random_move<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Computer plays first, human is X\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># set up the game to start</span><br/>  board <span class=\"sy1\">:=</span> game_start <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  player <span class=\"sy1\">:=</span> O<br/>  display_board <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><br/>  <span class=\"co1\"># loop until the game is over, getting each player to move in turn</span><br/>  <span class=\"kw1\">until</span> game_over <span class=\"br0\">(</span>board<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span>player <span class=\"sy1\">||</span> <span class=\"st0\">\" to play next\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># based on player, prompt for the next move</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>player <span class=\"sy1\">==</span> O<span class=\"br0\">)</span><br/>      <span class=\"kw1\">then</span> <span class=\"br0\">(</span>player_O <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">(</span>player_X <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># change player to move</span><br/>    player <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>player <span class=\"sy1\">==</span> O<span class=\"br0\">)</span> <span class=\"kw1\">then</span> X <span class=\"kw1\">else</span> O<br/>    display_board <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> player<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\"># finish by writing out result</span><br/>  <span class=\"kw1\">if</span> game_won_by <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> O<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">then</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"O won\"</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> game_won_by <span class=\"br0\">(</span>board<span class=\"sy1\">,</span> X<span class=\"br0\">)</span> <br/>      <span class=\"kw1\">then</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"X won\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"draw\"</span><span class=\"br0\">)</span> <span class=\"co1\"># neither player won, so must be a draw</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># -- get things started</span><br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  play_game <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 96, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>Note<span class=\"co2\"> 'ttt adjudicates or plays'<br/>\u00a0<br/>   use:  markers ttt characters<br/>\u00a0<br/>   characters represent the cell names.<br/>\u00a0<br/>   markers is a length 3 character vector of the<br/>   characters to use for first and second player<br/>   followed by the opponent's mark.<br/>   'XOX' means X plays 1st, O is the other mark,<br/>   and the first strategy plays 1st.<br/>   'XOO' means X plays 1st, O is the other mark,<br/>   and the second strategy moves first.<br/>\u00a0<br/>   The game  is set  up for  the computer as the<br/>   first strategy (random), and human as second.<br/>\u00a0<br/>   A standard use:<br/>      'XOX'ttt'abcdefghijkl'<br/>\u00a0<br/>   Example game reformatted w/ emacs artist-mode<br/>   to fit your display:<br/>\u00a0<br/>      '#-#'ttt'wersdfxcv'<br/>   w\u2502e\u2502r                     w\u2502e\u2502r        ....    -\u2502e\u2502r           .    -\u2502e\u2502#<br/>   \u2500\u253c\u2500\u253c\u2500                 .   \u2500\u253c\u2500\u253c\u2500       ..       \u2500\u253c\u2500\u253c\u2500         ..     \u2500\u253c\u2500\u253c\u2500<br/>   s\u2502d\u2502f                 .   s\u2502#\u2502f      ..        s\u2502#\u2502f        ..      -\u2502#\u2502f<br/>   \u2500\u253c\u2500\u253c\u2500                ..   \u2500\u253c\u2500\u253c\u2500      .         \u2500\u253c\u2500\u253c\u2500      ...       \u2500\u253c\u2500\u253c\u2500<br/>   x\u2502c\u2502v               ..    -\u2502c\u2502v      .         -\u2502c\u2502#     ..         -\u2502c\u2502#<br/>   d                  ..     v         ..         r         .          VICTORY<br/>   w\u2502e\u2502r             ..      w\u2502e\u2502r     ..         -\u2502e\u2502#     .<br/>   \u2500\u253c\u2500\u253c\u2500           ...       \u2500\u253c\u2500\u253c\u2500     ..         \u2500\u253c\u2500\u253c\u2500    .<br/>   s\u2502#\u2502f         ...         s\u2502#\u2502f     ..         s\u2502#\u2502f    .<br/>   \u2500\u253c\u2500\u253c\u2500        ..           \u2500\u253c\u2500\u253c\u2500   ...          \u2500\u253c\u2500\u253c\u2500  ...<br/>   x\u2502c\u2502v                     -\u2502c\u2502#                -\u2502c\u2502#<br/>   --&gt;cell for -?            --&gt;cell for -?       --&gt;cell for -?<br/>   x                         w                    s<br/>)</span><br/>\u00a0<br/>while=: conjunction def <span class=\"st_h\">'u ^: v ^:_'</span> <span class=\"co1\">NB. j assumes while is a verb and needs to know while is a conjunction.</span><br/>\u00a0<br/>ttt=: <a class=\"__cf_email__\" data-cfemail=\"0d6278796e6260684d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">((</span><a class=\"__cf_email__\" data-cfemail=\"482c213b3824293108\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:move<span class=\"sy0\">)</span> while undecided<span class=\"sy0\">)</span>@:<a class=\"__cf_email__\" data-cfemail=\"395d504a4955584079\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:prepare<br/>\u00a0<br/>blindfolded_variant=: <a class=\"__cf_email__\" data-cfemail=\"d5baa0a1b6bab8b095\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<a class=\"__cf_email__\" data-cfemail=\"fd99948e8d919c84bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span>move while undecided<span class=\"sy0\">)</span>@:<a class=\"__cf_email__\" data-cfemail=\"fd99948e8d919c84bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:prepare<br/>\u00a0<br/>outcome=: {&amp;<span class=\"sy0\">(</span>&gt;;:<span class=\"st_h\">'kitty VICTORY'</span><span class=\"sy0\">)</span>@:won   <span class=\"co1\">NB. (outcome does not pass along the state)</span><br/>move=: post locate<br/>undecided=: won nor full<br/>prepare=: , <a class=\"__cf_email__\" data-cfemail=\"07656866756347\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:]                    <span class=\"co1\">NB. form the state vector</span><br/>\u00a0<br/>Note<span class=\"co2\"> 'locate'<br/>  is a monadic verb.  y is the state vector.<br/>  returns the character of the chosen cell.<br/>  Generally:<br/>  locate=: second_strategy`<a class=\"__cf_email__\" data-cfemail=\"bddbd4cfcec9e2cec9cfdcc9d8dac4fd93\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(first = mark)<br/>  Simplified:<br/>  locate=: human_locate NB. human versus human<br/>)</span><br/>locate=: human_locate`<a class=\"__cf_email__\" data-cfemail=\"12717d7f62676677604d7e7d71736677523c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>first = mark<span class=\"sy0\">)</span><br/>\u00a0<br/>display=: show [: <span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span>,:<span class=\"nu0\">5</span> <span class=\"nu0\">5</span><span class=\"sy0\">)</span>&amp;<span class=\"sy0\">(</span>];.<span class=\"nu0\">0</span><span class=\"sy0\">)</span>@:\": [: &lt;\"<span class=\"nu0\">0</span> fold<br/>\u00a0<br/>computer_locate=: [: <a class=\"__cf_email__\" data-cfemail=\"23504b4c5463\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{. board -. marks <span class=\"co1\">NB. strategy: first available</span><br/>computer_locate=: [: <a class=\"__cf_email__\" data-cfemail=\"cdbea5a2ba8d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>{~\u00a0<a class=\"__cf_email__\" data-cfemail=\"c7f887\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:#<span class=\"sy0\">)</span> board -. marks <span class=\"co1\">NB. strategy: random</span><br/>\u00a0<br/>human_locate=: monad define<br/>  state=. <span class=\"kw2\">y</span><br/>  <span class=\"kw2\">m</span>=. mark state<br/>  b=. board state<br/>  cells=. b -. marks state<br/>  show <span class=\"st_h\">'--&gt;cell for '</span> , <span class=\"kw2\">m</span> , <span class=\"st_h\">'?'</span><br/>  <span class=\"kw1\">whilst.</span> cell <a class=\"__cf_email__\" data-cfemail=\"6b46452b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:e. cells <span class=\"kw1\">do.</span> cell =. {. <span class=\"sy0\">(</span><span class=\"nu0\">1</span>!:<span class=\"nu0\">1</span>]<span class=\"nu0\">1</span><span class=\"sy0\">)</span> , <span class=\"kw2\">m</span> <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>post=: <span class=\"nu0\">2</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"38791678\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span><span class=\"nu0\">3</span>&amp;{.<span class=\"sy0\">)</span>@:[ prepare <a class=\"__cf_email__\" data-cfemail=\"3e535f4c557e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:[`<span class=\"sy0\">((</span>i.~ board<span class=\"sy0\">)</span>~<span class=\"sy0\">)</span>`<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"b4d6dbd5c6d0f4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:[<span class=\"sy0\">)</span>}<br/>\u00a0<br/>mark=: {.                    <span class=\"co1\">NB. mark of the current player from state</span><br/>marks=: <span class=\"nu0\">2</span>&amp;{.                 <span class=\"co1\">NB. extract both markers from state</span><br/>board=: <span class=\"nu0\">_9</span>&amp;{.                <span class=\"co1\">NB. extract board from state</span><br/>first=: <span class=\"nu0\">2</span>&amp;{                  <span class=\"co1\">NB. extract first player from state</span><br/>\u00a0<br/>show=: [ smoutput<br/>\u00a0<br/>full=: <span class=\"nu0\">2</span> = #@:~.<br/>won=: <a class=\"__cf_email__\" data-cfemail=\"cfbbaabcbb8f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:fold<br/>fold=: <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> $ board<br/>test=: [: any [: all [: infix_pairs_agree |:@:lines<br/>\u00a0<br/>lines=: , diagonal , <a class=\"__cf_email__\" data-cfemail=\"52363b33353d3c333e12\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:|. , |:<br/>diagonal=: <span class=\"sy0\">(</span>&lt;<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">)</span>&amp;|:<br/>all=: *./<br/>any=: +./<br/>nor=: <span class=\"nu0\">8</span> b.<br/>infix_pairs_agree=: <span class=\"nu0\">2</span>&amp;<span class=\"sy0\">(</span>=/\\<span class=\"sy0\">)</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 326, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.InputStreamReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Hashtable</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TicTacToe<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tTicTacToe now<span class=\"sy0\">=</span><span class=\"kw1\">new</span> TicTacToe<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tnow.<span class=\"me1\">startMatch</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> marks<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> wins<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> weights<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> knotcount<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> crosscount<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> totalcount<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> playerid<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> compid<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> truceid<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> playingid<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> movesPlayer<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">byte</span> override<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> overridegrid<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">'o'</span>,<span class=\"st0\">'o'</span>,<span class=\"st0\">'o'</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"st0\">'o'</span>,<span class=\"st0\">'o'</span>,<span class=\"st0\">'o'</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"st0\">'o'</span>,<span class=\"st0\">'o'</span>,<span class=\"st0\">'o'</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> numpad<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">'7'</span>,<span class=\"st0\">'8'</span>,<span class=\"st0\">'9'</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"st0\">'4'</span>,<span class=\"st0\">'5'</span>,<span class=\"st0\">'6'</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"st0\">'1'</span>,<span class=\"st0\">'2'</span>,<span class=\"st0\">'3'</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> Hashtable<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>,Integer<span class=\"sy0\">&gt;</span> crossbank<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> Hashtable<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>,Integer<span class=\"sy0\">&gt;</span> knotbank<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> startMatch<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> br<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Start?(y/n):\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">char</span> choice<span class=\"sy0\">=</span><span class=\"st0\">'y'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">try</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tchoice<span class=\"sy0\">=</span>br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>choice<span class=\"sy0\">==</span><span class=\"st0\">'n'</span><span class=\"sy0\">||</span>choice<span class=\"sy0\">==</span><span class=\"st0\">'N'</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Use a standard numpad as an entry grid, as so:<span class=\"es0\">\\n</span> \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tdisplay<span class=\"br0\">(</span>numpad<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Begin\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> playerscore<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> compscore<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">do</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> result<span class=\"sy0\">=</span>startGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>result<span class=\"sy0\">==</span>playerid<span class=\"br0\">)</span><br/>\t\t\t\tplayerscore<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>result<span class=\"sy0\">==</span>compid<span class=\"br0\">)</span><br/>\t\t\t\tcompscore<span class=\"sy0\">++;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Score: Player-\"</span><span class=\"sy0\">+</span>playerscore<span class=\"sy0\">+</span><span class=\"st0\">\" AI-\"</span><span class=\"sy0\">+</span>compscore<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Another?(y/n):\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tchoice<span class=\"sy0\">=</span>br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>choice<span class=\"sy0\">!=</span><span class=\"st0\">'n'</span><span class=\"sy0\">||</span>choice<span class=\"sy0\">==</span><span class=\"st0\">'N'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Game over.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> put<span class=\"br0\">(</span><span class=\"kw4\">int</span> cell,<span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> i<span class=\"sy0\">=-</span><span class=\"nu0\">1</span>,j<span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;;</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>cell<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">6</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">7</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">8</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">9</span><span class=\"sy0\">:</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span>display<span class=\"br0\">(</span>overridegrid<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw4\">char</span> mark<span class=\"sy0\">=</span><span class=\"st0\">'x'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>player<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\tmark<span class=\"sy0\">=</span><span class=\"st0\">'o'</span><span class=\"sy0\">;</span><br/>\t\tgrid<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>mark<span class=\"sy0\">;</span><br/>\t\tdisplay<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> startGame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tinit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tdisplay<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> status<span class=\"sy0\">=</span>playingid<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>status<span class=\"sy0\">==</span>playingid<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tput<span class=\"br0\">(</span>playerMove<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>override<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"O wins.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span> playerid<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tstatus<span class=\"sy0\">=</span>checkForWin<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>status<span class=\"sy0\">!=</span>playingid<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span><span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span><span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>e.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t\t\tput<span class=\"br0\">(</span>compMove<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tstatus<span class=\"sy0\">=</span>checkForWin<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> status<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> init<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tmovesPlayer<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\toverride<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\tmarks<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\twins<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span>\t<span class=\"co1\">//new int[8][3];</span><br/>\t\t<span class=\"br0\">{</span>\t<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">7</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">8</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">2</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">9</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">7</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span>,<br/>\t\t\t\t<span class=\"br0\">{</span><span class=\"nu0\">9</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\tweights<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\tgrid<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">' '</span>,<span class=\"st0\">' '</span>,<span class=\"st0\">' '</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"st0\">' '</span>,<span class=\"st0\">' '</span>,<span class=\"st0\">' '</span><span class=\"br0\">}</span>,<span class=\"br0\">{</span><span class=\"st0\">' '</span>,<span class=\"st0\">' '</span>,<span class=\"st0\">' '</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\tcrossbank<span class=\"sy0\">=</span><span class=\"kw1\">new</span> Hashtable<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>,Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tknotbank<span class=\"sy0\">=</span><span class=\"kw1\">new</span> Hashtable<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>,Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> mark<span class=\"br0\">(</span><span class=\"kw4\">int</span> m,<span class=\"kw4\">int</span> player<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>wins.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span>m<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tmarks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>player<span class=\"sy0\">==</span>playerid<span class=\"br0\">)</span><br/>\t\t\t\t\t\tmarks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>knotcount<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\tmarks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>crosscount<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t\t\t\tmarks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>totalcount<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> fixWeights<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>weights<span class=\"br0\">[</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">!=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\tweights<span class=\"br0\">[</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>totalcount<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>crosscount<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> p<span class=\"sy0\">=</span>i,q<span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tq<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tq<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tq<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>weights<span class=\"br0\">[</span>wins<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">!=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tweights<span class=\"br0\">[</span>wins<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>knotcount<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> p<span class=\"sy0\">=</span>i,q<span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tq<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tq<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>marks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tq<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>weights<span class=\"br0\">[</span>wins<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">!=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tweights<span class=\"br0\">[</span>wins<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> compMove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> cell<span class=\"sy0\">=</span>move<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Computer plays: \"</span><span class=\"sy0\">+</span>cell<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">//weights[cell-1]=Integer.MIN_VALUE;</span><br/>\t\t<span class=\"kw1\">return</span> cell<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> move<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> max<span class=\"sy0\">=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> cell<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>weights.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>weights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>max<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tmax<span class=\"sy0\">=</span>weights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tcell<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//This section ensures the computer never loses</span><br/>\t\t<span class=\"co1\">//Remove it for a fair match</span><br/>\t\t<span class=\"co1\">//Dirty kluge</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"76\"</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"67\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tcell<span class=\"sy0\">=</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"92\"</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"29\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tcell<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"18\"</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"81\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tcell<span class=\"sy0\">=</span><span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"73\"</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"37\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tcell<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"19\"</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>movesPlayer.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"91\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tcell<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tmark<span class=\"br0\">(</span>cell,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tfixWeights<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcrossbank.<span class=\"me1\">put</span><span class=\"br0\">(</span>cell, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> cell<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> playerMove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"What's your move?: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> br<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> cell<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> okay<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>okay<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">try</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tcell<span class=\"sy0\">=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>cell<span class=\"sy0\">==</span><span class=\"nu0\">7494</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\toverride<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>cell<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy0\">||</span>cell<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>weights<span class=\"br0\">[</span>cell<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid move. Try again:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tokay<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tplayerMoved<span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> cell<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> playerMoved<span class=\"br0\">(</span><span class=\"kw4\">int</span> cell<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tmovesPlayer<span class=\"sy0\">+=</span>cell<span class=\"sy0\">;</span><br/>\t\tmark<span class=\"br0\">(</span>cell,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tfixWeights<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tknotbank.<span class=\"me1\">put</span><span class=\"br0\">(</span>cell, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> checkForWin<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> crossflag<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,knotflag<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>wins.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>crossbank.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>crossbank.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>crossbank.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tcrossflag<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>knotbank.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>knotbank.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>knotbank.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>wins<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tknotflag<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>knotflag<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tdisplay<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"O wins.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> playerid<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>crossflag<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tdisplay<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"X wins.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> compid<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>weights.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>weights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> playingid<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Truce\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> truceid<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>-------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>-------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 438, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"sy0\">&lt;!</span>DOCTYPE html<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>meta charset<span class=\"sy0\">=</span><span class=\"st0\">\"utf-8\"</span> <span class=\"sy0\">/&gt;</span><br/>    <span class=\"sy0\">&lt;</span>title<span class=\"sy0\">&gt;</span>TicTacToe<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>head<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>canvas id<span class=\"sy0\">=</span><span class=\"st0\">\"canvas\"</span> width<span class=\"sy0\">=</span><span class=\"st0\">\"400\"</span> height<span class=\"sy0\">=</span><span class=\"st0\">\"400\"</span><span class=\"sy0\">&gt;&lt;/</span>canvas<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>    <span class=\"sy0\">&lt;</span>script<span class=\"sy0\">&gt;</span><br/>        <span class=\"co1\">//All helper functions</span><br/>        isBetween <span class=\"sy0\">=</span> <span class=\"br0\">(</span>num<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> num <span class=\"sy0\">&gt;=</span> a <span class=\"sy0\">&amp;&amp;</span> num <span class=\"sy0\">&lt;=</span> b<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        randInt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>low<span class=\"sy0\">,</span> high<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>high <span class=\"sy0\">-</span> low <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> low<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        choice <span class=\"sy0\">=</span> arr <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> arr<span class=\"br0\">[</span>randInt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> arr.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Checks if every value in an array equals an item</span><br/>        equals <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> item<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> arr.<span class=\"me1\">filter</span><span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> a <span class=\"sy0\">===</span> item<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> arr.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Returns number of items in array that equal an item</span><br/>        equallen <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> item<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> arr.<span class=\"me1\">filter</span><span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> a <span class=\"sy0\">===</span> item<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Checks if any value in the array equals an item</span><br/>        equalanyof <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> item<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> equallen<span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> item<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Should be scalable, but it uses default elements for calculations and tracking</span><br/>        let canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">\"canvas\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        let ctx <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">\"2d\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> width <span class=\"sy0\">=</span> canvas.<span class=\"me1\">width</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> blockSize <span class=\"sy0\">=</span> canvas.<span class=\"me1\">width</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> lineSize <span class=\"sy0\">=</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Draws background</span><br/>        ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(225, 225, 225)\"</span><span class=\"sy0\">;</span><br/>        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Title page</span><br/>        ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(0, 0, 0)\"</span><span class=\"sy0\">;</span><br/>        ctx.<span class=\"me1\">font</span> <span class=\"sy0\">=</span> width <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">250</span> <span class=\"sy0\">/</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"px Arial\"</span><span class=\"sy0\">;</span> <span class=\"co1\">//34</span><br/>        ctx.<span class=\"me1\">textAlign</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"center\"</span><span class=\"sy0\">;</span><br/>        ctx.<span class=\"me1\">fillText</span><span class=\"br0\">(</span><span class=\"st0\">\"Tic Tac Toe\"</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//200, 150</span><br/>\u00a0<br/>        <span class=\"co1\">//Button for starting</span><br/>        ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(200, 200, 200)\"</span><span class=\"sy0\">;</span><br/>        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>width <span class=\"sy0\">/</span> <span class=\"nu0\">3.2</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//125, 200, 150, 50</span><br/>        ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(0, 0, 0)\"</span><span class=\"sy0\">;</span><br/>        ctx.<span class=\"me1\">font</span> <span class=\"sy0\">=</span> width <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">200</span> <span class=\"sy0\">/</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"px Arial\"</span><span class=\"sy0\">;</span> <span class=\"co1\">//18</span><br/>        ctx.<span class=\"me1\">fillText</span><span class=\"br0\">(</span><span class=\"st0\">\"Start\"</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">40</span> <span class=\"sy0\">/</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//200, 230</span><br/>\u00a0<br/>        <span class=\"co1\">//Uses an array so a forEach loop can scan it for the correct tile</span><br/>        let tileArray <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//Contains all tiles</span><br/>        let available <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//Contains only available tiles</span><br/>\u00a0<br/>        <span class=\"kw5\">class</span> Tile <span class=\"br0\">{</span><br/>            constructor<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> blockSize<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> blockSize<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">this</span>.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"none\"</span><span class=\"sy0\">;</span><br/>                tileArray.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                available.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            draw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                ctx.<span class=\"me1\">strokeStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(175, 175, 175)\"</span><span class=\"sy0\">;</span><br/>                ctx.<span class=\"me1\">lineWidth</span> <span class=\"sy0\">=</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">state</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    ctx.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">state</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    ctx.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">arc</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> blockSize <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ctx.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">//Removes this from the available array</span><br/>                <span class=\"kw1\">const</span> ind <span class=\"sy0\">=</span> available.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                available <span class=\"sy0\">=</span> available.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> ind<span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>available.<span class=\"me1\">slice</span><span class=\"br0\">(</span>ind <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> available.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"co1\">//Defines the game</span><br/>        let game <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            state<span class=\"sy0\">:</span> <span class=\"st0\">\"start\"</span><span class=\"sy0\">,</span><br/>            turn<span class=\"sy0\">:</span> <span class=\"st0\">\"Player\"</span><span class=\"sy0\">,</span><br/>            player<span class=\"sy0\">:</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span><br/>            opp<span class=\"sy0\">:</span> <span class=\"st0\">\"O\"</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Generates tiles</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">new</span> Tile<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Gets the mouse position</span><br/>        getMousePos <span class=\"sy0\">=</span> evt <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            let rect <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getBoundingClientRect</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                x<span class=\"sy0\">:</span> evt.<span class=\"me1\">clientX</span> <span class=\"sy0\">-</span> rect.<span class=\"me1\">left</span><span class=\"sy0\">,</span><br/>                y<span class=\"sy0\">:</span> evt.<span class=\"me1\">clientY</span> <span class=\"sy0\">-</span> rect.<span class=\"me1\">top</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Checks for win conditions</span><br/>        checkCondition <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">//Local variables are created to make access easier</span><br/>            let as <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let bs <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let cs <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let ds <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let es <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let fs <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let gs <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let hs <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>            let is <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">//Equals function checks if each value in the array has a state of X or O</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equals<span class=\"br0\">(</span><span class=\"br0\">[</span>as<span class=\"sy0\">,</span> bs<span class=\"sy0\">,</span> cs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>ds<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> fs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>gs<span class=\"sy0\">,</span> hs<span class=\"sy0\">,</span> is<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                equals<span class=\"br0\">(</span><span class=\"br0\">[</span>as<span class=\"sy0\">,</span> ds<span class=\"sy0\">,</span> gs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>bs<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> hs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>cs<span class=\"sy0\">,</span> fs<span class=\"sy0\">,</span> is<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                equals<span class=\"br0\">(</span><span class=\"br0\">[</span>as<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> is<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>cs<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> gs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                alert<span class=\"br0\">(</span><span class=\"st0\">\"Player wins!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                game.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"over\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equals<span class=\"br0\">(</span><span class=\"br0\">[</span>as<span class=\"sy0\">,</span> bs<span class=\"sy0\">,</span> cs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>ds<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> fs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>gs<span class=\"sy0\">,</span> hs<span class=\"sy0\">,</span> is<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                equals<span class=\"br0\">(</span><span class=\"br0\">[</span>as<span class=\"sy0\">,</span> ds<span class=\"sy0\">,</span> gs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>bs<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> hs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>cs<span class=\"sy0\">,</span> fs<span class=\"sy0\">,</span> is<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                equals<span class=\"br0\">(</span><span class=\"br0\">[</span>as<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> is<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> equals<span class=\"br0\">(</span><span class=\"br0\">[</span>cs<span class=\"sy0\">,</span> es<span class=\"sy0\">,</span> gs<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                alert<span class=\"br0\">(</span><span class=\"st0\">\"Opponent wins!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                game.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"over\"</span><span class=\"sy0\">;</span><br/>                <span class=\"co1\">//It is a tie if none of the above conditions are fulfilled and there are no available tiles</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>available.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                alert<span class=\"br0\">(</span><span class=\"st0\">\"It's a tie!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                game.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"over\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Controls the opponent. Uses many nested switches/if-else for efficiency</span><br/>        oppTurn <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">state</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"game\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                let tile <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co1\">//Similar local variables as the win checker</span><br/>                let at <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let bt <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let ct <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let dt <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let et <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let ft <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let gt <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let ht <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let it <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">state</span><span class=\"sy0\">;</span><br/>                let all <span class=\"sy0\">=</span> <span class=\"br0\">[</span>at<span class=\"sy0\">,</span> bt<span class=\"sy0\">,</span> ct<span class=\"sy0\">,</span> dt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> gt<span class=\"sy0\">,</span> ht<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"coMULTI\">/*The AI will automatically win if possible<br/>                I considered using a filter based system, but it was ugly and<br/>                inelegant, and also redundant<br/>                I used a nested if-else instead<br/>                Equallen checks how many values in the array equal the given value*/</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span>all<span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> bt<span class=\"sy0\">,</span> ct<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> bt<span class=\"sy0\">,</span> ct<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>dt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ft<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>dt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ft<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ft <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>gt<span class=\"sy0\">,</span> ht<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>gt<span class=\"sy0\">,</span> ht<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ht <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> dt<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> dt<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>bt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ht<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>bt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ht<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ht <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ft <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">//Stops player from winning if possible</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span>all<span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> tile <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> bt<span class=\"sy0\">,</span> ct<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> bt<span class=\"sy0\">,</span> ct<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>dt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ft<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>dt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ft<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ft <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>gt<span class=\"sy0\">,</span> ht<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>gt<span class=\"sy0\">,</span> ht<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ht <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> dt<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> dt<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>bt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ht<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>bt<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> ht<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ht <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ft <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> equallen<span class=\"br0\">(</span><span class=\"br0\">[</span>ct<span class=\"sy0\">,</span> et<span class=\"sy0\">,</span> gt<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">//Other options in case the above are not fulfilled</span><br/>                <span class=\"co1\">//Controls the course of play over the game</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tile <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span> <span class=\"sy0\">-</span> available.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                            <span class=\"co1\">//If the center is taken, it plays randomly in the corner</span><br/>                            <span class=\"co1\">//Otherwise, it takes the center</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span>choice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                                tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>et <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>equalanyof<span class=\"br0\">(</span><span class=\"br0\">[</span>at<span class=\"sy0\">,</span> ct<span class=\"sy0\">,</span> gt<span class=\"sy0\">,</span> it<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                <span class=\"coMULTI\">/*To counter the strategy of<br/>                                    O - -<br/>                                    - X -<br/>                                    X - -<br/>\u00a0<br/>                                    O - -<br/>                                    - X -<br/>                                    - - X<br/>                                and related strategies*/</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span>choice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span><br/>                                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span>choice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span><br/>                                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gt <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ct <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span>choice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span><br/>                                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>it <span class=\"sy0\">===</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>at <span class=\"sy0\">===</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                                        tile <span class=\"sy0\">=</span> tileArray<span class=\"br0\">[</span>choice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                                    <span class=\"br0\">}</span><br/>                                <span class=\"br0\">}</span><br/>                            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                                tile <span class=\"sy0\">=</span> choice<span class=\"br0\">(</span>tileArray<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">//Generates a random number if it could cause an error</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tile.<span class=\"me1\">state</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"none\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    tile <span class=\"sy0\">=</span> choice<span class=\"br0\">(</span>available<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">//Draws the selection</span><br/>                tile.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> game.<span class=\"me1\">opp</span><span class=\"sy0\">;</span><br/>                tile.<span class=\"me1\">draw</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                checkCondition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                game.<span class=\"me1\">turn</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Player\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Click handler</span><br/>        document.<span class=\"me1\">onclick</span> <span class=\"sy0\">=</span> event <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            let pos <span class=\"sy0\">=</span> getMousePos<span class=\"br0\">(</span>event<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>game.<span class=\"me1\">state</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">\"start\"</span><span class=\"sy0\">:</span><br/>                    <span class=\"co1\">//Checks if the button was clicked</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isBetween<span class=\"br0\">(</span>pos.<span class=\"me1\">x</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">3.2</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">16</span> <span class=\"sy0\">/</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isBetween<span class=\"br0\">(</span>pos.<span class=\"me1\">y</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> width <span class=\"sy0\">/</span> <span class=\"nu0\">1.6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        game.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"game\"</span><br/>\u00a0<br/>                        <span class=\"co1\">//Draws the setup for the game</span><br/>                        ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(225, 225, 225)\"</span><span class=\"sy0\">;</span><br/>                        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <span class=\"co1\">//Draws the lines</span><br/>                        ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rgb(200, 200, 200)\"</span><span class=\"sy0\">;</span><br/>                        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>blockSize <span class=\"sy0\">-</span> lineSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> lineSize<span class=\"sy0\">,</span> width<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>blockSize <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> lineSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> lineSize<span class=\"sy0\">,</span> width<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> blockSize <span class=\"sy0\">-</span> lineSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> width<span class=\"sy0\">,</span> lineSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> blockSize <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> lineSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> width<span class=\"sy0\">,</span> lineSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">case</span> <span class=\"st0\">\"game\"</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">turn</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"Player\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"co1\">//Goes through the tile array, checking if the click occurred there</span><br/>                        tileArray.<span class=\"me1\">forEach</span><span class=\"br0\">(</span>tile <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isBetween<span class=\"br0\">(</span>pos.<span class=\"me1\">x</span><span class=\"sy0\">,</span> tile.<span class=\"me1\">x</span><span class=\"sy0\">,</span> tile.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> blockSize<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isBetween<span class=\"br0\">(</span>pos.<span class=\"me1\">y</span><span class=\"sy0\">,</span> tile.<span class=\"me1\">y</span><span class=\"sy0\">,</span> tile.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> blockSize<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>available.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>tile<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                    tile.<span class=\"me1\">state</span> <span class=\"sy0\">=</span> game.<span class=\"me1\">player</span><span class=\"sy0\">;</span><br/>                                    tile.<span class=\"me1\">draw</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                    checkCondition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                    game.<span class=\"me1\">turn</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Opponent\"</span><span class=\"sy0\">;</span><br/>                                    oppTurn<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                <span class=\"br0\">}</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>body<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>html<span class=\"sy0\">&gt;</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 107, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>  <span class=\"co1\">// board -&gt; 0: blank; -1: computer; 1: human</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bestI <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bestJ <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun checkWinner<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun showBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> <span class=\"st0\">\"X O\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"${t[b[i][j] + 1]} \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"-----\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun testMove<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> Int, depth<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> best <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> changed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> score <span class=\"sy0\">=</span> checkWinner<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>score <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>score <span class=\"sy0\">==</span> value<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<br/>            b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>            changed <span class=\"sy0\">=</span> value<br/>            score <span class=\"sy0\">=</span> -testMove<span class=\"br0\">(</span>-value, depth + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>score <span class=\"sy0\">&lt;=</span> best<span class=\"br0\">)</span> continue<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>depth <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                bestI <span class=\"sy0\">=</span> i<br/>                bestJ <span class=\"sy0\">=</span> j<br/>            <span class=\"br0\">}</span><br/>            best <span class=\"sy0\">=</span> score<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>changed <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> best <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun game<span class=\"br0\">(</span>user<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> u <span class=\"sy0\">=</span> user<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Board postions are numbered so:<span class=\"es1\">\\n</span>1 2 3<span class=\"es1\">\\n</span>4 5 6<span class=\"es1\">\\n</span>7 8 9<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"You have O, I have X.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> move<span class=\"sy0\">:</span> Int<span class=\"sy0\">?</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>                print<span class=\"br0\">(</span><span class=\"st0\">\"Your move: \"</span><span class=\"br0\">)</span><br/>                move <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toIntOrNull</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>move <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> move <span class=\"sy0\">!</span>in <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>            move <span class=\"sy0\">=</span> move<span class=\"sy0\">!!</span> - <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> move / <span class=\"nu0\">3</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> j <span class=\"sy0\">=</span> move <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<br/>            b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            break<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>u<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// randomize if computer opens, less boring</span><br/>                bestI <span class=\"sy0\">=</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>Int.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>                bestJ <span class=\"sy0\">=</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>Int.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> testMove<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            b<span class=\"br0\">[</span>bestI<span class=\"br0\">]</span><span class=\"br0\">[</span>bestJ<span class=\"br0\">]</span> <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> myMove <span class=\"sy0\">=</span> bestI <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> + bestJ + <span class=\"nu0\">1</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"My move: $myMove\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        showBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> win <span class=\"sy0\">=</span> checkWinner<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>win <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>win <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"You win\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"I win\"</span><span class=\"br0\">)</span> + <span class=\"st0\">\".<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><br/>        u <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>u<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"A draw.<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> user <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        user <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>user<br/>        print<span class=\"br0\">(</span>game<span class=\"br0\">(</span>user<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> yn<span class=\"sy0\">:</span> String<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"Play again y/n: \"</span><span class=\"br0\">)</span><br/>            yn <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>yn <span class=\"sy0\">!=</span> <span class=\"st0\">\"y\"</span> <span class=\"sy0\">&amp;&amp;</span> yn <span class=\"sy0\">!=</span> <span class=\"st0\">\"n\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>yn <span class=\"sy0\">!=</span> <span class=\"st0\">\"y\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 95, "block": "<pre class=\"text highlighted_source\">[<br/>session_start('user')<br/>session_addvar('user', 'matrix')<br/>session_addvar('user', 'winrecord')<br/>session_addvar('user', 'turn')<br/>var(matrix)-&gt;isNotA(::array)\u00a0? var(matrix = array('-','-','-','-','-','-','-','-','-'))<br/>var(winrecord)-&gt;isNotA(::array)\u00a0? var(winrecord = array)<br/>var(turn)-&gt;isNotA(::string)\u00a0? var(turn = 'x')<br/>\u00a0<br/>if(web_request-&gt;params-&gt;asStaticArray &gt;&gt; 'reset') =&gt; {<br/>\t$matrix = array('-','-','-','-','-','-','-','-','-')<br/>\t$turn = 'x'<br/>}<br/>\u00a0<br/>with i in web_request-&gt;params-&gt;asStaticArray do =&gt; {<br/>\tif(#i-&gt;name-&gt;beginswith('p')) =&gt; {<br/>\t\tlocal(num = #i-&gt;name-&gt;asCopy)<br/>\t\t#num-&gt;removeLeading('p')<br/>\t\t#num = integer(#num)<br/>\t\t#num &gt; 0 &amp;&amp; $matrix-&gt;get(#num) == '-'\u00a0? $matrix-&gt;get(#num) = #i-&gt;value<br/>\t\t$turn == 'o'\u00a0? $turn = 'x' | $turn = 'o'<br/>\t}<br/>}<br/>\u00a0<br/>local(<br/>\tistie \t= false,<br/>\twinner\t= 'noone',<br/>\tclear\t= false<br/>)<br/>\u00a0<br/>// determine if we have a winner<br/>if($matrix-&gt;find('-')-&gt;size &lt; 9) =&gt; {<br/>\tlocal(winners = array('123','456','789','147','258','369','159','357'))<br/>\tloop(8) =&gt; {<br/>\t\tlocal(xscore = 0,oscore = 0,use = #winners-&gt;get(loop_count))<br/>\t\twith v in #use-&gt;values do =&gt; {<br/>\t\t\t$matrix-&gt;findposition('x') &gt;&gt; integer(#v)\u00a0? #xscore++<br/>\t\t\t$matrix-&gt;findposition('o') &gt;&gt; integer(#v)\u00a0? #oscore++<br/>\t\t}<br/>\t\tif(#xscore == 3) =&gt; {<br/>\t\t\t#winner = 'x'<br/>\t\t\t$winrecord-&gt;insert('x')<br/>\t\t\t#clear = true<br/>\t\t\tloop_abort<br/>\t\t}<br/>\t\tif(#oscore == 3) =&gt; {<br/>\t\t\t#winner = 'o'<br/>\t\t\t$winrecord-&gt;insert('o')<br/>\t\t\t#clear = true<br/>\t\t\tloop_abort<br/>\t\t}<br/>\u00a0<br/>\t}<br/>\u00a0<br/>}<br/>// determine if tie<br/>if(not $matrix-&gt;find('-')-&gt;size &amp;&amp; #winner == 'noone') =&gt; {<br/>\t#istie = true<br/>\t#winner = 'tie'<br/>\t$winrecord-&gt;insert('tie')<br/>\t#clear = true<br/>}<br/>]<br/>&lt;form action=\"?\" method=\"post\"&gt;<br/>  &lt;table&gt;<br/>    &lt;tr&gt;<br/>      [loop(3) =&gt; {^]&lt;td&gt;&lt;button name=\"p[loop_count]\" value=\"[$turn]\"[<br/>        $matrix-&gt;get(loop_count)\u00a0!= '-' || #winner\u00a0!= 'noone'\u00a0? ' disabled=\"disabled\"'<br/>      ]&gt;[$matrix-&gt;get(loop_count)\u00a0!= '-'\u00a0? $matrix-&gt;get(loop_count) | ' ']&lt;/button&gt;&lt;/td&gt;[^}]<br/>    &lt;/tr&gt;<br/>    &lt;tr&gt;<br/>      [loop(-from=4,-to=6) =&gt; {^]&lt;td&gt;&lt;button name=\"p[loop_count]\" value=\"[$turn]\"[<br/>        $matrix-&gt;get(loop_count)\u00a0!= '-' || #winner\u00a0!= 'noone'\u00a0? ' disabled=\"disabled\"'<br/>      ]&gt;[$matrix-&gt;get(loop_count)\u00a0!= '-'\u00a0? $matrix-&gt;get(loop_count) | ' ']&lt;/button&gt;&lt;/td&gt;[^}]<br/>    &lt;/tr&gt;<br/>    &lt;tr&gt;<br/>      [loop(-from=7,-to=9) =&gt; {^]&lt;td&gt;&lt;button name=\"p[loop_count]\" value=\"[$turn]\"[<br/>        $matrix-&gt;get(loop_count)\u00a0!= '-' || #winner\u00a0!= 'noone'\u00a0? ' disabled=\"disabled\"'<br/>      ]&gt;[$matrix-&gt;get(loop_count)\u00a0!= '-'\u00a0? $matrix-&gt;get(loop_count) | ' ']&lt;/button&gt;&lt;/td&gt;[^}]<br/>    &lt;/tr&gt;<br/>  &lt;/table&gt;<br/>&lt;/form&gt;<br/>[if(#istie &amp;&amp; #winner == 'tie')]<br/>&lt;p&gt;&lt;b&gt;It's a tie!&lt;/b&gt;&lt;/p&gt;<br/>[else(#winner\u00a0!= 'noone')]<br/>&lt;p&gt;[#winner-&gt;uppercase&amp;] won! Congratulations.&lt;/p&gt;<br/>[else]&lt;math&gt;Insert formula here&lt;/math&gt;<br/>&lt;p&gt;It is now [$turn]'s turn!&lt;/p&gt;<br/>[/if]<br/>&lt;p&gt;&lt;a href=\"?reset\"&gt;Reset&lt;/a&gt;&lt;/p&gt;<br/>[if($winrecord-&gt;size)]&lt;p&gt;Win record: [$winrecord-&gt;join(', ')]&lt;/p&gt;[/if]<br/>[if(#clear == true) =&gt; {<br/>\t$matrix = array('-','-','-','-','-','-','-','-','-')<br/>\t$turn = 'x'<br/>}]</pre>"}, {"lang": "Lingo", "loc": 237, "block": "<pre class=\"text highlighted_source\">global $ -- object representing simple framework<br/>global gBoard -- current board image<br/>global gBoardTemplate -- empty board image<br/>global gHumanChip -- cross image<br/>global gComputerChip -- circle image<br/>global gM -- 3x3 matrix storing game state: 0=free cell, 1=human cell, -1=computer cell<br/>global gStep -- index of current move (1..9)<br/>global gGameOverFlag -- TRUE if current game is over<br/>\u00a0<br/>----------------------------------------<br/>-- Entry point<br/>----------------------------------------<br/>on startMovie<br/>\u00a0<br/>    -- libs<br/>    $.import(\"sprite\")<br/>\u00a0<br/>    -- window properties<br/>    _movie.stage.title = \"Tic-Tac-Toe\"<br/>    _movie.stage.rect = rect(0, 0, 224, 310)<br/>    _movie.centerStage = TRUE<br/>\u00a0<br/>    -- load images from filesystem<br/>    m = new(#bitmap)<br/>    m.importFileInto(<a class=\"__cf_email__\" data-cfemail=\"fbdfd5bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(\"resources/cross.bmp\"), [#trimWhiteSpace:FALSE])<br/>    gHumanChip = m.image<br/>\u00a0<br/>    m = new(#bitmap)<br/>    m.importFileInto(<a class=\"__cf_email__\" data-cfemail=\"fdd9d3bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(\"resources/circle.bmp\"), [#trimWhiteSpace:FALSE])<br/>    gComputerChip = m.image<br/>\u00a0<br/>    -- create GUI<br/>    m = new(#bitmap)<br/>    m.importFileInto(<a class=\"__cf_email__\" data-cfemail=\"94b0bad4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(\"resources/board.bmp\"))<br/>    m.regpoint = point(0, 0)<br/>    s = $.sprite.make(m, [#loc:point(20, 20)], TRUE)<br/>    s.addListener(#mouseDown, _movie, #humanMove)<br/>\u00a0<br/>    gBoard = m.image<br/>    gBoardTemplate = gBoard.duplicate()<br/>\u00a0<br/>    m = $.sprite.newMember(#button, [#text:\"New Game (Human starts)\", #fontstyle:\"bold\", #rect:rect(0, 0, 180, 0)])<br/>    s = $.sprite.make(m, [#loc:point(20, 220)], TRUE)<br/>    s.addListener(#mouseDown, _movie, #newGame, 1)<br/>\u00a0<br/>    m = $.sprite.newMember(#button, [#text:\"New Game (Computer starts)\", #fontstyle:\"bold\", #rect:rect(0, 0, 180, 0)])<br/>    s = $.sprite.make(m, [#loc:point(20, 250)], TRUE)<br/>    s.addListener(#mouseDown, _movie, #newGame, -1)<br/>\u00a0<br/>    m = $.sprite.newMember(#field, [#name:\"feedback\", #editable:FALSE, #fontstyle:\"bold\", #alignment:\"center\",\\<br/>        #border:0, #color:rgb(255, 0, 0), #rect:rect(0, 0, 180, 0)])<br/>    s = $.sprite.make(m, [#loc:point(20, 280)], TRUE)<br/>\u00a0<br/>    newGame(1)<br/>\u00a0<br/>    -- show the application window<br/>    _movie.updateStage()<br/>    _movie.stage.visible = TRUE<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Starts a new game<br/>----------------------------------------<br/>on newGame (whoStarts)<br/>    -- reset board<br/>    gBoard.copyPixels(gBoardTemplate, gBoardTemplate.rect, gBoardTemplate.rect)<br/>    -- clear feedback<br/>    member(\"feedback\").text = \"\"<br/>    -- reset states<br/>    gM = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]<br/>    gStep = 0<br/>    gGameOverFlag = FALSE<br/>    if whoStarts=-1 then computerMove()<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Handles a human move (mouse click)<br/>----------------------------------------<br/>on humanMove ()<br/>    if gGameOverFlag then return<br/>    -- find cell for mouse position<br/>    p = _mouse.clickLoc - sprite(1).loc<br/>    if p.locH mod 60&lt;4 or p.locV mod 60&lt;4 then return<br/>    p = p / 60<br/>    x = p[1] + 1<br/>    y = p[2] + 1<br/>    if gM[x][y] then return -- ignore illegal moves<br/>    gM[x][y] = 1<br/>    -- update cell image<br/>    p = p * 60<br/>    gBoard.copyPixels(gHumanChip, gHumanChip.rect.offset(4+p[1], 4+p[2]), gHumanChip.rect)<br/>    -- proceed (unless game over)<br/>    gStep = gStep + 1<br/>    if not checkHumanMove(x, y) then computerMove()<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Checks if human has won or game ended with draw<br/>----------------------------------------<br/>on checkHumanMove (x, y)<br/>    if sum([gM[x][1], gM[x][2], gM[x][3]])=3 then return gameOver(1, [[x, 1], [x, 2], [x, 3]])<br/>    if sum([gM[1][y], gM[2][y], gM[3][y]])=3 then return gameOver(1, [[1, y], [2, y], [3, y]])<br/>    if x=y and sum([gM[1][1], gM[2][2], gM[3][3]])=3 then return gameOver(1, [[1, 1], [2, 2], [3, 3]])<br/>    if x+y=4 and sum([gM[1][3], gM[2][2], gM[3][1]])=3 then return gameOver(1, [[1, 3], [2, 2], [3, 1]])<br/>    if gStep=9 then return gameOver(0)<br/>    return FALSE<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Checks if selecting specified empty cell makes computer or human win<br/>----------------------------------------<br/>on checkCellWins (x, y, who)<br/>    wins = who*2<br/>    if sum([gM[1][y], gM[2][y], gM[3][y]]) = wins then return [[1, y], [2, y], [3, y]]<br/>    if sum([gM[x][1], gM[x][2], gM[x][3]]) = wins then return [[x, 1], [x, 2], [x, 3]]<br/>    if x=y and sum([gM[1][1], gM[2][2], gM[3][3]]) = wins then return [[1, 1], [2, 2], [3, 3]]<br/>    if x+y=4 and sum([gM[1][3], gM[2][2], gM[3][1]]) = wins then return [[1, 3], [2, 2], [3, 1]]<br/>    return FALSE<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Handles game over<br/>----------------------------------------<br/>on gameOver (winner, cells)<br/>    gGameOverFlag = TRUE<br/>    if winner = 0 then<br/>        member(\"feedback\").text = \"It's a draw!\"<br/>    else<br/>        -- hilite winning line with yellow<br/>        img = image(56, 56, 32)<br/>        img.fill(img.rect, rgb(255, 255, 0))<br/>        repeat with c in cells<br/>            x = (c[1]-1)*60 + 4<br/>            y = (c[2]-1)*60 + 4<br/>            gBoard.copyPixels(img, img.rect.offset(x, y), img.rect, [#ink:#darkest])<br/>        end repeat<br/>        member(\"feedback\").text = [\"Human\", \"Computer\"][1+(winner=-1)] &amp; \" has won!\"<br/>    end if<br/>    return TRUE<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Calculates next computer move<br/>----------------------------------------<br/>on computerMove ()<br/>    gStep = gStep + 1<br/>\u00a0<br/>    -- move 1: select center<br/>    if gStep=1 then return doComputerMove(2, 2)<br/>\u00a0<br/>    -- move 2 (human started)<br/>    if gStep=2 then<br/>        if gM[2][2]=1 then<br/>            -- if center, select arbitrary corner<br/>            return doComputerMove(1, 1)<br/>        else<br/>            -- otherwise select center<br/>            return doComputerMove(2, 2)<br/>        end if<br/>    end if<br/>\u00a0<br/>    -- move 3 (computer started)<br/>    if gStep=3 then<br/>        -- if corner, select diagonally opposite corner<br/>        if gM[1][1]=1 then return doComputerMove(3, 3)<br/>        if gM[3][3]=1 then return doComputerMove(1, 1)<br/>        if gM[1][3]=1 then return doComputerMove(3, 1)<br/>        return doComputerMove(1, 1) -- top left corner as default<br/>    end if<br/>\u00a0<br/>    -- get free cells<br/>    free = []<br/>    repeat with x = 1 to 3<br/>        repeat with y = 1 to 3<br/>            if gM[x][y]=0 then free.add([x, y])<br/>        end repeat<br/>    end repeat<br/>\u00a0<br/>    -- check if computer can win now<br/>    repeat with c in free<br/>        res = checkCellWins(c[1], c[2], -1)<br/>        if res&lt;&gt;FALSE then<br/>            doComputerMove(c[1], c[2])<br/>            return gameOver(-1, res)<br/>        end if<br/>    end repeat<br/>\u00a0<br/>    -- check if human could win with next move (if yes, prevent it)<br/>    repeat with c in free<br/>        res = checkCellWins(c[1], c[2], 1)<br/>        if res&lt;&gt;FALSE then return doComputerMove(c[1], c[2], TRUE)<br/>    end repeat<br/>\u00a0<br/>    -- move 4 (human started): prevent \"double mills\"<br/>    if gStep=4 then<br/>        if gM[2][2]=1 and (gM[1][1]=1 or gM[3][3]=1) then return doComputerMove(3, 1)<br/>        if gM[2][2]=1 and (gM[1][3]=1 or gM[3][1]=1) then return doComputerMove(1, 1)<br/>        if gM[2][3]+gM[3][2]=2 then return doComputerMove(3, 3)<br/>        if gM[1][2]+gM[2][3]=2 then return doComputerMove(1, 3)<br/>        if gM[1][2]+gM[2][1]=2 then return doComputerMove(1, 1)<br/>        if gM[2][1]+gM[3][2]=2 then return doComputerMove(3, 1)<br/>        if (gM[1][3]+gM[3][1]=2) or (gM[1][1]+gM[3][3]=2) then return doComputerMove(2, 1)<br/>    end if<br/>\u00a0<br/>    -- move 5 (computer started): try to create a \"double mill\"<br/>    if gStep=5 then<br/>        repeat with x = 1 to 3<br/>            col = [gM[x][1], gM[x][2], gM[x][3]]<br/>            if not (sum(col)=-1 and max(col)=0) then next repeat<br/>            repeat with y = 1 to 3<br/>                row = [gM[1][y], gM[2][y], gM[3][y]]<br/>                if not (sum(row)=-1 and max(row)=0 and gM[x][y]=0) then next repeat<br/>                return doComputerMove(x, y)<br/>            end repeat<br/>        end repeat<br/>    end if<br/>\u00a0<br/>    -- otherwise use first free cell<br/>    c = free[1]<br/>    doComputerMove(c[1], c[2])<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Updates state matrix and cell image<br/>----------------------------------------<br/>on doComputerMove (x, y, checkDraw)<br/>    gM[x][y] = -1<br/>    gBoard.copyPixels(gComputerChip, gComputerChip.rect.offset(4+(x-1)*60, 4+(y-1)*60), gComputerChip.rect)<br/>    if checkDraw and gStep=9 then gameOver(0)<br/>end<br/>\u00a0<br/>----------------------------------------<br/>--<br/>----------------------------------------<br/>on sum (aLine)<br/>    return aLine[1]+aLine[2]+aLine[3]<br/>end</pre>"}, {"lang": "Mathematica", "loc": 36, "block": "<pre class=\"text highlighted_source\">DynamicModule[{board = ConstantArray[0, {3, 3}], text = \"Playing...\", <br/>  first, rows = <br/>   Join[#, <a class=\"__cf_email__\" data-cfemail=\"95c1e7f4fbe6e5fae6f0d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, {<a class=\"__cf_email__\" data-cfemail=\"6d29040c0a02030c012d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#, <a class=\"__cf_email__\" data-cfemail=\"41052820262e2f202d0113243724333224\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@#}] &amp;}, <br/> <a class=\"__cf_email__\" data-cfemail=\"a2e1cdced7cfcce2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{Graphics[{Thickness[.02], <br/>     Table[With[{i = i, j = j}, <br/>       Button[{White, Rectangle[{i, j} - 1, {i, j}], Black, <br/>         Dynamic[Switch[board[[i, j]], 0, Black, 1, <br/>           Circle[{i, j} - .5, .3], -1, <br/>           Line[{{{i, j} - .2, {i, j} - .8}, {{i - .2, <br/>               j - .8}, {i - .8, j - .2}}}]]]}, <br/>        Which[text\u00a0!= \"Playing...\", board = ConstantArray[0, {3, 3}];<br/>         text = \"Playing...\", board[[i, j]] == 0, <br/>         If[board == ConstantArray[0, {3, 3}], <br/>          first = {i, <br/>             j} /. {{2, 2} -&gt; 1, {1 | 3, 1 | 3} -&gt; 2, _ -&gt; 3}]; <br/>         board[[i, j]] = 1;<br/>         FinishDynamic[];<br/>         Which[MemberQ[rows[board], {1, 1, 1}], text = \"You win.\", <br/>          FreeQ[board, 0], text = \"Draw.\", True, <br/>          board[[Sequence @@ <br/>              SortBy[Select[Tuples[{<a class=\"__cf_email__\" data-cfemail=\"ecbe8d828b89acdf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"6f3d0e01080a2f5c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}], <br/>                 board[[Sequence @@ #]] == <br/>                   0 &amp;], -Total[<br/>                    Sort /@ <br/>                    rows[ReplacePart[<br/>                    board, # -&gt; -1]] /. {{-1, -1, -1} -&gt; <br/>                    512, {-1, 1, 1} -&gt; 64, {-1, -1, 0} -&gt; <br/>                    8, {0, 1, 1} -&gt; -1, {_, _, _} -&gt; 0}] - <br/>                  Switch[#, {2, 2}, 1, {1 | 3, 1 | 3}, <br/>                   If[first == 2, -1, 0], _, <br/>                   If[first == 2, 0, -1]] &amp;][[1]]]] = -1; <br/>          Which[MemberQ[rows[board], {-1, -1, -1}], <br/>           text = \"You lost.\", FreeQ[board, 0], <br/>           text = \"Draw.\"]]]]], {i, 1, 3}, {j, 1, 3}], Thickness[.01],<br/>      Line[{{{1, 0}, {1, 3}}, {{2, 0}, {2, 3}}, {{0, 1}, {3, 1}}, {{0,<br/>          2}, {3, 2}}}]}], <a class=\"__cf_email__\" data-cfemail=\"6a2e13040b0703092a1e0f121e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}]</pre>"}, {"lang": "MATLAB", "loc": 224, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> TicTacToe<br/>\u00a0<br/>    <span class=\"co1\">% Set up the board (one for each player)</span><br/>    boards = false<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;    <span class=\"co1\">% Players' pieces</span><br/>    rep = <span class=\"br0\">[</span><span class=\"co2\">'   1 | 4 | 7'</span>\u00a0; <span class=\"co2\">'   2 | 5 | 8'</span>\u00a0; <span class=\"co2\">'   3 | 6 | 9'</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Prompt user with options</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Welcome to Tic-Tac-Toe!\\n'</span><span class=\"br0\">)</span><br/>    nHumans = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2double.html\"><span class=\"kw2\">str2double</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Enter the number of human players: '</span>, <span class=\"co2\">'s'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> isnan<span class=\"br0\">(</span>nHumans<span class=\"br0\">)</span> || <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span>nHumans<span class=\"br0\">)</span> ~= nHumans || nHumans &lt; <span class=\"nu0\">1</span> || nHumans &gt; <span class=\"nu0\">2</span><br/>        nHumans = <span class=\"nu0\">0</span>;<br/>        pHuman = false<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">elseif</span> nHumans == <span class=\"nu0\">1</span><br/>        humanFirst = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Would the human like to go first (Y/N)? '</span>, <span class=\"co2\">'s'</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>humanFirst<span class=\"br0\">)</span> == <span class=\"nu0\">1</span> &amp;&amp; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span>humanFirst<span class=\"br0\">)</span> == <span class=\"co2\">'n'</span><br/>            pHuman = <span class=\"br0\">[</span>false\u00a0; true<span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">else</span><br/>            pHuman = <span class=\"br0\">[</span>true\u00a0; false<span class=\"br0\">]</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>        pHuman = true<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><span class=\"co2\">'o'</span> == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Should Player 1 use X or O? '</span>, <span class=\"co2\">'s'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        marks = <span class=\"co2\">'OX'</span>;<br/>    <span class=\"kw1\">else</span><br/>        marks = <span class=\"co2\">'XO'</span>;<br/>    <span class=\"kw1\">end</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'So Player 1 is\u00a0%shuman and\u00a0%cs and Player 2 is\u00a0%shuman and\u00a0%cs.\\n'</span>, <span class=\"sy0\">...</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"co2\">'not '</span>.*~pHuman<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, marks<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"co2\">'not '</span>.*~pHuman<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, marks<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> nHumans &gt; <span class=\"nu0\">0</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Select the space to mark by entering the space number.\\n'</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'No entry will quit the game.\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">% Play game</span><br/>    gameOver = false;<br/>    turn = <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">while</span> ~gameOver<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>rep<span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> pHuman<span class=\"br0\">(</span>turn<span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>move, isValid, isQuit<span class=\"br0\">]</span> = GetMoveFromPlayer<span class=\"br0\">(</span>turn, boards<span class=\"br0\">)</span>;<br/>            gameOver = isQuit;<br/>        <span class=\"kw1\">else</span><br/>            move = GetMoveFromComputer<span class=\"br0\">(</span>turn, boards<span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Player\u00a0%d chooses\u00a0%d\\n'</span>, turn, move<span class=\"br0\">)</span><br/>            isValid = true;<br/>            isQuit = false;<br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> isValid &amp;&amp; ~isQuit<br/>            <span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ind2sub.html\"><span class=\"kw2\">ind2sub</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>, move<span class=\"br0\">)</span>;<br/>            boards<span class=\"br0\">(</span>r, c, turn<span class=\"br0\">)</span> = true;<br/>            rep<span class=\"br0\">(</span>r, <span class=\"nu0\">4</span>*c<span class=\"br0\">)</span> = marks<span class=\"br0\">(</span>turn<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span> CheckWin<span class=\"br0\">(</span>boards<span class=\"br0\">(</span>:,\u00a0:, turn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                gameOver = true;<br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>rep<span class=\"br0\">)</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\nPlayer\u00a0%d wins!\\n'</span>, turn<span class=\"br0\">)</span><br/>            <span class=\"kw1\">elseif</span> CheckDraw<span class=\"br0\">(</span>boards<span class=\"br0\">)</span><br/>                gameOver = true;<br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>rep<span class=\"br0\">)</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\nCat'</span><span class=\"co2\">'s game!\\n'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>            turn = ~<span class=\"br0\">(</span>turn-<span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> <span class=\"br0\">[</span>move, isValid, isQuit<span class=\"br0\">]</span> = GetMoveFromPlayer<span class=\"br0\">(</span>pNum, boards<span class=\"br0\">)</span><br/><span class=\"co1\">% move - 1-9 indicating move position, 0 if invalid move</span><br/><span class=\"co1\">% isValid - logical indicating if move was valid, true if quitting</span><br/><span class=\"co1\">% isQuit - logical indicating if player wishes to quit game</span><br/>    p1 = boards<span class=\"br0\">(</span>:,\u00a0:, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    p2 = boards<span class=\"br0\">(</span>:,\u00a0:, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>    moveStr = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Player\u00a0%d: '</span>, pNum<span class=\"br0\">)</span>, <span class=\"co2\">'s'</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> isempty<span class=\"br0\">(</span>moveStr<span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Play again soon!\\n'</span><span class=\"br0\">)</span><br/>        move = <span class=\"nu0\">0</span>;<br/>        isValid = true;<br/>        isQuit = true;<br/>    <span class=\"kw1\">else</span><br/>        move = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2double.html\"><span class=\"kw2\">str2double</span></a><span class=\"br0\">(</span>moveStr<span class=\"br0\">)</span>;<br/>        isQuit = false;<br/>        <span class=\"kw1\">if</span> isnan<span class=\"br0\">(</span>move<span class=\"br0\">)</span> || move &lt; <span class=\"nu0\">1</span> || move &gt; <span class=\"nu0\">9</span> || p1<span class=\"br0\">(</span>move<span class=\"br0\">)</span> || p2<span class=\"br0\">(</span>move<span class=\"br0\">)</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s is an invalid move.\\n'</span>, moveStr<span class=\"br0\">)</span><br/>            isQuit = <span class=\"nu0\">0</span>;<br/>            isValid = false;<br/>        <span class=\"kw1\">else</span><br/>            isValid = true;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> move = GetMoveFromComputer<span class=\"br0\">(</span>pNum, boards<span class=\"br0\">)</span><br/><span class=\"co1\">% pNum - 1-2 player number</span><br/><span class=\"co1\">% boards - 3x3x2 logical array where pBoards(:,:,1) is player 1's marks</span><br/><span class=\"co1\">% Assumes that it is possible to make a move</span><br/>    <span class=\"kw1\">if</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span>boards<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">% Play in the corner for first move</span><br/>        move = <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">else</span>                    <span class=\"co1\">% Use Newell and Simon's \"rules to win\"</span><br/>        pMe = boards<span class=\"br0\">(</span>:,\u00a0:, pNum<span class=\"br0\">)</span>;<br/>        pThem = boards<span class=\"br0\">(</span>:,\u00a0:, ~<span class=\"br0\">(</span>pNum-<span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        possMoves = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>~<span class=\"br0\">(</span>pMe | pThem<span class=\"br0\">)</span><span class=\"br0\">)</span>.';<br/>\u00a0<br/>        <span class=\"co1\">% Look for a winning move</span><br/>        move = FindWin<span class=\"br0\">(</span>pMe, possMoves<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> move<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% Look to block opponent from winning</span><br/>        move = FindWin<span class=\"br0\">(</span>pThem, possMoves<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> move<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% Look to create a fork (two non-blocked lines of two)</span><br/>        <span class=\"kw1\">for</span> m = possMoves<br/>            newPMe = pMe;<br/>            newPMe<span class=\"br0\">(</span>m<span class=\"br0\">)</span> = true;<br/>            <span class=\"kw1\">if</span> CheckFork<span class=\"br0\">(</span>newPMe, pThem<span class=\"br0\">)</span><br/>                move = m;<br/>                <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% Look to make two in a row so long as it doesn't force opponent to fork</span><br/>        notGoodMoves = false<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>possMoves<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">for</span> m = possMoves<br/>            newPMe = pMe;<br/>            newPMe<span class=\"br0\">(</span>m<span class=\"br0\">)</span> = true;<br/>            <span class=\"kw1\">if</span> CheckPair<span class=\"br0\">(</span>newPMe, pThem<span class=\"br0\">)</span><br/>                nextPossMoves = possMoves;<br/>                nextPossMoves<span class=\"br0\">(</span>nextPossMoves == m<span class=\"br0\">)</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>                theirMove = FindWin<span class=\"br0\">(</span>newPMe, nextPossMoves<span class=\"br0\">)</span>;<br/>                newPThem = pThem;<br/>                newPThem<span class=\"br0\">(</span>theirMove<span class=\"br0\">)</span> = true;<br/>                <span class=\"kw1\">if</span> ~CheckFork<span class=\"br0\">(</span>newPThem, newPMe<span class=\"br0\">)</span><br/>                    move = m;<br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"kw1\">else</span><br/>                    notGoodMoves<span class=\"br0\">(</span>possMoves == m<span class=\"br0\">)</span> = true;<br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        possMoves<span class=\"br0\">(</span>notGoodMoves<span class=\"br0\">)</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>        <span class=\"co1\">% Play the center if available</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span>possMoves == <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            move = <span class=\"nu0\">5</span>;<br/>        \t<span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% Play the opposite corner of the opponent's piece if available</span><br/>        corners = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>;<br/>        move = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/intersect.html\"><span class=\"kw2\">intersect</span></a><span class=\"br0\">(</span>possMoves, <span class=\"sy0\">...</span><br/>            <span class=\"me1\">corners</span><span class=\"br0\">(</span>~<span class=\"br0\">(</span>pMe<span class=\"br0\">(</span>corners<span class=\"br0\">)</span> | pThem<span class=\"br0\">(</span>corners<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; pThem<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>corners<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span>move<span class=\"br0\">)</span><br/>            move = move<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% Play an empty corner if available</span><br/>        move = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/intersect.html\"><span class=\"kw2\">intersect</span></a><span class=\"br0\">(</span>possMoves, corners<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> move<br/>            move = move<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% Play an empty side if available</span><br/>        sides = <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>;<br/>        move = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/intersect.html\"><span class=\"kw2\">intersect</span></a><span class=\"br0\">(</span>possMoves, sides<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> move<br/>            move = move<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">% No good moves, so move randomly</span><br/>        possMoves = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>~<span class=\"br0\">(</span>pMe | pThem<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        move = possMoves<span class=\"br0\">(</span>randi<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>possMoves<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> move = FindWin<span class=\"br0\">(</span>board, possMoves<span class=\"br0\">)</span><br/><span class=\"co1\">% board - 3x3 logical representing one player's pieces</span><br/><span class=\"co1\">% move - integer indicating position to move to win, or 0 if no winning move</span><br/>    <span class=\"kw1\">for</span> m = possMoves<br/>        newPMe = board;<br/>        newPMe<span class=\"br0\">(</span>m<span class=\"br0\">)</span> = true;<br/>        <span class=\"kw1\">if</span> CheckWin<span class=\"br0\">(</span>newPMe<span class=\"br0\">)</span><br/>            move = m;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    move = <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> win = CheckWin<span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/><span class=\"co1\">% board - 3x3 logical representing one player's pieces</span><br/><span class=\"co1\">% win - logical indicating if that player has a winning board</span><br/>    win = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"br0\">)</span> || <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>board, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> || <span class=\"sy0\">...</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"br0\">)</span> || <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> fork = CheckFork<span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span><br/><span class=\"co1\">% fork - logical indicating if player 1 has created a fork unblocked by player 2</span><br/>    fork = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p2<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p1, <span class=\"nu0\">2</span><span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p2, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.' <span class=\"sy0\">...</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> == <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> pair = CheckPair<span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span><br/><span class=\"co1\">% pair - logical indicating if player 1 has two in a line unblocked by player 2</span><br/>    pair = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p2<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p1, <span class=\"nu0\">2</span><span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p2, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.' <span class=\"sy0\">...</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diag.html\"><span class=\"kw2\">diag</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> == <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> draw = CheckDraw<span class=\"br0\">(</span>boards<span class=\"br0\">)</span><br/><span class=\"co1\">% boards - 3x3x2 logical representation of all players' pieces</span><br/>    draw = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>boards<span class=\"br0\">(</span>:,\u00a0:, <span class=\"nu0\">1</span><span class=\"br0\">)</span> | boards<span class=\"br0\">(</span>:,\u00a0:, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "mIRC Scripting Language", "loc": 31, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw1\">alias</span> ttt <span class=\"br0\">{</span><br/>  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$2</span> isin <span class=\"re1\">%ttt</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>!<span class=\"re1\">%ttt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">var</span> <span class=\"re1\">%ttt</span>~ = <span class=\"re0\">$remove</span><span class=\"br0\">(</span><span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"re1\">%ttt</span>,1 2 3 4 5 6 7 8 9<span class=\"br0\">)</span>,<span class=\"re0\">$2</span>,X,O<span class=\"br0\">)</span><br/>    <span class=\"kw2\">var</span> <span class=\"re1\">%ttt</span>~~ = <span class=\"re0\">$replace</span><span class=\"br0\">(</span><span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"re1\">%ttt</span>,1 2 3 4 5 6 7 8 9<span class=\"br0\">)</span>,<span class=\"re0\">$2</span>,X<span class=\"br0\">)</span><br/>    set <span class=\"re1\">%ttt</span> <span class=\"re0\">$replace</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~~,<span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~~,<span class=\"sy0\">/</span><span class=\"br0\">(</span>?:O . . <span class=\"br0\">(</span>?:<span class=\"br0\">(</span>?:. <span class=\"me0\">O</span> .|O<span class=\"br0\">)</span> . . <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>|<span class=\"br0\">(</span>?:. <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> .|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span><span class=\"br0\">)</span> . . <span class=\"me0\">O</span><span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> . . <span class=\"br0\">(</span>?:. <span class=\"me0\">O</span> .|O<span class=\"br0\">)</span> . . <span class=\"me0\">O</span>|. . <span class=\"br0\">(</span>?:O . <span class=\"br0\">(</span>?:O . <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> . <span class=\"me0\">O</span><span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> . <span class=\"me0\">O</span> . <span class=\"me0\">O</span><span class=\"br0\">)</span> . .<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~~,<span class=\"sy0\">/</span>^<span class=\"br0\">(</span>?:. . . <span class=\"br0\">)</span>*<span class=\"br0\">(</span>?:O <span class=\"br0\">(</span>?:O <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> O<span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> O O<span class=\"br0\">)</span><span class=\"br0\">(</span>?: . . .<span class=\"br0\">)</span>*$<span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"re0\">$regml</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span>,<span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~~,<span class=\"sy0\">/</span><span class=\"br0\">(</span>?:X . . <span class=\"br0\">(</span>?:<span class=\"br0\">(</span>?:. <span class=\"me0\">X</span> .|X<span class=\"br0\">)</span> . . <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>|<span class=\"br0\">(</span>?:. <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> .|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span><span class=\"br0\">)</span> . . <span class=\"me0\">X</span><span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> . . <span class=\"br0\">(</span>?:. <span class=\"me0\">X</span> .|X<span class=\"br0\">)</span> . . <span class=\"me0\">X</span>|. . <span class=\"br0\">(</span>?:X . <span class=\"br0\">(</span>?:X . <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> . <span class=\"me0\">X</span><span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> . <span class=\"me0\">X</span> . <span class=\"me0\">X</span><span class=\"br0\">)</span> . .<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~~,<span class=\"sy0\">/</span>^<span class=\"br0\">(</span>?:. . . <span class=\"br0\">)</span>*<span class=\"br0\">(</span>?:X <span class=\"br0\">(</span>?:X <span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> X<span class=\"br0\">)</span>|<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span> X X<span class=\"br0\">)</span><span class=\"br0\">(</span>?: . . .<span class=\"br0\">)</span>*$<span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"re0\">$regml</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span>,<span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$remove</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~,2,4,6,8,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"br0\">(</span>5 isin <span class=\"re0\">$remove</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~,2,4,6,8<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span><span class=\"re0\">$rand</span><span class=\"br0\">(</span>0,<span class=\"re0\">$numtok</span><span class=\"br0\">(</span><span class=\"re0\">$v2</span>,32<span class=\"br0\">)</span><span class=\"br0\">)</span> == 0<span class=\"br0\">)</span>,5,<span class=\"re0\">$gettok</span><span class=\"br0\">(</span><span class=\"re0\">$remove</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~,2,4,6,8<span class=\"br0\">)</span>,<span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,<span class=\"re0\">$numtok</span><span class=\"br0\">(</span><span class=\"re0\">$remove</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~,2,4,6,8<span class=\"br0\">)</span>,32<span class=\"br0\">)</span><span class=\"br0\">)</span>,32<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"re0\">$gettok</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~,<span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,<span class=\"re0\">$numtok</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>~,32<span class=\"br0\">)</span><span class=\"br0\">)</span>,32<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,O<span class=\"br0\">)</span><br/>    <a href=\"http://www.mirc.com/tokenize\"><span class=\"kw3\">tokenize</span></a> 32 <span class=\"re1\">%ttt</span><br/>    <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"sy0\">/</span><span class=\"br0\">(</span>?:X . . <span class=\"br0\">(</span>?:X|. <span class=\"me0\">X</span> .<span class=\"br0\">)</span> . . <span class=\"me0\">X</span>|. . <span class=\"me0\">X</span> . <span class=\"me0\">X</span> . <span class=\"me0\">X</span> . .<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"sy0\">/</span>^<span class=\"br0\">(</span>?:. . . <span class=\"br0\">)</span>*X X X<span class=\"br0\">(</span>?: . . .<span class=\"br0\">)</span>*$<span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> <span class=\"re0\">$me</span> Wins<br/>      <a href=\"http://www.mirc.com/tokenize\"><span class=\"kw3\">tokenize</span></a> 32 <span class=\"re1\">%ttt</span>~~<br/>      unset <span class=\"re1\">%ttt</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"sy0\">/</span><span class=\"br0\">(</span>?:O . . <span class=\"br0\">(</span>?:O|. <span class=\"me0\">O</span> .<span class=\"br0\">)</span> . . <span class=\"me0\">O</span>|. . <span class=\"me0\">O</span> . <span class=\"me0\">O</span> . <span class=\"me0\">O</span> . .<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"sy0\">/</span>^<span class=\"br0\">(</span>?:. . . <span class=\"br0\">)</span>*O O O<span class=\"br0\">(</span>?: . . .<span class=\"br0\">)</span>*$<span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> <span class=\"re0\">$me</span> Loses<br/>      unset <span class=\"re1\">%ttt</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">elseif</span> <span class=\"br0\">(</span>!<span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re1\">%ttt</span>,<span class=\"sy0\">/</span>\\d<span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> Draw<br/>      unset <span class=\"re1\">%ttt</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> \ufffd $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$1</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$1</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$2</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$2</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$3</span> isnum,\u00a0,<span class=\"re0\">$3</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> \ufffd $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$4</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$4</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$5</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$5</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$6</span> isnum,\u00a0,<span class=\"re0\">$6</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> \ufffd $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$7</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$7</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$8</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$8</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$9</span> isnum,\u00a0,<span class=\"re0\">$9</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">else</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> Place Taken<br/>    <a href=\"http://www.mirc.com/tokenize\"><span class=\"kw3\">tokenize</span></a> 32 <span class=\"re1\">%ttt</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> \ufffd $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$1</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$1</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$2</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$2</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$3</span> isnum,\u00a0,<span class=\"re0\">$3</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> \ufffd $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$4</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$4</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$5</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$5</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$6</span> isnum,\u00a0,<span class=\"re0\">$6</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> \ufffd $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$7</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$7</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$8</span> isnum,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span>,<span class=\"re0\">$8</span><span class=\"br0\">)</span> $+ <span class=\"re0\">$chr</span><span class=\"br0\">(</span>124<span class=\"br0\">)</span> $+ <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$9</span> isnum,\u00a0,<span class=\"re0\">$9</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 100, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$initial</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\",\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>abc def ghi<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"sy0\">%</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>X O O X<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># In list context, returns best move,</span><br/><span class=\"co1\"># In scalar context, returns the score of best move.</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%cache</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> best_move <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$me</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span><span class=\"re0\">$me</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/wantarray.html\"><span class=\"kw3\">wantarray</span></a><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span><span class=\"re0\">$me</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/wantarray.html\"><span class=\"kw3\">wantarray</span></a><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elsif</span><span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> score<span class=\"br0\">(</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$me</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span><span class=\"re0\">$me</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/wantarray.html\"><span class=\"kw3\">wantarray</span></a><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/wantarray.html\"><span class=\"kw3\">wantarray</span></a> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a> <span class=\"sy0\">:</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$him</span> <span class=\"sy0\">=</span> <span class=\"re0\">$reverse</span><span class=\"br0\">{</span><span class=\"re0\">$me</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$best</span><span class=\"sy0\">,</span> <span class=\"re0\">@best</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">999</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"br0\">(</span>moves<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$with_m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/$m/$me/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\"># The || operator supplies scalar context to best_move(...)</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>score<span class=\"br0\">(</span><span class=\"re0\">$with_m</span><span class=\"sy0\">,</span> <span class=\"re0\">$him</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> best_move<span class=\"br0\">(</span><span class=\"re0\">$with_m</span><span class=\"sy0\">,</span> <span class=\"re0\">$him</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$s</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$best</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"re0\">$best</span><span class=\"sy0\">,</span> <span class=\"re0\">@best</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elsif</span><span class=\"br0\">(</span> <span class=\"re0\">$s</span> <span class=\"sy0\">==</span> <span class=\"re0\">$best</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@best</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$cache</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span><span class=\"re0\">$me</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/wantarray.html\"><span class=\"kw3\">wantarray</span></a><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/wantarray.html\"><span class=\"kw3\">wantarray</span></a> <span class=\"sy0\">?</span> <span class=\"re0\">$best</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">@best</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"re0\">$best</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$winner</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">[</span>XOxo<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">?:</span>\\<span class=\"nu0\">1</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">|...</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">...</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">|..</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">..</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">|....</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">....</span>\\<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> score <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$me</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$b</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/$winner/o</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co3\">$1</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$me</span> <span class=\"sy0\">?</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> moves <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$b</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/([^xoXO,\\n])/g</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> print_board <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$b</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/\\B/|/g</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$b</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/,/\\n-+-+-\\n/g</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> prompt <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$color</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@moves</span> <span class=\"sy0\">=</span> moves<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">unless</span><span class=\"br0\">(</span> <span class=\"re0\">@moves</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Place your $color on one of [@moves]: \"</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$m</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"re0\">$m</span> <span class=\"kw1\">eq</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">@moves</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@players</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>\t<span class=\"br0\">{</span> whose <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"your\"</span><span class=\"sy0\">,</span> name <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"You\"</span><span class=\"sy0\">,</span><br/>\t  verb <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"You place\"</span><span class=\"sy0\">,</span> get_move <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;prompt</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> whose <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"the computer's\"</span><span class=\"sy0\">,</span> name <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Computer\"</span><span class=\"sy0\">,</span><br/>\t  verb <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"The computer places\"</span><span class=\"sy0\">,</span> get_move <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;best_move</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$whose_turn</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$color</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$initial</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"re0\">$players</span><span class=\"br0\">[</span><span class=\"re0\">$whose_turn</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tprint_board<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"It is $p-&gt;{whose} turn.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\"># The parens around $m supply list context to the right side</span><br/>\t<span class=\"co1\"># or the = operator, which causes sub best_move to return the</span><br/>\t<span class=\"co1\"># best move, rather than the score of the best move.</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$m</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>get_move<span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$color</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$m</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$p-&gt;{verb} an $color at $m<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$b</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/$m/$color/</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> score<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$color</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t\tprint_board<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$p-&gt;{name} \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"won!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"lost!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$p-&gt;{name} cannot move.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Game over.<span class=\"es0\">\\n</span>New Game...<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$color</span><span class=\"sy0\">,</span> <span class=\"re0\">$whose_turn</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$initial</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">redo</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">continue</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$color</span> <span class=\"sy0\">=</span> <span class=\"re0\">$reverse</span><span class=\"br0\">{</span><span class=\"re0\">$color</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$whose_turn</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"re0\">$whose_turn</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 47, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@board</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@winning</span><span class=\"sy0\">-</span>positions <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> get<span class=\"sy0\">-</span>winner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">@winning</span><span class=\"sy0\">-</span>positions <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"kw1\">eq</span><span class=\"br0\">]</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> free<span class=\"sy0\">-</span>indexes<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">@board</span><span class=\"sy0\">.</span><span class=\"kw3\">keys</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ai<span class=\"sy0\">-</span>move<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">given</span> free<span class=\"sy0\">-</span>indexes<span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'o'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw3\">say</span> <span class=\"st0\">\"I go at: { $_ + 1 }<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> print<span class=\"sy0\">-</span>board<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[2J\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"re0\">@board</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"st0\">\"$^a | $^b | $^c\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>--+---+--<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> human<span class=\"sy0\">-</span>move<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> prompt <span class=\"st0\">\"Choose one of { (free-indexes()\u00a0\u00bb+\u00bb 1).join(\"</span><span class=\"sy0\">,</span><span class=\"st0\">\") }: \"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"re0\">$pos</span> <span class=\"kw1\">eq</span> <span class=\"kw3\">any</span><span class=\"br0\">(</span>free<span class=\"sy0\">-</span>indexes<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00bb <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'x'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">say</span> <span class=\"st0\">\"Sorry, you want to put your 'x' where?\"</span><span class=\"sy0\">;</span><br/>\t\thuman<span class=\"sy0\">-</span>move<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> flat <span class=\"br0\">(</span><span class=\"re0\">&amp;ai</span><span class=\"sy0\">-</span>move<span class=\"sy0\">,</span> <span class=\"re0\">&amp;human</span><span class=\"sy0\">-</span>move<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span> <span class=\"br0\">{</span><br/>\tprint<span class=\"sy0\">-</span>board<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> get<span class=\"sy0\">-</span>winner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> free<span class=\"sy0\">-</span>indexes<span class=\"sy0\">;</span><br/>    <span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> get<span class=\"sy0\">-</span>winner<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$player</span><span class=\"sy0\">,</span> <span class=\"re0\">$across</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">say</span> <span class=\"st0\">\"$player wins across [\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$across</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00bb <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"].\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">say</span> <span class=\"st0\">\"How boring, a draw!\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 85, "block": "<pre class=\"text highlighted_source\">sequence board = repeat(' ',9)  -- {' '/'X'/'O'}<br/>\u00a0<br/>constant wins = {{1,2,3},{4,5,6},{7,8,9},{1,4,7},{2,5,8},{3,6,9},{1,5,9},{3,5,7}}<br/>\u00a0<br/>function check_winner()<br/>    for w=1 to length(wins) do<br/>        integer {i,j,k} = wins[w],<br/>                boardi = board[i]<br/>        if boardi!=' ' and boardi=board[j] and boardi=board[k] then<br/>            return boardi<br/>        end if<br/>    end for<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure showboard()<br/>    printf(1,\"\u00a0%c |\u00a0%c |\u00a0%c\\n---+---+---\\n\u00a0%c |\u00a0%c |\u00a0%c\\n---+---+---\\n\u00a0%c |\u00a0%c |\u00a0%c\\n\",board)<br/>end procedure<br/>\u00a0<br/>integer best_i<br/>function test_move(integer val, integer depth)<br/>integer score = check_winner()<br/>integer best = -1, changed = 0<br/>    if score!=0 then return iff(score=val?1:-1) end if<br/>    for i=1 to 9 do<br/>        if board[i]=' ' then <br/>            {changed,board[i]} @= val<br/>            score = -test_move('O'+'X'-val, depth + 1)<br/>            board[i] = ' '<br/>            if score&gt;best then<br/>                if depth=0 then<br/>                    best_i = i;<br/>                end if<br/>                best = score;<br/>            end if<br/>        end if<br/>    end for<br/>    return iff(changed!=0?best:0)<br/>end function<br/>\u00a0<br/>integer user = 1<br/>\u00a0<br/>function game()<br/>integer key, k, win<br/>    board = repeat(' ',9)<br/>\u00a0<br/>    printf(1,\"Board postions are numbered so:\\n1 2 3\\n4 5 6\\n7 8 9\\n\");<br/>    printf(1,\"You have O, I have X.\\n\\n\");<br/>    for n=1 to 9 do<br/>        if(user) then<br/>            printf(1,\"your move: \");<br/>            while 1 do<br/>                key = wait_key()<br/>                if find(key,{#1B,'q','Q'}) then return \"Quit\" end if<br/>                k = key-'0'<br/>                if k&gt;=1 and k&lt;=9 and board[k]=' ' then<br/>                    board[k] = 'O'<br/>                    printf(1,\"%c\\n\",key)<br/>                    exit<br/>                end if<br/>            end while<br/>        else<br/>            if n=1 then --/* randomize if computer opens, less boring */<br/>                best_i = rand(9)<br/>            else<br/>                {} = test_move('X', 0);<br/>            end if<br/>            board[best_i] = 'X'<br/>            printf(1,\" my move:\u00a0%d\\n\", best_i);<br/>        end if<br/>        showboard();<br/>        user = 1-user<br/>        win = check_winner()<br/>        if win!=0 then<br/>            return iff(win=='O'\u00a0? \"You win.\\n\\n\"\u00a0: \"I win.\\n\\n\");<br/>        end if<br/>    end for<br/>    return \"A draw.\\n\\n\";<br/>end function<br/>\u00a0<br/>while 1 do<br/>    string res = game()<br/>    puts(1,res)<br/>    if res=\"Quit\" then exit end if<br/>end while</pre>"}, {"lang": "PicoLisp", "loc": 67, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")  # for 'game' function<br/>\u00a0<br/>(de display ()<br/>   (for Y (3 2 1)<br/>      (prinl \"   +---+---+---+\")<br/>      (prin \" \" Y)<br/>      (for X (1 2 3)<br/>         (prin \" | \" (or (get *Board X Y) \" \")) )<br/>      (prinl \" |\") )<br/>   (prinl \"   +---+---+---+\")<br/>   (prinl \"     a   b   c\") )<br/>\u00a0<br/>(de find3 (P)<br/>   (find<br/>      '((X Y DX DY)<br/>         (do 3<br/>            (NIL (= P (get *Board X Y)))<br/>            (inc 'X DX)<br/>            (inc 'Y DY)<br/>            T ) )<br/>      (1 1 1 1 2 3 1 1)<br/>      (1 2 3 1 1 1 1 3)<br/>      (1 1 1 0 0 0 1 1)<br/>      (0 0 0 1 1 1 1 -1) ) )<br/>\u00a0<br/>(de myMove ()<br/>   (when<br/>      (game NIL 8<br/>         '((Flg)     # Moves<br/>            (unless (find3 (or (not Flg) 0))<br/>               (make<br/>                  (for (X . L) *Board<br/>                     (for (Y . P) L<br/>                        (unless P<br/>                           (link<br/>                              (cons<br/>                                 (cons X Y (or Flg 0))<br/>                                 (list X Y) ) ) ) ) ) ) ) )<br/>         '((Mov) # Move<br/>            (set (nth *Board (car Mov) (cadr Mov)) (cddr Mov)) )<br/>         '((Flg)     # Cost<br/>            (if (find3 (or Flg 0)) -100 0) ) )<br/>      (let Mov (caadr @)<br/>         (set (nth *Board (car Mov) (cadr Mov)) 0) )<br/>      (display) ) )<br/>\u00a0<br/>(de yourMove (X Y)<br/>   (and<br/>      (sym? X)<br/>      (&gt;= 3 (setq X (- (char X) 96)) 1)<br/>      (num? Y)<br/>      (&gt;= 3 Y 1)<br/>      (not (get *Board X Y))<br/>      (set (nth *Board X Y) T)<br/>      (display) ) )<br/>\u00a0<br/>(de main ()<br/>   (setq *Board (make (do 3 (link (need 3)))))<br/>   (display) )<br/>\u00a0<br/>(de go Args<br/>   (cond<br/>      ((not (yourMove (car Args) (cadr Args)))<br/>         \"Illegal move!\" )<br/>      ((find3 T) \"Congratulation, you won!\")<br/>      ((not (myMove)) \"No moves\")<br/>      ((find3 0) \"Sorry, you lost!\") ) )</pre>"}, {"lang": "Prolog", "loc": 210, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span><span class=\"st_h\">'min-max.pl'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> box<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> tic_tac_toe_window<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Computer begins.</span><br/>tic<span class=\"sy3\">-</span>tac<span class=\"sy3\">-</span>toe<span class=\"br0\">(</span>computer<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tTTT <span class=\"sy6\">=</span> <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_ <span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> o<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdisplay_tic_tac_toe<span class=\"br0\">(</span>TTT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Player begins</span><br/>tic<span class=\"sy3\">-</span>tac<span class=\"sy3\">-</span>toe<span class=\"br0\">(</span>me<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tTTT <span class=\"sy6\">=</span> <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_ <span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tdisplay_tic_tac_toe<span class=\"br0\">(</span>TTT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>display_tic_tac_toe<span class=\"br0\">(</span>TTT<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tretractall<span class=\"br0\">(</span>box<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tretractall<span class=\"br0\">(</span>tic_tac_toe_window<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Tic-tac-Toe'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">170</span><span class=\"sy4\">,</span><span class=\"nu0\">170</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX <span class=\"sy6\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> Y <span class=\"sy6\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span><br/>\tdisplay<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> TTT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>tic_tac_toe_window<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>display<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>display<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tdisplay_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy3\">+</span><span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tN3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span><br/>\tdisplay<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y1<span class=\"sy4\">,</span> N3<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>display_line<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>display_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <span class=\"br0\">[</span>C<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nonvar</span></a><span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> C1 <span class=\"sy6\">=</span> C<span class=\"sy4\">;</span> C1 <span class=\"sy6\">=</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> tic_tac_toe_box<span class=\"br0\">(</span>C1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">assertz</span></a><span class=\"br0\">(</span>box<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tX1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tdisplay_line<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> X1<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% class tic_tac_toe_box</span><br/><span class=\"co1\">% display an 'x' when the player clicks</span><br/><span class=\"co1\">% display an 'o' when the computer plays</span><br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>tic_tac_toe_box<span class=\"sy4\">,</span> box<span class=\"sy4\">,</span> \"Graphical window with text\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>variable<span class=\"br0\">(</span>mess<span class=\"sy4\">,</span> any<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"text to display\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Lbl<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> send_super<span class=\"sy4\">,</span> initialise<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mess<span class=\"sy4\">,</span> Lbl<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tWS <span class=\"sy6\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span> HS <span class=\"sy6\">=</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span>WS<span class=\"sy4\">,</span>HS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> recogniser<span class=\"sy4\">,</span><br/>\t     handler_group<span class=\"br0\">(</span>new<span class=\"br0\">(</span>click_gesture<span class=\"br0\">(</span>left<span class=\"sy4\">,</span><br/>\t\t\t\t\t     <span class=\"st_h\">''</span><span class=\"sy4\">,</span><br/>\t\t\t\t\t     single<span class=\"sy4\">,</span><br/>\t\t\t\t\t     message<span class=\"br0\">(</span><span class=\"sy5\">@</span>receiver<span class=\"sy4\">,</span> my_click<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% the box is clicked</span><br/>my_click<span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> set_val<span class=\"sy4\">,</span> x<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span><span class=\"sy5\">@</span>prolog<span class=\"sy4\">,</span> play<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% only works when the box is \"free\"</span><br/>set_val<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mess<span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mess<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> redraw<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> flush<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%  redefined method to display custom graphical objects.</span><br/><span class=\"st_h\">'_redraw_area'</span><span class=\"br0\">(</span>P<span class=\"sy4\">,</span> A<span class=\"sy4\">:</span>area<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> send_super<span class=\"sy4\">,</span> <span class=\"st_h\">'_redraw_area'</span><span class=\"sy4\">,</span> A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">%we display the text</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mess<span class=\"sy4\">,</span> Lbl<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Str1<span class=\"sy4\">,</span> string<span class=\"br0\">(</span>Lbl<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget_object<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> area<span class=\"sy4\">,</span> area<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"sy4\">,</span>W<span class=\"sy4\">,</span>H<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> draw_box<span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> H<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> draw_text<span class=\"sy4\">,</span> Str1<span class=\"sy4\">,</span><br/>\t\tfont<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> normal<span class=\"sy4\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tX<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> center<span class=\"sy4\">,</span> center<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"sy4\">.</span><br/>\u00a0<br/>play <span class=\"sy1\">:-</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">8</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>init<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> TTT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfinished<span class=\"br0\">(</span>x<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> Val<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   Val <span class=\"sy6\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> send<span class=\"br0\">(</span><span class=\"sy5\">@</span>display<span class=\"sy4\">,</span> inform<span class=\"sy4\">,</span><span class=\"st_h\">'You win\u00a0!'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t               tic_tac_toe_window<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t       send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> destroy<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   <span class=\"br0\">(</span>\tVal <span class=\"sy6\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> send<span class=\"br0\">(</span><span class=\"sy5\">@</span>display<span class=\"sy4\">,</span> inform<span class=\"sy4\">,</span><span class=\"st_h\">'Draw\u00a0!'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t                   tic_tac_toe_window<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t           send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> destroy<span class=\"br0\">)</span><br/>\t    <span class=\"sy4\">;</span>\tnext_move<span class=\"br0\">(</span>TTT<span class=\"sy4\">,</span> TT1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tmaplist<span class=\"br0\">(</span>display<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> TT1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tfinished<span class=\"br0\">(</span>o<span class=\"sy4\">,</span> TT1<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t<span class=\"br0\">(</span>   V <span class=\"sy6\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> send<span class=\"br0\">(</span><span class=\"sy5\">@</span>display<span class=\"sy4\">,</span> inform<span class=\"sy4\">,</span><span class=\"st_h\">'I win\u00a0!'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t     tic_tac_toe_window<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t             send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> destroy<span class=\"br0\">)</span><br/>\t\t<span class=\"sy4\">;</span>   <span class=\"br0\">(</span>\tV <span class=\"sy6\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> send<span class=\"br0\">(</span><span class=\"sy5\">@</span>display<span class=\"sy4\">,</span> inform<span class=\"sy4\">,</span><span class=\"st_h\">'Draw\u00a0!'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t                 tic_tac_toe_window<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t         send<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> destroy<span class=\"br0\">)</span><br/>\t\t    <span class=\"sy4\">;</span>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% use minmax to compute the next move</span><br/>next_move<span class=\"br0\">(</span>TTT<span class=\"sy4\">,</span> TT1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tminimax<span class=\"br0\">(</span>o<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1024</span><span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> _V1<span class=\"sy3\">-</span> TT1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% we display the new board</span><br/>display<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nonvar</span></a><span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tbox<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>V1<span class=\"sy4\">,</span> set_val<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>display<span class=\"br0\">(</span>_I<span class=\"sy4\">,</span> _V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% we create the board for minmax</span><br/>init<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tbox<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>V1<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> mess<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tV \\<span class=\"sy6\">=</span> <span class=\"st_h\">' '</span><span class=\"sy4\">.</span><br/>\u00a0<br/>init<span class=\"br0\">(</span>_I<span class=\"sy4\">,</span> _V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% winning position for the player P\u00a0?</span><br/>winned<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span> A2<span class=\"sy4\">,</span> A3<span class=\"sy4\">,</span> A4<span class=\"sy4\">,</span> A5<span class=\"sy4\">,</span> A6<span class=\"sy4\">,</span> A7<span class=\"sy4\">,</span> A8<span class=\"sy4\">,</span> A9<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>       <span class=\"br0\">(</span>is_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span> A2<span class=\"sy4\">,</span> A3<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A4<span class=\"sy4\">,</span> A5<span class=\"sy4\">,</span> A6<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A7<span class=\"sy4\">,</span> A8<span class=\"sy4\">,</span> A9<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span> A4<span class=\"sy4\">,</span> A7<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A2 <span class=\"sy4\">,</span>A5<span class=\"sy4\">,</span> A8<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A3<span class=\"sy4\">,</span> A6<span class=\"sy4\">,</span> A9<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span> A5<span class=\"sy4\">,</span> A9<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tis_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A3<span class=\"sy4\">,</span> A5<span class=\"sy4\">,</span> A7<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>is_winning_line<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> C<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nonvar</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span> A <span class=\"sy6\">=</span> P<span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nonvar</span></a><span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> B <span class=\"sy6\">=</span> P<span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nonvar</span></a><span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"sy4\">,</span> C <span class=\"sy6\">=</span> P<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Winning position for the player</span><br/>eval<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> Deep<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twinned<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> TTT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   Player <span class=\"sy6\">=</span> o <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">1000</span> <span class=\"sy3\">-</span> <span class=\"nu0\">50</span> <span class=\"sy3\">*</span> Deep<span class=\"sy4\">;</span> V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"sy3\">-</span><span class=\"nu0\">1000</span><span class=\"sy3\">+</span> <span class=\"nu0\">50</span> <span class=\"sy3\">*</span> Deep<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Loosing position for the player</span><br/>eval<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> Deep<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tselect<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> <span class=\"br0\">[</span>o<span class=\"sy4\">,</span>x<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Player1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twinned<span class=\"br0\">(</span>Player1<span class=\"sy4\">,</span> TTT<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   Player <span class=\"sy6\">=</span> x <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">1000</span> <span class=\"sy3\">-</span> <span class=\"nu0\">50</span> <span class=\"sy3\">*</span> Deep<span class=\"sy4\">;</span> V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"sy3\">-</span><span class=\"nu0\">1000</span><span class=\"sy3\">+</span> <span class=\"nu0\">50</span> <span class=\"sy3\">*</span> Deep<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Draw position</span><br/>eval<span class=\"br0\">(</span>_Player<span class=\"sy4\">,</span> _Deep<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">include</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">var</span></a><span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% we fetch the free positions of the board</span><br/>possible_move<span class=\"br0\">(</span>TTT<span class=\"sy4\">,</span> LMove<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> chain<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">8</span><span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>   nth0<span class=\"br0\">(</span>I<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t   <span class=\"br0\">(</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">var</span></a><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> send<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tchain_list<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> LMove<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% we create the new position when the player P clicks</span><br/><span class=\"co1\">% the box \"N\"</span><br/>assign_move<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> TT1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">copy_term</span></a><span class=\"br0\">(</span>TTT<span class=\"sy4\">,</span> TT1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> TT1<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% We fetch all the possible boards obtained from board TTT</span><br/><span class=\"co1\">% for the player P</span><br/>get_next<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> Deep<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> Player1<span class=\"sy4\">,</span> Deep1<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tpossible_move<span class=\"br0\">(</span>TTT<span class=\"sy4\">,</span> LMove<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tselect<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> <span class=\"br0\">[</span>o<span class=\"sy4\">,</span>x<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Player1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tDeep1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Deep <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>assign_move<span class=\"br0\">(</span>Player<span class=\"sy4\">,</span> TTT<span class=\"br0\">)</span><span class=\"sy4\">,</span> LMove<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% The game is over\u00a0?</span><br/><span class=\"co1\">% Player P wins</span><br/>finished<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twinned<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> TTT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Draw</span><br/>finished<span class=\"br0\">(</span>_P<span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">include</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">var</span></a><span class=\"sy4\">,</span> TTT<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% the game is not over</span><br/>finished<span class=\"br0\">(</span>_P<span class=\"sy4\">,</span> _TTT<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% minmax must knows when the computer plays</span><br/><span class=\"co1\">% (o for ordinateur in French)</span><br/>computer<span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 76, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"st0\">'''<br/>    Tic-tac-toe game player.<br/>    Input the index of where you wish to place your mark at your turn.<br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>board <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"st0\">'123456789'</span><span class=\"br0\">)</span><br/>wins <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printboard<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>board<span class=\"br0\">[</span>x:x+<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> score<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> w <span class=\"kw1\">in</span> wins:<br/>        b <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> b <span class=\"kw1\">in</span> <span class=\"st0\">'XO'</span> <span class=\"kw1\">and</span> <span class=\"kw2\">all</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> w<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> b<span class=\"sy0\">,</span> <span class=\"br0\">[</span>i+<span class=\"nu0\">1</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> w<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><br/>\u00a0<br/><span class=\"kw1\">def</span> finished<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">all</span> <span class=\"br0\">(</span>b <span class=\"kw1\">in</span> <span class=\"st0\">'XO'</span> <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> board<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> space<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span> b <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> board <span class=\"kw1\">if</span> b <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> <span class=\"st0\">'XO'</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> my_turn<span class=\"br0\">(</span>xo<span class=\"br0\">)</span>:<br/>    options <span class=\"sy0\">=</span> space<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    choice <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">choice</span><span class=\"br0\">(</span>options<span class=\"br0\">)</span><br/>    board<span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>choice<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> xo<br/>    <span class=\"kw1\">return</span> choice<br/>\u00a0<br/><span class=\"kw1\">def</span> your_turn<span class=\"br0\">(</span>xo<span class=\"br0\">)</span>:<br/>    options <span class=\"sy0\">=</span> space<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        choice <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">\" Put your\u00a0%s in any of these positions:\u00a0%s \"</span><br/>                      \u00a0% <span class=\"br0\">(</span>xo<span class=\"sy0\">,</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>options<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> choice <span class=\"kw1\">in</span> options:<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Whoops I don't understand the input\"</span> <span class=\"br0\">)</span><br/>    board<span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>choice<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> xo<br/>    <span class=\"kw1\">return</span> choice<br/>\u00a0<br/><span class=\"kw1\">def</span> me<span class=\"br0\">(</span>xo<span class=\"sy0\">=</span><span class=\"st0\">'X'</span><span class=\"br0\">)</span>:<br/>    printboard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'I go at'</span><span class=\"sy0\">,</span> my_turn<span class=\"br0\">(</span>xo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> score<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw1\">not</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>%s wins across\u00a0%s\"</span>\u00a0% s<br/>\u00a0<br/><span class=\"kw1\">def</span> you<span class=\"br0\">(</span>xo<span class=\"sy0\">=</span><span class=\"st0\">'O'</span><span class=\"br0\">)</span>:<br/>    printboard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Call my_turn(xo) below for it to play itself</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'You went at'</span><span class=\"sy0\">,</span> your_turn<span class=\"br0\">(</span>xo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> score<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw1\">not</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>%s wins across\u00a0%s\"</span>\u00a0% s<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>__doc__<span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"kw1\">not</span> finished<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    s <span class=\"sy0\">=</span> me<span class=\"br0\">(</span><span class=\"st0\">'X'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>        printboard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%s wins across\u00a0%s\"</span>\u00a0% s<span class=\"br0\">)</span><br/>        <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> finished<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        s <span class=\"sy0\">=</span> you<span class=\"br0\">(</span><span class=\"st0\">'O'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>            printboard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>%s wins across\u00a0%s\"</span>\u00a0% s<span class=\"br0\">)</span><br/>            <span class=\"kw1\">break</span><br/><span class=\"kw1\">else</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>A draw'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre>+ minimax.rkt    -- Written in Lazy Racket, implements the general minimax algorythm as \n|                   given in <a class=\"external text\" href=\"http://en.wikipedia.org/wiki/Alpha-beta_pruning\" rel=\"nofollow\">Wikipedia</a>.\n|                   Knows nothing about games.\nV\n+ game.rkt       -- Written in Lazy Racket, defines general classes for the game and players.\n|                   Knows nothing about tick-tack-toe, only about zero-sum two-player\n|                   turn-taking games with perfect information in general.\nV\n+ tick-tack.rkt  -- Written in Racket, implements the tick-tack-toe game.\n</pre>"}, {"lang": "REXX", "loc": 143, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program plays  (with a human)  the   tic\u2500tac\u2500toe   game  on an  NxN  grid.       */</span><br/>$=<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*eyecatcher for error messages, prompt*/</span><br/>oops   = $  <span class=\"st0\">'***error*** '</span>                       <span class=\"coMULTI\">/*literal for when an error happens.   */</span><br/>single = <span class=\"st0\">'\u2502\u2500\u253c'</span>;    jam= <span class=\"st0\">\"\u2551\"</span>;    bar= <span class=\"st0\">'\u2550'</span>;     junc= <span class=\"st0\">\"\u256c\"</span>;         dbl=jam <span class=\"sy0\">||</span> bar <span class=\"sy0\">||</span> junc<br/>sw     = linesize<span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/*obtain width of the terminal (less 1)*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N hm cm <span class=\"sy0\">.</span>,@<span class=\"sy0\">.</span>                           <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">3</span>;   <span class=\"kw2\">oN</span>=N              <span class=\"coMULTI\">/*N  not specified?   Then use default.*/</span><br/>     N = <span class=\"kw6\">abs</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>                                  <span class=\"coMULTI\">/*if N &lt; 0.  then computer goes first. */</span><br/>    NN = N<span class=\"sy0\">*</span>N                                     <span class=\"coMULTI\">/*calculate the   square of  N.        */</span><br/>middle = NN\u00a0% <span class=\"nu0\">2</span>   +   N\u00a0% <span class=\"nu0\">2</span>                      <span class=\"coMULTI\">/*    \"      \"    middle  \"  the grid. */</span><br/><span class=\"kw1\">if</span> N<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> oops  <span class=\"st0\">'tic\u2500tac\u2500toe grid is too small: '</span>    N;     <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>;    <span class=\"kw3\">end</span><br/>pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, sw\u00a0% NN<span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*display padding:  6x6  in 80 columns.*/</span><br/><span class=\"kw1\">if</span> hm==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> hm= <span class=\"st0\">\"X\"</span>;                         <span class=\"coMULTI\">/*define the marker for  a   human.    */</span><br/><span class=\"kw1\">if</span> cm==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> cm= <span class=\"st0\">\"O\"</span>                          <span class=\"coMULTI\">/*   \"    \"     \"    \"  the  computer. */</span><br/>                hm= aChar<span class=\"br0\">(</span>hm, <span class=\"st0\">'human'</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*determine if the marker is legitimate*/</span><br/>                cm= aChar<span class=\"br0\">(</span>cm, <span class=\"st0\">'computer'</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/*    \"      \"  \"     \"    \"      \"    */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">upper</span> <span class=\"kw2\">value</span>  hm  cm     <span class=\"kw2\">with</span>     uh  uc    <span class=\"coMULTI\">/*use uppercase values is markers:  X x*/</span><br/><span class=\"kw1\">if</span> uh==uc  <span class=\"kw3\">then</span> cm=<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'O X'</span>, <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>uh==<span class=\"st0\">\"O\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*The human wants Hal's marker?  Swap. */</span><br/><span class=\"kw1\">if</span> oN<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove middle                  <span class=\"coMULTI\">/*Hal moves first? Then choose middling*/</span><br/>         <span class=\"kw3\">else</span> <span class=\"kw1\">call</span> showGrid                      <span class=\"coMULTI\">/*showGrid also checks for wins &amp; draws*/</span><br/>\u00a0<br/><span class=\"coMULTI\">/*tic\u2500tac\u2500toe game\u2500\u2500\u2500\u25ba*/</span>     <span class=\"kw1\">do</span>  <span class=\"kw2\">forever</span>         <span class=\"coMULTI\">/*'til the cows come home  (or  QUIT). */</span><br/><span class=\"coMULTI\">/*tic\u2500tac\u2500toe game\u2500\u2500\u2500\u25ba*/</span>     <span class=\"kw1\">call</span> CBLF           <span class=\"coMULTI\">/*process carbon\u2500based lifeform's move.*/</span><br/><span class=\"coMULTI\">/*tic\u2500tac\u2500toe game\u2500\u2500\u2500\u25ba*/</span>     <span class=\"kw1\">call</span> Hal            <span class=\"coMULTI\">/*determine Hal's  (the computer) move.*/</span><br/><span class=\"coMULTI\">/*tic\u2500tac\u2500toe game\u2500\u2500\u2500\u25ba*/</span>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span>   <span class=\"coMULTI\">/*showGrid subroutine does wins &amp; draws*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>aChar: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,whoseX;  L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                               <span class=\"coMULTI\">/*process markers.*/</span><br/>       <span class=\"kw1\">if</span> L==<span class=\"nu0\">1</span>                        <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> testB<span class=\"br0\">(</span>     x  <span class=\"br0\">)</span>     <span class=\"coMULTI\">/*1 char,  as is. */</span><br/>       <span class=\"kw1\">if</span> L==<span class=\"nu0\">2</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x, <span class=\"st0\">'X'</span><span class=\"br0\">)</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> testB<span class=\"br0\">(</span> <span class=\"kw6\">x2c</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span>     <span class=\"coMULTI\">/*2 chars, hex.   */</span><br/>       <span class=\"kw1\">if</span> L==<span class=\"nu0\">3</span> <span class=\"sy0\">&amp;</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x, <span class=\"st0\">'W'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ,                                 <span class=\"coMULTI\">/*3 chars, decimal*/</span><br/>          x<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">256</span>                <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> testB<span class=\"br0\">(</span> <span class=\"kw6\">d2c</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span>     <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7and in range.*/</span><br/>       <span class=\"kw1\">say</span> oops  <span class=\"st0\">'illegal character or character code for'</span>    whoseX    <span class=\"st0\">\"marker: \"</span>    x<br/>       <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>CBLF:  prompt=<span class=\"st0\">'Please enter a cell number to place your next marker ['</span>hm<span class=\"st0\">\"]     (or Quit):\"</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;                 <span class=\"kw1\">say</span> $ prompt<br/>         <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span>  x <span class=\"nu0\">1</span> ux <span class=\"nu0\">1</span> ox;    <span class=\"kw2\">upper</span> ux    <span class=\"coMULTI\">/*get versions of answer;  uppercase ux*/</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>ox, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> ox=ox <span class=\"sy0\">/</span> <span class=\"nu0\">1</span>    <span class=\"coMULTI\">/*normalize cell number:  +0007 \u2500\u2500\u2500\u25ba 7 */</span><br/>                                                 <span class=\"coMULTI\">/*(division by unity normalizes a num.)*/</span><br/>           <span class=\"kw1\">select</span>                                <span class=\"coMULTI\">/*perform some validations of X (cell#)*/</span><br/>           <span class=\"kw3\">when</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'QUIT'</span>,ux,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> tell <span class=\"st0\">'quitting.'</span><br/>           <span class=\"kw3\">when</span> x=<span class=\"st0\">''</span>                 <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                    <span class=\"coMULTI\">/*Nada?  Try again.*/</span><br/>           <span class=\"kw3\">when</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>         <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"too many\"</span> cell#  <span class=\"st0\">'specified:'</span>   x<br/>           <span class=\"kw3\">when</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"cell number isn't numeric: \"</span>        x<br/>           <span class=\"kw3\">when</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"cell number isn't an integer: \"</span>     x<br/>           <span class=\"kw3\">when</span> x=<span class=\"nu0\">0</span>                  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"cell number can't be zero: \"</span>        x<br/>           <span class=\"kw3\">when</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>                  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"cell number can't be negative: \"</span>    x<br/>           <span class=\"kw3\">when</span> x<span class=\"sy0\">&gt;</span>NN                 <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"cell number can't exceed \"</span>          NN<br/>           <span class=\"kw3\">when</span> @<span class=\"sy0\">.</span>ox<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>            <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> oops <span class=\"st0\">\"cell number is already occupied: \"</span>  x<br/>           <span class=\"kw3\">otherwise</span>                 <span class=\"kw1\">leave</span>  <span class=\"coMULTI\">/*forever*/</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>\u00a0<br/>         <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*forever*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  OX is a normalized version of X*/</span><br/>       @<span class=\"sy0\">.</span>ox=hm                                   <span class=\"coMULTI\">/*place a marker for the human (CLBF). */</span><br/>       <span class=\"kw1\">call</span> showGrid                             <span class=\"coMULTI\">/*and display the  tic\u2500tac\u2500toe  grid.  */</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Hal:           <span class=\"kw1\">select</span>                                        <span class=\"coMULTI\">/*Hal tries various moves. */</span><br/>               <span class=\"kw3\">when</span> win<span class=\"br0\">(</span>cm, N-<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove , ec      <span class=\"coMULTI\">/*is this the winning move?*/</span><br/>               <span class=\"kw3\">when</span> win<span class=\"br0\">(</span>hm, N-<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove , ec      <span class=\"coMULTI\">/* \"   \"   a blocking   \"  */</span><br/>               <span class=\"kw3\">when</span> @<span class=\"sy0\">.</span>middle== <span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove middle    <span class=\"coMULTI\">/*pick the  center  cell.  */</span><br/>               <span class=\"kw3\">when</span> @<span class=\"sy0\">.</span>N<span class=\"sy0\">.</span>N  ==  <span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove , N N     <span class=\"coMULTI\">/*bottom right corner cell.*/</span><br/>               <span class=\"kw3\">when</span> @<span class=\"sy0\">.</span>N<span class=\"sy0\">.</span>1  ==  <span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove , N <span class=\"nu0\">1</span>     <span class=\"coMULTI\">/*   \"    left    \"     \"  */</span><br/>               <span class=\"kw3\">when</span> @<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>N  ==  <span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove , <span class=\"nu0\">1</span> N     <span class=\"coMULTI\">/*  top  right    \"     \"  */</span><br/>               <span class=\"kw3\">when</span> @<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>1  ==  <span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> Hmove , <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>     <span class=\"coMULTI\">/*   \"    left    \"     \"  */</span><br/>               <span class=\"kw3\">otherwise</span>                <span class=\"kw1\">call</span> Hmove , ac      <span class=\"coMULTI\">/*pick a blank cell in grid*/</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Hmove: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> Hplace,dr dc;     <span class=\"kw1\">if</span> Hplace==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> Hplace = <span class=\"br0\">(</span>dr - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>N    +  dc<br/>       @<span class=\"sy0\">.</span>Hplace=cm                                           <span class=\"coMULTI\">/*place computer's marker. */</span><br/>       <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span>  $   <span class=\"st0\">'computer places a marker  ['</span>cm<span class=\"st0\">\"]  at cell number  \"</span>    Hplace<br/>       <span class=\"kw1\">call</span> showGrid<br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showGrid: _=<span class=\"nu0\">0</span>;              cW=<span class=\"nu0\">5</span>;     cH=<span class=\"nu0\">3</span>;         open=<span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*cell width,  cell height.*/</span><br/>           <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> N                                    <span class=\"coMULTI\">/*construct array of cells.*/</span><br/>             <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> N;  _=_ + <span class=\"nu0\">1</span>;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"6c0f512c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>_;    open=open <span class=\"sy0\">|</span> @<span class=\"sy0\">.</span>_==<span class=\"st0\">''</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>           <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span>                                     <span class=\"coMULTI\">/* [\u2191]  OPEN\u2261a cell is open*/</span><br/>       <span class=\"kw1\">say</span>                                                   <span class=\"coMULTI\">/* [\u2191]  create grid co\u00f6rds.*/</span><br/>       z=<span class=\"nu0\">0</span>;          <span class=\"kw1\">do</span>     j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  N                      <span class=\"coMULTI\">/* [\u2193]  show grids&amp;markers.*/</span><br/>                       <span class=\"kw1\">do</span>   t=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> cH;    _=;  __=         <span class=\"coMULTI\">/*MK is a marker in a cell.*/</span><br/>                         <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  N;    <span class=\"kw1\">if</span> t==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> z=z + <span class=\"nu0\">1</span>;        mk=;     c#=<br/>                         <span class=\"kw1\">if</span> t==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <a class=\"__cf_email__\" data-cfemail=\"e5888ed8a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>z;       c#=z       <span class=\"coMULTI\">/*c# is cell number*/</span><br/>                                       <span class=\"kw3\">end</span><br/>                          _= _  <span class=\"sy0\">||</span> jam <span class=\"sy0\">||</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>mk, cW<span class=\"br0\">)</span><br/>                         __= __ <span class=\"sy0\">||</span> jam <span class=\"sy0\">||</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>c#, cW<span class=\"br0\">)</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                       <span class=\"kw1\">say</span> pad  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span><span class=\"br0\">)</span>  pad  <span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>__, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,  single, dbl<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*t*/</span>                                 <span class=\"coMULTI\">/* [\u2191]  show a line*/</span><br/>                     <span class=\"kw1\">if</span> j==N  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>                     _=<br/>                        <span class=\"kw1\">do</span> b=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  N;       _=_ <span class=\"sy0\">||</span> junc <span class=\"sy0\">||</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span>bar, cW<span class=\"br0\">)</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*b*/</span>                                  <span class=\"coMULTI\">/* [\u2191]  a grid part*/</span><br/>                     <span class=\"kw1\">say</span>   pad  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span><span class=\"br0\">)</span>  pad  <span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,  <span class=\"nu0\">2</span><span class=\"br0\">)</span>,  single, dbl<span class=\"br0\">)</span><br/>                     <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*j*/</span><br/>       <span class=\"kw1\">say</span><br/>       <span class=\"kw1\">if</span> win<span class=\"br0\">(</span>hm<span class=\"br0\">)</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">call</span> tell  <span class=\"st0\">'You  ('</span>hm<span class=\"st0\">\")  won\"</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'!'</span>,<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> win<span class=\"br0\">(</span>cm<span class=\"br0\">)</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">call</span> tell  <span class=\"st0\">'The computer  ('</span>cm<span class=\"st0\">\")  won.\"</span><br/>       <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>open    <span class=\"kw3\">then</span>  <span class=\"kw1\">call</span> tell  <span class=\"st0\">'This tic\u2500tac\u2500toe game is a draw   (a cat scratch).'</span><br/>       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell:  <span class=\"kw1\">do</span> <span class=\"nu0\">4</span>; <span class=\"kw1\">say</span>; <span class=\"kw3\">end</span>;     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">\" \"</span>, sw, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>;      <span class=\"kw1\">do</span> <span class=\"nu0\">5</span>; <span class=\"kw1\">say</span>; <span class=\"kw3\">end</span>;    <span class=\"kw1\">exit</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>testB: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> bx; <span class=\"kw1\">if</span> bx<span class=\"sy0\">\\</span>==<span class=\"st0\">' '</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> bx <span class=\"coMULTI\">/*test if the  marker  isn't  a  blank.*/</span><br/>       <span class=\"kw1\">say</span> oops   <span class=\"st0\">'character code for'</span>      whoseX      <span class=\"st0\">\"marker can't be a blank.\"</span><br/>       <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>win:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> wm,w;            <span class=\"kw1\">if</span> w==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> w=N     <span class=\"coMULTI\">/* [\u2193]  see if there is a win. */</span><br/>       ac=                                               <span class=\"coMULTI\">/* [\u2193]  EC \u2261 means Empty Cell. */</span><br/>            <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;      _=<span class=\"nu0\">0</span>;   ec=             <span class=\"coMULTI\">/*see if any  rows are a winner*/</span><br/>              <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;      _=_ + <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==wm<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*count the # of markers in col*/</span><br/>              <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> ec=r c                  <span class=\"coMULTI\">/*Cell empty?  Then remember it*/</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                                <span class=\"coMULTI\">/* [\u2193]  AX\u2261means avaiable cell.*/</span><br/>            <span class=\"kw1\">if</span> ec<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> ac=ec                       <span class=\"coMULTI\">/*Found an empty?  Then use it.*/</span><br/>            <span class=\"kw1\">if</span> _==N <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_<span class=\"sy0\">&gt;</span>=w <span class=\"sy0\">&amp;</span> ec<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*a winner has been determined.*/</span><br/>            <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span>                                <span class=\"coMULTI\">/*w=N-1?  Checking for near win*/</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span>   c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;     _=<span class=\"nu0\">0</span>;   ec=              <span class=\"coMULTI\">/*see if any  cols are a winner*/</span><br/>              <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;     _=_ + <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==wm<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*count the # of markers in row*/</span><br/>              <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> ec=r c                  <span class=\"coMULTI\">/*Cell empty?  Then remember it*/</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>            <span class=\"kw1\">if</span> ec<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> ac=ec                       <span class=\"coMULTI\">/*Found an empty? Then remember*/</span><br/>            <span class=\"kw1\">if</span> _==N <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_<span class=\"sy0\">&gt;</span>=w <span class=\"sy0\">&amp;</span> ec<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*a winner has been determined.*/</span><br/>            <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*c*/</span><br/>       _=<span class=\"nu0\">0</span><br/>       ec=                                               <span class=\"coMULTI\">/*EC\u2261location of an empty cell.*/</span><br/>            <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;       _=_ + <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>d<span class=\"sy0\">.</span>d==wm<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*A winning descending diag.\u00a0? */</span><br/>            <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>d<span class=\"sy0\">.</span>d==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> ec=d d                    <span class=\"coMULTI\">/*Empty cell?  Then note cell #*/</span><br/>            <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*d*/</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> _==N <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_<span class=\"sy0\">&gt;</span>=w <span class=\"sy0\">&amp;</span> ec<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*a winner has been determined.*/</span><br/>       _=<span class=\"nu0\">0</span>;                                  r=<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">do</span> c=N  <span class=\"kw2\">for</span> N  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;   _=_ + <span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==wm<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*A winning ascending diagonal?*/</span><br/>            <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> ec=r c                    <span class=\"coMULTI\">/*Empty cell?  Then note cell #*/</span><br/>            r=r + <span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*bump the counter for the rows*/</span><br/>            <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*c*/</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> _==N <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_<span class=\"sy0\">&gt;</span>=w <span class=\"sy0\">&amp;</span> ec<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*a winner has been determined.*/</span><br/>       <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                          <span class=\"coMULTI\">/*no winner \"    \"       \"     */</span></pre>"}, {"lang": "Ring", "loc": 131, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Load \"guilib.ring\"<br/>\u00a0<br/>#Provide a list to save each button status in numeric readable format<br/>#0=nothing 1=X 2=O<br/>lst=[]<br/>\u00a0<br/>#Provide onScreen button status and style<br/>btns=[]<br/>\u00a0<br/>#Define who has the turn<br/>isXTurn=true<br/>\u00a0<br/>\u00a0<br/>    app=new qApp<br/>    {<br/>\u00a0<br/>        frmMain=new qMainWindow()<br/>\t\t{<br/>\t\t\tsetWindowTitle(\"TicTacToe!\")<br/>\t\t\tresize(300,320)<br/>\t\t\tmove(200,200)<br/>\t\t\t//buttons<br/>\t\t\tpos=0<br/>\t\t\tfor y=0 to 2<br/>\t\t\t\tfor x=0 to 2<br/>\t\t\t\t//Creating Buttons on the screen<br/>\t\t\t\t\tpos++<br/>\t\t\t\t\tAdd(lst,0)<br/>\t\t\t\t\tAdd(btns,new qPushButton(frmMain)<br/>\t\t\t\t\t\t{<br/>\t\t\t\t\t\t\tsetGeometry(x*100,y*100,100,100)<br/>\t\t\t\t\t\t\tsetText(\"-\")<br/>\t\t\t\t\t\t\tsetclickevent(\"Disp(\" + pos +\")\")<br/>\t\t\t\t\t\t\tsetstylesheet(\"font-size:24pt\u00a0; font: bold\u00a0; color:yellow\u00a0; background-color: green\")<br/>\t\t\t\t\t\t})<br/>\t\t\t\tnext<br/>            next<br/>\t\t\t//StatusBar<br/>\t\t\tstatus=new qStatusBar(frmMain)<br/>\t\t\t{<br/>                showMessage(\"Ready\",0)<br/>            }<br/>\t\t\tsetwindowflags(Qt_dialog)<br/>\t\t\tsetStatusbar(status)<br/>\t\t\tshow()<br/>        }<br/>\t\texec()<br/>\t}<br/>\u00a0<br/>//Restart the game by re init buttons status<br/>func reStart<br/>    for i=1 to 9<br/>        lst[i]=0<br/>        btns[i].setText(\"-\")<br/>    next  <br/>isXTurn=true<br/>\u00a0<br/>func Disp x<br/>    if isXTurn=true and lst[x]=0<br/>\t\tbtns[x].setText(\"X\")<br/>\t\tlst[x]=1<br/>\t\tisXTurn=false<br/>\tbut isXTurn=false and lst[x]=0<br/>        btns[x].setText(\"O\")<br/>        lst[x]=2<br/>        isXTurn=true<br/>    ok<br/>\u00a0<br/>\twinner = CheckWinner()<br/>\t#if there is no Winner and still there is ability to winner<br/>\t#continue playing.<br/>\tif winner&lt;1 return ok<br/>\u00a0<br/>\t//Who is the winner!<br/>    switch winner<br/>        on 1<br/>            new qMessagebox(frmMain)<br/>            {<br/>\t\t\t\tSetWindowTitle(\"We have a winner!\")<br/>                SetText(\"Good job X you won!\")<br/>                show()<br/>            }<br/>        on 2<br/>\t\t\tnew qMessagebox(frmMain)<br/>            {<br/>\t\t\t\tSetWindowTitle(\"We have a winner!\")<br/>                SetText(\"Good job O you won!\")<br/>                show()<br/>            }<br/>        on 3<br/>            new qMessagebox(frmMain)<br/>            {<br/>                SetWindowTitle(\"Oh no it's a tie\")<br/>                SetText(\"Oh no it's a tie!\")<br/>                show()<br/>            }<br/>    off<br/>    reStart()<br/>\u00a0<br/>func CheckWinner<br/>        //vertical check<br/>        for v=1 to 9 step 3<br/>            if lst[v]!=0 and lst[v+1]!=0 and lst[v+2]!=0<br/>\t\t\t\tif lst[v]=lst[v+1] and lst[v+1]=lst[v+2]<br/>                    return lst[v]<br/>                ok<br/>            ok<br/>        next<br/>        //horzintal<br/>        for h=1 to 3<br/>            if lst[h]!=0 and lst[h+3]!=0 and lst[h+6]!=0<br/>                if lst[h]=lst[h+3] and lst[h+3]=lst[h+6]<br/>                    return lst[h]<br/>                ok<br/>            ok<br/>        next<br/>        //Cross<br/>        if lst[1]!=0 and lst[5]!=0 and lst[9]!=0<br/>            if lst[1]=lst[5] and lst[5]=lst[9] return lst[1] ok<br/>        ok<br/>        if lst[3]!=0 and lst[5]!=0 and lst[7]!=0<br/>            if lst[3]=lst[5] and lst[5]=lst[7] return lst[3] ok<br/>        ok<br/>        //tie<br/>        tie=true<br/>        for i=1 to 9<br/>            if lst[i]=0 tie=false exit ok<br/>        next<br/>        if tie=true return 3 ok return 0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 188, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/>\u00a0<br/><span class=\"kw1\">module</span> TicTacToe<br/>  LINES = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> Game<br/>    <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>player_1_class, player_2_class<span class=\"br0\">)</span><br/>      <span class=\"re1\">@board</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\"># we ignore index 0 for convenience</span><br/>\u00a0<br/>      <span class=\"re1\">@current_player_id</span> = <span class=\"nu0\">0</span><br/>      <span class=\"re1\">@players</span> = <span class=\"br0\">[</span>player_1_class.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>, <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span>, player_2_class.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>, <span class=\"st0\">\"O\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{current_player} goes first.\"</span><br/>    <span class=\"kw1\">end</span><br/>    attr_reader <span class=\"re3\">:board</span>, <span class=\"re3\">:current_player_id</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> play<br/>      <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>        place_player_marker<span class=\"br0\">(</span>current_player<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> player_has_won?<span class=\"br0\">(</span>current_player<span class=\"br0\">)</span><br/>          <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{current_player} wins!\"</span><br/>          print_board<br/>          <span class=\"kw2\">return</span><br/>        <span class=\"kw1\">elsif</span> board_full?<br/>          <span class=\"kw3\">puts</span> <span class=\"st0\">\"It's a draw.\"</span><br/>          print_board<br/>          <span class=\"kw2\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        switch_players!<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> free_positions<br/>      <span class=\"kw4\">Set</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>position<span class=\"sy0\">|</span> <span class=\"re1\">@board</span><span class=\"br0\">[</span>position<span class=\"br0\">]</span>.<span class=\"kw2\">nil</span>?<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> place_player_marker<span class=\"br0\">(</span>player<span class=\"br0\">)</span><br/>      position = player.<span class=\"me1\">select_position</span>!<br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{player} selects #{player.marker} position #{position}\"</span><br/>      <span class=\"re1\">@board</span><span class=\"br0\">[</span>position<span class=\"br0\">]</span> = player.<span class=\"me1\">marker</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> player_has_won?<span class=\"br0\">(</span>player<span class=\"br0\">)</span><br/>      LINES.<span class=\"me1\">any</span>? <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>        line.<span class=\"me1\">all</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>position<span class=\"sy0\">|</span> <span class=\"re1\">@board</span><span class=\"br0\">[</span>position<span class=\"br0\">]</span> == player.<span class=\"me1\">marker</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> board_full?<br/>      free_positions.<span class=\"me1\">empty</span>?<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> other_player_id<br/>      <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"re1\">@current_player_id</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> switch_players!<br/>      <span class=\"re1\">@current_player_id</span> = other_player_id<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> current_player<br/>      <span class=\"re1\">@players</span><span class=\"br0\">[</span>current_player_id<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> opponent<br/>      <span class=\"re1\">@players</span><span class=\"br0\">[</span>other_player_id<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> turn_num<br/>      <span class=\"nu0\">10</span> <span class=\"sy0\">-</span> free_positions.<span class=\"me1\">size</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> print_board<br/>      col_separator, row_separator = <span class=\"st0\">\" | \"</span>, <span class=\"st0\">\"--+---+--\"</span><br/>      label_for_position = <span class=\"kw3\">lambda</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>position<span class=\"sy0\">|</span> <span class=\"re1\">@board</span><span class=\"br0\">[</span>position<span class=\"br0\">]</span>\u00a0? <span class=\"re1\">@board</span><span class=\"br0\">[</span>position<span class=\"br0\">]</span>\u00a0: position<span class=\"br0\">}</span><br/>\u00a0<br/>      row_for_display = <span class=\"kw3\">lambda</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> row.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>label_for_position<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>col_separator<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      row_positions = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      rows_for_display = row_positions.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>row_for_display<span class=\"br0\">)</span><br/>      <span class=\"kw3\">puts</span> rows_for_display.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span> row_separator <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> Player<br/>    <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>game, marker<span class=\"br0\">)</span><br/>      <span class=\"re1\">@game</span> = game<br/>      <span class=\"re1\">@marker</span> = marker<br/>    <span class=\"kw1\">end</span><br/>    attr_reader <span class=\"re3\">:marker</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> HumanPlayer <span class=\"sy0\">&lt;</span> Player<br/>    <span class=\"kw1\">def</span> select_position!<br/>      <span class=\"re1\">@game</span>.<span class=\"me1\">print_board</span><br/>      <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"Select your #{marker} position: \"</span><br/>        selection = <span class=\"kw3\">gets</span>.<span class=\"me1\">to_i</span><br/>        <span class=\"kw2\">return</span> selection <span class=\"kw1\">if</span> <span class=\"re1\">@game</span>.<span class=\"me1\">free_positions</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>selection<span class=\"br0\">)</span><br/>        <span class=\"kw3\">puts</span> <span class=\"st0\">\"Position #{selection} is not available. Try again.\"</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> to_s<br/>      <span class=\"st0\">\"Human\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> ComputerPlayer <span class=\"sy0\">&lt;</span> Player<br/>    DEBUG = <span class=\"kw2\">false</span> <span class=\"co1\"># edit this line if necessary</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> group_positions_by_markers<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>      markers = line.<span class=\"me1\">group_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>position<span class=\"sy0\">|</span> <span class=\"re1\">@game</span>.<span class=\"me1\">board</span><span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>      markers.<span class=\"me1\">default</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      markers<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> select_position!<br/>      opponent_marker = <span class=\"re1\">@game</span>.<span class=\"me1\">opponent</span>.<span class=\"me1\">marker</span><br/>\u00a0<br/>      winning_or_blocking_position = look_for_winning_or_blocking_position<span class=\"br0\">(</span>opponent_marker<span class=\"br0\">)</span><br/>      <span class=\"kw2\">return</span> winning_or_blocking_position <span class=\"kw1\">if</span> winning_or_blocking_position<br/>\u00a0<br/>      <span class=\"kw1\">if</span> corner_trap_defense_needed?<br/>        <span class=\"kw2\">return</span> corner_trap_defense_position<span class=\"br0\">(</span>opponent_marker<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>\u00a0<br/>      <span class=\"co1\"># could make this smarter by sometimes doing corner trap offense</span><br/>\u00a0<br/>      <span class=\"kw2\">return</span> random_prioritized_position<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> look_for_winning_or_blocking_position<span class=\"br0\">(</span>opponent_marker<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> LINES<br/>        markers = group_positions_by_markers<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> markers<span class=\"br0\">[</span><span class=\"kw2\">nil</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span>\u00a0!= <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> markers<span class=\"br0\">[</span><span class=\"kw2\">self</span>.<span class=\"me1\">marker</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> == <span class=\"nu0\">2</span><br/>          log_debug <span class=\"st0\">\"winning on line #{line.join}\"</span><br/>          <span class=\"kw2\">return</span> markers<span class=\"br0\">[</span><span class=\"kw2\">nil</span><span class=\"br0\">]</span>.<span class=\"me1\">first</span><br/>        <span class=\"kw1\">elsif</span> markers<span class=\"br0\">[</span>opponent_marker<span class=\"br0\">]</span>.<span class=\"me1\">length</span> == <span class=\"nu0\">2</span><br/>          log_debug <span class=\"st0\">\"could block on line #{line.join}\"</span><br/>          blocking_position = markers<span class=\"br0\">[</span><span class=\"kw2\">nil</span><span class=\"br0\">]</span>.<span class=\"me1\">first</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">if</span> blocking_position<br/>        log_debug <span class=\"st0\">\"blocking at #{blocking_position}\"</span><br/>        <span class=\"kw2\">return</span> blocking_position<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> corner_trap_defense_needed?<br/>      corner_positions = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>      opponent_chose_a_corner = corner_positions.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>pos<span class=\"sy0\">|</span> <span class=\"re1\">@game</span>.<span class=\"me1\">board</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>\u00a0!= <span class=\"kw2\">nil</span><span class=\"br0\">}</span><br/>      <span class=\"kw2\">return</span> <span class=\"re1\">@game</span>.<span class=\"me1\">turn_num</span> == <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> opponent_chose_a_corner<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> corner_trap_defense_position<span class=\"br0\">(</span>opponent_marker<span class=\"br0\">)</span><br/>      <span class=\"co1\"># if you respond in the center or the opposite corner, the opponent can force you to lose</span><br/>      log_debug <span class=\"st0\">\"defending against corner start by playing adjacent\"</span><br/>      <span class=\"co1\"># playing in an adjacent corner could also be safe, but would require more logic later on</span><br/>      opponent_position = <span class=\"re1\">@game</span>.<span class=\"me1\">board</span>.<span class=\"me1\">find_index</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>marker<span class=\"sy0\">|</span> marker == opponent_marker<span class=\"br0\">}</span><br/>      safe_responses = <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"nu0\">3</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"nu0\">7</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span>, <span class=\"nu0\">9</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">6</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>      <span class=\"kw2\">return</span> safe_responses<span class=\"br0\">[</span>opponent_position<span class=\"br0\">]</span>.<span class=\"me1\">sample</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> random_prioritized_position<br/>      log_debug <span class=\"st0\">\"picking random position, favoring center and then corners\"</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">shuffle</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">)</span>.<span class=\"me1\">find</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>pos<span class=\"sy0\">|</span><br/>        <span class=\"re1\">@game</span>.<span class=\"me1\">free_positions</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> log_debug<span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{self}: #{message}\"</span> <span class=\"kw1\">if</span> DEBUG<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> to_s<br/>      <span class=\"st0\">\"Computer#{@game.current_player_id}\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">include</span> TicTacToe<br/>\u00a0<br/>Game.<span class=\"me1\">new</span><span class=\"br0\">(</span>ComputerPlayer, ComputerPlayer<span class=\"br0\">)</span>.<span class=\"me1\">play</span><br/><span class=\"kw3\">puts</span><br/>players_with_human = <span class=\"br0\">[</span>HumanPlayer, ComputerPlayer<span class=\"br0\">]</span>.<span class=\"me1\">shuffle</span><br/>Game.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>players_with_human<span class=\"br0\">)</span>.<span class=\"me1\">play</span></pre>"}, {"lang": "Run BASIC", "loc": 102, "block": "<pre class=\"text highlighted_source\">' ---------------------------<br/>'  TIC TAC TOE<br/>' ---------------------------<br/>winBox$ = \"123 456 789 159 147 258 369 357\"<br/>boxPos$ = \"123 231 456 564 789 897 159 591 357 753 132 465 798 174 285 396 159 471 582 693 147 258 369 195 375\"<br/>ai$     = \"519628374\"<br/>ox$     = \"OX\" <br/>[newGame]<br/>for i = 1 to 9<br/> box$(i) = \"\"<br/>next i<br/>goto [shoTic]<br/>\u00a0<br/>[loop]<br/>for j = 1 to 2<br/> tic$ = mid$(ox$,j,1)<br/> for i = 1 to 25<br/>  b$\t= word$(boxPos$,i,\" \")<br/>  b1\t= val(mid$(b$,1,1))<br/>  b2\t= val(mid$(b$,2,1))<br/>  b3\t= val(mid$(b$,3,1))<br/>  if box$(b1) = tic$ AND box$(b2) = tic$ AND box$(b3) = \"\" then<br/>     box$(b3)  = \"O\"<br/>     goto [shoTic]<br/> end if<br/> next i<br/>next j<br/>if box$(1) = \"O\" AND box$(5) = \"X\" and box$(9) = \"X\" then<br/> if box$(3) = \"\" then<br/>   box$(3) = \"O\"<br/>   goto [shoTic]<br/> end if<br/> if box$(7) = \"\" then<br/>   box$(7) = \"O\"<br/>   goto [shoTic]<br/> end if<br/>end if<br/>for i = 1 to 9<br/> b1 = val(mid$(ai$,i,1))<br/> if box$(b1) = \"\" then<br/>   box$(b1)  = \"O\"<br/>   exit for<br/> end if<br/>next i<br/>\u00a0<br/>[shoTic]<br/>cls<br/>' ----------------------------------------<br/>' show tic tac toe screen<br/>' ----------------------------------------<br/>html \"&lt;table border=1 width=300px height=225px&gt;&lt;TR&gt;\"<br/>for i = 1 to 9<br/>  html \"&lt;td align=center width=33%&gt;&lt;h1&gt;\"<br/>    if box$(i) &lt;&gt; \"\" then <br/>     html box$(i)<br/>    else<br/>    button #box, \" \";box$(i);\" \", [doTic]<br/>           #box  setkey(str$(i))<br/>    end if<br/>    if i mod 3 = 0 then html \"&lt;/tr&gt;&lt;tr&gt;\"<br/>next i<br/>html \"&lt;/table&gt;\"<br/>gosub [checkWin]<br/>wait<br/>\u00a0<br/>[doTic]<br/>box$(val(EventKey$)) = \"X\"<br/>turn          = 1<br/>gosub [checkWin]<br/>goto [loop]<br/>\u00a0<br/>' --- check for a winner ----------<br/>[checkWin]<br/>for i = 1 to 8<br/> b$ = word$(winBox$,i,\" \")<br/> b1 = val(mid$(b$,1,1))<br/> b2 = val(mid$(b$,2,1))<br/> b3 = val(mid$(b$,3,1))<br/> if box$(b1) = \"O\" and box$(b2) = \"O\" and box$(b3) = \"O\" then<br/>   print \"You Lose!\"<br/>   goto [playAgain]<br/> end if<br/> if box$(b1) = \"X\" and box$(b2) = \"X\" and box$(b3) = \"X\" then<br/>   print \"You Win!\"<br/>   goto [playAgain]<br/> end if<br/>next i<br/>\u00a0<br/>moveCount = 0<br/>for i = 1 to 9<br/> if box$(i) &lt;&gt; \"\" then moveCount = moveCount + 1 <br/>next i<br/>if moveCount = 9 then<br/>  print \"Draw!\"<br/>  goto [playAgain]<br/>end if<br/>RETURN<br/>\u00a0<br/>[playAgain]<br/>input \"Play again (y/n)\";p$<br/>if upper$(p$) = \"Y\" then goto [newGame]<br/>end</pre>"}, {"lang": "Scala", "loc": 82, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">package</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> tictactoe <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Human <span class=\"sy0\">=</span> <span class=\"st0\">'X'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Computer <span class=\"sy0\">=</span> <span class=\"st0\">'O'</span>  <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> BaseBoard <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span> to <span class=\"st0\">'9'</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> WinnerLines <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> randomGen <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> util.<span class=\"me1\">Random</span><span class=\"br0\">(</span>System.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">package</span></a> tictactoe <span class=\"br0\">{</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Board<span class=\"br0\">(</span>aBoard <span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Char<span class=\"br0\">]</span> <span class=\"sy0\">=</span> BaseBoard<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> availableMoves <span class=\"sy0\">=</span> aBoard.<span class=\"me1\">filter</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">!=</span> Human <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">!=</span> Computer<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> availableMovesIdxs <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>c,i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>- aBoard.<span class=\"me1\">zipWithIndex</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> c <span class=\"sy0\">!=</span> Human <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">!=</span> Computer<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> i<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> computerPlays <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Board<span class=\"br0\">(</span>aBoard.<span class=\"me1\">updated</span><span class=\"br0\">(</span>availableMovesIdxs<span class=\"br0\">(</span>randomGen.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>availableMovesIdxs.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, Computer<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> humanPlays<span class=\"br0\">(</span>move <span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Board<span class=\"br0\">(</span>aBoard.<span class=\"me1\">updated</span><span class=\"br0\">(</span>aBoard.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>move<span class=\"br0\">)</span>, Human<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isDraw <span class=\"sy0\">=</span> aBoard.<span class=\"me1\">forall</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">==</span> Human || c <span class=\"sy0\">==</span> Computer<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isWinner<span class=\"br0\">(</span>winner <span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    WinnerLines.<span class=\"me1\">exists</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>i,j,k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> aBoard<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> winner <span class=\"sy0\">&amp;&amp;</span> aBoard<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> winner <span class=\"sy0\">&amp;&amp;</span> aBoard<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">==</span> winner<span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isOver <span class=\"sy0\">=</span> isWinner<span class=\"br0\">(</span>Computer<span class=\"br0\">)</span> || isWinner<span class=\"br0\">(</span>Human<span class=\"br0\">)</span> || isDraw<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> print <span class=\"br0\">{</span> <br/>    aBoard.<span class=\"me1\">grouped</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>row<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> + row<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span> + row<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> printOverMessage <span class=\"br0\">{</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isWinner<span class=\"br0\">(</span>Human<span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"You win.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isWinner<span class=\"br0\">(</span>Computer<span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Computer wins.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isDraw<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"It's a draw.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Not over yet, or something went wrong.\"</span><span class=\"br0\">)</span>     <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TicTacToe <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span>   <br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> play<span class=\"br0\">(</span>board <span class=\"sy0\">:</span> Board, turn <span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// Reads a char from input until it is one of</span><br/>    <span class=\"co1\">// the available moves in the current board</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> readValidMove<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Char <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      print<span class=\"br0\">(</span><span class=\"st0\">\"Choose a move: \"</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> validMoves <span class=\"sy0\">=</span> board.<span class=\"me1\">availableMoves</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> move <span class=\"sy0\">=</span> readChar<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>validMoves.<span class=\"me1\">contains</span><span class=\"br0\">(</span>move<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        move<br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Invalid move. Choose another one in \"</span> + validMoves<span class=\"br0\">)</span><br/>        readValidMove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    board.<span class=\"me1\">print</span>    <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>board.<span class=\"me1\">isOver</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      board.<span class=\"me1\">printOverMessage</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>turn <span class=\"sy0\">==</span> Human<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Human plays            </span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nextBoard <span class=\"sy0\">=</span> board.<span class=\"me1\">humanPlays</span><span class=\"br0\">(</span>readValidMove<span class=\"br0\">)</span>      <br/>      play<span class=\"br0\">(</span>nextBoard, Computer<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <span class=\"co1\">// Computer plays</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Computer plays: \"</span><span class=\"br0\">)</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nextBoard <span class=\"sy0\">=</span> board.<span class=\"me1\">computerPlays</span> <br/>      play<span class=\"br0\">(</span>nextBoard, Human<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>    <br/>  <span class=\"br0\">}</span>   <br/>\u00a0<br/>  play<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Board<span class=\"br0\">(</span><span class=\"br0\">)</span>,Human<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 379, "block": "<pre class=\"text highlighted_source\">function [] = startGame()<br/>    //Board size and marks<br/>    N = 3;<br/>    marks = [\"X\" \"O\"];<br/>\u00a0<br/>    //Creating empty board<br/>    board = string(zeros(N,N));<br/>    for i = 1:(N*N)<br/>        board(i) = \"\";<br/>    end<br/>\u00a0<br/>    //Initialising players<br/>    clc();<br/>    players= [%F\u00a0%F];<br/>    players = playerSetup(marks);<br/>\u00a0<br/>    //Console header<br/>    header = [strsplit(marks(1)+\" is ----\")';...<br/>              strsplit(marks(2)+\" is ----\")'];<br/>    for i = 1:2<br/>        if players(i) then<br/>            header(i,6:10) = strsplit(\"P\"+string(i)+\".  \");<br/>        else<br/>            header(i,6:10) = strsplit(\"COMP.\");<br/>        end<br/>    end<br/>\u00a0<br/>    //Game loop<br/>    sleep(1000);<br/>    win_flag =\u00a0%F;<br/>    count = 0;<br/>    while count&lt;N*N<br/>        //Clear console, and print header and board<br/>        clc();<br/>        printf(\"%s\\n\u00a0%s\\n\",strcat(header(1,:)),strcat(header(2,:)));<br/>        dispBoard(board);<br/>\u00a0<br/>        //Find which player should move<br/>        player_n = modulo(count,2) + 1;<br/>\u00a0<br/>        if players(player_n) ==\u00a0%T then<br/>            //Human plays<br/>            pos = [];<br/>            valid_move =\u00a0%F;<br/>            disp(marks(player_n)+\"''s turn.\");<br/>            while valid_move ~=\u00a0%T<br/>                [pos,valid_move] = readHumanMove(board);<br/>                if ~valid_move then<br/>                    disp(\"You should input a valid cell number.\");<br/>                end<br/>            end<br/>\u00a0<br/>            if valid_move then<br/>                board = updateBoard(board,pos,marks(player_n));<br/>            else<br/>                error(\"Invalid move.\");<br/>            end<br/>        else<br/>            //Computer plays<br/>            disp(\"Computer is playing.\");<br/>            board = ComputerMove(board,marks(player_n),marks);<br/>            sleep(800);<br/>        end<br/>\u00a0<br/>        //Count number of movements<br/>        count = count + 1;<br/>\u00a0<br/>        //Check if the game has finished<br/>        [win_flag,winning_mark] = detectWin(board)<br/>        if win_flag then<br/>            break<br/>        end<br/>    end<br/>\u00a0<br/>    //Clear screen at the end of game<br/>    clc();<br/>    disp(\"Game finished:\");<br/>    dispBoard(board);<br/>\u00a0<br/>    //Print results<br/>    if win_flag then<br/>        disp(winning_mark+\" won!\");<br/>    else<br/>        disp(\"It''s a tie.\");<br/>    end<br/>\u00a0<br/>    //Play again?<br/>    play_again = \"\";<br/>    while play_again ~= \"Y\" &amp; play_again ~= \"N\"<br/>        play_again = input(\"Would you like to play again? (Y/N)\",\"s\");<br/>        play_again = strsplit(play_again);<br/>        play_again = convstr(play_again(1),\"u\");<br/>\u00a0<br/>        if play_again ~= \"Y\" &amp; play_again ~= \"N\" then<br/>            disp(\"Invalid answer.\");<br/>        end<br/>    end<br/>\u00a0<br/>    if play_again == \"Y\" then<br/>        startGame();<br/>    else<br/>        disp(\"Quit game.\");<br/>    end<br/>endfunction<br/>\u00a0<br/>function players = playerSetup(marks)<br/>    //Determines who plays which mark<br/>    players = [%F\u00a0%F]; //True for human, Flase for computer<br/>\u00a0<br/>    printf(\"\\n%s always starts.\\n\",marks(1));<br/>    for i = 1:2<br/>        user_input = \"\";<br/>        while user_input ~= \"Y\" &amp; user_input ~= \"N\"<br/>            user_input = input(\"Would you like to play as \"+marks(i)+\"? (Y/N)\",\"s\");<br/>            user_input = strsplit(user_input);<br/>            user_input = convstr(user_input(1),\"u\");<br/>\u00a0<br/>            if user_input ~= \"Y\" &amp; user_input ~= \"N\" then<br/>                disp(\"Invalid answer.\");<br/>            end<br/>        end<br/>\u00a0<br/>        //Print choice<br/>        if user_input == \"Y\" then<br/>            players(i) =\u00a0%T;<br/>            printf(\"%s shall be player\u00a0%d (P%d).\\n\\n\",marks(i),i,i);<br/>        else<br/>            printf(\"%s shall be the computer (COMP).\\n\\n\",marks(i));<br/>        end<br/>    end<br/>endfunction<br/>\u00a0<br/>function [] = dispBoard(board)<br/>    //Print ASCII board on console<br/>\u00a0<br/>    //Get board marks<br/>    marks = [\" \" \" \"];<br/>    mark_inds = find(board ~= \"\");<br/>    if mark_inds ~= [] then<br/>        marks(1) = board(mark_inds(1));<br/>        mark_inds = find( (board ~= \"\") &amp; (board ~= marks(1)) );<br/>        if mark_inds ~= [] then<br/>            marks(2) = board(mark_inds(1));<br/>        end<br/>    end<br/>\u00a0<br/>    //Transpose to display for humans<br/>    //[compatibility with readHumanMove()]<br/>    disp_board = board';<br/>\u00a0<br/>    rows = 3*size(board,'r');<br/>    cols = 4*size(board,'c');<br/>    ascii_board = string(zeros(rows, cols));<br/>\u00a0<br/>    mark_1=[...<br/>    strsplit(\"   |\")';...<br/>    strsplit(\" \"+marks(1)+\" |\")';...<br/>    strsplit(\"___|\")'];<br/>\u00a0<br/>    mark_2=[...<br/>    strsplit(\"   |\")';...<br/>    strsplit(\" \"+marks(2)+\" |\")';...<br/>    strsplit(\"___|\")'];<br/>\u00a0<br/>    Blank_mark=[...<br/>    strsplit(\"   |\")';...<br/>    strsplit(\"   |\")';...<br/>    strsplit(\"___|\")'];<br/>\u00a0<br/>    for r = ([1:size(board,'r')] - 1 )<br/>        for c = ([1:size(board,'c')] - 1)<br/>            if disp_board(r+1,c+1) == marks(1) then<br/>                ascii_board((r*3 + 1):((r+1)*3),...<br/>                            (c*4 + 1):((c+1)*4)) = mark_1;<br/>            elseif disp_board(r+1,c+1) == marks(2) then<br/>                ascii_board((r*3 + 1):((r+1)*3),...<br/>                            (c*4 + 1):((c+1)*4)) = mark_2;<br/>            else<br/>                ascii_board((r*3 + 1):((r+1)*3),...<br/>                            (c*4 + 1):((c+1)*4)) = Blank_mark;<br/>            end<br/>        end<br/>    end<br/>\u00a0<br/>    for i = 1:cols<br/>        if modulo(i,4)&gt;0 then<br/>            ascii_board(rows,i) = \" \";<br/>        end<br/>    end<br/>\u00a0<br/>    for i = 1:rows<br/>        ascii_board(i,cols) = \" \";<br/>    end<br/>\u00a0<br/>    printf(\"\\n\");<br/>    for i = 1:size(ascii_board,'r')<br/>        printf(\"%s\\n\",strcat(ascii_board(i,:)))<br/>    end<br/>endfunction<br/>\u00a0<br/>function moves_board = availableMoves(board)<br/>    //Find empty cells on the board<br/>    moves_board = board;<br/>\u00a0<br/>    for i = 1:(size(board,'r')*size(board,'c'))<br/>        if board(i) == \"\" then<br/>            moves_board(i) = string(i);<br/>        else<br/>            moves_board(i) = \"_\";<br/>        end<br/>    end<br/>endfunction<br/>\u00a0<br/>function varargout = readHumanMove(board)<br/>    //Read human input<br/>    printf(\"\\nAvailable cells:\");<br/>    moves_board = availableMoves(board);<br/>    disp(moves_board');<br/>\u00a0<br/>    x = input(\"\\nEnter a move (0 to quit game): \");<br/>\u00a0<br/>    valid =\u00a0%F;<br/>    pos = 0;<br/>    total = size(moves_board,'r') * size(moves_board,'c');<br/>\u00a0<br/>    //Check if it is a valid move<br/>    if x == 0 then<br/>        disp(\"Quit game.\")<br/>        abort<br/>    elseif (x&gt;=1 &amp; x&lt;=total) then<br/>        if (moves_board(x) == string(x)) then<br/>            valid =\u00a0%T;<br/>            pos = x;<br/>        end<br/>    end<br/>\u00a0<br/>    varargout = list(pos,valid);<br/>endfunction<br/>\u00a0<br/>function varargout = updateBoard(board,pos,player)<br/>    //Add move to the board<br/>    if board(pos) ~= \"\" then<br/>        error('Error: Invalid move.');<br/>    end<br/>\u00a0<br/>    board(pos) = player<br/>\u00a0<br/>    varargout = list(board);<br/>endfunction<br/>\u00a0<br/>function varargout = detectWin(board)<br/>    //Detect if there is a winner or not<br/>    win_flag =\u00a0%F;<br/>    winner = \"\";<br/>\u00a0<br/>    //Get board marks<br/>    marks = [\"\" \"\"];<br/>    mark_inds = find(board ~= \"\");<br/>    marks(1) = board(mark_inds(1))<br/>    mark_inds = find( (board ~= \"\") &amp; (board ~= marks(1)) );<br/>    marks(2) = board(mark_inds(1));<br/>\u00a0<br/>    //If there is a minimum number of moves, check if there is a winner<br/>    n_moves = find(~(board == \"\"));<br/>    n_moves = length(n_moves)<br/>\u00a0<br/>    if n_moves &gt;= size(board,'r') then<br/>        board_X = (board == marks(1));<br/>        board_O = (board == marks(2)); <br/>\u00a0<br/>        for i = 1:size(board,'r')<br/>            //Check rows<br/>            if find(~board_X(i,:)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(1);<br/>                break<br/>            end<br/>            if find(~board_O(i,:)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(2);<br/>                break<br/>            end<br/>\u00a0<br/>            //Check columns<br/>            if find(~board_X(:,i)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(1);<br/>                break<br/>            end<br/>            if find(~board_O(:,i)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(2);<br/>                break<br/>            end<br/>        end<br/>\u00a0<br/>        //Check diagonal<br/>        if ~win_flag then<br/>            if find(~diag(board_X)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(1);<br/>            elseif find(~diag(board_O)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(2);<br/>            end<br/>        end<br/>\u00a0<br/>        //Check anti-diagonal<br/>        if ~win_flag then<br/>            board_X = board_X(:,$:-1:1);<br/>            board_O = board_O(:,$:-1:1);<br/>\u00a0<br/>            if find(~diag(board_X)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(1);<br/>            elseif find(~diag(board_O)) == [] then<br/>                win_flag =\u00a0%T;<br/>                winner = marks(2);<br/>            end<br/>        end<br/>    end<br/>\u00a0<br/>    varargout = list(win_flag,winner)<br/>endfunction<br/>\u00a0<br/>function threat_pos = findThreat(board,player)<br/>    //Returns a list of moves that can finish the game<br/>\u00a0<br/>    //Available moves<br/>    move_inds = find(~( availableMoves(board) == \"_\" ));<br/>\u00a0<br/>    //If there is a minimum number of moves, check if there is a threat<br/>    threat_pos = [];<br/>    if (size(board,'r')*size(board,'c')) - length(move_inds) &gt;...<br/>       (size(board,'r') - 1) then<br/>        for i = 1:length(move_inds)<br/>            temp_board = updateBoard(board,move_inds(i),player);<br/>            [win_flag,winner] = detectWin(temp_board);<br/>            if win_flag &amp; winner == player then<br/>                threat_pos = [threat_pos move_inds(i)];<br/>            end<br/>        end<br/>    end<br/>endfunction<br/>\u00a0<br/>function varargout = ComputerMove(board,mark,all_marks)<br/>    //Atomatically add a move to the board with no human input<br/>\u00a0<br/>    //Find winning moves moves<br/>    move_inds = findThreat(board,mark);<br/>\u00a0<br/>    //If there are no winning moves, find opponent's winning moves<br/>    //to block opponent's victory<br/>    if move_inds == [] then<br/>        if mark == all_marks(1) then<br/>            opponent = all_marks(2);<br/>        elseif mark == all_marks(2) then<br/>            opponent = all_marks(1);<br/>        end<br/>\u00a0<br/>        move_inds = findThreat(board,opponent);<br/>    end<br/>\u00a0<br/>    //If there are no winning moves or threats, find all possible moves<br/>    if move_inds == [] then<br/>        move_inds = find(~( availableMoves(board) == \"_\" ));<br/>    end<br/>\u00a0<br/>    //Choose a random move among the selected possible moves<br/>    pos = grand(1,\"prm\",move_inds);<br/>    pos = pos(1);<br/>\u00a0<br/>    //Update board by adding a new mark<br/>    board(pos) = mark;<br/>\u00a0<br/>    varargout = list(board);    <br/>endfunction<br/>\u00a0<br/>startGame()</pre>"}, {"lang": "Swift", "loc": 208, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import Darwin<br/>\u00a0<br/>enum Token\u00a0: CustomStringConvertible {<br/>\tcase cross, circle<br/>\u00a0<br/>\tfunc matches(tokens: [Token?]) -&gt; Bool {<br/>\t\tfor token in tokens {<br/>\t\t\tguard let t = token, t == self else { <br/>\t\t\t\treturn false <br/>\t\t\t}<br/>\t\t}<br/>\t\treturn true<br/>\t}<br/>\u00a0<br/>\tfunc emptyCell(in tokens: [Token?]) -&gt; Int? {<br/>\t\tif tokens[0] == nil <br/>\t\t&amp;&amp; tokens[1] == self <br/>\t\t&amp;&amp; tokens[2] == self {<br/>\t\t\treturn 0<br/>\t\t} else<br/>\t\tif tokens[0] == self <br/>\t\t&amp;&amp; tokens[1] == nil <br/>\t\t&amp;&amp; tokens[2] == self {<br/>\t\t\treturn 1<br/>\t\t} else<br/>\t\tif tokens[0] == self <br/>\t\t&amp;&amp; tokens[1] == self <br/>\t\t&amp;&amp; tokens[2] == nil {<br/>\t\t\treturn 2<br/>\t\t}<br/>\t\treturn nil<br/>\t}<br/>\u00a0<br/>\tvar description: String {<br/>\t\tswitch self {<br/>\t\t\tcase .cross: return \"x\" <br/>\t\t\tcase .circle: return \"o\"<br/>\t\t}<br/>\t}<br/>}<br/>\u00a0<br/>struct Board {<br/>\tvar cells: [Token?] = [nil, nil, nil, nil, nil, nil, nil, nil, nil]<br/>\u00a0<br/>\tfunc cells(atCol col: Int) -&gt; [Token?] {<br/>\t\treturn [cells[col], cells[col + 3], cells[col + 6]]<br/>\t}<br/>\u00a0<br/>\tfunc cells(atRow row: Int) -&gt; [Token?] {<br/>\t\treturn [cells[row * 3], cells[row * 3 + 1], cells[row * 3 + 2]]<br/>\t}<br/>\u00a0<br/>\tfunc cellsTopLeft() -&gt; [Token?] {<br/>\t\treturn [cells[0], cells[4], cells[8]]<br/>\t}<br/>\u00a0<br/>\tfunc cellsBottomLeft() -&gt; [Token?] {<br/>\t\treturn [cells[6], cells[4], cells[2]]<br/>\t}<br/>\u00a0<br/>\tfunc winner() -&gt; Token? {<br/>\t\tlet r0 = cells(atRow: 0)<br/>\t\tlet r1 = cells(atRow: 1)<br/>\t\tlet r2 = cells(atRow: 2)<br/>\t\tlet c0 = cells(atCol: 0)<br/>\t\tlet c1 = cells(atCol: 1)<br/>\t\tlet c2 = cells(atCol: 2)<br/>\t\tlet tl = cellsTopLeft()<br/>\t\tlet bl = cellsBottomLeft()<br/>\u00a0<br/>\t\tif Token.cross.matches(tokens: r0)<br/>\t\t|| Token.cross.matches(tokens: r1)<br/>\t\t|| Token.cross.matches(tokens: r2)<br/>\t\t|| Token.cross.matches(tokens: c0)<br/>\t\t|| Token.cross.matches(tokens: c1)<br/>\t\t|| Token.cross.matches(tokens: c2)<br/>\t\t|| Token.cross.matches(tokens: tl)<br/>\t\t|| Token.cross.matches(tokens: bl) {<br/>\t\t\treturn .cross<br/>\t\t} else <br/>\t\tif Token.circle.matches(tokens: r0)<br/>\t\t|| Token.circle.matches(tokens: r1)<br/>\t\t|| Token.circle.matches(tokens: r2)<br/>\t\t|| Token.circle.matches(tokens: c0)<br/>\t\t|| Token.circle.matches(tokens: c1)<br/>\t\t|| Token.circle.matches(tokens: c2)<br/>\t\t|| Token.circle.matches(tokens: tl)<br/>\t\t|| Token.circle.matches(tokens: bl) {<br/>\t\t\treturn .circle<br/>\t\t}<br/>\t\treturn nil<br/>\t}<br/>\u00a0<br/>\tfunc atCapacity() -&gt; Bool {<br/>\t\treturn cells.filter { $0 == nil }.count == 0<br/>\t}<br/>\u00a0<br/>\tmutating func play(token: Token, at location: Int) {<br/>\t\tcells[location] = token<br/>\t}<br/>\u00a0<br/>\tfunc findBestLocation(for player: Token) -&gt; Int? {<br/>\t\tlet r0 = cells(atRow: 0)<br/>\t\tlet r1 = cells(atRow: 1)<br/>\t\tlet r2 = cells(atRow: 2)<br/>\t\tlet c0 = cells(atCol: 0)<br/>\t\tlet c1 = cells(atCol: 1)<br/>\t\tlet c2 = cells(atCol: 2)<br/>\t\tlet tl = cellsTopLeft()<br/>\t\tlet bl = cellsBottomLeft()<br/>\u00a0<br/>\t\tif let cell = player.emptyCell(in: r0) {<br/>\t\t\treturn cell<br/>\t\t} else if let cell = player.emptyCell(in: r1) {<br/>\t\t\treturn cell + 3<br/>\t\t} else if let cell = player.emptyCell(in: r2) {<br/>\t\t\treturn cell + 6<br/>\t\t} else if let cell = player.emptyCell(in: c0) {<br/>\t\t\treturn cell * 3<br/>\t\t} else if let cell = player.emptyCell(in: c1) {<br/>\t\t\treturn cell * 3 + 1<br/>\t\t} else if let cell = player.emptyCell(in: c2) {<br/>\t\t\treturn cell * 3 + 2<br/>\t\t} else if let cell = player.emptyCell(in: tl) {<br/>\t\t\treturn cell == 0\u00a0? 0\u00a0: (cell == 1\u00a0? 4\u00a0: 8)<br/>\t\t} else if let cell = player.emptyCell(in: bl) {<br/>\t\t\treturn cell == 0\u00a0? 6\u00a0: (cell == 1\u00a0? 4\u00a0: 2)<br/>\t\t}<br/>\t\treturn nil<br/>\t}<br/>\u00a0<br/>\tfunc findMove() -&gt; Int {<br/>\t\tlet empties = cells.enumerated().filter { $0.1 == nil }<br/>\t\tlet r = Int(arc4random())\u00a0% empties.count<br/>\t\treturn empties[r].0<br/>\t}<br/>}<br/>\u00a0<br/>extension Board\u00a0: CustomStringConvertible {<br/>\tvar description: String {<br/>\t\tvar result = \"\\n---------------\\n\"<br/>\t\tfor (idx, cell) in cells.enumerated() {<br/>\t\t\tif let cell = cell {<br/>\t\t\t\tresult += \"| \\(cell) |\"<br/>\t\t\t} else {<br/>\t\t\t\tresult += \"| \\(idx) |\"<br/>\t\t\t}<br/>\u00a0<br/>\t\t\tif (idx + 1)\u00a0% 3 == 0 {<br/>\t\t\t\tresult += \"\\n---------------\\n\"<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn result<br/>\t}<br/>}<br/>\u00a0<br/>while true {<br/>\tvar board = Board()<br/>\tprint(\"Who do you want to play as ('o' or 'x'): \", separator: \"\", terminator: \"\")<br/>\tlet answer = readLine()?.characters.first\u00a0?? \"x\"<br/>\u00a0<br/>\tvar player: Token = answer == \"x\"\u00a0? .cross\u00a0: .circle<br/>\tvar pc: Token = player == .cross\u00a0? .circle\u00a0: .cross<br/>\u00a0<br/>\tprint(board)<br/>\u00a0<br/>\twhile true {<br/>\t\tprint(\"Choose cell to play on: \", separator: \"\", terminator: \"\")<br/>\t\tvar pos = Int(readLine()\u00a0?? \"0\")\u00a0?? 0<br/>\t\twhile\u00a0!board.atCapacity() &amp;&amp; board.cells[pos]\u00a0!= nil {<br/>\t\t\tprint(\"Invalid move. Choose cell to play on: \", separator: \"\", terminator: \"\")<br/>\t\t\tpos = Int(readLine()\u00a0?? \"0\")\u00a0?? 0<br/>\t\t}<br/>\u00a0<br/>\t\tif board.atCapacity() {<br/>\t\t\tprint(\"Draw\")<br/>\t\t\tbreak<br/>\t\t}<br/>\u00a0<br/>\t\tboard.play(token: player, at: pos)<br/>\t\tprint(board)<br/>\u00a0<br/>\t\tif let winner = board.winner() {<br/>\t\t\tprint(\"winner is \\(winner)\")<br/>\t\t\tbreak<br/>\t\t} else if board.atCapacity() {<br/>\t\t\tprint(\"Draw\")<br/>\t\t\tbreak<br/>\t\t}<br/>\u00a0<br/>\t\tif let win = board.findBestLocation(for: pc) {<br/>\t\t\tboard.play(token: pc, at: win)<br/>\t\t} else if let def = board.findBestLocation(for: player) {<br/>\t\t\tboard.play(token: pc, at: def)<br/>\t\t} else {<br/>\t\t\tboard.play(token: pc, at: board.findMove())<br/>\t\t}<br/>\u00a0<br/>\t\tprint(board)<br/>\u00a0<br/>\t\tif let winner = board.winner() {<br/>\t\t\tprint(\"winner is \\(winner)\")<br/>\t\t\tbreak<br/>\t\t}<br/>\t}<br/>}<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 121, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\"># This code splits the players from the core game engine</span><br/>oo::<span class=\"me1\">class</span> create TicTacToe <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> board player letter who<br/>    constructor <span class=\"br0\">{</span>player1class player2class<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> board <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> player<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"re0\">$player1class</span> new <span class=\"br0\">[</span>self<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> letter<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"X\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> player<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"re0\">$player2class</span> new <span class=\"br0\">[</span>self<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> letter<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"O\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> who <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> PrintBoard <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$board</span> a1 b1 c1 a2 b2 c2 a3 b3 c3<br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%s |\u00a0%s |\u00a0%s\"</span> <span class=\"re0\">$a1</span> <span class=\"re0\">$b1</span> <span class=\"re0\">$c1</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"---+---+---\"</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%s |\u00a0%s |\u00a0%s\"</span> <span class=\"re0\">$a2</span> <span class=\"re0\">$b2</span> <span class=\"re0\">$c2</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"---+---+---\"</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%s |\u00a0%s |\u00a0%s\"</span> <span class=\"re0\">$a3</span> <span class=\"re0\">$b3</span> <span class=\"re0\">$c3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> WinForSomeone <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> w <span class=\"br0\">{</span><br/>\t    <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$board</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$w</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> ni <span class=\"st0\">\"X O\"</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw1\">foreach</span> i <span class=\"re0\">$w</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$board</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> ne <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$board</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> eq <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">foreach</span> p <span class=\"re0\">$w</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> w1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$b</span> <span class=\"re0\">$w1</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> status <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$board</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> IsDraw <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> b <span class=\"re0\">$board</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is digit <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> true<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> legalMoves <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> b <span class=\"re0\">$board</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is digit <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> legal <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$legal</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> DoATurn <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> legal <span class=\"br0\">[</span>my legalMoves<span class=\"br0\">]</span><br/>\tmy PrintBoard<br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> move <span class=\"br0\">[</span><span class=\"re0\">$player</span><span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"br0\">)</span> turn<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$move</span> <span class=\"kw1\">in</span> <span class=\"re0\">$legal</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Illegal move!\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lset</span> board <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$move</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$letter</span><span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$player</span><span class=\"br0\">(</span><span class=\"re0\">$who</span><span class=\"br0\">)</span> describeMove <span class=\"re0\">$move</span><br/>\t<span class=\"kw1\">set</span> who <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> - <span class=\"re0\">$who</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span>my WinForSomeone<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> game <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"    Tic-tac-toe game player.<br/>    Input the index of where you wish to place your mark at your turn.<span class=\"es0\">\\n</span>\"</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>my IsDraw<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> winner <span class=\"br0\">[</span>my DoATurn<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$winner</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    lassign <span class=\"re0\">$winner</span> winLetter winSites<br/>\t    my PrintBoard<br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>$winLetter wins across <span class=\"es0\">\\[</span>[join $winSites {, }]<span class=\"es0\">\\]</span>\"</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">$winLetter</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>A draw\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Stupid robotic player</span><br/>oo::<span class=\"me1\">class</span> create RandomRoboPlayer <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> g<br/>    constructor <span class=\"br0\">{</span>game letter<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> g <span class=\"re0\">$game</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> turn <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> legal <span class=\"br0\">[</span><span class=\"re0\">$g</span> legalMoves<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$legal</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$legal</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> describeMove <span class=\"br0\">{</span>move<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"I go at $move\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Interactive human player delegate</span><br/>oo::<span class=\"me1\">class</span> create HumanPlayer <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> g char<br/>    constructor <span class=\"br0\">{</span>game letter<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> g <span class=\"re0\">$game</span><br/>\t<span class=\"kw1\">set</span> char <span class=\"re0\">$letter</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> turn <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> legal <span class=\"br0\">[</span><span class=\"re0\">$g</span> legalMoves<span class=\"br0\">]</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"&gt;&gt;&gt; Put your $char in any of these positions: [join $legal {}]\"</span><br/>\t<span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"&gt;&gt;&gt; \"</span><br/>\t    <span class=\"kw2\">flush</span> stdout<br/>\t    <span class=\"kw2\">gets</span> stdin number<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$number</span> <span class=\"kw1\">in</span> <span class=\"re0\">$legal</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"&gt;&gt;&gt; Whoops I don't understand the input!\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$number</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> describeMove <span class=\"br0\">{</span>move<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"You went at $move\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Assemble the pieces</span><br/><span class=\"kw1\">set</span> ttt <span class=\"br0\">[</span>TicTacToe new HumanPlayer RandomRoboPlayer<span class=\"br0\">]</span><br/><span class=\"re0\">$ttt</span> game</pre>"}, {"lang": "VBA", "loc": 128, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> Lines(1 <span class=\"kw3\">To</span> 3, 1 <span class=\"kw3\">To</span> 3) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw2\">Private</span> Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, player <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span><br/><span class=\"kw2\">Private</span> GameWin <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, GameOver <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_TicTacToe()<br/><span class=\"kw4\">Dim</span> p <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    InitLines<br/>    printLines Nb<br/>    <span class=\"kw3\">Do</span><br/>        p = WhoPlay<br/>        Debug.<span class=\"kw4\">Print</span> p &amp; <span class=\"st0\">\" play\"</span><br/>        <span class=\"kw3\">If</span> p = <span class=\"st0\">\"Human\"</span> <span class=\"kw3\">Then</span><br/>            <span class=\"kw2\">Call</span> HumanPlay<br/>            GameWin = IsWinner(<span class=\"st0\">\"X\"</span>)<br/>        <span class=\"kw3\">Else</span><br/>            <span class=\"kw2\">Call</span> ComputerPlay<br/>            GameWin = IsWinner(<span class=\"st0\">\"O\"</span>)<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> GameWin <span class=\"kw3\">Then</span> GameOver = IsEnd<br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">Until</span> GameWin <span class=\"kw3\">Or</span> GameOver<br/>    <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> GameOver <span class=\"kw3\">Then</span><br/>        Debug.<span class=\"kw4\">Print</span> p &amp; <span class=\"st0\">\" Win\u00a0!\"</span><br/>    <span class=\"kw3\">Else</span><br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Game Over!\"</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> InitLines(<span class=\"kw4\">Optional</span> S <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span><br/>    Nb = 0: player = 0<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Lines, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 1)<br/>        <span class=\"kw3\">For</span> j = <span class=\"kw4\">LBound</span>(Lines, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 2)<br/>            Lines(i, j) = <span class=\"st0\">\"#\"</span><br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> printLines(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>)<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, strT <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Loop \"</span> &amp; Nb<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Lines, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 1)<br/>        <span class=\"kw3\">For</span> j = <span class=\"kw4\">LBound</span>(Lines, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 2)<br/>            strT = strT &amp; Lines(i, j)<br/>        <span class=\"kw3\">Next</span> j<br/>        Debug.<span class=\"kw4\">Print</span> strT<br/>        strT = vbNullString<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> WhoPlay(<span class=\"kw4\">Optional</span> S <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw3\">If</span> player = 0 <span class=\"kw3\">Then</span><br/>        player = 1<br/>        WhoPlay = <span class=\"st0\">\"Human\"</span><br/>    <span class=\"kw3\">Else</span><br/>        player = 0<br/>        WhoPlay = <span class=\"st0\">\"Computer\"</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> HumanPlay(<span class=\"kw4\">Optional</span> S <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/><span class=\"kw4\">Dim</span> L <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, C <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, GoodPlay <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    <span class=\"kw3\">Do</span><br/>        L = Application.InputBox(<span class=\"st0\">\"Choose the row\"</span>, <span class=\"st0\">\"Numeric only\"</span>, <span class=\"kw4\">Type</span>:=1)<br/>        <span class=\"kw3\">If</span> L &gt; 0 <span class=\"kw3\">And</span> L &lt; 4 <span class=\"kw3\">Then</span><br/>            C = Application.InputBox(<span class=\"st0\">\"Choose the column\"</span>, <span class=\"st0\">\"Numeric only\"</span>, <span class=\"kw4\">Type</span>:=1)<br/>            <span class=\"kw3\">If</span> C &gt; 0 <span class=\"kw3\">And</span> C &lt; 4 <span class=\"kw3\">Then</span><br/>                <span class=\"kw3\">If</span> Lines(L, C) = <span class=\"st0\">\"#\"</span> <span class=\"kw3\">And</span> <span class=\"kw3\">Not</span> Lines(L, C) = <span class=\"st0\">\"X\"</span> <span class=\"kw3\">And</span> <span class=\"kw3\">Not</span> Lines(L, C) = <span class=\"st0\">\"O\"</span> <span class=\"kw3\">Then</span><br/>                    Lines(L, C) = <span class=\"st0\">\"X\"</span><br/>                    Nb = Nb + 1<br/>                    printLines Nb<br/>                    GoodPlay = <span class=\"kw5\">True</span><br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">Until</span> GoodPlay<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> ComputerPlay(<span class=\"kw4\">Optional</span> S <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/><span class=\"kw4\">Dim</span> L <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, C <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, GoodPlay <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    Randomize Timer<br/>    <span class=\"kw3\">Do</span><br/>        L = Int((Rnd * 3) + 1)<br/>        C = Int((Rnd * 3) + 1)<br/>        <span class=\"kw3\">If</span> Lines(L, C) = <span class=\"st0\">\"#\"</span> <span class=\"kw3\">And</span> <span class=\"kw3\">Not</span> Lines(L, C) = <span class=\"st0\">\"X\"</span> <span class=\"kw3\">And</span> <span class=\"kw3\">Not</span> Lines(L, C) = <span class=\"st0\">\"O\"</span> <span class=\"kw3\">Then</span><br/>            Lines(L, C) = <span class=\"st0\">\"O\"</span><br/>            Nb = Nb + 1<br/>            printLines Nb<br/>            GoodPlay = <span class=\"kw5\">True</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">Until</span> GoodPlay<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsWinner(S <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, Ch <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, strTL <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, strTC <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    Ch = <span class=\"kw1\">String</span>(<span class=\"kw4\">UBound</span>(Lines, 1), S)<br/>    <span class=\"co1\">'check lines &amp; columns<br/></span>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Lines, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 1)<br/>        <span class=\"kw3\">For</span> j = <span class=\"kw4\">LBound</span>(Lines, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 2)<br/>            strTL = strTL &amp; Lines(i, j)<br/>            strTC = strTC &amp; Lines(j, i)<br/>        <span class=\"kw3\">Next</span> j<br/>        <span class=\"kw3\">If</span> strTL = Ch <span class=\"kw3\">Or</span> strTC = Ch <span class=\"kw3\">Then</span> IsWinner = <span class=\"kw5\">True</span>: <span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>        strTL = vbNullString: strTC = vbNullString<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"co1\">'check diagonales<br/></span>    strTL = Lines(1, 1) &amp; Lines(2, 2) &amp; Lines(3, 3)<br/>    strTC = Lines(1, 3) &amp; Lines(2, 2) &amp; Lines(3, 1)<br/>    <span class=\"kw3\">If</span> strTL = Ch <span class=\"kw3\">Or</span> strTC = Ch <span class=\"kw3\">Then</span> IsWinner = <span class=\"kw5\">True</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsEnd() <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span><br/>\u00a0<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Lines, 1) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 1)<br/>        <span class=\"kw3\">For</span> j = <span class=\"kw4\">LBound</span>(Lines, 2) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Lines, 2)<br/>            <span class=\"kw3\">If</span> Lines(i, j) = <span class=\"st0\">\"#\"</span> <span class=\"kw3\">Then</span> <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>    IsEnd = <span class=\"kw5\">True</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 145, "block": "<pre class=\"text highlighted_source\">\\The computer marks its moves with an \"O\" and the player uses an \"X\". The<br/>\\ numeric keypad is used to make the player's move.<br/>\\<br/>\\                         7 | 8 | 9<br/>\\                        ---+---+---<br/>\\                         4 | 5 | 6<br/>\\                        ---+---+---<br/>\\                         1 | 2 | 3<br/>\\<br/>\\The player always goes first, but the 0 key is used to skip a move. Thus<br/>\\ it can be used to let the computer play first. Esc terminates program.<br/>\u00a0<br/>inc     c:\\cxpl\\codes;  \\intrinsic routine declarations<br/>def     X0=16, Y0=10;   \\coordinates of character in upper-left square<br/>int     I0,<br/>        PMove,          \\player's move (^0..^9)<br/>        Key;            \\keystroke<br/>int     X, O;           \\bit arrays for player and computer<br/>                        \\ bit 0 corresponds to playing square 1, etc.<br/>\u00a0<br/>\u00a0<br/>proc    HLine(X, Y);    \\Draw a horizontal line<br/>int     X, Y;<br/>int     I;<br/>[Cursor(X, Y);<br/>for I:= 0 to 10 do ChOut(0, ^\u00c4);<br/>];      \\HLine<br/>\u00a0<br/>\u00a0<br/>proc    VLine(X, Y);    \\Draw a vertical line over the above horizontal line<br/>int     X, Y;<br/>int     I;<br/>[for I:= 0 to 4 do<br/>        [Cursor(X, Y+I);<br/>        ChOut(0, if I&amp;1 then ^\u00c5 else ^\u00b3);<br/>        ];<br/>];      \\VLine<br/>\u00a0<br/>\u00a0<br/>func    Won(p);         \\Return 'true' if player P has won<br/>int     P;<br/>int     T, I;<br/>[T:= [$007, $038, $1C0, $049, $092, $124, $111, $054];<br/>for I:= 0 to 7 do       \\check if player matches a bit pattern for 3 in a row<br/>    if (P &amp; T(I)) = T(I) then return true;<br/>return false;<br/>];      \\Won<br/>\u00a0<br/>\u00a0<br/>func    Cats;           \\Return 'true' if no more moves available (Cat's game)<br/>[if (X\u00a0! O) = $1FF then \\all bit positions played<br/>        [Cursor(17, 20);<br/>        Text(0, \"A draw!\");<br/>        return true;<br/>        ];<br/>return false;<br/>];      \\Cats<br/>\u00a0<br/>\u00a0<br/>proc    DoMove(P, M, Ch); \\Make move in player's bit array and display it<br/>int     P,              \\address of player's bit array<br/>        M,              \\index 0..8 where bit is placed<br/>        Ch;<br/>int     I, X, Y;<br/>[P(0):= P(0)\u00a0! 1&lt;&lt;M;    \\make move<br/>\u00a0<br/>I:= M / 3;              \\display move<br/>X:= Rem(0) * 4;<br/>Y:= (2-I) * 2;<br/>Cursor(X+X0, Y+Y0);<br/>ChOut(0, Ch);<br/>];      \\DoMove<br/>\u00a0<br/>\u00a0<br/>func    Try(P);         \\Return the value of the best node for player P<br/>int     P;              \\address of player's bit array<br/>int     P1, I, I0, V, V0;<br/>[P1:= if P = addr X then addr O else addr X;<br/>\u00a0<br/>if Won(P1(0)) then return -1;<br/>if (X\u00a0! O) = $1FF then return 0;<br/>\u00a0<br/>V0:= -1;                                \\assume the worst<br/>for I:= 0 to 8 do                       \\for all of the squares...<br/>    if ((O!X) &amp; 1&lt;&lt;I) = 0 then          \\if square is unused<br/>        [P(0):= P(0)\u00a0! 1&lt;&lt;I;            \\make tenative move<br/>        V:= -(extend(Try(P1)));         \\get value<br/>        if V &gt; V0 then                  \\save best value<br/>                [V0:= V;  I0:= I];<br/>        P(0):= P(0) &amp; ~(1&lt;&lt;I);          \\undo tenative move<br/>        ];<br/>return V0 &amp; $FF\u00a0! I0&lt;&lt;8;<br/>];      \\Try<br/>\u00a0<br/>\u00a0<br/>proc    PlayGame;       \\Play one game<br/>[ChOut(0, $0C\\FF\\);     \\clear screen with a form feed<br/>HLine(X0-1, Y0+1);      \\draw grid (#)<br/>HLine(X0-1, Y0+3);<br/>VLine(X0+2, Y0);<br/>VLine(X0+6, Y0);<br/>\u00a0<br/>X:= 0;  O:= 0;          \\initialize player's bit arrays to empty<br/>loop    [loop   [PMove:= ChIn(1);               \\GET PLAYER'S MOVE (X)<br/>                if PMove = $1B\\Esc\\ then<br/>                        [SetVid(3);  exit];     \\restore display and end program<br/>                if PMove = ^0 then quit;<br/>                if PMove&gt;=^1 &amp; PMove&lt;=^9 &amp;      \\check for legal move<br/>                   ((X!O) &amp; 1&lt;&lt;(PMove-^1)) = 0 then quit;<br/>                ChOut(0, 7\\Bel\\);               \\beep the dude<br/>                ];<br/>        if PMove # ^0 then<br/>                [DoMove(addr X, PMove-^1, ^X);<br/>                if Won(X) then<br/>                        [Cursor(17, 20);<br/>                        Text(0, \"X wins!\");<br/>                        quit;<br/>                        ];<br/>                ];<br/>        if Cats then quit;<br/>\u00a0<br/>        I0:= Try(addr O) &gt;&gt;8;                   \\GET COMPUTER'S MOVE (O)<br/>        DoMove(addr O, I0, ^O);                 \\do best move<br/>        if Won(O) then<br/>                [Cursor(17, 20);<br/>                Text(0, \"O wins!\");<br/>                quit;<br/>                ];<br/>        if Cats then quit;<br/>        ];<br/>];      \\PlayGame<br/>\u00a0<br/>\u00a0<br/>int     CpuReg;<br/>[SetVid(1);                             \\set 40x25 text mode<br/>CpuReg:= GetReg;                        \\turn off annoying flashing cursor<br/>CpuReg(0):= $0100;                      \\ with BIOS interrupt 10h, function 01h<br/>CpuReg(2):= $2000;                      \\set cursor type to disappear<br/>SoftInt($10);<br/>loop    [PlayGame;<br/>        Key:= ChIn(1);                  \\keep playing games until Esc key is hit<br/>        if Key = $1B\\Esc\\ then<br/>                [SetVid(3);  exit];     \\clear screen &amp; restore normal text mode<br/>        ];<br/>]</pre>"}, {"lang": "Yabasic", "loc": 143, "block": "<pre class=\"text highlighted_source\">5 REM Adaptation to Yabasic of the program published in Tim Hartnell's book \"Artificial Intelligence: Concepts and Programs\", with some minor modifications. 6/2018.<br/>10 REM TICTAC<br/>15 INPUT \"English (0), Spanish (other key): \" IDIOMA\u00a0: IF NOT IDIOMA THEN RESTORE 2020 ELSE RESTORE 2010 END IF<br/>20 GOSUB 1180: REM INICIALIZACION<br/>30 REM *** REQUISITOS PREVIOS AL JUEGO ***<br/>40 FOR J = 1 TO 9<br/>50 A(J) = 32<br/>60 NEXT J<br/>70 FOR J = 1 TO 5<br/>80 D(J) = 0<br/>90 NEXT J<br/>100 CCONTADOR = 0<br/>110 R$ = \"\"<br/>120 GOSUB 1070: REM IMPRESION DEL TABLERO<br/>130 REM ** CICLO PRINCIPAL **<br/>140 GOSUB 540: REM MOVIMIENTO DEL ORDENADOR<br/>150 GOSUB 1070: REM IMPRESION DEL TABLERO<br/>160 GOSUB 870: REM COMPRUEBA LA VICTORIA<br/>170 IF R$ &lt;&gt; \"\"  GOTO 240<br/>180 GOSUB 980: REM SE ACEPTA EL MOVIMIENTO DE LA PERSONA<br/>190 GOSUB 1070: REM IMPRESION DEL TABLERO<br/>200 GOSUB 870: REM COMPRUEBA LA VICTORIA<br/>210 IF R$ = \"\"  GOTO 140<br/>220 REM ** FIN DEL CICLO PRINCIPAL **<br/>230 REM *****************************<br/>240 REM FIN DEL JUEGO<br/>250 GOSUB 1070: REM IMPRESION DEL TABLERO<br/>260 PRINT: PRINT<br/>270 IF R$ = \"G\"  PRINT MENSAJE$(1): BANDERA = -1<br/>280 IF R$ = \"P\"  PRINT MENSAJE$(2): BANDERA = 1<br/>290 IF R$ = \"D\"  PRINT MENSAJE$(3): GOTO 430<br/>300 REM ACTUALIZACION DE LA BASE DE DATOS<br/>310 FOR B = 1 TO 5<br/>320 FOR J = 2 TO 9<br/>330 IF M(J) = D(B) GOSUB 370<br/>340 NEXT J<br/>350 NEXT B<br/>360 GOTO 430<br/>370 REM ** REORDENACION DE LOS ELEMENTOS DE LA MATRIZ M **<br/>380 TEMP = M(J + BANDERA)<br/>390 M(J + BANDERA) = M(J)<br/>400 M(J) = TEMP<br/>410 J = 9<br/>420 RETURN<br/>430 PRINT: PRINT<br/>440 PRINT MENSAJE$(4)<br/>450 PRINT: PRINT<br/>460 FOR J = 1 TO 9<br/>470 PRINT M(J), \" \";<br/>480 NEXT J<br/>490 PRINT: PRINT<br/>500 PRINT MENSAJE$(5)<br/>510 INPUT A$<br/>520 GOTO 30<br/>530 REM ************************<br/>540 REM MOVIMIENTO DEL ORDENADOR<br/>550 P = ASC(\"O\") <br/>560 X = 0<br/>570 J = 1<br/>580 IF A(W(J)) = A(W(J + 1)) AND A(W(J + 2)) = 32 AND A(W(J)) = P  X = W(J + 2): GOTO 750<br/>590 IF A(W(J)) = A(W(J + 2)) AND A(W(J + 1)) = 32 AND A(W(J)) = P  X = W(J + 1): GOTO 750<br/>600 IF A(W(J + 1)) = A(W(J + 2)) AND A(W(J)) = 32 AND A(W(J + 1)) = P  X = W(J): GOTO 750<br/>610 IF J &lt; 21  J = J + 3: GOTO 580<br/>620 IF P = ASC(\"O\")  P = ASC(\"X\"): GOTO 570<br/>630 REM ** SI NO SE GANA SE BUSCA UN MOVIMIENTO DE BLOQUEO **<br/>640 REM * ENTONCES SE USA LA SIGUIENTE SECCION *<br/>650 J = 1<br/>660 IF A(M(J)) = 32  X = M(J): GOTO 750<br/>670 IF J &lt; 10  J = J + 1: GOTO 660<br/>680 H = 0<br/>690 H = H + 1<br/>700 X = INT(RAN(1) * 9): IF A(X) = 32  GOTO 750<br/>710 IF H &lt; 100  GOTO 690<br/>720 R$ = \"D\": REM ES SIMPLEMENTE UN DIBUJO<br/>730 RETURN<br/>740 REM *********************<br/>750 REM REALIZA EL MOVIMIENTO<br/>760 A(X) = ASC(\"O\")<br/>770 CCONTADOR = CCONTADOR + 1<br/>780 D(CCONTADOR) = X<br/>790 BANDERA = 0<br/>800 FOR J = 1 TO 9<br/>810 IF A(J) = 32  BANDERA = 1<br/>820 NEXT J<br/>830 IF BANDERA = 0 AND R$ = \"\"  R$ = \"D\"<br/>840 REM SI TODAS LAS CASILLAS ESTAN LLENAS Y R$ ESTA VACIO, ENTONCES ES SIMPLEMENTE UN DIBUJO<br/>850 RETURN<br/>860 REM *********************<br/>870 REM COMPRUEBA LA VICTORIA<br/>880 J = 1<br/>890 IF A(W(J)) = 32  J = J + 3<br/>900 IF J &gt; 23  RETURN<br/>910 IF A(W(J)) = A(W(J + 1)) AND A(W(J)) = A(W(J + 2))  GOTO 940<br/>920 IF J &lt; 22  J = J + 3: GOTO 890<br/>930 RETURN<br/>940 IF A(W(J)) = ASC(\"O\")  R$ = \"G\": REM EL ORDENADOR GANA<br/>950 IF A(W(J)) = ASC(\"X\")  R$ = \"P\": REM EL ORDENADOR PIERDE<br/>960 RETURN<br/>970 REM ************************<br/>980 REM MOVIMIENTO DE LA PERSONA<br/>990 PRINT: PRINT<br/>1000 PRINT MENSAJE$(6)<br/>1010 PRINT MENSAJE$(7);\u00a0: INPUT MOVIMIENTO<br/>1020 IF MOVIMIENTO &lt; 1 OR MOVIMIENTO &gt; 9  GOTO 1010<br/>1030 IF A(MOVIMIENTO) &lt;&gt; 32  GOTO 1010<br/>1040 A(MOVIMIENTO) = ASC(\"X\")<br/>1050 RETURN<br/>1060 REM *********************<br/>1070 REM IMPRESION DEL TABLERO<br/>1080 CLEAR SCREEN<br/>1090 PRINT: PRINT: PRINT<br/>1100 PRINT \" 1\u00a0: 2\u00a0: 3        \", CHR$(A(1)), \"\u00a0: \", CHR$(A(2)), \"\u00a0: \", CHR$(A(3))<br/>1110 PRINT \"-----------      ------------\"<br/>1120 PRINT \" 4\u00a0: 5\u00a0: 6        \", CHR$(A(4)), \"\u00a0: \", CHR$(A(5)), \"\u00a0: \", CHR$(A(6))<br/>1130 PRINT \"-----------      ------------\"<br/>1140 PRINT \" 7\u00a0: 8\u00a0: 9        \", CHR$(A(7)), \"\u00a0: \", CHR$(A(8)), \"\u00a0: \", CHR$(A(9))<br/>1150 PRINT<br/>1160 RETURN<br/>1170 REM **************<br/>1180 REM INICIALIZACION<br/>1190 CLEAR SCREEN<br/>1200 DIM A(9)\u00a0: REM TABLERO<br/>1210 DIM M(10)\u00a0: REM ACCESO A LA BASE DE DATOS<br/>1220 DIM W(24)\u00a0: REM DATOS DE VICTORIA O BLOQUEO<br/>1230 DIM D(5)\u00a0: REM ACCESO AL MOVIMIENTO EN EL JUEGO ACTUAL<br/>1235 DIM MENSAJE$(1)\u00a0: READ M$\u00a0: N = TOKEN(M$,MENSAJE$(),\",\")\u00a0: RESTORE<br/>1240 REM DATOS DE VICTORIA O BLOQUEO<br/>1250 FOR J = 1 TO 24<br/>1260 READ W(J)<br/>1270 NEXT J<br/>1280 DATA 1, 2, 3, 4, 5, 6, 7, 8, 9<br/>1290 DATA 1, 4, 7, 2, 5, 8, 3, 6, 9<br/>1300 DATA 1, 5, 9, 3, 5, 7<br/>1310 REM BASE INICIAL DE DATOS<br/>1320 FOR J = 1 TO 10<br/>1330 READ M(J)<br/>1340 NEXT J<br/>1350 DATA 2, 6, 8, 4, 7, 3, 1, 9, 5, 2<br/>1360 RETURN<br/>2000 REM MENSAJES EN ESPA\u00d1OL<br/>2010 DATA \"YO GANO,TU GANAS,ES SIMPLEMENTE UN DIBUJO,ESTA ES MI PRIORIDAD ACTUALIZADA,PULSE LA TECLA &lt;RETURN&gt; PARA CONTINUAR,REALICE SU MOVIMIENTO,MOVIMIENTO: \"<br/>2020 DATA \"I WIN,YOU WIN,IT'S JUST A DRAWING,THIS IS MY PRIORITY UPDATE,PRESS &lt;RETURN&gt; TO CONTINUE,TO MAKE YOUR MOVE,MOVEMENT: \"<br/>\u00a0</pre>"}]}