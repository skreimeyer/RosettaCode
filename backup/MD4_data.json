{"task": "MD4", "blocks": [{"lang": "AutoHotkey", "loc": 52, "block": "<pre class=\"autohotkey highlighted_source\">str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rosetta Code\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"String:`n\"</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"st0\">\"`n`nMD4:`n\"</span> MD4<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; MD4 ===============================================================================</span><br/>MD4<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> CalcStringHash<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> 0x8002<span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; CalcAddrHash ======================================================================</span><br/>CalcAddrHash<span class=\"br0\">(</span>addr<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> byref hash <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> byref hashlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    static h <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"F\"</span><span class=\"br0\">]</span><br/>    static b <span class=\"sy0\">:=</span> h<span class=\"sy0\">.</span>minIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    o <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptAcquireContext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr*\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0xF0000000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptCreateHash\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr*\"</span><span class=\"sy0\">,</span> hHash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptHashData\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> addr<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptGetHashParam\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt*\"</span><span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptGetHashParam\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>hash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt*\"</span><span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% hashlength<br/>                        <span class=\"br0\">{</span><br/>                            v <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UChar\"</span><span class=\"br0\">)</span><br/>                            o <span class=\"sy0\">.=</span> h<span class=\"br0\">[</span><span class=\"br0\">(</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">]</span> h<span class=\"br0\">[</span><span class=\"br0\">(</span>v <span class=\"sy0\">&amp;</span> 0xf<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">]</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptDestroyHash\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryPtreleaseContext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> o<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; CalcStringHash ====================================================================</span><br/>CalcStringHash<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-8\"</span><span class=\"sy0\">,</span> byref hash <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> byref hashlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    chrlength <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"cp1200\"</span> || encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-16\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">1</span><br/>    length <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>StrPut<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> chrlength<br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    StrPut<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>data<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span>length <span class=\"sy0\">/</span> chrlength<span class=\"br0\">)</span><span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> CalcAddrHash<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>data<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> hash<span class=\"sy0\">,</span> hashlength<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 252, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/*<br/> *<br/> *      Author: George Mossessian<br/> *<br/> *      The MD4 hash algorithm, as described in https://tools.ietf.org/html/rfc1320<br/> */</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>MD4<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//this is the prototype you want to call. Everything else is internal.</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> string<span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> len<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> sign<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>string<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>MD4Digest<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>w<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> setMD4Registers<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> AA<span class=\"sy0\">,</span> <span class=\"kw4\">uint32_t</span> BB<span class=\"sy0\">,</span> <span class=\"kw4\">uint32_t</span> CC<span class=\"sy0\">,</span> <span class=\"kw4\">uint32_t</span> DD<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> changeEndianness<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> resetMD4Registers<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> string stringCat<span class=\"br0\">(</span>string first<span class=\"sy0\">,</span> string second<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> string uint32ToString<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> stringToUint32<span class=\"br0\">(</span>string s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>BASE16 <span class=\"sy0\">=</span> <span class=\"st0\">\"0123456789abcdef=\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define F(X,Y,Z) (((X)&amp;(Y))|((~(X))&amp;(Z)))</span><br/><span class=\"co2\">#define G(X,Y,Z) (((X)&amp;(Y))|((X)&amp;(Z))|((Y)&amp;(Z)))</span><br/><span class=\"co2\">#define H(X,Y,Z) ((X)^(Y)^(Z))</span><br/>\u00a0<br/><span class=\"co2\">#define LEFTROTATE(A,N) ((A)&lt;&lt;(N))|((A)&gt;&gt;(32-(N)))</span><br/>\u00a0<br/><span class=\"co2\">#define MD4ROUND1(a,b,c,d,x,s) a += F(b,c,d) + x; a = LEFTROTATE(a, s);</span><br/><span class=\"co2\">#define MD4ROUND2(a,b,c,d,x,s) a += G(b,c,d) + x + (uint32_t)0x5A827999; a = LEFTROTATE(a, s);</span><br/><span class=\"co2\">#define MD4ROUND3(a,b,c,d,x,s) a += H(b,c,d) + x + (uint32_t)0x6ED9EBA1; a = LEFTROTATE(a, s);</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> A <span class=\"sy0\">=</span> <span class=\"nu12\">0x67452301</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> B <span class=\"sy0\">=</span> <span class=\"nu12\">0xefcdab89</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> C <span class=\"sy0\">=</span> <span class=\"nu12\">0x98badcfe</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> D <span class=\"sy0\">=</span> <span class=\"nu12\">0x10325476</span><span class=\"sy0\">;</span><br/>\u00a0<br/>string newString<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> t<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstring r<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>c<span class=\"sy0\">!=</span>NULL<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tr.<span class=\"me1\">len</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">:</span>t<span class=\"sy0\">;</span><br/>\t\tr.<span class=\"me1\">c</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r.<span class=\"me1\">len</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>r.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> r.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tr.<span class=\"me1\">c</span><span class=\"br0\">[</span>r.<span class=\"me1\">len</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tr.<span class=\"me1\">len</span><span class=\"sy0\">=</span>t<span class=\"sy0\">;</span><br/>\tr.<span class=\"me1\">c</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r.<span class=\"me1\">len</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>r.<span class=\"me1\">c</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tr.<span class=\"me1\">sign</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>string stringCat<span class=\"br0\">(</span>string first<span class=\"sy0\">,</span> string second<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstring str<span class=\"sy0\">=</span>newString<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> first.<span class=\"me1\">len</span><span class=\"sy0\">+</span>second.<span class=\"me1\">len</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>first.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tstr.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>first.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>first.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>str.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tstr.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>second.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"sy0\">-</span>first.<span class=\"me1\">len</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> str<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>string base16Encode<span class=\"br0\">(</span>string in<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstring out<span class=\"sy0\">=</span>newString<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> in.<span class=\"me1\">len</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>\u00a0<br/>\tj<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>in.<span class=\"me1\">len</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tout.<span class=\"me1\">c</span><span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>BASE16<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span>in.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xF0</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tout.<span class=\"me1\">c</span><span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>BASE16<span class=\"br0\">[</span><span class=\"br0\">(</span>in.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0F</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tout.<span class=\"me1\">c</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>string uint32ToString<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> l<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstring s <span class=\"sy0\">=</span> newString<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\ts.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFF</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> stringToUint32<span class=\"br0\">(</span>string s<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">uint32_t</span> l<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tl<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tl <span class=\"sy0\">=</span> l<span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span>s.<span class=\"me1\">c</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> l<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>MD4<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstring m<span class=\"sy0\">=</span>newString<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring digest<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>w<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>hash<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint64_t</span> mlen<span class=\"sy0\">=</span>m.<span class=\"me1\">len</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> oneBit <span class=\"sy0\">=</span> <span class=\"nu12\">0x80</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> wlen<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\tm<span class=\"sy0\">=</span>stringCat<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> newString<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>oneBit<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//append 0 \u2264 k &lt; 512 bits '0', such that the resulting message length in bits</span><br/>\t<span class=\"co1\">//\tis congruent to \u221264 \u2261 448 (mod 512)4</span><br/>\ti<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">56</span><span class=\"sy0\">-</span>m.<span class=\"me1\">len</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">64</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">64</span><span class=\"sy0\">;</span><br/>\tm<span class=\"sy0\">=</span>stringCat<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>newString<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tw <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>m.<span class=\"me1\">len</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//append length, in bits (hence &lt;&lt;3), least significant word first</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>m.<span class=\"me1\">len</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tw<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>stringToUint32<span class=\"br0\">(</span>newString<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>m.<span class=\"me1\">c</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tw<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mlen<span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFFFFFFFF</span><span class=\"sy0\">;</span><br/>\tw<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mlen<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">29</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFFFFFFFF</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\twlen<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t<span class=\"co1\">//change endianness, but not for the appended message length, for some reason?</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>wlen<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tw<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>changeEndianness<span class=\"br0\">(</span>w<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\thash <span class=\"sy0\">=</span> MD4Digest<span class=\"br0\">(</span>w<span class=\"sy0\">,</span>wlen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tdigest<span class=\"sy0\">=</span>newString<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\thash<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>changeEndianness<span class=\"br0\">(</span>hash<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tdigest<span class=\"sy0\">=</span>stringCat<span class=\"br0\">(</span>digest<span class=\"sy0\">,</span>uint32ToString<span class=\"br0\">(</span>hash<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> base16Encode<span class=\"br0\">(</span>digest<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>MD4Digest<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>w<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"co1\">//assumes message.len is a multiple of 64 bytes.</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> X<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>digest <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> AA<span class=\"sy0\">,</span> BB<span class=\"sy0\">,</span> CC<span class=\"sy0\">,</span> DD<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">/</span><span class=\"nu0\">16</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">16</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tX<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>w<span class=\"br0\">[</span>i<span class=\"sy0\">*</span><span class=\"nu0\">16</span><span class=\"sy0\">+</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tAA<span class=\"sy0\">=</span>A<span class=\"sy0\">;</span><br/>\t\tBB<span class=\"sy0\">=</span>B<span class=\"sy0\">;</span><br/>\t\tCC<span class=\"sy0\">=</span>C<span class=\"sy0\">;</span><br/>\t\tDD<span class=\"sy0\">=</span>D<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tMD4ROUND1<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND1<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tMD4ROUND2<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND2<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tMD4ROUND3<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tMD4ROUND3<span class=\"br0\">(</span>B<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>D<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>X<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tA<span class=\"sy0\">+=</span>AA<span class=\"sy0\">;</span><br/>\t\tB<span class=\"sy0\">+=</span>BB<span class=\"sy0\">;</span><br/>\t\tC<span class=\"sy0\">+=</span>CC<span class=\"sy0\">;</span><br/>\t\tD<span class=\"sy0\">+=</span>DD<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tdigest<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>A<span class=\"sy0\">;</span><br/>\tdigest<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>B<span class=\"sy0\">;</span><br/>\tdigest<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>C<span class=\"sy0\">;</span><br/>\tdigest<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>D<span class=\"sy0\">;</span><br/>\tresetMD4Registers<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> digest<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> changeEndianness<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFF</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFF00</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFF0000</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xFF000000</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> setMD4Registers<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> AA<span class=\"sy0\">,</span> <span class=\"kw4\">uint32_t</span> BB<span class=\"sy0\">,</span> <span class=\"kw4\">uint32_t</span> CC<span class=\"sy0\">,</span> <span class=\"kw4\">uint32_t</span> DD<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tA<span class=\"sy0\">=</span>AA<span class=\"sy0\">;</span><br/>\tB<span class=\"sy0\">=</span>BB<span class=\"sy0\">;</span><br/>\tC<span class=\"sy0\">=</span>CC<span class=\"sy0\">;</span><br/>\tD<span class=\"sy0\">=</span>DD<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> resetMD4Registers<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tsetMD4Registers<span class=\"br0\">(</span><span class=\"nu12\">0x67452301</span><span class=\"sy0\">,</span> <span class=\"nu12\">0xefcdab89</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x98badcfe</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x10325476</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 48, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Md4<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Md4Hash<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">string</span> input<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// get padded uints from bytes</span><br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">byte</span><span class=\"sy0\">&gt;</span> bytes <span class=\"sy0\">=</span> Encoding<span class=\"sy0\">.</span><span class=\"me1\">ASCII</span><span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">uint</span> bitCount <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span><span class=\"br0\">(</span>bytes<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>        bytes<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>bytes<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">%</span> <span class=\"nu0\">64</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">56</span><span class=\"br0\">)</span> bytes<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> uints <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">uint</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&lt;</span> bytes<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>            uints<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>bytes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span>bytes<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span>bytes<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span>bytes<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        uints<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>bitCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        uints<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// run rounds</span><br/>        <span class=\"kw4\">uint</span> a <span class=\"sy0\">=</span> 0x67452301, b <span class=\"sy0\">=</span> 0xefcdab89, c <span class=\"sy0\">=</span> 0x98badcfe, d <span class=\"sy0\">=</span> 0x10325476<span class=\"sy0\">;</span><br/>        Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">uint</span>, <span class=\"kw4\">uint</span>, <span class=\"kw4\">uint</span><span class=\"sy0\">&gt;</span> rol <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y <span class=\"sy0\">|</span> x <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> q <span class=\"sy0\">+</span> <span class=\"nu0\">15</span> <span class=\"sy0\">&lt;</span> uints<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> q <span class=\"sy0\">+=</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> chunk <span class=\"sy0\">=</span> uints<span class=\"sy0\">.</span><span class=\"me1\">GetRange</span><span class=\"br0\">(</span>q, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">uint</span> aa <span class=\"sy0\">=</span> a, bb <span class=\"sy0\">=</span> b, cc <span class=\"sy0\">=</span> c, dd <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>            Action<span class=\"sy0\">&lt;</span>Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">uint</span>, <span class=\"kw4\">uint</span>, <span class=\"kw4\">uint</span>, <span class=\"kw4\">uint</span><span class=\"sy0\">&gt;</span>, <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> round <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> i <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> y<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    a <span class=\"sy0\">=</span> rol<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b, c, d<span class=\"br0\">)</span> <span class=\"sy0\">+</span> chunk<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    d <span class=\"sy0\">=</span> rol<span class=\"br0\">(</span>d <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> chunk<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    c <span class=\"sy0\">=</span> rol<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>d, a, b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> chunk<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    b <span class=\"sy0\">=</span> rol<span class=\"br0\">(</span>b <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>c, d, a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> chunk<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> y<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>, y<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            round<span class=\"br0\">(</span><span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>~x <span class=\"sy0\">&amp;</span> z<span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">19</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            round<span class=\"br0\">(</span><span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> z<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&amp;</span> z<span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">13</span>, 0x5a827999 <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            round<span class=\"br0\">(</span><span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">^</span> y <span class=\"sy0\">^</span> z, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">15</span>, 0x6ed9eba1 <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            a <span class=\"sy0\">+=</span> aa<span class=\"sy0\">;</span> b <span class=\"sy0\">+=</span> bb<span class=\"sy0\">;</span> c <span class=\"sy0\">+=</span> cc<span class=\"sy0\">;</span> d <span class=\"sy0\">+=</span> dd<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// return hex encoded string</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> outBytes <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> a, b, c, d <span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"me1\">SelectMany</span><span class=\"br0\">(</span>BitConverter<span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>outBytes<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy0\">.</span><span class=\"me1\">Md4Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use 'pandect<span class=\"sy0\">.</span>core<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>md4 <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> 'ironclad<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> md4 <span class=\"br0\">(</span>str<span class=\"br0\">)</span>                                           <br/>  <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">digest-sequence</span> <span class=\"sy0\">:</span><span class=\"me1\">md4</span> <br/>                              <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>md4 <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 47, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span> md4<span class=\"br0\">(</span><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inData<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span>x <span class=\"sy0\">&amp;</span> z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> z<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&amp;</span> z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">^</span> y <span class=\"sy0\">^</span> z<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> r <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> v<span class=\"sy0\">,</span> <span class=\"kw4\">uint</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&lt;&lt;</span> s<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy0\">-</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> bitLen <span class=\"sy0\">=</span> <span class=\"kw4\">ulong</span><span class=\"br0\">(</span>inData.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    inData <span class=\"sy0\">~=</span> <span class=\"nu12\">0x80</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>inData.<span class=\"me1\">length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">64</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">56</span><span class=\"br0\">)</span><br/>        inData <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> data <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>inData <span class=\"sy0\">~</span> <span class=\"br0\">[</span><span class=\"kw4\">uint</span><span class=\"br0\">(</span>bitLen <span class=\"sy0\">&amp;</span> <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">uint</span><span class=\"br0\">(</span>bitLen <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> a <span class=\"sy0\">=</span> <span class=\"nu12\">0x67452301</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"nu12\">0xefcdab89</span><span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"nu12\">0x98badcfe</span><span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> <span class=\"nu12\">0x10325476</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> x<span class=\"sy0\">;</span> data.<span class=\"me1\">chunks</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> a2 <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span> b2 <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> c2 <span class=\"sy0\">=</span> c<span class=\"sy0\">,</span> d2 <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            a <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            d <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>d <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            c <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>b <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            a <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> g<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x5a827999</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            d <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>d <span class=\"sy0\">+</span> g<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x5a827999</span><span class=\"sy0\">,</span>  <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            c <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> g<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x5a827999</span><span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>b <span class=\"sy0\">+</span> g<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x5a827999</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            a <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x6ed9eba1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            d <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>d <span class=\"sy0\">+</span> h<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x6ed9eba1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            c <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> h<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x6ed9eba1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>b <span class=\"sy0\">+</span> h<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu12\">0x6ed9eba1</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        a <span class=\"sy0\">+=</span> a2<span class=\"sy0\">,</span> b <span class=\"sy0\">+=</span> b2<span class=\"sy0\">,</span> c <span class=\"sy0\">+=</span> c2<span class=\"sy0\">,</span> d <span class=\"sy0\">+=</span> d2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">//return cast(ubyte[16])[a, b, c, d];</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">)</span>result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%02x%)\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">representation</span>.<span class=\"me1\">md4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>require 'md4<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>s  <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>m  <span class=\"br0\">(</span>md4 s <span class=\"br0\">(</span><span class=\"kw1\">length</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; m = 16 binary bytes</span><br/>  <span class=\"br0\">(</span>require 'hex-util<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>encode-hex-string m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span><br/><span class=\"st0\">\"a52bcfc6a0d0d300cdc5ddbfbefe478b\"</span></pre>"}, {"lang": "Erlang", "loc": 8, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>md4<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>md4<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">md4</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">MD4</span>:<span class=\"nu0\">128</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/crypto.html\"><span class=\"kw5\">crypto</span></a>:<span class=\"re3\">md4</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code =&gt; ~.16B~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">MD4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 152, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 19-10-2016</span><br/><span class=\"co1\">' translation of the (pseudo) code in RFC 1320</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> MD4<span class=\"br0\">(</span>test_str <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> message = test_str <span class=\"co1\">' string are passed as ByRef</span><br/>\u00a0<br/>  <span class=\"co1\">' some macro's</span><br/>  <span class=\"co2\">#Macro F(X, Y, Z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> And <span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Not</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span> And <span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro G(X, Y, Z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> And <span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> And <span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Y<span class=\"br0\">)</span> And <span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro H(X, Y, Z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span>Y<span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co1\">' a little piece of inline asm to do a rotate left on a 32bit variable</span><br/>  <span class=\"co2\">#Macro ROtate_Left(x, n) ' rotate left</span><br/>    <span class=\"kw1\">Asm</span><br/>      rol dword <span class=\"kw1\">Ptr</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span>, n<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Asm</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co1\">' #Macro ROtate_left(x, n)</span><br/>    <span class=\"co1\">' x = x Shl n + x Shr (32 - n)</span><br/>  <span class=\"co1\">' #EndMacro</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> answer, s1<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>  <span class=\"co1\">' set the first bit after the message to 1</span><br/>  message = message + <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">' add one char to the length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong padding = <span class=\"nu0\">64</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>l +<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"br0\">(</span><span class=\"nu0\">512</span> \\ <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' 512 \\ 8 = 64 char.</span><br/>\u00a0<br/>  <span class=\"co1\">' check if we have enough room for inserting the length</span><br/>  <span class=\"kw1\">If</span> padding &lt; <span class=\"nu0\">8</span> <span class=\"kw1\">Then</span> padding = padding + <span class=\"nu0\">64</span><br/>\u00a0<br/>  message = message + <span class=\"kw1\">String</span><span class=\"br0\">(</span>padding, <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">' adjust length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong l1 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span>                <span class=\"co1\">' new length</span><br/>\u00a0<br/>  l = l * <span class=\"nu0\">8</span>    <span class=\"co1\">' orignal length in bits</span><br/>  <span class=\"co1\">' create ubyte ptr to point to l ( = length in bits)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> ub_ptr = Cast<span class=\"br0\">(</span><span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span>, @l<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span>  <span class=\"co1\">'copy length of message to the last 8 bytes</span><br/>    message<span class=\"br0\">[</span>l1 -<span class=\"nu0\">8</span> + i<span class=\"br0\">]</span> = ub_ptr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">' unsigned 32bit integers only</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; AA, A = &amp;H67452301<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; BB, B = &amp;Hefcdab89<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; CC, C = &amp;H98badcfe<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; DD, D = &amp;H10325476<br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>l1 -<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">64</span> <span class=\"co1\">' split into 64 byte block</span><br/>\u00a0<br/>    AA = A\u00a0: BB = B\u00a0: CC = C\u00a0: DD = D<br/>\u00a0<br/>    <span class=\"co1\">' x point to 64 byte block inside the string message</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span> x = Cast<span class=\"br0\">(</span>UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span>, @message<span class=\"br0\">[</span>i*<span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' round 1               </span><br/>    A = A + F<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + F<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    C = C + F<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + F<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>    A = A + F<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + F<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    C = C + F<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + F<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>    A = A + F<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + F<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    C = C + F<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + F<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>    A = A + F<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + F<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    C = C + F<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + F<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span>\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' round 2</span><br/>    A = A + G<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + G<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    C = C + G<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>C,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    B = B + G<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>    A = A + G<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + G<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    C = C + G<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>C,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    B = B + G<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>    A = A + G<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + G<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    C = C + G<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>C,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    B = B + G<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>    A = A + G<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + G<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    C = C + G<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>C,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    B = B + G<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> + &amp;H5A827999\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' round 3</span><br/>    A = A + H<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + H<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    C = C + H<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + H<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    A = A + H<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + H<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    C = C + H<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + H<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    A = A + H<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + H<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    C = C + H<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + H<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    A = A + H<span class=\"br0\">(</span>B, C, D<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>A,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    D = D + H<span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>D,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    C = C + H<span class=\"br0\">(</span>D, A, B<span class=\"br0\">)</span> + x<span class=\"br0\">[</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>C, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    B = B + H<span class=\"br0\">(</span>C, D, A<span class=\"br0\">)</span> + x<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> + &amp;H6ED9EBA1\u00a0: ROtate_Left<span class=\"br0\">(</span>B, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>\u00a0<br/>    A += AA\u00a0: B += BB\u00a0: C += CC\u00a0: D += DD<br/>\u00a0<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">' convert A, B, C and D in hex, then add low order first</span><br/>  s1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>A, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer +=<span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  s1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>B, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer +=<span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  s1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>C, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer +=<span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  s1 = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>D, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">7</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">2</span>\u00a0: answer +=<span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s1, i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Return</span> <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test = <span class=\"st0\">\"Rosetta Code\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span>  test; <span class=\"st0\">\" =&gt; \"</span>; MD4<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env runhaskell<br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Char8 <span class=\"br0\">(</span>pack<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Crypto<span class=\"sy0\">.</span>Hash<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> md4 <span class=\"sy0\">.</span> pack <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">=&lt;&lt;</span> getArgs<br/>         <span class=\"kw1\">where</span> md4 x <span class=\"sy0\">=</span> hash x <span class=\"sy0\">::</span> Digest MD4</pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"golang.org/x/crypto/md4\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    h <span class=\"sy2\">:=</span> md4<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>    h<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"Rosetta Code\"</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>Sum<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'ide/qt'</span><br/>   gethash_jqtide_ <span class=\"st_h\">'MD4'</span>;<span class=\"st_h\">'Rosetta Code'</span><br/>a52bcfc6a0d0d300cdc5ddbfbefe478b</pre>"}, {"lang": "Java", "loc": 16, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">org.bouncycastle.crypto.digests.MD4Digest</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">org.bouncycastle.util.encoders.Hex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RosettaMD4<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> argv<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> r <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"US-ASCII\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        MD4Digest d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MD4Digest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        d.<span class=\"me1\">update</span> <span class=\"br0\">(</span>r, <span class=\"nu0\">0</span>, r.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> o <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span>d.<span class=\"me1\">getDigestSize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        d.<span class=\"me1\">doFinal</span> <span class=\"br0\">(</span>o, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Hex.<span class=\"me1\">encode</span> <span class=\"br0\">(</span>o, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Nettle<br/>\u00a0<br/>msg = \"Rosetta Code\"<br/>\u00a0<br/>h = HashState(MD4)<br/>update!(h, msg)<br/>h = hexdigest!(h)<br/>\u00a0<br/>println(\"\\\"\", msg, \"\\\" =&gt; \", h)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 168, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MD4<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> MessageDigest<span class=\"br0\">(</span><span class=\"st0\">\"MD4\"</span><span class=\"br0\">)</span>, Cloneable <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blockLength <span class=\"sy0\">=</span> <span class=\"nu0\">64</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> context <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> 0L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> buffer <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span>blockLength<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        engineReset<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> constructor<span class=\"br0\">(</span>md<span class=\"sy0\">:</span> MD4<span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        context <span class=\"sy0\">=</span> md.<span class=\"me1\">context</span>.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        buffer <span class=\"sy0\">=</span> md.<span class=\"me1\">buffer</span>.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        count <span class=\"sy0\">=</span> md.<span class=\"me1\">count</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun clone<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Any <span class=\"sy0\">=</span> MD4<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun engineReset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        context<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 0x67452301<br/>        context<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 0xefcdab89.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>        context<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 0x98badcfe.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        context<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 0x10325476<br/>        count <span class=\"sy0\">=</span> 0L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until blockLength<span class=\"br0\">)</span> buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun engineUpdate<span class=\"br0\">(</span>b<span class=\"sy0\">:</span> Byte<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">%</span> blockLength<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        count++                                 <br/>        buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> b<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> blockLength - <span class=\"nu0\">1</span><span class=\"br0\">)</span> transform<span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun engineUpdate<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> ByteArray, offset<span class=\"sy0\">:</span> Int, len<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>offset <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || offset.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + len <span class=\"sy0\">&gt;</span> input.<span class=\"me1\">size</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> ArrayIndexOutOfBoundsException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bufferNdx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">%</span> blockLength<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        count +<span class=\"sy0\">=</span> len                                    <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> partLen <span class=\"sy0\">=</span> blockLength - bufferNdx<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len <span class=\"sy0\">&gt;=</span> partLen<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            System.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>input, offset, buffer, bufferNdx, partLen<span class=\"br0\">)</span><br/>            transform<span class=\"br0\">(</span>buffer, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            i <span class=\"sy0\">=</span> partLen<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i + blockLength - <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                transform<span class=\"br0\">(</span>input, offset + i<span class=\"br0\">)</span><br/>                i +<span class=\"sy0\">=</span> blockLength<br/>            <span class=\"br0\">}</span><br/>            bufferNdx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> len<span class=\"br0\">)</span> System.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>input, offset + i, buffer, bufferNdx, len - i<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun engineDigest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> ByteArray <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bufferNdx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">%</span> blockLength<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> padLen <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>bufferNdx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">56</span><span class=\"br0\">)</span> <span class=\"nu0\">56</span> - bufferNdx <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">120</span> - bufferNdx<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tail <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span>padLen + <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        tail<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> 0x80.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">7</span><span class=\"br0\">)</span> tail<span class=\"br0\">[</span>padLen + i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>count <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> ushr <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        engineUpdate<span class=\"br0\">(</span>tail, <span class=\"nu0\">0</span>, tail.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                result<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> + j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>context<span class=\"br0\">[</span>i<span class=\"br0\">]</span> ushr <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        engineReset<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun transform <span class=\"br0\">(</span>block<span class=\"sy0\">:</span> ByteArray, offset<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> offset2 <span class=\"sy0\">=</span> offset<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><span class=\"br0\">)</span> <br/>            x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>block<span class=\"br0\">[</span>offset2++<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> and 0xff<span class=\"br0\">)</span>       <span class=\"br0\">)</span> or<br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span>block<span class=\"br0\">[</span>offset2++<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> and 0xff<span class=\"br0\">)</span> shl <span class=\"nu0\">8</span> <span class=\"br0\">)</span> or<br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span>block<span class=\"br0\">[</span>offset2++<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> and 0xff<span class=\"br0\">)</span> shl <span class=\"nu0\">16</span><span class=\"br0\">)</span> or<br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span>block<span class=\"br0\">[</span>offset2++<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> and 0xff<span class=\"br0\">)</span> shl <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a <span class=\"sy0\">=</span> context<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> context<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c <span class=\"sy0\">=</span> context<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> context<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0<br/>        a <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span>, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span>, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span>,  <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span>, <span class=\"nu0\">19</span><span class=\"br0\">)</span><br/>\u00a0<br/>        a <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span>,  <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> gg<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span>, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>\u00a0<br/>        a <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"br0\">]</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>a, b, c, d, x<span class=\"br0\">[</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>,  <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        d <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>d, a, b, c, x<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span>,  <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        c <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>c, d, a, b, x<span class=\"br0\">[</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> hh<span class=\"br0\">(</span>b, c, d, a, x<span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>\u00a0<br/>        context<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> a<br/>        context<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> b<br/>        context<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> c<br/>        context<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> d<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun ff<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int, s<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> a + <span class=\"br0\">(</span><span class=\"br0\">(</span>b and c<span class=\"br0\">)</span> or <span class=\"br0\">(</span>b.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span> and d<span class=\"br0\">)</span><span class=\"br0\">)</span> + x<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>t shl s<span class=\"br0\">)</span> or <span class=\"br0\">(</span>t ushr <span class=\"br0\">(</span><span class=\"nu0\">32</span> - s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun gg<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int, s<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> a + <span class=\"br0\">(</span><span class=\"br0\">(</span>b and <span class=\"br0\">(</span>c or d<span class=\"br0\">)</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>c and d<span class=\"br0\">)</span><span class=\"br0\">)</span> + x + 0x5a827999<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>t shl s<span class=\"br0\">)</span> or <span class=\"br0\">(</span>t ushr <span class=\"br0\">(</span><span class=\"nu0\">32</span> - s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun hh<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int, s<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> a + <span class=\"br0\">(</span>b xor c xor d<span class=\"br0\">)</span> + x + 0x6ed9eba1 <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>t shl s<span class=\"br0\">)</span> or <span class=\"br0\">(</span>t ushr <span class=\"br0\">(</span><span class=\"nu0\">32</span> - s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text  <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta Code\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bytes <span class=\"sy0\">=</span> text.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span>Charsets.<span class=\"me1\">US_ASCII</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> md<span class=\"sy0\">:</span> MessageDigest <span class=\"sy0\">=</span> MD4<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digest <span class=\"sy0\">=</span> md.<span class=\"me1\">digest</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"kw2\">byte</span> in digest<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">cipher_digest('Rosetta Code', -digest='MD4')-&gt;encodeHex-&gt;asString</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\"><span class=\"sy0\">#</span>!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>lua<br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">\"crypto\"</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>crypto<span class=\"sy0\">.</span>digest<span class=\"br0\">(</span><span class=\"st0\">\"MD4\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Hash[\"Rosetta Code\", \"MD4\", \"HexString\"]</pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>const MD4Len = 16<br/>\u00a0<br/>proc MD4(d: cstring, n: culong, md: cstring = nil): cstring {.cdecl, dynlib: \"libssl.so\", importc.}<br/>\u00a0<br/>proc MD4(s: string): string =<br/>  result = \"\"<br/>  var s = MD4(s.cstring, s.len.culong)<br/>  for i in 0 .. &lt; MD4Len:<br/>    result.add s[i].BiggestInt.toHex(2).toLower<br/>\u00a0<br/>echo MD4(\"Rosetta Code\")</pre>"}, {"lang": "PARI/GP", "loc": 27, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;pari/pari.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/md4.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define HEX(x)  (((x) &lt; 10)? (x)+'0': (x)-10+'a')</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * PARI/GP func: MD4 hash<br/> *<br/> * gp code: install(\"plug_md4\", \"s\", \"MD4\", \"&lt;library path&gt;\");<br/> */</span><br/>GEN plug_md4<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>text<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> md<span class=\"br0\">[</span>MD4_DIGEST_LENGTH<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> hash<span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  MD4<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>text<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    hash<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>i<span class=\"br0\">]</span>   <span class=\"sy0\">=</span> HEX<span class=\"br0\">(</span><span class=\"br0\">(</span>md<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    hash<span class=\"br0\">[</span>i<span class=\"sy0\">+</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> HEX<span class=\"br0\">(</span>md<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  hash<span class=\"br0\">[</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>md<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> strtoGENstr<span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">MD4</span>  <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> md4_hex <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Rosetta Code =&gt; \"</span> <span class=\"sy0\">,</span> md4_hex<span class=\"br0\">(</span> <span class=\"st0\">\"Rosetta Code\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 92, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> md4<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@buf</span> <span class=\"sy0\">=</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$buflen</span> <span class=\"sy0\">=</span> <span class=\"re0\">@buf</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> \\mask <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">&amp;f</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+^</span> mask<span class=\"br0\">)</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$z</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">&amp;g</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">&amp;h</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">{</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+^</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+^</span> <span class=\"re0\">$z</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">&amp;r</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"sy0\">+&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"br0\">)</span> <span class=\"sy0\">+|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"br0\">)</span> <span class=\"sy0\">+&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy0\">-</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> pack<span class=\"sy0\">-</span><span class=\"kw1\">le</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        gather <span class=\"kw1\">for</span> <span class=\"re0\">@a</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span><span class=\"re0\">$c</span><span class=\"sy0\">,</span><span class=\"re0\">$d</span> <span class=\"br0\">{</span> take <span class=\"re0\">$d</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">24</span> <span class=\"sy0\">+</span> <span class=\"re0\">$c</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">16</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">+</span> <span class=\"re0\">$a</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> 0x67452301<span class=\"sy0\">,</span> 0xefcdab89<span class=\"sy0\">,</span> 0x98badcfe<span class=\"sy0\">,</span> 0x10325476<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$term</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$off</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"kw1\">until</span> <span class=\"re0\">$last</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@block</span> <span class=\"sy0\">=</span> <span class=\"re0\">@buf</span><span class=\"br0\">[</span><span class=\"re0\">$off</span><span class=\"sy0\">..</span><span class=\"re0\">$off</span><span class=\"sy0\">+</span><span class=\"nu0\">63</span><span class=\"br0\">]</span><span class=\"sy0\">:</span>v<span class=\"sy0\">;</span> <span class=\"re0\">$off</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">given</span> <span class=\"sy0\">+</span><span class=\"re0\">@block</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">when</span> <span class=\"nu0\">64</span> <span class=\"br0\">{</span><br/>\t        <span class=\"sy0\">@</span><span class=\"kw1\">x</span> <span class=\"sy0\">=</span> pack<span class=\"sy0\">-</span><span class=\"kw1\">le</span> <span class=\"re0\">@block</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> <span class=\"nu0\">56</span><span class=\"sy0\">..</span><span class=\"nu0\">63</span> <span class=\"br0\">{</span><br/>\t        <span class=\"re0\">$term</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>\t        <span class=\"re0\">@block</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span>0x80<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"re0\">@block</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span>slip <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">63</span> <span class=\"sy0\">-</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"sy0\">@</span><span class=\"kw1\">x</span> <span class=\"sy0\">=</span> pack<span class=\"sy0\">-</span><span class=\"kw1\">le</span> <span class=\"re0\">@block</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">when</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">55</span> <span class=\"br0\">{</span><br/>\t        <span class=\"re0\">@block</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$term</span> <span class=\"sy0\">??</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> 0x80<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"re0\">@block</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span>slip <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">55</span> <span class=\"sy0\">-</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"sy0\">@</span><span class=\"kw1\">x</span> <span class=\"sy0\">=</span> pack<span class=\"sy0\">-</span><span class=\"kw1\">le</span> <span class=\"re0\">@block</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t        <span class=\"kw1\">my</span> <span class=\"re0\">$bit_len</span> <span class=\"sy0\">=</span> <span class=\"re0\">$buflen</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t        <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"re0\">$bit_len</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"sy0\">,</span> <span class=\"re0\">$bit_len</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span><br/>\t        <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">default</span> <span class=\"br0\">{</span><br/>\t        <span class=\"kw1\">die</span> <span class=\"st0\">\"oops\"</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$aa</span><span class=\"sy0\">,</span> <span class=\"re0\">$bb</span><span class=\"sy0\">,</span> <span class=\"re0\">$cc</span><span class=\"sy0\">,</span> <span class=\"re0\">$dd</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span> <span class=\"sy0\">-&gt;</span> \\<span class=\"kw3\">i</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> \\<span class=\"kw3\">i</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> g<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x5a827999<span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">+</span> g<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x5a827999<span class=\"sy0\">,</span>  <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">+</span> g<span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x5a827999<span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">+</span> g<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x5a827999<span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> \\<span class=\"kw3\">i</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> h<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x6ed9eba1<span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">+</span> h<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x6ed9eba1<span class=\"sy0\">,</span>  <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">+</span> h<span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span> <span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x6ed9eba1<span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> r<span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">+</span> h<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span> <span class=\"kw3\">i</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> 0x6ed9eba1<span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$aa</span><span class=\"br0\">)</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">+</span> <span class=\"re0\">$bb</span><span class=\"br0\">)</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">+</span> <span class=\"re0\">$cc</span><span class=\"br0\">)</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dd</span><span class=\"br0\">)</span> <span class=\"sy0\">+&amp;</span> mask<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> b2l<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">4</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$x</span> <span class=\"sy0\">+&lt;=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&amp;</span> 0xff<span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$n</span> <span class=\"sy0\">+&gt;=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    b2l<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">96</span> <span class=\"sy0\">+</span><br/>    b2l<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">64</span> <span class=\"sy0\">+</span><br/>    b2l<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">+&lt;</span> <span class=\"nu0\">32</span> <span class=\"sy0\">+</span><br/>    b2l<span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Rosetta Code'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> md4<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 77, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\md4.exw<br/>-- ====================<br/>--<br/>function r32(atom a)<br/>    if a&lt;0 then a+=#100000000 end if<br/>    return remainder(a,#100000000)<br/>end function<br/>\u00a0<br/>function rol(atom word, integer bits)<br/>-- left rotate the bits of a 32-bit number by the specified number of bits<br/>    word = r32(word)    -- trim to a 32-bit uint again<br/>    return r32(word*power(2,bits))+floor(word/power(2,32-bits))<br/>end function<br/>\u00a0<br/>function f(atom x,y,z)<br/>    return or_bits(and_bits(x,y),and_bits(not_bits(x),z))<br/>end function<br/>\u00a0<br/>function g(atom x,y,z)<br/>    return or_all({r32(and_bits(x,y)),and_bits(x,z),and_bits(y,z)})<br/>end function<br/>\u00a0<br/>function h(atom x,y,z)<br/>    return xor_bits(r32(xor_bits(x,y)),z)<br/>end function<br/>\u00a0<br/>function md4(sequence data)<br/>    integer bytes_to_add = 64-remainder(length(data)+9,64)<br/>    if bytes_to_add=64 then bytes_to_add = 0 end if<br/>    data = data&amp;#80&amp;repeat(0,bytes_to_add)&amp;<br/>           int_to_bytes(length(data)*8,8)<br/>\u00a0<br/>    atom a = 0x67452301, b = 0xefcdab89, c = 0x98badcfe, d = 0x10325476<br/>\u00a0<br/>    atom m64 = allocate(64,true)<br/>    integer i<br/>    for x=1 to length(data)-1 by 64 do<br/>        poke(m64,data[x..x+63])<br/>        sequence z = peek4u({m64,16})<br/>        atom a2 = a, b2 = b, c2 = c, d2 = d<br/>        for i=0 to 12 by 4 do<br/>            a = rol(a + f(b, c, d) + z[i+1],  3)<br/>            d = rol(d + f(a, b, c) + z[i+2],  7)<br/>            c = rol(c + f(d, a, b) + z[i+3], 11)<br/>            b = rol(b + f(c, d, a) + z[i+4], 19)<br/>        end for<br/>        for i=1 to 4 do<br/>            a = rol(a + g(b, c, d) + z[i+0]  + 0x5a827999,  3)<br/>            d = rol(d + g(a, b, c) + z[i+4]  + 0x5a827999,  5)<br/>            c = rol(c + g(d, a, b) + z[i+8]  + 0x5a827999,  9)<br/>            b = rol(b + g(c, d, a) + z[i+12] + 0x5a827999, 13)<br/>        end for<br/>        for j=1 to 4 do<br/>            i = {1, 3, 2, 4}[j]<br/>            a = rol(a + h(b, c, d) + z[i+0]  + 0x6ed9eba1,  3)<br/>            d = rol(d + h(a, b, c) + z[i+8]  + 0x6ed9eba1,  9)<br/>            c = rol(c + h(d, a, b) + z[i+4]  + 0x6ed9eba1, 11)<br/>            b = rol(b + h(c, d, a) + z[i+12] + 0x6ed9eba1, 15)<br/>        end for<br/>        a = r32(a+a2)<br/>        b = r32(b+b2)<br/>        c = r32(c+c2)<br/>        d = r32(d+d2)<br/>    end for<br/>    poke4(m64,{a,b,c,d})<br/>    return peek({m64,16})<br/>end function <br/>\u00a0<br/>function hexify(sequence s)<br/>    for i=1 to length(s) do<br/>        s[i] = sprintf(\"%02X\",s[i])<br/>    end for<br/>    return join(s,\"\")<br/>end function<br/>\u00a0<br/>?hexify(md4(\"Rosetta Code\"))</pre>"}, {"lang": "PicoLisp", "loc": 176, "block": "<pre class=\"text highlighted_source\">(de *Md4-W .<br/>   (1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16<br/>   1  5  9 13  2  6 10 14  3  7 11 15  4  8 12 16<br/>   1  9  5 13  3 11  7 15  2 10  6 14  4 12  8 16 .))<br/>(de *Md4-R1 . (3  7 11 19 .))<br/>(de *Md4-R2 . (3  5  9 13 .))<br/>(de *Md4-R3 . (3  9 11 15 .))<br/>\u00a0<br/>(de mod32 (N)<br/>   (&amp; N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de not32 (N)<br/>   (x| N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de add32 @<br/>   (mod32 (pass +)) )<br/>\u00a0<br/>(de leftRotate (X C)<br/>   (| (mod32 (&gt;&gt; (- C) X)) (&gt;&gt; (- 32 C) X)) )<br/>\u00a0<br/>(de md4 (Str)<br/>   (let Len (length Str)<br/>      (setq Str<br/>         (conc<br/>            (need<br/>               (- 8 (* 64 (/ (+ Len 1 8 63) 64)))  # Pad to 64-8 bytes<br/>               (conc<br/>                  (mapcar char (chop Str))   # Works only with ASCII characters<br/>                  (cons `(hex \"80\")) )       # '1' bit<br/>               0 )                           # Pad with '0'<br/>            (make<br/>               (setq Len (* 8 Len))<br/>               (do 8<br/>                  (link (&amp; Len 255))<br/>                  (setq Len (&gt;&gt; 8 Len )) ) ) ) ) )<br/>   (let<br/>      (H0 `(hex \"67452301\")<br/>         H1 `(hex \"EFCDAB89\")<br/>         H2 `(hex \"98BADCFE\")<br/>         H3 `(hex \"10325476\") <br/>         R2 `(hex \"5A827999\")<br/>         R3 `(hex \"6ED9EBA1\") )<br/>      (while Str<br/>         (let<br/>            (A H0  B H1  C H2  D H3<br/>               W (make<br/>                    (do 16<br/>                       (link<br/>                          (apply |<br/>                          (mapcar &gt;&gt; (0 -8 -16 -24) (cut 4 'Str)) ) ) ) ) )<br/>            (for I 12<br/>               (cond<br/>                  ((&gt;= 4 I)<br/>                     (setq<br/>                        A (leftRotate<br/>                             (add32<br/>                                A<br/>                                (| (&amp; B C) (&amp; (not32 B) D))<br/>                                (get W (pop '*Md4-W)) )<br/>                             (pop '*Md4-R1) )<br/>                        D (leftRotate<br/>                             (add32<br/>                                D<br/>                                (| (&amp; A B) (&amp; (not32 A) C))<br/>                                (get W (pop '*Md4-W)) )<br/>                             (pop '*Md4-R1) )<br/>                        C (leftRotate<br/>                             (add32<br/>                                C<br/>                                (| (&amp; D A) (&amp; (not32 D) B))<br/>                                (get W (pop '*Md4-W)) )<br/>                             (pop '*Md4-R1) )<br/>                        B (leftRotate<br/>                             (add32<br/>                                B<br/>                                (| (&amp; C D) (&amp; (not32 C) A))<br/>                                (get W (pop '*Md4-W)) )<br/>                             (pop '*Md4-R1) ) ) )<br/>                  ((&gt;= 8 I)<br/>                     (setq<br/>                        A (leftRotate<br/>                             (add32 <br/>                                A<br/>                                (|<br/>                                   (&amp; B (| C D))<br/>                                   (&amp; C D) )<br/>                                (get W (pop '*Md4-W))<br/>                                R2 )<br/>                             (pop '*Md4-R2) )<br/>                        D (leftRotate<br/>                             (add32<br/>                                D<br/>                                (|<br/>                                   (&amp; A (| B C))<br/>                                   (&amp; B C) )<br/>                                (get W (pop '*Md4-W))<br/>                                R2 )       <br/>                             (pop '*Md4-R2) )<br/>                        C (leftRotate<br/>                             (add32 <br/>                                C<br/>                                (|<br/>                                   (&amp; D (| A B))<br/>                                   (&amp; A B) ) <br/>                                (get W (pop '*Md4-W))<br/>                                R2 )<br/>                             (pop '*Md4-R2) )<br/>                        B (leftRotate<br/>                             (add32 <br/>                                B<br/>                                (|<br/>                                   (&amp; C (| D A))<br/>                                   (&amp; D A) )<br/>                                (get W (pop '*Md4-W))<br/>                                R2 )<br/>                             (pop '*Md4-R2) ) ) )<br/>                  (T<br/>                     (setq<br/>                        A (leftRotate<br/>                             (add32<br/>                                A<br/>                                (x| B C D)<br/>                                (get W (pop '*Md4-W))<br/>                                R3 )<br/>                             (pop '*Md4-R3) )<br/>                        D (leftRotate<br/>                             (add32<br/>                                D<br/>                                (x| A B C)<br/>                                (get W (pop '*Md4-W))<br/>                                R3 )<br/>                             (pop '*Md4-R3) )<br/>                        C (leftRotate<br/>                             (add32<br/>                                C<br/>                                (x| D A B)<br/>                                (get W (pop '*Md4-W))<br/>                                R3 )<br/>                             (pop '*Md4-R3) )<br/>                        B (leftRotate<br/>                             (add32 <br/>                                B<br/>                                (x| C D A)<br/>                                (get W (pop '*Md4-W))<br/>                                R3 )<br/>                             (pop '*Md4-R3) ) ) ) ) )<br/>               (setq<br/>                  H0 (add32 H0 A)<br/>                  H1 (add32 H1 B)<br/>                  H2 (add32 H2 C)<br/>                  H3 (add32 H3 D) ) ) )<br/>      (make<br/>         (for N (list H0 H1 H2 H3)<br/>            (do 4<br/>               (link (&amp; N 255))<br/>               (setq N (&gt;&gt; 8 N)) ) ) ) ) )<br/>\u00a0<br/>(let Str \"Rosetta Code\" <br/>   (println<br/>      (pack<br/>         (mapcar<br/>            '((B) (pad 2 (hex B)))<br/>            (md4 Str) ) ) )<br/>   (println<br/>      (pack<br/>         (mapcar<br/>            '((B) (pad 2 (hex B)))<br/>            (native <br/>               \"libcrypto.so\"<br/>               \"MD4\"<br/>               '(B . 16)<br/>               Str<br/>               (length Str)<br/>               '(NIL (16)) ) ) ) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/hash\"><span class=\"kw3\">hash</span></a><span class=\"br0\">(</span><span class=\"st_h\">'md4'</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> hashlib<br/><span class=\"kw1\">print</span> hashlib.<span class=\"kw3\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"md4\"</span><span class=\"sy0\">,</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">encode</span><span class=\"br0\">(</span><span class=\"st0\">'utf-16le'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require (planet soegaard/digest:1:2/digest))<br/>(md4 #\"Rosetta Code\")<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'openssl'</span><br/><span class=\"kw3\">puts</span> <span class=\"re2\">OpenSSL::Digest::MD4</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 200, "block": "<pre class=\"text highlighted_source\">// MD4, based on RFC 1186 and RFC 1320.<br/>//<br/>// https://www.ietf.org/rfc/rfc1186.txt<br/>// https://tools.ietf.org/html/rfc1320<br/>//<br/>\u00a0<br/>use std::fmt::Write;<br/>use std::mem;<br/>\u00a0<br/>// Let not(X) denote the bit-wise complement of X.<br/>// Let X v Y denote the bit-wise OR of X and Y.<br/>// Let X xor Y denote the bit-wise XOR of X and Y.<br/>// Let XY denote the bit-wise AND of X and Y.<br/>\u00a0<br/>// f(X,Y,Z)  =  XY v not(X)Z<br/>fn f(x: u32, y: u32, z: u32) -&gt; u32 {<br/>    (x &amp; y) | (!x &amp; z)<br/>}<br/>\u00a0<br/>// g(X,Y,Z)  =  XY v XZ v YZ<br/>fn g(x: u32, y: u32, z: u32) -&gt; u32 {<br/>    (x &amp; y) | (x &amp; z) | (y &amp; z)<br/>}<br/>\u00a0<br/>// h(X,Y,Z)  =  X xor Y xor Z<br/>fn h(x: u32, y: u32, z: u32) -&gt; u32 {<br/>    x ^ y ^ z<br/>}<br/>\u00a0<br/>// Round 1 macro<br/>// Let [A B C D i s] denote the operation<br/>//   A = (A + f(B,C,D) + X[i]) &lt;&lt;&lt; s<br/>macro_rules! md4round1 {<br/>    ( $a:expr, $b:expr, $c:expr, $d:expr, $i:expr, $s:expr, $x:expr) =&gt; {<br/>        {<br/>            // Rust defaults to non-overflowing arithmetic, so we need to specify wrapping add.<br/>            $a = ($a.wrapping_add( f($b, $c, $d) ).wrapping_add( $x[$i] ) ).rotate_left($s);<br/>        }<br/>    };<br/>}<br/>\u00a0<br/>// Round 2 macro<br/>// Let [A B C D i s] denote the operation<br/>//   A = (A + g(B,C,D) + X[i] + 5A827999) &lt;&lt;&lt; s .<br/>macro_rules! md4round2 {<br/>    ( $a:expr, $b:expr, $c:expr, $d:expr, $i:expr, $s:expr, $x:expr) =&gt; {<br/>        {<br/>            $a = ($a.wrapping_add( g($b, $c, $d)).wrapping_add($x[$i]).wrapping_add(0x5a827999_u32)).rotate_left($s);<br/>        }<br/>    };<br/>}<br/>\u00a0<br/>// Round 3 macro<br/>// Let [A B C D i s] denote the operation<br/>//   A = (A + h(B,C,D) + X[i] + 6ED9EBA1) &lt;&lt;&lt; s .<br/>macro_rules! md4round3 {<br/>    ( $a:expr, $b:expr, $c:expr, $d:expr, $i:expr, $s:expr, $x:expr) =&gt; {<br/>        {<br/>            $a = ($a.wrapping_add(h($b, $c, $d)).wrapping_add($x[$i]).wrapping_add(0x6ed9eba1_u32)).rotate_left($s);<br/>        }<br/>    };<br/>}<br/>\u00a0<br/>fn convert_byte_vec_to_u32(mut bytes: Vec&lt;u8&gt;) -&gt; Vec&lt;u32&gt; {<br/>\u00a0<br/>    bytes.shrink_to_fit();<br/>    let num_bytes = bytes.len();<br/>    let num_words = num_bytes / 4;<br/>    unsafe {<br/>        let words = Vec::from_raw_parts(bytes.as_mut_ptr() as *mut u32, num_words, num_words);<br/>        mem::forget(bytes);<br/>        words<br/>    }<br/>}<br/>\u00a0<br/>// Returns a 128-bit MD4 hash as an array of four 32-bit words.<br/>// Based on RFC 1186 from https://www.ietf.org/rfc/rfc1186.txt<br/>fn md4&lt;T: Into&lt;Vec&lt;u8&gt;&gt;&gt;(input: T) -&gt; [u32; 4] {<br/>\u00a0<br/>    let mut bytes = input.into().to_vec();<br/>    let initial_bit_len = (bytes.len() &lt;&lt; 3) as u64;<br/>\u00a0<br/>    // Step 1. Append padding bits<br/>    // Append one '1' bit, then append 0 \u2264 k &lt; 512 bits '0', such that the resulting message<br/>    // length in bis is congruent to 448 (mod 512).<br/>    // Since our message is in bytes, we use one byte with a set high-order bit (0x80) plus<br/>    // a variable number of zero bytes.<br/>\u00a0<br/>    // Append zeros<br/>    // Number of padding bytes needed is 448 bits (56 bytes) modulo 512 bits (64 bytes)<br/>    bytes.push(0x80_u8);<br/>    while (bytes.len()\u00a0% 64)\u00a0!= 56 {<br/>        bytes.push(0_u8);<br/>    }<br/>\u00a0<br/>    // Everything after this operates on 32-bit words, so reinterpret the buffer.<br/>    let mut w = convert_byte_vec_to_u32(bytes);<br/>\u00a0<br/>    // Step 2. Append length<br/>    // A 64-bit representation of b (the length of the message before the padding bits were added)<br/>    // is appended to the result of the previous step, low-order bytes first.<br/>    w.push(initial_bit_len as u32); // Push low-order bytes first<br/>    w.push((initial_bit_len &gt;&gt; 32) as u32);<br/>\u00a0<br/>    // Step 3. Initialize MD buffer<br/>    let mut a = 0x67452301_u32;<br/>    let mut b = 0xefcdab89_u32;<br/>    let mut c = 0x98badcfe_u32;<br/>    let mut d = 0x10325476_u32;<br/>\u00a0<br/>    // Step 4. Process message in 16-word blocks<br/>    let n = w.len();<br/>    for i in 0..n / 16 {<br/>\u00a0<br/>        // Select the next 512-bit (16-word) block to process.<br/>        let x = &amp;w[i * 16..i * 16 + 16];<br/>\u00a0<br/>        let aa = a;<br/>        let bb = b;<br/>        let cc = c;<br/>        let dd = d;<br/>\u00a0<br/>        // [Round 1]<br/>        md4round1!(a, b, c, d, 0, 3, x);  // [A B C D 0 3]<br/>        md4round1!(d, a, b, c, 1, 7, x);  // [D A B C 1 7]<br/>        md4round1!(c, d, a, b, 2, 11, x); // [C D A B 2 11]<br/>        md4round1!(b, c, d, a, 3, 19, x); // [B C D A 3 19]<br/>        md4round1!(a, b, c, d, 4, 3, x);  // [A B C D 4 3]<br/>        md4round1!(d, a, b, c, 5, 7, x);  // [D A B C 5 7]<br/>        md4round1!(c, d, a, b, 6, 11, x); // [C D A B 6 11]<br/>        md4round1!(b, c, d, a, 7, 19, x); // [B C D A 7 19]<br/>        md4round1!(a, b, c, d, 8, 3, x);  // [A B C D 8 3]<br/>        md4round1!(d, a, b, c, 9, 7, x);  // [D A B C 9 7]<br/>        md4round1!(c, d, a, b, 10, 11, x);// [C D A B 10 11]<br/>        md4round1!(b, c, d, a, 11, 19, x);// [B C D A 11 19]<br/>        md4round1!(a, b, c, d, 12, 3, x); // [A B C D 12 3]<br/>        md4round1!(d, a, b, c, 13, 7, x); // [D A B C 13 7]<br/>        md4round1!(c, d, a, b, 14, 11, x);// [C D A B 14 11]<br/>        md4round1!(b, c, d, a, 15, 19, x);// [B C D A 15 19]<br/>\u00a0<br/>        // [Round 2]<br/>        md4round2!(a, b, c, d, 0, 3, x);  //[A B C D 0  3]<br/>        md4round2!(d, a, b, c, 4, 5, x);  //[D A B C 4  5]<br/>        md4round2!(c, d, a, b, 8, 9, x);  //[C D A B 8  9]<br/>        md4round2!(b, c, d, a, 12, 13, x);//[B C D A 12 13]<br/>        md4round2!(a, b, c, d, 1, 3, x);  //[A B C D 1  3]<br/>        md4round2!(d, a, b, c, 5, 5, x);  //[D A B C 5  5]<br/>        md4round2!(c, d, a, b, 9, 9, x);  //[C D A B 9  9]<br/>        md4round2!(b, c, d, a, 13, 13, x);//[B C D A 13 13]<br/>        md4round2!(a, b, c, d, 2, 3, x);  //[A B C D 2  3]<br/>        md4round2!(d, a, b, c, 6, 5, x);  //[D A B C 6  5]<br/>        md4round2!(c, d, a, b, 10, 9, x); //[C D A B 10 9]<br/>        md4round2!(b, c, d, a, 14, 13, x);//[B C D A 14 13]<br/>        md4round2!(a, b, c, d, 3, 3, x);  //[A B C D 3  3]<br/>        md4round2!(d, a, b, c, 7, 5, x);  //[D A B C 7  5]<br/>        md4round2!(c, d, a, b, 11, 9, x); //[C D A B 11 9]<br/>        md4round2!(b, c, d, a, 15, 13, x);//[B C D A 15 13]<br/>\u00a0<br/>        // [Round 3]<br/>        md4round3!(a, b, c, d, 0, 3, x);  //[A B C D 0  3]<br/>        md4round3!(d, a, b, c, 8, 9, x);  //[D A B C 8  9]<br/>        md4round3!(c, d, a, b, 4, 11, x); //[C D A B 4  11]<br/>        md4round3!(b, c, d, a, 12, 15, x);//[B C D A 12 15]<br/>        md4round3!(a, b, c, d, 2, 3, x);  //[A B C D 2  3]<br/>        md4round3!(d, a, b, c, 10, 9, x); //[D A B C 10 9]<br/>        md4round3!(c, d, a, b, 6, 11, x); //[C D A B 6  11]<br/>        md4round3!(b, c, d, a, 14, 15, x);//[B C D A 14 15]<br/>        md4round3!(a, b, c, d, 1, 3, x);  //[A B C D 1  3]<br/>        md4round3!(d, a, b, c, 9, 9, x);  //[D A B C 9  9]<br/>        md4round3!(c, d, a, b, 5, 11, x); //[C D A B 5  11]<br/>        md4round3!(b, c, d, a, 13, 15, x);//[B C D A 13 15]<br/>        md4round3!(a, b, c, d, 3, 3, x);  //[A B C D 3  3]<br/>        md4round3!(d, a, b, c, 11, 9, x); //[D A B C 11 9]<br/>        md4round3!(c, d, a, b, 7, 11, x); //[C D A B 7  11]<br/>        md4round3!(b, c, d, a, 15, 15, x);//[B C D A 15 15]<br/>\u00a0<br/>        a = a.wrapping_add(aa);<br/>        b = b.wrapping_add(bb);<br/>        c = c.wrapping_add(cc);<br/>        d = d.wrapping_add(dd);<br/>    }<br/>\u00a0<br/>    // Step 5. Output<br/>    // The message digest produced as output is A, B, C, D. That is, we begin with the low-order<br/>    // byte of A, and end with the high-order byte of D.<br/>    [u32::from_be(a), u32::from_be(b), u32::from_be(c), u32::from_be(d)]<br/>}<br/>\u00a0<br/>fn digest_to_str(digest: &amp;[u32]) -&gt; String {<br/>    let mut s = String::new();<br/>    for &amp;word in digest {<br/>        write!(&amp;mut s, \"{:08x}\", word).unwrap();<br/>    }<br/>    s<br/>}<br/>\u00a0<br/>fn main() {<br/>    let val = \"Rosetta Code\";<br/>    println!(\"md4(\\\"{}\\\") = {}\", val, digest_to_str(&amp;md4(val)));<br/>}</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> org.<span class=\"me1\">bouncycastle</span>.<span class=\"me1\">crypto</span>.<span class=\"me1\">digests</span>.<span class=\"me1\">MD4Digest</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RosettaRIPEMD160 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>raw, messageDigest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"Rosetta Code\"</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"US-ASCII\"</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MD4Digest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  messageDigest.<span class=\"me1\">update</span><span class=\"br0\">(</span>raw, <span class=\"nu0\">0</span>, raw.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> out <span class=\"sy0\">=</span> Array.<span class=\"me1\">fill</span><span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">(</span>messageDigest.<span class=\"me1\">getDigestSize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  messageDigest.<span class=\"me1\">doFinal</span><span class=\"br0\">(</span>out, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>out.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"a52bcfc6a0d0d300cdc5ddbfbefe478b\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span>.<span class=\"me1\">currentTime</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"msgdigest.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(hex(md4(\"Rosetta Code\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var digest = frequire<span class=\"br0\">(</span><span class=\"st0\">'Digest::MD4'</span><span class=\"br0\">)</span>;<br/>say digest.<span class=\"me1\">md4_hex</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta Code'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require md4<br/>\u00a0<br/><span class=\"co1\"># Use -hex option for hexadecimal output instead of binary</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>md4::<span class=\"me1\">md4</span> -hex <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">]</span></pre>"}]}