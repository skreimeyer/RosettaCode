{"task": "Ethiopian_multiplication", "blocks": [{"lang": "ACL2", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>include-book <span class=\"st0\">\"arithmetic-3/top\"</span> <span class=\"sy0\">:</span><span class=\"me1\">dir</span> <span class=\"sy0\">:</span><span class=\"me1\">system</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> halve <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>floor x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> double <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>* x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> is-even <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span><span class=\"nu0\">1</span>- x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       y<br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>is-even x<span class=\"br0\">)</span><br/>              <span class=\"nu0\">0</span><br/>              y<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>multiply <span class=\"br0\">(</span>halve x<span class=\"br0\">)</span> <span class=\"br0\">(</span>double y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 31, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> Divide<span class=\"br0\">(</span>a:<span class=\"kw3\">Number</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a-<span class=\"br0\">(</span>a<span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> Multiply<span class=\"br0\">(</span>a:<span class=\"kw3\">Number</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> isEven<span class=\"br0\">(</span>a:<span class=\"kw3\">Number</span><span class=\"br0\">)</span>:<span class=\"kw3\">Boolean</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">%</span>2 == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> Ethiopian<span class=\"br0\">(</span><span class=\"kw3\">left</span>:<span class=\"kw3\">Number</span>, <span class=\"kw3\">right</span>:<span class=\"kw3\">Number</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> r:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"kw3\">left</span>+<span class=\"st0\">\"     \"</span>+<span class=\"kw3\">right</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw3\">left</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">var</span> State:<span class=\"kw3\">String</span> = <span class=\"st0\">\"Keep\"</span>;<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>Divide<span class=\"br0\">(</span><span class=\"kw3\">left</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tState = <span class=\"st0\">\"Strike\"</span>;<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span>Divide<span class=\"br0\">(</span><span class=\"kw3\">left</span><span class=\"br0\">)</span>+<span class=\"st0\">\"     \"</span>+Multiply<span class=\"br0\">(</span><span class=\"kw3\">right</span><span class=\"br0\">)</span>+<span class=\"st0\">\"  \"</span>+State<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw3\">left</span> = Divide<span class=\"br0\">(</span><span class=\"kw3\">left</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw3\">right</span> = Multiply<span class=\"br0\">(</span><span class=\"kw3\">right</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>State == <span class=\"st0\">\"Keep\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tr += <span class=\"kw3\">right</span>;<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"=\"</span>+<span class=\"st0\">\"      \"</span>+r<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 15, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> ada.<span class=\"me1\">text_io</span>;<span class=\"kw3\">use</span> ada.<span class=\"me1\">text_io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> ethiopian <span class=\"kw1\">is</span><br/>  <span class=\"kw3\">function</span> double  <span class=\"br0\">(</span>n\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>*n<span class=\"br0\">)</span>;<br/>  <span class=\"kw3\">function</span> halve   <span class=\"br0\">(</span>n\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <span class=\"br0\">(</span>n/<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw3\">function</span> is_even <span class=\"br0\">(</span>n\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"kw3\">function</span> mul <span class=\"br0\">(</span>l, r\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> l = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">elsif</span> l = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> r <span class=\"kw1\">elsif</span> is_even <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw1\">then</span> mul <span class=\"br0\">(</span>halve <span class=\"br0\">(</span>l<span class=\"br0\">)</span>,double <span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   <span class=\"kw1\">else</span> r + double <span class=\"br0\">(</span>mul <span class=\"br0\">(</span>halve <span class=\"br0\">(</span>l<span class=\"br0\">)</span>, r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  put_line <span class=\"br0\">(</span>mul <span class=\"br0\">(</span><span class=\"nu0\">17</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span>'img<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> ethiopian;</pre>"}, {"lang": "Aime", "loc": 57, "block": "<pre class=\"text highlighted_source\">void<br/>halve(integer &amp;x)<br/>{<br/>    x &gt;&gt;= 1;<br/>}<br/>\u00a0<br/>void<br/>double(integer &amp;x)<br/>{<br/>    x &lt;&lt;= 1;<br/>}<br/>\u00a0<br/>integer<br/>iseven(integer x)<br/>{<br/>    return (x &amp; 1) == 0;<br/>}<br/>\u00a0<br/>integer<br/>ethiopian(integer plier, integer plicand, integer tutor)<br/>{<br/>    integer result;<br/>\u00a0<br/>    result = 0;<br/>\u00a0<br/>    if (tutor) {<br/>        o_form(\"ethiopian multiplication of ~ by ~\\n\", plier, plicand);<br/>    }<br/>\u00a0<br/>    while (plier &gt;= 1) {<br/>        if (iseven(plier)) {<br/>            if (tutor) {<br/>                o_form(\"/w4/ /w6/ struck\\n\", plier, plicand);<br/>            }<br/>        } else {<br/>            if (tutor) {<br/>                o_form(\"/w4/ /w6/ kept\\n\", plier, plicand);<br/>            }<br/>\u00a0<br/>            result += plicand;<br/>        }<br/>\u00a0<br/>        halve(plier);<br/>        double(plicand);<br/>    }<br/>\u00a0<br/>    return result;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    o_integer(ethiopian(17, 34, 1));<br/>    o_byte('\\n');<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 29, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> halve <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> x<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> x <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"kw8\">BIN</span> x <span class=\"kw11\">SHR</span> 1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> doublit <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> x<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> x <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"kw8\">BIN</span> x <span class=\"kw11\">SHL</span> 1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> iseven <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"coMULTI\">#CONST#</span> <span class=\"kw3\">INT</span> x<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> x<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> ethiopian <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> in plier<span class=\"sy1\">,</span><br/>              <span class=\"kw3\">INT</span> in plicand<span class=\"sy1\">,</span> <span class=\"coMULTI\">#CONST#</span> <span class=\"kw3\">BOOL</span> tutor<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> plier <span class=\"sy1\">:=</span> in plier<span class=\"sy1\">,</span> plicand <span class=\"sy1\">:=</span> in plicand<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> result<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">IF</span> tutor <span class=\"kw2\">THEN</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"ethiopian multiplication of \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" by \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> plier<span class=\"sy1\">,</span> plicand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">WHILE</span> plier <span class=\"sy1\">&gt;=</span> 1 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> iseven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      <span class=\"kw2\">IF</span> tutor <span class=\"kw2\">THEN</span> <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" \"</span>4d<span class=\"sy1\">,</span><span class=\"st0\">\"  \"</span>6d<span class=\"st0\">\" struck\"</span>l$<span class=\"sy1\">,</span> plier<span class=\"sy1\">,</span> plicand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw2\">IF</span> tutor <span class=\"kw2\">THEN</span> <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" \"</span>4d<span class=\"sy1\">,</span><span class=\"st0\">\"  \"</span>6d<span class=\"st0\">\" kept\"</span>l$<span class=\"sy1\">,</span> plier<span class=\"sy1\">,</span> plicand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      result <span class=\"sy1\">+:=</span> plicand<br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    halve<span class=\"br0\">(</span>plier<span class=\"br0\">)</span><span class=\"sy1\">;</span> doublit<span class=\"br0\">(</span>plicand<span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  result<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> ethiopian<span class=\"br0\">(</span>17<span class=\"sy1\">,</span> 34<span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 38, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% returns half of a\u00a0%<br/>    integer procedure halve  ( integer value a )\u00a0; a div 2;<br/>   \u00a0% returns a doubled\u00a0%<br/>    integer procedure double ( integer value a )\u00a0; a * 2;<br/>   \u00a0% returns true if a is even, false otherwise\u00a0%<br/>    logical procedure even   ( integer value a )\u00a0; not odd( a );<br/>   \u00a0% returns the product of a and b using ethopian multiplication\u00a0%<br/>   \u00a0% rather than keep a table of the intermediate results,       \u00a0%<br/>   \u00a0% we examine then as they are generated                       \u00a0%<br/>    integer procedure ethopianMultiplication ( integer value a, b )\u00a0;<br/>    begin<br/>        integer v, r, accumulator;<br/>        v          \u00a0:= a;<br/>        r          \u00a0:= b;<br/>        accumulator\u00a0:= 0;<br/>        i_w\u00a0:= 4; s_w\u00a0:= 0;\u00a0% set output formatting\u00a0%<br/>        while begin<br/>            write( v );<br/>            if even( v ) then writeon( \"    ---\" )<br/>            else begin<br/>                accumulator\u00a0:= accumulator + r;<br/>                writeon( \"   \", r );<br/>            end;<br/>            v\u00a0:= halve( v );<br/>            r\u00a0:= double( r );<br/>            v &gt; 0<br/>        end do begin end;<br/>        write( \"      =====\" );<br/>        accumulator<br/>    end ethopianMultiplication\u00a0;<br/>   \u00a0% task test case\u00a0%<br/>    begin<br/>        integer m;<br/>        m\u00a0:= ethopianMultiplication( 17, 34 );<br/>        write( \"       \", m )<br/>    end<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 63, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"br0\">{</span>ethMult<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span>, ethMult<span class=\"br0\">(</span><span class=\"st0\">\"Rhind\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {578, \"RhindRhindRhindRhindRhindRhindRhindRhind\"}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Int -&gt; Int -&gt; Int</span><br/><span class=\"co1\">-- or</span><br/><span class=\"co1\">-- Int -&gt; String -&gt; String</span><br/><span class=\"kw3\">on</span> ethMult<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> fns<br/>        <span class=\"kw3\">property</span> identity\u00a0: <span class=\"kw1\">missing value</span><br/>        <span class=\"kw3\">property</span> plus\u00a0: <span class=\"kw1\">missing value</span><br/>\u00a0<br/>        <span class=\"kw3\">on</span> half<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">-- 1. half an integer (div 2)</span><br/>            n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw3\">end</span> half<br/>\u00a0<br/>        <span class=\"kw3\">on</span> double<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">-- 2. double (add to self)</span><br/>            plus<span class=\"br0\">(</span>n, n<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> double<br/>\u00a0<br/>        <span class=\"kw3\">on</span> isEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">-- 3. is n even\u00a0? (mod 2 &gt; 0)</span><br/>            <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">end</span> isEven<br/>\u00a0<br/>        <span class=\"kw3\">on</span> chooseFns<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> c <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> identity <span class=\"kw3\">of</span> fns <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>                <span class=\"kw3\">set</span> plus <span class=\"kw3\">of</span> fns <span class=\"kw3\">to</span> plusString <span class=\"kw3\">of</span> fns<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> identity <span class=\"kw3\">of</span> fns <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw3\">set</span> plus <span class=\"kw3\">of</span> fns <span class=\"kw3\">to</span> plusInteger <span class=\"kw3\">of</span> fns<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> chooseFns<br/>\u00a0<br/>        <span class=\"kw3\">on</span> plusInteger<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> plusInteger<br/>\u00a0<br/>        <span class=\"kw3\">on</span> plusString<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">&amp;</span> b<br/>        <span class=\"kw3\">end</span> plusString<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    chooseFns<span class=\"br0\">(</span>class <span class=\"kw3\">of</span> m<span class=\"br0\">)</span> <span class=\"kw3\">of</span> fns<br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">-- MAIN PROCESS OF CALCULATION</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> o <span class=\"kw3\">to</span> identity <span class=\"kw3\">of</span> fns<br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> o<br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> isEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">of</span> fns <span class=\"kw3\">then</span> <span class=\"co1\">-- 3. is n even\u00a0? (mod 2 &gt; 0)</span><br/>            <span class=\"kw3\">set</span> o <span class=\"kw3\">to</span> plus<span class=\"br0\">(</span>o, m<span class=\"br0\">)</span> <span class=\"kw3\">of</span> fns<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> half<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">of</span> fns <span class=\"co1\">-- 1. half an integer (div 2)</span><br/>        <span class=\"kw3\">set</span> m <span class=\"kw3\">to</span> double<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"kw3\">of</span> fns <span class=\"co1\">-- 2. double  (add to self)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> plus<span class=\"br0\">(</span>o, m<span class=\"br0\">)</span> <span class=\"kw3\">of</span> fns<br/><span class=\"kw3\">end</span> ethMult</pre>"}, {"lang": "AutoHotkey", "loc": 30, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span> Ethiopian2<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; func definitions:</span><br/>half<span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>double<span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>isEven<span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Ethiopian<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tr <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">While</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span>\u00a0!isEven<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t\t\tr <span class=\"sy0\">+=</span> b<br/>\t\ta <span class=\"sy0\">:=</span> half<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t\tb <span class=\"sy0\">:=</span> double<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; or a recursive function:</span><br/>Ethiopian2<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">;omit r param on initial call</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy0\">==</span><span class=\"nu0\">1</span>\u00a0? r<span class=\"sy0\">+</span>b\u00a0: Ethiopian2<span class=\"br0\">(</span> half<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> double<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span>\u00a0!isEven<span class=\"br0\">(</span>a<span class=\"br0\">)</span>\u00a0? r<span class=\"sy0\">+</span>b\u00a0: r <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 41, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Halve<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Int.htm\"><span class=\"kw3\">Int</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Double<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> IsEven<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Mod.htm\"><span class=\"kw3\">Mod</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><span class=\"co0\">; this version also supports negative parameters</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Ethiopian<span class=\"br0\">(</span><span class=\"re0\">$nPlier</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlicand</span><span class=\"sy0\">,</span> <span class=\"re0\">$bTutor</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$nResult</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"br0\">(</span><span class=\"re0\">$nPlier</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<span class=\"re0\">$nPlier</span> <span class=\"sy0\">=-</span> <span class=\"re0\">$nPlier</span><br/>\t\t<span class=\"re0\">$nPlicand</span> <span class=\"sy0\">=-</span> <span class=\"re0\">$nPlicand</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ElseIf</span></a> <span class=\"br0\">(</span><span class=\"re0\">$nPlicand</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">And</span></a> <span class=\"br0\">(</span><span class=\"re0\">$nPlier</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$nPlicand</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<span class=\"re0\">$nPlier</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nPlicand</span><br/>\t\t<span class=\"re0\">$nPlicand</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nPlier</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$bTutor</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> _<br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringFormat.htm\"><span class=\"kw3\">StringFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ethiopian multiplication of\u00a0%d by\u00a0%d...\\n\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlier</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlicand</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"br0\">(</span><span class=\"re0\">$nPlier</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> IsEven<span class=\"br0\">(</span><span class=\"re0\">$nPlier</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<span class=\"re0\">$nResult</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$nPlicand</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$bTutor</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringFormat.htm\"><span class=\"kw3\">StringFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\\t%d\\tKeep\\n\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlier</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlicand</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$bTutor</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringFormat.htm\"><span class=\"kw3\">StringFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\\t%d\\tStrike\\n\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlier</span><span class=\"sy0\">,</span> <span class=\"re0\">$nPlicand</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t<span class=\"re0\">$nPlier</span> <span class=\"sy0\">=</span> Halve<span class=\"br0\">(</span><span class=\"re0\">$nPlier</span><span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$nPlicand</span> <span class=\"sy0\">=</span> Double<span class=\"br0\">(</span><span class=\"re0\">$nPlicand</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$bTutor</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringFormat.htm\"><span class=\"kw3\">StringFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Answer =\u00a0%d\\n\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$nResult</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$nResult</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ethiopian multiplication of 17 by 34\"</span><span class=\"sy0\">,</span> Ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 31, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw6\">return</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>x<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> double<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw6\">return</span> x<span class=\"sy3\">*</span><span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> iseven<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw6\">return</span> x<span class=\"sy3\">%</span>2 <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> ethiopian<span class=\"br0\">(</span>plier, plicand<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  r = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>plier <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy1\">!</span>iseven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      r <span class=\"sy3\">+</span>= plicand<br/>    <span class=\"br0\">}</span><br/>    plier = halve<span class=\"br0\">(</span>plier<span class=\"br0\">)</span><br/>    plicand = double<span class=\"br0\">(</span>plicand<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw6\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw5\">print</span> ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 35, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> half% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> doub% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> isEven% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> y <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> outP <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>x <span class=\"sy0\">=</span> <span class=\"nu0\">17</span><br/>y <span class=\"sy0\">=</span> <span class=\"nu0\">34</span><br/>\u00a0<br/><span class=\"kw1\">DO</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> x<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> <span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        outP <span class=\"sy0\">=</span> outP <span class=\"sy0\">+</span> y<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> y<br/>    <span class=\"kw1\">ELSE</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">IF</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">DO</span><br/>    x <span class=\"sy0\">=</span> half<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    y <span class=\"sy0\">=</span> doub<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">LOOP</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\" =\"</span><span class=\"sy0\">,</span> outP<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> doub% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    doub% <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> half% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    half% <span class=\"sy0\">=</span> a \\ <span class=\"nu0\">2</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isEven% <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    isEven% <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 80, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><span class=\"co2\">:: Pick 2 random, non-zero, 2-digit numbers to send to\u00a0:_main</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a param1=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 98 + 1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a param2=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 98 + 1<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_main <span class=\"sy0\">%</span><span class=\"re3\">param1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">param2</span><span class=\"sy0\">%</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:: This is the main function that outputs the answer in the form of \"%1 *\u00a0%2 =\u00a0%answer%\"</span><br/>:<span class=\"re0\">_main</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> l0=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r0=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> leftcount=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> lefttempcount=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> rightcount=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> righttempcount=0<br/><span class=\"co2\"><br/>:: Creates an array (\"l[]\") with the\u00a0:_halve function.\u00a0%l0% is the initial left number parsed</span><br/><span class=\"co2\">:: This section will loop until the most recent member of \"l[]\" is equal to 0</span><br/>:<span class=\"re0\">left</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a lefttempcount=<span class=\"sy0\">%</span><span class=\"re3\">leftcount</span><span class=\"sy0\">%</span>-1<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">l</span><span class=\"sy0\">%</span><span class=\"re3\">lefttempcount</span><span class=\"sy0\">%!</span>==1 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> right<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_halve <span class=\"sy0\">!</span><span class=\"re2\">l</span><span class=\"sy0\">%</span><span class=\"re3\">lefttempcount</span><span class=\"sy0\">%!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> l<span class=\"sy0\">%</span><span class=\"re3\">leftcount</span><span class=\"sy0\">%</span>=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a leftcount+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> left<br/><span class=\"co2\"><br/>:: Creates an array (\"r[]\") with the\u00a0:_double function,\u00a0%r0% is the initial right number parsed</span><br/><span class=\"co2\">:: This section will loop until it has the same amount of entries as \"l[]\"</span><br/>:<span class=\"re0\">right</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a righttempcount=<span class=\"sy0\">%</span><span class=\"re3\">rightcount</span><span class=\"sy0\">%</span>-1<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">rightcount</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">leftcount</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> both<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_double <span class=\"sy0\">!</span><span class=\"re2\">r</span><span class=\"sy0\">%</span><span class=\"re3\">righttempcount</span><span class=\"sy0\">%!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r<span class=\"sy0\">%</span><span class=\"re3\">rightcount</span><span class=\"sy0\">%</span>=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a rightcount+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> right<br/>\u00a0<br/>:<span class=\"re0\">both</span><br/><span class=\"co2\">:: Creates an boolean array (\"e[]\") corresponding with whether or not the respective \"l[]\" entry is even</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">%</span><span class=\"re3\">lefttempcount</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_even <span class=\"sy0\">!</span><span class=\"re2\">l</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"sy0\">!</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> e<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=<span class=\"sy0\">!</span><a href=\"http://www.ss64.com/nt/errorlevel.html\"><span class=\"kw2\">errorlevel</span></a><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><span class=\"co2\"><br/>:: Adds up all entries of \"r[]\" based on the value of \"e[]\", respectively</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> answer=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">%</span><span class=\"re3\">lefttempcount</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">e</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"sy0\">!</span>==1 <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a answer+=<span class=\"sy0\">!</span><span class=\"re2\">r</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"sy0\">!</span><br/><span class=\"co2\"> \u00a0:: Everything from this-----------------------------</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> iseven<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=KEEP<br/>  <span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> iseven<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=STRIKE<br/>  <span class=\"sy0\">)</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> L: <span class=\"sy0\">!</span><span class=\"re2\">l</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"sy0\">!</span><span class=\"re2\"> R: </span><span class=\"sy0\">!</span><span class=\"re2\">r</span><span class=\"sy0\">%%</span><span class=\"re3\">i</span><span class=\"sy0\">!</span><span class=\"re2\"> - </span><span class=\"sy0\">!</span><span class=\"re2\">iseven%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span><br/><span class=\"co2\"> \u00a0:: To this, is for cosmetics and is optional--------</span><br/>\u00a0<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">l0</span><span class=\"sy0\">%</span> * <span class=\"sy0\">%</span><span class=\"re3\">r0</span><span class=\"sy0\">%</span> = <span class=\"sy0\">%</span><span class=\"re3\">answer</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:: These are the three functions being used. The output of these functions are expressed in the errorlevel that they return</span><br/>:<span class=\"re0\">_halve</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a temp=<span class=\"sy0\">%</span><span class=\"re3\">1</span>/2<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">temp</span><span class=\"sy0\">%</span><br/>\u00a0<br/>:<span class=\"re0\">_double</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a temp=<span class=\"sy0\">%</span><span class=\"re3\">1</span>*2<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">temp</span><span class=\"sy0\">%</span><br/>\u00a0<br/>:<span class=\"re0\">_even</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> int=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a modint=<span class=\"sy0\">%</span><span class=\"re3\">int</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 2<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">modint</span><span class=\"sy0\">%</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 25, "block": "<pre class=\"text highlighted_source\">( (halve=.div$(!arg.2))<br/>&amp; (double=.2*!arg)<br/>&amp; (isEven=.mod$(!arg.2):0)<br/>&amp; ( mul<br/>  =   a b as bs newbs result<br/>    .  \u00a0!arg:(?as.?bs)<br/>      &amp;   whl<br/>        ' (\u00a0!as:? (%@:~1:?a)<br/>          &amp;\u00a0!as halve$!a:?as<br/>          &amp;\u00a0!bs:?\u00a0%@?b<br/>          &amp;\u00a0!bs double$!b:?bs<br/>          )<br/>      &amp;\u00a0:?newbs<br/>      &amp;   whl<br/>        ' (\u00a0!as:%@?a\u00a0?as<br/>          &amp;\u00a0!bs:%@?b\u00a0?bs<br/>          &amp; (isEven$!a|!newbs\u00a0!b:?newbs)<br/>          )<br/>      &amp; 0:?result<br/>      &amp;   whl<br/>        ' (!newbs:%@?b\u00a0?newbs&amp;!b+!result:?result)<br/>      &amp;\u00a0!result<br/>  )<br/>&amp; out$(mul$(17.34))<br/>);</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> halve<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">*</span>x <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> doublit<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>x<span class=\"br0\">)</span>  <span class=\"br0\">{</span> <span class=\"sy0\">*</span>x <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>bool iseven<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> ethiopian<span class=\"br0\">(</span><span class=\"kw4\">int</span> plier<span class=\"sy0\">,</span><br/>\t      <span class=\"kw4\">int</span> plicand<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> bool tutor<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> result<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ethiopian multiplication of\u00a0%d by\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> plier<span class=\"sy0\">,</span> plicand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>plier <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> iseven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d\u00a0%6d struck<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> plier<span class=\"sy0\">,</span> plicand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d\u00a0%6d kept<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> plier<span class=\"sy0\">,</span> plicand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      result <span class=\"sy0\">+=</span> plicand<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    halve<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>plier<span class=\"br0\">)</span><span class=\"sy0\">;</span> doublit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>plicand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 63, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">Tasks</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> EthiopianMultiplication_Task<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Test <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Ethiopian Multiplication\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> A <span class=\"sy0\">=</span> <span class=\"nu0\">17</span>, B <span class=\"sy0\">=</span> <span class=\"nu0\">34</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Recursion: {0}*{1}={2}\"</span>, A, B, EM_Recursion <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Linq: {0}*{1}={2}\"</span>, A, B, EM_Linq <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Loop: {0}*{1}={2}\"</span>, A, B, EM_Loop <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Halve <span class=\"br0\">(</span> <span class=\"kw1\">this</span> <span class=\"kw4\">int</span> p_Number <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> p_Number <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> <span class=\"kw4\">Double</span> <span class=\"br0\">(</span> <span class=\"kw1\">this</span> <span class=\"kw4\">int</span> p_Number <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> p_Number <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsEven <span class=\"br0\">(</span> <span class=\"kw1\">this</span> <span class=\"kw4\">int</span> p_Number <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span> p_Number <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> EM_Recursion <span class=\"br0\">(</span> <span class=\"kw4\">int</span> p_NumberA, <span class=\"kw4\">int</span> p_NumberB <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">//     Anchor Point,                Recurse to find the next row                                 Sum it with the second number according to the rules</span><br/>\t\t\t<span class=\"kw1\">return</span> p_NumberA <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> p_NumberB <span class=\"sy0\">:</span> EM_Recursion <span class=\"br0\">(</span> p_NumberA<span class=\"sy0\">.</span><span class=\"me1\">Halve</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>, p_NumberB<span class=\"sy0\">.</span><span class=\"kw4\">Double</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> p_NumberA<span class=\"sy0\">.</span><span class=\"me1\">IsEven</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> p_NumberB <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> EM_Linq <span class=\"br0\">(</span> <span class=\"kw4\">int</span> p_NumberA, <span class=\"kw4\">int</span> p_NumberB <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">// Creating a range from 1 to x where x the number of times p_NumberA can be halved.</span><br/>\t\t\t<span class=\"co1\">// This will be 2^x where 2^x &lt;= p_NumberA. Basically, ln(p_NumberA)/ln(2).</span><br/>\t\t\t<span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span>, Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span> <span class=\"br0\">(</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span> <span class=\"br0\">(</span> p_NumberA, Math<span class=\"sy0\">.</span><span class=\"me1\">E</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>, Math<span class=\"sy0\">.</span><span class=\"me1\">E</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"co1\">// For every item (Y) in that range, create a new list, comprising the pair (p_NumberA,p_NumberB) Y times.</span><br/>\t\t\t\t<span class=\"sy0\">.</span><span class=\"kw1\">Select</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> item <span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span> <span class=\"br0\">(</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span> Col1 <span class=\"sy0\">=</span> p_NumberA, Col2 <span class=\"sy0\">=</span> p_NumberB <span class=\"br0\">}</span>, item <span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"co1\">// The aggregate method iterates over every value in the target list, passing the accumulated value and the current item's value.</span><br/>\t\t\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> agg_pair, orig_pair <span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span> Col1 <span class=\"sy0\">=</span> agg_pair<span class=\"sy0\">.</span><span class=\"me1\">Col1</span><span class=\"sy0\">.</span><span class=\"me1\">Halve</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>, Col2 <span class=\"sy0\">=</span> agg_pair<span class=\"sy0\">.</span><span class=\"me1\">Col2</span><span class=\"sy0\">.</span><span class=\"kw4\">Double</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"co1\">// Remove all even items</span><br/>\t\t\t\t<span class=\"sy0\">.</span><span class=\"kw1\">Where</span> <span class=\"br0\">(</span> pair <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>pair<span class=\"sy0\">.</span><span class=\"me1\">Col1</span><span class=\"sy0\">.</span><span class=\"me1\">IsEven</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"co1\">// And sum!</span><br/>\t\t\t\t<span class=\"sy0\">.</span><span class=\"me1\">Sum</span> <span class=\"br0\">(</span> pair <span class=\"sy0\">=&gt;</span> pair<span class=\"sy0\">.</span><span class=\"me1\">Col2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> EM_Loop <span class=\"br0\">(</span> <span class=\"kw4\">int</span> p_NumberA, <span class=\"kw4\">int</span> p_NumberB <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> RetVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span> p_NumberA <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tRetVal <span class=\"sy0\">+=</span> p_NumberA<span class=\"sy0\">.</span><span class=\"me1\">IsEven</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> p_NumberB<span class=\"sy0\">;</span><br/>\t\t\t\tp_NumberA <span class=\"sy0\">=</span> p_NumberA<span class=\"sy0\">.</span><span class=\"me1\">Halve</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tp_NumberB <span class=\"sy0\">=</span> p_NumberB<span class=\"sy0\">.</span><span class=\"kw4\">Double</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> RetVal<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 54, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> N<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">struct</span> Half    <br/><span class=\"br0\">{</span>              <br/>        <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> N <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span>                               <br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> N<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">struct</span> Double  <br/><span class=\"br0\">{</span>              <br/>        <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> N <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span>                               <br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> N<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">struct</span> IsEven  <br/><span class=\"br0\">{</span>              <br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> Result <span class=\"sy1\">=</span> <span class=\"br0\">(</span>N <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> Multiplier, <span class=\"kw4\">int</span> Multiplicand<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">struct</span> EthiopianMultiplication<br/><span class=\"br0\">{</span><br/>        <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span> Cond, <span class=\"kw4\">int</span> Plier, <span class=\"kw4\">int</span> RunningTotal<span class=\"sy1\">&gt;</span><br/>        <span class=\"kw4\">struct</span> AddIfNot<br/>        <span class=\"br0\">{</span><br/>                <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> Plier <span class=\"sy2\">+</span> RunningTotal <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> Plier, <span class=\"kw4\">int</span> RunningTotal<span class=\"sy1\">&gt;</span><br/>        <span class=\"kw4\">struct</span> AddIfNot <span class=\"sy1\">&lt;</span><span class=\"kw2\">true</span>, Plier, RunningTotal<span class=\"sy1\">&gt;</span><br/>        <span class=\"br0\">{</span><br/>                <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> RunningTotal <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> Plier, <span class=\"kw4\">int</span> Plicand, <span class=\"kw4\">int</span> RunningTotal<span class=\"sy1\">&gt;</span><br/>        <span class=\"kw4\">struct</span> Loop<br/>        <span class=\"br0\">{</span><br/>                <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> Loop<span class=\"sy1\">&lt;</span>Half<span class=\"sy1\">&lt;</span>Plier<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span>, Double<span class=\"sy1\">&lt;</span>Plicand<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span>,<br/>                       AddIfNot<span class=\"sy1\">&lt;</span>IsEven<span class=\"sy1\">&lt;</span>Plier<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span>, Plicand, RunningTotal <span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span> <span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> Plicand, <span class=\"kw4\">int</span> RunningTotal<span class=\"sy1\">&gt;</span><br/>        <span class=\"kw4\">struct</span> Loop <span class=\"sy1\">&lt;</span><span class=\"nu0\">0</span>, Plicand, RunningTotal<span class=\"sy1\">&gt;</span><br/>        <span class=\"br0\">{</span><br/>                <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> RunningTotal <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> Result <span class=\"sy1\">=</span> Loop<span class=\"sy1\">&lt;</span>Multiplier, Multiplicand, <span class=\"nu0\">0</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span>, <span class=\"kw4\">char</span> <span class=\"sy2\">**</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> EthiopianMultiplication<span class=\"sy1\">&lt;</span><span class=\"nu0\">17</span>, <span class=\"nu0\">54</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">Result</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 25, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn halve <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>bit-shift-right n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn twice <span class=\"br0\">[</span>n<span class=\"br0\">]</span>          <span class=\"co1\">; 'double' is taken</span><br/>  <span class=\"br0\">(</span>bit-shift-left n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn even <span class=\"br0\">[</span>n<span class=\"br0\">]</span>           <span class=\"co1\">; 'even?' is the standard fn</span><br/>  <span class=\"br0\">(</span>zero? <span class=\"br0\">(</span>bit-<span class=\"kw1\">and</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn emult <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>reduce<span class=\"sy0\"> + </span><br/>    <span class=\"br0\">(</span>map second <br/>      <span class=\"br0\">(</span>filter #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>even <span class=\"br0\">(</span>first <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; a.k.a. 'odd?'</span><br/>        <span class=\"br0\">(</span>take-while #<span class=\"br0\">(</span>pos? <span class=\"br0\">(</span>first <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>          <span class=\"br0\">(</span>map vector <br/>            <span class=\"br0\">(</span>iterate halve x<span class=\"br0\">)</span> <br/>            <span class=\"br0\">(</span>iterate twice y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn emult2 <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>a x<span class=\"sy0\">,</span> b y<span class=\"sy0\">,</span> r <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> a <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>+ r b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>even a<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>halve a<span class=\"br0\">)</span> <span class=\"br0\">(</span>twice b<span class=\"br0\">)</span> r<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>halve a<span class=\"br0\">)</span> <span class=\"br0\">(</span>twice b<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ r b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 93, "block": "<pre class=\"cobol highlighted_source\">       *&gt;* Ethiopian multiplication<br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> ethiopian-multiplication<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  l                  <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">17</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  r                  <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"nu0\">34</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  ethiopian-<span class=\"kw2\">multiply</span> <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  product            <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>         <span class=\"kw2\">CALL</span> <span class=\"st0\">\"ethiopian-multiply\"</span> <span class=\"kw3\">USING</span><br/>           <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> l<span class=\"sy0\">,</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> r<span class=\"sy0\">,</span><br/>           <span class=\"kw3\">BY</span> <span class=\"kw3\">REFERENCE</span> ethiopian-<span class=\"kw2\">multiply</span><br/>         END-<span class=\"kw2\">CALL</span><br/>         <span class=\"kw2\">DISPLAY</span> ethiopian-<span class=\"kw2\">multiply</span> END-<span class=\"kw2\">DISPLAY</span><br/>         <span class=\"kw2\">MULTIPLY</span> l <span class=\"kw3\">BY</span> r <span class=\"kw2\">GIVING</span> product END-<span class=\"kw2\">MULTIPLY</span><br/>         <span class=\"kw2\">DISPLAY</span> product END-<span class=\"kw2\">DISPLAY</span><br/>         <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> ethiopian-multiplication<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> ethiopian-<span class=\"kw2\">multiply</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  evenp   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">88</span> even   <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">88</span> odd    <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  l       <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  r       <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  product <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"kw3\">ZERO</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">using</span> l<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> product<span class=\"sy0\">.</span><br/>         <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ZEROES</span> <span class=\"kw2\">TO</span> product<br/>         <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">UNTIL</span> l <span class=\"kw3\">EQUAL</span> <span class=\"kw3\">ZERO</span><br/>           <span class=\"kw2\">CALL</span> <span class=\"st0\">\"evenp\"</span> <span class=\"kw3\">USING</span><br/>             <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> l<span class=\"sy0\">,</span><br/>             <span class=\"kw3\">BY</span> <span class=\"kw3\">REFERENCE</span> evenp<br/>           END-<span class=\"kw2\">CALL</span><br/>           <span class=\"kw1\">IF</span> odd<br/>             <span class=\"kw2\">ADD</span> r <span class=\"kw2\">TO</span> product <span class=\"kw2\">GIVING</span> product END-<span class=\"kw2\">ADD</span><br/>           END-<span class=\"kw1\">IF</span><br/>           <span class=\"kw2\">CALL</span> <span class=\"st0\">\"halve\"</span> <span class=\"kw3\">USING</span><br/>             <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> l<span class=\"sy0\">,</span><br/>             <span class=\"kw3\">BY</span> <span class=\"kw3\">REFERENCE</span> l<br/>           END-<span class=\"kw2\">CALL</span><br/>           <span class=\"kw2\">CALL</span> <span class=\"st0\">\"twice\"</span> <span class=\"kw3\">USING</span><br/>             <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> r<span class=\"sy0\">,</span><br/>             <span class=\"kw3\">BY</span> <span class=\"kw3\">REFERENCE</span> r<br/>           END-<span class=\"kw2\">CALL</span><br/>         END-<span class=\"kw2\">PERFORM</span><br/>         GOBACK<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> ethiopian-<span class=\"kw2\">multiply</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> halve<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  n   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  m   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> n<span class=\"sy0\">,</span> m<span class=\"sy0\">.</span><br/>         <span class=\"kw2\">DIVIDE</span> n <span class=\"kw3\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw2\">GIVING</span> m END-<span class=\"kw2\">DIVIDE</span><br/>         GOBACK<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> halve<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> twice<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  n   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  m   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> n<span class=\"sy0\">,</span> m<span class=\"sy0\">.</span><br/>         <span class=\"kw2\">MULTIPLY</span> n <span class=\"kw3\">by</span> <span class=\"nu0\">2</span> <span class=\"kw2\">GIVING</span> m END-<span class=\"kw2\">MULTIPLY</span><br/>         GOBACK<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> twice<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> evenp<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  q   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  n   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  m   <span class=\"kw3\">PICTURE</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">88</span> even   <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">88</span> odd    <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> n<span class=\"sy0\">,</span> m<span class=\"sy0\">.</span><br/>         <span class=\"kw2\">DIVIDE</span> n <span class=\"kw3\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw2\">GIVING</span> q <span class=\"kw2\">REMAINDER</span> m END-<span class=\"kw2\">DIVIDE</span><br/>         <span class=\"kw3\">SUBTRACT</span> m <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw2\">GIVING</span> m <span class=\"kw3\">END-SUBTRACT</span><br/>         GOBACK<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> evenp<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 19, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>halve = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Math.<span class=\"me1\">floor</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>double = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>is_even = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>\u00a0<br/>multiply = <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  prod = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    prod <span class=\"sy0\">+</span>= b <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>is_even a<br/>    a = halve a<br/>    b = double b<br/>  prod<br/>\u00a0<br/><span class=\"co1\"># tests</span><br/>do <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"broken for #{i} * #{j}\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> multiply<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= i <span class=\"sy0\">*</span> j<br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 35, "block": "<pre class=\"cfm highlighted_source\"><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cffunction</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"double\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"number\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"numeric\"</span> <span class=\"kw6\">required</span><span class=\"sy0\">=</span><span class=\"st0\">\"true\"</span><span class=\"sy0\">&gt;</span></span><br/>\t<span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> answer <span class=\"sy0\">=</span> number * <span class=\"nu0\">2</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfreturn</span> answer<span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cffunction</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cffunction</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"halve\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"number\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"numeric\"</span> <span class=\"kw6\">required</span><span class=\"sy0\">=</span><span class=\"st0\">\"true\"</span><span class=\"sy0\">&gt;</span></span><br/>\t<span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> answer <span class=\"sy0\">=</span> <span class=\"kw5\">int</span><span class=\"br0\">(</span>number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfreturn</span> answer<span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cffunction</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cffunction</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"even\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"number\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"numeric\"</span> <span class=\"kw6\">required</span><span class=\"sy0\">=</span><span class=\"st0\">\"true\"</span><span class=\"sy0\">&gt;</span></span><br/>\t<span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> answer <span class=\"sy0\">=</span> number mod <span class=\"nu0\">2</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfreturn</span> answer<span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cffunction</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cffunction</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"ethiopian\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"Number_A\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"numeric\"</span> <span class=\"kw6\">required</span><span class=\"sy0\">=</span><span class=\"st0\">\"true\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfargument</span> <span class=\"kw3\">name</span><span class=\"sy0\">=</span><span class=\"st0\">\"Number_B\"</span> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"numeric\"</span> <span class=\"kw6\">required</span><span class=\"sy0\">=</span><span class=\"st0\">\"true\"</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> Result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfloop</span> condition <span class=\"sy0\">=</span> <span class=\"st0\">\"Number_A GTE 1\"</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> even<span class=\"br0\">(</span>Number_A<span class=\"br0\">)</span> <span class=\"kw7\">EQ</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span></span><br/>            <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> Result <span class=\"sy0\">=</span> Result + Number_B<span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> Number_A <span class=\"sy0\">=</span> halve<span class=\"br0\">(</span>Number_A<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>        <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> Number_B <span class=\"sy0\">=</span> double<span class=\"br0\">(</span>Number_B<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfloop</span><span class=\"sy0\">&gt;</span></span><br/>    <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfreturn</span> Result<span class=\"sy0\">&gt;</span></span>  <br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cffunction</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span>#ethiopian(17,34)#<span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span></pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ethiopian-multiply <span class=\"br0\">(</span><span class=\"kw1\">l</span> r<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>halve <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>floor n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>double <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>* n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>even-p <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>product <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>even-p <span class=\"kw1\">l</span><span class=\"br0\">)</span> product <span class=\"br0\">(</span>+ product r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"kw1\">l</span> <span class=\"br0\">(</span>halve <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>r r <span class=\"br0\">(</span>double r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> product<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span> ethiopian<span class=\"br0\">(</span><span class=\"kw4\">int</span> n1<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n2<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc<br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n1 <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Multiplier can't be negative\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">enum</span> doubleNum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">enum</span> halveNum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">enum</span> isEven <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isEven<span class=\"br0\">(</span>n1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            result <span class=\"sy0\">+=</span> n2<span class=\"sy0\">;</span><br/>        n1 <span class=\"sy0\">=</span> halveNum<span class=\"br0\">(</span>n1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        n2 <span class=\"sy0\">=</span> doubleNum<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>ethiopian<span class=\"br0\">(</span><span class=\"nu0\">77</span><span class=\"sy0\">,</span> <span class=\"nu0\">54</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">77</span> <span class=\"sy0\">*</span> <span class=\"nu0\">54</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>ethiopian<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">923</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"nu0\">923</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>ethiopian<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">64</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"17 ethiopian 34 is \"</span><span class=\"sy0\">,</span> ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 30, "block": "<pre class=\"text highlighted_source\">0k                    [ Make sure we're doing integer division  ]sx<br/>[ 2 / ] sH            [ Define \"halve\" function in register H   ]sx<br/>[ 2 * ] sD            [ Define \"double\" function in register D  ]sx<br/>[ 2\u00a0% 1 r - ] sE      [ Define \"even?\" function in register E   ]sx<br/>\u00a0<br/>[ Entry into the main Ethiopian multiplication function is register M ]sx<br/>[ Keeps running value for the product in register p ]sx<br/>[ 0 sp lLx lp ] sM<br/>\u00a0<br/>[ The body of the main loop is in register L ]sx<br/>\u00a0<br/>[ <br/>  sb sa             [ First thing we do is cheat and store the parameters in<br/>                      registers, which is safe because the only recursion is of<br/>                      the tail variety.  This avoids tricky stack<br/>                      manipulations, which dc doesn't have good support for<br/>                      (unlike, say, Forth). ]sx<br/>\u00a0<br/>  la lEx sr         [ r = even?(a)  ]sx<br/>  lr 0 =S           [ if r = 0 then call s]sx<br/>  la lHx d          [ a = halve(a)]sx<br/>  lb lDx            [ b = double(b)]sx<br/>  r 0\u00a0!=L           [ if a\u00a0!=0 then recurse ]<br/>] sL<br/>\u00a0<br/>[ Utility macro that just adds the current value of b to the total in p ]sx<br/>[ lp lb + sp ]sS<br/>\u00a0<br/>[ Demo by multiplying 17 and 34 ]sx<br/>17 34 lMx p</pre>"}, {"lang": "E", "loc": 13, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> halve<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>x<span class=\"br0\">)</span>  <span class=\"br0\">{</span> x <span class=\"sy0\">//=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> double<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> even<span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"br0\">{</span> return x <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> multiply<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> a<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> ab <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>even<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> ab <span class=\"sy0\">+=</span> b <span class=\"br0\">}</span><br/>        halve<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>a<span class=\"br0\">)</span><br/>        double<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    return ab<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 61, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>ethiopian_multiplication <span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tethiopian_multiplication <span class=\"br0\">(</span>a, b<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Product of 'a' and 'b'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\ta_positive<span class=\"sy0\">:</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tb_positive<span class=\"sy0\">:</span> b <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tx, y<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tx <span class=\"sy0\">:=</span> a<br/>\t\t\ty <span class=\"sy0\">:=</span> b<br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tx <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> <span class=\"kw2\">not</span> is_even_int <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">+</span> y<br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tx <span class=\"sy0\">:=</span> halve_int <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t\t\t\ty <span class=\"sy0\">:=</span> double_int <span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tResult_correct<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> b<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tdouble_int <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>                        <span class=\"co1\">--Two times 'n'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\thalve_int <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>                        <span class=\"co1\">--'n' divided by two.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> n <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tis_even_int <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>                        <span class=\"co1\">--Is 'n' an even integer?</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> n \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 10, "block": "<pre class=\"text highlighted_source\">open list number<br/>\u00a0<br/>halve x = x `div` 2<br/>double = (2*)<br/>\u00a0<br/>ethiopicmult a b = sum &lt;| map snd &lt;| filter (odd &lt;&lt; fst) &lt;| zip<br/>  (takeWhile (&gt;=1) &lt;| iterate halve a)<br/>  (iterate double b)<br/>\u00a0<br/>ethiopicmult 17 34</pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">defmodule Ethiopian do<br/>  def halve(n), do: div(n, 2)<br/>\u00a0<br/>  def double(n), do: n * 2<br/>\u00a0<br/>  def even(n), do: rem(n, 2) == 0<br/>\u00a0<br/>  def multiply(lhs, rhs) when is_integer(lhs) and lhs &gt; 0 and is_integer(rhs) and rhs &gt; 0 do<br/>    multiply(lhs, rhs, 0)<br/>  end<br/>\u00a0<br/>  def multiply(1, rhs, acc), do: rhs + acc<br/>  def multiply(lhs, rhs, acc) do<br/>    if even(lhs), do:   multiply(halve(lhs), double(rhs), acc),<br/>                  else: multiply(halve(lhs), double(rhs), acc+rhs)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect Ethiopian.multiply(17, 34)</pre>"}, {"lang": "Emacs Lisp", "loc": 16, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> even-p <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> halve <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>floor n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> double <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ethiopian-multiplication <span class=\"br0\">(</span><span class=\"kw1\">l</span> r<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sum <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"kw1\">l</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>even-p <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setq</span> sum <span class=\"br0\">(</span>+ r sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> <span class=\"kw1\">l</span> <span class=\"br0\">(</span>halve <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> r <span class=\"br0\">(</span>double r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    sum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 25, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>ethopian<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>multiply<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">halve</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">double</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">N</span> <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">even</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re5\">LHS</span><span class=\"sy1\">,</span><span class=\"re5\">RHS</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_integer</span><span class=\"br0\">(</span><span class=\"re5\">Lhs</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"re5\">Lhs</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span><br/>\t\t\t<span class=\"kw4\">is_integer</span><span class=\"br0\">(</span><span class=\"re5\">Rhs</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"re5\">Rhs</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re5\">LHS</span><span class=\"sy1\">,</span><span class=\"re5\">RHS</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">RHS</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">RHS</span><span class=\"sy3\">+</span><span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re5\">LHS</span><span class=\"sy1\">,</span><span class=\"re5\">RHS</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">even</span><span class=\"br0\">(</span><span class=\"re5\">LHS</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re3\">halve</span><span class=\"br0\">(</span><span class=\"re5\">LHS</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re3\">double</span><span class=\"br0\">(</span><span class=\"re5\">RHS</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re3\">halve</span><span class=\"br0\">(</span><span class=\"re5\">LHS</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re3\">double</span><span class=\"br0\">(</span><span class=\"re5\">RHS</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"re5\">RHS</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 24, "block": "<pre class=\"text highlighted_source\">PROGRAM ETHIOPIAN_MULT<br/>\u00a0<br/>FUNCTION EVEN(A)<br/>   EVEN=(A+1) MOD 2<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION HALF(A)<br/>   HALF=INT(A/2)<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION DOUBLE(A)<br/>   DOUBLE=2*A<br/>END FUNCTION<br/>\u00a0<br/>BEGIN<br/>   X=17 Y=34 TOT=0<br/>   WHILE X&gt;=1 DO<br/>     PRINT(X,)<br/>     IF EVEN(X)=0 THEN TOT=TOT+Y PRINT(Y) ELSE PRINT END IF<br/>     X=HALF(X) Y=DOUBLE(Y)<br/>   END WHILE<br/>   PRINT(\"=\",TOT)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 31, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> emHalf<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>n<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> emDouble<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> n<span class=\"sy1\">*</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> emIsEven<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> emMultiply<span class=\"br0\">(</span><span class=\"kw2\">integer</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> b<span class=\"br0\">)</span><br/> <span class=\"kw2\">integer</span> sum<br/>  sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> emIsEven<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> sum <span class=\"sy1\">+=</span> b <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    a <span class=\"sy1\">=</span> emHalf<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    b <span class=\"sy1\">=</span> emDouble<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">----------------------------------------------------------------</span><br/><span class=\"co1\">-- runtime</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"emMultiply(%d,%d) =\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">17</span><span class=\"sy2\">,</span><span class=\"nu0\">34</span><span class=\"sy2\">,</span>emMultiply<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy2\">,</span><span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Press Any Key<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">get_key</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> ethopian n m <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> halve n <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw4\">double</span> n <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">let</span> even n <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop n m result <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> result <span class=\"sy0\">+</span> m<br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> even n <span class=\"kw1\">then</span> loop <span class=\"br0\">(</span>halve n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> m<span class=\"br0\">)</span> result<br/>        <span class=\"kw1\">else</span> loop <span class=\"br0\">(</span>halve n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> m<span class=\"br0\">)</span> <span class=\"br0\">(</span>result <span class=\"sy0\">+</span> m<span class=\"br0\">)</span><br/>    loop n m <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 17, "block": "<pre class=\"text highlighted_source\">USING: arrays kernel math multiline sequences\u00a0;<br/>IN: ethiopian-multiplication<br/>\u00a0<br/>/*<br/>This function is built-in<br/>: odd? ( n --\u00a0? ) 1 bitand 1 number=\u00a0;<br/>*/<br/>\u00a0<br/>: double ( n -- 2*n ) 2 *\u00a0;<br/>: halve ( n -- n/2 ) 2 /i\u00a0;<br/>\u00a0<br/>: ethiopian-mult ( a b -- a*b )<br/>    [ 0 ] 2dip<br/>    [ dup 0 &gt; ] [<br/>        [ odd? [ + ] [ drop ] if ] 2keep<br/>        [ double ] [ halve ] bi*<br/>    ] while 2drop\u00a0;</pre>"}, {"lang": "FALSE", "loc": 5, "block": "<pre class=\"text highlighted_source\">[2/]h:<br/>[2*]d:<br/>[$2/2*-]o:<br/>[0[@$][$o;![@@\\<a class=\"__cf_email__\" data-cfemail=\"052145\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"527912\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]?h;<a class=\"__cf_email__\" data-cfemail=\"eccdac88\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;<a class=\"__cf_email__\" data-cfemail=\"b190f1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]#%\\%]m:<br/>17 34m;!.  {578}</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: even? ( n --\u00a0? ) 1 and 0=\u00a0;<br/>: e* ( x y -- x*y )<br/>  dup 0= if nip exit then<br/>  over 2* over 2/ recurse<br/>  swap even? if nip else + then\u00a0;</pre>"}, {"lang": "Fortran", "loc": 58, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> EthiopicMult<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  print <span class=\"sy0\">*</span>, ethiopic<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">34</span>, <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> halve<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">v</span><br/>    v <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>v <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> halve<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> doublit<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">v</span><br/>    v <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> doublit<br/>\u00a0<br/>  <span class=\"kw1\">function</span> iseven<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">iseven</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>    iseven <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>x, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> iseven<br/>\u00a0<br/>  <span class=\"kw1\">function</span> ethiopic<span class=\"br0\">(</span>multiplier, multiplicand, tutorialized<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">multiplier</span>, multiplicand<br/>    <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">tutorialized</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">plier</span>, plicand<br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">tutor</span><br/>\u00a0<br/>    plier <span class=\"sy0\">=</span> multiplier<br/>    plicand <span class=\"sy0\">=</span> multiplicand<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>tutorialized<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       tutor <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>    <span class=\"kw1\">else</span><br/>       tutor <span class=\"sy0\">=</span> tutorialized<br/>    <span class=\"kw1\">endif</span><br/>\u00a0<br/>    r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> tutor <span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(A, I0, A, I0)'</span><span class=\"br0\">)</span> <span class=\"st0\">\"ethiopian multiplication of \"</span>, plier, <span class=\"st0\">\" by \"</span>, plicand<br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>plier &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> iseven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(I4, \" \", I6, A)'</span><span class=\"br0\">)</span> plier, plicand, <span class=\"st0\">\" struck\"</span><br/>       <span class=\"kw1\">else</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(I4, \" \", I6, A)'</span><span class=\"br0\">)</span> plier, plicand, <span class=\"st0\">\" kept\"</span><br/>          r <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> plicand<br/>       <span class=\"kw1\">endif</span><br/>       <span class=\"kw1\">call</span> halve<span class=\"br0\">(</span>plier<span class=\"br0\">)</span><br/>       <span class=\"kw1\">call</span> doublit<span class=\"br0\">(</span>plicand<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> ethiopic<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> EthiopicMult</pre>"}, {"lang": "Go", "loc": 22, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> halve<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> double<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isEven<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ethMulti<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"sy2\">=</span> halve<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">),</span> double<span class=\"sy1\">(</span>j<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>isEven<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            r <span class=\"sy2\">+=</span> j<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"17 ethiopian 34 =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> ethMulti<span class=\"sy1\">(</span><span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 21, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>join<span class=\"br0\">)</span><br/>\u00a0<br/>halve <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>halve <span class=\"sy0\">=</span> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>double <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>double <span class=\"sy0\">=</span> join <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>ethiopicmult <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>ethiopicmult a b <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span>takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> halve a<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> double b<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> ethiopicmult <span class=\"nu0\">17</span> <span class=\"nu0\">34</span> <span class=\"sy0\">==</span> <span class=\"nu0\">17</span> <span class=\"sy0\">*</span> <span class=\"nu0\">34</span></pre>"}, {"lang": "HicEst", "loc": 26, "block": "<pre class=\"hicest highlighted_source\">   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> ethiopian<span class=\"br0\">(</span> <span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> <span class=\"co1\">! of \"main\"</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> ethiopian<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">)</span><br/>    ethiopian <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    left <span class=\"sy1\">=</span> x<br/>    right <span class=\"sy1\">=</span> y<br/>    <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> x<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span> isEven<span class=\"br0\">(</span>left<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> ethiopian <span class=\"sy1\">=</span> ethiopian <span class=\"sy1\">+</span> right<br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span> left <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span><br/>      left <span class=\"sy1\">=</span> halve<span class=\"br0\">(</span>left<span class=\"br0\">)</span><br/>      right <span class=\"sy1\">=</span> double<span class=\"br0\">(</span>right<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ENDDO</span><br/> <span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> halve<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>    halve <span class=\"sy1\">=</span> <span class=\"kw1\">INT</span><span class=\"br0\">(</span> x<span class=\"sy1\">/</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/> <span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> double<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>    double <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> x<br/> <span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isEven<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>    isEven <span class=\"sy1\">=</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><br/> <span class=\"kw1\">END</span> </pre>"}, {"lang": "Icon and Unicon", "loc": 22, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> ethiopian<span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># multiply successive pairs of command line arguments</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ethiopian<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>j<span class=\"br0\">)</span>                                      <span class=\"co1\"># recursive Ethiopian multiplication</span><br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> even<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> j                                <span class=\"co1\"># this exploits that icon control expressions return values</span><br/>         <span class=\"kw1\">else</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <br/>       <span class=\"br0\">(</span> <span class=\"kw1\">if</span> i <span class=\"sy1\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> ethiopian<span class=\"br0\">(</span>halve<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span>double<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>         <span class=\"kw1\">else</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span>   <br/>\u00a0<br/><span class=\"kw1\">procedure</span> double<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> i <span class=\"sy1\">*</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> halve<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> i <span class=\"sy1\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> even<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span> i <span class=\"sy1\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> i <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">double =:  <span class=\"nu0\">2</span>&amp;*<br/>halve  =: \u00a0%&amp;<span class=\"nu0\">2</span>           <span class=\"co1\">NB.  or the primitive  -:</span><br/>odd    =:  <span class=\"nu0\">2</span>&amp;|<br/>\u00a0<br/>ethiop =:  +/@<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"412e252501\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>] # <span class=\"sy0\">(</span>double~ &lt;@#<span class=\"sy0\">))</span> <span class=\"sy0\">(</span><span class=\"nu0\">1</span>&gt;.&lt;<a class=\"__cf_email__\" data-cfemail=\"d7f997bfb6bba1b2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span>^:a:</pre>"}, {"lang": "Java", "loc": 41, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Mult<span class=\"br0\">{</span><br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Scanner.html\"><span class=\"kw46\">Scanner</span></a> sc = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Scanner.html\"><span class=\"kw46\">Scanner</span></a><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">int</span> first = sc.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">int</span> second = sc.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>first <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        first = -first<span class=\"sy0\">;</span><br/>        second = -second<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> columns = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        columns.<span class=\"me1\">put</span><span class=\"br0\">(</span>first, second<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">int</span> sum = isEven<span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: second<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>      first = halveInt<span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      second = doubleInt<span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      columns.<span class=\"me1\">put</span><span class=\"br0\">(</span>first, second<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isEven<span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          sum += second<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>first <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> doubleInt<span class=\"br0\">(</span><span class=\"kw3\">int</span> doubleMe<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> doubleMe <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">//shift left</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> halveInt<span class=\"br0\">(</span><span class=\"kw3\">int</span> halveMe<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> halveMe <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">//shift right</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> isEven<span class=\"br0\">(</span><span class=\"kw3\">int</span> num<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> eth <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\thalve <span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"kw5\">double</span><span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">;</span>              <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\tisEven<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"kw1\">return</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>       <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>\tmult<span class=\"sy0\">:</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span> a <span class=\"sy0\">,</span> b <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\twhile <span class=\"br0\">(</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\ta.<span class=\"me1\">unshift</span><span class=\"br0\">(</span> eth.<span class=\"me1\">halve</span><span class=\"br0\">(</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tb.<span class=\"me1\">unshift</span><span class=\"br0\">(</span> eth.<span class=\"kw5\">double</span><span class=\"br0\">(</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> a.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span>eth.<span class=\"me1\">isEven</span><span class=\"br0\">(</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tsum <span class=\"sy0\">+=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span>\t\t<br/>\t\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">+</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">// eth.mult(17,34) returns 578</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def pairs: while( .[0] &gt; 0; [ (.[0] | halve), (.[1] | double) ]);</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">halve(x::Integer) = x &gt;&gt; one(x)<br/>double(x::Integer) = Int8(2) * x<br/>even(x::Integer) = x &amp; 1\u00a0!= 1</pre>"}, {"lang": "Kotlin", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun halve<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n / <span class=\"nu0\">2</span><br/>\u00a0<br/>fun <span class=\"kw2\">double</span><span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>fun isEven<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun ethiopianMultiply<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> xx <span class=\"sy0\">=</span> x<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> yy <span class=\"sy0\">=</span> y<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>xx <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isEven<span class=\"br0\">(</span>xx<span class=\"br0\">)</span><span class=\"br0\">)</span> sum +<span class=\"sy0\">=</span> yy<br/>       xx <span class=\"sy0\">=</span> halve<span class=\"br0\">(</span>xx<span class=\"br0\">)</span><br/>       yy <span class=\"sy0\">=</span> <span class=\"kw2\">double</span><span class=\"br0\">(</span>yy<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"17 x 34 = ${ethiopianMultiply(17, 34)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"99 x 99 = ${ethiopianMultiply(99, 99)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Limbo", "loc": 55, "block": "<pre class=\"text highlighted_source\">implement Ethiopian;<br/>\u00a0<br/>include \"sys.m\";<br/>\tsys: Sys;<br/>\tprint: import sys;<br/>include \"draw.m\";<br/>\tdraw: Draw;<br/>\u00a0<br/>Ethiopian\u00a0: module<br/>{<br/>\tinit\u00a0: fn(ctxt\u00a0: ref Draw-&gt;Context, args\u00a0: list of string);<br/>};<br/>\u00a0<br/>init (ctxt: ref Draw-&gt;Context, args: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\u00a0<br/>\tprint(\"\\n%d\\n\", ethiopian(17, 34, 0));<br/>\tprint(\"\\n%d\\n\", ethiopian(99, 99, 1));<br/>}<br/>\u00a0<br/>halve(n: int): int<br/>{<br/>\treturn (n /2);<br/>}<br/>\u00a0<br/>double(n: int): int<br/>{<br/>\treturn (n * 2);<br/>}<br/>\u00a0<br/>iseven(n: int): int<br/>{<br/>\treturn ((n%2) == 0);<br/>}<br/>\u00a0<br/>ethiopian(a: int, b: int, tutor: int): int<br/>{<br/>\tproduct\u00a0:= 0;<br/>\tif (tutor)<br/>\t\tprint(\"\\nmultiplying\u00a0%d x\u00a0%d\", a, b);<br/>\twhile (a &gt;= 1) {<br/>\t\tif (!(iseven(a))) {<br/>\t\t\tif (tutor)<br/>\t\t\t\tprint(\"\\n%3d  \u00a0%d\", a, b);<br/>\t\t\tproduct += b;<br/>\t\t} else<br/>\t\t\tif (tutor)<br/>\t\t\t\tprint(\"\\n%3d   ----\", a);<br/>\t\ta = halve(a);<br/>\t\tb = double(b);<br/>\t}<br/>\treturn product;<br/>}<br/>\u00a0</pre>"}, {"lang": "Locomotive Basic", "loc": 10, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DEF</span> FNiseven<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=<span class=\"br0\">(</span>a+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">MOD</span> <span class=\"nu0\">2</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">DEF</span> FNhalf<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=<span class=\"kw2\">INT</span><span class=\"br0\">(</span>a/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">DEF</span> FNdouble<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=<span class=\"nu0\">2</span>*a<br/><span class=\"nu0\">40</span> x=<span class=\"nu0\">17</span>:y=<span class=\"nu0\">34</span>:tot=<span class=\"nu0\">0</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">WHILE</span> x&gt;=<span class=\"nu0\">1</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">PRINT</span> x,<br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> FNiseven<span class=\"br0\">(</span>x<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> tot=tot+y:<span class=\"kw1\">PRINT</span> y <span class=\"kw1\">ELSE</span> <span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">80</span> x=FNhalf<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:y=FNdouble<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">WEND</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"=\"</span>, tot</pre>"}, {"lang": "Logo", "loc": 15, "block": "<pre class=\"text highlighted_source\">to double\u00a0:x<br/>  output ashift\u00a0:x  1<br/>end<br/>to halve\u00a0:x<br/>  output ashift\u00a0:x -1<br/>end<br/>to even?\u00a0:x<br/>  output equal? 0 bitand 1\u00a0:x<br/>end<br/>to eproduct\u00a0:x\u00a0:y<br/>  if\u00a0:x = 0 [output 0]<br/>  ifelse even?\u00a0:x ~<br/>    [output      eproduct halve\u00a0:x double\u00a0:y] ~<br/>    [output\u00a0:y + eproduct halve\u00a0:x double\u00a0:y]<br/>end</pre>"}, {"lang": "LOLCODE", "loc": 30, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I Halve <span class=\"kw4\">YR</span> Integer<br/>  <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">QUOSHUNT</span> <span class=\"kw2\">OF</span> Integer <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I Dubble <span class=\"kw4\">YR</span> Integer<br/>  <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">PRODUKT</span> <span class=\"kw2\">OF</span> Integer <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I IzEven <span class=\"kw4\">YR</span> Integer<br/>  <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">BOTH SAEM</span> <span class=\"nu0\">0</span> <span class=\"kw4\">AN</span> <span class=\"kw2\">MOD</span> <span class=\"kw2\">OF</span> Integer <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I EthiopianProdukt <span class=\"kw4\">YR</span> a <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> b<br/>  <span class=\"kw1\">I HAS A</span> Result <span class=\"kw1\">ITZ</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> <span class=\"kw3\">LOOP</span> <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> x WILE <span class=\"kw2\">DIFFRINT</span> a <span class=\"kw4\">AN</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw4\">NOT</span> I <span class=\"kw2\">IZ</span> IzEven <span class=\"kw4\">YR</span> a <span class=\"kw2\">MKAY</span><br/>    <span class=\"kw2\">O RLY?</span><br/>      YA RLY<br/>        Result <span class=\"kw1\">R</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> Result <span class=\"kw4\">AN</span> b<br/>    OIC<br/>    a <span class=\"kw1\">R</span> I <span class=\"kw2\">IZ</span> Halve <span class=\"kw4\">YR</span> a <span class=\"kw2\">MKAY</span><br/>    b <span class=\"kw1\">R</span> I <span class=\"kw2\">IZ</span> Dubble <span class=\"kw4\">YR</span> b <span class=\"kw2\">MKAY</span><br/>  <span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> <span class=\"kw3\">LOOP</span><br/>  <span class=\"kw1\">FOUND YR</span> Result<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/><span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> EthiopianProdukt <span class=\"kw4\">YR</span> <span class=\"nu0\">17</span> <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> <span class=\"nu0\">34</span> <span class=\"kw2\">MKAY</span><br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 28, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> halve<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> double<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isEven<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">%</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ethiopian<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> isEven<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            result <span class=\"sy0\">=</span> result <span class=\"sy0\">+</span> y<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        x <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> double<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 7, "block": "<pre class=\"text highlighted_source\">IntegerHalving[x_]:=Floor[x/2]<br/>IntegerDoubling[x_]:=x*2;<br/>OddInteger           OddQ<br/>Ethiopian[x_, y_]\u00a0:= <br/>Total[Select[NestWhileList[{IntegerHalving[#[[1]]],IntegerDoubling[#[[2]]]}&amp;, {x,y}, (#[[1]]&gt;1&amp;)], OddQ[#[[1]]]&amp;]][[2]]<br/>\u00a0<br/>Ethiopian[17, 34]</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> result = halveInt<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>\u00a0<br/>    result = idivide<span class=\"br0\">(</span>number,<span class=\"nu0\">2</span>,<span class=\"co2\">'floor'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Metafont", "loc": 20, "block": "<pre class=\"text highlighted_source\">vardef halve(expr x) = floor(x/2) enddef;<br/>vardef double(expr x) = x*2 enddef;<br/>vardef iseven(expr x) = if (x mod 2) = 0: true else: false fi enddef;<br/>\u00a0<br/>primarydef a ethiopicmult b =<br/>  begingroup<br/>    save r_, plier_, plicand_;<br/>    plier_\u00a0:= a; plicand_\u00a0:= b;<br/>    r_\u00a0:= 0;<br/>    forever: exitif plier_ &lt; 1;<br/>      if not iseven(plier_): r_\u00a0:= r_ + plicand_; fi<br/>      plier_\u00a0:= halve(plier_);<br/>      plicand_\u00a0:= double(plicand_);<br/>    endfor<br/>    r_<br/>  endgroup<br/>enddef;<br/>\u00a0<br/>show( (17 ethiopicmult 34) );<br/>end</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u041f1\t\u041f2\t&lt;-&gt;\t\u041f0<br/>\u0418\u041f0\t1\t-\tx#0\t29<br/>\t\u0418\u041f1\t2\t*\t\u041f1<br/>\t\u0418\u041f0\t2\t/\t[x]\t\u041f0<br/>\t2\t/\t{x}\tx#0\t04\t\u0418\u041f2\t\u0418\u041f1\t+\t\u041f2<br/>\u0411\u041f\t04<br/>\u0418\u041f2\t\u0421/\u041f</pre>"}, {"lang": "MMIX", "loc": 51, "block": "<pre class=\"mmix highlighted_source\"><span class=\"nu1\">A</span>\t<span class=\"kw2\">IS</span>\t<span class=\"nu1\">17</span><br/><span class=\"nu1\">B</span>\t<span class=\"kw2\">IS</span>\t<span class=\"nu1\">34</span><br/>\u00a0<br/>pliar\t<span class=\"kw2\">IS</span> \t<span class=\"nu3\">$255</span>\t\t<span class=\"co2\">% designating main registers </span><br/>pliand\t<span class=\"kw2\">GREG</span><br/><span class=\"nu1\">acc</span>\t<span class=\"kw2\">GREG</span><br/>str\t<span class=\"kw2\">IS</span>\tpliar\t\t<span class=\"co2\">% reuse reg $255 for printing</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\tData_Segment<br/>\t<span class=\"kw2\">GREG</span>\t@<br/>BUF\t<span class=\"kw2\">OCTA</span>\t<span class=\"nu2\">#3030303030303030</span> <span class=\"co2\">% reserve a buffer that is big enough to hold</span><br/>\t<span class=\"kw2\">OCTA</span>\t<span class=\"nu2\">#3030303030303030</span> <span class=\"co2\">% a max (signed) 64 bit integer:</span><br/>\t<span class=\"kw2\">OCTA</span>\t<span class=\"nu2\">#3030300a00000000</span> <span class=\"co2\">%   2^63 - 1 = 9223372036854775807</span><br/><span class=\"co3\">\t\t\t\t \u00a0% string is terminated with NL, 0</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\t<span class=\"nu2\">#1000</span>\t\t<span class=\"co2\">% locate program at address</span><br/>\t<span class=\"kw2\">GREG</span>\t@<br/>halve\t<span class=\"kw1\">SR</span>\tpliar<span class=\"sy0\">,</span>pliar<span class=\"sy0\">,</span><span class=\"nu1\">1</span><br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>double\t<span class=\"kw1\">SL</span>\tpliand<span class=\"sy0\">,</span>pliand<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t<br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>odd\t<span class=\"kw1\">DIV</span>\t<span class=\"nu3\">$77</span><span class=\"sy0\">,</span>pliar<span class=\"sy0\">,</span><span class=\"nu1\">2</span><br/>\t<span class=\"kw1\">GET</span>\t<span class=\"nu3\">$78</span><span class=\"sy0\">,</span><span class=\"kw3\">rR</span><br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu3\">$127</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/><span class=\"co3\"><br/>\t\t\t\t% Main is the entry point of the program</span><br/>Main \t<span class=\"kw2\">SET</span>\tpliar<span class=\"sy0\">,</span><span class=\"nu1\">A</span>\t\t<span class=\"co2\">% initialize registers for calculation</span><br/>\t<span class=\"kw2\">SET</span>\tpliand<span class=\"sy0\">,</span><span class=\"nu1\">B</span><br/>\t<span class=\"kw2\">SET</span>\t<span class=\"nu1\">acc</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>1H\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span>odd<br/>\t<span class=\"kw1\">BZ</span>\t<span class=\"nu3\">$78</span><span class=\"sy0\">,</span><span class=\"nu1\">2F</span>\t\t<span class=\"co2\">% if pliar is even skip incr. acc with pliand</span><br/>\t<span class=\"kw1\">ADD</span>\t<span class=\"nu1\">acc</span><span class=\"sy0\">,</span><span class=\"nu1\">acc</span><span class=\"sy0\">,</span>pliand\t<span class=\"co2\">% </span><br/>2H\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span>halve\t<span class=\"co2\">% halve pliar</span><br/>\t<span class=\"kw1\">GO</span>\t<span class=\"nu3\">$127</span><span class=\"sy0\">,</span>double\t<span class=\"co2\">% and double pliand</span><br/>\t<span class=\"kw1\">PBNZ</span>\tpliar<span class=\"sy0\">,</span><span class=\"nu1\">1B</span>\t<span class=\"co2\">% repeat from 1H while pliar &gt; 0</span><br/><span class=\"co3\">// result: acc = 17 x 34</span><br/><span class=\"co3\">// next: print result --&gt; stdout</span><br/><span class=\"co3\">// $0 is a temp register</span><br/>\t<span class=\"kw1\">LDA</span>\tstr<span class=\"sy0\">,</span>BUF<span class=\"sy0\">+</span><span class=\"nu1\">19</span>\t<span class=\"co2\">% points after the end of the string </span><br/>2H\t<span class=\"kw1\">SUB</span>\tstr<span class=\"sy0\">,</span>str<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t<span class=\"co2\">% update buffer pointer</span><br/>\t<span class=\"kw1\">DIV</span>\t<span class=\"nu1\">acc</span><span class=\"sy0\">,</span><span class=\"nu1\">acc</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span>\t<span class=\"co2\">% do a divide and mod</span><br/>\t<span class=\"kw1\">GET</span>\t<span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"kw3\">rR</span>\t\t<span class=\"co2\">% get digit from special purpose reg. rR</span><br/><span class=\"co3\">\t\t\t\t% containing the remainder of the division</span><br/>\t<span class=\"kw1\">INCL</span>\t<span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"st0\">'0'</span>\t\t<span class=\"co2\">% convert to ascii</span><br/>\t<span class=\"kw1\">STBU</span>\t<span class=\"nu3\">$0</span><span class=\"sy0\">,</span>str\t\t<span class=\"co2\">% place digit in buffer</span><br/>\t<span class=\"kw1\">PBNZ</span>\t<span class=\"nu1\">acc</span><span class=\"sy0\">,</span><span class=\"nu1\">2B</span>\t\t<span class=\"co2\">% next</span><br/><span class=\"co3\">\t\t\t\t% 'str' points to the start of the result</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut\t<span class=\"co2\">% output answer to stdout</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t<span class=\"co2\">% exit</span></pre>"}, {"lang": "Modula-2", "loc": 46, "block": "<pre class=\"modula2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> EthiopianMultiplication;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> SWholeIO <span class=\"kw1\">IMPORT</span><br/>  WriteCard;<br/><span class=\"kw1\">FROM</span> STextIO <span class=\"kw1\">IMPORT</span><br/>  WriteString<span class=\"sy0\">,</span> WriteLn;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Halve<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> A<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  A <span class=\"sy0\">:=</span> A <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>;<br/><span class=\"kw1\">END</span> Halve;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Double<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> A<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  A <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> A;<br/><span class=\"kw1\">END</span> Double;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsEven<span class=\"br0\">(</span>A<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">RETURN</span> <span class=\"br0\">(</span>X <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> REM <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">END</span> IsEven;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  X<span class=\"sy0\">,</span> Y<span class=\"sy0\">,</span> Tot<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  X <span class=\"sy0\">:=</span> <span class=\"nu0\">17</span>;<br/>  Y <span class=\"sy0\">:=</span> <span class=\"nu0\">34</span>;<br/>  Tot <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">WHILE</span> X &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>    WriteCard<span class=\"br0\">(</span>X<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">IF</span> IsEven<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>Tot<span class=\"sy0\">,</span> Y<span class=\"br0\">)</span>;<br/>      WriteCard<span class=\"br0\">(</span>Y<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    WriteLn;<br/>    Halve<span class=\"br0\">(</span>X<span class=\"br0\">)</span>;<br/>    Double<span class=\"br0\">(</span>Y<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  WriteString<span class=\"br0\">(</span><span class=\"st0\">\"=         \"</span><span class=\"br0\">)</span>;<br/>  WriteCard<span class=\"br0\">(</span>Tot<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>  WriteLn;<br/><span class=\"kw1\">END</span> EthiopianMultiplication.<br/>\u00a0</pre>"}, {"lang": "Modula-3", "loc": 38, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Ethiopian <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsEven<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> n <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">END</span> IsEven;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Double<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>;<br/>  <span class=\"kw1\">END</span> Double;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Half<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> n <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span>;<br/>  <span class=\"kw1\">END</span> Half;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Multiply<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span><br/>    temp <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    plier <span class=\"sy0\">:=</span> a;<br/>    plicand <span class=\"sy0\">:=</span> b;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">WHILE</span> plier &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> <span class=\"kw1\">NOT</span> IsEven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        temp <span class=\"sy0\">:=</span> temp <span class=\"sy0\">+</span> plicand;<br/>      <span class=\"kw1\">END</span>;<br/>      plier <span class=\"sy0\">:=</span> Half<span class=\"br0\">(</span>plier<span class=\"br0\">)</span>;<br/>      plicand <span class=\"sy0\">:=</span> Double<span class=\"br0\">(</span>plicand<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> temp;<br/>  <span class=\"kw1\">END</span> Multiply;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"17 times 34 = \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Multiply<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Ethiopian.</pre>"}, {"lang": "Nemerle", "loc": 27, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module Ethiopian<br/>{<br/>    Multiply(x\u00a0: int, y\u00a0: int)\u00a0: int<br/>    {<br/>        def halve(a)  {a / 2}<br/>        def doble(a)  {a * 2}<br/>        def isEven(a) {a\u00a0% 2 == 0}<br/>        def multiply(p, q)<br/>        {<br/>            match(p)<br/>            {<br/>                |p when (p &lt; 1) =&gt; 0<br/>                |p when (isEven(p)) =&gt; 0 + multiply(halve(p), doble(q))<br/>                |_ =&gt; q + multiply(halve(p), doble(q))<br/>            }<br/>        }<br/>        multiply(x, y)<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        WriteLine(\"By Ethiopian multiplication, 17 * 34 = {0}\", Multiply(17, 34));<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 31, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/><span class=\"coMULTI\">/*REXX program multiplies 2 integers by Ethiopian/Russian peasant method*/</span><br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">1000</span>              <span class=\"coMULTI\">/*handle extremely large integers.     */</span><br/>                                 <span class=\"coMULTI\">/*handles zeroes and negative integers.*/</span><br/>                                 <span class=\"coMULTI\">/*A &amp; B  should be checked if integers.*/</span><br/><span class=\"kw1\">parse</span> arg a b .<br/><span class=\"kw1\">say</span> <span class=\"st0\">'a='</span> a<br/><span class=\"kw1\">say</span> <span class=\"st0\">'b='</span> b<br/><span class=\"kw1\">say</span> <span class=\"st0\">'product='</span> emult<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method emult<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> x x <span class=\"nu0\">1</span> ox<br/>  prod=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> while x<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>iseven<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw3\">then</span> prod=prod+y<br/>    x=halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    y=dubble<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> prod<span class=\"sy0\">*</span>ox.<span class=\"kw6\">sign</span><br/>\u00a0<br/>method halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">return</span> x\u00a0% <span class=\"nu0\">2</span><br/>\u00a0<br/>method dubble<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">return</span> x + x<br/>\u00a0<br/>method iseven<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">//</span><span class=\"nu0\">2</span> == <span class=\"nu0\">0</span></pre>"}, {"lang": "Nim", "loc": 15, "block": "<pre class=\"text highlighted_source\">proc halve(x): int = x div 2<br/>proc double(x): int = x * 2<br/>proc even(x): bool = x mod 2 == 0<br/>\u00a0<br/>proc ethiopian(x, y): int =<br/>  var x = x<br/>  var y = y<br/>\u00a0<br/>  while x &gt;= 1:<br/>    if not even x:<br/>      result += y<br/>    x = halve x<br/>    y = double y<br/>\u00a0<br/>echo ethiopian(17, 34)</pre>"}, {"lang": "Objeck", "loc": 42, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> EthiopianMultiplication <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    first <span class=\"sy0\">:=</span> IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    second <span class=\"sy0\">:=</span> IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"----\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Mul<span class=\"br0\">(</span>first<span class=\"sy0\">,</span> second<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> Mul<span class=\"br0\">(</span>first <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> second <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>first <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      first <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> first<span class=\"sy0\">;</span><br/>      second <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> second<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    sum <span class=\"sy0\">:=</span> isEven<span class=\"br0\">(</span>first<span class=\"br0\">)</span>? <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> second<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      first <span class=\"sy0\">:=</span> halveInt<span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      second <span class=\"sy0\">:=</span> doubleInt<span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">false</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> second<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>first <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> halveInt<span class=\"br0\">(</span>num <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> num <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> doubleInt<span class=\"br0\">(</span>num <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> num <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> isEven<span class=\"br0\">(</span>num <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>num and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Object Pascal", "loc": 37, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">unit</span> Multiplication<span class=\"sy1\">;</span><br/><span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Double<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> Halve<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> Even<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> Ethiopian<span class=\"br0\">(</span>NumberA<span class=\"sy1\">,</span> NumberB<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>  <span class=\"kw1\">function</span> Double<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Number <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Halve<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Number <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Even<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Number <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Ethiopian<span class=\"br0\">(</span>NumberA<span class=\"sy1\">,</span> NumberB<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> NumberA &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> Even<span class=\"br0\">(</span>NumberA<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"sy3\">+</span> NumberB<span class=\"sy1\">;</span><br/>      NumberA <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Halve<span class=\"br0\">(</span>NumberA<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      NumberB <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Double<span class=\"br0\">(</span>NumberB<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Objective-C", "loc": 43, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">BOOL</span> iseven<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> EthiopicMult <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>mult<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>plier by<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>plicand;<br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>halve<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>a;<br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw4\">double</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>a;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> EthiopicMult<br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>mult<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>plier by<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>plicand<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>plier &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>iseven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"br0\">)</span> r <span class=\"sy0\">+=</span> plicand;<br/>    plier <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EthiopicMult halve<span class=\"sy0\">:</span> plier<span class=\"br0\">]</span>;<br/>    plicand <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EthiopicMult <span class=\"kw4\">double</span><span class=\"sy0\">:</span> plicand<span class=\"br0\">]</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> r;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>halve<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>a<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a&gt;&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw4\">double</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>a<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a&lt;&lt;<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>EthiopicMult mult<span class=\"sy0\">:</span> <span class=\"nu0\">17</span> by<span class=\"sy0\">:</span> <span class=\"nu0\">34</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 58, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* We optimize a bit by not keeping the intermediate lists, and summing<br/>   the right column on-the-fly, like in the C version.<br/>   The function takes \"halve\" and \"double\" operators and \"is_even\" predicate as arguments,<br/>   but also \"is_zero\", \"zero\" and \"add\". This allows for more general uses of the<br/>   ethiopian multiplication. *)</span><br/><span class=\"kw1\">let</span> ethiopian is_zero is_even halve zero double add b a <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> g a b r <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> is_zero a<br/>    <span class=\"kw1\">then</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> g <span class=\"br0\">(</span>halve a<span class=\"br0\">)</span> <span class=\"br0\">(</span>double b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>is_even a<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>add b r<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  g a b zero<br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> imul <span class=\"sy0\">=</span><br/>  ethiopian <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"sy0\">=</span> <span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"sy0\">+</span> <span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/>imul <span class=\"nu0\">17</span> <span class=\"nu0\">34</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* -\u00a0: int = 578 *)</span><br/>\u00a0<br/><span class=\"co1\">(* Now, we have implemented the same algorithm as \"rapid exponentiation\",<br/>   merely changing operator names *)</span><br/><span class=\"kw1\">let</span> ipow <span class=\"sy0\">=</span><br/>  ethiopian <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"sy0\">=</span> <span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/>ipow <span class=\"nu0\">2</span> <span class=\"nu0\">16</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* -\u00a0: int = 65536 *)</span><br/>\u00a0<br/><span class=\"co1\">(* still renaming operators, if \"halving\" is just subtracting one,<br/>   and \"doubling\", adding one, then we get an addition *)</span><br/><span class=\"kw1\">let</span> iadd a b <span class=\"sy0\">=</span><br/>  ethiopian <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"sy0\">=</span> <span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">)</span> b <span class=\"br0\">(</span><span class=\"kw1\">function</span> x <span class=\"sy0\">-&gt;</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x y <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> y<span class=\"br0\">)</span> <span class=\"nu0\">0</span> a<br/><span class=\"sy0\">;;</span><br/>\u00a0<br/>iadd <span class=\"nu0\">421</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* -\u00a0: int = 1421 *)</span><br/>\u00a0<br/><span class=\"co1\">(* One can do much more with \"ethiopian multiplication\",<br/>   since the two \"multiplicands\" and the result may be of three different types,<br/>   as shown by the typing system of ocaml *)</span><br/>\u00a0<br/>ethiopian<span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span>          <span class=\"co1\">(* is_zero *)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span>          <span class=\"co1\">(* is_even *)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span>            <span class=\"co1\">(* halve *)</span><br/>    <span class=\"sy0\">'</span>b <span class=\"sy0\">-&gt;</span>                    <span class=\"co1\">(* zero *)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">'</span>c <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span>            <span class=\"co1\">(* double *)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">'</span>c <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>b <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span>      <span class=\"co1\">(* add *)</span><br/>    <span class=\"sy0\">'</span>c <span class=\"sy0\">-&gt;</span>                    <span class=\"co1\">(* b *)</span><br/>    <span class=\"sy0\">'</span>a <span class=\"sy0\">-&gt;</span>                    <span class=\"co1\">(* a *)</span><br/>    <span class=\"sy0\">'</span>b                       <span class=\"co1\">(* result *)</span><br/><span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"co1\">(* Here zero is the starting value for the accumulator of the sums<br/>   of values in the right column in the original algorithm. But the \"add\"<br/>   me do something else, see for example the RosettaCode page on <br/>   \"Exponentiation operator\". *)</span></pre>"}, {"lang": "Octave", "loc": 34, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> halve<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/floor.html\"><span class=\"kw5\">floor</span></a><span class=\"br0\">(</span>a<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> doublit<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> a<span class=\"sy1\">*</span><span class=\"nu0\">2</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> iseven<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>a<span class=\"sy5\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> ethiopicmult<span class=\"br0\">(</span>plier<span class=\"sy5\">,</span> plicand<span class=\"sy5\">,</span> tutor<span class=\"sy3\">=</span><a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"ethiopic multiplication of\u00a0%d and\u00a0%d\\n\"</span><span class=\"sy5\">,</span> plier<span class=\"sy5\">,</span> plicand<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/>  <span class=\"kw4\">while</span><span class=\"br0\">(</span>plier <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">if</span> <span class=\"br0\">(</span> iseven<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"kw4\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span><br/>\t<a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%4d\u00a0%6d struck\\n\"</span><span class=\"sy5\">,</span> plier<span class=\"sy5\">,</span> plicand<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">endif</span><br/>    <span class=\"kw4\">else</span><br/>      r <span class=\"sy3\">=</span> r <span class=\"sy1\">+</span> plicand<span class=\"sy5\">;</span><br/>      <span class=\"kw4\">if</span> <span class=\"br0\">(</span>tutor<span class=\"br0\">)</span><br/>\t<a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%4d\u00a0%6d kept\\n\"</span><span class=\"sy5\">,</span> plier<span class=\"sy5\">,</span> plicand<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">endif</span><br/>    <span class=\"kw4\">endif</span><br/>    plier <span class=\"sy3\">=</span> halve<span class=\"br0\">(</span>plier<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    plicand <span class=\"sy3\">=</span> doublit<span class=\"br0\">(</span>plicand<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endwhile</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>ethiopicmult<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy5\">,</span> <span class=\"nu0\">34</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/true.html\"><span class=\"kw10\">true</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: halve   2 /\u00a0;<br/>: double  2 *\u00a0;<br/>\u00a0<br/>: ethiopian<br/>   dup ifZero: [ nip return ]<br/>   over double over halve ethiopian <br/>   swap isEven ifTrue: [ nip ] else: [ + ]\u00a0;</pre>"}, {"lang": "Ol", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (ethiopian-multiplication l r)<br/>   (let ((even? (lambda (n)<br/>                  (eq? (mod n 2) 0))))<br/>\u00a0<br/>   (let loop ((sum 0) (l l) (r r))<br/>      (print \"sum: \" sum \", l: \" l \", r: \" r)<br/>      (if (eq? l 0)<br/>         sum<br/>         (loop<br/>            (if (even? l) (+ sum r) sum)<br/>            (floor (/ l 2)) (* r 2))))))<br/>\u00a0<br/>(print (ethiopian-multiplication 17 34))<br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 28, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Halve</span> X<span class=\"br0\">}</span>   X <span class=\"kw1\">div</span> 2             <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Double</span> X<span class=\"br0\">}</span>  X <span class=\"sy0\">*</span> 2               <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Even</span> X<span class=\"br0\">}</span>    <span class=\"br0\">{</span>Abs X <span class=\"kw1\">mod</span> 2<span class=\"br0\">}</span> <span class=\"sy0\">==</span> 0  <span class=\"kw1\">end</span>  <span class=\"co1\">%% standard function: Int.isEven</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">EthiopicMult</span> X Y<span class=\"br0\">}</span><br/>     X <span class=\"sy0\">&gt;=</span> 0 = <span class=\"kw1\">true</span> <span class=\"co1\">%% assert: X must not be negative</span><br/>\u00a0<br/>     Rows = <span class=\"kw1\">for</span><br/>               L <span class=\"kw1\">in</span> X; L<span class=\"sy0\">&gt;</span>0;  <span class=\"br0\">{</span>Halve L<span class=\"br0\">}</span>  <span class=\"co1\">%% C-like iterator: \"Init; While; Next\"</span><br/>               R <span class=\"kw1\">in</span> Y; <span class=\"kw1\">true</span>; <span class=\"br0\">{</span>Double R<span class=\"br0\">}</span><br/>               collect:Collect<br/>\t    <span class=\"kw1\">do</span><br/>\t       <span class=\"br0\">{</span>Collect L<span class=\"sy0\">#</span>R<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">end</span><br/>\u00a0<br/>     OddRows = <span class=\"br0\">{</span>Filter Rows LeftIsOdd<span class=\"br0\">}</span><br/>     RightColumn = <span class=\"br0\">{</span>Map OddRows SelectRight<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Sum RightColumn<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Helpers</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LeftIsOdd</span> L<span class=\"sy0\">#</span>_<span class=\"br0\">}</span>   <span class=\"br0\">{</span>Not <span class=\"br0\">{</span>Even L<span class=\"br0\">}</span><span class=\"br0\">}</span>          <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SelectRight</span> _<span class=\"sy0\">#</span>R<span class=\"br0\">}</span> R                       <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Sum</span> Xs<span class=\"br0\">}</span>          <span class=\"br0\">{</span>FoldL Xs Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 0<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>EthiopicMult 17 34<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Oz", "loc": 28, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Halve</span> X<span class=\"br0\">}</span>   X <span class=\"kw1\">div</span> 2             <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Double</span> X<span class=\"br0\">}</span>  X <span class=\"sy0\">*</span> 2               <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Even</span> X<span class=\"br0\">}</span>    <span class=\"br0\">{</span>Abs X <span class=\"kw1\">mod</span> 2<span class=\"br0\">}</span> <span class=\"sy0\">==</span> 0  <span class=\"kw1\">end</span>  <span class=\"co1\">%% standard function: Int.isEven</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">EthiopicMult</span> X Y<span class=\"br0\">}</span><br/>     X <span class=\"sy0\">&gt;=</span> 0 = <span class=\"kw1\">true</span> <span class=\"co1\">%% assert: X must not be negative</span><br/>\u00a0<br/>     Rows = <span class=\"kw1\">for</span><br/>               L <span class=\"kw1\">in</span> X; L<span class=\"sy0\">&gt;</span>0;  <span class=\"br0\">{</span>Halve L<span class=\"br0\">}</span>  <span class=\"co1\">%% C-like iterator: \"Init; While; Next\"</span><br/>               R <span class=\"kw1\">in</span> Y; <span class=\"kw1\">true</span>; <span class=\"br0\">{</span>Double R<span class=\"br0\">}</span><br/>               collect:Collect<br/>\t    <span class=\"kw1\">do</span><br/>\t       <span class=\"br0\">{</span>Collect L<span class=\"sy0\">#</span>R<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">end</span><br/>\u00a0<br/>     OddRows = <span class=\"br0\">{</span>Filter Rows LeftIsOdd<span class=\"br0\">}</span><br/>     RightColumn = <span class=\"br0\">{</span>Map OddRows SelectRight<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Sum RightColumn<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Helpers</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LeftIsOdd</span> L<span class=\"sy0\">#</span>_<span class=\"br0\">}</span>   <span class=\"br0\">{</span>Not <span class=\"br0\">{</span>Even L<span class=\"br0\">}</span><span class=\"br0\">}</span>          <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SelectRight</span> _<span class=\"sy0\">#</span>R<span class=\"br0\">}</span> R                       <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Sum</span> Xs<span class=\"br0\">}</span>          <span class=\"br0\">{</span>FoldL Xs Number<span class=\"sy0\">.</span><span class=\"st0\">'+'</span> 0<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>EthiopicMult 17 34<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 11, "block": "<pre class=\"parigp highlighted_source\">halve<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><br/>double<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">;</span><br/>even<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=!</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>multE<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span> my<span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">while</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>even<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               d<span class=\"sy0\">+=</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          a<span class=\"sy0\">=</span>halve<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          b<span class=\"sy0\">=</span>double<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     d<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 32, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> EthiopianMultiplication<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Double<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Double <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Number <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Halve<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Halve <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Number <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Even<span class=\"br0\">(</span>Number<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Even <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Number <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> Ethiopian<span class=\"br0\">(</span>NumberA<span class=\"sy1\">,</span> NumberB<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    Ethiopian <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> NumberA &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">begin</span><br/>\t  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> Even<span class=\"br0\">(</span>NumberA<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t    Ethiopian <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Ethiopian <span class=\"sy3\">+</span> NumberB<span class=\"sy1\">;</span><br/>\t  NumberA <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Halve<span class=\"br0\">(</span>NumberA<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t  NumberB <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Double<span class=\"br0\">(</span>NumberB<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Write</span><span class=\"br0\">(</span>Ethiopian<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 24, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> halve <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> double <span class=\"br0\">{</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> iseven <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ethiopicmult<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"sy0\">,</span> <span class=\"re0\">$plicand</span><span class=\"sy0\">,</span> <span class=\"re0\">$tutor</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"ethiopic multiplication of $plier and $plicand<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$tutor</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$plier</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$r</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$plicand</span> <span class=\"kw1\">unless</span> iseven<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$tutor</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$plier, $plicand \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>iseven<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\" struck\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" kept\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$plier</span> <span class=\"sy0\">=</span> halve<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$plicand</span> <span class=\"sy0\">=</span> double<span class=\"br0\">(</span><span class=\"re0\">$plicand</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> ethiopicmult<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> halve  <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span> <span class=\"kw1\">is</span> rw<span class=\"br0\">)</span>    <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> double <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span> <span class=\"kw1\">is</span> rw<span class=\"br0\">)</span>    <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> even   <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ethiopic<span class=\"sy0\">-</span>mult <span class=\"br0\">(</span>Int <span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> Int <span class=\"re0\">$b</span> <span class=\"kw1\">is</span> copy <span class=\"sy0\">--&gt;</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> Int <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>\teven <span class=\"re0\">$a</span> <span class=\"kw1\">or</span> <span class=\"re0\">$r</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>\thalve <span class=\"re0\">$a</span><span class=\"sy0\">;</span><br/>\tdouble <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> ethiopic<span class=\"sy0\">-</span>mult<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function emHalf(integer n)<br/>    return floor(n/2)<br/>end function<br/>\u00a0<br/>function emDouble(integer n)<br/>    return n*2<br/>end function<br/>\u00a0<br/>function emIsEven(integer n)<br/>    return (remainder(n,2)=0)<br/>end function<br/>\u00a0<br/>function emMultiply(integer a, integer b)<br/>integer sum = 0<br/>    while a!=0 do<br/>        if not emIsEven(a) then sum += b end if<br/>        a = emHalf(a)<br/>        b = emDouble(b)<br/>    end while<br/>    return sum<br/>end function<br/>\u00a0<br/>printf(1,\"emMultiply(%d,%d) =\u00a0%d\\n\",{17,34,emMultiply(17,34)})</pre>"}, {"lang": "PHP", "loc": 33, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> halve<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> double<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> iseven<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> ethiopicmult<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"sy0\">,</span> <span class=\"re0\">$plicand</span><span class=\"sy0\">,</span> <span class=\"re0\">$tutor</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$tutor</span><span class=\"br0\">)</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"ethiopic multiplication of <span class=\"es4\">$plier</span> and <span class=\"es4\">$plicand</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"re0\">$plier</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>iseven<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"re0\">$r</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$plicand</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$tutor</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$plier</span>, <span class=\"es4\">$plicand</span> \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>iseven<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"struck\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"kept\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$plier</span> <span class=\"sy0\">=</span> halve<span class=\"br0\">(</span><span class=\"re0\">$plier</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$plicand</span> <span class=\"sy0\">=</span> double<span class=\"br0\">(</span><span class=\"re0\">$plicand</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> ethiopicmult<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(de halve (N)<br/>   (/ N 2) )<br/>\u00a0<br/>(de double (N)<br/>   (* N 2) )<br/>\u00a0<br/>(de even? (N)<br/>   (not (bit? 1 N)) )<br/>\u00a0<br/>(de ethiopian (X Y)<br/>   (let R 0<br/>      (while (&gt;= X 1)<br/>         (or (even? X) (inc 'R Y))<br/>         (setq<br/>            X (halve X)<br/>            Y (double Y) ) )<br/>      R ) )</pre>"}, {"lang": "Pike", "loc": 18, "block": "<pre class=\"pike highlighted_source\">int ethopian_multiply<span class=\"br0\">(</span>int l, int r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    int halve<span class=\"br0\">(</span>int n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    int double<span class=\"br0\">(</span>int n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    int<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> evenp<span class=\"br0\">(</span>int n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    int product <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span><br/>    <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"%5d\u00a0%5d<span class=\"es0\">\\n</span>\"</span>, l, r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>evenp<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            product <span class=\"sy0\">+=</span> r<span class=\"sy0\">;</span><br/>        l <span class=\"sy0\">=</span> halve<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">=</span> double<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span>          <br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> product<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>   declare (L(30), R(30)) fixed binary;<br/>   declare (i, s) fixed binary;<br/>\u00a0<br/>   L, R = 0;<br/>   put skip list<br/>      ('Hello, please type two values and I will print their product:');<br/>   get list (L(1), R(1));<br/>   put edit ('The product of ', trim(L(1)), ' and ', trim(R(1)), ' is ') (a);<br/>   do i = 1 by 1 while (L(i) ^= 0);<br/>      L(i+1) = halve(L(i));<br/>      R(i+1) = double(R(i));<br/>   end;<br/>   s = 0;<br/>   do i = 1 by 1 while (L(i) &gt; 0);<br/>      if odd(L(i)) then s = s + R(i);<br/>   end;<br/>   put edit (trim(s)) (a);<br/>\u00a0<br/>halve: procedure (k) returns (fixed binary);<br/>   declare k fixed binary;<br/>   return (k/2);<br/>end halve;<br/>double: procedure (k) returns (fixed binary);<br/>   declare k fixed binary;<br/>   return (2*k);<br/>end;<br/>odd: procedure (k) returns (bit (1));<br/>   return (iand(k, 1) ^= 0);<br/>end odd;</pre>"}, {"lang": "PL/SQL", "loc": 58, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PACKAGE\"><span class=\"kw1\">PACKAGE</span></a> ethiopian <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>\u00a0<br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> multiply<br/>    <span class=\"br0\">(</span> left    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"sy0\">,</span><br/>      right   <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"br0\">)</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> ethiopian<span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PACKAGE\"><span class=\"kw1\">PACKAGE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BODY\"><span class=\"kw1\">BODY</span></a> ethiopian <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>\u00a0<br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> is_even<span class=\"br0\">(</span>item  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BOOLEAN\"><span class=\"kw1\">BOOLEAN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> item <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=MOD\"><span class=\"kw2\">MOD</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> is_even<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> double<span class=\"br0\">(</span>item  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> item <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> double<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> half<span class=\"br0\">(</span>item  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TRUNC\"><span class=\"kw2\">TRUNC</span></a><span class=\"br0\">(</span>item <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> half<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> multiply<br/>    <span class=\"br0\">(</span> left   <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"sy0\">,</span><br/>      right  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>    temp     <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    plier    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a> <span class=\"sy0\">:=</span> left<span class=\"sy0\">;</span><br/>    plicand  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INTEGER\"><span class=\"kw1\">INTEGER</span></a> <span class=\"sy0\">:=</span> right<span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>\u00a0<br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IF\"><span class=\"kw1\">IF</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NOT\"><span class=\"kw1\">NOT</span></a> is_even<span class=\"br0\">(</span>plier<span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>        temp <span class=\"sy0\">:=</span> temp <span class=\"sy0\">+</span> plicand<span class=\"sy0\">;</span><br/>      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IF\"><span class=\"kw1\">IF</span></a><span class=\"sy0\">;</span><br/>      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=EXIT\"><span class=\"kw1\">EXIT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> plier <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      plier <span class=\"sy0\">:=</span> half<span class=\"br0\">(</span>plier<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      plicand <span class=\"sy0\">:=</span> double<span class=\"br0\">(</span>plicand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> temp<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> multiply<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> ethiopian<span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span><br/>\u00a0<br/><span class=\"coMULTI\">/* example call */</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DBMS_OUTPUT\"><span class=\"kw3\">DBMS_OUTPUT</span></a><span class=\"sy0\">.</span>put_line<span class=\"br0\">(</span>ethiopian<span class=\"sy0\">.</span>multiply<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span><br/><span class=\"sy0\">/</span></pre>"}, {"lang": "Powerbuilder", "loc": 28, "block": "<pre class=\"powerbuilder highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">function</span> <span class=\"kw2\">boolean</span> wf_iseven <span class=\"br0\">(</span><span class=\"kw2\">long</span> al_arg<span class=\"br0\">)</span>;<span class=\"kw1\">return</span> mod<span class=\"br0\">(</span>al_arg, <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">function</span> <span class=\"kw2\">long</span> wf_halve <span class=\"br0\">(</span><span class=\"kw2\">long</span> al_arg<span class=\"br0\">)</span>;<span class=\"kw1\">RETURN</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>al_arg <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">function</span> <span class=\"kw2\">long</span> wf_double <span class=\"br0\">(</span><span class=\"kw2\">long</span> al_arg<span class=\"br0\">)</span>;<span class=\"kw1\">RETURN</span> al_arg <span class=\"sy2\">*</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">function</span> <span class=\"kw2\">long</span> wf_ethiopianmultiplication <span class=\"br0\">(</span><span class=\"kw2\">long</span> al_multiplicand, <span class=\"kw2\">long</span> al_multiplier<span class=\"br0\">)</span>;<span class=\"co1\">// calculate result</span><br/><span class=\"kw2\">long</span> ll_product<br/>\u00a0<br/><span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> al_multiplicand <span class=\"sy3\">&gt;=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">IF</span> wf_iseven<span class=\"br0\">(</span>al_multiplicand<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"co1\">// do nothing</span><br/>\t<span class=\"kw1\">ELSE</span><br/>\t\tll_product <span class=\"sy2\">+</span><span class=\"sy3\">=</span> al_multiplier<br/>\t<span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>\tal_multiplicand <span class=\"sy3\">=</span> wf_halve<span class=\"br0\">(</span>al_multiplicand<span class=\"br0\">)</span><br/>\tal_multiplier <span class=\"sy3\">=</span> wf_double<span class=\"br0\">(</span>al_multiplier<span class=\"br0\">)</span><br/><span class=\"kw1\">LOOP</span><br/>\u00a0<br/><span class=\"kw1\">return</span> ll_product<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">// example call</span><br/><span class=\"kw2\">long</span> ll_answer<br/>ll_answer <span class=\"sy3\">=</span> wf_ethiopianmultiplication<span class=\"br0\">(</span><span class=\"nu0\">17</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span></pre>"}, {"lang": "PowerShell", "loc": 35, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> isEven <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">param</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$value</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">return</span> <span class=\"br0\">[</span><span class=\"re3\">bool</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$value</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> doubleValue <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">param</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$value</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">return</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$value</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> halveValue <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">param</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$value</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">return</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$value</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> multiplyValues <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">param</span> <span class=\"br0\">(</span><br/>\t\t<span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$plier</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$plicand</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$temp</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$plier</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>isEven <span class=\"re0\">$plier</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$temp</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$plicand</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"re0\">$plier</span> <span class=\"sy0\">=</span> halveValue <span class=\"re0\">$plier</span><br/>\t\t<span class=\"re0\">$plicand</span> <span class=\"sy0\">=</span> doubleValue <span class=\"re0\">$plicand</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">return</span> <span class=\"re0\">$temp</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>multiplyValues <span class=\"nu0\">17</span> <span class=\"nu0\">34</span></pre>"}, {"lang": "Prolog", "loc": 23, "block": "<pre class=\"prolog highlighted_source\">halve<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">//</span> <span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/>double<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>X<span class=\"sy4\">.</span><br/>is_even<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% columns(First,Second,Left,Right) is true if integers First and Second</span><br/><span class=\"co1\">% expand into the columns Left and Right, respectively</span><br/>columns<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>Second<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Second<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>columns<span class=\"br0\">(</span>First<span class=\"sy4\">,</span>Second<span class=\"sy4\">,</span><span class=\"br0\">[</span>First<span class=\"sy5\">|</span>Left<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Second<span class=\"sy5\">|</span>Right<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    halve<span class=\"br0\">(</span>First<span class=\"sy4\">,</span>Halved<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    double<span class=\"br0\">(</span>Second<span class=\"sy4\">,</span>Doubled<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    columns<span class=\"br0\">(</span>Halved<span class=\"sy4\">,</span>Doubled<span class=\"sy4\">,</span>Left<span class=\"sy4\">,</span>Right<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% contribution(Left,Right,Amount) is true if integers Left and Right,</span><br/><span class=\"co1\">% from their respective columns contribute Amount to the final sum.</span><br/>contribution<span class=\"br0\">(</span>Left<span class=\"sy4\">,</span>_Right<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    is_even<span class=\"br0\">(</span>Left<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>contribution<span class=\"br0\">(</span>Left<span class=\"sy4\">,</span>Right<span class=\"sy4\">,</span>Right<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <span class=\"sy2\">\\+</span> is_even<span class=\"br0\">(</span>Left<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>ethiopian<span class=\"br0\">(</span>First<span class=\"sy4\">,</span>Second<span class=\"sy4\">,</span>Product<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    columns<span class=\"br0\">(</span>First<span class=\"sy4\">,</span>Second<span class=\"sy4\">,</span>Left<span class=\"sy4\">,</span>Right<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    maplist<span class=\"br0\">(</span>contribution<span class=\"sy4\">,</span>Left<span class=\"sy4\">,</span>Right<span class=\"sy4\">,</span>Contributions<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    sumlist<span class=\"br0\">(</span>Contributions<span class=\"sy4\">,</span>Product<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 31, "block": "<pre class=\"python highlighted_source\">tutor <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>\u00a0<br/><span class=\"kw1\">def</span> halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> x // <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">def</span> double<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> x * <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">def</span> even<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">not</span> x\u00a0% <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ethiopian<span class=\"br0\">(</span>multiplier<span class=\"sy0\">,</span> multiplicand<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> tutor:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Ethiopian multiplication of\u00a0%i and\u00a0%i\"</span>\u00a0%<br/>              <span class=\"br0\">(</span>multiplier<span class=\"sy0\">,</span> multiplicand<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> multiplier <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">if</span> even<span class=\"br0\">(</span>multiplier<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> tutor:<br/>                <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%4i\u00a0%6i STRUCK\"</span>\u00a0%<br/>                      <span class=\"br0\">(</span>multiplier<span class=\"sy0\">,</span> multiplicand<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">if</span> tutor:<br/>                <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%4i\u00a0%6i KEPT\"</span>\u00a0%<br/>                      <span class=\"br0\">(</span>multiplier<span class=\"sy0\">,</span> multiplicand<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            result +<span class=\"sy0\">=</span> multiplicand<br/>        multiplier   <span class=\"sy0\">=</span> halve<span class=\"br0\">(</span>multiplier<span class=\"br0\">)</span><br/>        multiplicand <span class=\"sy0\">=</span> double<span class=\"br0\">(</span>multiplicand<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> tutor:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> result</pre>"}, {"lang": "R", "loc": 19, "block": "<pre class=\"text highlighted_source\">halve &lt;- function(a) floor(a/2)<br/>double &lt;- function(a) a*2<br/>iseven &lt;- function(a) (a%%2)==0<br/>\u00a0<br/>ethiopicmult &lt;- function(plier, plicand, tutor=FALSE) {<br/>  if (tutor) { cat(\"ethiopic multiplication of\", plier, \"and\", plicand, \"\\n\") }<br/>  result &lt;- 0<br/>  while(plier &gt;= 1) {<br/>    if (!iseven(plier)) { result &lt;- result + plicand }<br/>    if (tutor) {<br/>      cat(plier, \", \", plicand, \" \", ifelse(iseven(plier), \"struck\", \"kept\"), \"\\n\", sep=\"\")<br/>    }<br/>    plier &lt;- halve(plier)<br/>    plicand &lt;- double(plicand)<br/>  }<br/>  result<br/>}<br/>\u00a0<br/>print(ethiopicmult(17, 34, TRUE))</pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (halve  i) (quotient i 2))<br/>(define (double i) (* i 2))<br/>;; `even?' is built-in<br/>\u00a0<br/>(define (ethiopian-multiply x y)<br/>  (cond [(zero? x) 0]<br/>        [(even? x) (ethiopian-multiply (halve x) (double y))]<br/>        [else (+ y (ethiopian-multiply (halve x) (double y)))]))<br/>\u00a0<br/>(ethiopian-multiply 17 34)\u00a0; -&gt; 578</pre>"}, {"lang": "Rascal", "loc": 18, "block": "<pre class=\"text highlighted_source\">import IO;<br/>\u00a0<br/>public int halve(int n) = n/2;<br/>\u00a0<br/>public int double(int n) = n*2;<br/>\u00a0<br/>public bool uneven(int n) = (n\u00a0% 2)\u00a0!= 0);<br/>\u00a0<br/>public int ethiopianMul(int n, int m) {<br/>\tresult = 0;<br/>\twhile(n &gt;= 1) {<br/>\t\tif(uneven(n))<br/>\t\t\tresult += m;<br/>\t\tn = halve(n);<br/>\t\tm = double(m);<br/>\t}<br/>\treturn result;<br/>} </pre>"}, {"lang": "REXX", "loc": 20, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program multiplies two integers by the  Ethiopian  (or Russian peasant)  method. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">3000</span>                              <span class=\"coMULTI\">/*handle some gihugeic integers.       */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a b <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*get two numbers from the command line*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'a='</span> a                                      <span class=\"coMULTI\">/*display a formatted value of  A.     */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'b='</span>   b                                    <span class=\"coMULTI\">/*   \"    \"     \"       \"    \"  B.     */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'product='</span>    eMult<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*invoke eMult &amp; multiple two integers.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>eMult:   <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;  s=<span class=\"kw6\">sign</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*obtain the two arguments; sign for X.*/</span><br/>         $=<span class=\"nu0\">0</span>                                     <span class=\"coMULTI\">/*product of the two integers (so far).*/</span><br/>                      <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> x<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*keep processing while   X   not zero.*/</span><br/>                      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isEven<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> $=$+y  <span class=\"coMULTI\">/*if odd,  then add   Y   to product.  */</span><br/>                      x= halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*invoke the  HALVE   function.        */</span><br/>                      y=double<span class=\"br0\">(</span>y<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*   \"    \"   DOUBLE      \"            */</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>            <span class=\"coMULTI\">/* [\u2191]  Ethiopian multiplication method*/</span><br/>         <span class=\"kw1\">return</span> $<span class=\"sy0\">*</span>s<span class=\"sy0\">/</span><span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/*maintain the correct sign for product*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>double:  <span class=\"kw1\">return</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>                     <span class=\"coMULTI\">/*   *   is REXX's  multiplication.    */</span><br/>halve:   <span class=\"kw1\">return</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \u00a0% <span class=\"nu0\">2</span>                     <span class=\"coMULTI\">/*  \u00a0%    \"   \"     integer division.  */</span><br/>isEven:  <span class=\"kw1\">return</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span>                <span class=\"coMULTI\">/*   //   \"   \"     division remainder.*/</span></pre>"}, {"lang": "Ring", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = 17<br/>y = 34<br/>p = 0<br/>while x\u00a0!= 0<br/>      if not even(x) <br/>         p += y<br/>         see \"\" + x + \" \" + \" \" + y + nl<br/>      else<br/>         see \"\" + x + \"  ---\" + nl ok<br/>         x = halve(x)<br/>         y = double(y)<br/>end<br/>see \" \" + \"  ===\" + nl <br/>see \"   \" + p<br/>\u00a0<br/>func double n return (n * 2) <br/>func halve n return floor(n / 2)<br/>func even n return ((n &amp; 1) = 0)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> halve<span class=\"br0\">(</span>x<span class=\"br0\">)</span>   x<span class=\"sy0\">/</span><span class=\"nu0\">2</span>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> double<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  x<span class=\"sy0\">*</span><span class=\"nu0\">2</span>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># iterative</span><br/><span class=\"kw1\">def</span> ethiopian_multiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  product = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> a <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">1</span> <br/>    <span class=\"kw3\">p</span> <span class=\"br0\">[</span>a, b, a.<span class=\"me1\">even</span>?\u00a0? <span class=\"st0\">\"STRIKE\"</span>\u00a0: <span class=\"st0\">\"KEEP\"</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>    product <span class=\"sy0\">+</span>= b <span class=\"kw1\">unless</span> a.<span class=\"me1\">even</span>?<br/>    a = halve<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    b = double<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  product<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># recursive</span><br/><span class=\"kw1\">def</span> rec_ethiopian_multiply<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">p</span> <span class=\"br0\">[</span>a, b, a.<span class=\"me1\">even</span>?\u00a0? <span class=\"st0\">\"STRIKE\"</span>\u00a0: <span class=\"st0\">\"KEEP\"</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>  <span class=\"br0\">(</span>a.<span class=\"me1\">even</span>?\u00a0? <span class=\"nu0\">0</span>\u00a0: b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> rec_ethiopian_multiply<span class=\"br0\">(</span>halve<span class=\"br0\">(</span>a<span class=\"br0\">)</span>, double<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"re0\">$DEBUG</span> = <span class=\"kw2\">true</span>   <span class=\"co1\"># $DEBUG also set to true if \"-d\" option given</span><br/>a, b = <span class=\"nu0\">20</span>, <span class=\"nu0\">5</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"#{a} * #{b} = #{ethiopian_multiply(a,b)}\"</span>; <span class=\"kw3\">puts</span></pre>"}, {"lang": "Rust", "loc": 35, "block": "<pre class=\"text highlighted_source\">fn double(a: i32) -&gt; i32 {<br/>    2*a<br/>}<br/>\u00a0<br/>fn halve(a: i32) -&gt; i32 {<br/>    a/2<br/>}<br/>\u00a0<br/>fn is_even(a: i32) -&gt; bool {<br/>    a\u00a0% 2 == 0<br/>}<br/>\u00a0<br/>fn ethiopian_multiplication(mut x: i32, mut y: i32) -&gt; i32 {<br/>    let mut sum = 0;<br/>\u00a0<br/>    while x &gt;= 1 {<br/>        print!(\"{} \\t {}\", x, y);<br/>        match is_even(x) {<br/>            true  =&gt; println!(\"\\t Not Kept\"),<br/>            false =&gt; {<br/>                println!(\"\\t Kept\");<br/>                sum += y;<br/>            }<br/>        }<br/>        x = halve(x);<br/>        y = double(y);<br/>    }<br/>    sum<br/>}<br/>\u00a0<br/>fn main() {<br/>    let output = ethiopian_multiplication(17, 34);<br/>    println!(\"---------------------------------\");<br/>    println!(\"\\t {}\", output);<br/>}</pre>"}, {"lang": "Scala", "loc": 28, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ethiopian<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>Int, j<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><br/>   pairIterator<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>x<span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>isEven<span class=\"br0\">(</span>x.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>x<span class=\"sy0\">=&gt;</span>x.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>x+y<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ethiopian2<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>Int, j<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><br/>   pairIterator<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>x<span class=\"sy0\">=&gt;</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>x.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> x.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>x+y<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ethiopian3<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>Int, j<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> res<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>h,d<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>- pairIterator<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span>isEven<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> res+<span class=\"sy0\">=</span>d<span class=\"sy0\">;</span><br/>   res<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ethiopian4<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, j<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> j <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> ethiopian<span class=\"br0\">(</span>halve<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"kw2\">double</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isEven<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> j<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isEven<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>x<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> halve<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">1</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"kw2\">double</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">// generates pairs of values (halve,double)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> pairIterator<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int, y<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Iterator<span class=\"br0\">[</span><span class=\"br0\">(</span>Int, Int<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i<span class=\"sy0\">=</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hasNext<span class=\"sy0\">=</span>i.<span class=\"sy0\">_</span>1<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"sy0\">=</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span> i<span class=\"sy0\">=</span><span class=\"br0\">(</span>halve<span class=\"br0\">(</span>i.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span>, <span class=\"kw2\">double</span><span class=\"br0\">(</span>i.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> r<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 16, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>halve num<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> num <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>double num<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> num <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>mul<span class=\"sy0\">-</span>eth plier plicand acc<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> plier<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">even?</span> plier<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>mul<span class=\"sy0\">-</span>eth <span class=\"br0\">(</span>halve plier<span class=\"br0\">)</span> <span class=\"br0\">(</span>double plicand<span class=\"br0\">)</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>mul<span class=\"sy0\">-</span>eth <span class=\"br0\">(</span>halve plier<span class=\"br0\">)</span> <span class=\"br0\">(</span>double plicand<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> acc plicand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mul<span class=\"sy0\">-</span>eth plier plicand<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>mul<span class=\"sy0\">-</span>eth plier plicand <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>mul<span class=\"sy0\">-</span>eth <span class=\"nu0\">17</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 25, "block": "<pre class=\"text highlighted_source\">const proc: double (inout integer: a) is func<br/>  begin<br/>    a *:= 2;<br/>  end func;<br/>\u00a0<br/>const proc: halve (inout integer: a) is func<br/>  begin<br/>    a\u00a0:= a div 2;<br/>  end func;<br/>\u00a0<br/>const func boolean: even (in integer: a) is<br/>  return not odd(a);<br/>\u00a0<br/>const func integer: peasantMult (in var integer: a, in var integer: b) is func<br/>  result<br/>    var integer: result is 0;<br/>  begin<br/>    while a &lt;&gt; 0 do<br/>      if not even(a) then<br/>        result +:= b;<br/>      end if;<br/>      halve(a);<br/>      double(b);<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func double <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span>;<br/>func halve  <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> int<span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/>\u00a0<br/>func ethiopic_mult<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var r = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        a.<span class=\"me1\">is_even</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>r <span class=\"sy0\">+</span>= b<span class=\"br0\">)</span>;<br/>        a = halve<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>        b = double<span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span>;<br/>    <span class=\"kw2\">return</span> r;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say ethiopic_mult<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 32, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Number</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">double</span> <span class=\"br0\">[</span> ^ <span class=\"kw1\">self</span> * <span class=\"re5\">2</span> <span class=\"br0\">]</span><br/>  halve  <span class=\"br0\">[</span> ^ <span class=\"kw1\">self</span> // <span class=\"re5\">2</span> <span class=\"br0\">]</span><br/>  ethiopianMultiplyBy: <span class=\"re5\">aNumber</span> withTutor: <span class=\"re5\">tutor</span> <span class=\"br0\">[</span><br/>    |<span class=\"re3\">result multiplier multiplicand</span>|<br/>    <span class=\"re6\">multiplier</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span>.<br/>    <span class=\"re5\">multiplicand</span> <span class=\"sy0\">:=</span> <span class=\"re5\">aNumber</span>.<br/>    <span class=\"re5\">tutor</span> ifTrue: <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">'ethiopian multiplication of\u00a0%1 and\u00a0%2'</span>\u00a0% <br/>                      <span class=\"br0\">{</span> multiplier. <span class=\"re5\">multiplicand</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> displayNl <span class=\"br0\">]</span>.<br/>    <span class=\"re5\">result</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/>    <span class=\"br0\">[</span> <span class=\"re5\">multiplier</span> &gt;<span class=\"sy0\">=</span> <span class=\"re5\">1</span> <span class=\"br0\">]</span><br/>      whileTrue: <span class=\"br0\">[</span><br/>        <span class=\"re5\">multiplier</span> even ifFalse: <span class=\"br0\">[</span><br/>                           <span class=\"re5\">result</span> <span class=\"sy0\">:=</span> <span class=\"re5\">result</span> + <span class=\"re5\">multiplicand</span>.<br/>                           <span class=\"re5\">tutor</span> ifTrue: <span class=\"br0\">[</span><br/>                              <span class=\"br0\">(</span><span class=\"st0\">'%1,\u00a0%2 kept'</span>\u00a0% <span class=\"br0\">{</span> multiplier. <span class=\"re5\">multiplicand</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>                                displayNl<br/>                           <span class=\"br0\">]</span>       <br/>                        <span class=\"br0\">]</span><br/>                        ifTrue: <span class=\"br0\">[</span><br/>                           <span class=\"re5\">tutor</span> ifTrue: <span class=\"br0\">[</span><br/>                             <span class=\"br0\">(</span><span class=\"st0\">'%1,\u00a0%2 struck'</span>\u00a0% <span class=\"br0\">{</span> multiplier. <span class=\"re5\">multiplicand</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t\t\t       displayNl<br/>                           <span class=\"br0\">]</span><br/>                        <span class=\"br0\">]</span>.<br/>        <span class=\"re5\">multiplier</span> <span class=\"sy0\">:=</span> <span class=\"re5\">multiplier</span> halve.<br/>        <span class=\"re5\">multiplicand</span> <span class=\"sy0\">:=</span> <span class=\"re5\">multiplicand</span> double.<br/>      <span class=\"br0\">]</span>.<br/>    ^result<br/>  <span class=\"br0\">]</span><br/>  ethiopianMultiplyBy: <span class=\"re5\">aNumber</span> <span class=\"br0\">[</span> ^ <span class=\"kw1\">self</span> ethiopianMultiplyBy: <span class=\"re5\">aNumber</span> withTutor: <span class=\"kw1\">false</span> <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "SNOBOL4", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\tdefine('halve(num)')\t:(halve_end)<br/>halve\teq(num,1)\t:s(freturn)<br/>\thalve = num / 2\t:(return)<br/>halve_end<br/>\u00a0<br/>\tdefine('double(num)')\t:(double_end)<br/>double\tdouble = num * 2\t:(return)<br/>double_end<br/>\u00a0<br/>\tdefine('odd(num)')\t:(odd_end)<br/>odd\teq(num,1)\t:s(return)<br/>\teq(num,double(halve(num)))\t:s(freturn)f(return)<br/>\u00a0<br/>odd_end\tl = trim(input)<br/>\tr = trim(input)<br/>\ts = 0<br/>next\ts = odd(l) s + r<br/>\tr = double(r)<br/>\tl = halve(l)\t:s(next)<br/>stop  \toutput = s<br/>end</pre>"}, {"lang": "SNUSP", "loc": 11, "block": "<pre class=\"text highlighted_source\">    /==!/<a class=\"__cf_email__\" data-cfemail=\"8eb3b3effae1e7b3b3ce\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@<a class=\"__cf_email__\" data-cfemail=\"4c610c6161616161\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<br/>    |   |          /-\\          /recurse\\    #/?\\ zero<br/>$&gt;,@/&gt;,@/?\\&lt;=zero=!\\?/&lt;=print==!\\@\\&gt;?!\\@/&lt;@\\.!\\-/<br/>        &lt; @     #                 |   \\=/  \\<a class=\"__cf_email__\" data-cfemail=\"033e6a776c623e43\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@<a class=\"__cf_email__\" data-cfemail=\"b992f9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+++++#<br/>     /==\\ \\===?!/===-?\\&gt;&gt;+# halve\u00a0!     /+\u00a0!/+\u00a0!/+\u00a0!/+   \\    mod10<br/>#   \u00a0!  @ |  #&gt;&gt;\\?-&lt;+&gt;/           /&lt;+&gt; -\\!?-\\!?-\\!?-\\!?-\\!<br/>/-&lt;+&gt;\\  &gt;\u00a0?     /&gt;+&lt;&lt;++&gt;-\\        \\?!\\-?!\\-?!\\-?!\\-?!\\-?/\\    div10<br/>?down?  | \\-&lt;&lt;&lt;!\\=======?/\\ add &amp;    #  +/! +/! +/! +/! +/<br/>\\&gt;+&lt;-/  | \\=&lt;&lt;&lt;!/====?\\=\\ | double<br/>!    #  |       \\&lt;++&gt;-/ | |<br/>\\=======\\<a class=\"__cf_email__\" data-cfemail=\"f8d9b8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;============/!/</pre>"}, {"lang": "Soar", "loc": 64, "block": "<pre class=\"text highlighted_source\">##########################################<br/># multiply takes ^left and ^right numbers<br/># and a ^return-to<br/>sp {multiply*elaborate*initialize<br/>   (state &lt;s&gt; ^superstate.operator &lt;o&gt;)<br/>   (&lt;o&gt; ^name multiply<br/>        ^left &lt;x&gt;<br/>        ^right &lt;y&gt;<br/>        ^return-to &lt;r&gt;)<br/>--&gt;<br/>   (&lt;s&gt; ^name multiply<br/>        ^left &lt;x&gt;<br/>        ^right &lt;y&gt;<br/>        ^return-to &lt;r&gt;)}<br/>\u00a0<br/>sp {multiply*propose*recurse<br/>   (state &lt;s&gt; ^name multiply<br/>              ^left &lt;x&gt; &gt; 0<br/>              ^right &lt;y&gt;<br/>              ^return-to &lt;r&gt;<br/>             -^multiply-done)<br/>--&gt;<br/>   (&lt;s&gt; ^operator &lt;o&gt; +)<br/>   (&lt;o&gt; ^name multiply<br/>        ^left (div &lt;x&gt; 2)<br/>        ^right (* &lt;y&gt; 2)<br/>        ^return-to &lt;s&gt;)}<br/>\u00a0<br/>sp {multiply*elaborate*mod<br/>   (state &lt;s&gt; ^name multiply<br/>              ^left &lt;x&gt;)<br/>--&gt;<br/>   (&lt;s&gt; ^left-mod-2 (mod &lt;x&gt; 2))}<br/>\u00a0<br/>sp {multiply*elaborate*recursion-done-even<br/>   (state &lt;s&gt; ^name multiply<br/>              ^left &lt;x&gt;<br/>              ^right &lt;y&gt;<br/>              ^multiply-done &lt;temp&gt;<br/>              ^left-mod-2 0)<br/>--&gt;<br/>   (&lt;s&gt; ^answer &lt;temp&gt;)}<br/>\u00a0<br/>sp {multiply*elaborate*recursion-done-odd<br/>   (state &lt;s&gt; ^name multiply<br/>              ^left &lt;x&gt;<br/>              ^right &lt;y&gt;<br/>              ^multiply-done &lt;temp&gt;<br/>              ^left-mod-2 1)<br/>--&gt;<br/>   (&lt;s&gt; ^answer (+ &lt;temp&gt; &lt;y&gt;))}<br/>\u00a0<br/>sp {multiply*elaborate*zero<br/>   (state &lt;s&gt; ^name multiply<br/>              ^left 0)<br/>--&gt;<br/>   (&lt;s&gt; ^answer 0)}<br/>\u00a0<br/>sp {multiply*elaborate*done<br/>   (state &lt;s&gt; ^name multiply<br/>              ^return-to &lt;r&gt;<br/>              ^answer &lt;a&gt;)<br/>--&gt;<br/>   (&lt;r&gt; ^multiply-done &lt;a&gt;)}</pre>"}, {"lang": "Swift", "loc": 26, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>\u00a0<br/>func ethiopian(var #int1:Int, var #int2:Int) -&gt; Int {<br/>  var lhs = [int1], rhs = [int2]<br/>\u00a0<br/>  func isEven(#n:Int) -&gt; Bool {return n\u00a0% 2 == 0}<br/>  func double(#n:Int) -&gt; Int {return n * 2}<br/>  func halve(#n:Int) -&gt; Int {return n / 2}<br/>\u00a0<br/>  while int1\u00a0!= 1 {<br/>    lhs.append(halve(n: int1))<br/>    rhs.append(double(n: int2))<br/>    int1 = halve(n: int1)<br/>    int2 = double(n: int2)<br/>  }<br/>\u00a0<br/>  var returnInt = 0<br/>  for (a,b) in zip(lhs, rhs) {<br/>    if (!isEven(n: a)) {<br/>      returnInt += b<br/>    }<br/>  }<br/>  return returnInt<br/>}<br/>\u00a0<br/>println(ethiopian(int1: 17, int2: 34))</pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># This is how to declare functions - the mathematical entities - as opposed to procedures</span><br/><span class=\"kw1\">proc</span> function <span class=\"br0\">{</span>name arguments body<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"re0\">$name</span> <span class=\"re0\">$arguments</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"re0\">$body</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>function double n <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>function halve n <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>function even n <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>function mult <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0:<br/>    even<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>logmult STRUCK<span class=\"br0\">]</span> + mult<span class=\"br0\">(</span>halve<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span>, double<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    \u00a0: <span class=\"br0\">[</span>logmult KEPT<span class=\"br0\">]</span>   + mult<span class=\"br0\">(</span>halve<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span>, double<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"re0\">$b</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Wrapper to set up the logging</span><br/><span class=\"kw1\">proc</span> ethiopianMultiply <span class=\"br0\">{</span>a b <span class=\"br0\">{</span>tutor false<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$tutor</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> wa <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$a</span><span class=\"br0\">]</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> wb <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$wa</span>+<span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$b</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">puts</span> stderr <span class=\"st0\">\"Ethiopian multiplication of $a and $b\"</span><br/>\t<span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> logmult <span class=\"br0\">{</span><span class=\"br0\">}</span> apply <span class=\"br0\">{</span><span class=\"br0\">{</span>wa wb msg<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> a a b b<br/>\t    <span class=\"kw2\">puts</span> stderr <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%*d\u00a0%*d\u00a0%s\"</span> <span class=\"re0\">$wa</span> <span class=\"re0\">$a</span> <span class=\"re0\">$wb</span> <span class=\"re0\">$b</span> <span class=\"re0\">$msg</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$wa</span> <span class=\"re0\">$wb</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">proc</span> logmult args <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>mult<span class=\"br0\">(</span><span class=\"re0\">$a</span>,<span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>ASK \"insert number1\", nr1=\"\"<br/>ASK \"insert number2\", nr2=\"\"<br/>\u00a0<br/>SET nrs=APPEND(nr1,nr2),size_nrs=SIZE(nrs)<br/>IF (size_nrs!=2) ERROR/STOP \"insert two numbers\"<br/>LOOP n=nrs<br/>IF (n!='digits') ERROR/STOP n, \" is not a digit\"<br/>ENDLOOP<br/>\u00a0<br/>PRINT \"ethopian multiplication of \",nr1,\" and \",nr2<br/>\u00a0<br/>SET sum=0<br/>SECTION checkifeven<br/>SET even=MOD(nr1,2)<br/> IF (even==0) THEN<br/>   SET action=\"struck\"<br/> ELSE<br/>   SET action=\"kept\"<br/>   SET sum=APPEND (sum,nr2)<br/> ENDIF<br/>SET nr1=CENTER (nr1,+6),nr2=CENTER (nr2,+6),action=CENTER (action,8)<br/>PRINT nr1,nr2,action<br/>ENDSECTION<br/>\u00a0<br/>SECTION halve_i<br/>SET nr1=nr1/2<br/>ENDSECTION<br/>\u00a0<br/>SECTION double_i<br/>nr2=nr2*2<br/>ENDSECTION<br/>\u00a0<br/>DO checkifeven<br/>\u00a0<br/>LOOP<br/>DO halve_i<br/>DO double_i<br/>DO checkifeven<br/>IF (nr1==1) EXIT<br/>ENDLOOP<br/>\u00a0<br/>SET line=REPEAT (\"=\",20), sum = sum(sum),sum=CENTER (sum,+12)<br/>PRINT line<br/>PRINT sum<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 30, "block": "<pre class=\"bash highlighted_source\">halve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">expr</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>double<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">expr</span> <span class=\"st0\">\"$1\"</span> \\<span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>is_even<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">expr</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"sy0\">&gt;/</span>dev<span class=\"sy0\">/</span>null<br/><span class=\"br0\">}</span><br/>\u00a0<br/>ethiopicmult<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re2\">plier</span>=<span class=\"re4\">$1</span><br/>    <span class=\"re2\">plicand</span>=<span class=\"re4\">$2</span><br/>    <span class=\"re2\">r</span>=<span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es2\">$plier</span>\"</span> <span class=\"re5\">-ge</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>\tis_even <span class=\"st0\">\"<span class=\"es2\">$plier</span>\"</span> <span class=\"sy0\">||</span> <span class=\"re2\">r</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"re1\">$r</span> + <span class=\"st0\">\"<span class=\"es2\">$plicand</span>\"</span><span class=\"sy0\">`</span><br/>\t<span class=\"re2\">plier</span>=<span class=\"sy0\">`</span>halve <span class=\"st0\">\"<span class=\"es2\">$plier</span>\"</span><span class=\"sy0\">`</span><br/>\t<span class=\"re2\">plicand</span>=<span class=\"sy0\">`</span>double <span class=\"st0\">\"<span class=\"es2\">$plicand</span>\"</span><span class=\"sy0\">`</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"re1\">$r</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ethiopicmult <span class=\"nu0\">17</span> <span class=\"nu0\">34</span><br/><span class=\"co0\"># =&gt; 578</span></pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">odd    = ~&amp;ihB<br/>double = ~&amp;iNiCB<br/>half   = ~&amp;itB</pre>"}, {"lang": "VBA", "loc": 11, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> lngHalve(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    lngHalve = Nb / 2<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> lngDouble(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    lngDouble = Nb * 2<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> IsEven(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    IsEven = (Nb <span class=\"kw4\">Mod</span> 2 = 0)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 90, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">option</span> <span class=\"kw2\">explicit</span><br/>\u00a0<br/>class List<br/>\t<span class=\"kw2\">private</span> theList<br/>\t<span class=\"kw2\">private</span> nOccupiable<br/>\t<span class=\"kw2\">private</span> nTop<br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> class_initialize<br/>\t\tnTop = 0<br/>\t\tnOccupiable = 100<br/>\t\t<span class=\"kw4\">redim</span> theList( nOccupiable )<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">sub</span> store( x )<br/>\t\t<span class=\"kw3\">if</span> nTop &gt;= nOccupiable <span class=\"kw3\">then</span><br/>\t\t\tnOccupiable = nOccupiable + 100<br/>\t\t\t<span class=\"kw4\">redim</span> <span class=\"kw4\">preserve</span> theList( nOccupiable )<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\ttheList( nTop ) = x<br/>\t\tnTop = nTop + 1<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> recall( n )<br/>\t\t<span class=\"kw3\">if</span> n &gt;= 0 <span class=\"kw3\">and</span> n &lt;= nOccupiable <span class=\"kw3\">then</span><br/>\t\t\trecall = theList( n )<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\terr.raise vbObjectError + 1000,,<span class=\"st0\">\"Recall bounds error\"</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">sub</span> replace( n, x )<br/>\t\t<span class=\"kw3\">if</span> n &gt;= 0 <span class=\"kw3\">and</span> n &lt;= nOccupiable <span class=\"kw3\">then</span><br/>\t\t\ttheList( n )  = x<br/>\t\t<span class=\"kw3\">else</span><br/>\t\t\terr.raise vbObjectError + 1001,,<span class=\"st0\">\"Replace bounds error\"</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> listCount<br/>\t\tlistCount = nTop<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/><span class=\"kw3\">end</span> class<br/>\u00a0<br/><span class=\"kw2\">function</span> halve( n )<br/>\thalve = int( n / 2 )<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> twice( n )<br/>\ttwice = int( n * 2 )<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> iseven( n )<br/>\tiseven = ( ( n <span class=\"kw4\">mod</span> 2 ) = 0 )<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> multiply( n1, n2 )<br/>\t<span class=\"kw4\">dim</span> LL<br/>\t<span class=\"kw4\">set</span> LL = <span class=\"kw2\">new</span> List<br/>\u00a0<br/>\t<span class=\"kw4\">dim</span> RR<br/>\t<span class=\"kw4\">set</span> RR = <span class=\"kw2\">new</span> List<br/>\u00a0<br/>\tLL.store n1<br/>\tRR.store n2<br/>\u00a0<br/>\t<span class=\"kw3\">do</span> <span class=\"kw3\">while</span> n1 &lt;&gt; 1<br/>\t\tn1 = halve( n1 )<br/>\t\tLL.store n1<br/>\t\tn2 = twice( n2 )<br/>\t\tRR.store n2<br/>\t<span class=\"kw3\">loop</span><br/>\u00a0<br/>\t<span class=\"kw4\">dim</span> i<br/>\t<span class=\"kw3\">for</span> i = 0 <span class=\"kw3\">to</span> LL.listCount<br/>\t\t<span class=\"kw3\">if</span> iseven( LL.recall( i ) ) <span class=\"kw3\">then</span><br/>\t\t\tRR.replace i, 0<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">next</span><br/>\u00a0<br/>\t<span class=\"kw4\">dim</span> total<br/>\ttotal = 0<br/>\t<span class=\"kw3\">for</span> i = 0 <span class=\"kw3\">to</span> RR.listCount<br/>\t\ttotal = total + RR.recall( i )<br/>\t<span class=\"kw3\">next</span><br/>\u00a0<br/>\tmultiply = total<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0</pre>"}, {"lang": "x86 Assembly", "loc": 109, "block": "<pre class=\"asm highlighted_source\">\t<span class=\"kw5\">extern</span> \tprintf<br/>\t<span class=\"kw5\">global</span>\tmain<br/>\u00a0<br/>\t<span class=\"kw5\">section</span>\t<span class=\"kw5\">.text</span><br/>\u00a0<br/>halve<br/>\t<span class=\"kw1\">shr</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">ret</span><br/>\u00a0<br/>double<br/>\t<span class=\"kw1\">shl</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">ret</span><br/>\u00a0<br/>iseven<br/>\t<span class=\"kw1\">and</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">cmp</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">ret</span>\t\t\t<span class=\"co1\">; ret preserves flags</span><br/>\u00a0<br/>main<br/>\t<span class=\"kw1\">push</span>\t<span class=\"nu0\">1</span>\t\t<span class=\"co1\">; tutor = true</span><br/>\t<span class=\"kw1\">push</span>\t<span class=\"nu0\">34</span>\t\t<span class=\"co1\">; 2nd operand</span><br/>\t<span class=\"kw1\">push</span>\t<span class=\"nu0\">17</span>\t\t<span class=\"co1\">; 1st operand</span><br/>\t<span class=\"kw1\">call</span>\tethiopicmult<br/>\t<span class=\"kw1\">add</span>\t<span class=\"kw4\">esp</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><br/>\u00a0<br/>\t<span class=\"kw1\">push</span>\t<span class=\"kw4\">eax</span>\t\t<span class=\"co1\">; result of 17*34</span><br/>\t<span class=\"kw1\">push</span>\tfmt<br/>\t<span class=\"kw1\">call</span>\tprintf<br/>\t<span class=\"kw1\">add</span>\t<span class=\"kw4\">esp</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>\t<span class=\"kw1\">ret</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw5\">%define</span> plier <span class=\"nu0\">8</span><br/><span class=\"kw5\">%define</span> plicand <span class=\"nu0\">12</span><br/><span class=\"kw5\">%define</span> tutor <span class=\"nu0\">16</span><br/>\u00a0<br/>ethiopicmult<br/>\t<span class=\"kw1\">enter</span>\t<span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">cmp</span>\t<span class=\"kw6\">dword</span> <span class=\"br0\">[</span><span class=\"kw4\">ebp</span> <span class=\"sy1\">+</span> tutor<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">je</span>\t<span class=\"sy1\">.</span>notut0<br/>\t<span class=\"kw1\">push</span>\t<span class=\"kw6\">dword</span> <span class=\"br0\">[</span><span class=\"kw4\">ebp</span> <span class=\"sy1\">+</span> plicand<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">push</span>\t<span class=\"kw6\">dword</span> <span class=\"br0\">[</span><span class=\"kw4\">ebp</span> <span class=\"sy1\">+</span> plier<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">push</span>\tpreamblefmt<br/>\t<span class=\"kw1\">call</span>\tprintf<br/>\t<span class=\"kw1\">add</span>\t<span class=\"kw4\">esp</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><br/><span class=\"sy1\">.</span>notut0<br/>\u00a0<br/>\t<span class=\"kw1\">xor</span>\t<span class=\"kw4\">eax</span><span class=\"sy1\">,</span> <span class=\"kw4\">eax</span>\t\t<span class=\"co1\">; eax -&gt; result</span><br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">ecx</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">ebp</span> <span class=\"sy1\">+</span> plier<span class=\"br0\">]</span> \t<span class=\"co1\">; ecx -&gt; plier</span><br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">ebp</span> <span class=\"sy1\">+</span> plicand<span class=\"br0\">]</span>    <span class=\"co1\">; edx -&gt; plicand</span><br/>\u00a0<br/><span class=\"sy1\">.</span>whileloop<br/>\t<span class=\"kw1\">cmp</span>\t<span class=\"kw4\">ecx</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">jl</span>\t<span class=\"sy1\">.</span>multend<br/>\t<span class=\"kw1\">cmp</span>\t<span class=\"kw6\">dword</span> <span class=\"br0\">[</span><span class=\"kw4\">ebp</span> <span class=\"sy1\">+</span> tutor<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">je</span>\t<span class=\"sy1\">.</span>notut1<br/>\t<span class=\"kw1\">call</span>\ttutorme<br/><span class=\"sy1\">.</span>notut1<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ecx</span><br/>\t<span class=\"kw1\">call</span>\tiseven<br/>\t<span class=\"kw1\">je</span>\t<span class=\"sy1\">.</span>iseven<br/>\t<span class=\"kw1\">add</span>\t<span class=\"kw4\">eax</span><span class=\"sy1\">,</span> <span class=\"kw4\">edx</span>\t<span class=\"co1\">; result += plicand</span><br/><span class=\"sy1\">.</span>iseven<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ecx</span>\t<span class=\"co1\">; plier &gt;&gt;= 1</span><br/>\t<span class=\"kw1\">call</span>\thalve<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">ecx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ebx</span><br/>\u00a0<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"kw4\">edx</span>\t<span class=\"co1\">; plicand &lt;&lt;= 1</span><br/>\t<span class=\"kw1\">call</span>\tdouble<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">edx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ebx</span><br/>\u00a0<br/>\t<span class=\"kw1\">jmp</span>\t<span class=\"sy1\">.</span>whileloop<br/><span class=\"sy1\">.</span>multend<br/>\t<span class=\"kw1\">leave</span><br/>\t<span class=\"kw1\">ret</span><br/>\u00a0<br/>\u00a0<br/>tutorme<br/>\t<span class=\"kw1\">push</span>\t<span class=\"kw4\">eax</span><br/>\t<span class=\"kw1\">push</span>\tstrucktxt<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"kw4\">ecx</span><br/>\t<span class=\"kw1\">call</span>\tiseven<br/>\t<span class=\"kw1\">je</span>\t<span class=\"sy1\">.</span>nostruck<br/>\t<span class=\"kw1\">mov</span>\t<span class=\"kw6\">dword</span> <span class=\"br0\">[</span><span class=\"kw4\">esp</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> kepttxt<br/><span class=\"sy1\">.</span>nostruck<br/>\t<span class=\"kw1\">push</span>\t<span class=\"kw4\">edx</span><br/>\t<span class=\"kw1\">push</span>\t<span class=\"kw4\">ecx</span><br/>\t<span class=\"kw1\">push</span>\ttutorfmt<br/>\t<span class=\"kw1\">call</span>\tprintf<br/>\t<span class=\"kw1\">add</span>\t<span class=\"kw4\">esp</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"kw1\">pop</span>\t<span class=\"kw4\">ecx</span><br/>\t<span class=\"kw1\">pop</span>\t<span class=\"kw4\">edx</span><br/>\t<span class=\"kw1\">add</span>\t<span class=\"kw4\">esp</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"kw1\">pop</span>\t<span class=\"kw4\">eax</span><br/>\t<span class=\"kw1\">ret</span><br/>\u00a0<br/>\t<span class=\"kw5\">section</span> <span class=\"kw5\">.data</span><br/>\u00a0<br/>fmt<br/>\t<span class=\"kw5\">db</span>\t<span class=\"st0\">\"%d\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>preamblefmt<br/>\t<span class=\"kw5\">db</span>\t<span class=\"st0\">\"ethiopic multiplication of\u00a0%d and\u00a0%d\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>tutorfmt<br/>\t<span class=\"kw5\">db</span>\t<span class=\"st0\">\"%4d\u00a0%6d\u00a0%s\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>strucktxt<br/>\t<span class=\"kw5\">db</span>\t<span class=\"st0\">\"struck\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>kepttxt<br/>\t<span class=\"kw5\">db</span>\t<span class=\"st0\">\"kept\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "XPL0", "loc": 44, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>\u00a0<br/>func Halve(N);          \\Return half of N<br/>int  N;<br/>return N&gt;&gt;1;<br/>\u00a0<br/>func Double(N);         \\Return N doubled<br/>int  N;<br/>return N&lt;&lt;1;<br/>\u00a0<br/>func IsEven(N);         \\Return 'true' if N is an even number<br/>int  N;<br/>return (N&amp;1)=0;<br/>\u00a0<br/>func EthiopianMul(A, B); \\Multiply A times B using Ethiopian method<br/>int  A, B;<br/>int  I, J, S, Left(100), Right(100);<br/>[Left(0):= A;  Right(0):= B;            \\1. write numbers to be multiplied<br/>I:= 1;                                  \\2. repeatedly halve number on left<br/>repeat  A:= Halve(A);<br/>        Left(I):= A;  I:= I+1;<br/>until   A=1;<br/>J:= 1;                                  \\3. repeatedly double number on right<br/>repeat  B:= Double(B);<br/>        Right(J):= B;  J:= J+1;<br/>until   J=I;                            \\stop where left column = 1<br/>for J:= 0 to I-1 do                     \\4. discard right value if left is even<br/>        if IsEven(Left(J)) then Right(J):= 0;<br/>S:= 0;                                  \\5. sum remaining values on right<br/>for J:= 0 to I-1 do<br/>        S:= S + Right(J);<br/>for J:= 0 to I-1 do                     \\show this insanity<br/>        [IntOut(0, Left(J));  ChOut(0, 9\\tab\\);  IntOut(0, Right(J));  CrLf(0)];<br/>Text(0, \"       --------<br/>\");<br/>return S;                               \\sum = product<br/>];<br/>\u00a0<br/>int Product;<br/>[Product:= EthiopianMul(17, 34);<br/>ChOut(0, 9);  IntOut(0, Product);  CrLf(0);  CrLf(0);<br/>Product:= EthiopianMul(1234, 5678);<br/>ChOut(0, 9);  IntOut(0, Product);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn ethiopianMultiply(l,r){ // l is a non-negative integer<br/>   halve \u00a0:=fcn(n){ n/2 };<br/>   double\u00a0:=fcn(n){ n+n };<br/>   lr:=List(T(l,r)); // ( (l,r) .. (1,r*n) )<br/>   while(l&gt;1){ lr.write( T(l=halve(l),r=double(r)) ) }<br/>   lr.filter(fcn([(l,r)]){ (not l.isEven) }); // strike out even left rows<br/>   .reduce(fcn(sum,[(l,r)]){ sum + r },0);  // sum right column<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 10, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> DEF FN e<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/<span class=\"nu0\">2</span><span class=\"br0\">)</span>*<span class=\"nu0\">2</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">20</span> DEF FN h<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">30</span> DEF FN d<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=<span class=\"nu0\">2</span>*a<br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> x=<span class=\"nu0\">17</span>: <span class=\"kw1\">LET</span> y=<span class=\"nu0\">34</span>: <span class=\"kw1\">LET</span> tot=<span class=\"nu0\">0</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> x&lt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">PRINT</span> x;TAB <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> FN e<span class=\"br0\">(</span>x<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> tot=tot+y: <span class=\"kw1\">PRINT</span> y: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">90</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"---\"</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">LET</span> x=FN h<span class=\"br0\">(</span>x<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> y=FN d<span class=\"br0\">(</span>y<span class=\"br0\">)</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">PRINT</span> TAB <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<span class=\"st0\">\"===\"</span>,TAB <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;tot</pre>"}]}