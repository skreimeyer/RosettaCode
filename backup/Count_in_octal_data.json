{"task": "Count_in_octal", "blocks": [{"lang": "0815", "loc": 17, "block": "<pre class=\"text highlighted_source\">}:l:&gt;     Start loop, enqueue Z (initially 0).<br/>  }:o:    Treat the queue as a stack and<br/>    &lt;:8:= accumulate the octal digits<br/>    /=&gt;&amp;~ of the current number.<br/>  ^:o:<br/>\u00a0<br/>  &lt;:0:-   Get a sentinel negative 1.<br/>  &amp;&gt;@     Enqueue it between the digits and the current number.<br/>  {       Dequeue the first octal digit.<br/>\u00a0<br/>  }:p:<br/>    ~%={+ Rotate each octal digit into place and print it.<br/>  ^:p:<br/>\u00a0<br/>  &lt;:a:~$  Output a newline.<br/>  &lt;:1:x{+ Dequeue the current number and increment it.<br/>^:l:</pre>"}, {"lang": "360 Assembly", "loc": 46, "block": "<pre class=\"text highlighted_source\">*        Octal                     04/07/2016<br/>OCTAL    CSECT<br/>         USING  OCTAL,R13          base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \" <br/>         LR     R13,R15            \"<br/>         LA     R6,0               i=0<br/>LOOPI    LR     R2,R6              x=i<br/>         LA     R9,10              j=10<br/>         LA     R4,PG+23           @pg<br/>LOOP     LR     R3,R2              save x<br/>         SLL    R2,29              shift left  32-3<br/>         SRL    R2,29              shift right 32-3<br/>         CVD    R2,DW              convert octal(j) to pack decimal <br/>         OI     DW+7,X'0F'         prepare unpack<br/>         UNPK   0(1,R4),DW         packed decimal to zoned printable<br/>         LR     R2,R3              restore x<br/>         SRL    R2,3               shift right 3<br/>         BCTR   R4,0               @<a class=\"__cf_email__\" data-cfemail=\"6717005a2717004a56\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         BCT    R9,LOOP            j=j-1<br/>         CVD    R2,DW              binary to pack decimal <br/>         OI     DW+7,X'0F'         prepare unpack<br/>         UNPK   0(1,R4),DW         packed decimal to zoned printable<br/>         CVD    R6,DW              convert i to pack decimal <br/>         MVC    ZN12,EM12          load mask<br/>         ED     ZN12,DW+2          packed decimal (PL6) to char (CL12)<br/>         MVC    PG(12),ZN12        output i<br/>         XPRNT  PG,80              print buffer<br/>         C      R6,=F'2147483647'  if i&gt;2**31-1 (integer max)<br/>         BE     ELOOPI             then exit loop on i<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI              loop on i<br/>ELOOPI   L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>         LTORG  <br/>PG       DC     CL80' '            buffer<br/>DW       DS     0D,PL8             15num<br/>ZN12     DS     CL12<br/>EM12     DC     X'40',9X'20',X'2120'  mask CL12 11num<br/>         YREGS<br/>         END    OCTAL</pre>"}, {"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Octal <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> IIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">Integer</span>'Last <span class=\"kw1\">loop</span><br/>      IIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>I, Base =&gt; <span class=\"nu0\">8</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Octal;</pre>"}, {"lang": "Aime", "loc": 8, "block": "<pre class=\"text highlighted_source\">integer o;<br/>\u00a0<br/>o = 0;    <br/>do {     <br/>    o_xinteger(8, o);<br/>    o_byte('\\n');<br/>    o += 1;<br/>} while (0 &lt; o);</pre>"}, {"lang": "ALGOL 68", "loc": 9, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> oct width <span class=\"sy1\">=</span> <span class=\"br0\">(</span>bits width<span class=\"sy1\">-</span>1<span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 3 <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 17 <span class=\"coMULTI\"># max int #</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"8r\"</span>8r n<span class=\"br0\">(</span>oct width<span class=\"br0\">)</span>dl$<span class=\"sy1\">,</span> <span class=\"kw8\">BIN</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 27, "block": "<pre class=\"text highlighted_source\">begin<br/>    string(12) r;<br/>    string(8)  octDigits;<br/>    integer    number;<br/>    octDigits\u00a0:= \"01234567\";<br/>    number   \u00a0:= -1;<br/>    while number &lt; MAXINTEGER do begin<br/>        integer    v, cPos;<br/>        number\u00a0:= number + 1;<br/>        v     \u00a0:= number;<br/>       \u00a0% build a string of octal digits in r, representing number\u00a0%<br/>       \u00a0% Algol W uses 32 bit integers, so r should be big enough \u00a0%<br/>       \u00a0% the most significant digit is on the right              \u00a0%<br/>        cPos  \u00a0:= 0;<br/>        while begin<br/>            r( cPos // 1 )\u00a0:= octDigits( v rem 8 // 1 );<br/>            v\u00a0:=  v div 8;<br/>            ( v &gt; 0 )<br/>        end do begin            <br/>            cPos\u00a0:= cPos + 1<br/>        end while_v_gt_0;<br/>       \u00a0% show most significant digit on a newline\u00a0%<br/>        write( r( cPos // 1 ) );<br/>       \u00a0% continue the line with the remaining digits (if any)\u00a0%<br/>        for c\u00a0:= cPos - 1 step -1 until 0 do writeon( r( c // 1 ) )<br/>    end while_r_lt_MAXINTEGER<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"AllocConsole\"</span><span class=\"br0\">)</span><br/>Octal<span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">While</span> int<br/>\t\tout <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>int<span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> out<span class=\"sy0\">,</span> int <span class=\"sy0\">:=</span> int<span class=\"sy0\">//</span><span class=\"nu0\">8</span><br/>\t<span class=\"kw1\">return</span> out<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% Octal<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> CONOUT$<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a> <span class=\"nu0\">200</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>l = <span class=\"nu0\">0</span>; l <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">2147483647</span>; l<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%o<span class=\"es0\">\\n</span>\"</span>, l<span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 4, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> &amp;h7FFFFFFF<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckoct%24.shtml\"><span class=\"kw3\">OCT$</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span></pre>"}, {"lang": "Batch File", "loc": 27, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><span class=\"co2\">:: {CTRL + C} to exit the batch file</span><br/><span class=\"co2\"><br/>:: Send incrementing decimal values to the\u00a0:to_Oct function</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> loop=0<br/>:<span class=\"re0\">loop1</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:to_Oct <span class=\"sy0\">%</span><span class=\"re3\">loop</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a loop+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop1<br/><span class=\"co2\"><br/>:: Convert the decimal values parsed [%1] to octal and output them on a new line</span><br/>:<span class=\"re0\">to_Oct</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> todivide=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"fulloct=\"<br/>\u00a0<br/>:<span class=\"re0\">loop2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tomod=<span class=\"sy0\">%</span><span class=\"re3\">todivide</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a appendmod=<span class=\"sy0\">%</span><span class=\"re3\">tomod</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> 8<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> fulloct=<span class=\"sy0\">%</span><span class=\"re3\">appendmod</span><span class=\"sy0\">%%</span><span class=\"re3\">fulloct</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">todivide</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 8 <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">fulloct</span><span class=\"sy0\">%</span><br/>  <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a todivide/=8<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop2<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      N% = 0<br/>      REPEAT<br/>        PRINT FN_tobase(N%, 8, 0)<br/>        N% += 1<br/>      UNTIL FALSE<br/>      END<br/>\u00a0<br/>      REM Convert N% to string in base B% with minimum M% digits:<br/>      DEF FN_tobase(N%, B%, M%)<br/>      LOCAL D%, A$<br/>      REPEAT<br/>        D% = N% MOD B%<br/>        N% DIV= B%<br/>        IF D%&lt;0 D% += B%\u00a0: N% -= 1<br/>        A$ = CHR$(48 + D% - 7*(D%&gt;9)) + A$<br/>        M% -= 1<br/>      UNTIL (N%=FALSE OR N%=TRUE) AND M%&lt;=0<br/>      =A$<br/>\u00a0</pre>"}, {"lang": "bc", "loc": 2, "block": "<pre class=\"text highlighted_source\">obase = 8\t\t\t/* Output base is octal. */<br/>for (num = 0; 1; num++) num\t/* Loop forever, printing counter. */</pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre class=\"text highlighted_source\">:0\\55+\\:8%68&gt;*#&lt;+#8\\#68#%/#8:_$&gt;:#,_$1+:0`!#@_</pre>"}, {"lang": "Bracmat", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  ( oct<br/>  =   <br/>    .    \u00a0!arg:&lt;8<br/>        &amp; (!arg:~&lt;0|ERROR)<br/>      | str$(oct$(div$(!arg.8)) mod$(!arg.8))<br/>  )<br/>&amp; -1:?n<br/>&amp; whl'(1+!n:?n&amp;out$(!n oct$!n));<br/>\u00a0</pre>"}, {"lang": "Brainf***", "loc": 17, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy0\">+</span><span class=\"sy1\">[</span><span class=\"co1\">            Start with n=1 to kick off the loop</span><br/><span class=\"sy1\">[</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy0\">++++++++</span><span class=\"sy2\">&lt;&lt;</span><span class=\"co1\"> Set up {n 0 8} for divmod magic</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">-</span><span class=\"co1\">        Then</span><br/><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"co1\">       do</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">+</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">]</span><span class=\"co1\"> the</span><br/><span class=\"sy2\">&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">       magic</span><br/><span class=\"sy2\">&gt;&gt;&gt;</span><span class=\"sy0\">+</span><span class=\"co1\">          Increment n\u00a0% 8 so that 0s don't break things</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"co1\">            Move into n / 8 and divmod that unless it's 0</span><br/><span class=\"sy0\">-</span><span class=\"sy2\">&lt;</span><span class=\"co1\">            Set up sentinel \u20111 then move into the first octal digit</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">++++++++</span> <span class=\"sy0\">++++++++</span> <span class=\"sy0\">++++++++</span><span class=\"co1\"> Add 47 to get it to ASCII</span><br/> <span class=\"sy0\">++++++++</span> <span class=\"sy0\">++++++++</span> <span class=\"sy0\">+++++++</span><span class=\"sy3\">.</span><span class=\"co1\"> and print it</span><br/><span class=\"sy1\">[</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">         Get to a 0; the cell to the left is the next octal digit</span><br/><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">[</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"co1\">      Tape is {0 n}; make it {n 0}</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy1\">]</span><span class=\"co1\">         Get to the \u20111</span><br/><span class=\"sy2\">&lt;</span><span class=\"sy1\">[[</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">       Zero the tape for the next iteration</span><br/><span class=\"sy0\">++++++++++</span><span class=\"sy3\">.</span><span class=\"co1\">   Print a newline</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">+</span><span class=\"sy1\">]</span><span class=\"co1\">        Zero it then increment n and go again</span></pre>"}, {"lang": "C", "loc": 8, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%o<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Convert<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>number, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 12, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">unsigned</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">do</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">oct</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"sy2\">++</span>i<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>i <span class=\"br0\">(</span><span class=\"kw1\">range</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%o\"</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 44, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FREE<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> count-in-octal<span class=\"sy0\">.</span><br/>\u00a0<br/>ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>REPOSITORY<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">FUNCTION</span> dec-to-oct<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  i                                   <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> i <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> dec-to-oct<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    END-<span class=\"kw2\">PERFORM</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> count-in-octal<span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>FUNCTION-ID<span class=\"sy0\">.</span> dec-to-oct<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>LOCAL-STORAGE <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  <span class=\"kw4\">rem</span>                                 <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  dec                                 <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">LINKAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  dec-arg                             <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  oct                                 <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">USING</span> dec-arg RETURNING oct<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> dec-arg <span class=\"kw2\">TO</span> dec *&gt; <span class=\"kw2\">Copy</span> <span class=\"kw3\">is</span> made <span class=\"kw2\">to</span> avoid modifying <span class=\"kw3\">reference</span> arg<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">TEST</span> <span class=\"kw3\">AFTER</span> <span class=\"kw2\">UNTIL</span> dec <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">REM</span><span class=\"br0\">(</span>dec<span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw4\">rem</span><br/>        <span class=\"kw3\">STRING</span> <span class=\"kw4\">rem</span><span class=\"sy0\">,</span> oct <span class=\"kw3\">DELIMITED</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">SPACES</span> <span class=\"kw2\">INTO</span> oct<br/>        <span class=\"kw2\">DIVIDE</span> <span class=\"nu0\">8</span> <span class=\"kw2\">INTO</span> dec<br/>    END-<span class=\"kw2\">PERFORM</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">FUNCTION</span> dec-to-oct<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 7, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>n = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw4\">true</span><br/>  console.<span class=\"me1\">log</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~o~%\"</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 17, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CountOctal;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tresp<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">32</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">DO</span><br/>\t\tStrings.<span class=\"me1\">IntToStringForm</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span><span class=\"kw2\">TRUE</span><span class=\"sy0\">,</span>resp<span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>resp<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> CountOctal.<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># version 0.21.1</span><br/><span class=\"co1\"># using unsigned 8 bit integer, range 0 to 255</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>_u8..<span class=\"nu0\">255</span>_u8<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> i.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">ubyte</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> writefln<span class=\"br0\">(</span><span class=\"st0\">\"%o\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">8o0[p1+lpx]dspx</pre>"}, {"lang": "DCL", "loc": 5, "block": "<pre class=\"dcl highlighted_source\">$ i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$<span class=\"re2\"> loop:</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!OL\"</span>, i <span class=\"br0\">)</span><br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">goto</span> loop</pre>"}, {"lang": "Delphi", "loc": 24, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> CountingInOctal<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> DecToOct<span class=\"br0\">(</span>aValue<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  lRemainder<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    lRemainder <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aValue <span class=\"kw1\">mod</span> <span class=\"nu0\">8</span><span class=\"sy1\">;</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>lRemainder<span class=\"br0\">)</span> <span class=\"sy3\">+</span> Result<span class=\"sy1\">;</span><br/>    aValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aValue <span class=\"kw1\">div</span> <span class=\"nu0\">8</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> aValue <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">20</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>DecToOct<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Elixir", "loc": 1, "block": "<pre class=\"text highlighted_source\">Stream.iterate(0,&amp;(&amp;1+1)) |&gt; Enum.each(&amp;IO.puts Integer.to_string(&amp;1,8))</pre>"}, {"lang": "Emacs Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i most-positive-fixnum<span class=\"br0\">)</span> <span class=\"co1\">;; starting from 0</span><br/>  <span class=\"br0\">(</span>message <span class=\"st0\">\"%o\"</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 3, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"re5\">F</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">FF</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~.8B~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">I</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">FF</span><span class=\"br0\">(</span><span class=\"re5\">FF</span><span class=\"sy1\">,</span> <span class=\"re5\">I</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 6, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">integer</span> i<br/>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%o<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span>i<span class=\"br0\">)</span><br/>    i <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> countInOctal num\u00a0: <span class=\"kw4\">unit</span> <span class=\"sy0\">=</span><br/>  printfn <span class=\"st0\">\"%o\"</span> num<br/>  countInOctal <span class=\"br0\">(</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>countInOctal <span class=\"nu0\">1</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: kernel math prettyprint\u00a0;<br/>0 [ dup .o 1 + t ] loop</pre>"}, {"lang": "Forth", "loc": 3, "block": "<pre class=\"text highlighted_source\">: octal ( -- )  8 base\u00a0!\u00a0;  \\ where unavailable<br/>\u00a0<br/>octal ints</pre>"}, {"lang": "Fortran", "loc": 13, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Octal<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i64</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_int_kind</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">! Will stop when n overflows from</span><br/><span class=\"co1\">! 9223372036854775807 to -92233720368547758078 (1000000000000000000000 octal)</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(o0)\"</span><span class=\"br0\">)</span> n<br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 10, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> ub <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> = <span class=\"nu0\">0</span> <span class=\"co1\">' only has a range of 0 to 255</span><br/><span class=\"kw1\">Do</span><br/>   <span class=\"kw1\">Print</span> <span class=\"kw1\">Oct</span><span class=\"br0\">(</span>ub, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   ub += <span class=\"nu0\">1</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> ub = <span class=\"nu0\">0</span> <span class=\"co1\">' wraps around to 0 when reaches 256</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Futhark", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun octal(x: int): int =<br/>  loop ((out,mult,x) = (0,1,x)) = while x &gt; 0 do<br/>    let digit = x\u00a0% 8<br/>    let out = out + digit * mult<br/>    in (out, mult * 10, x / 8)<br/>  in out<br/>\u00a0<br/>fun main(n: int): [n]int =<br/>  map octal (iota n)<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow<br/>defstr word<br/>\u00a0<br/>dim as short i<br/>\u00a0<br/>for i = &amp;o000000 to &amp;o000031      // 0 to 25 in decimal<br/>   print oct$(i); \" in octal =\"; i<br/>next<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 15, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">int8</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%o<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> math<span class=\"sy3\">.</span>MaxInt8 <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'decimal  octal'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <a href=\"http://www.google.de/search?as_q=Integer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MAX_VALUE</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printf <span class=\"br0\">(</span><span class=\"st0\">'%7d \u00a0%#5o<span class=\"es0\">\\n</span>'</span>, i, i<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> showOct <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> convert   <span class=\"co1\"># To get exbase10 method</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    limit <span class=\"sy0\">:=</span> 8r37777777777<br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>exbase10<span class=\"br0\">(</span><span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>limit<span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   disp=.<span class=\"sy0\">(</span>[smoutput<span class=\"sy0\">)</span> <span class=\"st_h\">' '</span><span class=\"sy0\">(</span>-.~\":<span class=\"sy0\">)</span><span class=\"nu0\">8</span>&amp;#.inv<br/>   <span class=\"sy0\">(</span><span class=\"nu0\">1</span>+disp<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span>]<span class=\"nu0\">0x</span></pre>"}, {"lang": "Java", "loc": 7, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Count<span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">toOctalString</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//optionally use \"Integer.toString(i, 8)\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> 1e14<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// arbitrary limit that's not too big</span><br/>    document.<span class=\"me1\">writeln</span><span class=\"br0\">(</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// not sure what's the best way to output it in JavaScript</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i in one(Int64):typemax(Int64)<br/>    print(oct(i), \" \")<br/>    sleep(0.1)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">//  version 1.1</span><br/>\u00a0<br/><span class=\"co1\">//  counts up to 177 octal i.e. 127 decimal</span><br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">Byte</span>.<span class=\"me1\">MAX_VALUE</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span><span class=\"st0\">\"%03o\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 2, "block": "<pre class=\"text highlighted_source\">'%4o '__number_format set<br/>0 do dup 1 compress . \"\\n\" . 1 + loop</pre>"}, {"lang": "Lang5", "loc": 2, "block": "<pre class=\"text highlighted_source\">'%4o '__number_format set<br/>0 do dup 1 compress . \"\\n\" . 1 + loop</pre>"}, {"lang": "LFE", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> foreach<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">io</span> format '<span class=\"st0\">\"~p~n\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">erlang</span> integer_to_list x <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"me1\">lists</span> seq <span class=\"nu0\">0</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 28, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"co1\">'the method used here uses the base-conversion from RC Non-decimal radices/Convert</span><br/>    <span class=\"co1\">'to terminate hit &lt;CTRL&lt;BRK&gt;</span><br/>\u00a0<br/>    <span class=\"kw1\">global</span>      alphanum$<br/>    alphanum$   <span class=\"sy0\">=</span><span class=\"st0\">\"01234567\"</span><br/>\u00a0<br/>    i <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> toBase$<span class=\"br0\">(</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>        i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> toBase$<span class=\"br0\">(</span> base<span class=\"sy0\">,</span> number<span class=\"br0\">)</span> <span class=\"co1\">'   Convert decimal variable to number string.</span><br/>        maxIntegerBitSize   <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        toBase$             <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">10</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            remainder   <span class=\"sy0\">=</span>number <span class=\"kw1\">mod</span> base<br/>            toBase$     <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> alphanum$<span class=\"sy0\">,</span> remainder <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>toBase$<br/>            number      <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> number <span class=\"sy0\">/</span>base<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> number <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">next</span> i<br/>        toBase$ <span class=\"sy0\">=</span><span class=\"kw2\">right$</span><span class=\"br0\">(</span> <span class=\"st0\">\"             \"</span> <span class=\"sy0\">+</span>toBase$<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 22, "block": "<pre class=\"text highlighted_source\">to increment_octal\u00a0:n<br/>  ifelse [empty?\u00a0:n] [<br/>    output 1<br/>  ] [<br/>    local \"last<br/>    make \"last last\u00a0:n<br/>    local \"butlast<br/>    make \"butlast butlast\u00a0:n<br/>    make \"last sum\u00a0:last 1<br/>    ifelse [:last &lt; 8] [<br/>      output word\u00a0:butlast\u00a0:last<br/>    ] [<br/>      output word (increment_octal\u00a0:butlast) 0<br/>    ]<br/>  ]<br/>end<br/>\u00a0<br/>make \"oct 0<br/>while [\"true] [<br/>  print\u00a0:oct<br/>  make \"oct increment_octal\u00a0:oct<br/>]</pre>"}, {"lang": "LOLCODE", "loc": 19, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I octal <span class=\"kw4\">YR</span> num<br/>    <span class=\"kw1\">I HAS A</span> digit<span class=\"sy0\">,</span> <span class=\"kw1\">I HAS A</span> oct <span class=\"kw1\">ITZ</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> octalizer<br/>        digit <span class=\"kw1\">R</span> <span class=\"kw2\">MOD</span> <span class=\"kw2\">OF</span> num <span class=\"kw4\">AN</span> <span class=\"nu0\">8</span><br/>        oct <span class=\"kw1\">R</span> <span class=\"kw1\">SMOOSH</span> digit oct <span class=\"kw2\">MKAY</span><br/>        num <span class=\"kw1\">R</span> <span class=\"kw2\">QUOSHUNT</span> <span class=\"kw2\">OF</span> num <span class=\"kw4\">AN</span> <span class=\"nu0\">8</span><br/>        <span class=\"kw4\">NOT</span> num<span class=\"sy0\">,</span> <span class=\"kw2\">O RLY?</span><br/>            YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span> oct<br/>        OIC<br/>    <span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> octalizer<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> printer <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> num<br/>    <span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> octal <span class=\"kw4\">YR</span> num <span class=\"kw2\">MKAY</span><br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> printer<br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">for</span> l<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2147483647</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"%o\"</span><span class=\"sy0\">,</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>octcount\u00a0:= proc (n)<br/> seq(printf(\"%a \\n\", convert(i, octal)), i = 1 .. n);<br/> end proc;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">x=0;<br/>While[True,Print[BaseForm[x,8];x++]</pre>"}, {"lang": "MATLAB / Octave", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">    n = <span class=\"nu0\">0</span>; <br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        dec2base<span class=\"br0\">(</span>n,<span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        n = n+<span class=\"nu0\">1</span>; <br/>    <span class=\"kw1\">end</span>; </pre>"}, {"lang": "Mercury", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module count_in_octal.<br/>:- interface.<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int, list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    count_in_octal(0,\u00a0!IO).<br/>\u00a0<br/>:- pred count_in_octal(int::in, io::di, io::uo) is det.<br/>\u00a0<br/>count_in_octal(N,\u00a0!IO)\u00a0:-<br/>    io.format(\"%o\\n\", [i(N)],\u00a0!IO),<br/>    count_in_octal(N + 1,\u00a0!IO).<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u0418\u041f0\t\u041f1\t1\t0\t/\t[x]\t\u041f1\t\u0412x\t{x}\t1<br/>0\t*\t7\t-\tx=0\t21\t\u0418\u041f1\tx#0\t28\t\u0411\u041f<br/>02\t\u0418\u041f0\t1\t+\t\u041f0\t\u0421/\u041f\t\u0411\u041f\t00\t\u0418\u041f0\tlg<br/>[x]\t1\t+\t10^x\t\u041f0\t\u0421/\u041f\t\u0411\u041f\t00</pre>"}, {"lang": "Modula-2", "loc": 13, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> octal;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span>  InOut;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>     num             <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  num <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">REPEAT</span><br/>    InOut.WriteOct <span class=\"br0\">(</span>num<span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span>;           InOut.WriteLn;<br/>    <span class=\"kw3\">INC</span> <span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>  <span class=\"kw1\">UNTIL</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> octal.</pre>"}, {"lang": "NetRexx", "loc": 16, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">math</span>.<span class=\"me0\">BigInteger</span><br/>\u00a0<br/><span class=\"co1\">-- allow an option to change the output radix.</span><br/><span class=\"kw1\">parse</span> arg radix .<br/><span class=\"kw1\">if</span> radix.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> radix = <span class=\"nu0\">8</span><br/>k_ = BigInteger<br/>k_ = BigInteger.<span class=\"me0\">ZERO</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> forever<br/>  <span class=\"kw1\">say</span> k_.<span class=\"kw6\">toString</span><span class=\"br0\">(</span>int radix<span class=\"br0\">)</span><br/>  k_ = k_.<span class=\"me0\">add</span><span class=\"br0\">(</span>BigInteger.<span class=\"me0\">ONE</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 11, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">; file:   ocount.lsp</span><br/><span class=\"co1\">; url:    http://rosettacode.org/wiki/Count_in_octal</span><br/><span class=\"co1\">; author: oofoe 2012-01-29</span><br/>\u00a0<br/><span class=\"co1\">; Although NewLISP itself uses a 64-bit integer representation, the</span><br/><span class=\"co1\">; format function relies on underlying C library's printf function,</span><br/><span class=\"co1\">; which can only handle a 32-bit octal number on this implementation.</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> <span class=\"nu0\">2</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#format\"><span class=\"kw1\">format</span></a> <span class=\"st0\">\"%o\"</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import strutils<br/>for i in 0 ..&lt; int.high:<br/>  echo toOct(i, 16)</pre>"}, {"lang": "Oberon-2", "loc": 14, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CountInOctal;<br/><span class=\"kw1\">IMPORT</span><br/>  NPCT<span class=\"sy0\">:</span>Tools<span class=\"sy0\">,</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">MAX</span><span class=\"br0\">(</span><span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span>;<br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>Tools.<span class=\"me1\">IntToOct</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> CountInOctal.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax_int\"><span class=\"kw3\">max_int</span></a> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%o\\n\"</span> i<br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">oct<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">=</span><span class=\"kw1\">binary</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#n<span class=\"sy0\">%</span><span class=\"nu2\">3</span><span class=\"sy0\">,</span>n<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>#n<span class=\"sy0\">%</span><span class=\"nu2\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">forstep</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#n<span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"sy0\">*</span>n<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>n<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">print</span><span class=\"sy0\">;</span><br/>n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>oct<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>n<span class=\"sy0\">++</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 97, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> StrAdd<span class=\"sy1\">;</span><br/><span class=\"co2\">{$Mode Delphi}</span><br/><span class=\"co2\">{$Optimization ON}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><span class=\"co1\">//IntToStr</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  maxCntOct <span class=\"sy3\">=</span> <span class=\"br0\">(</span>SizeOf<span class=\"br0\">(</span>NativeUint<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> IntToOctString<span class=\"br0\">(</span>i<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><span class=\"kw1\">var</span> res<span class=\"sy1\">:</span><span class=\"kw4\">Ansistring</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">maxCntOct</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">,</span>cnt<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> maxCntOct<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw3\">AND</span> <span class=\"nu0\">7</span><span class=\"sy1\">;</span><br/>    p<span class=\"br0\">[</span>cnt<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>c<span class=\"sy3\">+</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"kw1\">shr</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"br0\">(</span>i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cnt<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> maxCntOct<span class=\"sy3\">-</span>cnt<span class=\"sy1\">;</span><br/>  <span class=\"co1\">//most time consuming with Ansistring</span><br/>  <span class=\"co1\">//call fpc_ansistr_unique</span><br/>  setlength<span class=\"br0\">(</span>res<span class=\"sy1\">,</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  move<span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>res<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> IncStr<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span><span class=\"kw4\">String</span><span class=\"sy1\">;</span>base<span class=\"sy1\">:</span>NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  le<span class=\"sy1\">,</span>c<span class=\"sy1\">,</span>dg<span class=\"sy1\">:</span>nativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  le <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> le <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>    EXIT<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">repeat</span><br/>    dg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">ord</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>le<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    c  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">ord</span><span class=\"br0\">(</span>dg&gt;<span class=\"sy3\">=</span>base<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dg<span class=\"sy3\">-</span><span class=\"br0\">(</span>base <span class=\"kw3\">AND</span> <span class=\"br0\">(</span><span class=\"sy3\">-</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    s<span class=\"br0\">[</span>le<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span>dg<span class=\"sy3\">+</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>le<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"br0\">(</span>c <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>le&lt;<span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    le <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    setlength<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>le<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    move<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>le<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  MAX <span class=\"sy3\">=</span> <span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy1\">;</span><span class=\"co1\">//8^9</span><br/><span class=\"kw1\">var</span><br/>  sOct<span class=\"sy1\">,</span><br/>  s  <span class=\"sy1\">:</span> <span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span> nativeInt<span class=\"sy1\">;</span><br/>  T1<span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span> TDateTime<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  sOct <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">16</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    IncStr<span class=\"br0\">(</span>sOct<span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>sOct<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">16</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    IntToOctString<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>s<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  sOct <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> MAX <span class=\"kw1\">do</span><br/>    IncStr<span class=\"br0\">(</span>sOct<span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>time<span class=\"sy3\">-</span>T0<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">86400</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>sOct<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  T1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> MAX <span class=\"kw1\">do</span><br/>    IntToOctString<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  T1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>time<span class=\"sy3\">-</span>T1<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">86400</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>MAX<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'IncStr         '</span><span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'IntToOctString '</span><span class=\"sy1\">,</span>T1<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> POSIX<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%o<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> POSIX<span class=\"sy0\">::</span><span class=\"me2\">UINT_MAX</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span>Inf<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 7, "block": "<pre class=\"text highlighted_source\">integer i = 0<br/>constant ESC = #1B<br/>while not find(get_key(),{ESC,'q','Q'}) do<br/>    printf(1,\"%o\\n\",i)<br/>    i += 1<br/>end while<br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <a href=\"http://www.php.net/is_int\"><span class=\"kw3\">is_int</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> <a href=\"http://www.php.net/decoct\"><span class=\"kw3\">decoct</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(for (N 0  T  (inc N))<br/>   (prinl (oct N)) )</pre>"}, {"lang": "PL/I", "loc": 24, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* Do the actual counting in octal. */</span><br/><span class=\"kw1\">count</span><span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> v<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">999</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">call</span> inc<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>inc<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>carry<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   carry <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> carry<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">stop</span><span class=\"sy0\">;</span> carry <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>         carry <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> inc<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">count</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\"><span class=\"br0\">[</span>int64<span class=\"br0\">]</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$True</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>Convert<span class=\"br0\">]</span>::ToString<span class=\"br0\">(</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 28, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s octal<span class=\"br0\">(</span>n.q<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> <span class=\"kw1\">Dim</span> digits<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, j, result.s<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>    digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><br/>    n <span class=\"sy0\">/</span> <span class=\"nu0\">8</span><br/>    <span class=\"kw1\">If</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> i <span class=\"kw1\">To</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        result <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>digits<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span> <br/>      <span class=\"kw1\">Break</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> result  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> n.q<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>octal<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span> <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">maxint</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"kw2\">oct</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(for ([i (in-naturals)])<br/>  (displayln (number-&gt;string i 8)))<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">octal<br/>17777777777 [ putn cr ] iter</pre>"}, {"lang": "REXX", "loc": 30, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program counts in octal until the number exceeds #pgm statements.*/</span><br/><span class=\"coMULTI\">/*\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>  \u2502 Count all the protons  (and electrons!)  in the universe.          \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 According to Sir Arthur Eddington in 1938 at his Tamer Lecture at  \u2502<br/>  \u2502 Trinity College (Cambridge), he postulated that there are exactly  \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502                              136 \u2219 2^256                           \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 protons in the universe,  and the same number of electrons,  which \u2502<br/>  \u2502 is equal to around  1.57477e+79.                                   \u2502<br/>  \u2502                                                                    \u2502<br/>  \u2502 [Although, a modern estimate is around  10^80.]                    \u2502<br/>  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100000</span>                  <span class=\"coMULTI\">/*handle almost all big numbers. */</span><br/>numIn=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'number in'</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*used for indentation of output.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">sourceline</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*used for formatting width of #s*/</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> #=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">136</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*Sir Eddington, here we come\u00a0!  */</span><br/> \u00a0!=<span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  _=<span class=\"kw6\">right</span><span class=\"br0\">(</span>!,  <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">3</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>,  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  o=<br/>                <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">3</span><br/>                o=o<span class=\"st0\">'0'</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>_,k,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> numIn <span class=\"st0\">'base ten = '</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,w<span class=\"br0\">)</span> numIn  <span class=\"st0\">\"octal = \"</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">b2x</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span>+<span class=\"nu0\">0</span>,w+w<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> #<span class=\"sy0\">&gt;</span><span class=\"kw6\">sourceline</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>        <span class=\"coMULTI\">/*stop if #protons&gt;pgm statements*/</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>size = 30<br/>for n = 1 to size<br/>    see octal(n) + nl<br/>next<br/>\u00a0<br/>func octal m<br/>     output = \"\"<br/>     w = m<br/>     while fabs(w) &gt; 0    <br/>           oct = w &amp; 7<br/>           w = floor(w / 8)<br/>           output = string(oct) + output<br/>     end<br/>     return output<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 20, "block": "<pre class=\"ruby highlighted_source\">n = <span class=\"nu0\">0</span><br/><span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%o\"</span> <span class=\"sy0\">%</span> n<br/>  n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># or</span><br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"kw3\">Float</span>::INFINITY<br/>  <span class=\"kw3\">puts</span> n.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># or</span><br/><span class=\"nu0\">0</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%o<span class=\"es0\">\\n</span>\"</span>, n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># version 2.1 later</span><br/><span class=\"nu0\">0</span>.<span class=\"me1\">step</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"kw3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%o\"</span>, n<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">input \"Begin number:\";b<br/>input \"  End number:\";e<br/>\u00a0<br/>for i = b to e<br/>  print i;\" \";toBase$(8,i)<br/>next i <br/>end<br/>\u00a0<br/>function toBase$(base,base10)<br/>for i = 10 to 1 step -1<br/>  toBase$   = str$(base10 mod base) +toBase$<br/>  base10    = int(base10 / base)<br/>  if base10 &lt; 1 then exit for<br/>next i<br/>end function</pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    for i in 0..std::usize::MAX {<br/>        println!(\"{:o}\", i);<br/>    }<br/>}</pre>"}, {"lang": "Salmon", "loc": 2, "block": "<pre class=\"text highlighted_source\">iterate (i; [0...+oo])<br/>    printf(\"%o%\\n\", i);;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">Stream from <span class=\"nu0\">0</span> foreach <span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>i.<span class=\"me1\">toOctalString</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>#f<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> i <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scratch", "loc": 11, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    repeat<br/>      writeln(i radix 8);<br/>      incr(i);<br/>    until FALSE;<br/>  end func;</pre>"}, {"lang": "Seed7", "loc": 11, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    repeat<br/>      writeln(i radix 8);<br/>      incr(i);<br/>    until FALSE;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var i = <span class=\"nu0\">0</span>;<br/><span class=\"kw3\">loop</span> <span class=\"br0\">{</span> say i<span class=\"sy0\">++</span>.<span class=\"me1\">as_oct</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Sparkling", "loc": 3, "block": "<pre class=\"text highlighted_source\">for (var i = 0; true; i++) {<br/>    printf(\"%o\\n\", i);<br/>}</pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">local<br/>  fun count n = (print (Int.fmt StringCvt.OCT n ^ \"\\n\"); count (n+1))<br/>in<br/>  val _ = count 0<br/>end</pre>"}, {"lang": "Swift", "loc": 28, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func octalSuccessor(value: String) -&gt; String {<br/>   if value.isEmpty {<br/>        return \"1\"<br/>   } else {<br/>     let i = value.startIndex, j = value.endIndex.predecessor()<br/>     switch (value[j]) {<br/>       case \"0\": return value[i..&lt;j] + \"1\"<br/>       case \"1\": return value[i..&lt;j] + \"2\"<br/>       case \"2\": return value[i..&lt;j] + \"3\"<br/>       case \"3\": return value[i..&lt;j] + \"4\"<br/>       case \"4\": return value[i..&lt;j] + \"5\"<br/>       case \"5\": return value[i..&lt;j] + \"6\"<br/>       case \"6\": return value[i..&lt;j] + \"7\"<br/>       case \"7\": return octalSuccessor(value[i..&lt;j]) + \"0\"<br/>       default:<br/>         NSException(name:\"InvalidDigit\", reason: \"InvalidOctalDigit\", userInfo: nil).raise();<br/>         return \"\"<br/>     }<br/>  }<br/>}<br/>\u00a0<br/>var n = \"0\"<br/>while strtoul(n, nil, 8) &lt; UInt.max {<br/>  println(n)<br/>  n = octalSuccessor(n)<br/>}</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><span class=\"sy0\">;</span>   <span class=\"co1\"># arbitrary precision integers; we can count until we run out of memory!</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%llo\"</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> counter<span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 6, "block": "<pre class=\"text highlighted_source\">#!/bin/sh<br/>num=0<br/>while true; do<br/>  echo $num<br/>  num=`echo \"obase=8;ibase=8;$num+1\"|bc`<br/>done</pre>"}, {"lang": "VBA", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Sub CountOctal()<br/>Dim i As Integer<br/>i = 0<br/>On Error GoTo OctEnd<br/>Do<br/>    Debug.Print Oct(i)<br/>    i = i + 1<br/>Loop<br/>OctEnd:<br/>Debug.Print \"Integer overflow - count terminated\"<br/>End Sub<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 5, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> 20<br/>\tWScript.StdOut.WriteLine Oct(i)<br/><span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 5, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw1\">let</span> counter = <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> counter <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">echon</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%o<span class=\"es0\">\\n</span>\"</span>, counter<span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> counter <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/><span class=\"kw1\">endwhile</span></pre>"}, {"lang": "Whitespace", "loc": 40, "block": "<pre class=\"whitespace highlighted_source\"><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/>\u00a0<br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">\t</span></pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;     \\intrinsic code declarations<br/>\u00a0<br/>proc OctOut(N);    \\Output N in octal<br/>int N;<br/>int R;<br/>[R:= N&amp;7;<br/>N:= N&gt;&gt;3;<br/>if N then OctOut(N);<br/>ChOut(0, R+^0);<br/>];<br/>\u00a0<br/>int I;<br/>[I:= 0;<br/>repeat  OctOut(I); CrLf(0);<br/>        I:= I+1;<br/>until KeyHit or I=0;<br/>]</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">foreach n in ([0..]){println(\"%.8B\".fmt(n))}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 10, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"DEC.  OCT.\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> o$=<span class=\"st0\">\"\"</span>: <span class=\"kw1\">LET</span> n=i<br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> o$=<span class=\"kw3\">STR</span>$ FN m<span class=\"br0\">(</span>n,<span class=\"nu0\">8</span><span class=\"br0\">)</span>+o$<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> n=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>n/<span class=\"nu0\">8</span><span class=\"br0\">)</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">40</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> i;TAB <span class=\"nu0\">3</span>;<span class=\"st0\">\" = \"</span>;o$<br/><span class=\"nu0\">80</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">90</span> STOP <br/><span class=\"nu0\">100</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b</pre>"}]}