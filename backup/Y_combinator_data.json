{"task": "Y_combinator", "blocks": [{"lang": "ALGOL 68", "loc": 11, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>  <span class=\"kw4\">MODE</span> F <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>  <span class=\"kw4\">MODE</span> Y <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>Y<span class=\"br0\">)</span>F<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># compare python Y = lambda f: (lambda x: x(x)) (lambda y: f( lambda *args: y(y)(*args)))#</span><br/>  <span class=\"kw4\">PROC</span> y <span class=\"sy1\">=</span>      <span class=\"br0\">(</span><span class=\"kw4\">PROC</span><span class=\"br0\">(</span>F<span class=\"br0\">)</span>F f<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> <span class=\"br0\">(</span>  <span class=\"br0\">(</span>Y x<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>  <span class=\"br0\">(</span>Y z<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> f<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> arg <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> z<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">(</span> arg <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> fib <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"br0\">)</span>F<span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"kw2\">CASE</span> n <span class=\"kw2\">IN</span> n<span class=\"sy1\">,</span>n <span class=\"kw2\">OUT</span> f<span class=\"br0\">(</span>n<span class=\"sy1\">-</span>1<span class=\"br0\">)</span> <span class=\"sy1\">+</span> f<span class=\"br0\">(</span>n<span class=\"sy1\">-</span>2<span class=\"br0\">)</span> <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span>y<span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AppleScript", "loc": 97, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- Y COMBINATOR ---------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"kw3\">on</span> |Y|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    y<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>y<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            f<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">result</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw1\">result</span><span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">result</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> |Y|<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    <span class=\"co1\">-- Factorial</span><br/>    <span class=\"kw3\">script</span> fact<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>                    n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">-- Fibonacci</span><br/>    <span class=\"kw3\">script</span> fib<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/>                    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>                    <span class=\"br0\">(</span>f<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>f<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>facts:map<span class=\"br0\">(</span>|Y|<span class=\"br0\">(</span>fact<span class=\"br0\">)</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, fibs:map<span class=\"br0\">(</span>|Y|<span class=\"br0\">(</span>fib<span class=\"br0\">)</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {facts:{1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800}, </span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; fibs:{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, </span><br/>    <span class=\"co1\">--           1597, 2584, 4181, 6765}} </span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS FOR TEST -------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "ATS", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include \"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>fun<br/>myfix<br/>{a:type}<br/>(<br/> f: lazy(a) -&lt;cloref1&gt; a<br/>)\u00a0: lazy(a) = $delay(f(myfix(f)))<br/>//<br/>val<br/>fact =<br/>myfix{int-&lt;cloref1&gt;int}<br/>(<br/>lam(ff) =&gt; lam(x) =&gt; if x &gt; 0 then x *\u00a0!ff(x-1) else 1<br/>)<br/>(* ****** ****** *)<br/>//<br/>implement main0 () = println! (\"fact(10) = \",\u00a0!fact(10))<br/>//<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "BlitzMax", "loc": 156, "block": "<pre class=\"text highlighted_source\">SuperStrict<br/>\u00a0<br/>'Boxed type so we can just use object arrays for argument lists<br/>Type Integer<br/>\tField val:Int<br/>\tFunction Make:Integer(_val:Int)<br/>\t\tLocal i:Integer = New Integer<br/>\t\ti.val = _val<br/>\t\tReturn i<br/>\tEnd Function<br/>End Type<br/>\u00a0<br/>\u00a0<br/>'Higher-order function type - just a procedure attached to a scope<br/>Type Func Abstract<br/>\tMethod apply:Object(args:Object[]) Abstract<br/>End Type<br/>\u00a0<br/>'Function definitions - extend with fields as locals and implement apply as body<br/>Type Scope Extends Func Abstract<br/>\tField env:Scope<br/>\u00a0<br/>\t'Constructor - bind an environment to a procedure<br/>\tFunction lambda:Scope(env:Scope) Abstract<br/>\u00a0<br/>\tMethod _init:Scope(_env:Scope)\t'Helper to keep constructors small<br/>\t\tenv = _env\u00a0; Return Self<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>\u00a0<br/>'Based on the following definition:<br/>'(define (Y f)<br/>'    (let ((_r (lambda (r) (f (lambda a (apply (r r) a))))))<br/>'      (_r _r)))<br/>\u00a0<br/>'Y (outer)<br/>Type Y Extends Scope<br/>\tField f:Func\t'Parameter - gets closed over<br/>\u00a0<br/>\tFunction lambda:Scope(env:Scope)\t'Necessary due to highly limited constructor syntax<br/>\t\tReturn (New Y)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Func(args:Object[])<br/>\t\tf = Func(args[0])<br/>\t\tLocal _r:Func = YInner1.lambda(Self)<br/>\t\tReturn Func(_r.apply([_r]))<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>'First lambda within Y<br/>Type YInner1 Extends Scope<br/>\tField r:Func\t'Parameter - gets closed over<br/>\u00a0<br/>\tFunction lambda:Scope(env:Scope)<br/>\t\tReturn (New YInner1)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Func(args:Object[])<br/>\t\tr = Func(args[0])<br/>\t\tReturn Func(Y(env).f.apply([YInner2.lambda(Self)]))<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>'Second lambda within Y<br/>Type YInner2 Extends Scope<br/>\tField a:Object[]\t'Parameter - not really needed, but good for clarity<br/>\u00a0<br/>\tFunction lambda:Scope(env:Scope)<br/>\t\tReturn (New YInner2)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Object(args:Object[])<br/>\t\ta = args<br/>\t\tLocal r:Func = YInner1(env).r<br/>\t\tReturn Func(r.apply([r])).apply(a)<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>\u00a0<br/>'Based on the following definition:<br/>'(define fac (Y (lambda (f)<br/>'                 (lambda (x)<br/>'                   (if (&lt;= x 0) 1 (* x (f (- x 1)))))))<br/>\u00a0<br/>Type FacL1 Extends Scope<br/>\tField f:Func\t'Parameter - gets closed over<br/>\u00a0<br/>\tFunction lambda:Scope(env:Scope)<br/>\t\tReturn (New FacL1)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Object(args:Object[])<br/>\t\tf = Func(args[0])<br/>\t\tReturn FacL2.lambda(Self)<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>Type FacL2 Extends Scope<br/>\tFunction lambda:Scope(env:Scope)<br/>\t\tReturn (New FacL2)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Object(args:Object[])<br/>\t\tLocal x:Int = Integer(args[0]).val<br/>\t\tIf x &lt;= 0 Then Return Integer.Make(1)\u00a0; Else Return Integer.Make(x * Integer(FacL1(env).f.apply([Integer.Make(x - 1)])).val)<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>\u00a0<br/>'Based on the following definition:<br/>'(define fib (Y (lambda (f)<br/>'                 (lambda (x)<br/>'                   (if (&lt; x 2) x (+ (f (- x 1)) (f (- x 2)))))))<br/>\u00a0<br/>Type FibL1 Extends Scope<br/>\tField f:Func\t'Parameter - gets closed over<br/>\u00a0<br/>\tFunction lambda:Scope(env:Scope)<br/>\t\tReturn (New FibL1)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Object(args:Object[])<br/>\t\tf = Func(args[0])<br/>\t\tReturn FibL2.lambda(Self)<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>Type FibL2 Extends Scope<br/>\tFunction lambda:Scope(env:Scope)<br/>\t\tReturn (New FibL2)._init(env)<br/>\tEnd Function<br/>\u00a0<br/>\tMethod apply:Object(args:Object[])<br/>\t\tLocal x:Int = Integer(args[0]).val<br/>\t\tIf x &lt; 2<br/>\t\t\tReturn Integer.Make(x)<br/>\t\tElse<br/>\t\t\tLocal f:Func = FibL1(env).f<br/>\t\t\tLocal x1:Int = Integer(f.apply([Integer.Make(x - 1)])).val<br/>\t\t\tLocal x2:Int = Integer(f.apply([Integer.Make(x - 2)])).val<br/>\t\t\tReturn Integer.Make(x1 + x2)<br/>\t\tEndIf<br/>\tEnd Method<br/>End Type<br/>\u00a0<br/>\u00a0<br/>'Now test<br/>Local _Y:Func = Y.lambda(Null)<br/>\u00a0<br/>Local fac:Func = Func(_Y.apply([FacL1.lambda(Null)]))<br/>Print Integer(fac.apply([Integer.Make(10)])).val<br/>\u00a0<br/>Local fib:Func = Func(_Y.apply([FibL1.lambda(Null)]))<br/>Print Integer(fib.apply([Integer.Make(10)])).val</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre> (\u03bbx.x)y</pre>"}, {"lang": "C", "loc": 71, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* func: our one and only data type; it holds either a pointer to<br/>   a function call, or an integer.  Also carry a func pointer to<br/>   a potential parameter, to simulate closure                   */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> func_t <span class=\"sy0\">*</span>func<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> func_t <span class=\"br0\">{</span><br/>        func <span class=\"br0\">(</span><span class=\"sy0\">*</span>fn<span class=\"br0\">)</span> <span class=\"br0\">(</span>func<span class=\"sy0\">,</span> func<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        func _<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> num<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> func_t<span class=\"sy0\">;</span><br/>\u00a0<br/>func new<span class=\"br0\">(</span>func<span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>func<span class=\"sy0\">,</span> func<span class=\"br0\">)</span><span class=\"sy0\">,</span> func _<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        func x <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>func_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>fn <span class=\"sy0\">=</span> f<span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>_ <span class=\"sy0\">=</span> _<span class=\"sy0\">;</span>       <span class=\"coMULTI\">/* closure, sort of */</span><br/>        x<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func call<span class=\"br0\">(</span>func f<span class=\"sy0\">,</span> func n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> f<span class=\"sy0\">-&gt;</span>fn<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func Y<span class=\"br0\">(</span>func<span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>func<span class=\"sy0\">,</span> func<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        func g <span class=\"sy0\">=</span> new<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g<span class=\"sy0\">-&gt;</span>_ <span class=\"sy0\">=</span> g<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> g<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func num<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        func x <span class=\"sy0\">=</span> new<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>func fac<span class=\"br0\">(</span>func self<span class=\"sy0\">,</span> func n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> nn <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>num<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>   <span class=\"sy0\">?</span> num<span class=\"br0\">(</span>nn <span class=\"sy0\">*</span> call<span class=\"br0\">(</span>self<span class=\"sy0\">-&gt;</span>_<span class=\"sy0\">,</span> num<span class=\"br0\">(</span>nn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>num<span class=\"br0\">)</span><br/>                        <span class=\"sy0\">:</span> num<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func fib<span class=\"br0\">(</span>func self<span class=\"sy0\">,</span> func n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> nn <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>num<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>                <span class=\"sy0\">?</span> num<span class=\"br0\">(</span>  call<span class=\"br0\">(</span>self<span class=\"sy0\">-&gt;</span>_<span class=\"sy0\">,</span> num<span class=\"br0\">(</span>nn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">+</span><br/>                        call<span class=\"br0\">(</span>self<span class=\"sy0\">-&gt;</span>_<span class=\"sy0\">,</span> num<span class=\"br0\">(</span>nn <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>num <span class=\"br0\">)</span><br/>                <span class=\"sy0\">:</span> num<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span>func n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-&gt;</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>        func f <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span>fac<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fac: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                show<span class=\"br0\">(</span> call<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> num<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        f <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fib: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                show<span class=\"br0\">(</span> call<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> num<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 20, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> YCombinator<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">delegate</span> Func<span class=\"sy0\">&lt;</span>T, T<span class=\"sy0\">&gt;</span> Recursive<span class=\"br0\">(</span>Recursive recursive<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Func<span class=\"sy0\">&lt;</span>Func<span class=\"sy0\">&lt;</span>Func<span class=\"sy0\">&lt;</span>T, T<span class=\"sy0\">&gt;</span>, Func<span class=\"sy0\">&lt;</span>T, T<span class=\"sy0\">&gt;&gt;</span>, Func<span class=\"sy0\">&lt;</span>T, T<span class=\"sy0\">&gt;&gt;</span> Fix <span class=\"sy0\">=</span><br/>    f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Recursive<span class=\"br0\">)</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Recursive<span class=\"br0\">)</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>  <span class=\"kw1\">static</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> fac <span class=\"sy0\">=</span><br/>    YCombinator<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Fix</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> x <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">static</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> fib <span class=\"sy0\">=</span><br/>    YCombinator<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">Fix</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> x <span class=\"sy0\">:</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>fac<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>fib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 1, "block": "<pre>g++ --std=c++11 ycomb.cc\n</pre>"}, {"lang": "Ceylon", "loc": 22, "block": "<pre class=\"text highlighted_source\">Result(*Args) y1&lt;Result,Args&gt;(<br/>        Result(*Args)(Result(*Args)) f)<br/>        given Args satisfies Anything[] {<br/>\u00a0<br/>    class RecursiveFunction(o) {<br/>        shared Result(*Args)(RecursiveFunction) o;<br/>    }<br/>\u00a0<br/>    value r = RecursiveFunction((RecursiveFunction w)<br/>        =&gt;  f(flatten((Args args) =&gt; w.o(w)(*args))));<br/>\u00a0<br/>    return r.o(r);<br/>}<br/>\u00a0<br/>value factorialY1 = y1((Integer(Integer) fact)(Integer x)<br/>    =&gt;  if (x &gt; 1) then x * fact(x - 1) else 1);<br/>\u00a0<br/>value fibY1 = y1((Integer(Integer) fib)(Integer x)<br/>    =&gt;  if (x &gt; 2) then fib(x - 1) + fib(x - 2) else 2);<br/>\u00a0<br/>print(factorialY1(10)); // 3628800<br/>print(fibY1(10));       // 110</pre>"}, {"lang": "Clojure", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn Y <span class=\"br0\">[</span>f<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>fn <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span>x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>f <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> args<span class=\"br0\">]</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"br0\">(</span>x x<span class=\"br0\">)</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def fac<br/>     <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>f<span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? n<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>* n <span class=\"br0\">(</span>f <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def fib<br/>     <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>f<span class=\"br0\">]</span><br/>       <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span>condp <span class=\"sy0\">=</span> n<br/>           <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>           <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>           <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>f <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>f <span class=\"br0\">(</span>dec <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> Y <span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> y y<span class=\"br0\">)</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fac <span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span><br/>\t<span class=\"nu0\">1</span><br/>\t<span class=\"br0\">(</span>* n <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fib <span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">case</span> n<br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>otherwise <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>? <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span>Y #'fac<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">24</span> <span class=\"nu0\">120</span> <span class=\"nu0\">720</span> <span class=\"nu0\">5040</span> <span class=\"nu0\">40320</span> <span class=\"nu0\">362880</span> <span class=\"nu0\">3628800</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>? <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span>Y #'fib<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">21</span> <span class=\"nu0\">34</span> <span class=\"nu0\">55</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 1, "block": "<pre class=\"coffeescript highlighted_source\">Y = <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> g = f<span class=\"br0\">(</span> <span class=\"br0\">(</span>t...<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> g<span class=\"br0\">(</span>t...<span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 25, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> Y<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> T<span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">(</span>S <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>S <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">)</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> F <span class=\"br0\">{</span><br/>        S <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span>F<span class=\"br0\">)</span> f<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">alias</span> f <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span><span class=\"br0\">(</span>T v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Demo code:</span><br/>    <span class=\"kw4\">auto</span> factorial <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> self<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> n <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> n <span class=\"sy0\">*</span> self<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> ackermann <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">ulong</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">ulong</span><span class=\"sy0\">,</span> <span class=\"kw4\">ulong</span><span class=\"br0\">)</span> self<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">ulong</span> m<span class=\"sy0\">,</span> <span class=\"kw4\">ulong</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> self<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> self<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> self<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"factorial: \"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>factorial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"ackermann(3, 5): \"</span><span class=\"sy0\">,</span> ackermann<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 27, "block": "<pre class=\"text highlighted_source\">Y f:<br/>\tlabda y:<br/>\t\tlabda:<br/>\t\t\tcall y @y<br/>\t\tf<br/>\tlabda x:<br/>\t\tx @x<br/>\tcall<br/>\u00a0<br/>labda f:<br/>\tlabda n:<br/>\t\tif &lt; 1 n:<br/>\t\t\t* n f -- n<br/>\t\telse:<br/>\t\t\t1<br/>set\u00a0:fac Y<br/>\u00a0<br/>labda f:<br/>\tlabda n:<br/>\t\tif &lt; 1 n:<br/>\t\t\t+ f - n 2 f -- n<br/>\t\telse:<br/>\t\t\t1<br/>set\u00a0:fib Y<br/>\u00a0<br/>!. fac 6<br/>!. fib 6</pre>"}, {"lang": "Delphi", "loc": 67, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Y<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  YCombinator <span class=\"sy3\">=</span> <span class=\"kw1\">class</span> sealed<br/>    <span class=\"kw1\">class</span> <span class=\"kw1\">function</span> Fix&lt;T&gt; <span class=\"br0\">(</span>F<span class=\"sy1\">:</span> TFunc&lt;TFunc&lt;T<span class=\"sy1\">,</span> T&gt;<span class=\"sy1\">,</span> TFunc&lt;T<span class=\"sy1\">,</span> T&gt;&gt;<span class=\"br0\">)</span><span class=\"sy1\">:</span> TFunc&lt;T<span class=\"sy1\">,</span> T&gt;<span class=\"sy1\">;</span> static<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TRecursiveFuncWrapper&lt;T&gt; <span class=\"sy3\">=</span> <span class=\"kw1\">record</span> <span class=\"co1\">// workaround required because of QC #101272 (http://qc.embarcadero.com/wc/qcmain.aspx?d=101272)</span><br/>    <span class=\"kw1\">type</span><br/>      TRecursiveFunc <span class=\"sy3\">=</span> reference <span class=\"kw1\">to</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>R<span class=\"sy1\">:</span> TRecursiveFuncWrapper&lt;T&gt;<span class=\"br0\">)</span><span class=\"sy1\">:</span> TFunc&lt;T<span class=\"sy1\">,</span> T&gt;<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">var</span><br/>      O<span class=\"sy1\">:</span> TRecursiveFunc<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw1\">function</span> YCombinator<span class=\"sy1\">.</span><span class=\"me1\">Fix</span>&lt;T&gt; <span class=\"br0\">(</span>F<span class=\"sy1\">:</span> TFunc&lt;TFunc&lt;T<span class=\"sy1\">,</span> T&gt;<span class=\"sy1\">,</span> TFunc&lt;T<span class=\"sy1\">,</span> T&gt;&gt;<span class=\"br0\">)</span><span class=\"sy1\">:</span> TFunc&lt;T<span class=\"sy1\">,</span> T&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  R<span class=\"sy1\">:</span> TRecursiveFuncWrapper&lt;T&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  R<span class=\"sy1\">.</span><span class=\"me1\">O</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>W<span class=\"sy1\">:</span> TRecursiveFuncWrapper&lt;T&gt;<span class=\"br0\">)</span><span class=\"sy1\">:</span> TFunc&lt;T<span class=\"sy1\">,</span> T&gt;<br/>    <span class=\"kw1\">begin</span><br/>      Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>I<span class=\"sy1\">:</span> T<span class=\"br0\">)</span><span class=\"sy1\">:</span> T<br/>        <span class=\"kw1\">begin</span><br/>          Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> W<span class=\"sy1\">.</span><span class=\"me1\">O</span> <span class=\"br0\">(</span>W<span class=\"br0\">)</span> <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> R<span class=\"sy1\">.</span><span class=\"me1\">O</span> <span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  IntFunc <span class=\"sy3\">=</span> TFunc&lt;<span class=\"kw4\">Integer</span><span class=\"sy1\">,</span> Integer&gt;<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> AlmostFac <span class=\"br0\">(</span>F<span class=\"sy1\">:</span> IntFunc<span class=\"br0\">)</span><span class=\"sy1\">:</span> IntFunc<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>N<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> N <span class=\"sy3\">*</span> F <span class=\"br0\">(</span>N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> AlmostFib <span class=\"br0\">(</span>F<span class=\"sy1\">:</span> TFunc&lt;<span class=\"kw4\">Integer</span><span class=\"sy1\">,</span> Integer&gt;<span class=\"br0\">)</span><span class=\"sy1\">:</span> TFunc&lt;<span class=\"kw4\">Integer</span><span class=\"sy1\">,</span> Integer&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>N<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F <span class=\"br0\">(</span>N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> F <span class=\"br0\">(</span>N <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Fib<span class=\"sy1\">,</span> Fac<span class=\"sy1\">:</span> IntFunc<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Fib <span class=\"sy1\">:</span><span class=\"sy3\">=</span> YCombinator<span class=\"sy1\">.</span><span class=\"me1\">Fix</span>&lt;Integer&gt; <span class=\"br0\">(</span>AlmostFib<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Fac <span class=\"sy1\">:</span><span class=\"sy3\">=</span> YCombinator<span class=\"sy1\">.</span><span class=\"me1\">Fix</span>&lt;Integer&gt; <span class=\"br0\">(</span>AlmostFac<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'Fib(10) = '</span><span class=\"sy1\">,</span> Fib <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'Fac(10) = '</span><span class=\"sy1\">,</span> Fac <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> y <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> f <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> x <span class=\"br0\">{</span> x<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> y <span class=\"br0\">{</span> f<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> a <span class=\"br0\">{</span> y<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> fac <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> f <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> n <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span> n<span class=\"sy0\">*</span>f<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> fib <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> f <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> n <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 25, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; Ref\u00a0: http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html</span><br/>\u00a0<br/> <span class=\"br0\">(</span><span class=\"kw1\">define</span> Y<br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>procedure<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>X <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>procedure procedure<span class=\"br0\">)</span> arg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>procedure<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>X <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>procedure procedure<span class=\"br0\">)</span> arg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Fib</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> Fib<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>func<span class=\"sy0\">-</span>arg<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> n <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>func<span class=\"sy0\">-</span>arg <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>func<span class=\"sy0\">-</span>arg <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> fib <span class=\"br0\">(</span>Y Fib<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>fib <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"co1\">; Fact</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">F</span><span class=\"sy0\">*</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>func<span class=\"sy0\">-</span>arg<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"br0\">(</span>func<span class=\"sy0\">-</span>arg <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> fact <span class=\"br0\">(</span>Y <span class=\"kw1\">F</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>fact <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">3628800</span><br/>\u00a0</pre>"}, {"lang": "Eero", "loc": 29, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span>Func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><br/><span class=\"kw4\">typedef</span> Func <span class=\"br0\">(</span><span class=\"sy0\">^</span>FuncFunc<span class=\"br0\">)</span><span class=\"br0\">(</span>Func<span class=\"br0\">)</span><br/><span class=\"kw4\">typedef</span> Func <span class=\"br0\">(</span><span class=\"sy0\">^</span>RecursiveFunc<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span> <span class=\"co2\">// hide recursive typing behind dynamic typing</span><br/>\u00a0<br/>Func fix<span class=\"br0\">(</span>FuncFunc f<span class=\"br0\">)</span><br/>  Func r<span class=\"br0\">(</span>RecursiveFunc g<span class=\"br0\">)</span><br/>    <span class=\"kw4\">int</span> s<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> g<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> r<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  autoreleasepool<br/>\u00a0<br/>    Func almost_fac<span class=\"br0\">(</span>Func f<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n | <span class=\"kw1\">return</span> n &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> n <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Func almost_fib<span class=\"br0\">(</span>Func f<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n | <span class=\"kw1\">return</span> n &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fib <span class=\"sy0\">:=</span> fix<span class=\"br0\">(</span>almost_fib<span class=\"br0\">)</span><br/>    fac <span class=\"sy0\">:=</span> fix<span class=\"br0\">(</span>almost_fac<span class=\"br0\">)</span><br/>\u00a0<br/>    Log<span class=\"br0\">(</span><span class=\"st0\">'fib(10) =\u00a0%d'</span>, fib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Log<span class=\"br0\">(</span><span class=\"st0\">'fac(10) =\u00a0%d'</span>, fac<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Ela", "loc": 10, "block": "<pre class=\"text highlighted_source\">fix = \\f -&gt; (\\x -&gt; &amp; f (x x)) (\\x -&gt; &amp; f (x x))<br/>\u00a0<br/>fac _ 0 = 1<br/>fac f n = n * f (n - 1)<br/>\u00a0<br/>fib _ 0 = 0<br/>fib _ 1 = 1<br/>fib f n = f (n - 1) + f (n - 2)<br/>\u00a0<br/>(fix fac 12, fix fib 12)</pre>"}, {"lang": "Elena", "loc": 16, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>singleton YCombinator<br/>{<br/>    fix\u00a0: func<br/>        = (:f)[(:x)[ x(x) ] eval(:g)[ f eval(:x)[(g(g)) eval:x] ]] eval:func.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var fib\u00a0:= YCombinator fix(:f)((:i)( (i &lt;= 1) ifTrue:[^i] ifFalse:[^f(i-1) + f(i-2) ] )).<br/>    var fact\u00a0:= YCombinator fix(:f)((:i)((i == 0) ifTrue:[^1] ifFalse:[^f(i-1) * i] )).<br/>\u00a0<br/>    console printLine(\"fib(10)=\",fib(10)).<br/>    console printLine(\"fact(10)=\",fact(10)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>iex(1)&gt; yc = fn f -&gt; (fn x -&gt; x.(x) end).(fn y -&gt; f.(fn arg -&gt; y.(y).(arg) end) end) end<br/>#Function&lt;6.90072148/1 in\u00a0:erl_eval.expr/5&gt;<br/>iex(2)&gt; fac = fn f -&gt; fn n -&gt; if n &lt; 2 do 1 else n * f.(n-1) end end end<br/>#Function&lt;6.90072148/1 in\u00a0:erl_eval.expr/5&gt;<br/>iex(3)&gt; for i &lt;- 0..9, do: yc.(fac).(i)<br/>[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]<br/>iex(4)&gt; fib = fn f -&gt; fn n -&gt; if n == 0 do 0 else (if n == 1 do 1 else f.(n-1) + f.(n-2) end) end end end<br/>#Function&lt;6.90072148/1 in\u00a0:erl_eval.expr/5&gt;<br/>iex(5)&gt; for i &lt;- 0..9, do: yc.(fib).(i)<br/>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]<br/>\u00a0</pre>"}, {"lang": "Elm", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import Html exposing (text)<br/>\u00a0<br/>type Mu a b = Roll (Mu a b -&gt; a -&gt; b)<br/>\u00a0<br/>unroll\u00a0: Mu a b -&gt; (Mu a b -&gt; a -&gt; b)<br/>unroll (Roll x) = x<br/>\u00a0<br/>fix\u00a0: ((a -&gt; b) -&gt; (a -&gt; b)) -&gt; (a -&gt; b)<br/>fix f = let g r = f (\\v -&gt; unroll r r v)<br/>        in g (Roll g)<br/>\u00a0<br/>fac\u00a0: Int -&gt; Int<br/>fac = fix &lt;|<br/>    \\f n -&gt; if n &lt;= 0<br/>            then 1<br/>            else n * f (n - 1)<br/>\u00a0<br/>main = text &lt;| toString &lt;| fac 5<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 15, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re5\">Y</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">M</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re5\">Fac</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>              <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span> <span class=\"sy3\">*</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/><span class=\"re5\">Fib</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>             <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>             <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">(</span><span class=\"re5\">Fac</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">%% 120</span><br/><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">(</span><span class=\"re5\">Fib</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">%% 21</span></pre>"}, {"lang": "F#", "loc": 19, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> <span class=\"st0\">'a mu = Roll of ('</span>a mu <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'a)  // ease syntax colouring confusion with '</span><br/>\u00a0<br/><span class=\"kw1\">let</span> unroll <span class=\"br0\">(</span>Roll x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/><span class=\"co1\">// val unroll\u00a0: 'a mu -&gt; ('a mu -&gt; 'a)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fix f <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> g <span class=\"sy0\">=</span> <span class=\"kw1\">fun</span> x a <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>unroll x x<span class=\"br0\">)</span> a <span class=\"kw1\">in</span> g <span class=\"br0\">(</span>Roll g<span class=\"br0\">)</span><br/><span class=\"co1\">// val fix\u00a0: (('a -&gt; 'b) -&gt; 'a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fac <span class=\"sy0\">=</span> fix <span class=\"br0\">(</span><span class=\"kw1\">fun</span> f n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> n <span class=\"sy0\">*</span> f <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">// val fac\u00a0: (int -&gt; int) -&gt; int -&gt; int = &lt;fun&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fib <span class=\"sy0\">=</span> fix <span class=\"br0\">(</span><span class=\"kw1\">fun</span> f n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> n <span class=\"kw1\">else</span> f <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">// val fib\u00a0: (int -&gt; int) -&gt; int -&gt; int = &lt;fun&gt;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>  fac <span class=\"nu0\">10</span> <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%A\"</span> <span class=\"co1\">// prints 3628800</span><br/>  fib <span class=\"nu0\">10</span> <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%A\"</span> <span class=\"co1\">// prints 55</span><br/>  <span class=\"nu0\">0</span> <span class=\"co1\">// return an integer exit code</span></pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">USING: fry kernel math\u00a0;<br/>IN: rosettacode.Y<br/>: Y ( quot -- quot )<br/>    '[ [ dup call call ] curry @ ] dup call\u00a0; inline<br/>\u00a0<br/>: almost-fac ( quot -- quot )<br/>    '[ dup zero? [ drop 1 ] [ dup 1 - @ * ] if ]\u00a0;<br/>\u00a0<br/>: almost-fib ( quot -- quot )<br/>    '[ dup 2 &gt;= [ 1 2 [ - @ ] <a class=\"__cf_email__\" data-cfemail=\"bbd9d296d8cec9c9c2fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> bi + ] when ]\u00a0;</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">\\ Address of an xt.<br/>variable 'xt<br/>\\ Make room for an xt.<br/>: xt, ( -- ) here 'xt\u00a0!  1 cells allot\u00a0;<br/>\\ Store xt.<br/>:\u00a0!xt ( xt -- ) 'xt @\u00a0!\u00a0;<br/>\\ Compile fetching the xt.<br/>: @xt, ( -- ) 'xt @ postpone literal postpone @\u00a0;<br/>\\ Compile the Y combinator.<br/>: y, ( xt1 -- xt2 ) &gt;r\u00a0:noname @xt, r&gt; compile, postpone\u00a0;\u00a0;<br/>\\ Make a new instance of the Y combinator.<br/>: y ( xt1 -- xt2 ) xt, y, dup\u00a0!xt\u00a0;</pre>"}, {"lang": "Falcon", "loc": 11, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/>Y <span class=\"sy0\">=</span> <span class=\"br0\">{</span> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>x<span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>n <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"br0\">{</span>x<span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>n <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>facStep <span class=\"sy0\">=</span> <span class=\"br0\">{</span> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> x<span class=\"sy0\">*</span>f<span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>fibStep <span class=\"sy0\">=</span> <span class=\"br0\">{</span> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>YFac <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span>facStep<span class=\"br0\">)</span><br/>YFib <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span>fibStep<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"Factorial 10: \"</span><span class=\"sy0\">,</span> YFac<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"Fibonacci 10: \"</span><span class=\"sy0\">,</span> YFib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 35, "block": "<pre class=\"text highlighted_source\">Y\u00a0:= function(f)<br/>    local u;<br/>    u\u00a0:= x -&gt; x(x);<br/>    return u(y -&gt; f(a -&gt; y(y)(a)));<br/>end;<br/>\u00a0<br/>fib\u00a0:= function(f)<br/>    local u;<br/>    u\u00a0:= function(n)<br/>        if n &lt; 2 then<br/>            return n;<br/>        else<br/>            return f(n-1) + f(n-2);<br/>        fi;<br/>    end;<br/>    return u;<br/>end;<br/>\u00a0<br/>Y(fib)(10);<br/># 55<br/>\u00a0<br/>fac\u00a0:= function(f)<br/>    local u;<br/>    u\u00a0:= function(n)<br/>        if n &lt; 2 then<br/>            return 1;<br/>        else<br/>            return n*f(n-1);<br/>        fi;<br/>    end;<br/>    return u;<br/>end;<br/>\u00a0<br/>Y(fac)(8);<br/># 40320</pre>"}, {"lang": "Genyris", "loc": 19, "block": "<pre class=\"text highlighted_source\">def fac (f)<br/>    function (n)<br/>      if (equal? n 0) 1<br/>        * n (f (- n 1))<br/>def fib (f)<br/>  function (n)<br/>    cond<br/>      (equal? n 0) 0<br/>      (equal? n 1) 1<br/>      else (+ (f (- n 1)) (f (- n 2)))<br/>\u00a0<br/>def Y (f)<br/>  (function (x) (x x))<br/>      function (y)<br/>          f<br/>             function (&amp;rest args) (apply (y y) args)<br/>\u00a0<br/>assertEqual ((Y fac) 5) 120<br/>assertEqual ((Y fib) 8) 21</pre>"}, {"lang": "Go", "loc": 41, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Func <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span><br/><span class=\"kw1\">type</span> FuncFunc <span class=\"kw4\">func</span><span class=\"sy1\">(</span>Func<span class=\"sy1\">)</span> Func<br/><span class=\"kw1\">type</span> RecursiveFunc <span class=\"kw4\">func</span> <span class=\"sy1\">(</span>RecursiveFunc<span class=\"sy1\">)</span> Func<br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfac <span class=\"sy2\">:=</span> Y<span class=\"sy1\">(</span>almost_fac<span class=\"sy1\">)</span><br/>\tfib <span class=\"sy2\">:=</span> Y<span class=\"sy1\">(</span>almost_fib<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"fac(10) = \"</span><span class=\"sy1\">,</span> fac<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"fib(10) = \"</span><span class=\"sy1\">,</span> fib<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Y<span class=\"sy1\">(</span>f FuncFunc<span class=\"sy1\">)</span> Func <span class=\"sy1\">{</span><br/>\tg <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>r RecursiveFunc<span class=\"sy1\">)</span> Func <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> f<span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> r<span class=\"sy1\">(</span>r<span class=\"sy1\">)(</span>x<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">})</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> g<span class=\"sy1\">(</span>g<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> almost_fac<span class=\"sy1\">(</span>f Func<span class=\"sy1\">)</span> Func <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> x &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> x <span class=\"sy3\">*</span> f<span class=\"sy1\">(</span>x<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> almost_fib<span class=\"sy1\">(</span>f Func<span class=\"sy1\">)</span> Func <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> x &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> f<span class=\"sy1\">(</span>x<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">+</span>f<span class=\"sy1\">(</span>x<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> Y <span class=\"sy0\">=</span> <span class=\"br0\">{</span> le <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> f <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">{</span> f <span class=\"sy0\">-&gt;</span> le <span class=\"br0\">{</span> x <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> factorial <span class=\"sy0\">=</span> Y <span class=\"br0\">{</span> fac <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> n\u00a0: n <span class=\"sy0\">*</span> fac<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"nu0\">2432902008176640000</span> <span class=\"sy0\">==</span> factorial<span class=\"br0\">(</span>20G<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fib <span class=\"sy0\">=</span> Y <span class=\"br0\">{</span> fibStar <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> n\u00a0: fibStar<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibStar<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> fib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">55</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">newtype</span> Mu a <span class=\"sy0\">=</span> Roll<br/>  <span class=\"br0\">{</span> unroll <span class=\"sy0\">::</span> Mu a <span class=\"sy0\">-&gt;</span> a <span class=\"br0\">}</span><br/>\u00a0<br/>fix <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<br/>fix <span class=\"sy0\">=</span> g <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span>Roll <span class=\"sy0\">.</span> g<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><span class=\"br0\">)</span> unroll<span class=\"br0\">)</span><br/>\u00a0<br/>fac <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>fac <span class=\"sy0\">=</span><br/>  fix <span class=\"sy0\">$</span><br/>  \\f n <span class=\"sy0\">-&gt;</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">then</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span> n <span class=\"sy0\">*</span> f <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>fibs <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>fibs <span class=\"sy0\">=</span><br/>  fix <span class=\"sy0\">$</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>fix <span class=\"br0\">(</span>\\f <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> y\u00a0: f xs ys<span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><br/>    <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> fac <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">20</span> fibs<br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">Y=. <span class=\"sy0\">((((</span>&amp;&gt;<span class=\"sy0\">)</span>/<span class=\"sy0\">)((((</span>^:<span class=\"nu0\">_1</span><span class=\"sy0\">)</span>b.<span class=\"sy0\">)(</span>`<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'0'</span>;<span class=\"nu0\">_1</span><span class=\"sy0\">)))(</span>`:<span class=\"nu0\">6</span><span class=\"sy0\">)))(</span>&amp;<span class=\"sy0\">(</span>[ <span class=\"nu0\">128</span>!:<span class=\"nu0\">2</span> ,&amp;&lt;<span class=\"sy0\">)))</span></pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.function.Function</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">interface</span> YCombinator <span class=\"br0\">{</span><br/>  <span class=\"kw2\">interface</span> RecursiveFunction<span class=\"sy0\">&lt;</span>F<span class=\"sy0\">&gt;</span> <span class=\"kw2\">extends</span> Function<span class=\"sy0\">&lt;</span>RecursiveFunction<span class=\"sy0\">&lt;</span>F<span class=\"sy0\">&gt;</span>, F<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span> Function<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span> Y<span class=\"br0\">(</span>Function<span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;</span>, Function<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;&gt;</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    RecursiveFunction<span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span>A,B<span class=\"sy0\">&gt;&gt;</span> r = w -<span class=\"sy0\">&gt;</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>x -<span class=\"sy0\">&gt;</span> w.<span class=\"me1\">apply</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">return</span> r.<span class=\"me1\">apply</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a>... <span class=\"me1\">arguments</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>,<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> fib = Y<span class=\"br0\">(</span>f -<span class=\"sy0\">&gt;</span> n -<span class=\"sy0\">&gt;</span><br/>      <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">?</span> <span class=\"nu0\">1</span><br/>       \u00a0: <span class=\"br0\">(</span>f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Function<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>,<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> fac = Y<span class=\"br0\">(</span>f -<span class=\"sy0\">&gt;</span> n -<span class=\"sy0\">&gt;</span><br/>      <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">?</span> <span class=\"nu0\">1</span><br/>       \u00a0: <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"fib(10) = \"</span> + fib.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"fac(10) = \"</span> + fac.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> Y<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> f<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>h<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> g.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">,</span> arguments<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>h<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> g.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"sy0\">,</span> arguments<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> g<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> fac <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> fib <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 3, "block": "<pre class=\"text highlighted_source\">DEFINE y == [dup cons] swap concat dup cons i;<br/>\u00a0<br/>     fac == [ [pop null] [pop succ] [[dup pred] dip i *] ifte ] y.</pre>"}, {"lang": "Kitten", "loc": 19, "block": "<pre class=\"text highlighted_source\">define y&lt;S..., T...&gt; (S..., (S..., (S... -&gt; T...) -&gt; T...) -&gt; T...):<br/>  -&gt; f; { f y } f call<br/>\u00a0<br/>define fac (Int32, (Int32 -&gt; Int32) -&gt; Int32):<br/>  -&gt; x, rec;<br/>  if (x &lt;= 1) { 1 } else { (x - 1) rec call * x }<br/>\u00a0<br/>define fib (Int32, (Int32 -&gt; Int32) -&gt; Int32):<br/>  -&gt; x, rec;<br/>  if (x &lt;= 2):<br/>    1<br/>  else:<br/>    (x - 1) rec call -&gt; a;<br/>    (x - 2) rec call -&gt; b;<br/>    a + b<br/>\u00a0<br/>5  \\fac y say  // 120<br/>10 \\fib y say  // 55<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>typealias Func<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>T<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> R<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RecursiveFunc<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p<span class=\"sy0\">:</span> <span class=\"br0\">(</span>RecursiveFunc<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Func<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span> y<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Func<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Func<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rec <span class=\"sy0\">=</span> RecursiveFunc<span class=\"sy0\">&lt;</span>T, R<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> r -<span class=\"sy0\">&gt;</span> f <span class=\"br0\">{</span> r.<span class=\"me1\">p</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> rec.<span class=\"me1\">p</span><span class=\"br0\">(</span>rec<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun fac<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> Func<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span> Int -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> x <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>x - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun fib<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> Func<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x<span class=\"sy0\">:</span> Int -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> f<span class=\"br0\">(</span>x - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + f<span class=\"br0\">(</span>x - <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Factorial(1..10)  \u00a0: \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"${y(::fac)(i)}  \"</span><span class=\"br0\">)</span> <br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Fibonacci(1..10)  \u00a0: \"</span><span class=\"br0\">)</span>   <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"${y(::fib)(i)}  \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lambdatalk", "loc": 45, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span><span class=\"br0\">)</span> defining the Ycombinator<br/><span class=\"br0\">{</span>def Y<br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">2</span><span class=\"br0\">)</span> defining non recursive functions<br/><span class=\"nu0\">2.1</span><span class=\"br0\">)</span> factorial <br/><span class=\"br0\">{</span>def almost<span class=\"sy0\">-</span>fac <br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">=</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>   then <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:n <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">2.2</span><span class=\"br0\">)</span> fibonacci<br/><span class=\"br0\">{</span>def almost<span class=\"sy0\">-</span>fibo<br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>  \u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>   then <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">3</span><span class=\"br0\">)</span> testing<br/><span class=\"br0\">{</span>Y almost<span class=\"sy0\">-</span>fac <span class=\"nu0\">6</span><span class=\"br0\">}</span>  <br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">720</span><br/><span class=\"br0\">{</span>Y almost<span class=\"sy0\">-</span>fibo <span class=\"nu0\">8</span><span class=\"br0\">}</span> <br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">34</span><br/>\u00a0<br/>We could also forget the Ycombinator <span class=\"kw1\">and</span> names:<br/>\u00a0<br/><span class=\"nu0\">1</span><span class=\"br0\">)</span> fac:<br/><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><span class=\"br0\">}</span> <br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">=</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <br/>   then <span class=\"nu0\">1</span> <br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:n <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span>  <br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">720</span><br/>\u00a0<br/><span class=\"nu0\">2</span><span class=\"br0\">)</span> fibo:<br/><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><span class=\"br0\">}</span> <br/> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>  \u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span> then <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"kw1\">f</span>\u00a0:<span class=\"kw1\">f</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span> <br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">34</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>julia&gt; \"\"\"<br/>       # Y combinator<br/>\u00a0<br/>       * `\u03bbf. (\u03bbx. f (x x)) (\u03bbx. f (x x))`<br/>       \"\"\"<br/>       Y = f -&gt; (x -&gt; x(x))(y -&gt; f((t...) -&gt; y(y)(t...)))<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\">Y <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Ycombinator {<br/>      \\\\ y() return value. no use of closure<br/>      y=lambda (g, x)-&gt;g(g, x)<br/>      Print y(lambda (g, n)-&gt;if(n=0-&gt;1, n*g(g, n-1)), 10)<br/>      Print y(lambda (g, n)-&gt;if(n&lt;=1-&gt;n,g(g, n-1)+g(g, n-2)), 10)<br/>\u00a0<br/>      \\\\ Using closure in y, y() return function<br/>      y=lambda (g)-&gt;lambda g (x) -&gt; g(g, x)<br/>      fact=y((lambda (g, n)-&gt; if(n=0-&gt;1, n*g(g, n-1))))<br/>      Print fact(6), fact(24)<br/>      fib=y(lambda (g, n)-&gt;if(n&lt;=1-&gt;n,g(g, n-1)+g(g, n-2)))<br/>      Print  fib(10)<br/>}<br/>Ycombinator<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; Y:=f-&gt;(x-&gt;x(x))(g-&gt;f((()-&gt;g(g)(args)))):<br/>&gt; Yfac:=Y(f-&gt;(x-&gt;`if`(x&lt;2,1,x*f(x-1)))):<br/>&gt; seq( Yfac( i ), i = 1 .. 10 );<br/>          1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800<br/>&gt; Yfib:=Y(f-&gt;(x-&gt;`if`(x&lt;2,x,f(x-1)+f(x-2)))):<br/>&gt; seq( Yfib( i ), i = 1 .. 10 );<br/>                    1, 1, 2, 3, 5, 8, 13, 21, 34, 55<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">Y = Function[f, #[#] &amp;[Function[g, f[g[g][##] &amp;]]]];<br/>factorial = Y[Function[f, If[# &lt; 1, 1, # f[# - 1]] &amp;]];<br/>fibonacci = Y[Function[f, If[# &lt; 2, #, f[# - 1] + f[# - 2]] &amp;]];</pre>"}, {"lang": "Moonscript", "loc": 2, "block": "<pre class=\"text highlighted_source\">Z = (f using nil) -&gt; ((x) -&gt; x x) (x) -&gt; f (...) -&gt; (x x) ...<br/>factorial = Z (f using nil) -&gt; (n) -&gt; if n == 0 then 1 else n * f n - 1</pre>"}, {"lang": "Objective-C", "loc": 41, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span>Func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>;<br/><span class=\"kw4\">typedef</span> Func <span class=\"br0\">(</span><span class=\"sy0\">^</span>FuncFunc<span class=\"br0\">)</span><span class=\"br0\">(</span>Func<span class=\"br0\">)</span>;<br/><span class=\"kw4\">typedef</span> Func <span class=\"br0\">(</span><span class=\"sy0\">^</span>RecursiveFunc<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>; <span class=\"co2\">// hide recursive typing behind dynamic typing</span><br/>\u00a0<br/>Func Y<span class=\"br0\">(</span>FuncFunc f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  RecursiveFunc r <span class=\"sy0\">=</span><br/>  <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">id</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    RecursiveFunc w <span class=\"sy0\">=</span> y; <span class=\"co2\">// cast value back into desired type</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> w<span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span>;<br/>  <span class=\"kw1\">return</span> r<span class=\"br0\">(</span>r<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    Func fib <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"sy0\">^</span>Func<span class=\"br0\">(</span>Func f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">return</span>  f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      <span class=\"br0\">}</span>;<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>    Func fac <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"sy0\">^</span>Func<span class=\"br0\">(</span>Func f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"br0\">}</span>;<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    Func fib <span class=\"sy0\">=</span> fix<span class=\"br0\">(</span>almost_fib<span class=\"br0\">)</span>;<br/>    Func fac <span class=\"sy0\">=</span> fix<span class=\"br0\">(</span>almost_fac<span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"fib(10) =\u00a0%d\"</span>, fib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"fac(10) =\u00a0%d\"</span>, fac<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> fix f g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x a <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>x x<span class=\"br0\">)</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x a <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>x x<span class=\"br0\">)</span> a<span class=\"br0\">)</span> g</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: Y(f)   #[ f Y f perform ]\u00a0;</pre>"}, {"lang": "Order", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8y                                             \\<br/>ORDER_PP_FN(8fn(8F,                                                 \\<br/>            8let((8R, 8fn(8G,                                       \\<br/>                          8ap(8F, 8fn(8A, 8ap(8ap(8G, 8G), 8A))))), \\<br/>                 8ap(8R, 8R))))</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8fac \\<br/>ORDER_PP_FN(8fn(8F, 8X,   \\<br/>                8if(8less_eq(8X, 0), 1, 8times(8X, 8ap(8F, 8minus(8X, 1))))))</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8fib                                           \\<br/>ORDER_PP_FN(8fn(8F, 8X,                                             \\<br/>                8if(8less(8X, 2), 8X, 8plus(8ap(8F, 8minus(8X, 1)), \\<br/>                                            8ap(8F, 8minus(8X, 2))))))</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span>8to_lit<span class=\"br0\">(</span>8ap<span class=\"br0\">(</span>8y<span class=\"br0\">(</span>8fac<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">// 3628800</span><br/>ORDER_PP<span class=\"br0\">(</span>8ap<span class=\"br0\">(</span>8y<span class=\"br0\">(</span>8fib<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\">// 55</span></pre>"}, {"lang": "Oz", "loc": 23, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Y = <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> F<span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span> <span class=\"br0\">{</span>X X<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>          <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> X<span class=\"br0\">}</span> <span class=\"br0\">{</span>F <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Z<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">{</span>X X<span class=\"br0\">}</span> Z<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>\u00a0<br/>  Fac = <span class=\"br0\">{</span>Y <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> F<span class=\"br0\">}</span><br/>              <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> N<span class=\"br0\">}</span><br/>                 <span class=\"kw1\">if</span> N <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> 1 <span class=\"kw1\">else</span> N<span class=\"sy0\">*</span><span class=\"br0\">{</span>F N<span class=\"sy0\">-</span>1<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>              <span class=\"kw1\">end</span><br/>           <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>\u00a0<br/>  Fib = <span class=\"br0\">{</span>Y <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> F<span class=\"br0\">}</span><br/>              <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> N<span class=\"br0\">}</span><br/>                 <span class=\"kw1\">case</span> N <span class=\"kw1\">of</span> 0 <span class=\"kw1\">then</span> 0<br/>                 <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> 1 <span class=\"kw1\">then</span> 1<br/>                 <span class=\"kw1\">else</span> <span class=\"br0\">{</span>F N<span class=\"sy0\">-</span>1<span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"br0\">{</span>F N<span class=\"sy0\">-</span>2<span class=\"br0\">}</span><br/>                 <span class=\"kw1\">end</span><br/>              <span class=\"kw1\">end</span><br/>           <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Fac 5<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Fib 8<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">Y<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>fact<span class=\"sy0\">=</span>Y<span class=\"br0\">(</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">*</span>f<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>fib<span class=\"sy0\">=</span>Y<span class=\"br0\">(</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>f<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>fact<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>fib<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> Y <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span>                                <span class=\"co1\"># \u03bbf.</span><br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>                <span class=\"co1\">#   (\u03bbx.x x)</span><br/>\t<span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">#   \u03bby.f \u03bbz.y y z</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$fac</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$fib</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$f</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"br0\">(</span><span class=\"re0\">$fac</span><span class=\"sy0\">,</span> <span class=\"re0\">$fib</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> Y<span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> Y <span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">x</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">(</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">&amp;y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> f<span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> y<span class=\"br0\">(</span><span class=\"re0\">&amp;y</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> fac <span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> f<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> fib <span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"re0\">$n</span> <span class=\"sy0\">!!</span> f<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">map</span> Y<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"nu0\">10</span> <span class=\"kw1\">for</span> <span class=\"re0\">&amp;fac</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;fib</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 26, "block": "<pre class=\"text highlighted_source\">function call_fn(integer f, n)<br/>    return call_func(f,{f,n})<br/>end function<br/>\u00a0<br/>function Y(integer f)<br/>    return f<br/>end function<br/>\u00a0<br/>function fac(integer self, integer n)<br/>    return iff(n&gt;1?n*call_fn(self,n-1):1)<br/>end function<br/>\u00a0<br/>function fib(integer self, integer n)<br/>    return iff(n&gt;1?call_fn(self,n-1)+call_fn(self,n-2):n)<br/>end function<br/>\u00a0<br/>procedure test(string name, integer rid=routine_id(name))<br/>    integer f = Y(rid)<br/>    printf(1,\"%s: \",{name})<br/>    for i=1 to 10 do<br/>        printf(1,\"\u00a0%d\",call_fn(f,i))<br/>    end for<br/>    printf(1,\"\\n\");<br/>end procedure<br/>test(\"fac\")<br/>test(\"fib\")</pre>"}, {"lang": "PHP", "loc": 22, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> Y<span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$g</span> <span class=\"sy0\">=</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span><span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <a href=\"http://www.php.net/call_user_func_array\"><span class=\"kw3\">call_user_func_array</span></a><span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/func_get_args\"><span class=\"kw3\">func_get_args</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$g</span><span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$fibonacci</span> <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0? <span class=\"re0\">$i</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"re0\">$fibonacci</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$factorial</span> <span class=\"sy0\">=</span> Y<span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"kw2\">use</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"re0\">$factorial</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(de Y (F)<br/>   (let X (curry (F) (Y) (F (curry (Y) @ (pass (Y Y)))))<br/>      (X X) ) )</pre>"}, {"lang": "Pop11", "loc": 22, "block": "<pre class=\"text highlighted_source\">define Y(f);<br/>    procedure (x); x(x) endprocedure(<br/>        procedure (y);<br/>            f(procedure(z); (y(y))(z) endprocedure)<br/>        endprocedure<br/>    )<br/>enddefine;<br/>\u00a0<br/>define fac(h);<br/>    procedure (n);<br/>       if n = 0 then 1 else n * h(n - 1) endif<br/>    endprocedure<br/>enddefine;<br/>\u00a0<br/>define fib(h);<br/>    procedure (n);<br/>        if n &lt; 2 then 1 else h(n - 1) + h(n - 2) endif<br/>    endprocedure<br/>enddefine;<br/>\u00a0<br/>Y(fac)(5) =&gt;<br/>Y(fib)(5) =&gt;</pre>"}, {"lang": "PostScript", "loc": 8, "block": "<pre class=\"text highlighted_source\">y {<br/>    {dup cons} exch concat dup cons i<br/>}.<br/>\u00a0<br/>/fac {<br/>    { {pop zero?} {pop succ} {{dup pred} dip i *} ifte }<br/>    y<br/>}.</pre>"}, {"lang": "PowerShell", "loc": 51, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$fac</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    \t<span class=\"kw3\">param</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">ScriptBlock</span><span class=\"br0\">]</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span><br/>    \t<span class=\"kw1\">invoke-expression</span> <span class=\"sy0\">@</span><span class=\"st0\">\"<br/>    \t{<br/>    \t\tparam([int] <span class=\"es0\">`$</span>n)<br/>    \t\tif (<span class=\"es0\">`$</span>n -le 0) {1}<br/>    \t\telse {<span class=\"es0\">`$</span>n * {$f}.InvokeReturnAsIs(<span class=\"es0\">`$</span>n - 1)}<br/>    \t}<br/>\"</span><span class=\"sy0\">@</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$fib</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">param</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">ScriptBlock</span><span class=\"br0\">]</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">invoke-expression</span> <span class=\"sy0\">@</span><span class=\"st0\">\"<br/>\t{<br/>\t\tparam([int] <span class=\"es0\">`$</span>n)<br/>\t\tswitch (<span class=\"es0\">`$</span>n)<br/>        {<br/>        0 {1}<br/>        1 {1}<br/>        default {{$f}.InvokeReturnAsIs(<span class=\"es0\">`$</span>n-1)+{$f}.InvokeReturnAsIs(<span class=\"es0\">`$</span>n-2)}<br/>        }<br/>\t}<br/>\"</span><span class=\"sy0\">@</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$Z</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">param</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">ScriptBlock</span><span class=\"br0\">]</span> <span class=\"re0\">$f</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">invoke-expression</span> <span class=\"sy0\">@</span><span class=\"st0\">\"<br/>    {<br/>        param([ScriptBlock] <span class=\"es0\">`$</span>x)<br/>        {$f}.InvokeReturnAsIs(<span class=\"es0\">`$</span>(invoke-expression @<span class=\"es0\">`\"</span><br/>        {<br/>            param(<span class=\"es0\">``</span><span class=\"es0\">`$</span>y)<br/>            {<span class=\"es0\">`$</span>x}.InvokeReturnAsIs({<span class=\"es0\">`$</span>x}).InvokeReturnAsIs(<span class=\"es0\">``</span><span class=\"es0\">`$</span>y)<br/>        }<br/><span class=\"es0\">`\"</span>@))<br/>    }.InvokeReturnAsIs({<br/>        param([ScriptBlock] <span class=\"es0\">`$</span>x)<br/>        {$f}.InvokeReturnAsIs(<span class=\"es0\">`$</span>(invoke-expression @<span class=\"es0\">`\"</span><br/>        {<br/>            param(<span class=\"es0\">``</span><span class=\"es0\">`$</span>y)<br/>            {<span class=\"es0\">`$</span>x}.InvokeReturnAsIs({<span class=\"es0\">`$</span>x}).InvokeReturnAsIs(<span class=\"es0\">``</span><span class=\"es0\">`$</span>y)<br/>        }<br/><span class=\"es0\">`\"</span>@))<br/>    })<br/>\"</span><span class=\"sy0\">@</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$Z</span>.InvokeReturnAsIs<span class=\"br0\">(</span><span class=\"re0\">$fac</span><span class=\"br0\">)</span>.InvokeReturnAsIs<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"re0\">$Z</span>.InvokeReturnAsIs<span class=\"br0\">(</span><span class=\"re0\">$fib</span><span class=\"br0\">)</span>.InvokeReturnAsIs<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Prolog", "loc": 32, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% The Y combinator</span><br/>y<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Arg</span></a><span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tPred <span class=\"sy6\">=</span> P <span class=\"sy3\">+</span>\\Nb2^F2^call<span class=\"br0\">(</span>P<span class=\"sy4\">,</span>Nb2<span class=\"sy4\">,</span>F2<span class=\"sy4\">,</span>P<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Pred<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Arg</span></a><span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>test_y_combinator <span class=\"sy1\">:-</span><br/>    <span class=\"co1\">% code for Fibonacci function</span><br/>    Fib   <span class=\"sy6\">=</span> \\NFib^RFib^RFibr1^<span class=\"br0\">(</span>NFib <span class=\"sy6\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t\t\t         RFib <span class=\"sy6\">=</span> NFib<br/>\t\t\t      <span class=\"sy4\">;</span><br/>\t\t\t         NFib1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NFib <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t\t\t         NFib2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NFib <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\t\t\t         <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>RFibr1<span class=\"sy4\">,</span>NFib1<span class=\"sy4\">,</span>RFib1<span class=\"sy4\">,</span>RFibr1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t         <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>RFibr1<span class=\"sy4\">,</span>NFib2<span class=\"sy4\">,</span>RFib2<span class=\"sy4\">,</span>RFibr1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t         RFib <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> RFib1 <span class=\"sy3\">+</span> RFib2<br/>\t\t\t      <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    y<span class=\"br0\">(</span>Fib<span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> FR<span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'Fib(~w) = ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span> FR<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    <span class=\"co1\">% code for Factorial function</span><br/>    Fact <span class=\"sy6\">=</span>  \\NFact^RFact^RFactr1^<span class=\"br0\">(</span>NFact <span class=\"sy6\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t\t\t            RFact <span class=\"sy6\">=</span> NFact<br/>                                 <span class=\"sy4\">;</span><br/>\t\t\t            NFact1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NFact <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t\t\t            <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>RFactr1<span class=\"sy4\">,</span>NFact1<span class=\"sy4\">,</span>RFact1<span class=\"sy4\">,</span>RFactr1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t            RFact <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> NFact <span class=\"sy3\">*</span> RFact1<br/>\t\t\t         <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>    y<span class=\"br0\">(</span>Fact<span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> FF<span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'Fact(~w) = ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span> FF<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> Y <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f: <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> y: f<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> *args: y<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>*args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> fac <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f: <span class=\"kw1\">lambda</span> n: <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"kw1\">else</span> n*f<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span> Y<span class=\"br0\">(</span>fac<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">120</span><span class=\"sy0\">,</span> <span class=\"nu0\">720</span><span class=\"sy0\">,</span> <span class=\"nu0\">5040</span><span class=\"sy0\">,</span> <span class=\"nu0\">40320</span><span class=\"sy0\">,</span> <span class=\"nu0\">362880</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> fib <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> f: <span class=\"kw1\">lambda</span> n: <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> f<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + f<span class=\"br0\">(</span>n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span> Y<span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">Y &lt;- function(f) {<br/>  (function(x) { (x)(x) })( function(y) { f( (function(a) {y(y)})(a) ) } )<br/>}</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang lazy<br/>\u00a0<br/>(define Y (\u03bb(f)((\u03bb(x)(f (x x)))(\u03bb(x)(f (x x))))))<br/>\u00a0<br/>(define Fact<br/>  (Y (\u03bb(fact) (\u03bb(n) (if (zero? n) 1 (* n (fact (- n 1))))))))<br/>(define Fib<br/>  (Y (\u03bb(fib) (\u03bb(n) (if (&lt;= n 1) n (+ (fib (- n 1)) (fib (- n 2))))))))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\">Y: closure <span class=\"br0\">[</span>g<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">do</span> <span class=\"kw2\">func</span> <span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"br0\">[</span>f\u00a0:f<span class=\"br0\">]</span> closure <span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"br0\">[</span>g <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">do</span> f\u00a0:f\u00a0:x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program implements and displays  a  stateless   Y   combinator.        */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>                                      <span class=\"coMULTI\">/*allow big numbers. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    fib'</span> Y<span class=\"br0\">(</span>fib     <span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*Fibonacci series.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    fib'</span> Y<span class=\"br0\">(</span>fib     <span class=\"br0\">(</span><span class=\"nu0\">12</span> <span class=\"nu0\">11</span> <span class=\"nu0\">10</span> <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*Fibonacci series.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'   fact'</span> Y<span class=\"br0\">(</span>fact    <span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*single    factorial*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'   fact'</span> Y<span class=\"br0\">(</span>fact    <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*single    factorial*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  Dfact'</span> Y<span class=\"br0\">(</span>dfact   <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*double    factorial*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  Tfact'</span> Y<span class=\"br0\">(</span>tfact   <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*triple    factorial*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  Qfact'</span> Y<span class=\"br0\">(</span>qfact   <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*quadruple factorial*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">' length'</span> Y<span class=\"br0\">(</span><span class=\"kw6\">length</span>  <span class=\"br0\">(</span><span class=\"kw3\">when</span> <span class=\"kw2\">for</span> <span class=\"kw2\">to</span> where whenceforth<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*lengths   of words.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'reverse'</span> Y<span class=\"br0\">(</span><span class=\"kw6\">reverse</span> <span class=\"br0\">(</span><span class=\"nu0\">23</span> <span class=\"nu0\">678</span> <span class=\"nu0\">1007</span> <span class=\"nu0\">45</span> MAS I MA<span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*reverses  strings. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  trunc'</span> Y<span class=\"br0\">(</span><span class=\"kw6\">trunc</span>   <span class=\"br0\">(</span>-<span class=\"nu0\">7.0005</span> <span class=\"nu0\">12</span> <span class=\"nu0\">3.14159</span> <span class=\"nu0\">6.4</span> <span class=\"nu0\">78.999</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*truncates numbers. */</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>    Y: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> Y _; $=                                 <span class=\"coMULTI\">/*the  Y  combinator.*/</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>; <span class=\"kw1\">interpret</span> <span class=\"st0\">'$=$'</span> Y<span class=\"st0\">\"(\"</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>_,j<span class=\"br0\">)</span><span class=\"st0\">')'</span>; <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span> $<br/>  fib: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> x;   s=<span class=\"nu0\">0</span>;   a=<span class=\"nu0\">0</span>;    b=<span class=\"nu0\">1</span><br/>       s=<span class=\"nu0\">0</span>;  a=<span class=\"nu0\">0</span>;  b=<span class=\"nu0\">1</span>;             <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> x; s=a+b; a=b; b=s; <span class=\"kw3\">end</span>; <span class=\"kw1\">return</span> s<br/>dfact: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;\u00a0!=<span class=\"nu0\">1</span>; <span class=\"kw1\">do</span> j=x  <span class=\"kw2\">to</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">2</span>;\u00a0!=!<span class=\"sy0\">*</span>j; <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span>\u00a0!<br/>tfact: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;\u00a0!=<span class=\"nu0\">1</span>; <span class=\"kw1\">do</span> j=x  <span class=\"kw2\">to</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">3</span>;\u00a0!=!<span class=\"sy0\">*</span>j; <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span>\u00a0!<br/>qfact: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;\u00a0!=<span class=\"nu0\">1</span>; <span class=\"kw1\">do</span> j=x  <span class=\"kw2\">to</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">4</span>;\u00a0!=!<span class=\"sy0\">*</span>j; <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span>\u00a0!<br/> fact: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;\u00a0!=<span class=\"nu0\">1</span>; <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> x      \u00a0;\u00a0!=!<span class=\"sy0\">*</span>j; <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span>\u00a0!</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">y = <span class=\"kw3\">lambda</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>g<span class=\"sy0\">|</span> g<span class=\"br0\">[</span>g<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw3\">lambda</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>g<span class=\"sy0\">|</span><br/>      f<span class=\"br0\">[</span><span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|*</span>args<span class=\"sy0\">|</span> g<span class=\"br0\">[</span>g<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>args<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>fac = <span class=\"kw3\">lambda</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> <span class=\"kw3\">lambda</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: n <span class=\"sy0\">*</span> f<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw3\">p</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> y<span class=\"br0\">[</span>fac<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span>   <span class=\"co1\">#=&gt; [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]</span><br/>\u00a0<br/>fib = <span class=\"kw3\">lambda</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> <span class=\"kw3\">lambda</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? n\u00a0: f<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> f<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw3\">p</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> y<span class=\"br0\">[</span>fib<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span>   <span class=\"co1\">#=&gt; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span></pre>"}, {"lang": "Rust", "loc": 89, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//! A simple implementation of the Y Combinator<br/>// \u03bbf.(\u03bbx.xx)(\u03bbx.f(xx))<br/>// &lt;=&gt; \u03bbf.(\u03bbx.f(xx))(\u03bbx.f(xx))<br/>\u00a0<br/>// CREDITS: A better version of the previous code that was posted here, with detailed explanation.<br/>// See &lt;y&gt; and also &lt;y_apply&gt;.<br/>\u00a0<br/>// A function type that takes its own type as an input is an infinite recursive type.<br/>// We introduce a trait that will allow us to have an input with the same type as self, and break the recursion.<br/>// The input is going to be a trait object that implements the desired function in the interface.<br/>// NOTE: We will be coercing a reference to a closure into this trait object.<br/>trait Apply&lt;T, R&gt; {<br/>    fn apply( &amp;self, &amp;Apply&lt;T, R &gt;, T ) -&gt; R;<br/>}<br/>\u00a0<br/>// In Rust, closures fall into three kinds: FnOnce, FnMut and Fn.<br/>// FnOnce assumed to be able to be called just once if it is not Clone. It is impossible to<br/>// write recursive FnOnce that is not Clone.<br/>// All FnMut are also FnOnce, although you can call them multiple times, they are not allow to<br/>// have a reference to themselves. So it is also not possible to write recursive FnMut closures<br/>// that is not Clone.<br/>// All Fn are also FnMut, and all closures of Fn are also Clone. However, programmers can create<br/>// Fn objects that are not Clone<br/>// The following address all closures that is Clone, and those are Fn.<br/>impl&lt;T, R, F&gt; Apply&lt;T, R&gt; for F where F: FnOnce( &amp;Apply&lt;T, R&gt;, T ) -&gt; R + Clone {<br/>    fn apply( &amp;self, f: &amp;Apply&lt;T, R&gt;, t: T ) -&gt; R {<br/>        (self.clone())( f, t )<br/>\u00a0<br/>        // If we were to pass in self as f, we get -<br/>        // NOTE: Each letter is an individual symbol.<br/>        // \u03bbf.\u03bbt.sft<br/>        // =&gt; \u03bbs.\u03bbt.sst [s/f]<br/>        // =&gt; \u03bbs.ss<br/>    }<br/>}<br/>//This will work for all Fn objects, not just closures<br/>//And it is a little bit more efficient for Fn closures as it do not clone itself.<br/>//However under 1.26 it is not possible to define both. We will<br/>//need to wait for specialization.<br/>//impl&lt;T, R, F&gt; Apply&lt;T, R&gt; for F where F: Fn( &amp;Apply&lt;T, R&gt;, T ) -&gt; R {<br/>//    fn apply( &amp;self, f: &amp;Apply&lt;T, R&gt;, t: T ) -&gt; R {<br/>//        self( f, t )<br/>//}<br/>//Before 1.26 we have some limitations and so we need some workarounds. But now impl Trait is stable and we can<br/>// write the following:<br/>fn y&lt;T,R&gt;(f:impl FnOnce(&amp;Fn(T) -&gt; R, T) -&gt; R + Clone) -&gt; impl FnOnce(T) -&gt; R {<br/>   |t| (|x: &amp;Apply&lt;T,R&gt;,y| x.apply(x,y))<br/>       (&amp;move |x:&amp;Apply&lt;T,R&gt;,y| f(&amp;|z| x.apply(x,z), y), t)<br/>\u00a0<br/>    // NOTE: Each letter is an individual symbol.<br/>    // (\u03bbx.(\u03bby.xxy))(\u03bbx.(\u03bby.f(\u03bbz.xxz)y))t<br/>    // =&gt; (\u03bbx.xx)(\u03bbx.f(xx))t<br/>    // =&gt; (Yf)t<br/>}<br/>\u00a0<br/>//Previous version removed as they are just hacks when impl Trait is not available.<br/>\u00a0<br/>fn fac( n: usize ) -&gt; usize {<br/>    let almost_fac = |f: &amp;Fn( usize ) -&gt; usize, x| if x == 0 { 1 } else { x * f( x - 1 ) };<br/>    let fac = y( almost_fac );<br/>    fac( n )<br/>}<br/>\u00a0<br/>fn fib( n: usize ) -&gt; usize {<br/>    let almost_fib = |f: &amp;Fn( usize ) -&gt; usize, x| if x &lt; 2 { 1 } else { f( x - 2 ) + f( x - 1 ) };<br/>    let fib = y( almost_fib );<br/>    fib( n )<br/>}<br/>\u00a0<br/>fn optimal_fib( n: usize ) -&gt; usize {<br/>    let almost_fib = |f: &amp;Fn( (usize,usize,usize) ) -&gt; usize, (i0,i1,x)| <br/>    {<br/>        match x {<br/>            0 =&gt; i0,<br/>            1 =&gt; i1,<br/>            x =&gt; f((i1,i0+i1, x-1))<br/>        }        <br/>    };<br/>    let fib = |x|y( almost_fib )((1,1,x));<br/>    fib( n )<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!( \"{}\", fac( 10 ) );<br/>    println!( \"{}\", fib( 10 ) );<br/>    println!( \"{}\", optimal_fib( 10 ) );<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> Y<span class=\"br0\">[</span>A,B<span class=\"br0\">]</span><span class=\"br0\">(</span>f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>A<span class=\"sy0\">=&gt;</span>B<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">(</span>A<span class=\"sy0\">=&gt;</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> W<span class=\"br0\">(</span>wf<span class=\"sy0\">:</span> W<span class=\"sy0\">=&gt;</span>A<span class=\"sy0\">=&gt;</span>B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>w<span class=\"sy0\">:</span> W<span class=\"br0\">)</span> <span class=\"sy0\">=</span> wf<span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g<span class=\"sy0\">:</span> W<span class=\"sy0\">=&gt;</span>A<span class=\"sy0\">=&gt;</span>B <span class=\"sy0\">=</span> w <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>w<span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>  g<span class=\"br0\">(</span>W<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 38, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> Y<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>h<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>h <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> args <span class=\"br0\">(</span>apply <span class=\"br0\">(</span>g g<span class=\"br0\">)</span> args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; head-recursive factorial</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> fac<br/>  <span class=\"br0\">(</span>Y<br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"nu0\">1</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">*</span> x <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; tail-recursive factorial</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fac2 n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letrec</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tail<span class=\"sy0\">-</span>fac <br/>             <span class=\"br0\">(</span>Y <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n acc<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><br/>                        acc<br/>                        <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>tail<span class=\"sy0\">-</span>fac n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> fib<br/>  <span class=\"br0\">(</span>Y<br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            x<br/>            <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>fac <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>fib <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Shen", "loc": 11, "block": "<pre class=\"text highlighted_source\">(define y<br/>  F -&gt; ((/. X (X X))<br/>        (/. X (F (/. Z ((X X) Z))))))<br/>\u00a0<br/>(let Fac (y (/. F N (if (= 0 N)<br/>                      1<br/>                      (* N (F (- N 1))))))<br/>  (output \"~A~%~A~%~A~%\"<br/>    (Fac 0)<br/>    (Fac 5)<br/>    (Fac 10)))</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">var y = <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"br0\">{</span>g<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"br0\">{</span> f<span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span>g<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">(</span>args...<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>var fac = <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>say <span class=\"nu0\">10</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> y<span class=\"br0\">(</span>fac<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var fib = <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? n\u00a0: <span class=\"br0\">(</span>f<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>say <span class=\"nu0\">10</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> y<span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Slate", "loc": 3, "block": "<pre class=\"text highlighted_source\">Method traits define: #Y &amp;builder:<br/>  [[|\u00a0:f | [|\u00a0:x | f applyWith: (x applyWith: x)]<br/>\t   applyWith: [|\u00a0:x | f applyWith: (x applyWith: x)]]].</pre>"}, {"lang": "Smalltalk", "loc": 9, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Y</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">f</span>| <span class=\"br0\">[</span>:<span class=\"re5\">x</span>| x value: <span class=\"re5\">x</span><span class=\"br0\">]</span> value: <span class=\"br0\">[</span>:<span class=\"re5\">g</span>| f value: <span class=\"br0\">[</span>:<span class=\"re5\">x</span>| <span class=\"br0\">(</span><span class=\"re5\">g</span> value: <span class=\"re5\">g</span><span class=\"br0\">)</span> value: <span class=\"re5\">x</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">fib</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Y</span> value: <span class=\"br0\">[</span>:<span class=\"re5\">f</span>| <span class=\"br0\">[</span>:<span class=\"re5\">i</span>| i &lt;<span class=\"sy0\">=</span> <span class=\"re5\">1</span> ifTrue: <span class=\"br0\">[</span><span class=\"re5\">i</span><span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re5\">f</span> value: <span class=\"re5\">i</span>-<span class=\"re5\">1</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"re5\">f</span> value: <span class=\"re5\">i</span>-<span class=\"re5\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re5\">fib</span> value: <span class=\"re5\">10</span><span class=\"br0\">)</span> displayNl.<br/>\u00a0<br/><span class=\"re5\">fact</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Y</span> value: <span class=\"br0\">[</span>:<span class=\"re5\">f</span>| <span class=\"br0\">[</span>:<span class=\"re5\">i</span>| i <span class=\"sy0\">=</span> <span class=\"re5\">0</span> ifTrue: <span class=\"br0\">[</span><span class=\"re5\">1</span><span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re5\">f</span> value: <span class=\"re5\">i</span>-<span class=\"re5\">1</span><span class=\"br0\">)</span> * <span class=\"re5\">i</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re5\">fact</span> value: <span class=\"re5\">10</span><span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "Standard ML", "loc": 21, "block": "<pre class=\"text highlighted_source\">- datatype 'a mu = Roll of ('a mu -&gt; 'a)<br/>  fun unroll (Roll x) = x<br/>\u00a0<br/>  fun fix f = (fn x =&gt; fn a =&gt; f (unroll x x) a) (Roll (fn x =&gt; fn a =&gt; f (unroll x x) a))<br/>\u00a0<br/>  fun fac f 0 = 1<br/>    | fac f n = n * f (n-1)<br/>\u00a0<br/>  fun fib f 0 = 0<br/>    | fib f 1 = 1<br/>    | fib f n = f (n-1) + f (n-2)<br/>;<br/>datatype 'a mu = Roll of 'a mu -&gt; 'a<br/>val unroll = fn\u00a0: 'a mu -&gt; 'a mu -&gt; 'a<br/>val fix = fn\u00a0: (('a -&gt; 'b) -&gt; 'a -&gt; 'b) -&gt; 'a -&gt; 'b<br/>val fac = fn\u00a0: (int -&gt; int) -&gt; int -&gt; int<br/>val fib = fn\u00a0: (int -&gt; int) -&gt; int -&gt; int<br/>- List.tabulate (10, fix fac);<br/>val it = [1,1,2,6,24,120,720,5040,40320,362880]\u00a0: int list<br/>- List.tabulate (10, fix fib);<br/>val it = [0,1,1,2,3,5,8,13,21,34]\u00a0: int list</pre>"}, {"lang": "SuperCollider", "loc": 42, "block": "<pre class=\"text highlighted_source\">// z-combinator<br/>(<br/>z = { |f|<br/>\t{ |x| x.(x) }.(<br/>\t\t{ |y|<br/>\t\t\tf.({ |args| y.(y).(args) })<br/>\t\t}<br/>\t)<br/>};<br/>)<br/>\u00a0<br/>// the same in a shorter form<br/>\u00a0<br/>(<br/>r = { |x| x.(x) };<br/>z = { |f| r.({ |y| f.(r.(y).(_)) }) };<br/>)<br/>\u00a0<br/>\u00a0<br/>// factorial<br/>k = { |f| { |x| if(x &lt; 2, 1, { x * f.(x - 1) }) } };<br/>\u00a0<br/>g = z.(k);<br/>\u00a0<br/>g.(5) // 120<br/>\u00a0<br/>(1..10).collect(g) // [ 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800 ]<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>// fibonacci<br/>\u00a0<br/>k = { |f| { |x| if(x &lt;= 2, 1, { f.(x - 1) + f.(x - 2) }) } };<br/>\u00a0<br/>g = z.(k);<br/>\u00a0<br/>g.(3)<br/>\u00a0<br/>(1..10).collect(g) // [ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ]<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 17, "block": "<pre class=\"text highlighted_source\">struct RecursiveFunc&lt;F&gt; {<br/>  let o\u00a0: RecursiveFunc&lt;F&gt; -&gt; F<br/>}<br/>\u00a0<br/>func Y&lt;A, B&gt;(f: (A -&gt; B) -&gt; A -&gt; B) -&gt; A -&gt; B {<br/>  let r = RecursiveFunc&lt;A -&gt; B&gt; { w in f { w.o(w)($0) } }<br/>  return r.o(r)<br/>}<br/>\u00a0<br/>let fac = Y { (f: Int -&gt; Int) in<br/>  { $0 &lt;= 1\u00a0? 1\u00a0: $0 * f($0-1) }<br/>}<br/>let fib = Y { (f: Int -&gt; Int) in<br/>  { $0 &lt;= 2\u00a0? 1\u00a0: f($0-1)+f($0-2) }<br/>}<br/>println(\"fac(5) = \\(fac(5))\")<br/>println(\"fib(9) = \\(fib(9))\")</pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"text highlighted_source\">;; The Y combinator:<br/>(defun y (f) <br/>  [(op @1 @1)<br/>   (op f (op [@@1 @@1]))])<br/>\u00a0<br/>;; The Y-combinator-based factorial:<br/>(defun fac (f) <br/>  (do if (zerop @1) <br/>         1 <br/>         (* @1 [f (- @1 1)])))<br/>\u00a0<br/>;; Test:<br/>(format t \"~s\\n\" [[y fac] 4])</pre>"}, {"lang": "TXR", "loc": 13, "block": "<pre class=\"text highlighted_source\">;; The Y combinator:<br/>(defun y (f) <br/>  [(op @1 @1)<br/>   (op f (op [@@1 @@1]))])<br/>\u00a0<br/>;; The Y-combinator-based factorial:<br/>(defun fac (f) <br/>  (do if (zerop @1) <br/>         1 <br/>         (* @1 [f (- @1 1)])))<br/>\u00a0<br/>;; Test:<br/>(format t \"~s\\n\" [[y fac] 4])</pre>"}, {"lang": "Ursala", "loc": 2, "block": "<pre class=\"text highlighted_source\">(r \"f\") \"x\" = \"f\"(\"f\",\"x\")<br/>my_fix \"h\"  = r (\"f\",\"x\"). (\"h\" r \"f\") \"x\"</pre>"}, {"lang": "Verbexx", "loc": 35, "block": "<pre class=\"text highlighted_source\">/////// Y-combinator function (for single-argument lambdas) ///////<br/>\u00a0<br/>y @FN [f]<br/>{ @( x -&gt; { @f (z -&gt; {@(@x x) z}) } )   // output of this expression is treated as a verb, due to outer @(  )<br/>   ( x -&gt; { @f (z -&gt; {@(@x x) z}) } )   // this is the argument supplied to the above verb expression<br/>};<br/>\u00a0<br/>\u00a0<br/>/////// Function to generate an anonymous factorial function as the return value -- (not tail-recursive) ///////<br/>\u00a0<br/>fact_gen @FN [f]<br/>{ n -&gt; { (n&lt;=0)\u00a0? {1} {n * (@f n-1)}<br/>       }<br/>};<br/>\u00a0<br/>\u00a0<br/>/////// Function to generate an anonymous fibonacci function as the return value -- (not tail-recursive) ///////<br/>\u00a0<br/>fib_gen @FN [f]<br/>{ n -&gt; { (n&lt;=0)\u00a0? { 0                                    }<br/>                  { (n&lt;=2)\u00a0? {1} { (@f n-1) + (@f n-2) } } <br/>       }<br/>};<br/>\u00a0<br/>\u00a0<br/>/////// loops to test the above functions ///////<br/>\u00a0<br/>@VAR factorial = @y fact_gen;<br/>@VAR fibonacci = @y fib_gen;<br/>\u00a0<br/>@LOOP init:{@VAR i = -1} while:(i &lt;= 20) next:{i++}<br/>{ @SAY  i \"factorial =\" (@factorial i) };<br/>\u00a0<br/>@LOOP init:{     i = -1} while:(i &lt;= 16) next:{i++}<br/>{ @SAY \"fibonacci&lt;\" i \"&gt; =\" (@fibonacci i) };</pre>"}, {"lang": "Vim Script", "loc": 23, "block": "<pre class=\"vim highlighted_source\"><span class=\"co1\">\" Translated from Python.  Works with: Vim 7.0</span><br/>\u00a0<br/><span class=\"kw1\">func</span><span class=\"sy0\">!</span> Lambx<span class=\"br0\">(</span>sig, expr, <span class=\"kw2\">dict</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> fanon = <span class=\"br0\">{</span><span class=\"st0\">'d'</span><span class=\"sy0\">:</span> a<span class=\"sy0\">:</span><span class=\"kw2\">dict</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">exec</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"co1\">\"</span><br/>\t\\<span class=\"kw1\">func</span> fanon<span class=\"sy0\">.</span>f<span class=\"br0\">(</span><span class=\"sy0\">%</span>s<span class=\"br0\">)</span> <span class=\"kw2\">dict</span>\\n<br/>\t\\  <span class=\"kw1\">return</span> <span class=\"sy0\">%</span>s\\n<br/>\t\\endfunc<span class=\"co1\">\",</span><br/>\t\\ a<span class=\"sy0\">:</span>sig, a<span class=\"sy0\">:</span>expr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> fanon<br/>endfunc<br/>\u00a0<br/><span class=\"kw1\">func</span><span class=\"sy0\">!</span> Callx<span class=\"br0\">(</span>fanon, arglist<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">call</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span>fanon<span class=\"sy0\">.</span>f, a<span class=\"sy0\">:</span>arglist, a<span class=\"sy0\">:</span>fanon<span class=\"sy0\">.</span>d<span class=\"br0\">)</span><br/>endfunc<br/>\u00a0<br/><span class=\"kw1\">let</span> g<span class=\"sy0\">:</span>Y = Lambx<span class=\"br0\">(</span><span class=\"st0\">'f'</span>, <span class=\"st0\">'Callx(Lambx(\"x\", \"Callx(a:x, [a:x])\", {}), [Lambx(\"y\", '</span><span class=\"st0\">'Callx(self.f, [Lambx(\"...\", \"Callx(Callx(self.y, [self.y]), a:000)\", {\"y\": a:y})])'</span><span class=\"st0\">', {\"f\": a:f})])'</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> g<span class=\"sy0\">:</span>fac = Lambx<span class=\"br0\">(</span><span class=\"st0\">'f'</span>, <span class=\"st0\">'Lambx(\"n\", \"a:n&lt;2\u00a0? 1\u00a0: a:n * Callx(self.f, [a:n-1])\", {\"f\": a:f})'</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> Callx<span class=\"br0\">(</span>Callx<span class=\"br0\">(</span>g<span class=\"sy0\">:</span>Y, <span class=\"br0\">[</span>g<span class=\"sy0\">:</span>fac<span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">echo</span> <span class=\"kw1\">map</span><span class=\"br0\">(</span><span class=\"kw3\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"st0\">'Callx(Callx(Y, [fac]), [v:val])'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Wart", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Better names due to Jim Weirich: http://vimeo.com/45140590</span><br/><span class=\"kw1\">def</span> <span class=\"br0\">(</span>Y improver<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>fn<span class=\"br0\">(</span>gen<span class=\"br0\">)</span> gen.<span class=\"me1\">gen</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>fn<span class=\"br0\">(</span>gen<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>fn<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span>improver gen.<span class=\"me1\">gen</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>factorial <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span>Y <span class=\"br0\">(</span>fn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>fn<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> zero?.<span class=\"me1\">n</span><br/>                      <span class=\"nu0\">1</span><br/>                      <span class=\"br0\">(</span>n * <span class=\"br0\">(</span>f n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>prn factorial.5</pre>"}, {"lang": "XQuery", "loc": 10, "block": "<pre class=\"text highlighted_source\">let $Y\u00a0:= function($f) {  <br/>    (function($x) { ($x)($x) })( function($g) { $f( (function($a) { $g($g) ($a)})  ) } )<br/>  }<br/>let $fac\u00a0:= $Y(function($f) { function($n) { if($n &lt;  2) then 1  else $n * $f($n - 1) } })<br/>let $fib\u00a0:= $Y(function($f) { function($n) { if($n &lt;= 1) then $n else $f($n - 1) + $f($n - 2) } })<br/>return (<br/>    $fac(6),<br/>    $fib(6)<br/>)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn Y(f){ fcn(g){ g(g) }( 'wrap(h){ f( 'wrap(a){ h(h)(a) }) }) }</pre>"}]}