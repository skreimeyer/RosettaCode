{"task": "Parallel_Brute_Force", "blocks": [{"lang": "BaCon", "loc": 46, "block": "<pre class=\"qbasic highlighted_source\">PRAGMA INCLUDE <span class=\"sy0\">&lt;</span>openssl<span class=\"sy0\">/</span>sha.h<span class=\"sy0\">&gt;</span><br/>PRAGMA LDFLAGS <span class=\"sy0\">-</span>lcrypto<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckoption.shtml\"><span class=\"kw3\">OPTION</span></a> MEMTYPE unsigned char<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qcklocal.shtml\"><span class=\"kw3\">LOCAL</span></a> buffer<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> passwd<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <a href=\"http://www.qbasicnews.com/qboho/qcktype.shtml\"><span class=\"kw3\">TYPE</span></a> unsigned char<br/><a href=\"http://www.qbasicnews.com/qboho/qcklocal.shtml\"><span class=\"kw3\">LOCAL</span></a> result <a href=\"http://www.qbasicnews.com/qboho/qcktype.shtml\"><span class=\"kw3\">TYPE</span></a> unsigned char<span class=\"sy0\">*</span><br/><a href=\"http://www.qbasicnews.com/qboho/qcklocal.shtml\"><span class=\"kw3\">LOCAL</span></a> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e <a href=\"http://www.qbasicnews.com/qboho/qcktype.shtml\"><span class=\"kw3\">TYPE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><br/>\u00a0<br/><span class=\"kw1\">WHILE</span> TRUE<br/>\u00a0<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> secret$<br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>secret$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> BREAK<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">31</span><br/>        buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> DEC<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>secret$<span class=\"sy0\">,</span> i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">97</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">122</span><br/>        <span class=\"kw1\">FOR</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">97</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">122</span><br/>            <span class=\"kw1\">FOR</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">97</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">122</span><br/>                <span class=\"kw1\">FOR</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">97</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">122</span><br/>                    <span class=\"kw1\">FOR</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">97</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">122</span><br/>                        passwd<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<br/>                        passwd<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> b<br/>                        passwd<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<br/>                        passwd<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<br/>                        passwd<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<br/>\u00a0<br/>                        result <span class=\"sy0\">=</span> SHA256<span class=\"br0\">(</span>passwd<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>                        <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> SHA256_DIGEST_LENGTH<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>                            <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckpeek.shtml\"><span class=\"kw3\">PEEK</span></a><span class=\"br0\">(</span>result<span class=\"sy0\">+</span>i<span class=\"br0\">)</span>\u00a0!<span class=\"sy0\">=</span> buffer<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> BREAK<br/>                        <span class=\"kw1\">NEXT</span><br/>                        <span class=\"kw1\">IF</span> i <span class=\"sy0\">=</span> SHA256_DIGEST_LENGTH <span class=\"kw1\">THEN</span><br/>                            <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>secret$ FORMAT <span class=\"st0\">\"%c%c%c%c%c:%s\\n\"</span><br/>                            BREAK <span class=\"nu0\">5</span><br/>                        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>                    <span class=\"kw1\">NEXT</span><br/>                <span class=\"kw1\">NEXT</span><br/>            <span class=\"kw1\">NEXT</span><br/>        <span class=\"kw1\">NEXT</span><br/>    <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">WEND</span></pre>"}, {"lang": "C", "loc": 71, "block": "<pre class=\"c highlighted_source\"><span class=\"co1\">// $ gcc -o parabrutfor parabrutfor.c -fopenmp -lssl -lcrypto</span><br/><span class=\"co1\">// $ export OMP_NUM_THREADS=4</span><br/><span class=\"co1\">// $ ./parabrutfor</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;omp.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/sha.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> byte<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> matches<span class=\"br0\">(</span>byte <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> byte<span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>byte<span class=\"sy0\">*</span> StringHashToByteArray<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tbyte<span class=\"sy0\">*</span> hash <span class=\"sy0\">=</span> <span class=\"br0\">(</span>byte<span class=\"sy0\">*</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> two<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\ttwo<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttwo<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\ttwo<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\thash<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>byte<span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtol.html\"><span class=\"kw3\">strtol</span></a><span class=\"br0\">(</span>two<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> hash<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span>byte<span class=\"sy0\">*</span> password<span class=\"sy0\">,</span> byte<span class=\"sy0\">*</span> hash<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> sPass<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>sPass<span class=\"sy0\">,</span> password<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsPass<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s =&gt; \"</span><span class=\"sy0\">,</span> sPass<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> SHA256_DIGEST_LENGTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"sy0\">,</span> hash<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\u00a0<br/><span class=\"co2\">#pragma omp parallel</span><br/>\t<span class=\"br0\">{</span><br/>\u00a0<br/><span class=\"co2\">#pragma omp for</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tbyte password<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">97</span> <span class=\"sy0\">+</span> a <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\tbyte<span class=\"sy0\">*</span> one <span class=\"sy0\">=</span>   StringHashToByteArray<span class=\"br0\">(</span><span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tbyte<span class=\"sy0\">*</span> two <span class=\"sy0\">=</span>   StringHashToByteArray<span class=\"br0\">(</span><span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tbyte<span class=\"sy0\">*</span> three <span class=\"sy0\">=</span> StringHashToByteArray<span class=\"br0\">(</span><span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t\t\tbyte <span class=\"sy0\">*</span>hash <span class=\"sy0\">=</span> SHA256<span class=\"br0\">(</span>password<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches<span class=\"br0\">(</span>one<span class=\"sy0\">,</span> hash<span class=\"br0\">)</span> <span class=\"sy0\">||</span> matches<span class=\"br0\">(</span>two<span class=\"sy0\">,</span> hash<span class=\"br0\">)</span> <span class=\"sy0\">||</span> matches<span class=\"br0\">(</span>three<span class=\"sy0\">,</span> hash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t\tprintResult<span class=\"br0\">(</span>password<span class=\"sy0\">,</span> hash<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>one<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>two<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>three<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 41, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading.Tasks</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Parallel<span class=\"sy0\">.</span><span class=\"kw1\">For</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">26</span>, a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> password <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hash<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> one <span class=\"sy0\">=</span> StringHashToByteArray<span class=\"br0\">(</span><span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> two <span class=\"sy0\">=</span> StringHashToByteArray<span class=\"br0\">(</span><span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> three <span class=\"sy0\">=</span> StringHashToByteArray<span class=\"br0\">(</span><span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            password<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">97</span> <span class=\"sy0\">+</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> sha <span class=\"sy0\">=</span> <span class=\"kw5\">System.<span class=\"me1\">Security</span><span class=\"sy0\">.</span><span class=\"me1\">Cryptography</span></span><span class=\"sy0\">.</span><span class=\"me1\">SHA256</span><span class=\"sy0\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>password<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">123</span><span class=\"sy0\">;</span> password<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            hash <span class=\"sy0\">=</span> sha<span class=\"sy0\">.</span><span class=\"me1\">ComputeHash</span><span class=\"br0\">(</span>password<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>matches<span class=\"br0\">(</span>one, hash<span class=\"br0\">)</span> <span class=\"sy0\">||</span> matches<span class=\"br0\">(</span>two, hash<span class=\"br0\">)</span> <span class=\"sy0\">||</span> matches<span class=\"br0\">(</span>three, hash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Encoding<span class=\"sy0\">.</span><span class=\"me1\">ASCII</span><span class=\"sy0\">.</span><span class=\"me1\">GetString</span><span class=\"br0\">(</span>password<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" =&gt; \"</span><br/>                                    <span class=\"sy0\">+</span> BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> StringHashToByteArray<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, s<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span>Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt16</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> matches<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 81, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosetta<span class=\"sy0\">.</span>brute<span class=\"sy0\">-</span>force<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>combinatorics\u00a0:<span class=\"kw1\">refer</span> <span class=\"br0\">[</span>selections<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">;; https://github.com/clojure/math.combinatorics</span><br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">import</span>  <span class=\"br0\">[</span>java<span class=\"sy0\">.</span>util Arrays<span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span>java<span class=\"sy0\">.</span>security MessageDigest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;https://rosettacode.org/wiki/Parallel_Brute_Force</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> targets <span class=\"co1\">;; length = 5</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><br/>   <span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><br/>   <span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; HELPER/UTIL fns</span><br/><span class=\"co1\">;;=================</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> digest<br/>  <span class=\"st0\">\"Given a byte-array &lt;bs&gt; returns its hash (also a byte-array).\"</span><br/>  <span class=\"sy0\">^</span>bytes <span class=\"br0\">[</span><span class=\"sy0\">^</span>MessageDigest md <span class=\"sy0\">^</span>bytes bs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">.</span>digest md bs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> char<span class=\"sy0\">-</span><span class=\"kw1\">range</span><br/>  <span class=\"st0\">\"Helper fn for easily producing character ranges.\"</span><br/>  <span class=\"br0\">[</span>start end<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>int start<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>int end<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> low<span class=\"sy0\">-</span>case<span class=\"sy0\">-</span>eng<span class=\"sy0\">-</span>bytes<br/>  <span class=\"st0\">\"Our search-space (all lower case english characters converted to bytes).\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> byte <span class=\"br0\">(</span>char<span class=\"sy0\">-</span><span class=\"kw1\">range</span> \\a \\z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> hex<span class=\"sy0\">-&gt;</span>bytes<br/>  <span class=\"st0\">\"Converts a hex string to a byte-array.\"</span><br/>  <span class=\"sy0\">^</span>bytes <span class=\"br0\">[</span><span class=\"sy0\">^</span>String hex<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>len <span class=\"br0\">(</span><span class=\"sy0\">.</span>length hex<span class=\"br0\">)</span><br/>        ret <span class=\"br0\">(</span>byte<span class=\"sy0\">-</span>array <span class=\"br0\">(</span><span class=\"sy0\">/</span> len <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>run<span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">aset</span> ret<br/>                  <span class=\"br0\">(</span><span class=\"sy0\">/</span> i <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                  <span class=\"sy0\">^</span>byte <span class=\"br0\">(</span>unchecked<span class=\"sy0\">-</span>add<span class=\"sy0\">-</span>int<br/>                          <span class=\"br0\">(</span>bit<span class=\"sy0\">-</span>shift<span class=\"sy0\">-</span>left<br/>                            <span class=\"br0\">(</span>Character<span class=\"sy0\">/</span>digit <span class=\"br0\">(</span><span class=\"sy0\">.</span>charAt hex i<span class=\"br0\">)</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>                            <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>Character<span class=\"sy0\">/</span>digit <span class=\"br0\">(</span><span class=\"sy0\">.</span>charAt hex <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">0</span> len <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> bytes<span class=\"sy0\">-&gt;</span>hex<br/>  <span class=\"st0\">\"Converts a byte-array to a hex string.\"</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">^</span>bytes bs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">.</span>toString<br/>    <span class=\"sy0\">^</span>StringBuilder<br/>    <span class=\"br0\">(</span>areduce bs idx ret <span class=\"br0\">(</span>StringBuilder<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">doto</span> ret <span class=\"br0\">(</span><span class=\"sy0\">.</span>append <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%02x\"</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> bs idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; MAIN LOGIC</span><br/><span class=\"co1\">;;===========</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> check<span class=\"sy0\">-</span>candidate<br/>  <span class=\"st0\">\"Checks whether the SHA256 hash of &lt;candidate&gt; (a list of 5 bytes),<br/>   matches &lt;target&gt;. If it does, returns that hash as a hex-encoded String.<br/>   Otherwise returns nil.\"</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">^</span>bytes target sha256 candidate<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>candidate<span class=\"sy0\">-</span>bytes <span class=\"br0\">(</span>byte<span class=\"sy0\">-</span>array candidate<span class=\"br0\">)</span><br/>        <span class=\"sy0\">^</span>bytes candidate<span class=\"sy0\">-</span>hash <span class=\"br0\">(</span>sha256 candidate<span class=\"sy0\">-</span>bytes<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>Arrays<span class=\"sy0\">/</span>equals target candidate<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>answer <span class=\"br0\">(</span>String<span class=\"sy0\">.</span> candidate<span class=\"sy0\">-</span>bytes<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span>println <span class=\"st0\">\"Answer found for:\"</span> <span class=\"br0\">(</span>bytes<span class=\"sy0\">-&gt;</span>hex candidate<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span> <span class=\"st0\">\"=&gt;\"</span> answer<span class=\"br0\">)</span><br/>        answer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sha256<span class=\"sy0\">-</span>brute<span class=\"sy0\">-</span>force<br/>  <span class=\"st0\">\"Top level function. Returns a list with the 3 answers.\"</span><br/>  <span class=\"br0\">[</span>space hex<span class=\"sy0\">-</span>hashes<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> hex<span class=\"sy0\">-</span>hashes<br/>       <span class=\"br0\">(</span><span class=\"kw1\">map</span> hex<span class=\"sy0\">-&gt;</span>bytes<span class=\"br0\">)</span> <span class=\"co1\">;; convert the hex strings to bytes</span><br/>       <span class=\"br0\">(</span>pmap            <span class=\"co1\">;; parallel map the checker-fn</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>target<span class=\"sy0\">-</span>bytes<span class=\"br0\">]</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>message<span class=\"sy0\">-</span>digest <span class=\"br0\">(</span>MessageDigest<span class=\"sy0\">/</span>getInstance <span class=\"st0\">\"SHA-256\"</span><span class=\"br0\">)</span> <span class=\"co1\">;; new digest instance per thread</span><br/>                 sha256 <span class=\"br0\">(</span>partial digest message<span class=\"sy0\">-</span>digest<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>             <span class=\"br0\">(</span>some <span class=\"br0\">(</span>partial check<span class=\"sy0\">-</span>candidate target<span class=\"sy0\">-</span>bytes sha256<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>selections space <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 46, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defpackage #<span class=\"sy0\">:</span><span class=\"me1\">parallel-brute-force</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> #<span class=\"sy0\">:</span><span class=\"me1\">cl</span><br/>        #<span class=\"sy0\">:</span><span class=\"me1\">lparallel</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package #<span class=\"sy0\">:</span><span class=\"me1\">parallel-brute-force</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *alphabet* <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *hash0* <span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *hash1* <span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *hash2* <span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *kernel-size* <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sha-<span class=\"nu0\">256</span> <span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span><br/>   <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">digest-sequence</span> <span class=\"sy0\">:</span><span class=\"me1\">sha256</span> <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> call-with-<span class=\"nu0\">5</span>-char-string <span class=\"br0\">(</span>fun first-char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with str <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">5</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'character <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> first-char<span class=\"br0\">)</span><br/>        for c1 across *alphabet*<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>char str <span class=\"nu0\">1</span><span class=\"br0\">)</span> c1<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>loop for c2 across *alphabet*<br/>                 <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>char str <span class=\"nu0\">2</span><span class=\"br0\">)</span> c2<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>loop for c3 across *alphabet*<br/>                          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>char str <span class=\"nu0\">3</span><span class=\"br0\">)</span> c3<span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span>loop for c4 across *alphabet*<br/>                                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>char str <span class=\"nu0\">4</span><span class=\"br0\">)</span> c4<span class=\"br0\">)</span><br/>                                      <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fun <span class=\"br0\">(</span>copy-seq str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> with-<span class=\"nu0\">5</span>-char-string <span class=\"br0\">(</span><span class=\"br0\">(</span>str first-char<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span>call-with-<span class=\"nu0\">5</span>-char-string <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>str<span class=\"br0\">)</span> <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span> <span class=\"sy0\">,</span>first-char<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> find-passwords-with <span class=\"br0\">(</span>first-char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span>results<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>with-<span class=\"nu0\">5</span>-char-string <span class=\"br0\">(</span>str first-char<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">hash</span> <span class=\"br0\">(</span>sha-<span class=\"nu0\">256</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"kw1\">hash</span> *hash0*<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"kw1\">hash</span> *hash1*<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> <span class=\"kw1\">hash</span> *hash2*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>push <span class=\"br0\">(</span><span class=\"kw1\">list</span> str <span class=\"kw1\">hash</span><span class=\"br0\">)</span> results<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>nreverse results<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> find-passwords <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> *kernel* <span class=\"br0\">(</span>make-kernel *kernel-size*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>results <span class=\"br0\">(</span>unwind-protect<br/>                      <span class=\"br0\">(</span>pmapcan #'find-passwords-with *alphabet*<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>end-kernel<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>r results<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A: ~A~%\"</span> <span class=\"br0\">(</span>first r<span class=\"br0\">)</span> <span class=\"br0\">(</span>second r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 54, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">digest</span>.<span class=\"me1\">sha</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">parallelism</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Find the five lower-case letter strings representing the following sha256 hashes</span><br/><span class=\"kw4\">immutable</span> p1 <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"br0\">)</span> x<span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> p2 <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"br0\">)</span> x<span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> p3 <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"br0\">)</span> x<span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">datetime</span>.<span class=\"me1\">stopwatch</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> sw <span class=\"sy0\">=</span> StopWatch<span class=\"br0\">(</span>AutoStart.<span class=\"me1\">yes</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Switch these top loops to toggle between non-parallel and parrallel solutions.</span><br/>    <span class=\"co1\">// foreach(char a; 'a'..'z'+1) {</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> a<span class=\"sy0\">;</span> taskPool.<span class=\"me1\">parallel</span><span class=\"br0\">(</span>iota<span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'z'</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> psw<span class=\"sy0\">;</span><br/>        psw<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span> a<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> b<span class=\"sy0\">;</span> <span class=\"st0\">'a'</span><span class=\"sy0\">..</span><span class=\"st0\">'z'</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            psw<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"sy0\">;</span> <span class=\"st0\">'a'</span><span class=\"sy0\">..</span><span class=\"st0\">'z'</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                psw<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> d<span class=\"sy0\">;</span> <span class=\"st0\">'a'</span><span class=\"sy0\">..</span><span class=\"st0\">'z'</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    psw<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> e<span class=\"sy0\">;</span> <span class=\"st0\">'a'</span><span class=\"sy0\">..</span><span class=\"st0\">'z'</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        psw<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>                        <span class=\"kw4\">auto</span> hash <span class=\"sy0\">=</span> psw.<span class=\"me1\">sha256Of</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equal<span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span> <span class=\"sy0\">||</span> equal<span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span> <span class=\"sy0\">||</span> equal<span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> p3<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s &lt;=&gt;\u00a0%(%x%)\"</span><span class=\"sy0\">,</span> psw<span class=\"sy0\">,</span> hash<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    sw.<span class=\"me1\">stop</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>sw.<span class=\"me1\">peek</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//Specialization that supports static arrays too</span><br/><span class=\"kw4\">bool</span> equal<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> q.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>p.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>Nigel Galloway February 21st., 2017<br/>*)</span><br/><span class=\"kw1\">let</span> N n i g e l <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> G <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    |<span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"sy0\">-&gt;</span>Some<span class=\"br0\">(</span><span class=\"kw4\">string</span> n<span class=\"sy0\">+</span><span class=\"kw4\">string</span> i<span class=\"sy0\">+</span><span class=\"kw4\">string</span> g<span class=\"sy0\">+</span><span class=\"kw4\">string</span> e<span class=\"sy0\">+</span><span class=\"kw4\">string</span> l<span class=\"br0\">)</span><br/>    |<span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"sy0\">-&gt;</span>Some<span class=\"br0\">(</span><span class=\"kw4\">string</span> n<span class=\"sy0\">+</span><span class=\"kw4\">string</span> i<span class=\"sy0\">+</span><span class=\"kw4\">string</span> g<span class=\"sy0\">+</span><span class=\"kw4\">string</span> e<span class=\"sy0\">+</span><span class=\"kw4\">string</span> l<span class=\"br0\">)</span><br/>    |<span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"sy0\">-&gt;</span>Some<span class=\"br0\">(</span><span class=\"kw4\">string</span> n<span class=\"sy0\">+</span><span class=\"kw4\">string</span> i<span class=\"sy0\">+</span><span class=\"kw4\">string</span> g<span class=\"sy0\">+</span><span class=\"kw4\">string</span> e<span class=\"sy0\">+</span><span class=\"kw4\">string</span> l<span class=\"br0\">)</span><br/>    |_<span class=\"sy0\">-&gt;</span>None<br/>  G <span class=\"br0\">(</span><span class=\"br0\">[</span>|byte n<span class=\"sy0\">;</span>byte i<span class=\"sy0\">;</span>byte g<span class=\"sy0\">;</span>byte e<span class=\"sy0\">;</span>byte l|<span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span>System.<span class=\"me1\">Security</span>.<span class=\"me1\">Cryptography</span>.<span class=\"me1\">SHA256</span>.<span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ComputeHash</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x:<span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>System.<a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0:x2}\"</span>,x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Threading</span>.<span class=\"me1\">Tasks</span><br/><span class=\"kw1\">let</span> n1 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n2 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n3 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n4 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n5 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n6 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n7 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'m'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> n8 <span class=\"sy0\">=</span> Task.<span class=\"me1\">Factory</span>.<span class=\"me1\">StartNew</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> i<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'n'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> g<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> e<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">|&gt;</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l<span class=\"sy0\">-&gt;</span>N n i g e l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> n1.<span class=\"me1\">Result</span>@n2.<span class=\"me1\">Result</span>@n3.<span class=\"me1\">Result</span>@n4.<span class=\"me1\">Result</span>@n5.<span class=\"me1\">Result</span>@n6.<span class=\"me1\">Result</span>@n7.<span class=\"me1\">Result</span>@n8.<span class=\"me1\">Result</span> <span class=\"kw1\">do</span> printfn <span class=\"st0\">\"%s\"</span> r<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 52, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"crypto/sha256\"</span><br/>    <span class=\"st0\">\"encoding/hex\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"sync\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> hh <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>    <span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"sy1\">,</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    log<span class=\"sy3\">.</span>SetFlags<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    hd <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][</span>sha256<span class=\"sy3\">.</span>Size<span class=\"sy1\">]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>hh<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hh <span class=\"sy1\">{</span><br/>        hex<span class=\"sy3\">.</span>Decode<span class=\"sy1\">(</span>hd<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][:],</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>h<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> wg sync<span class=\"sy3\">.</span>WaitGroup<br/>    wg<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"nu0\">26</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">'a'</span><span class=\"sy1\">);</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">go</span> bf4<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> hd<span class=\"sy1\">,</span> &amp;wg<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    wg<span class=\"sy3\">.</span>Wait<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> bf4<span class=\"sy1\">(</span>c <span class=\"kw4\">byte</span><span class=\"sy1\">,</span> hd <span class=\"sy1\">[][</span>sha256<span class=\"sy3\">.</span>Size<span class=\"sy1\">]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> wg <span class=\"sy3\">*</span>sync<span class=\"sy3\">.</span>WaitGroup<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"aaaaa\"</span><span class=\"sy1\">)</span><br/>    p<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>    p1 <span class=\"sy2\">:=</span> p<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>p<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        ph <span class=\"sy2\">:=</span> sha256<span class=\"sy3\">.</span>Sum256<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> h <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hd <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> h <span class=\"sy3\">==</span> ph <span class=\"sy1\">{</span><br/>                log<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>p<span class=\"sy1\">),</span> hh<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> p1 <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> v &lt; <span class=\"st0\">'z'</span> <span class=\"sy1\">{</span><br/>                p1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>                <span class=\"kw1\">continue</span> p<br/>            <span class=\"sy1\">}</span><br/>            p1<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'a'</span><br/>        <span class=\"sy1\">}</span><br/>        wg<span class=\"sy3\">.</span>Done<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Java", "loc": 96, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">javax.xml.bind.DatatypeConverter</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.security.MessageDigest</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.security.NoSuchAlgorithmException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.ExecutorService</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.concurrent.Executors</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/**<br/> * \"Main Program\" that does the parallel processing<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ParallelBruteForce <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchalgorithmexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchAlgorithmException</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"co1\">//the hashes to be cracked</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> hashes <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span>,<br/>                <span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span>,<br/>                <span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//An ExecutorService is a high-level parallel programming facility, that can execute a number of tasks</span><br/>        <span class=\"co1\">//the FixedThreadPool is an ExecutorService that uses a configurable number of parallel threads</span><br/>        ExecutorService executorService <span class=\"sy0\">=</span> Executors.<span class=\"me1\">newFixedThreadPool</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Submit one Task per hash to the thread po</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> hash <span class=\"sy0\">:</span> hashes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            executorService.<span class=\"me1\">submit</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Forcer<span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//An ExecutorSerice must be shut down properly (this also causes the program to await termination of</span><br/>        <span class=\"co1\">// all pending tasks in the thread pool)</span><br/>        executorService.<span class=\"me1\">shutdown</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co3\">/**<br/> * The Class that contains the actual brute-forcing task.<br/> * &lt;p&gt;<br/> * It implements the build-in Interface \"Runnable\", so it can be run on a Thread or a Thread-Execution-Facility<br/> * (such as an ExecutorService).<br/> */</span><br/><span class=\"kw1\">class</span> Forcer <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> LENGTH <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//These will sore the hash to be cracked in both bytes (required for comparison) and String representation</span><br/>    <span class=\"co1\">// (required for output)</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> crackMe<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> crackMeString<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//The MessageDigest does the SHA-256 caclulation. Note that this may throw a NoSuchAlgorithmException when there</span><br/>    <span class=\"co1\">// is no SHA-256 implementation in the local standard libraries (but that algorithm is mandatory, so this code</span><br/>    <span class=\"co1\">// probably will never throw that Excpetion</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amessagedigest+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MessageDigest</span></a> digest <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amessagedigest+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MessageDigest</span></a>.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-256\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Forcer<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> crackMe<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchalgorithmexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchAlgorithmException</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">crackMeString</span> <span class=\"sy0\">=</span> crackMe<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">crackMe</span> <span class=\"sy0\">=</span> DatatypeConverter.<span class=\"me1\">parseHexBinary</span><span class=\"br0\">(</span>crackMe<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> match <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//all loops use this array for their counters. This is very dirty and should never be done in production!</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> chars <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>LENGTH<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//used for short-stopping when a match is found - one could abuse the match-variable for this, but this is</span><br/>        <span class=\"co1\">// much clearer</span><br/>        <span class=\"kw4\">boolean</span> done <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> chars<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"co1\">//the String creation is necessary to get the encoding right</span><br/>                            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> canidate <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"co1\">//genenrate SHA-256 hash using Java's standard facilities</span><br/>                            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> hash <span class=\"sy0\">=</span> digest.<span class=\"me1\">digest</span><span class=\"br0\">(</span>canidate.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>hash, crackMe<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                match <span class=\"sy0\">=</span> canidate<span class=\"sy0\">;</span><br/>                                done <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>\u00a0<br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Hash\u00a0%s has the following match\u00a0:\u00a0%s\"</span>, crackMeString, match<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">@everywhere using SHA<br/>\u00a0<br/>@everywhere function bruteForceRange(startSerial, numberToDo)<br/>  targets = [\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\",<br/>             \"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\",<br/>             \"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"]<br/>  targets = map(hex2bytes, targets)<br/>  for count = 1\u00a0: numberToDo<br/>    password = [UInt8(97 + x) for x in digits(UInt8, startSerial + count, 26, 5)]<br/>    hashbytes = sha256(password)<br/>    if (hashbytes[1] == 0x11 || hashbytes[1] == 0x3a || hashbytes[1] == 0x74) &amp;&amp; findfirst(targets, hashbytes) &gt; 0<br/>      hexstring = join(hex(x,2) for x in hashbytes)<br/>      passwordstring = join(map(Char, password))<br/>      println(\"$passwordstring --&gt; $hexstring\")<br/>    end<br/>  end<br/>  return 0<br/>end<br/>\u00a0<br/>@everywhere perThread = div(26^5, Sys.CPU_CORES)<br/>pmap(x -&gt; bruteForceRange(x * perThread, perThread), 0:Sys.CPU_CORES-1)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span><br/>\u00a0<br/>fun stringHashToByteHash<span class=\"br0\">(</span>hash<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> ByteArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ba <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">64</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span> ba<span class=\"br0\">[</span>i / <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> hash.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i, i + <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span>.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ba<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun ByteArray.<span class=\"me1\">matches</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> ByteArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> other<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> stringHashes <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span>,<br/>        <span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span>,<br/>        <span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> byteHashes <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> stringHashToByteHash<span class=\"br0\">(</span>stringHashes<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> letters <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">97</span> + it<span class=\"br0\">)</span>.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    letters.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">parallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> md <span class=\"sy0\">=</span> MessageDigest.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-256\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> range <span class=\"sy0\">=</span> <span class=\"nu0\">97</span>..<span class=\"nu0\">122</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pwd <span class=\"sy0\">=</span> ByteArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        pwd<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> it<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i1 in range<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            pwd<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i1.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i2 in range<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                pwd<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i2.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i3 in range<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    pwd<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i3.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i4 in range<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        pwd<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i4.<span class=\"me1\">toByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ba <span class=\"sy0\">=</span> md.<span class=\"me1\">digest</span><span class=\"br0\">(</span>pwd<span class=\"br0\">)</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ba.<span class=\"me1\">matches</span><span class=\"br0\">(</span>byteHashes<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>          <br/>                                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> password <span class=\"sy0\">=</span> pwd.<span class=\"me1\">toString</span><span class=\"br0\">(</span>Charsets.<span class=\"me1\">US_ASCII</span><span class=\"br0\">)</span><br/>                                println<span class=\"br0\">(</span><span class=\"st0\">\"$password =&gt; ${stringHashes[j]}\"</span><span class=\"br0\">)</span><br/>                                break<br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 11, "block": "<pre class=\"text highlighted_source\">testPassword[pass_String]\u00a0:= <br/> If[MemberQ[{16^^1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad,<br/>    16^^3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b,<br/>    16^^74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f},<br/>   Hash[pass, \"SHA256\"]], Print[pass]];<br/>\u00a0<br/>chars=CharacterRange[\"a\",\"z\"];<br/>\u00a0<br/>ParallelDo[<br/>    testPassword[StringJoin[a, b, c, d, e]],<br/> {a, chars}, {b, chars}, {c, chars}, {d, chars}, {e, chars}]</pre>"}, {"lang": "Perl", "loc": 28, "block": "<pre class=\"text highlighted_source\">use Digest::SHA qw/sha256_hex/;<br/>use threads;<br/>use threads::shared;<br/>my @results\u00a0:shared;<br/>\u00a0<br/>print \"$_\u00a0: \",join(\" \",search($_)), \"\\n\" for (qw/<br/>  1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad<br/>  3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b<br/>  74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f<br/>/);<br/>\u00a0<br/>\u00a0<br/>sub search {<br/>  my $hash = shift;<br/>  @results = ();<br/>  $_-&gt;join() for map { threads-&gt;create('tsearch', $_, $hash) } 0..25;<br/>  return @results;<br/>}<br/>\u00a0<br/>sub tsearch {<br/>  my($tnum, $hash) = @_;<br/>  my $s = chr(ord(\"a\")+$tnum) . \"aaaa\";<br/>\u00a0<br/>  for (1..456976) { # 26^4<br/>    push @results, $s if sha256_hex($s) eq $hash;<br/>    $s++;<br/>  }<br/>}</pre>"}, {"lang": "Perl 6", "loc": 18, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">SHA</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@alpha2</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>a   m p y z<span class=\"sy0\">&gt;</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">@alpha3</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>e l m p <span class=\"kw1\">x</span> z<span class=\"sy0\">&gt;</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%WANTED</span> <span class=\"sy0\">=</span> set <span class=\"sy0\">&lt;</span><br/>    3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b<br/>    74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f<br/>    1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad<br/><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> find_it <span class=\"br0\">(</span> <span class=\"re0\">$first_two</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">$first_two</span> \u00ab<span class=\"sy0\">~</span>\u00ab\u00a0<span class=\"re0\">@alpha3</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$password</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$digest_hex</span> <span class=\"sy0\">=</span> sha256<span class=\"br0\">(</span><span class=\"re0\">$password</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'%02x'</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        take <span class=\"st0\">\"$password =&gt; $digest_hex\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">%WANTED</span><span class=\"br0\">{</span><span class=\"re0\">$digest_hex</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> flat <span class=\"re0\">@alpha2</span><span class=\"sy0\">.</span><span class=\"me1\">race</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;find_it</span><span class=\"sy0\">.</span><span class=\"me1\">cache</span><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 29, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> multiprocessing<br/><span class=\"kw1\">from</span> hashlib <span class=\"kw1\">import</span> sha256<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> HashFromSerial<span class=\"br0\">(</span>serial<span class=\"br0\">)</span>:<br/>    divisor <span class=\"sy0\">=</span> <span class=\"nu0\">456976</span><br/>    letters <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>        letter<span class=\"sy0\">,</span> serial <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>serial<span class=\"sy0\">,</span> divisor<span class=\"br0\">)</span><br/>        letters.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"nu0\">97</span> + <span class=\"kw2\">int</span><span class=\"br0\">(</span>letter<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        divisor /<span class=\"sy0\">=</span> <span class=\"nu0\">26</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>letters<span class=\"sy0\">,</span> sha256<span class=\"br0\">(</span><span class=\"kw3\">bytes</span><span class=\"br0\">(</span>letters<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">digest</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    h1 <span class=\"sy0\">=</span> <span class=\"kw3\">bytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">fromhex</span><span class=\"br0\">(</span><span class=\"st0\">\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"</span><span class=\"br0\">)</span><br/>    h2 <span class=\"sy0\">=</span> <span class=\"kw3\">bytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">fromhex</span><span class=\"br0\">(</span><span class=\"st0\">\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"</span><span class=\"br0\">)</span><br/>    h3 <span class=\"sy0\">=</span> <span class=\"kw3\">bytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">fromhex</span><span class=\"br0\">(</span><span class=\"st0\">\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"</span><span class=\"br0\">)</span><br/>    numpasswords <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"nu0\">26</span> ** <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    chunksize <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>numpasswords / multiprocessing.<span class=\"me1\">cpu_count</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">with</span> multiprocessing.<span class=\"me1\">Pool</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> p:<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>letters<span class=\"sy0\">,</span> digest<span class=\"br0\">)</span> <span class=\"kw1\">in</span> p.<span class=\"me1\">imap_unordered</span><span class=\"br0\">(</span>HashFromSerial<span class=\"sy0\">,</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>numpasswords<span class=\"br0\">)</span><span class=\"sy0\">,</span> chunksize<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> digest <span class=\"sy0\">==</span> h1 <span class=\"kw1\">or</span> digest <span class=\"sy0\">==</span> h2 <span class=\"kw1\">or</span> digest <span class=\"sy0\">==</span> h3:<br/>                password <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> letters<span class=\"br0\">)</span><br/>                <span class=\"kw1\">print</span><span class=\"br0\">(</span>password + <span class=\"st0\">\" =&gt; \"</span> + digest.<span class=\"kw2\">hex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 99, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require racket/place<br/>         racket/list<br/>         racket/match<br/>        \u00a0;; requires sha package. install it in DrRacket's \"File/Install Package...\"<br/>        \u00a0;; or with raco:<br/>        \u00a0;;\u00a0% raco pkg install sha<br/>         sha<br/>         (only-in openssl/sha1 hex-string-&gt;bytes))<br/>\u00a0<br/>(define (brute css targs)<br/>  (define (sub-work i) (let ((cs (list-ref css i))) (in-range (car cs) (cdr cs))))<br/>  (define-values (as bs cs ds es) (apply values (map sub-work (range 5))))<br/>  (define s (make-bytes 5))<br/>  (for*/list ((a as) #:when (bytes-set! s 0 a)<br/>                     (b bs) #:when (bytes-set! s 1 b)<br/>                     (c cs) #:when (bytes-set! s 2 c)<br/>                     (d ds) #:when (bytes-set! s 3 d)<br/>                     (e es) #:when (bytes-set! s 4 e)<br/>                     (h (in-value (sha256 s)))<br/>                     (t (in-list targs))<br/>                     #:when (bytes=? t h))<br/>    (eprintf \"found ~s -&gt; ~s~%\" t s)<br/>    (cons (bytes-copy s) t)))<br/>\u00a0<br/>;; ---------------------------------------------------------------------------------------------------<br/>(unless (place-enabled?) (error \"We're using places... they're not enabled!\"))<br/>\u00a0<br/>(define target-list<br/>  (map hex-string-&gt;bytes<br/>       (list \"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"<br/>             \"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"<br/>             \"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\")))<br/>\u00a0<br/>(define (run-place/assign-task sub-task)<br/>  (define there (place here<br/>                       (match-define (cons work targs) (place-channel-get here))<br/>                       (place-channel-put here (brute work targs))))<br/>  (place-channel-put there (cons sub-task target-list))<br/>  there)<br/>\u00a0<br/>(define (task-&gt;subtasks css n-tasks)<br/>  (match css<br/>    [(list (and initial-range (cons A Z+)) common-tail ...)<br/>     (define step (quotient (+ n-tasks (- Z+ A)) n-tasks))<br/>     (for/list ((a (in-range A Z+ step)))<br/>      \u00a0;; replace the head with a sub-task head<br/>       (cons (cons a (min (+ a step) Z+)) common-tail))]))<br/>\u00a0<br/>(define readable-pair (match-lambda [(cons x (app bytes-&gt;hex-string s)) (cons x s)]))<br/>\u00a0<br/>(define (parallel-brute css (n-tasks (processor-count)))<br/>  (define the-places (map run-place/assign-task (task-&gt;subtasks css n-tasks)))<br/>  (define collected-results (append* (map place-channel-get the-places)))<br/>  (map readable-pair collected-results))<br/>\u00a0<br/>(define 5-char-lowercase-work<br/>  (make-list 5 (cons (char-&gt;integer #\\a) (add1 (char-&gt;integer #\\z)))))<br/>\u00a0<br/>;; ---------------------------------------------------------------------------------------------------<br/>(module+ main<br/>  (time (parallel-brute 5-char-lowercase-work)))<br/>\u00a0<br/>;; ---------------------------------------------------------------------------------------------------<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal?<br/>   (bytes-&gt;hex-string (sha256 #\"mmmmm\"))<br/>   \"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"<br/>   \"SHA-256 works as expected\")<br/>\u00a0<br/>  (check-equal?<br/>   (hex-string-&gt;bytes \"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\")<br/>   #\"t\\341\\273b\\370\\332\\273\\201%\\245\\210R\\266;\\337n\\256\\366g\\313V\\254\\177|\\333\\246\\3270\\\\P\\242/\"<br/>   \"This is the raw value we'll be hashing to\")<br/>\u00a0<br/>  (define m-idx (char-&gt;integer #\\m))<br/>  (define m-idx+ (add1 m-idx))<br/>  (check-equal?<br/>   (brute (make-list 5 (cons m-idx m-idx+)) target-list)<br/>   (list<br/>    (cons<br/>     #\"mmmmm\"<br/>     #\"t\\341\\273b\\370\\332\\273\\201%\\245\\210R\\266;\\337n\\256\\366g\\313V\\254\\177|\\333\\246\\3270\\\\P\\242/\")))<br/>\u00a0<br/> \u00a0;; Brute works without parallelism<br/> \u00a0;; check when you have the time... it takes a minute (literally)<br/>  (check-equal?<br/>   (time<br/>    (brute 5-char-lowercase-work target-list))<br/>   '((#\"apple\"<br/>      . #\":{\\323\\3426\\n=)\\356\\2446\\374\\373~D\\3075\\321\\27\\304-\\34\\0305B\\vk\\231B\\335O\\e\")<br/>     (#\"mmmmm\"<br/>      .<br/>      #\"t\\341\\273b\\370\\332\\273\\201%\\245\\210R\\266;\\337n\\256\\366g\\313V\\254\\177|\\333\\246\\3270\\\\P\\242/\")<br/>     (#\"zyzzx\"<br/>      .<br/>      #\"\\21\\25\\335\\200\\17\\352\\254\\357\\337H\\37\\37\\220p7J*\\201\\342x\\200\\361\\2079m\\266yX\\262\\a\\313\\255\"))<br/>   \"without parallelism, it works\"))</pre>"}, {"lang": "Rust", "loc": 120, "block": "<pre class=\"text highlighted_source\">// [dependencies]<br/>// rust-crypto = \"0.2.36\"<br/>// num_cpus = \"1.7.0\"<br/>// hex = \"0.2.0\"<br/>\u00a0<br/>extern crate crypto;<br/>extern crate num_cpus;<br/>extern crate hex;<br/>\u00a0<br/>use std::thread;<br/>use std::cmp::min;<br/>use crypto::sha2::Sha256;<br/>use crypto::digest::Digest;<br/>use hex::{FromHex, ToHex};<br/>\u00a0<br/>fn main() {<br/>    let hashes = vec![<br/>        decode(\"1115dd800feaacefdf481f1f9070374a2a81e27880f187396db67958b207cbad\"),<br/>        decode(\"3a7bd3e2360a3d29eea436fcfb7e44c735d117c42d1c1835420b6b9942dd4f1b\"),<br/>        decode(\"74e1bb62f8dabb8125a58852b63bdf6eaef667cb56ac7f7cdba6d7305c50a22f\"),<br/>    ];<br/>\u00a0<br/>    let mut threads = Vec::new();<br/>    let mut ranges = distribute_work();<br/>\u00a0<br/>    while let Some(range) = ranges.pop() {<br/>        let hashes = hashes.clone();<br/>        threads.push(thread::spawn(<br/>            move || search(range.0, range.1, hashes.clone()),<br/>        ));<br/>    }<br/>\u00a0<br/>    while let Some(t) = threads.pop() {<br/>        t.join().ok();<br/>    }<br/>}<br/>\u00a0<br/>fn search(from: [u8; 5], to: [u8; 5], hashes: Vec&lt;[u8; 256 / 8]&gt;) {<br/>\u00a0<br/>    let mut password = from.clone();<br/>\u00a0<br/>    while password &lt;= to {<br/>        let mut sha256 = Sha256::new();<br/>        sha256.input(&amp;password);<br/>        let mut result = [0u8; 256 / 8];<br/>        sha256.result(&amp;mut result);<br/>\u00a0<br/>        for hash in hashes.iter() {<br/>            if *hash == result {<br/>                println!(<br/>                    \"{}{}{}{}{} {}\",<br/>                    password[0] as char,<br/>                    password[1] as char,<br/>                    password[2] as char,<br/>                    password[3] as char,<br/>                    password[4] as char,<br/>                    hash.to_hex()<br/>                );<br/>            }<br/>        }<br/>\u00a0<br/>        password = next(&amp;password);<br/>    }<br/>\u00a0<br/>}<br/>\u00a0<br/>fn next(password: &amp;[u8; 5]) -&gt; [u8; 5] {<br/>    let mut result = password.clone();<br/>    for i in (0..result.len()).rev() {<br/>        if result[i] == b'z' {<br/>            if i == 0 {<br/>                result[i] = b'z' + 1;<br/>            } else {<br/>                result[i] = b'a';<br/>            }<br/>        } else {<br/>            result[i] += 1;<br/>            break;<br/>        }<br/>    }<br/>    result.clone()<br/>}<br/>\u00a0<br/>fn distribute_work() -&gt; Vec&lt;([u8; 5], [u8; 5])&gt; {<br/>    let mut ranges = Vec::new();<br/>    let num_cpus = min(num_cpus::get(), 26) as u8;<br/>\u00a0<br/>    let div = 25 / num_cpus;<br/>    let mut remainder = 25\u00a0% num_cpus;<br/>    let mut from = b'a';<br/>    while from &lt; b'z' {<br/>\u00a0<br/>        let to = from + div +<br/>            if remainder &gt; 0 {<br/>                remainder -= 1;<br/>                1<br/>            } else {<br/>                0<br/>            };<br/>\u00a0<br/>        ranges.push((<br/>            [from, from, from, from, from + 1].clone(),<br/>            [to, to, to, to, to].clone(),<br/>        ));<br/>\u00a0<br/>        from = to;<br/>    }<br/>    ranges[0].0[4] = b'a';<br/>\u00a0<br/>    ranges.clone()<br/>}<br/>\u00a0<br/>fn decode(string: &amp;str) -&gt; [u8; 256 / 8] {<br/>    let mut result = [0; 256 / 8];<br/>    let vec = Vec::from_hex(string).unwrap();<br/>    for i in 0..result.len() {<br/>        result[i] = vec[i];<br/>    }<br/>    result.clone()<br/>}</pre>"}, {"lang": "zkl", "loc": 21, "block": "<pre class=\"text highlighted_source\">var [const] MsgHash=Import.lib(\"zklMsgHash\");<br/>var [const] gotEm=Atomic.Int();\t// global signal for all threads<br/>\u00a0<br/>const THREADS=9,   // how we will split task, THREADS&lt;=26<br/>      CHR_a=\"a\".toAsc();<br/>\u00a0<br/>fcn crack(c,n,hashes){\t// thread<br/>   sha256:=MsgHash.SHA256; // the SHA-256 hash method, byte bucket<br/>   bytes,hash\u00a0:= Data(),Data().howza(0); // byte buckets to reduce garbage production<br/>   firstLtrs:=(c+CHR_a).walker(n);<br/>   ltrs:=CHR_a.walker;\t// iterator starting at 97/\"a\"<br/>   foreach a,b,c,d,e in (firstLtrs,ltrs(26),ltrs(26),ltrs(26),ltrs(26)){ <br/>      if(not hashes2go) return(); // all cracked, stop, not really needed<br/>      bytes.clear(a,b,c,d,e);     // recycle Data, faster than creating Strings<br/>      sha256(bytes,1,hash);\t  // put hash in hash<br/>      if(hashes.holds(hash)){<br/>         println(bytes.text,\" --&gt; \",hash.pump(String,\"%02x\".fmt));<br/>\t hashes2go.dec();\t// I cracked one, let mom thread know<br/>      }<br/>   }<br/>}</pre>"}]}