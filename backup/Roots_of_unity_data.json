{"task": "Roots_of_unity", "blocks": [{"lang": "Ada", "loc": 34, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                 <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Float_Text_IO</span>;           <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Float_Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Complex_Types</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Complex_Types</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Roots_Of_Unity <span class=\"kw1\">is</span><br/>   Root\u00a0: Complex;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">2</span>..<span class=\"nu0\">10</span> <span class=\"kw1\">loop</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"N =\"</span> &amp; Integer'Image <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> K <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">N</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         Root\u00a0:=<br/>             Compose_From_Polar<br/>             <span class=\"br0\">(</span>  Modulus  =&gt; <span class=\"nu0\">1.0</span>,<br/>                Argument =&gt; Float <span class=\"br0\">(</span>K<span class=\"br0\">)</span>,<br/>                Cycle    =&gt; Float <span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>             <span class=\"br0\">)</span>;<br/>            <span class=\"co1\">-- Output</span><br/>         Put <span class=\"br0\">(</span><span class=\"st0\">\"   k =\"</span> &amp; Integer'Image <span class=\"br0\">(</span>K<span class=\"br0\">)</span> &amp; <span class=\"st0\">\", \"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Re <span class=\"br0\">(</span>Root<span class=\"br0\">)</span> &lt; <span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span><br/>            Put <span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Put <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Put <span class=\"br0\">(</span><span class=\"kw2\">abs</span> Re <span class=\"br0\">(</span>Root<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">1</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Im <span class=\"br0\">(</span>Root<span class=\"br0\">)</span> &lt; <span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span><br/>            Put <span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Put <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Put <span class=\"br0\">(</span><span class=\"kw2\">abs</span> Im <span class=\"br0\">(</span>Root<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">1</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"i\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Roots_Of_Unity;</pre>"}, {"lang": "ALGOL 68", "loc": 8, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw6\">FORMAT</span> complex fmt<span class=\"sy1\">=</span>$g<span class=\"br0\">(</span><span class=\"sy1\">-</span>6<span class=\"sy1\">,</span>4<span class=\"br0\">)</span><span class=\"st0\">\"\u22a5\"</span>g<span class=\"br0\">(</span><span class=\"sy1\">-</span>6<span class=\"sy1\">,</span>4<span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> root <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>4<span class=\"br0\">)</span>$<span class=\"sy1\">,</span>root<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> root<span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$xf<span class=\"br0\">(</span>complex fmt<span class=\"br0\">)</span>$<span class=\"sy1\">,</span>complex <span class=\"kw24\">exp</span><span class=\"br0\">(</span> 0 <span class=\"kw10\">I</span> 2<span class=\"sy1\">*</span><span class=\"kw23\">pi</span><span class=\"sy1\">*</span>n<span class=\"sy1\">/</span>root<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span>$l$<span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">:=</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> a <span class=\"sy0\">:=</span> <span class=\"nu0\">8</span><span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">atan</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span><br/>   i <span class=\"sy0\">:=</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> t <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">cos</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sin</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">*</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\" - i*\"</span> <span class=\"sy0\">.</span> <span class=\"sy0\">-</span>s\u00a0: <span class=\"st0\">\" + i*\"</span> <span class=\"sy0\">.</span> s<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% t</pre>"}, {"lang": "AWK", "loc": 17, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f ROOTS_OF_UNITY.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    pi = <span class=\"nu0\">3.1415926</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n=<span class=\"nu0\">2</span>; n<span class=\"sy2\">&lt;=</span><span class=\"nu0\">5</span>; n<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d: \"</span>,n<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>root=<span class=\"nu0\">0</span>; root<span class=\"sy2\">&lt;=</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span>; root<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        real = <span class=\"kw4\">cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> pi <span class=\"sy3\">*</span> root <span class=\"sy3\">/</span> n<span class=\"br0\">)</span><br/>        imag = <span class=\"kw4\">sin</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> pi <span class=\"sy3\">*</span> root <span class=\"sy3\">/</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%8.5f\u00a0%8.5fi\"</span>,real,imag<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>root <span class=\"sy2\">!=</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"qbasic highlighted_source\"> <a href=\"http://www.qbasicnews.com/qboho/qckcls.shtml\"><span class=\"kw3\">CLS</span></a><br/> PI <span class=\"sy0\">=</span> <span class=\"nu0\">3.1415926</span>#<br/> n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"co1\">'this can be changed for any desired n</span><br/> angle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">'start at angle 0</span><br/> <span class=\"kw1\">DO</span><br/> \treal <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckcos.shtml\"><span class=\"kw3\">COS</span></a><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"co1\">'real axis is the x axis</span><br/> \t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>real<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> real <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">'get rid of annoying sci notation</span><br/> \timag <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcksin.shtml\"><span class=\"kw3\">SIN</span></a><span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"co1\">'imaginary axis is the y axis</span><br/> \t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>imag<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> imag <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">'get rid of annoying sci notation</span><br/> \t<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> real; <span class=\"st0\">\"+\"</span>; imag; <span class=\"st0\">\"i\"</span> <span class=\"co1\">'answer on every line</span><br/> \tangle <span class=\"sy0\">=</span> angle <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> PI<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/> <span class=\"co1\">'all the way around the circle at even intervals</span><br/> <span class=\"kw1\">LOOP</span> <span class=\"kw1\">WHILE</span> angle <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> PI</pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      @% = &amp;20408<br/>      FOR n% = 2 TO 5<br/>        PRINT STR$(n%) \": \"\u00a0;<br/>        FOR root% = 0 TO n%-1<br/>          real = COS(2*PI * root% / n%)<br/>          imag = SIN(2*PI * root% / n%)<br/>          PRINT real imag \"i\"\u00a0;<br/>          IF root% &lt;&gt; n%-1 PRINT \",\"\u00a0;<br/>        NEXT<br/>        PRINT<br/>      NEXT n%</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> a<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> PI2 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html\"><span class=\"kw3\">atan2</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tc <span class=\"sy0\">=</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>i <span class=\"br0\">)</span>\t\tc <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span>\ts <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span>\tc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span>\ts <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\ta <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> PI2 <span class=\"sy0\">/</span> n<span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%.2g\"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"i\"</span> <span class=\"sy0\">:</span> s <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"-i\"</span> <span class=\"sy0\">:</span> s <span class=\"sy0\">?</span> <span class=\"st0\">\"%+.2gi\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">:</span><span class=\"st0\">\",  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>Complex<span class=\"sy0\">&gt;</span> RootsOfUnity<span class=\"br0\">(</span><span class=\"kw4\">int</span> degree<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Enumerable<br/>            <span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, degree<span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>element <span class=\"sy0\">=&gt;</span> Complex<span class=\"sy0\">.</span><span class=\"me1\">FromPolarCoordinates</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">*</span> element <span class=\"sy0\">/</span> degree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> degree <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> root <span class=\"kw1\">in</span> RootsOfUnity<span class=\"br0\">(</span>degree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>root<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;complex&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> <span class=\"kw4\">const</span> pi <span class=\"sy1\">=</span> <span class=\"nu0\">4</span> <span class=\"sy2\">*</span> std<span class=\"sy4\">::</span><span class=\"kw3\">atan</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>k<span class=\"br0\">)</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">polar</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"sy2\">*</span>pi<span class=\"sy2\">*</span>k<span class=\"sy2\">/</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CoffeeScript", "loc": 28, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Find the n nth-roots of 1</span><br/>nth_roots_of_unity = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">(</span>complex_unit_vector<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>Math.<span class=\"me1\">PI</span><span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>complex_unit_vector = <span class=\"br0\">(</span>rad<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw3\">new</span> Complex<span class=\"br0\">(</span>Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span><span class=\"sy0\">,</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">class</span> Complex<br/>  constructor<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>real<span class=\"sy0\">,</span> <span class=\"sy0\">@</span>imag<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  toString<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    round_z = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.00005</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> n<br/>    fmt = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> n.<span class=\"me1\">toFixed</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    real = round_z <span class=\"sy0\">@</span>real<br/>    imag = round_z <span class=\"sy0\">@</span>imag<br/>    s = <span class=\"st0\">''</span><br/>    <span class=\"kw1\">if</span> real <span class=\"kw2\">and</span> imag<br/>      <span class=\"st0\">\"#{fmt real}+#{fmt imag}i\"</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> real <span class=\"kw2\">or</span> <span class=\"sy0\">!</span>imag<br/>      <span class=\"st0\">\"#{fmt real}\"</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"st0\">\"#{fmt imag}i\"</span><br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"---1 to the 1/#{n}\"</span><br/>    <span class=\"kw1\">for</span> root <span class=\"kw1\">in</span> nth_roots_of_unity n<br/>      console.<span class=\"me1\">log</span> root.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> roots-of-unity <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/> <span class=\"br0\">(</span>loop for i below n<br/>       collect <span class=\"br0\">(</span>cis <span class=\"br0\">(</span>* pi <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> i<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 11, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">:</span> PI<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> nthRoots<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>k <span class=\"sy0\">=&gt;</span> expi<span class=\"br0\">(</span>PI <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"#%d: [%(%5.2f,\u00a0%)]\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i.<span class=\"me1\">nthRoots</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 13, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>roots<span class=\"sy0\">-</span><span class=\"nu0\">1</span> n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">define</span> theta <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> PI<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>polar <span class=\"nu0\">1</span>. <span class=\"br0\">(</span><span class=\"sy0\">*</span> theta i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>roots<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>0i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>0i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>roots<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>0i <span class=\"sy0\">-</span><span class=\"nu0\">0.4999999999999998</span><span class=\"sy0\">+</span>0.8660254037844388i <span class=\"sy0\">-</span><span class=\"nu0\">0.5000000000000004</span><span class=\"sy0\">-</span>0.8660254037844384i<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>roots<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">0</span><span class=\"sy0\">+</span>i <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">0</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM UNITY_ROOTS<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>BEGIN<br/>   PRINT(CHR$(12);)\u00a0!CLS<br/>   N=5                                      \u00a0! this can be changed for any desired n<br/>   ANGLE=0                                  \u00a0! start at ANGLE 0<br/>   REPEAT<br/>     REAL=COS(ANGLE)                        \u00a0! real axis is the x axis<br/>     IF (ABS(REAL)&lt;10^-5) THEN REAL=0 END IF\u00a0! get rid of annoying sci notation<br/>     IMAG=SIN(ANGLE)                        \u00a0! imaginary axis is the y axis<br/>     IF (ABS(IMAG)&lt;10^-5) THEN IMAG=0 END IF\u00a0! get rid of annoying sci notation<br/>     PRINT(REAL;\"+\";IMAG;\"i\")               \u00a0! answer on every line<br/>     ANGLE+=(2*\u03c0)/N<br/>                                            \u00a0! all the way around the circle at even intervals<br/>   UNTIL ANGLE&gt;=2*\u03c0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: f0. ( f -- )<br/>  fdup 0e 0.001e f~ if fdrop 0e then f.\u00a0;<br/>: .roots ( n -- )<br/>  dup 1 do<br/>    pi i 2* 0 d&gt;f f* dup 0 d&gt;f f/          ( F: radians )<br/>    fsincos cr .\" real \" f0. .\" imag \" f0.<br/>  loop drop\u00a0;<br/>\u00a0<br/>3 set-precision<br/>5 .roots</pre>"}, {"lang": "Fortran", "loc": 19, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> Roots<br/>\u00a0<br/>  <span class=\"kw3\">COMPLEX</span> <span class=\"sy0\">::</span> <span class=\"me2\">root</span> <br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">angle</span>, pi<br/>\u00a0<br/>  pi <span class=\"sy0\">=</span> <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> <span class=\"kw4\">ATAN</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">DO</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">7</span><br/>    angle <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(I1,A)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> n,<span class=\"st0\">\": \"</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>      root <span class=\"sy0\">=</span> <span class=\"kw4\">CMPLX</span><span class=\"br0\">(</span><span class=\"kw4\">COS</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span>, <span class=\"kw4\">SIN</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(SP,2F7.4,A)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> root, <span class=\"st0\">\"j  \"</span><br/>      angle <span class=\"sy0\">=</span> angle <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"sy0\">*</span>pi <span class=\"sy0\">/</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> Roots</pre>"}, {"lang": "FunL", "loc": 5, "block": "<pre class=\"text highlighted_source\">import math.{exp, Pi}<br/>\u00a0<br/>def rootsOfUnity( n ) = {exp( 2Pi i k/n ) | k &lt;- 0:n}<br/>\u00a0<br/>println( rootsOfUnity(3) )</pre>"}, {"lang": "FutureBasic", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as long n, root<br/>dim as double real, imag<br/>\u00a0<br/>for n = 2 to 7<br/>print n;\":\"\u00a0;<br/>for root = 0 to n-1<br/>real = cos( 2 * pi * root / n)<br/>imag = sin( 2 * pi * root / n)<br/>print using \"-##.#####\"; real;using \"-##.#####\"; imag; \"i\";<br/>if root &lt;&gt; n-1 then print \",\";<br/>next<br/>print<br/>next <br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 7, "block": "<pre class=\"text highlighted_source\">roots\u00a0:= n -&gt; List([0 .. n-1], k -&gt; E(n)^k);<br/>\u00a0<br/>r:=roots(7);<br/># [ 1, E(7), E(7)^2, E(7)^3, E(7)^4, E(7)^5, E(7)^6 ]<br/>\u00a0<br/>List(r, x -&gt; x^7);<br/># [ 1, 1, 1, 1, 1, 1, 1 ]</pre>"}, {"lang": "Go", "loc": 24, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/cmplx\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d roots of 1:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> roots<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\" \u00a0%18.15f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> roots<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">complex128</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">cmplx</span><span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">*</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><span class=\"coMULTI\">/** The following closure creates a list of n evenly-spaced points around the unit circle,<br/>  * useful in FFT calculations, among other things */</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rootsOfUnity <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span><br/>        Complex.<span class=\"me1\">fromPolar</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">*</span> it / n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex <span class=\"br0\">(</span>Complex<span class=\"sy0\">,</span> cis<span class=\"br0\">)</span><br/>\u00a0<br/>rootsOfUnity <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Complex a<span class=\"br0\">]</span><br/>rootsOfUnity n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> cis <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">*</span> k <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> k <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> rootsOfUnity <span class=\"nu0\">3</span></pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   roots<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> roots<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>n <span class=\"sy1\">|</span> <span class=\"br0\">(</span>str_rep<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">pi</span> <span class=\"sy1\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> str_rep<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"+\"</span> <span class=\"sy1\">||</span> sin<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"i\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 2, "block": "<pre class=\"idl highlighted_source\">n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>print,  exp<span class=\"br0\">(</span> dcomplex<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"sy0\">*!</span>dpi<span class=\"sy0\">/</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> indgen<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   rou=: [: ^ <span class=\"nu0\">0j2p1</span> * i.\u00a0% ]<br/>\u00a0<br/>   rou <span class=\"nu0\">4</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0j1</span> <span class=\"nu0\">_1</span> <span class=\"nu0\">0j_1</span><br/>\u00a0<br/>   rou <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0.309017j0.951057</span> <span class=\"nu0\">_0.809017j0.587785</span> <span class=\"nu0\">_0.809017j_0.587785</span> <span class=\"nu0\">0.309017j_0.951057</span></pre>"}, {"lang": "Java", "loc": 29, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Locale</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            unity<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> unity<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%n%d: \"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//all the way around the circle at even intervals</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> angle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> angle <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span><span class=\"sy0\">;</span> angle <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">double</span> real <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//real axis is the x axis</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>real<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> 1.0E<span class=\"sy0\">-</span>3<span class=\"br0\">)</span><br/>                real <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span> <span class=\"co1\">//get rid of annoying sci notation</span><br/>\u00a0<br/>            <span class=\"kw4\">double</span> imag <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//imaginary axis is the y axis</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>imag<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> 1.0E<span class=\"sy0\">-</span>3<span class=\"br0\">)</span><br/>                imag <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alocale+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Locale</span></a>.<span class=\"me1\">US</span>, <span class=\"st0\">\"(%9f,%9f) \"</span>, real, imag<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> Root<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\twith <span class=\"br0\">(</span><span class=\"kw4\">Math</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> cos<span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">i</span> <span class=\"sy0\">=</span> sin<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Root.<span class=\"kw1\">prototype</span>.<span class=\"me1\">toFixed</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span>.<span class=\"me1\">toFixed</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">i</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">i</span>.<span class=\"me1\">toFixed</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'i'</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> roots<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> rs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> teta <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span><span class=\"sy0\">/</span>n<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> angle<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> angle<span class=\"sy0\">+=</span>teta<span class=\"sy0\">,</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> rs.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"kw1\">new</span> Root<span class=\"br0\">(</span>angle<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> rs<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span> n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tdocument.<span class=\"me1\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">': '</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">var</span> rs<span class=\"sy0\">=</span>roots<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>rs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> document.<span class=\"me1\">write</span><span class=\"br0\">(</span> i <span class=\"sy0\">?</span> <span class=\"st0\">', '</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> rs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toFixed</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\tdocument.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">def nthroots(n):<br/>  (8 * (1|atan)) as $twopi<br/>  | range(0;n) | (($twopi * .) / n) as $angle | [ ($angle | cos), ($angle | sin) ];<br/>\u00a0<br/>nthroots(10)</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">nthroots(n::Integer) = [ cospi(2k/n)+sinpi(2k/n)im for k = 0:n-1 ]</pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Math</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> i<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>        i <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span> -<span class=\"sy0\">&gt;</span> r.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        r <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span> -<span class=\"sy0\">&gt;</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">'i'</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"$r + ${i}i\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun unity<span class=\"sy0\">_</span>roots<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Number<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> it <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> PI / n.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r <span class=\"sy0\">=</span> cos<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> 1e-6<span class=\"br0\">)</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> sin<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> 1e-6<span class=\"br0\">)</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    Complex<span class=\"br0\">(</span>r, i<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + unity<span class=\"sy0\">_</span>roots<span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + unity<span class=\"sy0\">_</span>roots<span class=\"br0\">(</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 54, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span><span class=\"nu0\">400</span><br/><span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span><span class=\"nu0\">400</span><br/>\u00a0<br/><span class=\"co1\">'nomainwin</span><br/>\u00a0<br/><span class=\"kw1\">open</span> <span class=\"st0\">\"N'th Roots of One\"</span> <span class=\"kw1\">for</span> graphics_nsb_nf <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>w<br/>\u00a0<br/><span class=\"sy0\">#</span>w <span class=\"st0\">\"trapclose [quit]\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    angle <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"font arial 16 bold\"</span><br/>    <span class=\"kw1\">print</span> n; <span class=\"st0\">\"th roots.\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"cls\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"size 1\u00a0; goto 200 200\u00a0; down\u00a0; color lightgray\u00a0; circle 150\u00a0; size 10\u00a0; set 200 200\u00a0; size 2\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"up\u00a0; goto 200 0\u00a0; down\u00a0; goto 200 400\u00a0; up\u00a0; goto 0 200\u00a0; down\u00a0; goto 400 200\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"up\u00a0; goto 40 20\u00a0; down\u00a0; color black\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"font arial 6\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"\\\"</span>; n; <span class=\"st0\">\" roots of 1.\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        x <span class=\"sy0\">=</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> Radian<span class=\"br0\">(</span> angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> <span class=\"kw2\">sin</span><span class=\"br0\">(</span> Radian<span class=\"br0\">(</span> angle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">print</span> <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span>; <span class=\"st0\">\":  ( \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##.######\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span>;_<br/>          <span class=\"st0\">\" +i *\"</span> <span class=\"sy0\">+</span><span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##.######\"</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span>; <span class=\"st0\">\")      or     e^( i *\"</span>; i <span class=\"sy0\">-</span><span class=\"nu0\">1</span>; <span class=\"st0\">\" *2 *Pi/ \"</span>; n; <span class=\"st0\">\")\"</span><br/>\u00a0<br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"color \"</span>; <span class=\"nu0\">255</span> <span class=\"sy0\">*</span>i <span class=\"sy0\">/</span>n; <span class=\"st0\">\" 0 \"</span>; <span class=\"nu0\">256</span> <span class=\"sy0\">-</span><span class=\"nu0\">255</span> <span class=\"sy0\">*</span>i <span class=\"sy0\">/</span>n<br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"up\u00a0; goto 200 200\"</span><br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"down\u00a0; goto \"</span>; <span class=\"nu0\">200</span> <span class=\"sy0\">+</span><span class=\"nu0\">150</span> <span class=\"sy0\">*</span>x; <span class=\"st0\">\" \"</span>; <span class=\"nu0\">200</span> <span class=\"sy0\">-</span><span class=\"nu0\">150</span> <span class=\"sy0\">*</span>y<br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"up  \u00a0; goto \"</span>; <span class=\"nu0\">200</span> <span class=\"sy0\">+</span><span class=\"nu0\">165</span> <span class=\"sy0\">*</span>x; <span class=\"st0\">\" \"</span>; <span class=\"nu0\">200</span> <span class=\"sy0\">-</span><span class=\"nu0\">165</span> <span class=\"sy0\">*</span>y<br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"\\\"</span>; <span class=\"kw2\">str$</span><span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"up\"</span><br/>\u00a0<br/>        angle <span class=\"sy0\">=</span>angle <span class=\"sy0\">+</span><span class=\"nu0\">360</span> <span class=\"sy0\">/</span>n<br/>\u00a0<br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">timer</span> <span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">wait</span><br/>  <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">timer</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">next</span> n<br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"br0\">[</span>quit<span class=\"br0\">]</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>w<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Radian<span class=\"br0\">(</span> theta<span class=\"br0\">)</span><br/>    Radian <span class=\"sy0\">=</span>theta <span class=\"sy0\">*</span><span class=\"nu0\">3.1415926535</span> <span class=\"sy0\">/</span><span class=\"nu0\">180</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lua", "loc": 29, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">--defines addition, subtraction, negation, multiplication, division, conjugation, norms, and a conversion to strgs.</span><br/>complex <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>__add <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span>u<span class=\"sy0\">.</span>real <span class=\"sy0\">+</span> v<span class=\"sy0\">.</span>real<span class=\"sy0\">,</span> u<span class=\"sy0\">.</span>imag <span class=\"sy0\">+</span> v<span class=\"sy0\">.</span>imag<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__sub <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span>u<span class=\"sy0\">.</span>real <span class=\"sy0\">-</span> v<span class=\"sy0\">.</span>real<span class=\"sy0\">,</span> u<span class=\"sy0\">.</span>imag <span class=\"sy0\">-</span> v<span class=\"sy0\">.</span>imag<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__mul <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span>u<span class=\"sy0\">.</span>real <span class=\"sy0\">*</span> v<span class=\"sy0\">.</span>real <span class=\"sy0\">-</span> u<span class=\"sy0\">.</span>imag <span class=\"sy0\">*</span> v<span class=\"sy0\">.</span>imag<span class=\"sy0\">,</span> u<span class=\"sy0\">.</span>real <span class=\"sy0\">*</span> v<span class=\"sy0\">.</span>imag <span class=\"sy0\">+</span> u<span class=\"sy0\">.</span>imag <span class=\"sy0\">*</span> v<span class=\"sy0\">.</span>real<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__div <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"kw1\">return</span> u <span class=\"sy0\">*</span> complex<span class=\"br0\">(</span>v<span class=\"sy0\">.</span>real <span class=\"sy0\">/</span> v<span class=\"sy0\">.</span>norm<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>v<span class=\"sy0\">.</span>imag <span class=\"sy0\">/</span> v<span class=\"sy0\">.</span>norm<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__unm <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span><span class=\"sy0\">-</span>u<span class=\"sy0\">.</span>real<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>u<span class=\"sy0\">.</span>imag<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__concat <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"table\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> u<span class=\"sy0\">.</span>real <span class=\"sy0\">..</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">..</span> u<span class=\"sy0\">.</span>imag <span class=\"sy0\">..</span> <span class=\"st0\">\"i\"</span> <span class=\"sy0\">..</span> v<br/>\t<span class=\"kw1\">elseif</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"string\"</span> <span class=\"kw2\">or</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"number\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> u <span class=\"sy0\">..</span> v<span class=\"sy0\">.</span>real <span class=\"sy0\">..</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">..</span> v<span class=\"sy0\">.</span>imag <span class=\"sy0\">..</span> <span class=\"st0\">\"i\"</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__index <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span> index<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> operations <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    norm <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"kw1\">return</span> u<span class=\"sy0\">.</span>real <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> u<span class=\"sy0\">.</span>imag <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>    conj <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"kw1\">return</span> complex<span class=\"br0\">(</span>u<span class=\"sy0\">.</span>real<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>u<span class=\"sy0\">.</span>imag<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> operations<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"kw2\">and</span> operations<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>__newindex <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>__call <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> realpart<span class=\"sy0\">,</span> imagpart<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span>real <span class=\"sy0\">=</span> realpart<span class=\"sy0\">,</span> imag <span class=\"sy0\">=</span> imagpart<span class=\"br0\">}</span><span class=\"sy0\">,</span> complex<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>n <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><br/>val <span class=\"sy0\">=</span> complex<span class=\"br0\">(</span><span class=\"kw3\">math.cos</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw3\">math.pi</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sin</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw3\">math.pi</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>root <span class=\"sy0\">=</span> complex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>  root <span class=\"sy0\">=</span> root <span class=\"sy0\">*</span> val<br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>root <span class=\"sy0\">..</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">RootsOfUnity\u00a0:= proc( n )<br/>    solve(z^n = 1, z);<br/>end proc:</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">RootsUnity[nthroot_Integer?Positive]\u00a0:= Table[Exp[2 Pi I i/nthroot], {i, 0, nthroot - 1}]</pre>"}, {"lang": "MATLAB", "loc": 6, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> z = rootsOfUnity<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    assert<span class=\"br0\">(</span>n &gt;= <span class=\"nu0\">1</span>,<span class=\"co2\">'n &gt;= 1'</span><span class=\"br0\">)</span>;<br/>    z = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/roots.html\"><span class=\"kw2\">roots</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">solve(1 = x^n, x)</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u041f0\t0\t\u041f1\t\u0418\u041f1\tsin\t\u0418\u041f1\tcos\t\u0421/\u041f\t2\t\u043f\u0438<br/>*\t\u0418\u041f0\t/\t\u0418\u041f1\t+\t\u041f1\t\u0411\u041f\t03</pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\">import complex, math<br/>\u00a0<br/>proc rect(r, phi: float): Complex = (r * cos(phi), sin(phi))<br/>\u00a0<br/>proc croots(n): seq[Complex] =<br/>  result = @[]<br/>  if n &lt;= 0: return<br/>  for k in 0 .. &lt; n:<br/>    result.add rect(1, 2 * k.float * Pi / n.float)<br/>\u00a0<br/>for nr in 2..10:<br/>  echo nr, \" \", croots(nr)</pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALatan\"><span class=\"kw3\">atan</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%2d \"</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> ret <span class=\"sy0\">=</span> polar <span class=\"nu0\">1</span><span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> pi <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> k <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> n<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"(%f +\u00a0%f i)\"</span> ret<span class=\"sy0\">.</span>re ret<span class=\"sy0\">.</span>im<br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "Octave", "loc": 7, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"sy4\">:</span> <span class=\"nu0\">10</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"***\u00a0%d\\n\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> n <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><br/>    <a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/exp.html\"><span class=\"kw5\">exp</span></a><span class=\"br0\">(</span>2i<span class=\"sy1\">*</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"sy1\">*</span>n<span class=\"sy1\">/</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><span class=\"co4\">\"\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfor</span></pre>"}, {"lang": "OoRexx", "loc": 26, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes the  K  roots of unity  (which include complex roots).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">Version</span> v<br/><span class=\"kw1\">Say</span> v<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n frac <span class=\"sy0\">.</span>                     <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span> n==<span class=\"st0\">''</span>    <span class=\"kw3\">then</span> n=<span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> frac=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> frac=<span class=\"nu0\">5</span>                <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>start=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*assume only one  K  is wanted.       */</span><br/><span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>      <span class=\"kw3\">then</span> start=<span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*Negative?  Then use a range of  K's. */</span><br/>                                       <span class=\"coMULTI\">/*display unity roots for a range,  or */</span><br/>  <span class=\"kw1\">do</span> k=start  <span class=\"kw2\">to</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*                   just for one  K.  */</span><br/>  <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>k <span class=\"st0\">'roots of unity'</span>,<span class=\"nu0\">40</span>,<span class=\"st0\">\"-\"</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*display a pretty separator with title*/</span><br/>     <span class=\"kw1\">do</span> angle=<span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">360</span><span class=\"sy0\">/</span>k  <span class=\"kw2\">for</span> k       <span class=\"coMULTI\">/*compute the angle for each root.     */</span><br/>     rp=adjust<span class=\"br0\">(</span>rxCalcCos<span class=\"br0\">(</span>angle,,<span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*compute real part via  COS  function.*/</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>rp,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"st0\">'-'</span> <span class=\"kw3\">then</span> rp=<span class=\"st0\">\" \"</span>rp <span class=\"coMULTI\">/*not negative?  Then pad with a blank.*/</span><br/>     ip=adjust<span class=\"br0\">(</span>rxCalcSin<span class=\"br0\">(</span>angle,,<span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*compute imaginary part via SIN funct.*/</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>ip,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"st0\">'-'</span> <span class=\"kw3\">then</span> ip=<span class=\"st0\">\"+\"</span>ip <span class=\"coMULTI\">/*Not negative?  Then pad with  + char.*/</span><br/>     <span class=\"kw1\">if</span> ip=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> rp              <span class=\"coMULTI\">/*Only real part? Ignore imaginary part*/</span><br/>              <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>rp,frac+<span class=\"nu0\">4</span><span class=\"br0\">)</span>ip<span class=\"st0\">'i'</span>   <span class=\"coMULTI\">/*show the real &amp; imaginary part*/</span><br/>     <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*angle*/</span><br/>  <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*----------------------------------------------------------------------------*/</span><br/>adjust: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; near0=<span class=\"st0\">'1e-'</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>%10<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*compute small #*/</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>near0  <span class=\"kw3\">then</span> x=<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*if near zero, then assume zero.*/</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,,frac<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*fraction digits past dec point.*/</span><br/>::requires rxMath library</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"kw1\">exp</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span><span class=\"kw1\">Pi</span><span class=\"sy0\">*</span><span class=\"kw1\">I</span><span class=\"sy0\">*</span>k<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 25, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Roots<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  root<span class=\"sy1\">:</span> <span class=\"kw4\">record</span>  <span class=\"co1\">// poor man's complex type.</span><br/>    r<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span> n<span class=\"sy1\">:</span>  <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  angle<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">7</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    angle <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      root<span class=\"sy1\">.</span><span class=\"me1\">r</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      root<span class=\"sy1\">.</span><span class=\"me1\">i</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>root<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> root<span class=\"sy1\">.</span><span class=\"me1\">i</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"st0\">'i '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      angle <span class=\"sy1\">:</span><span class=\"sy3\">=</span> angle <span class=\"sy3\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">2.0</span> <span class=\"sy3\">*</span> pi <span class=\"sy3\">/</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%2d\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@roots</span> <span class=\"sy0\">=</span> root<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$root</span> <span class=\"br0\">(</span><span class=\"re0\">@roots</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$root</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">display_format</span><span class=\"br0\">(</span>style <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'cartesian'</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/format.html\"><span class=\"kw3\">format</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'%.3f'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\" $root\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span>n <span class=\"sy0\">-&gt;</span> \\k <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"kw3\">cis</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span>\u03c4<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">for n=2 to 10 do<br/>    printf(1,\"%2d:\",n)<br/>    for root=0 to n-1 do<br/>        atom real = cos(2*PI*root/n)<br/>        atom imag = sin(2*PI*root/n)<br/>        printf(1,\"%s\u00a0%6.3f\u00a0%6.3fi\",{iff(root?\",\":\"\"),real,imag})<br/>    end for<br/>    printf(1,\"\\n\")<br/>end for</pre>"}, {"lang": "PL/I", "loc": 22, "block": "<pre class=\"text highlighted_source\">complex_roots:<br/>   procedure (N);<br/>   declare N fixed binary nonassignable;<br/>   declare x float, c fixed decimal (10,8) complex;<br/>   declare twopi float initial ((4*asin(1.0)));<br/>\u00a0<br/>   do x = 0 to twopi by twopi/N;<br/>      c = complex(cos(x), sin(x));<br/>      put skip list (c);<br/>   end;<br/>end complex_roots;<br/>\u00a0<br/>   1.00000000+0.00000000I   <br/>   0.80901700+0.58778524I   <br/>   0.30901697+0.95105654I   <br/>  -0.30901703+0.95105648I   <br/>  -0.80901706+0.58778518I   <br/>  -1.00000000-0.00000008I   <br/>  -0.80901694-0.58778536I   <br/>  -0.30901709-0.95105648I   <br/>   0.30901712-0.95105648I   <br/>   0.80901724-0.58778494I   </pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(load \"@lib/math.l\")<br/>\u00a0<br/>(for N (range 2 10)<br/>   (let Angle 0.0<br/>      (prin N \": \")<br/>      (for I N<br/>         (let Ipart (sin Angle)<br/>            (prin<br/>               (round (cos Angle) 4)<br/>               (if (lt0 Ipart) \"-\" \"+\")<br/>               \"j\"<br/>               (round (abs Ipart) 4)<br/>               \"  \" ) )<br/>         (inc 'Angle (*/ 2 pi N)) )<br/>      (prinl) ) )</pre>"}, {"lang": "PureBasic", "loc": 12, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>  angle <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    x.f <span class=\"sy0\">=</span> <span class=\"kw2\">Cos</span><span class=\"br0\">(</span>Radian<span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>    y.f <span class=\"sy0\">=</span> <span class=\"kw2\">Sin</span><span class=\"br0\">(</span>Radian<span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\":  \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrF</span><span class=\"br0\">(</span>x, <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>  <span class=\"st0\">\" / \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrF</span><span class=\"br0\">(</span>y, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    angle <span class=\"sy0\">=</span> angle <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">360</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 20, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">cmath</span><br/><span class=\"kw1\">class</span> Complex<span class=\"br0\">(</span><span class=\"kw2\">complex</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> <span class=\"kw4\">__repr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      rp <span class=\"sy0\">=</span> <span class=\"st0\">'%7.5f'</span>%<span class=\"kw2\">self</span>.<span class=\"me1\">real</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">self</span>.<span class=\"me1\">pureImag</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"st0\">''</span><br/>      ip <span class=\"sy0\">=</span> <span class=\"st0\">'%7.5fj'</span>%<span class=\"kw2\">self</span>.<span class=\"me1\">imag</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">self</span>.<span class=\"me1\">pureReal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"st0\">''</span><br/>      conj <span class=\"sy0\">=</span> <span class=\"st0\">''</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">pureImag</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw2\">self</span>.<span class=\"me1\">pureReal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"kw2\">self</span>.<span class=\"me1\">imag</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"st0\">'+'</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">'0.0'</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">pureImag</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"kw2\">self</span>.<span class=\"me1\">pureReal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> rp+conj+ip<br/>   <span class=\"kw1\">def</span> pureImag<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span> <span class=\"kw2\">self</span>.<span class=\"me1\">real</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.000005</span><br/>   <span class=\"kw1\">def</span> pureReal<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span> <span class=\"kw2\">self</span>.<span class=\"me1\">imag</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.000005</span><br/>\u00a0<br/><span class=\"kw1\">def</span> croots<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Complex<span class=\"br0\">(</span><span class=\"kw3\">cmath</span>.<span class=\"me1\">rect</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>*k*<span class=\"kw3\">cmath</span>.<span class=\"me1\">pi</span>/n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"co1\"># in pre-Python 2.6, return (Complex(cmath.exp(2j*k*cmath.pi/n)) for k in range(n))</span><br/>\u00a0<br/><span class=\"kw1\">for</span> nr <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">print</span> nr<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>croots<span class=\"br0\">(</span>nr<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 7, "block": "<pre class=\"text highlighted_source\">for(j in 2:10) {<br/>  r &lt;- sprintf(\"%d: \", j)<br/>  for(n in 1:j) {<br/>    r &lt;- paste(r, format(exp(2i*pi*n/j), digits=4), ifelse(n&lt;j, \",\", \"\"))<br/>  }<br/>  print(r)<br/>}</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (roots-of-unity n)<br/>  (for/list ([k n])<br/>    (make-polar 1 (* k (/ (* 2 pi) n)))))</pre>"}, {"lang": "REXX", "loc": 38, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes the  K  roots of  unity  (which usually includes complex roots).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n frac <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span>   n==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>    n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>     n=<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> frac=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> frac==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  frac=<span class=\"nu0\">5</span>             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>start=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                                     <span class=\"coMULTI\">/*assume only one  K  is wanted.       */</span><br/><span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>                  <span class=\"kw3\">then</span> start=<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*Negative?  Then use a range of  K's. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  - <span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*use number of decimal digits in  pi. */</span><br/>pi2= pi+pi                                       <span class=\"coMULTI\">/*obtain the value of   pi  doubled.   */</span><br/>                                                 <span class=\"coMULTI\">/*display unity roots for a range,  or */</span><br/>     <span class=\"kw1\">do</span> #=start  <span class=\"kw2\">to</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*                   just for one  K.  */</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span># <span class=\"st0\">'roots of unity'</span>, <span class=\"nu0\">40</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span>  <span class=\"st0\">' (showing'</span> frac <span class=\"st0\">\"fractional decimal digits)\"</span><br/>         <span class=\"kw1\">do</span> angle=<span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> pi2<span class=\"sy0\">/</span>#  <span class=\"kw2\">for</span> #             <span class=\"coMULTI\">/*compute the angle for each root.     */</span><br/>         rp=adjust<span class=\"br0\">(</span> cos<span class=\"br0\">(</span> angle <span class=\"br0\">)</span> <span class=\"br0\">)</span>               <span class=\"coMULTI\">/*compute real part via  COS  function.*/</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>rp, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"st0\">'-'</span>  <span class=\"kw3\">then</span> rp=<span class=\"st0\">\" \"</span>rp   <span class=\"coMULTI\">/*not negative?  Then pad with a blank.*/</span><br/>         ip=adjust<span class=\"br0\">(</span>sin<span class=\"br0\">(</span>angle<span class=\"br0\">)</span><span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*compute imaginary part via SIN funct.*/</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>ip, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"st0\">'-'</span>  <span class=\"kw3\">then</span> ip=<span class=\"st0\">\"+\"</span>ip   <span class=\"coMULTI\">/*Not negative?  Then pad with  + char.*/</span><br/>         <span class=\"kw1\">if</span> ip=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> rp                    <span class=\"coMULTI\">/*Only real part? Ignore imaginary part*/</span><br/>                  <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>rp, frac+<span class=\"nu0\">4</span><span class=\"br0\">)</span>ip<span class=\"st0\">'i'</span> <span class=\"coMULTI\">/*display the real and imaginary part. */</span><br/>         <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*angle*/</span><br/>     <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*#*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>pi:  pi=<span class=\"nu0\">3.141592653589793238462643383279502884197169399375105820974944592307816</span>; <span class=\"kw1\">return</span> pi<br/>r2r: <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>               <span class=\"coMULTI\">/*reduce #radians: -2pi\u2500\u2500\u25ba +2pi radians*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>adjust: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; near0=<span class=\"st0\">'1e-'</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*compute a tiny number.*/</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> near0  <span class=\"kw3\">then</span> x=<span class=\"nu0\">0</span>              <span class=\"coMULTI\">/*if it's near zero,  then assume zero.*/</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x, , frac<span class=\"br0\">)</span>  <span class=\"sy0\">/</span>  <span class=\"nu0\">1</span>           <span class=\"coMULTI\">/*fraction digits past decimal point.  */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cos: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;     x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;     <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> a=pi<span class=\"sy0\">/</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>5;  <span class=\"kw1\">if</span> a=pi<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">|</span>a=pi<span class=\"sy0\">*</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">if</span> a=pi    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> a=pi<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"sy0\">.</span>5; <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sincos<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sin: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;     x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;      <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>=pi  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;                       <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sincos<span class=\"br0\">(</span>x, x, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>sincos: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z,_,i;                       $x= x <span class=\"sy0\">*</span> x<br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">until</span> p=z;  p=z;  _=-_<span class=\"sy0\">*</span>$x<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k+i<span class=\"br0\">)</span><span class=\"br0\">)</span>;  z=z+_;  <span class=\"kw3\">end</span>;       <span class=\"kw1\">return</span> z</pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(4)<br/>for n = 2 to 5<br/>    see string(n) + \"\u00a0: \" <br/>    for root = 0 to n-1<br/>        real = cos(2*3.14 * root / n)<br/>        imag = sin(2*3.14 * root / n)<br/>        see \"\" + real + \" \" + imag + \"i\"<br/>        if root\u00a0!= n-1 see \", \" ok<br/>    next<br/>    see nl<br/>next <br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 16, "block": "<pre class=\"text highlighted_source\">// specify polynomial<br/>&gt;&gt; n = 10;<br/>&gt;&gt; a = zeros(1,n+1); a[1] = 1; a[n+1] = -1;<br/>&gt;&gt; polyroots(a)<br/>   radius               roots           success<br/>&gt;&gt; polyroots(a).roots<br/>   -0.309016994 + 0.951056516i<br/>   -0.809016994 + 0.587785252i<br/>          -1 + 5.95570041e-23i<br/>   -0.809016994 - 0.587785252i<br/>   -0.309016994 - 0.951056516i<br/>    0.309016994 - 0.951056516i<br/>    0.809016994 - 0.587785252i<br/>                        1 + 0i<br/>    0.809016994 + 0.587785252i<br/>    0.309016994 + 0.951056516i</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> roots_of_unity<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k<span class=\"sy0\">|</span> <span class=\"kw4\">Complex</span>.<span class=\"me1\">polar</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>::PI <span class=\"sy0\">*</span> k <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> roots_of_unity<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">PI = 3.1415926535<br/>FOR n = 2 TO 5<br/>  PRINT n;\":\"\u00a0;<br/>   FOR root = 0 TO n-1<br/>     real = COS(2*PI * root / n)<br/>     imag = SIN(2*PI * root / n)<br/>     PRINT using(\"-##.#####\",real);using(\"-##.#####\",imag);\"i\";<br/>     IF root &lt;&gt; n-1 then PRINT \",\"\u00a0;<br/>  NEXT<br/>  PRINT<br/>NEXT <br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rootsOfUnity<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> Complex.<span class=\"me1\">fromPolar</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>math.<span class=\"me1\">Pi</span><span class=\"sy0\">*</span>k/n<span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 17, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"complex.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: n is 0;<br/>    var integer: k is 0;<br/>  begin<br/>    for n range 2 to 10 do<br/>      write(n lpad 2 &lt;&amp; \": \");<br/>      for k range 0 to pred(n) do<br/>        write(polar(1.0, 2.0 * PI * flt(k) / flt(n)) digits 4 lpad 15 &lt;&amp; \" \");<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Scheme", "loc": 10, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> pi <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">atan</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> k <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> k n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">make-polar</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> pi <span class=\"br0\">(</span><span class=\"sy0\">/</span> k n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func roots_of_unity<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>        exp<span class=\"br0\">(</span>2i <span class=\"sy0\">*</span> Num.<span class=\"me1\">pi</span> <span class=\"sy0\">/</span> n <span class=\"sy0\">*</span> j<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>roots_of_unity<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%+.5f%+.5fi<span class=\"es0\">\\n</span>\"</span>, c.<span class=\"me1\">reals</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sparkling", "loc": 14, "block": "<pre class=\"text highlighted_source\">function unity_roots(n) {<br/>\t// nth-root(1) = cos(2 * k * pi / n) + i * sin(2 * k * pi / n)<br/>\treturn map(range(n), function(idx, k) {<br/>\t\treturn {<br/>\t\t\t\"re\": cos(2 * k * M_PI / n),<br/>\t\t\t\"im\": sin(2 * k * M_PI / n)<br/>\t\t};<br/>\t});<br/>}<br/>\u00a0<br/>// pirnt 6th roots of unity<br/>foreach(unity_roots(6), function(k, v) {<br/>\tprintf(\"%.3f%+.3fi\\n\", v.re, v.im);<br/>});</pre>"}, {"lang": "Stata", "loc": 12, "block": "<pre class=\"text highlighted_source\">n=7<br/>exp(2i*pi()/n*(0::n-1))<br/>                               1<br/>    +-----------------------------+<br/>  1 |                          1  |<br/>  2 |   .623489802 + .781831482i  |<br/>  3 |  -.222520934 + .974927912i  |<br/>  4 |  -.900968868 + .433883739i  |<br/>  5 |  -.900968868 - .433883739i  |<br/>  6 |  -.222520934 - .974927912i  |<br/>  7 |   .623489802 - .781831482i  |<br/>    +-----------------------------+</pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> import tcl::<span class=\"me1\">mathfunc</span>::<span class=\"sy0\">*</span><br/>\u00a0<br/><span class=\"kw1\">set</span> pi <span class=\"nu0\">3.14159265</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> angle <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">set</span> row <span class=\"re0\">$n</span>:<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> row <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>5.4f<span class=\"sy0\">%</span>+5.4fi <span class=\"br0\">[</span>cos <span class=\"re0\">$angle</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>sin <span class=\"re0\">$angle</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> angle <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$angle</span> + <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$pi</span>/<span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$row</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">cZeros(x^n - 1, x)</pre>"}, {"lang": "Ursala", "loc": 9, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>roots = ~&amp;htxPC+ c..mul:-0^*DlSiiDlStK9\\iota <a class=\"__cf_email__\" data-cfemail=\"d5b6fbfbb8a0b995bcbc8d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+ c..cpow/-1.+ div/1.+ float<br/>\u00a0<br/>#cast\u00a0%jLL<br/>\u00a0<br/>tests = roots* &lt;1,2,3,4,5,6&gt;</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">PI2:=(0.0).pi*2;<br/>foreach n,i in ([1..9],n){<br/>   c:=s:=0;<br/>   if(not i)         c =  1;<br/>   else if(n==4*i)   s =  1;<br/>   else if(n==2*i)   c = -1;<br/>   else if(3*n==4*i) s = -1;<br/>   else a,c,s:=PI2*i/n,a.cos(),a.sin();<br/>\u00a0<br/>   if(c) print(\"%.2g\".fmt(c));<br/>   print( (s==1 and \"i\") or (s==-1 and \"-i\" or (s and \"%+.2gi\" or\"\")).fmt(s));<br/>   print( (i==n-1) and \"\\n\" or \",  \");<br/>}</pre>"}]}