{"task": "Reverse_a_string", "blocks": [{"lang": "0815", "loc": 10, "block": "<pre class=\"text highlighted_source\">}:r:     Start reader loop.<br/> \u00a0!~&gt;&amp;   Push a character to the \"stack\".<br/>  &lt;:a:=- Stop reading on newline.<br/>^:r:<br/>@&gt;       Rotate the newline to the end and enqueue a sentinel 0.<br/>{~       Dequeue and rotate the first character into place.<br/>}:p:<br/>  ${~    Print the current character until it's 0.<br/>^:p:<br/>#:r:     Read again.</pre>"}, {"lang": "360 Assembly", "loc": 30, "block": "<pre class=\"text highlighted_source\">*        Reverse a string          21/05/2016<br/>REVERSE  CSECT<br/>         USING  REVERSE,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \"<br/>         LR     R13,R15            \"<br/>         MVC    TMP(L'C),C         tmp=c<br/>         LA     R8,C               @c[1]<br/>         LA     R9,TMP+L'C-1       @tmp[n-1]<br/>         LA     R6,1               i=1<br/>         LA     R7,L'C             n=length(c)<br/>LOOPI    CR     R6,R7              do i=1 to n <br/>         BH     ELOOPI             leave i<br/>         MVC    0(1,R8),0(R9)        substr(c,i,1)=substr(tmp,n-i+1,1)<br/>         LA     R8,1(R8)             @<a class=\"__cf_email__\" data-cfemail=\"0f6c324f6c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1<br/>         BCTR   R9,0                 @<a class=\"__cf_email__\" data-cfemail=\"50243d206d10243d207d61\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R6,1(R6)             i=i+1<br/>         B      LOOPI              next i<br/>ELOOPI   XPRNT  C,L'C              print c<br/>         L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>C        DC     CL12'edoC attesoR'<br/>TMP      DS     CL12<br/>         YREGS<br/>         END    REVERSE</pre>"}, {"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"abc\" s:rev<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 12, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> reverseString<span class=\"br0\">(</span><span class=\"kw3\">string</span>:<span class=\"kw3\">String</span><span class=\"br0\">)</span>:<span class=\"kw3\">String</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> reversed:<span class=\"kw3\">String</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">int</span> = <span class=\"kw3\">string</span>.<span class=\"kw3\">length</span> -<span class=\"nu0\">1</span>; i <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span>; i--<span class=\"br0\">)</span><br/>\t\treversed += <span class=\"kw3\">string</span>.<span class=\"kw3\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> reversed;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> reverseStringCQAlternative<span class=\"br0\">(</span><span class=\"kw3\">string</span>:<span class=\"kw3\">String</span><span class=\"br0\">)</span>:<span class=\"kw3\">String</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">string</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"kw3\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 14, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Reverse_String <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Reverse_It <span class=\"br0\">(</span>Item\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Result\u00a0: String <span class=\"br0\">(</span>Item'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Item'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>         Result <span class=\"br0\">(</span>Result'Last - I + Item'First<span class=\"br0\">)</span>\u00a0:= Item <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Reverse_It;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>Reverse_It <span class=\"br0\">(</span>Get_Line<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Reverse_String;</pre>"}, {"lang": "Agda", "loc": 7, "block": "<pre class=\"text highlighted_source\">module reverse_string where<br/>\u00a0<br/>open import Data.String<br/>open import Data.List<br/>\u00a0<br/>reverse_string\u00a0: String \u2192 String<br/>reverse_string s = fromList (reverse (toList s))</pre>"}, {"lang": "Aime", "loc": 1, "block": "<pre class=\"text highlighted_source\">o_(b_reverse(\"Hello, World!\"), \"\\n\");</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> reverse <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw12\">OVER</span> 2 <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">CHAR</span> c <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> s <span class=\"sy1\">-</span> i <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    s<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> s <span class=\"sy1\">-</span> i <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> c<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> text <span class=\"sy1\">:=</span> <span class=\"st0\">\"Was it a cat I saw\"</span><span class=\"sy1\">;</span><br/>  reverse<span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>text<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Apex", "loc": 5, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> str <span class=\"sy0\">=</span> <span class=\"st0\">'Hello World!'</span><span class=\"sy0\">;</span><br/>str <span class=\"sy0\">=</span> str.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>system.<span class=\"me1\">debug</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      \u233d'asdf'<br/>fdsa</pre>"}, {"lang": "AppleScript", "loc": 5, "block": "<pre class=\"applescript highlighted_source\">reverseString<span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">on</span> reverseString<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    reverse <span class=\"kw3\">of</span> characters <span class=\"kw3\">of</span> str <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/><span class=\"kw3\">end</span> reverseString</pre>"}, {"lang": "Applesoft BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">10 A$ = \"THE FIVE BOXING WIZARDS JUMP QUICKLY\"<br/>20 GOSUB 100REVERSE<br/>30 PRINT R$<br/>40 END<br/>\u00a0<br/>100 REMREVERSE A$<br/>110 R$ = \"\"<br/>120 FOR I = 1 TO LEN(A$)<br/>130    R$ = MID$(A$, I, 1) + R$<br/>140 NEXT I<br/>150 RETURN</pre>"}, {"lang": "ATS", "loc": 40, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//<br/>// How to compile:<br/>// patscc -DATS_MEMALLOC_LIBC -o string_reverse string_reverse.dats<br/>//<br/>\u00a0<br/>#include<br/>\"share/atspre_staload.hats\"<br/>\u00a0<br/>fun<br/>string_reverse<br/>(<br/>  x: string<br/>)\u00a0: Strptr1 = let<br/>//<br/>val [n:int] x = g1ofg0(x)<br/>val y = string1_copy(x)<br/>val n = string1_length(x)<br/>val (pf, fpf | p) =<br/>  $UNSAFE.ptr_vtake{array(char,n)}(ptrcast(y))<br/>val () = array_subreverse(!p, i2sz(0), n)<br/>prval () = fpf(pf)<br/>//<br/>in<br/>  $UNSAFE.castvwtp0{Strptr1}(y)<br/>end (* end of [string_reverse] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () = let<br/>//<br/>val rev = string_reverse(\"asdf\")<br/>val ((*void*)) = println! (\"reverse(\\\"asdf\\\") = \\\"\", rev, \"\\\"\")<br/>val ((*freed*)) = strptr_free (rev)<br/>//<br/>in<br/>  // nothing<br/>end // end of [main0]<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% reverse<span class=\"br0\">(</span><span class=\"st0\">\"asdf\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>reverse<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> string<br/>    reversed <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> reversed<br/>  <span class=\"kw1\">Return</span> reversed<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 12, "block": "<pre class=\"autoit highlighted_source\">#AutoIt Version: 3<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<br/><span class=\"re0\">$mystring</span><span class=\"sy0\">=</span><span class=\"st0\">\"asdf\"</span><br/><span class=\"re0\">$reverse_string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><span class=\"re0\">$string_length</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$mystring</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">to</span></a> <span class=\"re0\">$string_length</span><br/>   <span class=\"re0\">$last_n_chrs</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringRight.htm\"><span class=\"kw3\">StringRight</span></a><span class=\"br0\">(</span><span class=\"re0\">$mystring</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>   <span class=\"re0\">$nth_chr</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringTrimRight.htm\"><span class=\"kw3\">StringTrimRight</span></a><span class=\"br0\">(</span><span class=\"re0\">$last_n_chrs</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"re0\">$reverse_string</span><span class=\"sy0\">=</span> <span class=\"re0\">$reverse_string</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$nth_chr</span> <br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Reversed string is:\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$reverse_string</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 10, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  p = <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"kw4\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>; i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span>; i<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> p = p <span class=\"kw4\">substr</span><span class=\"br0\">(</span>s, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"kw6\">return</span> p<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw5\">print</span> reverse<span class=\"br0\">(</span><span class=\"st0\">\"edoCattesoR\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Babel", "loc": 1, "block": "<pre class=\"text highlighted_source\">strrev: { str2ar ar2ls reverse ls2lf ar2str }</pre>"}, {"lang": "BaCon", "loc": 3, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">OPTION</span> UTF8 <span class=\"kw1\">TRUE</span><br/>s$ = <span class=\"st0\">\"asdf\"</span><br/><span class=\"kw1\">PRINT</span> REVERSE$<span class=\"br0\">(</span>s$<span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 7, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> reverse$<span class=\"br0\">(</span>a$<span class=\"br0\">)</span><br/>   b$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><br/>      b$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b$<br/>   <span class=\"kw1\">NEXT</span> i<br/>   reverse$ <span class=\"sy0\">=</span> b$<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 17, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">reverse</span> <span class=\"sy0\">%</span><span class=\"re3\">1</span> res<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">reverse</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">str</span><span class=\"sy0\">%</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\t<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> chr=<span class=\"sy0\">!</span><span class=\"re2\">str:~0,1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">str:~1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>=<span class=\"sy0\">%</span><span class=\"re3\">chr</span><span class=\"sy0\">%!</span><span class=\"re2\">%<span class=\"re3\">2</span></span><span class=\"sy0\">!</span> <br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop</pre>"}, {"lang": "BBC BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">      PRINT FNreverse(\"The five boxing wizards jump quickly\")<br/>      END<br/>\u00a0<br/>      DEF FNreverse(A$)<br/>      LOCAL B$, C%<br/>      FOR C% = LEN(A$) TO 1 STEP -1<br/>        B$ += MID$(A$,C%,1)<br/>      NEXT<br/>      = B$</pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre class=\"text highlighted_source\">55+~&gt;:48&gt;*#8\\#4`#:!#&lt;#~_$&gt;:#,<a class=\"__cf_email__\" data-cfemail=\"4d120d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Bracmat", "loc": 15, "block": "<pre class=\"text highlighted_source\">  ( reverse<br/>  = L x<br/>    .    \u00a0:?L<br/>        &amp; @(\u00a0!arg<br/>          \u00a0:  \u00a0?<br/>               (\u00a0%?x<br/>               &amp; utf$!x<br/>               &amp;\u00a0!x\u00a0!L:?L<br/>               &amp; ~`<br/>               )<br/>              \u00a0?<br/>           )<br/>      | str$!L<br/>  )<br/>&amp; out$reverse$\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac</pre>"}, {"lang": "Brainf***", "loc": 1, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">,</span><span class=\"sy0\">+</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span><span class=\"sy3\">,</span><span class=\"sy0\">+</span><span class=\"sy1\">]</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">[</span><span class=\"sy3\">.</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span></pre>"}, {"lang": "Brat", "loc": 1, "block": "<pre class=\"text highlighted_source\">p \"olleh\".reverse  #Prints \"hello\"</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"Hello, world!\"&lt;-<br/>\u00a0</pre>"}, {"lang": "C", "loc": 67, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;locale.h&gt;</span><br/><span class=\"co2\">#include &lt;wchar.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sa <span class=\"sy0\">=</span> <span class=\"st0\">\"abcdef\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>su <span class=\"sy0\">=</span> <span class=\"st0\">\"as\u20dddf\u0305\"</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Should be in your native locale encoding. Mine is UTF-8 */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> is_comb<span class=\"br0\">(</span><span class=\"kw4\">wchar_t</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"nu12\">0x300</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"nu12\">0x36f</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"nu12\">0x1dc0</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"nu12\">0x1dff</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"nu12\">0x20d0</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"nu12\">0x20ff</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"nu12\">0xfe20</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"nu12\">0xfe2f</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">wchar_t</span><span class=\"sy0\">*</span> mb_to_wchar<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>u<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> len <span class=\"sy0\">=</span> mbstowcs<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>len<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tu <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">wchar_t</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmbstowcs<span class=\"br0\">(</span>u<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> u<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">wchar_t</span><span class=\"sy0\">*</span> ws_reverse<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">wchar_t</span><span class=\"sy0\">*</span> u<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> len<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>out<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> u<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy0\">;</span> len<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tout <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">wchar_t</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tout<span class=\"br0\">[</span>len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tj <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&amp;&amp;</span> is_comb<span class=\"br0\">(</span>u<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/wcsncpy.html\"><span class=\"kw3\">wcsncpy</span></a><span class=\"br0\">(</span>out <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> u <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> len <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tj <span class=\"sy0\">+=</span> len <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>\t\tlen <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>mb_reverse<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> len<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>out<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>u <span class=\"sy0\">=</span> mb_to_wchar<span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> ws_reverse<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlen <span class=\"sy0\">=</span> wcstombs<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tout <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\twcstombs<span class=\"br0\">(</span>out<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setlocale.html\"><span class=\"kw3\">setlocale</span></a><span class=\"br0\">(</span>LC_CTYPE<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s =&gt;\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> sa<span class=\"sy0\">,</span> mb_reverse<span class=\"br0\">(</span>sa<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s =&gt;\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> su<span class=\"sy0\">,</span> mb_reverse<span class=\"br0\">(</span>su<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 12, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>, s<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">reverse</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// modifies s</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> ReverseString<span class=\"br0\">(</span><span class=\"kw4\">string</span> input<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inputChars <span class=\"sy0\">=</span> input<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tArray<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span>inputChars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>inputChars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 1, "block": "<pre>USER&gt;Write $Reverse(\"Hello, World\")\ndlroW ,olleH</pre>"}, {"lang": "Clipper", "loc": 6, "block": "<pre class=\"text highlighted_source\">FUNCTION Reverse(sIn)<br/>   LOCAL sOut\u00a0:= \"\", i<br/>   FOR i\u00a0:= Len(sIn) TO 1 STEP -1<br/>      sOut += Substr(sIn, i, 1)<br/>   NEXT<br/>RETURN sOut</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn str-<span class=\"kw1\">reverse</span> <span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> str <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 1, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">REVERSE</span><span class=\"br0\">(</span><span class=\"st0\">'QWERTY'</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\"><span class=\"st0\">\"qwerty\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "ColdFusion", "loc": 2, "block": "<pre class=\"cfm highlighted_source\"><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> myString  <span class=\"sy0\">=</span> <span class=\"st0\">\"asdf\"</span> <span class=\"sy0\">/&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> myString  <span class=\"sy0\">=</span> <span class=\"kw5\">reverse</span><span class=\"br0\">(</span> myString <span class=\"br0\">)</span> <span class=\"sy0\">/&gt;</span></span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">reverse</span> my-string<span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 28, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> BbtReverseString;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ReverseStr<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">VAR</span><br/>\ttop<span class=\"sy0\">,</span>middle<span class=\"sy0\">,</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tc<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\trStr<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>rStr<span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\ttop <span class=\"sy0\">:=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>; middle <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>top <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> middle <span class=\"kw1\">DO</span><br/>\t\trStr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> str<span class=\"br0\">[</span>top <span class=\"sy0\">-</span> i<span class=\"br0\">]</span>;<br/>\t\trStr<span class=\"br0\">[</span>top <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">IF</span> <span class=\"kw3\">ODD</span><span class=\"br0\">(</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> rStr<span class=\"br0\">[</span>middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> str<span class=\"br0\">[</span>middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> rStr;<br/><span class=\"kw1\">END</span> ReverseStr;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tx<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"'asdf' reversed:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>ReverseStr<span class=\"br0\">(</span><span class=\"st0\">\"asdf\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> BbtReverseString.<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># version 0.21.1</span><br/>\u00a0<br/>strings = <span class=\"br0\">[</span><span class=\"st0\">\"asdf\"</span>, <span class=\"st0\">\"as\u20dddf\u0305\"</span><span class=\"br0\">]</span><br/>strings.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{s} -&gt; #{s.reverse}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">import</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">string</span> s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// UTF-8</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>s1.<span class=\"me1\">retro</span>.<span class=\"me1\">text</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"olleh\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">wstring</span> s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span>w<span class=\"sy0\">;</span> <span class=\"co1\">// UTF-16</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>s2.<span class=\"me1\">retro</span>.<span class=\"me1\">wtext</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"olleh\"</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">dstring</span> s3 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span>d<span class=\"sy0\">;</span> <span class=\"co1\">// UTF-32</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>s3.<span class=\"me1\">retro</span>.<span class=\"me1\">dtext</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"olleh\"</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// without using std.range:</span><br/>\t<span class=\"kw4\">dstring</span> s4 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span>d<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">assert</span><span class=\"br0\">(</span>s4.<span class=\"me1\">dup</span>.<span class=\"me1\">reverse</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"olleh\"</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// simple but inefficient (copies first, then reverses)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 1, "block": "<pre class=\"text highlighted_source\">String reverse(String s) =&gt; new String.fromCharCodes(s.runes.toList().reversed);</pre>"}, {"lang": "Delphi", "loc": 7, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> ReverseString<span class=\"br0\">(</span><span class=\"kw1\">const</span> InString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>InString<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"sy3\">+</span> InString<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!print concat chars \"Hello\"</pre>"}, {"lang": "DWScript", "loc": 4, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> reverse<span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"st0\">\"\"</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">!</span><span class=\"br0\">(</span>string.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">descending</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> string<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 4, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> reverse<span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"st0\">\"\"</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">!</span><span class=\"br0\">(</span>string.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">descending</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> string<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>string-<span class=\"kw1\">reverse</span> string<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>list-<span class=\"sy0\">&gt;</span>string <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>string-<span class=\"kw1\">reverse</span> <span class=\"st0\">\"ghij\"</span><span class=\"br0\">)</span><br/>    \u2192 jihg<br/><span class=\"br0\">(</span>string-<span class=\"kw1\">reverse</span> <span class=\"st0\">\"un roc lamina l animal cornu\"</span><span class=\"br0\">)</span><br/>    \u2192 unroc lamina <span class=\"kw1\">l</span> animal cor nu<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Eiffel", "loc": 15, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>    APPLICATION<br/><span class=\"kw2\">create</span><br/>    make<br/><span class=\"kw1\">feature</span><br/>    make<br/>            <span class=\"co1\">-- Demonstrate string reversal.</span><br/>        <span class=\"kw2\">do</span><br/>            my_string <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello World!\"</span><br/>            my_string.<span class=\"me1\">mirror</span><br/>            print <span class=\"br0\">(</span>my_string<span class=\"br0\">)</span><br/>        <span class=\"kw2\">end</span><br/>    my_string<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>            <span class=\"co1\">-- Used for reversal</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "EGL", "loc": 7, "block": "<pre class=\"text highlighted_source\">function reverse( str string ) returns( string )<br/>\tresult string;<br/>\tfor ( i int from StrLib.characterLen( str ) to 1 decrement by 1 )<br/>\t\tresult\u00a0::= str[i:i];<br/>\tend<br/>\treturn( result );<br/>end</pre>"}, {"lang": "Ela", "loc": 7, "block": "<pre class=\"text highlighted_source\">reverse_string str = rev len str <br/>  where len = length str<br/>        rev 0 str = \"\"<br/>        rev n str = toString (str\u00a0: nn) +&gt; rev nn str<br/>          where nn = n - 1<br/>\u00a0<br/>reverse_string \"Hello\"</pre>"}, {"lang": "Elena", "loc": 13, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>extension extension<br/>{<br/>    reversedLiteral<br/>        = self toArray; sequenceReverse; summarize(String new); literal.<br/>}<br/>\u00a0<br/>program =<br/>[    <br/>    console printLine(\"Hello World\" reversedLiteral).<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>IO.puts (String.reverse \"asdf\")<br/>IO.puts (String.reverse \"as\u20dddf\u0305\")<br/>\u00a0</pre>"}, {"lang": "Elm", "loc": 39, "block": "<pre class=\"text highlighted_source\">-- The import on the next line provides the reverse string <br/>-- functionality satisfying the rosettacode.org task description.<br/>import String exposing (reverse) <br/>\u00a0<br/>-- The rest is fairly boilerplate code demonstrating<br/>-- interactively that the reverse function works.<br/>import Html exposing (Html, Attribute, text, div, input)<br/>import Html.Attributes exposing (placeholder, value, style)<br/>import Html.Events exposing (on, targetValue)<br/>import Html.App exposing (beginnerProgram)<br/>\u00a0<br/>main = beginnerProgram { model = \"\", view = view, update = update }<br/>\u00a0<br/>update newStr oldStr = newStr<br/>\u00a0<br/>view\u00a0: String -&gt; Html String<br/>view forward =<br/>  div []<br/>    ([ input<br/>        [ placeholder \"Enter a string to be reversed.\"<br/>        , value forward<br/>        , on \"input\" targetValue <br/>        , myStyle<br/>        ]<br/>        []<br/>     ] ++ <br/>     [ let backward = reverse forward <br/>       in div [ myStyle] [text backward] <br/>     ])<br/>\u00a0<br/>myStyle\u00a0: Attribute msg<br/>myStyle =<br/>  style<br/>    [ (\"width\", \"100%\")<br/>    , (\"height\", \"20px\")<br/>    , (\"padding\", \"5px 0 0 5px\")<br/>    , (\"font-size\", \"1em\")<br/>    , (\"text-align\", \"left\")<br/>    ]</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"st0\">\"reverse!\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"st0\">\"!esrever\"</span></pre>"}, {"lang": "ERRE", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM REVERSE_STRING<br/>\u00a0<br/>PROCEDURE REVERSE(A$-&gt;R$)<br/>   LOCAL I%<br/>   R$=\"\"<br/>   FOR I=1 TO LEN(A$) DO<br/>     R$=MID$(A$,I,1)+R$<br/>   END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   A$=\"THE FIVE BOXING WIZARDS JUMP QUICKLY\"<br/>   REVERSE(A$-&gt;R$)<br/>   PRINT(R$)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function strrev (s)\u00a0:= chartostr(fliplr(strtochar(s)))<br/>&gt;strrev(\"This is a test!\")<br/>\u00a0!tset a si sihT<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 4, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span><span class=\"kw2\">sequence</span>.e<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>reverse<span class=\"br0\">(</span><span class=\"st0\">\"abcdef\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ezhil", "loc": 48, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>## \u0b87\u0ba8\u0bcd\u0ba4 \u0ba8\u0bbf\u0bb0\u0bb2\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0b9a\u0bb0\u0bae\u0bcd \u0b92\u0ba9\u0bcd\u0bb1\u0bc8\u0ba4\u0bcd \u0ba4\u0bb2\u0bc8\u0b95\u0bc0\u0bb4\u0bbe\u0b95\u0ba4\u0bcd \u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bbf \u0b85\u0b9a\u0bcd\u0b9a\u0bbf\u0b9f\u0bc1\u0bae\u0bcd<br/>## \u0b89\u0ba4\u0bbe\u0bb0\u0ba3\u0bae\u0bbe\u0b95 \"abc\" \u0b8e\u0ba9\u0bcd\u0bb1 \u0b9a\u0bb0\u0bae\u0bcd \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0bbe\u0bb2\u0bcd \u0b85\u0ba4\u0ba9\u0bc8\u0ba4\u0bcd \u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bbf \"cba\" \u0b8e\u0ba9 \u0b85\u0b9a\u0bcd\u0b9a\u0bbf\u0b9f\u0bc1\u0bae\u0bcd<br/>## \"\u0b8e\u0bb4\u0bbf\u0bb2\u0bcd\" \u0bae\u0bca\u0bb4\u0bbf\u0baf\u0bbf\u0ba9\u0bcd\u0bae\u0bc2\u0bb2\u0bae\u0bcd \u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bc1 \u0bb5\u0b95\u0bc8\u0b95\u0bb3\u0bbf\u0bb2\u0bcd \u0b87\u0ba4\u0ba9\u0bc8\u0b9a\u0bcd \u0b9a\u0bc6\u0baf\u0bcd\u0baf\u0bb2\u0bbe\u0bae\u0bcd. \u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bc1 \u0b89\u0ba4\u0bbe\u0bb0\u0ba3\u0b99\u0bcd\u0b95\u0bb3\u0bc1\u0bae\u0bcd \u0b87\u0b99\u0bcd\u0b95\u0bc7 \u0ba4\u0bb0\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0bc1\u0bb3\u0bcd\u0bb3\u0ba9<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0b95 (\u0b9a\u0bb0\u0bae\u0bcd1)<br/>\u00a0<br/>    ## \u0bae\u0bc1\u0ba4\u0bb2\u0bcd \u0bb5\u0b95\u0bc8<br/>\u00a0<br/>    \u0b9a\u0bb0\u0bae\u0bcd2 = \"\"<br/>\u00a0<br/>    @( \u0b9a\u0bb0\u0bae\u0bcd1  \u0b87\u0bb2\u0bcd \u0b87) \u0b92\u0bb5\u0bcd\u0bb5\u0bca\u0ba9\u0bcd\u0bb1\u0bbe\u0b95<br/>          \u0b9a\u0bb0\u0bae\u0bcd2 =  \u0b87 + \u0b9a\u0bb0\u0bae\u0bcd2<br/>        \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b9a\u0bb0\u0bae\u0bcd2<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd\u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0b95 (\u0b9a\u0bb0\u0bae\u0bcd1)<br/>\u00a0<br/>    ## \u0b87\u0bb0\u0ba3\u0bcd\u0b9f\u0bbe\u0bae\u0bcd \u0bb5\u0b95\u0bc8<br/>\u00a0<br/>    \u0b9a\u0bb0\u0ba8\u0bc0\u0bb3\u0bae\u0bcd = len(\u0b9a\u0bb0\u0bae\u0bcd1)<br/>\u00a0<br/>    \u0b9a\u0bb0\u0bae\u0bcd2 = \"\"<br/>\u00a0<br/>    @(\u0b8e\u0ba3\u0bcd = 0, \u0b8e\u0ba3\u0bcd &lt; \u0b9a\u0bb0\u0ba8\u0bc0\u0bb3\u0bae\u0bcd, \u0b8e\u0ba3\u0bcd = \u0b8e\u0ba3\u0bcd + 1) \u0b86\u0b95<br/>\u00a0<br/>      \u0b9a\u0bb0\u0bae\u0bcd2 = \u0b8e\u0b9f\u0bc1(\u0b9a\u0bb0\u0bae\u0bcd1, \u0b8e\u0ba3\u0bcd) + \u0b9a\u0bb0\u0bae\u0bcd2<br/>\u00a0<br/>    \u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>    \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1 \u0b9a\u0bb0\u0bae\u0bcd2<br/>\u00a0<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u00a0<br/>\u0b85 = \u0b89\u0bb3\u0bcd\u0bb3\u0bc0\u0b9f\u0bc1(\"\u0b93\u0bb0\u0bcd \u0b8e\u0bb4\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b9a\u0bcd \u0b9a\u0bb0\u0ba4\u0bcd\u0ba4\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0bb0\u0bc1\u0b99\u0bcd\u0b95\u0bb3\u0bcd \")<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0ba8\u0bc0\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0ba4\u0ba8\u0bcd\u0ba4 \u0b8e\u0bb4\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0b9a\u0bcd \u0b9a\u0bb0\u0bae\u0bcd\" \u0b85<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0b85\u0ba4\u0ba9\u0bc8 \u0bae\u0bc1\u0ba4\u0bb2\u0bcd \u0bb5\u0b95\u0bc8\u0baf\u0bbf\u0bb2\u0bcd \u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bbf\u0baf\u0bc1\u0bb3\u0bcd\u0bb3\u0bcb\u0bae\u0bcd: \" \u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0b95(\u0b85)<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf \"\u0bb5\u0bc7\u0bb1\u0bca\u0bb0\u0bc1 \u0bb5\u0b95\u0bc8\u0baf\u0bbf\u0bb2\u0bcd \u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bbf\u0baf\u0bc1\u0bb3\u0bcd\u0bb3\u0bcb\u0bae\u0bcd: \" \u0bae\u0bc0\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd\u0ba4\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0bc1\u0b95(\u0b85)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "FBSL", "loc": 9, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> StrRev1<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckbyval.shtml\"><span class=\"kw3\">BYVAL</span></a> $p1<span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> $b <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\tREPEAT <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><br/>\t\tb <span class=\"sy0\">=</span> b &amp; RIGHT<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\tp1 <span class=\"sy0\">=</span> LEFT<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span><a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> REPEAT<br/>\t<span class=\"kw1\">RETURN</span> b<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> ReverseString <span class=\"br0\">(</span>s:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">rev</span> <span class=\"br0\">(</span>s.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"hello\" reverse</pre>"}, {"lang": "FALSE", "loc": 3, "block": "<pre class=\"text highlighted_source\">1_<br/>[^$1_=~][]#%<br/>[$1_=~][,]#</pre>"}, {"lang": "Fancy", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"hello world!\" reverse</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: exchange ( a1 a2 -- )<br/>  2dup <a class=\"__cf_email__\" data-cfemail=\"fb98bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> swap <a class=\"__cf_email__\" data-cfemail=\"96f5d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> rot c! swap c!\u00a0;<br/>: reverse ( c-addr u -- )<br/>  1- bounds begin 2dup &gt; while<br/>    2dup exchange<br/>    -1 /string<br/>  repeat 2drop\u00a0;<br/>\u00a0<br/>s\" testing\" 2dup reverse type   \\ gnitset</pre>"}, {"lang": "Fortran", "loc": 16, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> Example<br/>\u00a0<br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"This is a string\"</span><br/>  <span class=\"kw3\">CHARACTER</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, length<br/>\u00a0<br/>  WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> str<br/>  length <span class=\"sy0\">=</span> <span class=\"kw4\">LEN_TRIM</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"co1\">! Ignores trailing blanks. Use LEN(str) to reverse those as well</span><br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, length<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>     temp <span class=\"sy0\">=</span> str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/>     str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> str<span class=\"br0\">(</span>length<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"sy0\">:</span>length<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><br/>     str<span class=\"br0\">(</span>length<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"sy0\">:</span>length<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> str<br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> Example</pre>"}, {"lang": "FreeBASIC", "loc": 14, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> ReverseString<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> s<br/>  <span class=\"kw1\">Dim</span> length <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> r <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">Space</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> length - <span class=\"nu0\">1</span><br/>     r<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = s<span class=\"br0\">[</span>length - <span class=\"nu0\">1</span> - i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> r<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"asdf\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"'\"</span>; s; <span class=\"st0\">\"' reversed is '\"</span>; ReverseString<span class=\"br0\">(</span>s<span class=\"br0\">)</span>; <span class=\"st0\">\"'\"</span></pre>"}, {"lang": "Frink", "loc": 1, "block": "<pre class=\"text highlighted_source\">println[reverse[\"abcdef\"]]</pre>"}, {"lang": "FutureBasic", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as Str31 str<br/>dim as long  i<br/>\u00a0<br/>str = \"123456789abcdefghijk\"<br/>\u00a0<br/>print str<br/>print<br/>\u00a0<br/>for i = str[0] to 1 step -1<br/>print mid$( str, i, 1 );<br/>next i<br/>\u00a0</pre>"}, {"lang": "Futhark", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun main(s: []i32) = s[::-1]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 12, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"asdf\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOutput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span> DownTo <span class=\"nu0\">1</span><br/>  sOutput <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sString, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sOutput<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">Reversed(\"abcdef\");<br/># \"fedcba\"</pre>"}, {"lang": "Gema", "loc": 1, "block": "<pre class=\"text highlighted_source\">\\L&lt;U&gt;<a class=\"__cf_email__\" data-cfemail=\"8bb6cbf9eefdeef9f8ee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{$1}</pre>"}, {"lang": "GFA Basic", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PRINT @reverse$(\"asdf\")<br/>'<br/>FUNCTION reverse$(string$)<br/>  LOCAL result$,i%<br/>  result$=\"\"<br/>  FOR i%=1 TO LEN(string$)<br/>    result$=MID$(string$,i%,1)+result$<br/>  NEXT i%<br/>  RETURN result$<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 76, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"unicode\"</span><br/>    <span class=\"st0\">\"unicode/utf8\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// no encoding</span><br/><span class=\"kw4\">func</span> reverseBytes<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// reverseCodePoints interprets its argument as UTF-8 and ignores bytes</span><br/><span class=\"co1\">// that do not form valid UTF-8.  return value is UTF-8.</span><br/><span class=\"kw4\">func</span> reverseCodePoints<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>rune<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>    start <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// quietly skip invalid UTF-8</span><br/>        <span class=\"kw1\">if</span> c <span class=\"sy2\">!=</span> utf8<span class=\"sy3\">.</span>RuneError <span class=\"sy1\">{</span><br/>            start<span class=\"sy2\">--</span><br/>            r<span class=\"sy1\">[</span>start<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">[</span>start<span class=\"sy1\">:])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// reversePreservingCombiningCharacters interprets its argument as UTF-8</span><br/><span class=\"co1\">// and ignores bytes that do not form valid UTF-8.  return value is UTF-8.</span><br/><span class=\"kw4\">func</span> reversePreservingCombiningCharacters<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> s <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"sy1\">}</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>rune<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>rune<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">))</span><br/>    start <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">);</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// quietly skip invalid UTF-8</span><br/>        <span class=\"kw1\">if</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> utf8<span class=\"sy3\">.</span>RuneError <span class=\"sy1\">{</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> &amp;&amp; <span class=\"sy1\">(</span>unicode<span class=\"sy3\">.</span>Is<span class=\"sy1\">(</span>unicode<span class=\"sy3\">.</span>Mn<span class=\"sy1\">,</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span> <span class=\"sy3\">||</span><br/>            unicode<span class=\"sy3\">.</span>Is<span class=\"sy1\">(</span>unicode<span class=\"sy3\">.</span>Me<span class=\"sy1\">,</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span> <span class=\"sy3\">||</span> unicode<span class=\"sy3\">.</span>Is<span class=\"sy1\">(</span>unicode<span class=\"sy3\">.</span>Mc<span class=\"sy1\">,</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]))</span> <span class=\"sy1\">{</span><br/>            j<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> j <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &gt;<span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> k<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            start<span class=\"sy2\">--</span><br/>            r<span class=\"sy1\">[</span>start<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> j<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">[</span>start<span class=\"sy1\">:]))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    test<span class=\"sy1\">(</span><span class=\"st0\">\"asdf\"</span><span class=\"sy1\">)</span><br/>    test<span class=\"sy1\">(</span><span class=\"st0\">\"as\u20dddf\u0305\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> test<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>original:      \"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> s<span class=\"sy1\">)</span><br/>    r <span class=\"sy2\">:=</span> reverseBytes<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"reversed bytes:\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r<span class=\"sy1\">),</span> r<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"original code points:\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span>rune<span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> s<span class=\"sy1\">)</span><br/>    r <span class=\"sy2\">=</span> reverseCodePoints<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"reversed code points:\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span>rune<span class=\"sy1\">(</span>r<span class=\"sy1\">),</span> r<span class=\"sy1\">)</span><br/>    r <span class=\"sy2\">=</span> reversePreservingCombiningCharacters<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"combining characters:\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span>rune<span class=\"sy1\">(</span>r<span class=\"sy1\">),</span> r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Able was I, 'ere I saw Elba.\"</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Harbour", "loc": 9, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">FUNCTION</span> Reverse<span class=\"br0\">(</span> <span class=\"kw2\">sIn</span> <span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">LOCAL</span> cOut <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> i<br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span> <span class=\"kw2\">sIn</span> <span class=\"br0\">)</span> <span class=\"kw3\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw3\">STEP</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      cOut <span class=\"sy0\">+=</span> <span class=\"kw2\">Substr</span><span class=\"br0\">(</span> <span class=\"kw2\">sIn</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>   <span class=\"kw2\">RETURN</span> cOut</pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 10, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> string <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy1\">,</span> tmp<br/>\u00a0<br/>L <span class=\"sy1\">=</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span> string <span class=\"br0\">)</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> L<span class=\"sy1\">/</span><span class=\"nu0\">2</span><br/>  tmp <span class=\"sy1\">=</span> string<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  string<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> string<span class=\"br0\">(</span>L<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  string<span class=\"br0\">(</span>L<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> tmp<br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> string </pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>s <span class=\"sy1\">:=</span> <span class=\"sy1\">\\</span>arglist<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"asdf\"</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"st0\">\" &lt;-&gt; \"</span><span class=\"sy1\">,</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\"># reverse is built-in</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"st0\">\"asdf\"</span> reverse</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   |.<span class=\"st_h\">'asdf'</span><br/>fdsa</pre>"}, {"lang": "Java", "loc": 3, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> reverseString<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 17, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">//using chained methods</span><br/><span class=\"kw1\">function</span> reverseStr<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//fast method using for loop</span><br/><span class=\"kw1\">function</span> reverseStr<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> o <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> o <span class=\"sy0\">+=</span> s<span class=\"br0\">[</span>i<span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//fast method using while loop (faster with long strings in some browsers when compared with for loop)</span><br/><span class=\"kw1\">function</span> reverseStr<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">,</span> o <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>  while <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span> o <span class=\"sy0\">+=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def reverse_string: explode | reverse | implode;</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">julia&gt; reverse(\"hey\")<br/>\"yeh\"</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>     |\"asdf\"<br/>\"fdsa\"<br/>\u00a0<br/>     | 23 4 5 1<br/>1 5 4 23<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 3, "block": "<pre class=\"text highlighted_source\">fun main(args: Array&lt;String&gt;) {<br/>    println(\"asdf\".reversed())<br/>}</pre>"}, {"lang": "L++", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>include <span class=\"st0\">\"string\"</span> <span class=\"st0\">\"algorithm\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>main<br/>  <span class=\"br0\">(</span>decl std<span class=\"sy0\">::</span><span class=\"me0\">string</span> s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"me0\">getline</span> std<span class=\"sy0\">::</span><span class=\"me0\">cin</span> s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>std<span class=\"sy0\">::</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>s<span class=\"sy0\">.</span>begin<span class=\"br0\">)</span> <span class=\"br0\">(</span>s<span class=\"sy0\">.</span>end<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>prn s<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "LabVIEW", "loc": 2, "block": "<pre class=\"text highlighted_source\">: flip \"\" split reverse \"\" join\u00a0;<br/>\"qwer asdf\" flip .</pre>"}, {"lang": "Lang5", "loc": 2, "block": "<pre class=\"text highlighted_source\">: flip \"\" split reverse \"\" join\u00a0;<br/>\"qwer asdf\" flip .</pre>"}, {"lang": "Lasso", "loc": 2, "block": "<pre class=\"text highlighted_source\">local(input) = 'asdf'<br/>#input-&gt;reverse</pre>"}, {"lang": "LC3 Assembly", "loc": 35, "block": "<pre class=\"text highlighted_source\">        .ORIG      0x3000<br/>\u00a0<br/>        LEA        R1,STRING<br/>        LEA        R2,GNIRTS<br/>        LD         R3,MINUS1<br/>        NOT        R5,R1<br/>        ADD        R5,R5,1<br/>\u00a0<br/>SCAN    LDR        R4,R1,0<br/>        BRZ        COPY<br/>        ADD        R1,R1,1<br/>        BRNZP      SCAN<br/>\u00a0<br/>COPY    ADD        R1,R1,R3<br/>        ADD        R4,R1,R5<br/>        BRN        COPIED<br/>        LDR        R4,R1,0<br/>        STR        R4,R2,0<br/>        ADD        R2,R2,1<br/>        BRNZP      COPY<br/>\u00a0<br/>COPIED  AND        R4,R4,0<br/>        STR        R4,R2,0<br/>\u00a0<br/>        LEA        R0,GNIRTS<br/>        PUTS<br/>\u00a0<br/>        HALT<br/>\u00a0<br/>MINUS1  .FILL      0xFFFF<br/>\u00a0<br/>STRING  .STRINGZ   \"If thou beest he -- but O how fall'n! how chang'd\"<br/>GNIRTS  .BLKW      128<br/>\u00a0<br/>        .END</pre>"}, {"lang": "LFE", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"kw1\">reverse</span> <span class=\"st0\">\"asdf\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"fdsa\"</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 11, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">input</span>$ <span class=\"sy0\">=</span><span class=\"st0\">\"abcdefgABCDEFG012345\"</span><br/><span class=\"kw1\">print</span> <span class=\"kw1\">input</span>$<br/><span class=\"kw1\">print</span> ReversedStr$<span class=\"br0\">(</span> <span class=\"kw1\">input</span>$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ReversedStr$<span class=\"br0\">(</span>in$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>in$<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    ReversedStr$ <span class=\"sy0\">=</span>ReversedStr$ <span class=\"sy0\">+</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">on reverse (str)<br/>  res = \"\"<br/>  repeat with i = str.length down to 1<br/>    put str.char[i] after res<br/>  end repeat<br/>  return res<br/>end</pre>"}, {"lang": "LiveCode", "loc": 6, "block": "<pre class=\"text highlighted_source\">function reverseString S<br/>   repeat with i = length(S) down to 1<br/>      put char i of S after R<br/>   end repeat<br/>   return R<br/>end reverseString</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">print reverse \"cat  \u00a0; tac</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\">theString <span class=\"sy0\">=</span> theString<span class=\"sy0\">:</span>reverse<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "M4", "loc": 1, "block": "<pre class=\"text highlighted_source\">define(`invert',`ifelse(len(`$1'),0,,`invert(substr(`$1',1))'`'substr(`$1',0,1))')</pre>"}, {"lang": "Maclisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>readlist <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>explode <span class=\"st0\">\"my-string\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; StringTools:-Reverse( \"foo\" );<br/>                                 \"oof\"</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringReverse[\"asdf\"]</pre>"}, {"lang": "MATLAB", "loc": 6, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"co2\">'She told me that she spoke English and I said great. '</span><span class=\"sy0\">...</span><br/><span class=\"co2\">'Grabbed her hand out the club and I said let'</span><span class=\"co2\">'s skate.'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>.<span class=\"me1\">etaks</span> s'tel dias <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\">I</span></a> dna bulc eht tuo dnah reh debbarG .<span class=\"me1\">taerg</span> dias <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\">I</span></a> dna hsilgnE ekops ehs taht em dlot ehS</pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">sreverse(\"abcdef\");         /* \"fedcba\" */<br/>\u00a0<br/>sreverse(\"rats live on no evil star\");   /* not a bug\u00a0:o) */</pre>"}, {"lang": "MAXScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">fn reverseString s =<br/>(<br/>    local reversed = \"\"<br/>    for i in s.count to 1 by -1 do reversed += s[i]<br/>    reversed<br/>)</pre>"}, {"lang": "MIPS Assembly", "loc": 69, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># First, it gets the length of the original string<br/># Then, it allocates memory from the copy<br/># Then it copies the pointer to the original string, and adds the strlen<br/>#     subtract 1, then that new pointer is at the last char.<br/># while(strlen)<br/>#     copy char<br/>#     decrement strlen<br/>#     decrement source pointer<br/>#     increment target pointer<br/>\u00a0<br/>.data <br/>\tex_msg_og: .asciiz \"Original string:\\n\"<br/>\tex_msg_cpy: .asciiz \"\\nCopied string:\\n\"<br/>\tstring: .asciiz \"Wow, what a string!\"<br/>\u00a0<br/>.text <br/>\tmain:<br/>\t\tla $v1,string #load addr of string into $v0<br/>\t\tla $t1,($v1)  #copy addr into $t0 for later access<br/>\t\tlb $a1,($v1)  #load byte from string addr<br/>\tstrlen_loop:\t<br/>\t\tbeqz $a1,alloc_mem<br/>\t\taddi $a0,$a0,1 #increment strlen_counter<br/>\t\taddi $v1,$v1,1 #increment ptr<br/>\t\tlb $a1,($v1)   #load the byte <br/>\t\tj strlen_loop<br/>\u00a0<br/>\talloc_mem:<br/>\t\tli $v0,9 #alloc memory, $a0 is arg for how many bytes to allocate<br/>\t\t         #result is stored in $v0<br/>\t\tsyscall<br/>\t\tla $t0,($v0) #$v0 is static, $t0 is the moving ptr<br/>\t\tla $v1,($t1) #get a copy we can increment<br/>\u00a0<br/>\t\tadd $t1,$t1,$a0 #add strlen to our original, static addr to equal last char<br/>\t\tsubi $t1,$t1,1  #previous operation is on NULL byte, i.e. off-by-one error.<br/>\t\t                #this corrects.<br/>\tcopy_str:<br/>\t\tlb $a1,($t1) #copy first byte from source<br/>\u00a0<br/>\tstrcopy_loop:<br/>\t\tbeq $a0,0,exit_procedure <br/>\t\tsb $a1,($t0)            #store the byte at the target pointer<br/>\t\taddi $t0,$t0,1          #increment target ptr<br/>\t\tsubi $t1,$t1,1<br/>\t\tsubi $a0,$a0,1<br/>\t\tlb $a1,($t1)            #load next byte from source ptr<br/>\t\tj strcopy_loop<br/>\u00a0<br/>\texit_procedure:<br/>\t\tla $a1,($v0) #store our string at $v0 so it doesn't get overwritten<br/>\t\tli $v0,4 #set syscall to PRINT<br/>\u00a0<br/>\t\tla $a0,ex_msg_og  #PRINT(\"original string:\")<br/>\t\tsyscall<br/>\u00a0<br/>\t\tla $a0,($v1)      #PRINT(original string)<br/>\t\tsyscall<br/>\u00a0<br/>\t\tla $a0,ex_msg_cpy #PRINT(\"copied string:\")<br/>\t\tsyscall<br/>\u00a0<br/>\t\tla $a0,($a1)      #PRINT(strcopy)<br/>\t\tsyscall<br/>\u00a0<br/>\t\tli $v0,10         #EXIT(0)<br/>\t\tsyscall<br/>\u00a0</pre>"}, {"lang": "Mirah", "loc": 5, "block": "<pre class=\"text highlighted_source\">def reverse(s:string) <br/>    StringBuilder.new(s).reverse<br/>end<br/>\u00a0<br/>puts reverse('reversed')</pre>"}, {"lang": "Modula-2", "loc": 40, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> ReverseStr;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> Write<span class=\"sy0\">,</span>WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> WriteInt<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> WriteInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ReverseStr<span class=\"br0\">(</span>in <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>; <span class=\"kw1\">VAR</span> out <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> ip<span class=\"sy0\">,</span>op <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    ip <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    op <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> in<span class=\"br0\">[</span>ip<span class=\"br0\">]</span> <span class=\"sy0\">#</span> 0C <span class=\"kw1\">DO</span><br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>ip<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>ip<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">WHILE</span> ip&gt;<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        out<span class=\"br0\">[</span>op<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> in<span class=\"br0\">[</span>ip<span class=\"br0\">]</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>op<span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>ip<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> ReverseStr;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> A <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">VAR</span> is<span class=\"sy0\">,</span>os <span class=\"sy0\">:</span> A;<br/><span class=\"kw1\">BEGIN</span><br/>    is <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello World\"</span>;<br/>    ReverseStr<span class=\"br0\">(</span>is<span class=\"sy0\">,</span> os<span class=\"br0\">)</span>;<br/>\u00a0<br/>    WriteString<span class=\"br0\">(</span>is<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    WriteString<span class=\"br0\">(</span>os<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> ReverseStr.</pre>"}, {"lang": "Modula-3", "loc": 16, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Reverse <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Text;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> String<span class=\"br0\">(</span>item<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span> result<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Length</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">0</span> <span class=\"kw1\">BY</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      result <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Cat</span><span class=\"br0\">(</span>result<span class=\"sy0\">,</span> Text.<span class=\"me1\">FromChar</span><span class=\"br0\">(</span>Text.<span class=\"me1\">GetChar</span><span class=\"br0\">(</span>item<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> result;<br/>  <span class=\"kw1\">END</span> String;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>String<span class=\"br0\">(</span><span class=\"st0\">\"Foobarbaz\"</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Reverse.</pre>"}, {"lang": "MUMPS", "loc": 6, "block": "<pre class=\"text highlighted_source\">REVERSE<br/>\u00a0;Take in a string and reverse it using the built in function $REVERSE<br/> NEW S<br/> READ:30 \"Enter a string: \",S<br/> WRITE\u00a0!,$REVERSE(S)<br/> QUIT</pre>"}, {"lang": "Nemerle", "loc": 1, "block": "<pre>ncc -reference:System.Windows.Forms reverse.n</pre>"}, {"lang": "NetRexx", "loc": 11, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>reverseThis = <span class=\"st0\">'asdf'</span><br/>sihTesrever = reverseThis.<span class=\"kw6\">reverse</span><br/>\u00a0<br/><span class=\"kw1\">say</span> reverseThis<br/><span class=\"kw1\">say</span> sihTesrever<br/>\u00a0<br/><span class=\"kw1\">return</span></pre>"}, {"lang": "Nial", "loc": 2, "block": "<pre class=\"text highlighted_source\">reverse 'asdf'<br/>=fdsa</pre>"}, {"lang": "Nim", "loc": 39, "block": "<pre class=\"text highlighted_source\">import unicode<br/>\u00a0<br/>proc reverse(s: var string) =<br/>  for i in 0 .. s.high div 2:<br/>    swap(s[i], s[s.high - i])<br/>\u00a0<br/>proc reversed(s: string): string =<br/>  result = newString(s.len)<br/>  for i,c in s:<br/>    result[s.high - i] = c<br/>\u00a0<br/>proc uniReversed(s: string): string =<br/>  result = newStringOfCap(s.len)<br/>  var tmp: seq[Rune] = @[]<br/>  for r in runes(s):<br/>    tmp.add(r)<br/>  for i in countdown(tmp.high, 0):<br/>    result.add(toUtf8(tmp[i]))<br/>\u00a0<br/>proc isComb(r: Rune): bool =<br/>  (r &gt;=% Rune(0x300) and r &lt;=% Rune(0x36f)) or<br/>    (r &gt;=% Rune(0x1dc0) and r &lt;=% Rune(0x1dff)) or<br/>    (r &gt;=% Rune(0x20d0) and r &lt;=% Rune(0x20ff)) or<br/>    (r &gt;=% Rune(0xfe20) and r &lt;=% Rune(0xfe2f))<br/>\u00a0<br/>proc uniReversedPreserving(s: string): string =<br/>  result = newStringOfCap(s.len)<br/>  var tmp: seq[Rune] = @[]<br/>  for r in runes(s):<br/>    if isComb(r): tmp.insert(r, tmp.high)<br/>    else: tmp.add(r)<br/>  for i in countdown(tmp.high, 0):<br/>    result.add(toUtf8(tmp[i]))<br/>\u00a0<br/>for str in [\"Reverse This!\", \"as\u20dddf\u0305\"]:<br/>  echo \"Original string:       \", str<br/>  echo \"Reversed:              \", reversed(str)<br/>  echo \"UniReversed:           \", uniReversed(str)<br/>  echo \"UniReversedPreserving: \", uniReversedPreserving(str)</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#reverse\"><span class=\"kw1\">reverse</span></a> <span class=\"st0\">\"!dlroW olleH\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>result <span class=\"sy0\">:=</span> <span class=\"st0\">\"asdf\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 20, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>Extended<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>reverseString;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>Extended<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span> reverseString<br/><span class=\"br0\">{</span><br/>    NSUInteger len <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self length<span class=\"br0\">]</span>;<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"sy0\">*</span>rtr<span class=\"sy0\">=</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> stringWithCapacity<span class=\"sy0\">:</span>len<span class=\"br0\">]</span>;<br/>    <span class=\"co2\">//        unichar buf[1];</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>len &gt; <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        unichar uch <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self characterAtIndex<span class=\"sy0\">:--</span>len<span class=\"br0\">]</span>; <br/>        <span class=\"br0\">[</span>rtr appendString<span class=\"sy0\">:</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithCharacters<span class=\"sy0\">:&amp;</span>uch length<span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> rtr;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 9, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> rev_string str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>create len <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> last <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> last <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> last <span class=\"sy0\">-</span> i <span class=\"kw1\">in</span><br/>    res<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>res<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 2, "block": "<pre class=\"octave highlighted_source\">s <span class=\"sy3\">=</span> <span class=\"co4\">\"a string\"</span><span class=\"sy5\">;</span><br/>rev <span class=\"sy3\">=</span> s<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">:</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">reverse</pre>"}, {"lang": "OpenEdge/Progress", "loc": 15, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">FUNCTION</span> reverseString <span class=\"kw1\">RETURNS</span> <span class=\"kw4\">CHARACTER</span> <span class=\"br0\">(</span><br/>   <span class=\"kw1\">INPUT</span> i_c <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cresult <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> ii      <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"kw3\">LENGTH</span><span class=\"br0\">(</span> i_c <span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">cresult</span> <span class=\"sy0\">=</span> cresult <span class=\"sy0\">+</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> i_c<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"kw3\">RETURN</span> cresult<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> reverseString<span class=\"br0\">(</span> <span class=\"st0\">\"asdf\"</span> <span class=\"br0\">)</span> <span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "OOC", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>main: func {<br/>  \"asdf\" reverse() println() // prints \"fdsa\"<br/>}<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>'8 BIT CHARACTERS<br/>\u00a0<br/>string s=\"qwertyuiop\"<br/>sys a,b,i,j,le=len s<br/>'<br/>for i=1 to le<br/>  j=le-i+1<br/>  if j&lt;=i then exit for<br/>  a=asc s,i<br/>  b=asc s,j<br/>  mid s,j,chr a<br/>  mid s,i,chr b<br/>next<br/>'<br/>\u00a0<br/>print s<br/>\u00a0<br/>'16 BIT CHARACTERS<br/>\u00a0<br/>wstring s=\"qwertyuiop\"<br/>sys a,b,i,j,le=len s<br/>'<br/>for i=1 to le<br/>  j=le-i+1<br/>  if j&lt;=i then exit for<br/>  a=unic s,i<br/>  b=unic s,j<br/>  mid s,j,wchr a<br/>  mid s,i,wchr b<br/>next<br/>'<br/>print s<br/>\u00a0</pre>"}, {"lang": "OxygenBasic x86 Assembler", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>string s=\"qwertyuiop\"<br/>sys p=strptr s, le=len s<br/>mov esi,p<br/>mov edi,esi<br/>add edi,le<br/>dec edi<br/>(<br/> cmp esi,edi<br/> jge exit<br/> mov al,[esi]<br/> mov ah,[edi]<br/> mov [esi],ah<br/> mov [edi],al<br/> inc esi<br/> dec edi<br/> repeat<br/>)<br/>\u00a0<br/>print s<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 1, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>Reverse <span class=\"st0\">\"!dlroW olleH\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">Vecrev</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 9, "block": "<pre class=\"pascal highlighted_source\"><span class=\"coMULTI\">{ the result array must be at least as large as the original array }</span><br/><span class=\"kw1\">procedure</span> reverse<span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>min <span class=\"sy1\">..</span> <span class=\"me1\">max</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">char</span><span class=\"sy1\">,</span> <span class=\"kw1\">var</span> result<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>min1 <span class=\"sy1\">..</span> <span class=\"me1\">max1</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> len<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  len <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max<span class=\"sy3\">-</span>min<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> len<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>   result<span class=\"br0\">[</span>min1 <span class=\"sy3\">+</span> len<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">-</span> i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"br0\">[</span>min <span class=\"sy3\">+</span> i<span class=\"br0\">]</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Peloton", "loc": 1, "block": "<pre class=\"text highlighted_source\">&lt;# \u663e\u793a \u6307\u5b9a \u53d8\u91cf \u53cd\u8f6c\u987a\u5e8f \u5b57\u4e32&gt;\u96c6\u88c5\u7bb1|\u732b\u5750\u5728\u57ab\u5b50&lt;/#&gt;</pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"visor\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$flip</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">$string</span><span class=\"sy0\">;</span>  <span class=\"co1\"># becomes \"rosiv\"</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"st0\">\"hello world\"</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"as\u20dddf\u0305\"</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?reverse(\"asdf\")</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/strrev\"><span class=\"kw3\">strrev</span></a><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(pack (flip (chop \"\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df\")))</pre>"}, {"lang": "PL/I", "loc": 1, "block": "<pre class=\"text highlighted_source\">s = reverse(s);</pre>"}, {"lang": "Pop11", "loc": 7, "block": "<pre class=\"text highlighted_source\">define reverse_string(s);<br/>    lvars i, l = length(s);<br/>    for i from l by -1 to 1 do<br/>        s(i);<br/>    endfor;<br/>    consstring(l);<br/>enddefine;</pre>"}, {"lang": "Plain TeX", "loc": 6, "block": "<pre class=\"text highlighted_source\">\\def\\gobtoA#1\\revA{}\\def\\gobtoB#1\\revB{}<br/>\\def\\reverse#1{\\reversei{}#1\\revA\\revB\\revB\\revB\\revB\\revB\\revB\\revB\\revB\\revA}<br/>\\def\\reversei#1#2#3#4#5#6#7#8#9{\\gobtoB#9\\revend\\revB\\reversei{#9#8#7#6#5#4#3#2#1}}<br/>\\def\\revend\\revB\\reversei#1#2\\revA{\\gobtoA#1}<br/>\\reverse{Rosetta}<br/>\\bye</pre>"}, {"lang": "PostScript", "loc": 12, "block": "<pre class=\"text highlighted_source\">/reverse{<br/>/str exch def<br/>/temp str 0 get def<br/>/i 0 def<br/>str length 2 idiv{<br/>/temp str i get def<br/>str i str str length i sub 1 sub get put<br/>str str length i sub 1 sub temp put<br/>/i i 1 add def<br/>}repeat<br/>str pstack<br/>}def</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"asdf\"</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\">reverse<span class=\"br0\">(</span>\"abcd\"<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> string_to_list<span class=\"br0\">(</span>S<span class=\"sy4\">,</span>L<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Debug</span> ReverseString<span class=\"br0\">(</span><span class=\"st0\">\"!dekrow tI\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "Qi", "loc": 1, "block": "<pre class=\"text highlighted_source\">(REVERSE \"ABCD\")</pre>"}, {"lang": "R", "loc": 7, "block": "<pre class=\"text highlighted_source\">revstring &lt;- function(stringtorev) {<br/>   return(<br/>      paste(<br/>           strsplit(stringtorev,\"\")[[1]][nchar(stringtorev):1]<br/>           ,collapse=\"\")<br/>           )<br/>}</pre>"}, {"lang": "Rascal", "loc": 2, "block": "<pre class=\"text highlighted_source\">import String;<br/>reverse(\"string\")</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (string-reverse s)<br/>  (list-&gt;string (reverse (string-&gt;list s))))<br/>\u00a0<br/>(string-reverse \"aoeu\")</pre>"}, {"lang": "RapidQ", "loc": 3, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">print</span> reverse$(<span class=\"st0\">\"This is a test\"</span>)<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"asdf\" reverse</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">print</span> <span class=\"kw3\">reverse</span> <span class=\"st0\">\"asdf\"</span></pre>"}, {"lang": "Red", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt;&gt; reverse \"asdf\"<br/>== \"fdsa\"</pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">with strings'<br/>\"asdf\" reverse puts</pre>"}, {"lang": "REXX", "loc": 8, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program to reverse a string  (and show before and after strings).*/</span><br/>\u00a0<br/>string1 = <span class=\"st0\">'A man, a plan, a canal, Panama!'</span><br/>string2 = <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>string1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">' original string: '</span>  string1<br/><span class=\"kw1\">say</span> <span class=\"st0\">' reversed string: '</span>  string2<br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "RLaB", "loc": 12, "block": "<pre class=\"text highlighted_source\">&gt;&gt; x = \"rosettacode\"<br/>rosettacode<br/>\u00a0<br/>// script<br/>rx = \"\";<br/>for (i in strlen(x):1:-1)<br/>{<br/>  rx = rx + substr(x, i);<br/>}<br/>\u00a0<br/>&gt;&gt; rx<br/>edocattesor</pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cStr = \"asdf\"  cStr2 = \"\"<br/>for x = len(cStr) to 1 step -1 cStr2 += cStr[x] next<br/>See cStr2  # fdsa<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">str = <span class=\"st0\">\"asdf\"</span><br/>reversed = str.<span class=\"me1\">reverse</span></pre>"}, {"lang": "Run BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">string$ = \"123456789abcdefghijk\"<br/>for i = len(string$) to 1 step -1<br/> print mid$(string$,i,1);<br/>next i</pre>"}, {"lang": "Rust", "loc": 12, "block": "<pre class=\"text highlighted_source\">extern crate unicode_segmentation;<br/>use unicode_segmentation::UnicodeSegmentation;<br/>\u00a0<br/>fn main() {<br/>    let s = \"\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\";<br/>    let s2 = \"as\u20dddf\u0305\";<br/>    let reversed: String = s.chars().rev().collect();<br/>    let reversed2: String = UnicodeSegmentation::graphemes(s2, true)<br/>        .rev().collect();<br/>    println!(\"{}\", reversed);<br/>    println!(\"{}\", reversed2);<br/>}</pre>"}, {"lang": "S-lang", "loc": 10, "block": "<pre class=\"text highlighted_source\">variable sa = \"Hello, World\", aa = Char_Type[strlen(sa)+1];<br/>init_char_array(aa, sa);<br/>array_reverse(aa);<br/>% print(aa);<br/>\u00a0<br/>% Unfortunately, strjoin() only joins strings, so we map char()<br/>% [sadly named: actually converts char into single-length string]<br/>% onto the array:<br/>\u00a0<br/>print( strjoin(array_map(String_Type, &amp;char, aa), \"\") );</pre>"}, {"lang": "SAS", "loc": 7, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/><span class=\"kw3\">length</span> a b $11;<br/>a=<span class=\"st0\">\"I am Legend\"</span>;<br/>b=<span class=\"kw3\">reverse</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/><span class=\"kw3\">put</span> a;<br/><span class=\"kw3\">put</span> b;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Sather", "loc": 7, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    s\u00a0::= \"asdf\";<br/>    reversed\u00a0::= s.reverse; <br/>    -- current implementation does not handle multibyte encodings correctly<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><span class=\"st0\">\"asdf\"</span>.<span class=\"me1\">reverse</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scratch", "loc": 18, "block": "<pre class=\"text highlighted_source\">#!/bin/sed -f<br/>\u00a0<br/>/../! b<br/>\u00a0<br/># Reverse a line.  Begin embedding the line between two newlines<br/>s/^.*$/\\<br/>&amp;\\<br/>/<br/>\u00a0<br/># Move first character at the end.  The regexp matches until<br/># there are zero or one characters between the markers<br/>tx<br/>:x<br/>s/\\(\\n.\\)\\(.*\\)\\(.\\n\\)/\\3\\2\\1/<br/>tx<br/>\u00a0<br/># Remove the newline markers<br/>s/\\n//g</pre>"}, {"lang": "Sed", "loc": 18, "block": "<pre class=\"text highlighted_source\">#!/bin/sed -f<br/>\u00a0<br/>/../! b<br/>\u00a0<br/># Reverse a line.  Begin embedding the line between two newlines<br/>s/^.*$/\\<br/>&amp;\\<br/>/<br/>\u00a0<br/># Move first character at the end.  The regexp matches until<br/># there are zero or one characters between the markers<br/>tx<br/>:x<br/>s/\\(\\n.\\)\\(.*\\)\\(.\\n\\)/\\3\\2\\1/<br/>tx<br/>\u00a0<br/># Remove the newline markers<br/>s/\\n//g</pre>"}, {"lang": "Seed7", "loc": 17, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: reverse (in string: stri) is func<br/>  result<br/>    var string: result is \"\";<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    for index range length(stri) downto 1 do<br/>      result &amp;:= stri[index];<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(reverse(\"Was it a cat I saw\"));<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 3, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>main(args(2))\u00a0:= Sequence::reverse(args[1]);</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"st0\">\"asdf\"</span>.<span class=\"me1\">reverse</span>;             <span class=\"co1\"># fdsa</span><br/><span class=\"st0\">\"r\u00e9sum\u00e9 ni\u00f1o\"</span>.<span class=\"me1\">reverse</span>;      <span class=\"co1\"># o\u00f1in \u00e9mus\u00e9r</span></pre>"}, {"lang": "Self", "loc": 1, "block": "<pre class=\"text highlighted_source\">'asdf' copyMutable reverse</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">'asdf' reverse</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"st0\">'asdf'</span> reverse</pre>"}, {"lang": "SNOBOL4", "loc": 2, "block": "<pre class=\"text highlighted_source\">\toutput = reverse(reverse(\"reverse\"))<br/>end</pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">val str_reverse = implode o rev o explode;<br/>val string = \"asdf\";<br/>val reversed = str_reverse string;</pre>"}, {"lang": "Stata", "loc": 6, "block": "<pre class=\"text highlighted_source\">. scalar s=\"ARS LONGA VITA BREVIS\"<br/>. di strreverse(s)<br/>SIVERB ATIV AGNOL SRA<br/>. scalar s=\"\u1f18\u03bd \u1f00\u03c1\u03c7\u1fc7 \u1f10\u03c0\u03bf\u03af\u03b7\u03c3\u03b5\u03bd \u1f41 \u03b8\u03b5\u1f78\u03c2 \u03c4\u1f78\u03bd \u03bf\u1f50\u03c1\u03b1\u03bd\u1f78\u03bd \u03ba\u03b1\u1f76 \u03c4\u1f74\u03bd \u03b3\u1fc6\u03bd\"<br/>. di ustrreverse(s)<br/>\u03bd\u1fc6\u03b3 \u03bd\u1f74\u03c4 \u1f76\u03b1\u03ba \u03bd\u1f78\u03bd\u03b1\u03c1\u1f50\u03bf \u03bd\u1f78\u03c4 \u03c2\u1f78\u03b5\u03b8 \u1f41 \u03bd\u03b5\u03c3\u03b7\u03af\u03bf\u03c0\u1f10 \u1fc7\u03c7\u03c1\u1f00 \u03bd\u1f18</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">func reverseString(s: String) -&gt; String {<br/>  return String(s.characters.reverse())<br/>}<br/>print(reverseString(\"asdf\"))<br/>print(reverseString(\"as\u20dddf\u0305\"))</pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">string</span> reverse asdf</pre>"}, {"lang": "TI-83 BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">:Str1<br/>:For(I,1,length(Ans)-1<br/>:sub(Ans,2I,1)+Ans<br/>:End<br/>:sub(Ans,1,I\u2192Str1</pre>"}, {"lang": "Turing", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>% Reverse a string<br/>\u00a0<br/>var input\u00a0: string (100)<br/>\u00a0<br/>put \"Enter a string to reverse: \" ..<br/>get input<br/>\u00a0<br/>var count\u00a0: int\u00a0:= length(input)<br/>loop<br/>    if count &gt;= 1 then<br/>        put input(count) ..<br/>    else<br/>        exit<br/>    end if<br/>    count\u00a0:= count - 1<br/>end loop<br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 5, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>SET input=\"was it really a big fat cat i saw\"<br/>SET reversetext=TURN (input)<br/>PRINT \"before: \",input<br/>PRINT \"after:  \",reversetext</pre>"}, {"lang": "UNIX Shell", "loc": 8, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/bash</span><br/><span class=\"re2\">str</span>=abcde<br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"co1\">${#str}</span><span class=\"re5\">-1</span>;i<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>;i--<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span> <span class=\"re2\">rev</span>=<span class=\"st0\">\"<span class=\"es2\">$rev</span><span class=\"es3\">${str:$i:1}</span>\"</span>; <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"re1\">$rev</span><br/>\u00a0</pre>"}, {"lang": "Unlambda", "loc": 1, "block": "<pre class=\"text highlighted_source\">``@c`d``s`|k`@c</pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>#cast\u00a0%s<br/>\u00a0<br/>example = ~&amp;x 'asdf'<br/>\u00a0<br/>verbose_example = reverse 'asdf'</pre>"}, {"lang": "Vala", "loc": 12, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tstdout.<span class=\"me1\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"Please, input a string.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">var</span> str <span class=\"sy0\">=</span> <span class=\"kw3\">new</span> StringBuilder <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> args.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tstr.<span class=\"me1\">append</span> <span class=\"br0\">(</span>args<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tstdout.<span class=\"me1\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>, str.<span class=\"me1\">str</span>.<span class=\"me1\">strip</span> <span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 12, "block": "<pre class=\"text highlighted_source\">Public Function Reverse(aString as String) as String<br/>' returns the reversed string<br/>dim L as integer        'length of string<br/>dim newString as string<br/>\u00a0<br/>newString = \"\"<br/>L = len(aString)<br/>for i = L to 1 step -1<br/> newString = newString &amp; mid$(aString, i, 1)<br/>next<br/>Reverse = newString<br/>End Function</pre>"}, {"lang": "VBScript", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>WScript.Echo StrReverse(\"asdf\")<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 4, "block": "<pre class=\"vedit highlighted_source\">Reg_Empty<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>BOL<span class=\"sy0\">;</span> <span class=\"sy0\">!</span>At_EOL<span class=\"sy0\">;</span> Char<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">,</span> CP<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> INSERT<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 5, "block": "<pre class=\"vbnet highlighted_source\">  <span class=\"kw1\">Function</span> Reverse<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> s <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>    <span class=\"kw1\">Dim</span> t<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">Char</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"me1\">toCharArray</span><br/>    Array<span class=\"sy0\">.</span><span class=\"me1\">reverse</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw1\">new</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Wart", "loc": 1, "block": "<pre class=\"text highlighted_source\">(rev \"asdf\")</pre>"}, {"lang": "Wortel", "loc": 4, "block": "<pre class=\"text highlighted_source\">; the @rev operator reverses strings and arrays<br/>@rev \"abc\"\u00a0; returns \"cba\"<br/>; or the same thing using a pointer expression<br/>!~r \"abc\"</pre>"}, {"lang": "XPL0", "loc": 23, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>string 0;               \\use zero-terminated strings, instead of MSb terminated<br/>\u00a0<br/>func StrLen(Str);       \\Return the number of characters in an ASCIIZ string<br/>char Str;<br/>int  I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>        if Str(I) = 0 then return I;<br/>\u00a0<br/>func RevStr(S);         \\Reverse the order of the bytes in a string<br/>char S;<br/>int  L, I, T;<br/>[L:= StrLen(S);<br/>for I:= 0 to L/2-1 do<br/>        [T:= S(I);  S(I):= S(L-I-1);  S(L-I-1):= T];<br/>return S;<br/>];<br/>\u00a0<br/>[Text(0, RevStr(\"a\")); CrLf(0);<br/> Text(0, RevStr(\"ab\")); CrLf(0);<br/> Text(0, RevStr(\"abc\")); CrLf(0);<br/> Text(0, RevStr(\"Able was I ere I saw Elba.\")); CrLf(0);<br/>]</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre class=\"text highlighted_source\">strchar(strchar(\"asdf\")(:-1)(::-1))</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre>\"this is a test\".reverse()</pre>"}]}