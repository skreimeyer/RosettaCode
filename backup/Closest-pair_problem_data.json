{"task": "Closest-pair_problem", "blocks": [{"lang": "360 Assembly", "loc": 129, "block": "<pre class=\"text highlighted_source\">*        Closest Pair Problem      10/03/2017<br/>CLOSEST  CSECT<br/>         USING  CLOSEST,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R6,1               i=1<br/>         LA     R7,2               j=2<br/>         BAL    R14,DDCALC         dd=(px(i)-px(j))^2+(py(i)-py(j))^2<br/>         BAL    R14,DDSTORE        ddmin=dd; ii=i; jj=j<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n<br/>         BAL    R14,DDCALC         dd=(px(i)-px(j))^2+(py(i)-py(j))^2<br/>       IF CP,DD,GT,=P'0' THEN          if dd&gt;0 then<br/>       IF CP,DD,LT,DDMIN THEN            if dd&lt;ddmin then<br/>         BAL    R14,DDSTORE                ddmin=dd; ii=i; jj=j<br/>       ENDIF    ,                        endif<br/>       ENDIF    ,                      endif<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         ZAP    WPD,DDMIN          ddmin<br/>         DP     WPD,=PL8'2'        ddmin/2<br/>         ZAP    SQRT2,WPD(8)       sqrt2=ddmin/2<br/>         ZAP    SQRT1,DDMIN        sqrt1=ddmin<br/>       DO WHILE=(CP,SQRT1,NE,SQRT2)  do while sqrt1&lt;&gt;sqrt2<br/>         ZAP    SQRT1,SQRT2          sqrt1=sqrt2<br/>         ZAP    WPD,DDMIN            ddmin<br/>         DP     WPD,SQRT1            /sqrt1<br/>         ZAP    WP1,WPD(8)           ddmin/sqrt1<br/>         AP     WP1,SQRT1            +sqrt1<br/>         ZAP    WPD,WP1              ~<br/>         DP     WPD,=PL8'2'          /2<br/>         ZAP    SQRT2,WPD(8)         sqrt2=(sqrt1+(ddmin/sqrt1))/2<br/>       ENDDO    ,                  enddo while<br/>         MVC    PG,=CL80'the minimum distance '<br/>         ZAP    WP1,SQRT2          sqrt2<br/>         BAL    R14,EDITPK         edit <br/>         MVC    PG+21(L'WC),WC     output<br/>         XPRNT  PG,L'PG            print buffer<br/>         XPRNT  =CL22'is between the points:',22<br/>         MVC    PG,PGP             init buffer<br/>         L      R1,II              ii<br/>         SLA    R1,4               *16<br/>         LA     R4,PXY-16(R1)      @px(ii)<br/>         MVC    WP1,0(R4)          px(ii)<br/>         BAL    R14,EDITPK         edit <br/>         MVC    PG+3(L'WC),WC      output<br/>         MVC    WP1,8(R4)          py(ii)<br/>         BAL    R14,EDITPK         edit <br/>         MVC    PG+21(L'WC),WC     output<br/>         XPRNT  PG,L'PG            print buffer<br/>         MVC    PG,PGP             init buffer<br/>         L      R1,JJ              jj<br/>         SLA    R1,4               *16<br/>         LA     R4,PXY-16(R1)      @px(jj)<br/>         MVC    WP1,0(R4)          px(jj)<br/>         BAL    R14,EDITPK         edit <br/>         MVC    PG+3(L'WC),WC      output<br/>         MVC    WP1,8(R4)          py(jj)<br/>         BAL    R14,EDITPK         edit <br/>         MVC    PG+21(L'WC),WC     output<br/>         XPRNT  PG,L'PG            print buffer<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>DDCALC   EQU    *             ---- dd=(px(i)-px(j))^2+(py(i)-py(j))^2<br/>         LR     R1,R6              i<br/>         SLA    R1,4               *16<br/>         LA     R4,PXY-16(R1)      @px(i)<br/>         LR     R1,R7              j<br/>         SLA    R1,4               *16<br/>         LA     R5,PXY-16(R1)      @px(j)<br/>         ZAP    WP1,0(8,R4)        px(i)<br/>         ZAP    WP2,0(8,R5)        px(j)<br/>         SP     WP1,WP2            px(i)-px(j)<br/>         ZAP    WPS,WP1            =<br/>         MP     WP1,WPS            (px(i)-px(j))*(px(i)-px(j))<br/>         ZAP    WP2,8(8,R4)        py(i)<br/>         ZAP    WP3,8(8,R5)        py(j)<br/>         SP     WP2,WP3            py(i)-py(j)<br/>         ZAP    WPS,WP2            =<br/>         MP     WP2,WPS            (py(i)-py(j))*(py(i)-py(j))<br/>         AP     WP1,WP2            (px(i)-px(j))^2+(py(i)-py(j))^2<br/>         ZAP    DD,WP1             dd=(px(i)-px(j))^2+(py(i)-py(j))^2<br/>         BR     R14           ---- return<br/>DDSTORE  EQU    *             ---- ddmin=dd; ii=i; jj=j<br/>         ZAP    DDMIN,DD           ddmin=dd<br/>         ST     R6,II              ii=i<br/>         ST     R7,JJ              jj=j<br/>         BR     R14           ---- return<br/>EDITPK   EQU    *             ---- <br/>         MVC    WM,MASK            set mask<br/>         EDMK   WM,WP1             edit and mark<br/>         BCTR   R1,0               -1<br/>         MVC    0(1,R1),WM+17      set sign<br/>         MVC    WC,WM              len17&lt;-len18<br/>         BR     R14           ---- return<br/>N        DC     A((PGP-PXY)/16)<br/>PXY      DC     PL8'0.654682',PL8'0.925557',PL8'0.409382',PL8'0.619391'<br/>         DC     PL8'0.891663',PL8'0.888594',PL8'0.716629',PL8'0.996200'<br/>         DC     PL8'0.477721',PL8'0.946355',PL8'0.925092',PL8'0.818220'<br/>         DC     PL8'0.624291',PL8'0.142924',PL8'0.211332',PL8'0.221507'<br/>         DC     PL8'0.293786',PL8'0.691701',PL8'0.839186',PL8'0.728260'<br/>PGP      DC     CL80'  [+xxxxxxxxx.xxxxxx,+xxxxxxxxx.xxxxxx]'<br/>MASK     DC     C' ',7X'20',X'21',X'20',C'.',6X'20',C'-'  CL18 15num<br/>II       DS     F<br/>JJ       DS     F<br/>DD       DS     PL8<br/>DDMIN    DS     PL8<br/>SQRT1    DS     PL8<br/>SQRT2    DS     PL8<br/>WP1      DS     PL8<br/>WP2      DS     PL8<br/>WP3      DS     PL8<br/>WPS      DS     PL8<br/>WPD      DS     PL16<br/>WM       DS     CL18<br/>WC       DS     CL17<br/>PG       DS     CL80<br/>         YREGS<br/>         END    CLOSEST</pre>"}, {"lang": "Ada", "loc": 67, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Closest <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Math <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span> <span class=\"br0\">(</span>Float<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Dimension\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">2</span>;<br/>   <span class=\"kw3\">type</span> Vector <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Dimension</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Float;<br/>   <span class=\"kw3\">type</span> Matrix <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Vector;<br/>\u00a0<br/>   <span class=\"co1\">-- calculate the distance of two points</span><br/>   <span class=\"kw3\">function</span> Distance <span class=\"br0\">(</span>Left, Right\u00a0: Vector<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      Result\u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>      Offset\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         Result\u00a0:= Result + <span class=\"br0\">(</span>Left<span class=\"br0\">(</span>Left'First + Offset<span class=\"br0\">)</span> - Right<span class=\"br0\">(</span>Right'First + Offset<span class=\"br0\">)</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span>;<br/>         Offset\u00a0:= Offset + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Offset &gt;= Left'Length;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Math.<span class=\"me1\">Sqrt</span> <span class=\"br0\">(</span>Result<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Distance;<br/>\u00a0<br/>   <span class=\"co1\">-- determine the two closest points inside a cloud of vectors</span><br/>   <span class=\"kw3\">function</span> Get_Closest_Points <span class=\"br0\">(</span>Cloud\u00a0: Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Matrix <span class=\"kw1\">is</span><br/>      Result\u00a0: Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      Min_Distance\u00a0: Float;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Cloud'Length<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> Constraint_Error;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Result\u00a0:= <span class=\"br0\">(</span>Cloud <span class=\"br0\">(</span>Cloud'First<span class=\"br0\">)</span>, Cloud <span class=\"br0\">(</span>Cloud'First + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Min_Distance\u00a0:= Distance <span class=\"br0\">(</span>Cloud <span class=\"br0\">(</span>Cloud'First<span class=\"br0\">)</span>, Cloud <span class=\"br0\">(</span>Cloud'First + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Cloud'First <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> .. <span class=\"me1\">Cloud</span>'Last<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> I + <span class=\"nu0\">1</span> .. <span class=\"me1\">Cloud</span>'Last<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">if</span> Distance <span class=\"br0\">(</span>Cloud <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Cloud <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span> &lt; Min_Distance <span class=\"kw1\">then</span><br/>               Min_Distance\u00a0:= Distance <span class=\"br0\">(</span>Cloud <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Cloud <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               Result\u00a0:= <span class=\"br0\">(</span>Cloud <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Cloud <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Get_Closest_Points;<br/>\u00a0<br/>   Test_Cloud\u00a0: <span class=\"kw3\">constant</span> Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,  <span class=\"br0\">(</span><span class=\"nu0\">9.0</span>, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span>,<br/>                                               <span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>,  <span class=\"br0\">(</span><span class=\"nu0\">8.0</span>, <span class=\"nu0\">4.0</span><span class=\"br0\">)</span>,<br/>                                               <span class=\"br0\">(</span><span class=\"nu0\">7.0</span>, <span class=\"nu0\">4.0</span><span class=\"br0\">)</span>,  <span class=\"br0\">(</span><span class=\"nu0\">9.0</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>,<br/>                                               <span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>,  <span class=\"br0\">(</span><span class=\"nu0\">8.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>,<br/>                                               <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">9.0</span>, <span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Closest_Points\u00a0: Matrix\u00a0:= Get_Closest_Points <span class=\"br0\">(</span>Test_Cloud<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Second_Test\u00a0: <span class=\"kw3\">constant</span> Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">0.654682</span>, <span class=\"nu0\">0.925557</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0.409382</span>, <span class=\"nu0\">0.619391</span><span class=\"br0\">)</span>,<br/>                                                <span class=\"br0\">(</span><span class=\"nu0\">0.891663</span>, <span class=\"nu0\">0.888594</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0.716629</span>,   <span class=\"nu0\">0.9962</span><span class=\"br0\">)</span>,<br/>                                                <span class=\"br0\">(</span><span class=\"nu0\">0.477721</span>, <span class=\"nu0\">0.946355</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0.925092</span>,  <span class=\"nu0\">0.81822</span><span class=\"br0\">)</span>,<br/>                                                <span class=\"br0\">(</span><span class=\"nu0\">0.624291</span>, <span class=\"nu0\">0.142924</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0.211332</span>, <span class=\"nu0\">0.221507</span><span class=\"br0\">)</span>,<br/>                                                <span class=\"br0\">(</span><span class=\"nu0\">0.293786</span>, <span class=\"nu0\">0.691701</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">0.839186</span>,  <span class=\"nu0\">0.72826</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Second_Points\u00a0: Matrix\u00a0:= Get_Closest_Points <span class=\"br0\">(</span>Second_Test<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Closest Points:\"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"P1: \"</span> &amp; Float'Image <span class=\"br0\">(</span>Closest_Points <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Float'Image <span class=\"br0\">(</span>Closest_Points <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"P2: \"</span> &amp; Float'Image <span class=\"br0\">(</span>Closest_Points <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Float'Image <span class=\"br0\">(</span>Closest_Points <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Distance: \"</span> &amp; Float'Image <span class=\"br0\">(</span>Distance <span class=\"br0\">(</span>Closest_Points <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Closest_Points <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Closest Points 2:\"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"P1: \"</span> &amp; Float'Image <span class=\"br0\">(</span>Second_Points <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Float'Image <span class=\"br0\">(</span>Second_Points <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"P2: \"</span> &amp; Float'Image <span class=\"br0\">(</span>Second_Points <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Float'Image <span class=\"br0\">(</span>Second_Points <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Distance: \"</span> &amp; Float'Image <span class=\"br0\">(</span>Distance <span class=\"br0\">(</span>Second_Points <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Second_Points <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Closest;</pre>"}, {"lang": "AWK", "loc": 28, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f CLOSEST-PAIR_PROBLEM.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.654682</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.925557</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.409382</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.619391</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.891663</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.888594</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.716629</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.996200</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.477721</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.946355</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.925092</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.818220</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.624291</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.142924</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.211332</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.221507</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.293786</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.691701</span><br/>    x<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.839186</span>\u00a0; y<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">0.728260</span><br/>    min = 1E20<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=i<span class=\"sy3\">+</span><span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span>n; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dsq = <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">-</span>x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">^</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>y<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">-</span>y<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">^</span><span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dsq <span class=\"sy2\">&lt;</span> min<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          min = dsq<br/>          mini = i<br/>          minj = j<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"distance between (%.6f,%.6f) and (%.6f,%.6f) is\u00a0%g<span class=\"es0\">\\n</span>\"</span>,x<span class=\"br0\">[</span>mini<span class=\"br0\">]</span>,y<span class=\"br0\">[</span>mini<span class=\"br0\">]</span>,x<span class=\"br0\">[</span>minj<span class=\"br0\">]</span>,y<span class=\"br0\">[</span>minj<span class=\"br0\">]</span>,<span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>min<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 27, "block": "<pre class=\"text highlighted_source\">      DIM x(9), y(9)<br/>\u00a0<br/>      FOR I% = 0 TO 9<br/>        READ x(I%), y(I%)<br/>      NEXT<br/>\u00a0<br/>      min = 1E30<br/>      FOR I% = 0 TO 8<br/>        FOR J% = I%+1 TO 9<br/>          dsq = (x(I%) - x(J%))^2 + (y(I%) - y(J%))^2<br/>          IF dsq &lt; min min = dsq\u00a0: mini% = I%\u00a0: minj% = J%<br/>        NEXT<br/>      NEXT I%<br/>      PRINT \"Closest pair is \";mini% \" and \";minj% \" at distance \"; SQR(min)<br/>      END<br/>\u00a0<br/>      DATA  0.654682, 0.925557<br/>      DATA  0.409382, 0.619391<br/>      DATA  0.891663, 0.888594<br/>      DATA  0.716629, 0.996200<br/>      DATA  0.477721, 0.946355<br/>      DATA  0.925092, 0.818220<br/>      DATA  0.624291, 0.142924<br/>      DATA  0.211332, 0.221507<br/>      DATA  0.293786, 0.691701<br/>      DATA  0.839186, 0.728260<br/>\u00a0</pre>"}, {"lang": "C", "loc": 115, "block": "<pre class=\"cpp highlighted_source\"><span class=\"coMULTI\">/*<br/>\tAuthor: Kevin Bacon<br/>\tDate: 04/03/2014<br/>\tTask: Closest-pair problem<br/>*/</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;chrono&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> point_t<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span>point_t, point_t<span class=\"sy1\">&gt;</span> points_t<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> distance_between<span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>b.<span class=\"me1\">first</span> <span class=\"sy2\">-</span> a.<span class=\"me1\">first</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy2\">+</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>b.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> a.<span class=\"me1\">second</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, points_t<span class=\"sy1\">&gt;</span> find_closest_brute<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> points<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>points.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">auto</span> minDistance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>distance_between<span class=\"br0\">(</span>points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpoints_t minPoints <span class=\"sy1\">=</span> <span class=\"br0\">{</span> points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy1\">=</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">auto</span> newDistance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>distance_between<span class=\"br0\">(</span><span class=\"sy2\">*</span>i, <span class=\"sy2\">*</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>newDistance <span class=\"sy1\">&lt;</span> minDistance<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tminDistance <span class=\"sy1\">=</span> newDistance<span class=\"sy4\">;</span><br/>\t\t\t\tminPoints.<span class=\"me1\">first</span> <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>i<span class=\"sy4\">;</span><br/>\t\t\t\tminPoints.<span class=\"me1\">second</span> <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>j<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span> minDistance, minPoints <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, points_t<span class=\"sy1\">&gt;</span> find_closest_optimized<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> xP,<br/>\t<span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> yP<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>xP.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> find_closest_brute<span class=\"br0\">(</span>xP<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">auto</span> N <span class=\"sy1\">=</span> xP.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xL <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xR <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>N <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>xL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>N <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>xR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xM <span class=\"sy1\">=</span> xP.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"br0\">(</span>N<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yL <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yR <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>yL<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>xM<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> p.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;=</span> xM<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>yR<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>xM<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> p.<span class=\"me1\">first</span> <span class=\"sy1\">&gt;</span> xM<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> p1 <span class=\"sy1\">=</span> find_closest_optimized<span class=\"br0\">(</span>xL, yL<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> p2 <span class=\"sy1\">=</span> find_closest_optimized<span class=\"br0\">(</span>xR, yR<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> minPair <span class=\"sy1\">=</span> <span class=\"br0\">(</span>p1.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;=</span> p2.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> p1 <span class=\"sy4\">:</span> p2<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yS <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>minPair, <span class=\"sy3\">&amp;</span>xM<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>xM <span class=\"sy2\">-</span> p.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> minPair.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> result <span class=\"sy1\">=</span> minPair<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> k <span class=\"sy1\">=</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> k <span class=\"sy3\">!</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span><br/>\t\t <span class=\"br0\">(</span><span class=\"br0\">(</span>k<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second <span class=\"sy2\">-</span> i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> minPair.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">auto</span> newDistance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>distance_between<span class=\"br0\">(</span><span class=\"sy2\">*</span>k, <span class=\"sy2\">*</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>newDistance <span class=\"sy1\">&lt;</span> result.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tresult <span class=\"sy1\">=</span> <span class=\"br0\">{</span> newDistance, <span class=\"br0\">{</span> <span class=\"sy2\">*</span>k, <span class=\"sy2\">*</span>i <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_point<span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> point<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"(\"</span> <span class=\"sy1\">&lt;&lt;</span> point.<span class=\"me1\">first</span><br/>\t\t<span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> point.<span class=\"me1\">second</span><br/>\t\t<span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\")\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">default_random_engine</span> re<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">chrono</span><span class=\"sy4\">::</span><span class=\"me2\">system_clock</span><span class=\"sy4\">::</span><span class=\"me2\">to_time_t</span><span class=\"br0\">(</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"me2\">chrono</span><span class=\"sy4\">::</span><span class=\"me2\">system_clock</span><span class=\"sy4\">::</span><span class=\"me2\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">uniform_real_distribution</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> urd<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu16\">500.0</span>, <span class=\"nu16\">500.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span> points<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">generate</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>urd, <span class=\"sy3\">&amp;</span>re<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> point_t <span class=\"br0\">{</span> <span class=\"nu0\">1000</span> <span class=\"sy2\">+</span> urd<span class=\"br0\">(</span>re<span class=\"br0\">)</span>, <span class=\"nu0\">1000</span> <span class=\"sy2\">+</span> urd<span class=\"br0\">(</span>re<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> answer <span class=\"sy1\">=</span> find_closest_brute<span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> a.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xP <span class=\"sy1\">=</span> points<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> a.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">second</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yP <span class=\"sy1\">=</span> points<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Min distance (brute): \"</span> <span class=\"sy1\">&lt;&lt;</span> answer.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">second</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tanswer <span class=\"sy1\">=</span> find_closest_optimized<span class=\"br0\">(</span>xP, yP<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Min distance (optimized): \"</span> <span class=\"sy1\">&lt;&lt;</span> answer.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">second</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 115, "block": "<pre class=\"cpp highlighted_source\"><span class=\"coMULTI\">/*<br/>\tAuthor: Kevin Bacon<br/>\tDate: 04/03/2014<br/>\tTask: Closest-pair problem<br/>*/</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;chrono&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> point_t<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span>point_t, point_t<span class=\"sy1\">&gt;</span> points_t<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> distance_between<span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>b.<span class=\"me1\">first</span> <span class=\"sy2\">-</span> a.<span class=\"me1\">first</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy2\">+</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>b.<span class=\"me1\">second</span> <span class=\"sy2\">-</span> a.<span class=\"me1\">second</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, points_t<span class=\"sy1\">&gt;</span> find_closest_brute<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> points<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>points.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">auto</span> minDistance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>distance_between<span class=\"br0\">(</span>points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpoints_t minPoints <span class=\"sy1\">=</span> <span class=\"br0\">{</span> points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, points.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy1\">=</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">auto</span> newDistance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>distance_between<span class=\"br0\">(</span><span class=\"sy2\">*</span>i, <span class=\"sy2\">*</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>newDistance <span class=\"sy1\">&lt;</span> minDistance<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tminDistance <span class=\"sy1\">=</span> newDistance<span class=\"sy4\">;</span><br/>\t\t\t\tminPoints.<span class=\"me1\">first</span> <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>i<span class=\"sy4\">;</span><br/>\t\t\t\tminPoints.<span class=\"me1\">second</span> <span class=\"sy1\">=</span> <span class=\"sy2\">*</span>j<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span> minDistance, minPoints <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>, points_t<span class=\"sy1\">&gt;</span> find_closest_optimized<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> xP,<br/>\t<span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> yP<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>xP.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> find_closest_brute<span class=\"br0\">(</span>xP<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">auto</span> N <span class=\"sy1\">=</span> xP.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xL <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xR <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>N <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>xL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span>N <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>xR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xM <span class=\"sy1\">=</span> xP.<span class=\"me1\">at</span><span class=\"br0\">(</span><span class=\"br0\">(</span>N<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yL <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yR <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>yL<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>xM<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> p.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;=</span> xM<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>yR<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>xM<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> p.<span class=\"me1\">first</span> <span class=\"sy1\">&gt;</span> xM<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> p1 <span class=\"sy1\">=</span> find_closest_optimized<span class=\"br0\">(</span>xL, yL<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> p2 <span class=\"sy1\">=</span> find_closest_optimized<span class=\"br0\">(</span>xR, yR<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> minPair <span class=\"sy1\">=</span> <span class=\"br0\">(</span>p1.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;=</span> p2.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> p1 <span class=\"sy4\">:</span> p2<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yS <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">copy_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yP<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">back_inserter</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>minPair, <span class=\"sy3\">&amp;</span>xM<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>xM <span class=\"sy2\">-</span> p.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> minPair.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> result <span class=\"sy1\">=</span> minPair<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> k <span class=\"sy1\">=</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> k <span class=\"sy3\">!</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>yS<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span><br/>\t\t <span class=\"br0\">(</span><span class=\"br0\">(</span>k<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second <span class=\"sy2\">-</span> i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> minPair.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">auto</span> newDistance <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span>distance_between<span class=\"br0\">(</span><span class=\"sy2\">*</span>k, <span class=\"sy2\">*</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>newDistance <span class=\"sy1\">&lt;</span> result.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tresult <span class=\"sy1\">=</span> <span class=\"br0\">{</span> newDistance, <span class=\"br0\">{</span> <span class=\"sy2\">*</span>k, <span class=\"sy2\">*</span>i <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_point<span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> point<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"(\"</span> <span class=\"sy1\">&lt;&lt;</span> point.<span class=\"me1\">first</span><br/>\t\t<span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> point.<span class=\"me1\">second</span><br/>\t\t<span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\")\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">default_random_engine</span> re<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">chrono</span><span class=\"sy4\">::</span><span class=\"me2\">system_clock</span><span class=\"sy4\">::</span><span class=\"me2\">to_time_t</span><span class=\"br0\">(</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"me2\">chrono</span><span class=\"sy4\">::</span><span class=\"me2\">system_clock</span><span class=\"sy4\">::</span><span class=\"me2\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">uniform_real_distribution</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> urd<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu16\">500.0</span>, <span class=\"nu16\">500.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>point_t<span class=\"sy1\">&gt;</span> points<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">generate</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span>urd, <span class=\"sy3\">&amp;</span>re<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> point_t <span class=\"br0\">{</span> <span class=\"nu0\">1000</span> <span class=\"sy2\">+</span> urd<span class=\"br0\">(</span>re<span class=\"br0\">)</span>, <span class=\"nu0\">1000</span> <span class=\"sy2\">+</span> urd<span class=\"br0\">(</span>re<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> answer <span class=\"sy1\">=</span> find_closest_brute<span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> a.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">first</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> xP <span class=\"sy1\">=</span> points<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> point_t<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> a.<span class=\"me1\">second</span> <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">second</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> yP <span class=\"sy1\">=</span> points<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Min distance (brute): \"</span> <span class=\"sy1\">&lt;&lt;</span> answer.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">second</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tanswer <span class=\"sy1\">=</span> find_closest_optimized<span class=\"br0\">(</span>xP, yP<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Min distance (optimized): \"</span> <span class=\"sy1\">&lt;&lt;</span> answer.<span class=\"me1\">first</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">first</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>\tprint_point<span class=\"br0\">(</span>answer.<span class=\"me1\">second</span>.<span class=\"me1\">second</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 38, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> distance <span class=\"br0\">[</span><span class=\"br0\">[</span>x1 y1<span class=\"br0\">]</span> <span class=\"br0\">[</span>x2 y2<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>dx <span class=\"br0\">(</span><span class=\"sy0\">-</span> x2 x1<span class=\"br0\">)</span>, dy <span class=\"br0\">(</span><span class=\"sy0\">-</span> y2 y1<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> dx dx<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> dy dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> brute<span class=\"sy0\">-</span>force <span class=\"br0\">[</span>points<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">count</span> points<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">apply</span> min<span class=\"sy0\">-</span>key <span class=\"kw1\">first</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>i <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span>,\u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>p1 <span class=\"br0\">(</span>nth points i<span class=\"br0\">)</span><span class=\"br0\">]</span>,<br/>                   j <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> n<span class=\"br0\">)</span>,\u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>p2 <span class=\"br0\">(</span>nth points j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">[</span><span class=\"br0\">(</span>distance p1 p2<span class=\"br0\">)</span> p1 p2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> combine <span class=\"br0\">[</span>yS <span class=\"br0\">[</span>dmin pmin1 pmin2<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> min<span class=\"sy0\">-</span>key <span class=\"kw1\">first</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>p1 p2<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> yS<span class=\"br0\">)</span><br/>                    \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>_ py1<span class=\"br0\">]</span> p1 <span class=\"br0\">[</span>_ py2<span class=\"br0\">]</span> p2<span class=\"br0\">]</span><br/>                    \u00a0:<span class=\"me1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> py1 py2<span class=\"br0\">)</span> dmin<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                 <span class=\"br0\">[</span><span class=\"br0\">(</span>distance p1 p2<span class=\"br0\">)</span> p1 p2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">[</span>dmin pmin1 pmin2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> closest<span class=\"sy0\">-</span>pair<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>points<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>closest<span class=\"sy0\">-</span>pair<br/>      <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> <span class=\"kw1\">first</span> points<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> second points<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>xP yP<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> xP<span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>brute<span class=\"sy0\">-</span>force xP<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>xL xR<span class=\"br0\">]</span> <span class=\"br0\">(</span>partition<span class=\"sy0\">-</span>all <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>ceil <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> xP<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> xP<span class=\"br0\">)</span><br/>             <span class=\"br0\">[</span>xm _<span class=\"br0\">]</span> <span class=\"br0\">(</span>last xL<span class=\"br0\">)</span><br/>             <span class=\"br0\">{</span>yL true yR false<span class=\"br0\">}</span> <span class=\"br0\">(</span>group<span class=\"sy0\">-</span>by <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>px _<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> px xm<span class=\"br0\">)</span><span class=\"br0\">)</span> yP<span class=\"br0\">)</span><br/>             dL<span class=\"sy0\">&amp;</span>pairL <span class=\"br0\">(</span>closest<span class=\"sy0\">-</span>pair xL yL<span class=\"br0\">)</span><br/>             dR<span class=\"sy0\">&amp;</span>pairR <span class=\"br0\">(</span>closest<span class=\"sy0\">-</span>pair xR yR<span class=\"br0\">)</span><br/>             <span class=\"br0\">[</span>dmin pmin1 pmin2<span class=\"br0\">]</span> <span class=\"br0\">(</span>min<span class=\"sy0\">-</span>key <span class=\"kw1\">first</span> dL<span class=\"sy0\">&amp;</span>pairL dR<span class=\"sy0\">&amp;</span>pairR<span class=\"br0\">)</span><br/>             <span class=\"br0\">{</span>yS true<span class=\"br0\">}</span> <span class=\"br0\">(</span>group<span class=\"sy0\">-</span>by <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>px _<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>abs <span class=\"br0\">(</span><span class=\"sy0\">-</span> xm px<span class=\"br0\">)</span><span class=\"br0\">)</span> dmin<span class=\"br0\">)</span><span class=\"br0\">)</span> yP<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span>combine yS <span class=\"br0\">[</span>dmin pmin1 pmin2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 55, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> point-distance <span class=\"br0\">(</span>p1 p2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>x1 <span class=\"sy0\">.</span> y1<span class=\"br0\">)</span> p1<br/>    <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>x2 <span class=\"sy0\">.</span> y2<span class=\"br0\">)</span> p2<br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dx <span class=\"br0\">(</span>- x2 x1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>dy <span class=\"br0\">(</span>- y2 y1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* dx dx<span class=\"br0\">)</span> <span class=\"br0\">(</span>* dy dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> closest-pair-bf <span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pair <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first points<span class=\"br0\">)</span> <span class=\"br0\">(</span>second points<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>dist <span class=\"br0\">(</span>point-distance <span class=\"br0\">(</span>first points<span class=\"br0\">)</span> <span class=\"br0\">(</span>second points<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>p1 points <span class=\"br0\">(</span>values pair dist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>p2 points<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">eq</span> p1 p2<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pdist <span class=\"br0\">(</span>point-distance p1 p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> pdist dist<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>first pair<span class=\"br0\">)</span> p1<br/>                    <span class=\"br0\">(</span>second pair<span class=\"br0\">)</span> p2<br/>                    dist pdist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> closest-pair <span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels<br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>cp <span class=\"br0\">(</span>xp <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> xp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"kw1\">length</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>pair distance<span class=\"br0\">)</span> <span class=\"br0\">(</span>closest-pair-bf xp<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>values pair distance <span class=\"br0\">(</span>sort xp '<span class=\"sy0\">&lt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> '<span class=\"kw1\">cdr</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>xr <span class=\"br0\">(</span><span class=\"kw1\">nthcdr</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>floor <span class=\"kw1\">length</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> xp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>xm <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">caar</span> xr<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">caadr</span> xr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>psetf xr <span class=\"br0\">(</span>rest xr<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>rest xr<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>lpair ldist yl<span class=\"br0\">)</span> <span class=\"br0\">(</span>cp xp<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>rpair rdist yr<span class=\"br0\">)</span> <span class=\"br0\">(</span>cp xr<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>dist pair<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> ldist rdist<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>values ldist lpair<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>values rdist rpair<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>all-ys <span class=\"br0\">(</span>merge 'vector yl yr '<span class=\"sy0\">&lt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> '<span class=\"kw1\">cdr</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>ys <span class=\"br0\">(</span>remove-<span class=\"kw1\">if</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">car</span> p<span class=\"br0\">)</span> xm<span class=\"br0\">)</span><span class=\"br0\">)</span> dist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                         all-ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>ns <span class=\"br0\">(</span><span class=\"kw1\">length</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i ns<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> k ns<span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ys k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                      <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ys i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                   dist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pd <span class=\"br0\">(</span>point-distance <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ys i<span class=\"br0\">)</span><br/>                                                   <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ys k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> pd dist<span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span><span class=\"kw1\">setf</span> dist pd<br/>                                   <span class=\"br0\">(</span>first pair<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ys i<span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>second pair<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ys k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>values pair dist all-ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>pair distance<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>cp <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>copy-<span class=\"kw1\">list</span> points<span class=\"br0\">)</span> '<span class=\"sy0\">&lt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> '<span class=\"kw1\">car</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>values pair distance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">class</span> Segment<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> Segment<span class=\"br0\">(</span>PointF p1, PointF p2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        P1 <span class=\"sy0\">=</span> p1<span class=\"sy0\">;</span><br/>        P2 <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">readonly</span> PointF P1<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">readonly</span> PointF P2<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">float</span> Length<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>LengthSquared<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">float</span> LengthSquared<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>P1<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> P2<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>P1<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> P2<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">+</span> <span class=\"br0\">(</span>P1<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> P2<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>P1<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> P2<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Crystal", "loc": 74, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> bruteForceClosestPair<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> points<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/><span class=\"co1\">//  return pairwise(points.length.iota, points.length.iota)</span><br/><span class=\"co1\">//         .reduce!(min!((i, j) =&gt; abs(points[i] - points[j])));</span><br/>  <span class=\"kw4\">auto</span> minD <span class=\"sy0\">=</span> Unqual<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T.<span class=\"me1\">re</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">;</span><br/>  T minI<span class=\"sy0\">,</span> minJ<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> p1<span class=\"sy0\">;</span> points.<span class=\"me1\">dropBackOne</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> p2<span class=\"sy0\">;</span> points<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">immutable</span> dist <span class=\"sy0\">=</span> abs<span class=\"br0\">(</span>p1 <span class=\"sy0\">-</span> p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> minD<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        minD <span class=\"sy0\">=</span> dist<span class=\"sy0\">;</span><br/>        minI <span class=\"sy0\">=</span> p1<span class=\"sy0\">;</span><br/>        minJ <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> tuple<span class=\"br0\">(</span>minD<span class=\"sy0\">,</span> minI<span class=\"sy0\">,</span> minJ<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> closestPair<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> points<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">static</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T.<span class=\"me1\">re</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> T<span class=\"sy0\">,</span> T<span class=\"br0\">)</span> inner<span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> xP<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*in*/</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> yP<span class=\"br0\">)</span><br/>  <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xP.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> xP.<span class=\"me1\">bruteForceClosestPair</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> Pl <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> Pr <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span>$ <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> xDiv <span class=\"sy0\">=</span> Pl.<span class=\"me1\">back</span>.<span class=\"me1\">re</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> Yr <span class=\"sy0\">=</span> yP.<span class=\"me1\">partition</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">re</span> <span class=\"sy0\">&lt;=</span> xDiv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dl_pairl <span class=\"sy0\">=</span> inner<span class=\"br0\">(</span>Pl<span class=\"sy0\">,</span> yP<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">yP</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> Yr.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dr_pairr <span class=\"sy0\">=</span> inner<span class=\"br0\">(</span>Pr<span class=\"sy0\">,</span> Yr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dm_pairm <span class=\"sy0\">=</span> dl_pairl<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>dr_pairr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> dl_pairl <span class=\"sy0\">:</span> dr_pairr<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dm <span class=\"sy0\">=</span> dm_pairm<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> nextY <span class=\"sy0\">=</span> yP.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>p.<span class=\"me1\">re</span> <span class=\"sy0\">-</span> xDiv<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> dm<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nextY.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">auto</span> minD <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T.<span class=\"me1\">re</span><span class=\"br0\">)</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">size_t</span> minI<span class=\"sy0\">,</span> minJ<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nextY</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">min</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> nextY.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> dist <span class=\"sy0\">=</span> abs<span class=\"br0\">(</span>nextY<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> nextY<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> minD<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            minD <span class=\"sy0\">=</span> dist<span class=\"sy0\">;</span><br/>            minI <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            minJ <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> dm <span class=\"sy0\">&lt;=</span> minD <span class=\"sy0\">?</span> dm_pairm <span class=\"sy0\">:</span><br/>                        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>minD<span class=\"sy0\">,</span> nextY<span class=\"br0\">[</span>minI<span class=\"br0\">]</span><span class=\"sy0\">,</span> nextY<span class=\"br0\">[</span>minJ<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> dm_pairm<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  points.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">re</span> <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">re</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> xP <span class=\"sy0\">=</span> points.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>  points.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">im</span> <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">im</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> inner<span class=\"br0\">(</span>xP<span class=\"sy0\">,</span> points<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">alias</span> C <span class=\"sy0\">=</span> complex<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">auto</span> pts <span class=\"sy0\">=</span> <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              C<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  pts.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"bruteForceClosestPair: \"</span><span class=\"sy0\">,</span> pts.<span class=\"me1\">bruteForceClosestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"          closestPair: \"</span><span class=\"sy0\">,</span> pts.<span class=\"me1\">closestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  rndGen.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  Complex<span class=\"sy0\">!</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">10</span>_000<span class=\"br0\">]</span> points<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> p<span class=\"sy0\">;</span> points<span class=\"br0\">)</span><br/>    p <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>uniform<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1000.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> uniform<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1000.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"bruteForceClosestPair: \"</span><span class=\"sy0\">,</span> points.<span class=\"me1\">bruteForceClosestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"          closestPair: \"</span><span class=\"sy0\">,</span> points.<span class=\"me1\">closestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 74, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> bruteForceClosestPair<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> points<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/><span class=\"co1\">//  return pairwise(points.length.iota, points.length.iota)</span><br/><span class=\"co1\">//         .reduce!(min!((i, j) =&gt; abs(points[i] - points[j])));</span><br/>  <span class=\"kw4\">auto</span> minD <span class=\"sy0\">=</span> Unqual<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T.<span class=\"me1\">re</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">;</span><br/>  T minI<span class=\"sy0\">,</span> minJ<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> p1<span class=\"sy0\">;</span> points.<span class=\"me1\">dropBackOne</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> p2<span class=\"sy0\">;</span> points<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">immutable</span> dist <span class=\"sy0\">=</span> abs<span class=\"br0\">(</span>p1 <span class=\"sy0\">-</span> p2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> minD<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        minD <span class=\"sy0\">=</span> dist<span class=\"sy0\">;</span><br/>        minI <span class=\"sy0\">=</span> p1<span class=\"sy0\">;</span><br/>        minJ <span class=\"sy0\">=</span> p2<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> tuple<span class=\"br0\">(</span>minD<span class=\"sy0\">,</span> minI<span class=\"sy0\">,</span> minJ<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> closestPair<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> points<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">static</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T.<span class=\"me1\">re</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> T<span class=\"sy0\">,</span> T<span class=\"br0\">)</span> inner<span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> xP<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*in*/</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> yP<span class=\"br0\">)</span><br/>  <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xP.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> xP.<span class=\"me1\">bruteForceClosestPair</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> Pl <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> Pr <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span>$ <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> xDiv <span class=\"sy0\">=</span> Pl.<span class=\"me1\">back</span>.<span class=\"me1\">re</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> Yr <span class=\"sy0\">=</span> yP.<span class=\"me1\">partition</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">re</span> <span class=\"sy0\">&lt;=</span> xDiv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dl_pairl <span class=\"sy0\">=</span> inner<span class=\"br0\">(</span>Pl<span class=\"sy0\">,</span> yP<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">yP</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> Yr.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dr_pairr <span class=\"sy0\">=</span> inner<span class=\"br0\">(</span>Pr<span class=\"sy0\">,</span> Yr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dm_pairm <span class=\"sy0\">=</span> dl_pairl<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>dr_pairr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> dl_pairl <span class=\"sy0\">:</span> dr_pairr<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> dm <span class=\"sy0\">=</span> dm_pairm<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> nextY <span class=\"sy0\">=</span> yP.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> abs<span class=\"br0\">(</span>p.<span class=\"me1\">re</span> <span class=\"sy0\">-</span> xDiv<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> dm<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nextY.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">auto</span> minD <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>T.<span class=\"me1\">re</span><span class=\"br0\">)</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">size_t</span> minI<span class=\"sy0\">,</span> minJ<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nextY</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">min</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> nextY.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> dist <span class=\"sy0\">=</span> abs<span class=\"br0\">(</span>nextY<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> nextY<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> minD<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            minD <span class=\"sy0\">=</span> dist<span class=\"sy0\">;</span><br/>            minI <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            minJ <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> dm <span class=\"sy0\">&lt;=</span> minD <span class=\"sy0\">?</span> dm_pairm <span class=\"sy0\">:</span><br/>                        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>minD<span class=\"sy0\">,</span> nextY<span class=\"br0\">[</span>minI<span class=\"br0\">]</span><span class=\"sy0\">,</span> nextY<span class=\"br0\">[</span>minJ<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> dm_pairm<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  points.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">re</span> <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">re</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> xP <span class=\"sy0\">=</span> points.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>  points.<span class=\"me1\">sort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a.<span class=\"me1\">im</span> <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">im</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> inner<span class=\"br0\">(</span>xP<span class=\"sy0\">,</span> points<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">alias</span> C <span class=\"sy0\">=</span> complex<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">auto</span> pts <span class=\"sy0\">=</span> <span class=\"br0\">[</span>C<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              C<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> C<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  pts.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"bruteForceClosestPair: \"</span><span class=\"sy0\">,</span> pts.<span class=\"me1\">bruteForceClosestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"          closestPair: \"</span><span class=\"sy0\">,</span> pts.<span class=\"me1\">closestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  rndGen.<span class=\"me1\">seed</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  Complex<span class=\"sy0\">!</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">10</span>_000<span class=\"br0\">]</span> points<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> p<span class=\"sy0\">;</span> points<span class=\"br0\">)</span><br/>    p <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>uniform<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1000.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> uniform<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1000.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"bruteForceClosestPair: \"</span><span class=\"sy0\">,</span> points.<span class=\"me1\">bruteForceClosestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"          closestPair: \"</span><span class=\"sy0\">,</span> points.<span class=\"me1\">closestPair</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 59, "block": "<pre class=\"text highlighted_source\">defmodule Closest_pair do<br/>  # brute-force algorithm:<br/>  def bruteForce([p0,p1|_] = points), do: bf_loop(points, {distance(p0, p1), {p0, p1}})<br/>\u00a0<br/>  defp bf_loop([_], acc), do: acc<br/>  defp bf_loop([h|t], acc), do: bf_loop(t, bf_loop(h, t, acc))<br/>\u00a0<br/>  defp bf_loop(_, [], acc), do: acc<br/>  defp bf_loop(p0, [p1|t], {minD, minP}) do<br/>    dist = distance(p0, p1)<br/>    if dist &lt; minD, do: bf_loop(p0, t, {dist, {p0, p1}}),<br/>                  else: bf_loop(p0, t, {minD, minP})<br/>  end<br/>\u00a0<br/>  defp distance({p0x,p0y}, {p1x,p1y}) do<br/>   \u00a0:math.sqrt( (p1x - p0x) * (p1x - p0x) + (p1y - p0y) * (p1y - p0y) )<br/>  end<br/>\u00a0<br/>  # recursive divide&amp;conquer approach:<br/>  def recursive(points) do<br/>    recursive(Enum.sort(points), Enum.sort_by(points, fn {_x,y} -&gt; y end))<br/>  end<br/>\u00a0<br/>  def recursive(xP, _yP) when length(xP) &lt;= 3, do: bruteForce(xP)<br/>  def recursive(xP, yP) do<br/>    {xL, xR} = Enum.split(xP, div(length(xP), 2))<br/>    {xm, _} = hd(xR)<br/>    {yL, yR} = Enum.partition(yP, fn {x,_} -&gt; x &lt; xm end)<br/>    {dL, pairL} = recursive(xL, yL)<br/>    {dR, pairR} = recursive(xR, yR)<br/>    {dmin, pairMin} = if dL&lt;dR, do: {dL, pairL}, else: {dR, pairR}<br/>    yS = Enum.filter(yP, fn {x,_} -&gt; abs(xm - x) &lt; dmin end)<br/>    merge(yS, {dmin, pairMin})<br/>  end<br/>\u00a0<br/>  defp merge([_], acc), do: acc<br/>  defp merge([h|t], acc), do: merge(t, merge_loop(h, t, acc))<br/>\u00a0<br/>  defp merge_loop(_, [], acc), do: acc<br/>  defp merge_loop(p0, [p1|_], {dmin,_}=acc) when dmin &lt;= elem(p1,1) - elem(p0,1), do: acc<br/>  defp merge_loop(p0, [p1|t], {dmin, pair}) do<br/>    dist = distance(p0, p1)<br/>    if dist &lt; dmin, do: merge_loop(p0, t, {dist, {p0, p1}}),<br/>                  else: merge_loop(p0, t, {dmin, pair})<br/>  end<br/>end<br/>\u00a0<br/>data = [{0.654682, 0.925557}, {0.409382, 0.619391}, {0.891663, 0.888594}, {0.716629, 0.996200},<br/>        {0.477721, 0.946355}, {0.925092, 0.818220}, {0.624291, 0.142924}, {0.211332, 0.221507},<br/>        {0.293786, 0.691701}, {0.839186, 0.728260}]<br/>\u00a0<br/>IO.inspect Closest_pair.bruteForce(data)<br/>IO.inspect Closest_pair.recursive(data)<br/>\u00a0<br/>data2 = for _ &lt;- 1..5000, do: {:rand.uniform,\u00a0:rand.uniform}<br/>IO.puts \"\\nBrute-force:\"<br/>IO.inspect\u00a0:timer.tc(fn -&gt; Closest_pair.bruteForce(data2) end)<br/>IO.puts \"Recursive divide&amp;conquer:\"<br/>IO.inspect\u00a0:timer.tc(fn -&gt; Closest_pair.recursive(data2) end)</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> closest_pairs <span class=\"br0\">(</span>xys: Point <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> xys.<span class=\"me1\">Length</span><br/>  <span class=\"kw4\">seq</span> <span class=\"br0\">{</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">yield</span> xys.<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, xys.<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">minBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>p0, p1<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">-</span> p0<span class=\"br0\">)</span>.<span class=\"me1\">LengthSquared</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 120, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Point<br/>{<br/>  Float x<br/>  Float y<br/>\u00a0<br/>  // create a random point <br/>  new make (Float x\u00a0:= Float.random * 10, Float y\u00a0:= Float.random * 10)<br/>  {<br/>    this.x = x<br/>    this.y = y<br/>  }<br/>\u00a0<br/>  Float distance (Point p)<br/>  {<br/>    ((x-p.x)*(x-p.x) + (y-p.y)*(y-p.y)).sqrt<br/>  }<br/>\u00a0<br/>  override Str toStr () { \"($x, $y)\" }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  // use brute force approach<br/>  static Point[] findClosestPair1 (Point[] points)<br/>  {<br/>    if (points.size &lt; 2) return points  // list too small<br/>    Point[] closestPair\u00a0:= [points[0], points[1]]<br/>    Float closestDistance\u00a0:= points[0].distance(points[1])<br/>\u00a0<br/>    (1..&lt;points.size).each |Int i|<br/>    {<br/>      ((i+1)..&lt;points.size).each |Int j|<br/>      {<br/>        Float trydistance\u00a0:= points[i].distance(points[j])<br/>        if (trydistance &lt; closestDistance)<br/>        {<br/>          closestPair = [points[i], points[j]]<br/>          closestDistance = trydistance<br/>        }        <br/>      }<br/>    }<br/>\u00a0<br/>    return closestPair<br/>  }<br/>\u00a0<br/>  // use recursive divide-and-conquer approach<br/>  static Point[] findClosestPair2 (Point[] points)<br/>  { <br/>    if (points.size &lt;= 3) return findClosestPair1(points)<br/>    points.sort |Point a, Point b -&gt; Int| { a.x &lt;=&gt; b.x }<br/>    bestLeft\u00a0:= findClosestPair2 (points[0..(points.size/2)])<br/>    bestRight\u00a0:= findClosestPair2 (points[(points.size/2)..-1])<br/>\u00a0<br/>    Float minDistance<br/>    Point[] closePoints\u00a0:= [,]<br/>    if (bestLeft[0].distance(bestLeft[1]) &lt; bestRight[0].distance(bestRight[1]))<br/>    {<br/>      minDistance = bestLeft[0].distance(bestLeft[1])<br/>      closePoints = bestLeft<br/>    }<br/>    else<br/>    {<br/>      minDistance = bestRight[0].distance(bestRight[1])<br/>      closePoints = bestRight<br/>    }  <br/>    yPoints\u00a0:= points.findAll |Point p -&gt; Bool|<br/>    {<br/>      (points.last.x - p.x).abs &lt; minDistance<br/>    }.sort |Point a, Point b -&gt; Int| { a.y &lt;=&gt; b.y }<br/>\u00a0<br/>    closestPair\u00a0:= [,]<br/>    closestDist\u00a0:= Float.posInf<br/>\u00a0<br/>    for (Int i\u00a0:= 0; i &lt; yPoints.size - 1; ++i)<br/>    { <br/>      for (Int j\u00a0:= (i+1); j &lt; yPoints.size; ++j)<br/>      { <br/>        if ((yPoints[j].y - yPoints[i].y) &gt;= minDistance)<br/>        {<br/>          break<br/>        }<br/>        else<br/>        { <br/>          dist\u00a0:= yPoints[i].distance (yPoints[j])<br/>          if (dist &lt; closestDist) <br/>          {<br/>            closestDist = dist<br/>            closestPair = [yPoints[i], yPoints[j]]<br/>          }<br/>        }<br/>      }<br/>    } <br/>    if (closestDist &lt; minDistance)<br/>      return closestPair<br/>    else<br/>      return closePoints<br/>  }<br/>\u00a0<br/>  public static Void main (Str[] args)<br/>  {<br/>    Int numPoints\u00a0:= 10 // default value, in case a number not given on command line<br/>    if ((args.size &gt; 0) &amp;&amp; (args[0].toInt(10, false)\u00a0!= null))<br/>    {<br/>      numPoints = args[0].toInt(10, false)<br/>    }<br/>\u00a0<br/>    Point[] points\u00a0:= [,]<br/>    numPoints.times { points.add (Point()) }<br/>\u00a0<br/>    Int t1\u00a0:= Duration.now.toMillis<br/>    echo (findClosestPair1(points.dup))<br/>    Int t2\u00a0:= Duration.now.toMillis<br/>    echo (\"Time taken: ${(t2-t1)}ms\")<br/>    echo (findClosestPair2(points.dup))<br/>    Int t3\u00a0:= Duration.now.toMillis<br/>    echo (\"Time taken: ${(t3-t2)}ms\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 46, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> xy <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    x<span class=\"sy1\">,</span> y <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"kw1\">const</span> scale <span class=\"sy2\">=</span> <span class=\"nu0\">100</span><span class=\"sy3\">.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> d<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2 xy<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Hypot<span class=\"sy1\">(</span>p2<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>p1<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> p2<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>p1<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>    points <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>xy<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> points <span class=\"sy1\">{</span><br/>        points<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> xy<span class=\"sy1\">{</span>rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> <span class=\"sy3\">*</span> scale<span class=\"sy1\">,</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> <span class=\"sy3\">*</span> scale<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    p1<span class=\"sy1\">,</span> p2 <span class=\"sy2\">:=</span> closestPair<span class=\"sy1\">(</span>points<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"distance:\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> closestPair<span class=\"sy1\">(</span>points <span class=\"sy1\">[]</span>xy<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2 xy<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>points<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"at least two points expected\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    min <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> scale<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> q1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> points<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>points<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> q2 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> points<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> dq <span class=\"sy2\">:=</span> d<span class=\"sy1\">(</span>q1<span class=\"sy1\">,</span> q2<span class=\"sy1\">);</span> dq &lt; min <span class=\"sy1\">{</span><br/>                p1<span class=\"sy1\">,</span> p2 <span class=\"sy2\">=</span> q1<span class=\"sy1\">,</span> q2<br/>                min <span class=\"sy2\">=</span> dq<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Go", "loc": 46, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> xy <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    x<span class=\"sy1\">,</span> y <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"kw1\">const</span> scale <span class=\"sy2\">=</span> <span class=\"nu0\">100</span><span class=\"sy3\">.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> d<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2 xy<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Hypot<span class=\"sy1\">(</span>p2<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>p1<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> p2<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>p1<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>    points <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>xy<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> points <span class=\"sy1\">{</span><br/>        points<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> xy<span class=\"sy1\">{</span>rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> <span class=\"sy3\">*</span> scale<span class=\"sy1\">,</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> <span class=\"sy3\">*</span> scale<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    p1<span class=\"sy1\">,</span> p2 <span class=\"sy2\">:=</span> closestPair<span class=\"sy1\">(</span>points<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"distance:\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> closestPair<span class=\"sy1\">(</span>points <span class=\"sy1\">[]</span>xy<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2 xy<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>points<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"at least two points expected\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    min <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> scale<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> q1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> points<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>points<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> q2 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> points<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> dq <span class=\"sy2\">:=</span> d<span class=\"sy1\">(</span>q1<span class=\"sy1\">,</span> q2<span class=\"sy1\">);</span> dq &lt; min <span class=\"sy1\">{</span><br/>                p1<span class=\"sy1\">,</span> p2 <span class=\"sy2\">=</span> q1<span class=\"sy1\">,</span> q2<br/>                min <span class=\"sy2\">=</span> dq<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 6, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> <a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> x, y<br/>    <a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> distance<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a> that<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> that.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> that.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"{x:${x}, y:${y}}\"</span> <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 24, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>minimumBy<span class=\"sy0\">,</span> tails<span class=\"sy0\">,</span> unfoldr<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl1\"><span class=\"kw3\">foldl1</span></a><span class=\"st0\">') --'</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>newStdGen<span class=\"sy0\">,</span> randomRs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/>\u00a0<br/>vecLeng <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>p<span class=\"sy0\">,</span> q<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-</span> p<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> q<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>findClosestPair <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl1\"><span class=\"kw3\">foldl1</span></a><span class=\"st0\">''</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>minimumBy <span class=\"br0\">(</span>comparing vecLeng<span class=\"br0\">)</span> <span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a><span class=\"br0\">)</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:init\"><span class=\"kw3\">init</span></a> <span class=\"sy0\">.</span> tails<br/>\u00a0<br/>testCP <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  g <span class=\"sy0\">&lt;-</span> newStdGen<br/>  <span class=\"kw1\">let</span> pts <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      pts <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1000</span> <span class=\"sy0\">.</span> unfoldr <span class=\"br0\">(</span>Just <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> randomRs <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> g<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a> <span class=\"sy0\">&amp;&amp;</span>&amp; vecLeng<span class=\"br0\">)</span> <span class=\"sy0\">.</span> findClosestPair <span class=\"sy0\">$</span> pts<br/>\u00a0<br/>main <span class=\"sy0\">=</span> testCP<br/>\u00a0<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl1\"><span class=\"kw3\">foldl1</span></a><span class=\"st0\">''</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl1\"><span class=\"kw3\">foldl1</span></a><span class=\"st0\">'<br/></span></pre>"}, {"lang": "Icon and Unicon", "loc": 25, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">record</span> point<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    minDist <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    minPair <span class=\"sy0\">:=</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">null</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>points <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>p1 <span class=\"sy0\">:=</span> readPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>points <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> minDist <span class=\"sy0\">:=</span> dSquared<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>points<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">every</span> minDist <span class=\"sy0\">&gt;=:=</span> dSquared<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2 <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>points<span class=\"br0\">)</span> <span class=\"kw1\">do</span> minPair <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>p1<span class=\"sy0\">,</span>p2<span class=\"br0\">]</span><br/>        <span class=\"kw4\">push</span><span class=\"br0\">(</span>points<span class=\"sy0\">,</span> p1<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>minPair <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>minPair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>minPair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">,</span><span class=\"st0\">\") -&gt; \"</span><span class=\"sy0\">,</span><br/>              <span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>minPair<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>minPair<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"One or fewer points!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> readPoint<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># Skips lines that don't have two numbers on them</span><br/>    <span class=\"kw1\">suspend</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"sy0\">?</span> point<span class=\"br0\">(</span><span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> dSquared<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span>p2<span class=\"br0\">)</span>    <span class=\"co1\"># Compute the square of the distance</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>p2<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"sy0\">-</span>p1<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>p2<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"sy0\">-</span>p1<span class=\"sy0\">.</span><span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span>  <span class=\"co1\"># (sufficient for closeness)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">vecl   =:  +/\"<span class=\"nu0\">1</span>&amp;.:*:                  <span class=\"co1\">NB. length of each vector</span><br/>dist   =: &lt;@:<a class=\"__cf_email__\" data-cfemail=\"80f6e5e3ecc0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span>{: -\"<span class=\"nu0\">1</span> }:<span class=\"sy0\">)</span>\\               <span class=\"co1\">NB. calculate all distances among vectors</span><br/>minpair=: <span class=\"sy0\">(</span>{~ &gt; {<a class=\"__cf_email__\" data-cfemail=\"e4caa4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>$ #: <a class=\"__cf_email__\" data-cfemail=\"85ccabc5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<span class=\"sy0\">)</span>@:= &lt;./@;<span class=\"sy0\">)</span>dist  <span class=\"co1\">NB. find one pair of the closest points</span><br/>closestpairbf =: <span class=\"sy0\">(</span>; <a class=\"__cf_email__\" data-cfemail=\"8cfae9efe0cc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:-/<span class=\"sy0\">)</span>@minpair         <span class=\"co1\">NB. the pair and their distance</span></pre>"}, {"lang": "Java", "loc": 186, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ClosestPair<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> x<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"kw4\">double</span> x, <span class=\"kw4\">double</span> y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> y <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Pair<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1 <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2 <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> distance <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Pair<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Pair<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">point1</span> <span class=\"sy0\">=</span> point1<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">point2</span> <span class=\"sy0\">=</span> point2<span class=\"sy0\">;</span><br/>      calcDistance<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> update<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2, <span class=\"kw4\">double</span> distance<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">point1</span> <span class=\"sy0\">=</span> point1<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">point2</span> <span class=\"sy0\">=</span> point2<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">distance</span> <span class=\"sy0\">=</span> distance<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> calcDistance<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">this</span>.<span class=\"me1\">distance</span> <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>point1, point2<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> point1 <span class=\"sy0\">+</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">+</span> point2 <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"sy0\">+</span> distance<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> distance<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p2<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> xdist <span class=\"sy0\">=</span> p2.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> p1.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> ydist <span class=\"sy0\">=</span> p2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> p1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>xdist, ydist<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Pair bruteForce<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> points<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> numPoints <span class=\"sy0\">=</span> points.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numPoints <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    Pair pair <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Pair<span class=\"br0\">(</span>points.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, points.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numPoints <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numPoints <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1 <span class=\"sy0\">=</span> points.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> numPoints<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2 <span class=\"sy0\">=</span> points.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw4\">double</span> distance <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>point1, point2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distance <span class=\"sy0\">&lt;</span> pair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>            pair.<span class=\"me1\">update</span><span class=\"br0\">(</span>point1, point2, distance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> pair<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> sortByX<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> points<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>points, <span class=\"kw1\">new</span> Comparator<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compare<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>point1.<span class=\"me1\">x</span> <span class=\"sy0\">&lt;</span> point2.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>point1.<span class=\"me1\">x</span> <span class=\"sy0\">&gt;</span> point2.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> sortByY<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> points<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>points, <span class=\"kw1\">new</span> Comparator<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compare<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>point1.<span class=\"me1\">y</span> <span class=\"sy0\">&lt;</span> point2.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>point1.<span class=\"me1\">y</span> <span class=\"sy0\">&gt;</span> point2.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Pair divideAndConquer<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> points<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointsSortedByX <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sortByX<span class=\"br0\">(</span>pointsSortedByX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> pointsSortedByY <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sortByY<span class=\"br0\">(</span>pointsSortedByY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> divideAndConquer<span class=\"br0\">(</span>pointsSortedByX, pointsSortedByY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Pair divideAndConquer<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> pointsSortedByX, List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> pointsSortedByY<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> numPoints <span class=\"sy0\">=</span> pointsSortedByX.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numPoints <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> bruteForce<span class=\"br0\">(</span>pointsSortedByX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> dividingIndex <span class=\"sy0\">=</span> numPoints <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> leftOfCenter <span class=\"sy0\">=</span> pointsSortedByX.<span class=\"me1\">subList</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, dividingIndex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;?</span> <span class=\"kw1\">extends</span> Point<span class=\"sy0\">&gt;</span> rightOfCenter <span class=\"sy0\">=</span> pointsSortedByX.<span class=\"me1\">subList</span><span class=\"br0\">(</span>dividingIndex, numPoints<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> tempList <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>leftOfCenter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sortByY<span class=\"br0\">(</span>tempList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Pair closestPair <span class=\"sy0\">=</span> divideAndConquer<span class=\"br0\">(</span>leftOfCenter, tempList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    tempList.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tempList.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>rightOfCenter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sortByY<span class=\"br0\">(</span>tempList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Pair closestPairRight <span class=\"sy0\">=</span> divideAndConquer<span class=\"br0\">(</span>rightOfCenter, tempList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>closestPairRight.<span class=\"me1\">distance</span> <span class=\"sy0\">&lt;</span> closestPair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>      closestPair <span class=\"sy0\">=</span> closestPairRight<span class=\"sy0\">;</span><br/>\u00a0<br/>    tempList.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> shortestDistance <span class=\"sy0\">=</span>closestPair.<span class=\"me1\">distance</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> centerX <span class=\"sy0\">=</span> rightOfCenter.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point <span class=\"sy0\">:</span> pointsSortedByY<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>centerX <span class=\"sy0\">-</span> point.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> shortestDistance<span class=\"br0\">)</span><br/>        tempList.<span class=\"me1\">add</span><span class=\"br0\">(</span>point<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> tempList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point1 <span class=\"sy0\">=</span> tempList.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> tempList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> point2 <span class=\"sy0\">=</span> tempList.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>point2.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> point1.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> shortestDistance<span class=\"br0\">)</span><br/>          <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> distance <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>point1, point2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distance <span class=\"sy0\">&lt;</span> closestPair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          closestPair.<span class=\"me1\">update</span><span class=\"br0\">(</span>point1, point2, distance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          shortestDistance <span class=\"sy0\">=</span> distance<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> closestPair<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> numPoints <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span> points <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numPoints<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      points.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>r.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, r.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Generated \"</span> <span class=\"sy0\">+</span> numPoints <span class=\"sy0\">+</span> <span class=\"st0\">\" random points\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> startTime <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Pair bruteForceClosestPair <span class=\"sy0\">=</span> bruteForce<span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> elapsedTime <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> startTime<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Brute force (\"</span> <span class=\"sy0\">+</span> elapsedTime <span class=\"sy0\">+</span> <span class=\"st0\">\" ms): \"</span> <span class=\"sy0\">+</span> bruteForceClosestPair<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    startTime <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Pair dqClosestPair <span class=\"sy0\">=</span> divideAndConquer<span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    elapsedTime <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> startTime<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Divide and conquer (\"</span> <span class=\"sy0\">+</span> elapsedTime <span class=\"sy0\">+</span> <span class=\"st0\">\" ms): \"</span> <span class=\"sy0\">+</span> dqClosestPair<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bruteForceClosestPair.<span class=\"me1\">distance</span> <span class=\"sy0\">!=</span> dqClosestPair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"MISMATCH\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> distance<span class=\"br0\">(</span>p1<span class=\"sy0\">,</span> p2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> dx <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> p2.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> dy <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>p1.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>dx<span class=\"sy0\">*</span>dx <span class=\"sy0\">+</span> dy<span class=\"sy0\">*</span>dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> bruteforceClosestPair<span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">Infinity</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> minDist <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> minPoints <span class=\"sy0\">=</span> arr.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>arr.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>arr.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>distance<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> minDist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          minDist <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          minPoints <span class=\"sy0\">=</span> <span class=\"br0\">[</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>      distance<span class=\"sy0\">:</span> minDist<span class=\"sy0\">,</span><br/>      points<span class=\"sy0\">:</span> minPoints<br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\"># This definition of \"until\" is included in recent versions (&gt; 1.4) of jq<br/># Emit the first input that satisfied the condition<br/>def until(cond; next):<br/>  def _until:<br/>    if cond then . else (next|_until) end;<br/>  _until;<br/>\u00a0<br/># Euclidean 2d distance<br/>def dist(x;y):<br/>  [x[0] - y[0], x[1] - y[1]] | map(.*.) | add | sqrt;</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">function closestpair(P::Vector{Vector{T}}) where T &lt;: Number<br/>    N = length(P)<br/>    if N &lt; 2 return (Inf, ()) end<br/>    mindst = norm(P[1] - P[2])<br/>    minpts = (P[1], P[2])<br/>    for i in 1:N-1, j in i+1:N<br/>        tmpdst = norm(P[i] - P[j])<br/>        if tmpdst &lt; mindst<br/>            mindst = tmpdst<br/>            minpts = (P[i], P[j])<br/>        end<br/>    end<br/>    return mindst, minpts<br/>end<br/>\u00a0<br/>closestpair([[0, -0.3], [1., 1.], [1.5, 2], [2, 2], [3, 3]])</pre>"}, {"lang": "Kotlin", "loc": 79, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>typealias Point <span class=\"sy0\">=</span> Pair<span class=\"sy0\">&lt;</span>Double, Double<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun distance<span class=\"br0\">(</span>p1<span class=\"sy0\">:</span> Point, p2<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>p1.<span class=\"me1\">first</span>- p2.<span class=\"me1\">first</span>, p1.<span class=\"me1\">second</span> - p2.<span class=\"me1\">second</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun bruteForceClosestPair<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Double, Pair<span class=\"sy0\">&lt;</span>Point, Point<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> p.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Must be at least two points\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> minPoints <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> to p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> minDistance <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i + <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dist <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, p<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> minDistance<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                minDistance <span class=\"sy0\">=</span> dist<br/>                minPoints <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> to p<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> minDistance to Pair<span class=\"br0\">(</span>minPoints.<span class=\"me1\">first</span>, minPoints.<span class=\"me1\">second</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun optimizedClosestPair<span class=\"br0\">(</span>xP<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span>, yP<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Double, Pair<span class=\"sy0\">&lt;</span>Point, Point<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> xP.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> bruteForceClosestPair<span class=\"br0\">(</span>xP<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xL <span class=\"sy0\">=</span> xP.<span class=\"me1\">take</span><span class=\"br0\">(</span>n / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xR <span class=\"sy0\">=</span> xP.<span class=\"me1\">drop</span><span class=\"br0\">(</span>n / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xm <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span>n / <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">first</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yL <span class=\"sy0\">=</span> yP.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">&lt;=</span> xm <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yR <span class=\"sy0\">=</span> yP.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"sy0\">&gt;</span>  xm <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dL, pairL<span class=\"br0\">)</span> <span class=\"sy0\">=</span> optimizedClosestPair<span class=\"br0\">(</span>xL, yL<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dR, pairR<span class=\"br0\">)</span> <span class=\"sy0\">=</span> optimizedClosestPair<span class=\"br0\">(</span>xR, yR<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dmin <span class=\"sy0\">=</span> dR<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pairMin <span class=\"sy0\">=</span> pairR<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dL <span class=\"sy0\">&lt;</span> dR<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dmin <span class=\"sy0\">=</span> dL<br/>        pairMin <span class=\"sy0\">=</span> pairL<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yS <span class=\"sy0\">=</span> yP.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>xm - it.<span class=\"me1\">first</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> dmin <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nS <span class=\"sy0\">=</span> yS.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> closest <span class=\"sy0\">=</span> dmin<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> closestPair <span class=\"sy0\">=</span> pairMin<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until nS - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> nS <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>yS<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">second</span> - yS<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">second</span> <span class=\"sy0\">&lt;</span> dmin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dist <span class=\"sy0\">=</span> distance<span class=\"br0\">(</span>yS<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, yS<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dist <span class=\"sy0\">&lt;</span> closest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                closest <span class=\"sy0\">=</span> dist<br/>                closestPair <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>yS<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, yS<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            k++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> closest to closestPair<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> points <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        listOf<span class=\"br0\">(</span><br/>            <span class=\"nu0\">5.0</span> to  <span class=\"nu0\">9.0</span>, <span class=\"nu0\">9.0</span> to <span class=\"nu0\">3.0</span>,  <span class=\"nu0\">2.0</span> to <span class=\"nu0\">0.0</span>, <span class=\"nu0\">8.0</span> to  <span class=\"nu0\">4.0</span>, <span class=\"nu0\">7.0</span> to <span class=\"nu0\">4.0</span>,<br/>            <span class=\"nu0\">9.0</span> to <span class=\"nu0\">10.0</span>, <span class=\"nu0\">1.0</span> to <span class=\"nu0\">9.0</span>,  <span class=\"nu0\">8.0</span> to <span class=\"nu0\">2.0</span>, <span class=\"nu0\">0.0</span> to <span class=\"nu0\">10.0</span>, <span class=\"nu0\">9.0</span> to <span class=\"nu0\">6.0</span><br/>        <span class=\"br0\">)</span>,<br/>        listOf<span class=\"br0\">(</span><br/>            <span class=\"nu0\">0.654682</span> to <span class=\"nu0\">0.925557</span>, <span class=\"nu0\">0.409382</span> to <span class=\"nu0\">0.619391</span>, <span class=\"nu0\">0.891663</span> to <span class=\"nu0\">0.888594</span>,<br/>            <span class=\"nu0\">0.716629</span> to <span class=\"nu0\">0.996200</span>, <span class=\"nu0\">0.477721</span> to <span class=\"nu0\">0.946355</span>, <span class=\"nu0\">0.925092</span> to <span class=\"nu0\">0.818220</span>,<br/>            <span class=\"nu0\">0.624291</span> to <span class=\"nu0\">0.142924</span>, <span class=\"nu0\">0.211332</span> to <span class=\"nu0\">0.221507</span>, <span class=\"nu0\">0.293786</span> to <span class=\"nu0\">0.691701</span>,<br/>            <span class=\"nu0\">0.839186</span> to <span class=\"nu0\">0.728260</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in points<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dist, pair<span class=\"br0\">)</span> <span class=\"sy0\">=</span> bruteForceClosestPair<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Closest pair (brute force) is ${pair.first} and ${pair.second}, distance $dist\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xP <span class=\"sy0\">=</span> p.<span class=\"me1\">sortedBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">first</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> yP <span class=\"sy0\">=</span> p.<span class=\"me1\">sortedBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">second</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dist2, pair2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> optimizedClosestPair<span class=\"br0\">(</span>xP, yP<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Closest pair (optimized)   is ${pair2.first} and ${pair2.second}, distance $dist2<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 44, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>N <span class=\"sy0\">=</span><span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> x<span class=\"br0\">(</span> N<span class=\"br0\">)</span><span class=\"sy0\">,</span> y<span class=\"br0\">(</span> N<span class=\"br0\">)</span><br/>\u00a0<br/>firstPt  <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>secondPt <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>    <span class=\"kw1\">read</span> f<span class=\"sy0\">:</span> x<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span>f<br/>    <span class=\"kw1\">read</span> f<span class=\"sy0\">:</span> y<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span>f<br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/>minDistance  <span class=\"sy0\">=</span>1E6<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>      dxSq <span class=\"sy0\">=</span><span class=\"br0\">(</span> x<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">-</span>x<span class=\"br0\">(</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span><br/>      dySq <span class=\"sy0\">=</span><span class=\"br0\">(</span> y<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">-</span>y<span class=\"br0\">(</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span><br/>      D    <span class=\"sy0\">=</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> dxSq <span class=\"sy0\">+</span>dySq<span class=\"br0\">)</span>^<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> D <span class=\"sy0\">&lt;</span>minDistance <span class=\"kw1\">then</span><br/>        minDistance <span class=\"sy0\">=</span>D<br/>        firstPt     <span class=\"sy0\">=</span>i<br/>        secondPt    <span class=\"sy0\">=</span>j<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span> j<br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Distance =\"</span>; minDistance; <span class=\"st0\">\" between ( \"</span>; x<span class=\"br0\">(</span> firstPt<span class=\"br0\">)</span>; <span class=\"st0\">\", \"</span>; y<span class=\"br0\">(</span> firstPt<span class=\"br0\">)</span>; <span class=\"st0\">\") and ( \"</span>; x<span class=\"br0\">(</span> secondPt<span class=\"br0\">)</span>; <span class=\"st0\">\", \"</span>; y<span class=\"br0\">(</span> secondPt<span class=\"br0\">)</span>; <span class=\"st0\">\")\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.654682</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.925557</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.409382</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.619391</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.891663</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.888594</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.716629</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.996200</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.477721</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.946355</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.925092</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.818220</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.624291</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.142924</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.211332</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.221507</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.293786</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.691701</span><br/><span class=\"kw1\">data</span>  <span class=\"nu0\">0.839186</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0.72826</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 70, "block": "<pre class=\"text highlighted_source\">ClosestPair\u00a0:= module()<br/>\u00a0<br/>local<br/>    ModuleApply\u00a0:= proc(L::list,$)<br/>    local Lx, Ly, out;<br/>        Ly\u00a0:= sort(L, 'key'=(i-&gt;i[2]), 'output'='permutation');<br/>        Lx\u00a0:= sort(L, 'key'=(i-&gt;i[1]), 'output'='permutation');<br/>        out\u00a0:= Recurse(L, Lx, Ly, 1, numelems(L));<br/>        return sqrt(out[1]), out[2];<br/>    end proc; # ModuleApply<br/>\u00a0<br/>local<br/>    BruteForce\u00a0:= proc(L, Lx, r1:=1, r2:=numelems(L), $)<br/>    local d, p, n, i, j;<br/>        d\u00a0:= infinity;<br/>        for i from r1 to r2-1 do<br/>            for j from i+1 to r2 do<br/>                n\u00a0:= dist( L[Lx[i]],  L[Lx[j]] );<br/>                if n &lt; d then<br/>                    d\u00a0:= n;<br/>                    p\u00a0:= [ L[Lx[i]], L[Lx[j]] ];<br/>                end if;<br/>            end do; # j<br/>        end do; # i<br/>        return (d, p);<br/>    end proc; # BruteForce<br/>\u00a0<br/>local dist\u00a0:= (p, q)-&gt;(( (p[1]-q[1])^2+(p[2]-q[2])^2 ));<br/>\u00a0<br/>local Recurse\u00a0:= proc(L, Lx, Ly, r1, r2)<br/>    local m, xm, rDist, rPair, lDist, lPair, minDist, minPair, S, i, j, Lyr, Lyl;<br/>\u00a0<br/>    if r2-r1 &lt;= 3 then<br/>        return BruteForce(L, Lx, r1, r2);<br/>    end if;<br/>\u00a0<br/>    m\u00a0:= ceil((r2-r1)/2)+r1;<br/>    xm\u00a0:= (L[Lx[m]][1] + L[Lx[m-1]][1])/2;<br/>\u00a0<br/>    (Lyr, Lyl)\u00a0:= selectremove( i-&gt;L[i][1] &lt; xm, Ly);<br/>\u00a0<br/>    (rDist, rPair)\u00a0:= thisproc(L, Lx, Lyr, r1, m-1);<br/>    (lDist, lPair)\u00a0:= thisproc(L, Lx, Lyl, m, r2);<br/>\u00a0<br/>    if rDist &lt; lDist then<br/>        minDist\u00a0:= rDist;<br/>        minPair\u00a0:= rPair;<br/>    else<br/>        minDist\u00a0:= lDist;<br/>        minPair\u00a0:= lPair;<br/>    end if;<br/>\u00a0<br/>    S\u00a0:= [ seq( `if`(abs(xm - L[i][1])^2&lt; minDist, L[i], NULL ), i in Ly ) ];<br/>\u00a0<br/>    for i from 1 to nops(S)-1 do<br/>        for j from i+1 to nops(S) do<br/>            if abs( S[i][2] - S[j][2] )^2 &gt;= minDist then<br/>                break;<br/>            elif dist(S[i], S[j]) &lt; minDist then<br/>                minDist\u00a0:= dist(S[i], S[j]);<br/>                minPair\u00a0:= [S[i], S[j]];<br/>            end if;<br/>        end do;<br/>    end do;<br/>\u00a0<br/>    return (minDist, minPair);<br/>\u00a0<br/>    end proc; #Recurse<br/>\u00a0<br/>end module; #ClosestPair</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">nearestPair[data_]\u00a0:= <br/> Block[{pos, dist = N[Outer[EuclideanDistance, data, data, 1]]},<br/>  pos = Position[dist, Min[DeleteCases[Flatten[dist], 0.]]];<br/>  data[[pos[[1]]]]]</pre>"}, {"lang": "MATLAB", "loc": 71, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>closest,closestpair<span class=\"br0\">]</span> = closestPair<span class=\"br0\">(</span>xP,yP<span class=\"br0\">)</span><br/>\u00a0<br/>    N = numel<span class=\"br0\">(</span>xP<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>N &lt;= <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">%Brute force closestpair</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>N &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            closest = +<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inf.html\"><span class=\"kw2\">Inf</span></a>;<br/>            closestpair = <span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>        <span class=\"kw1\">else</span>        <br/>            closest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/norm.html\"><span class=\"kw2\">norm</span></a><span class=\"br0\">(</span>xP<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>-xP<span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>            closestpair = <span class=\"br0\">{</span>xP<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>,xP<span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>\u00a0<br/>            <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:N-<span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a> = <span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:N <span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/norm.html\"><span class=\"kw2\">norm</span></a><span class=\"br0\">(</span>xP<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span> - xP<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">}</span><span class=\"br0\">)</span> &lt; closest <span class=\"br0\">)</span><br/>                        closest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/norm.html\"><span class=\"kw2\">norm</span></a><span class=\"br0\">(</span>xP<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span>-xP<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>                        closestpair = <span class=\"br0\">{</span>xP<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span>,xP<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\"><span class=\"re0\">j</span></span></a><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>                    <span class=\"kw1\">end</span> <span class=\"co1\">%if</span><br/>                <span class=\"kw1\">end</span> <span class=\"co1\">%for</span><br/>            <span class=\"kw1\">end</span> <span class=\"co1\">%for</span><br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%if (N &lt; 2)</span><br/>    <span class=\"kw1\">else</span><br/>\u00a0<br/>        halfN = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span>N/<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        xL = <span class=\"br0\">{</span> xP<span class=\"br0\">{</span><span class=\"nu0\">1</span>:halfN<span class=\"br0\">}</span> <span class=\"br0\">}</span>;<br/>        xR = <span class=\"br0\">{</span> xP<span class=\"br0\">{</span>halfN+<span class=\"nu0\">1</span>:N<span class=\"br0\">}</span> <span class=\"br0\">}</span>;<br/>        xm = xP<span class=\"br0\">{</span>halfN<span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"co1\">%cellfun( @(p)le(p(1),xm),yP ) is the same as { p \u2208 yP\u00a0: px \u2264 xm }</span><br/>        yLIndicies = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cellfun.html\"><span class=\"kw2\">cellfun</span></a><span class=\"br0\">(</span> @<span class=\"br0\">(</span>p<span class=\"br0\">)</span>le<span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,xm<span class=\"br0\">)</span>,yP <span class=\"br0\">)</span>;<br/>\u00a0<br/>        yL = <span class=\"br0\">{</span> yP<span class=\"br0\">{</span>yLIndicies<span class=\"br0\">}</span> <span class=\"br0\">}</span>;<br/>        yR = <span class=\"br0\">{</span> yP<span class=\"br0\">{</span>~yLIndicies<span class=\"br0\">}</span> <span class=\"br0\">}</span>;<br/>\u00a0<br/>        <span class=\"br0\">[</span>dL,pairL<span class=\"br0\">]</span> = closestPair<span class=\"br0\">(</span>xL,yL<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">[</span>dR,pairR<span class=\"br0\">]</span> = closestPair<span class=\"br0\">(</span>xR,yR<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">if</span> dL &lt; dR<br/>            dmin = dL;<br/>            pairMin = pairL;<br/>        <span class=\"kw1\">else</span><br/>            dmin = dR;<br/>            pairMin = pairR;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%cellfun( @(p)lt(norm(xm-p(1)),dmin),yP ) is the same as</span><br/>        <span class=\"co1\">%{ p \u2208 yP\u00a0: |xm - px| &lt; dmin }</span><br/>        yS = <span class=\"br0\">{</span>yP<span class=\"br0\">{</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cellfun.html\"><span class=\"kw2\">cellfun</span></a><span class=\"br0\">(</span> @<span class=\"br0\">(</span>p<span class=\"br0\">)</span>lt<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/norm.html\"><span class=\"kw2\">norm</span></a><span class=\"br0\">(</span>xm-p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,dmin<span class=\"br0\">)</span>,yP <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>        nS = numel<span class=\"br0\">(</span>yS<span class=\"br0\">)</span>;<br/>\u00a0<br/>        closest = dmin;<br/>        closestpair = pairMin;<br/>\u00a0<br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:nS-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            k = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a>+<span class=\"nu0\">1</span>;<br/>\u00a0<br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>k&lt;=nS<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>yS<span class=\"br0\">{</span>k<span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>-yS<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> &lt; dmin<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/norm.html\"><span class=\"kw2\">norm</span></a><span class=\"br0\">(</span>yS<span class=\"br0\">{</span>k<span class=\"br0\">}</span>-yS<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span><span class=\"br0\">)</span> &lt; closest<br/>                    closest = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/norm.html\"><span class=\"kw2\">norm</span></a><span class=\"br0\">(</span>yS<span class=\"br0\">{</span>k<span class=\"br0\">}</span>-yS<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>                    closestpair = <span class=\"br0\">{</span>yS<span class=\"br0\">{</span>k<span class=\"br0\">}</span>,yS<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>                <span class=\"kw1\">end</span><br/>\u00a0<br/>                k = k+<span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"co1\">%while</span><br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%for</span><br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%if (N &lt;= 3)</span><br/><span class=\"kw1\">end</span> <span class=\"co1\">%closestPair</span></pre>"}, {"lang": "Microsoft Small Basic", "loc": 45, "block": "<pre class=\"text highlighted_source\">' Closest Pair Problem<br/>s=\"0.654682,0.925557,0.409382,0.619391,0.891663,0.888594,0.716629,0.996200,0.477721,0.946355,0.925092,0.818220,0.624291,0.142924,0.211332,0.221507,0.293786,0.691701,0.839186,0.728260,\"<br/>  i=0<br/>  While s&lt;&gt;\"\"<br/>    i=i+1<br/>    For j=1 To 2<br/>      k=Text.GetIndexOf(s,\",\")<br/>      ss=Text.GetSubText(s,1,k-1)<br/>      s=Text.GetSubTextToEnd(s,k+1)<br/>      pxy[i][j]=ss<br/>    EndFor<br/>  EndWhile<br/>  n=i<br/>  i=1<br/>  j=2<br/>  dd=Math.Power(pxy[i][1]-pxy[j][1],2)+Math.Power(pxy[i][2]-pxy[j][2],2)<br/>  ddmin=dd<br/>  ii=i <br/>  jj=j<br/>  For i=1 To n<br/>    For j=1 To n<br/>      dd=Math.Power(pxy[i][1]-pxy[j][1],2)+Math.Power(pxy[i][2]-pxy[j][2],2)<br/>      If dd&gt;0 Then<br/>        If dd&lt;ddmin Then<br/>          ddmin=dd <br/>          ii=i <br/>          jj=j<br/>        EndIf<br/>      EndIf<br/>    EndFor<br/>  EndFor<br/>  sqrt1=ddmin<br/>  sqrt2=ddmin/2<br/>  For i=1 To 20<br/>    If sqrt1=sqrt2 Then <br/>      Goto exitfor<br/>    EndIf<br/>    sqrt1=sqrt2<br/>    sqrt2=(sqrt1+(ddmin/sqrt1))/2<br/>  EndFor<br/>exitfor:<br/>  TextWindow.WriteLine(\"the minimum distance \"+sqrt2)<br/>  TextWindow.WriteLine(\"is between the points:\")<br/>  TextWindow.WriteLine(\"  [\"+pxy[ii][1]+\",\"+pxy[ii][2]+\"] and\")<br/>  TextWindow.WriteLine(\"  [\"+pxy[jj][1]+\",\"+pxy[jj][2]+\"]\")</pre>"}, {"lang": "Objective-C", "loc": 126, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"sy0\">;</span> y <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> cmpPointX <span class=\"br0\">(</span>a <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> a<span class=\"sy0\">.</span>x b<span class=\"sy0\">.</span>x <br/><span class=\"kw1\">let</span> cmpPointY <span class=\"br0\">(</span>a <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> a<span class=\"sy0\">.</span>y b<span class=\"sy0\">.</span>y <br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> distSqrd <span class=\"br0\">(</span>seg <span class=\"sy0\">:</span> <span class=\"br0\">(</span>point <span class=\"sy0\">*</span> point<span class=\"br0\">)</span> <span class=\"kw1\">option</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> seg <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax_float\"><span class=\"kw3\">max_float</span></a><br/>  <span class=\"sy0\">|</span> Some<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfst\"><span class=\"kw3\">fst</span></a> line <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> line <span class=\"kw1\">in</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span>x <span class=\"sy0\">-.</span> b<span class=\"sy0\">.</span>x <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> dy <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span>y <span class=\"sy0\">-.</span> b<span class=\"sy0\">.</span>y <span class=\"kw1\">in</span><br/>\u00a0<br/>    dx<span class=\"sy0\">*.</span>dx <span class=\"sy0\">+.</span> dy<span class=\"sy0\">*.</span>dy<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> dist seg <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>distSqrd seg<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> shortest l1 l2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> distSqrd l1 <span class=\"sy0\">&lt;</span> distSqrd l2 <span class=\"kw1\">then</span><br/>    l1<br/>  <span class=\"kw1\">else</span><br/>    l2<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> halve l <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length l <span class=\"kw1\">in</span><br/>  BatList<span class=\"sy0\">.</span>split_at <span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> l<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> closestBoundY from maxY <span class=\"br0\">(</span>ptsByY <span class=\"sy0\">:</span> point <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> ptsByY <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>  <span class=\"sy0\">|</span> hd <span class=\"sy0\">::</span> tl <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> hd<span class=\"sy0\">.</span>y <span class=\"sy0\">&gt;</span> maxY <span class=\"kw1\">then</span><br/>      None<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> toHd <span class=\"sy0\">=</span> Some<span class=\"br0\">(</span>from, hd<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> bestToRest <span class=\"sy0\">=</span> closestBoundY from maxY tl <span class=\"kw1\">in</span><br/>      shortest toHd bestToRest<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> closestInRange ptsByY maxDy <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> ptsByY <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>  <span class=\"sy0\">|</span> hd <span class=\"sy0\">::</span> tl <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> fromHd <span class=\"sy0\">=</span> closestBoundY hd <span class=\"br0\">(</span>hd<span class=\"sy0\">.</span>y <span class=\"sy0\">+.</span> maxDy<span class=\"br0\">)</span> tl <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> fromRest <span class=\"sy0\">=</span> closestInRange tl maxDy <span class=\"kw1\">in</span><br/>    shortest fromHd fromRest<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> closestPairByX <span class=\"br0\">(</span>ptsByX <span class=\"sy0\">:</span> point <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length ptsByX <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>       None<br/>   <span class=\"kw1\">else</span><br/>       <span class=\"kw1\">let</span> <span class=\"br0\">(</span>left, right<span class=\"br0\">)</span> <span class=\"sy0\">=</span> halve ptsByX <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> leftResult <span class=\"sy0\">=</span> closestPairByX left <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> rightResult <span class=\"sy0\">=</span> closestPairByX right <span class=\"kw1\">in</span><br/>\u00a0<br/>       <span class=\"kw1\">let</span> bestInHalf <span class=\"sy0\">=</span> shortest  leftResult rightResult <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> bestLength <span class=\"sy0\">=</span> dist bestInHalf <span class=\"kw1\">in</span><br/>\u00a0<br/>       <span class=\"kw1\">let</span> divideX <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd right<span class=\"br0\">)</span><span class=\"sy0\">.</span>x <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> inBand <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter<span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs_float\"><span class=\"kw3\">abs_float</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">.</span>x <span class=\"sy0\">-.</span> divideX<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> bestLength<span class=\"br0\">)</span> ptsByX <span class=\"kw1\">in</span><br/>\u00a0<br/>       <span class=\"kw1\">let</span> byY <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort cmpPointY inBand <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> bestCross <span class=\"sy0\">=</span> closestInRange byY bestLength <span class=\"kw1\">in</span><br/>       shortest bestInHalf bestCross      <br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> closestPair pts <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ptsByX <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort cmpPointX pts <span class=\"kw1\">in</span><br/>  closestPairByX ptsByX<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> parsePoint str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sep <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>regexp_string <span class=\"st0\">\",\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> tokens <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>split sep str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> xStr <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth tokens <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> yStr <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth tokens <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> xVal <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_string\"><span class=\"kw3\">float_of_string</span></a> xStr<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> yVal <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_string\"><span class=\"kw3\">float_of_string</span></a> yStr<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> xVal<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> yVal <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> loadPoints filename <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> filename <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> s <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> parsePoint s <span class=\"kw1\">in</span><br/>        result <span class=\"sy0\">:=</span> p <span class=\"sy0\">::</span> <span class=\"sy0\">!</span>result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>result<br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>result<br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> loaded <span class=\"sy0\">=</span> <span class=\"br0\">(</span>loadPoints <span class=\"st0\">\"Points.txt\"</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> start <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>time<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> closestPair loaded <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> taken <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>time<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-.</span> start <span class=\"kw1\">in</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Took\u00a0%f [s]\\n\"</span> taken<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">match</span> c <span class=\"kw1\">with</span><br/><span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"No closest pair\\n\"</span><br/><span class=\"sy0\">|</span> Some<span class=\"br0\">(</span>seg<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>  <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfst\"><span class=\"kw3\">fst</span></a> seg <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> seg <span class=\"kw1\">in</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"(%f,\u00a0%f) (%f,\u00a0%f) Dist\u00a0%f\\n\"</span> a<span class=\"sy0\">.</span>x a<span class=\"sy0\">.</span>y b<span class=\"sy0\">.</span>x b<span class=\"sy0\">.</span>y <span class=\"br0\">(</span>dist c<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 126, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"sy0\">;</span> y <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> cmpPointX <span class=\"br0\">(</span>a <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> a<span class=\"sy0\">.</span>x b<span class=\"sy0\">.</span>x <br/><span class=\"kw1\">let</span> cmpPointY <span class=\"br0\">(</span>a <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"sy0\">:</span> point<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> a<span class=\"sy0\">.</span>y b<span class=\"sy0\">.</span>y <br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> distSqrd <span class=\"br0\">(</span>seg <span class=\"sy0\">:</span> <span class=\"br0\">(</span>point <span class=\"sy0\">*</span> point<span class=\"br0\">)</span> <span class=\"kw1\">option</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> seg <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax_float\"><span class=\"kw3\">max_float</span></a><br/>  <span class=\"sy0\">|</span> Some<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfst\"><span class=\"kw3\">fst</span></a> line <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> line <span class=\"kw1\">in</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span>x <span class=\"sy0\">-.</span> b<span class=\"sy0\">.</span>x <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> dy <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span>y <span class=\"sy0\">-.</span> b<span class=\"sy0\">.</span>y <span class=\"kw1\">in</span><br/>\u00a0<br/>    dx<span class=\"sy0\">*.</span>dx <span class=\"sy0\">+.</span> dy<span class=\"sy0\">*.</span>dy<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> dist seg <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span>distSqrd seg<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> shortest l1 l2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> distSqrd l1 <span class=\"sy0\">&lt;</span> distSqrd l2 <span class=\"kw1\">then</span><br/>    l1<br/>  <span class=\"kw1\">else</span><br/>    l2<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> halve l <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length l <span class=\"kw1\">in</span><br/>  BatList<span class=\"sy0\">.</span>split_at <span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> l<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> closestBoundY from maxY <span class=\"br0\">(</span>ptsByY <span class=\"sy0\">:</span> point <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> ptsByY <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>  <span class=\"sy0\">|</span> hd <span class=\"sy0\">::</span> tl <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> hd<span class=\"sy0\">.</span>y <span class=\"sy0\">&gt;</span> maxY <span class=\"kw1\">then</span><br/>      None<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> toHd <span class=\"sy0\">=</span> Some<span class=\"br0\">(</span>from, hd<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> bestToRest <span class=\"sy0\">=</span> closestBoundY from maxY tl <span class=\"kw1\">in</span><br/>      shortest toHd bestToRest<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> closestInRange ptsByY maxDy <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> ptsByY <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> None<br/>  <span class=\"sy0\">|</span> hd <span class=\"sy0\">::</span> tl <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">let</span> fromHd <span class=\"sy0\">=</span> closestBoundY hd <span class=\"br0\">(</span>hd<span class=\"sy0\">.</span>y <span class=\"sy0\">+.</span> maxDy<span class=\"br0\">)</span> tl <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> fromRest <span class=\"sy0\">=</span> closestInRange tl maxDy <span class=\"kw1\">in</span><br/>    shortest fromHd fromRest<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> closestPairByX <span class=\"br0\">(</span>ptsByX <span class=\"sy0\">:</span> point <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length ptsByX <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>       None<br/>   <span class=\"kw1\">else</span><br/>       <span class=\"kw1\">let</span> <span class=\"br0\">(</span>left, right<span class=\"br0\">)</span> <span class=\"sy0\">=</span> halve ptsByX <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> leftResult <span class=\"sy0\">=</span> closestPairByX left <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> rightResult <span class=\"sy0\">=</span> closestPairByX right <span class=\"kw1\">in</span><br/>\u00a0<br/>       <span class=\"kw1\">let</span> bestInHalf <span class=\"sy0\">=</span> shortest  leftResult rightResult <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> bestLength <span class=\"sy0\">=</span> dist bestInHalf <span class=\"kw1\">in</span><br/>\u00a0<br/>       <span class=\"kw1\">let</span> divideX <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd right<span class=\"br0\">)</span><span class=\"sy0\">.</span>x <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> inBand <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter<span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs_float\"><span class=\"kw3\">abs_float</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">.</span>x <span class=\"sy0\">-.</span> divideX<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> bestLength<span class=\"br0\">)</span> ptsByX <span class=\"kw1\">in</span><br/>\u00a0<br/>       <span class=\"kw1\">let</span> byY <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort cmpPointY inBand <span class=\"kw1\">in</span><br/>       <span class=\"kw1\">let</span> bestCross <span class=\"sy0\">=</span> closestInRange byY bestLength <span class=\"kw1\">in</span><br/>       shortest bestInHalf bestCross      <br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> closestPair pts <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ptsByX <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort cmpPointX pts <span class=\"kw1\">in</span><br/>  closestPairByX ptsByX<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> parsePoint str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sep <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>regexp_string <span class=\"st0\">\",\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> tokens <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html\"><span class=\"kw2\">Str</span></a><span class=\"sy0\">.</span>split sep str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> xStr <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth tokens <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> yStr <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth tokens <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> xVal <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_string\"><span class=\"kw3\">float_of_string</span></a> xStr<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> yVal <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_string\"><span class=\"kw3\">float_of_string</span></a> yStr<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> xVal<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> yVal <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> loadPoints filename <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> filename <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> s <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> parsePoint s <span class=\"kw1\">in</span><br/>        result <span class=\"sy0\">:=</span> p <span class=\"sy0\">::</span> <span class=\"sy0\">!</span>result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>result<br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>result<br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> loaded <span class=\"sy0\">=</span> <span class=\"br0\">(</span>loadPoints <span class=\"st0\">\"Points.txt\"</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> start <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>time<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> closestPair loaded <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> taken <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>time<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-.</span> start <span class=\"kw1\">in</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Took\u00a0%f [s]\\n\"</span> taken<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">match</span> c <span class=\"kw1\">with</span><br/><span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"No closest pair\\n\"</span><br/><span class=\"sy0\">|</span> Some<span class=\"br0\">(</span>seg<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>  <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfst\"><span class=\"kw3\">fst</span></a> seg <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> b <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> seg <span class=\"kw1\">in</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"(%f,\u00a0%f) (%f,\u00a0%f) Dist\u00a0%f\\n\"</span> a<span class=\"sy0\">.</span>x a<span class=\"sy0\">.</span>y b<span class=\"sy0\">.</span>x b<span class=\"sy0\">.</span>y <span class=\"br0\">(</span>dist c<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 99, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Distance</span> X1<span class=\"sy0\">#</span>Y1 X2<span class=\"sy0\">#</span>Y2<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Sqrt <span class=\"br0\">{</span>Pow X2<span class=\"sy0\">-</span>X1 2<span class=\"sy0\">.</span>0<span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"br0\">{</span>Pow Y2<span class=\"sy0\">-</span>Y1 2<span class=\"sy0\">.</span>0<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% brute force</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">BFClosestPair</span> Points=P1<span class=\"sy0\">|</span>P2<span class=\"sy0\">|</span>_<span class=\"br0\">}</span><br/>     Ps = <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>toTuple <span class=\"kw1\">unit</span> Points<span class=\"br0\">}</span> <span class=\"co1\">%% for efficient random access</span><br/>     N = <span class=\"br0\">{</span>Width Ps<span class=\"br0\">}</span><br/>     MinDist = <span class=\"br0\">{</span>NewCell <span class=\"br0\">{</span>Distance P1 P2<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     MinPoints = <span class=\"br0\">{</span>NewCell P1<span class=\"sy0\">#</span>P2<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>N<span class=\"sy0\">-</span>1 <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> J <span class=\"kw1\">in</span> I<span class=\"sy0\">+</span>1<span class=\"sy0\">..</span>N <span class=\"kw1\">do</span><br/>           IJDist = <span class=\"br0\">{</span>Distance Ps<span class=\"sy0\">.</span>I Ps<span class=\"sy0\">.</span>J<span class=\"br0\">}</span><br/>        <span class=\"kw1\">in</span><br/>           <span class=\"kw1\">if</span> IJDist <span class=\"sy0\">&lt;</span> <span class=\"sy0\">@</span>MinDist <span class=\"kw1\">then</span><br/>              MinDist <span class=\"sy0\">:=</span> IJDist<br/>              MinPoints <span class=\"sy0\">:=</span> Ps<span class=\"sy0\">.</span>I<span class=\"sy0\">#</span>Ps<span class=\"sy0\">.</span>J<br/>           <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"sy0\">@</span>MinPoints<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% divide and conquer</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ClosestPair</span> Points<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> <span class=\"br0\">{</span>ClosestPair2<br/>           <span class=\"br0\">{</span>Sort Points <span class=\"br0\">{</span>LessThanBy X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>           <span class=\"br0\">{</span>Sort Points <span class=\"br0\">{</span>LessThanBy Y<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">of</span> Distance<span class=\"sy0\">#</span>Pair <span class=\"kw1\">then</span><br/>        Pair<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% XP: points sorted by X, YP: sorted by Y</span><br/>  <span class=\"co1\">%% returns a pair Distance#Pair</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ClosestPair2</span> XP YP<span class=\"br0\">}</span><br/>     N = <span class=\"br0\">{</span>Length XP<span class=\"br0\">}</span> = <span class=\"br0\">{</span>Length YP<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">if</span> N <span class=\"sy0\">=&lt;</span> 3 <span class=\"kw1\">then</span><br/>        P = <span class=\"br0\">{</span>BFClosestPair XP<span class=\"br0\">}</span><br/>     <span class=\"kw1\">in</span><br/>        <span class=\"br0\">{</span>Distance P<span class=\"sy0\">.</span>1 P<span class=\"sy0\">.</span>2<span class=\"br0\">}</span><span class=\"sy0\">#</span>P<br/>     <span class=\"kw1\">else</span><br/>        XL XR<br/>        <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>takeDrop XP <span class=\"br0\">(</span>N <span class=\"kw1\">div</span> 2<span class=\"br0\">)</span>\u00a0?XL\u00a0?XR<span class=\"br0\">}</span><br/>        XM = <span class=\"br0\">{</span>Nth XP <span class=\"br0\">(</span>N <span class=\"kw1\">div</span> 2<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">.</span>X<br/>        YL YR<br/>        <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>partition YP <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> P<span class=\"br0\">}</span> P<span class=\"sy0\">.</span>X <span class=\"sy0\">=&lt;</span> XM <span class=\"kw1\">end</span>\u00a0?YL\u00a0?YR<span class=\"br0\">}</span><br/>        DL<span class=\"sy0\">#</span>PairL = <span class=\"br0\">{</span>ClosestPair2 XL YL<span class=\"br0\">}</span><br/>        DR<span class=\"sy0\">#</span>PairR = <span class=\"br0\">{</span>ClosestPair2 XR YR<span class=\"br0\">}</span><br/>        DMin<span class=\"sy0\">#</span>PairMin = <span class=\"kw1\">if</span> DL <span class=\"sy0\">&lt;</span> DR <span class=\"kw1\">then</span> DL<span class=\"sy0\">#</span>PairL <span class=\"kw1\">else</span> DR<span class=\"sy0\">#</span>PairR <span class=\"kw1\">end</span><br/>        YSList = <span class=\"br0\">{</span>Filter YP <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> P<span class=\"br0\">}</span> <span class=\"br0\">{</span>Abs XM<span class=\"sy0\">-</span>P<span class=\"sy0\">.</span>X<span class=\"br0\">}</span> <span class=\"sy0\">&lt;</span> DMin <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>        YS = <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>toTuple <span class=\"kw1\">unit</span> YSList<span class=\"br0\">}</span> <span class=\"co1\">%% for efficient random access</span><br/>        NS = <span class=\"br0\">{</span>Width YS<span class=\"br0\">}</span><br/>        Closest = <span class=\"br0\">{</span>NewCell DMin<span class=\"br0\">}</span><br/>        ClosestPair = <span class=\"br0\">{</span>NewCell PairMin<span class=\"br0\">}</span><br/>     <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>NS<span class=\"sy0\">-</span>1 <span class=\"kw1\">do</span><br/>           <span class=\"kw1\">for</span> K <span class=\"kw1\">in</span> I<span class=\"sy0\">+</span>1<span class=\"sy0\">..</span>NS while:YS<span class=\"sy0\">.</span>K<span class=\"sy0\">.</span>Y <span class=\"sy0\">-</span> YS<span class=\"sy0\">.</span>I<span class=\"sy0\">.</span>Y <span class=\"sy0\">&lt;</span> DMin <span class=\"kw1\">do</span><br/>              DistKI = <span class=\"br0\">{</span>Distance YS<span class=\"sy0\">.</span>K YS<span class=\"sy0\">.</span>I<span class=\"br0\">}</span><br/>           <span class=\"kw1\">in</span><br/>              <span class=\"kw1\">if</span> DistKI <span class=\"sy0\">&lt;</span> <span class=\"sy0\">@</span>Closest <span class=\"kw1\">then</span><br/>                 Closest <span class=\"sy0\">:=</span> DistKI<br/>                 ClosestPair <span class=\"sy0\">:=</span> YS<span class=\"sy0\">.</span>K<span class=\"sy0\">#</span>YS<span class=\"sy0\">.</span>I<br/>              <span class=\"kw1\">end</span><br/>           <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"sy0\">@</span>Closest<span class=\"sy0\">#@</span>ClosestPair<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% To access components when points are represented as pairs</span><br/>  X = 1<br/>  Y = 2<br/>\u00a0<br/>  <span class=\"co1\">%% returns a less-than predicate that accesses feature F</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">LessThanBy</span> F<span class=\"br0\">}</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> A B<span class=\"br0\">}</span><br/>        A<span class=\"sy0\">.</span>F <span class=\"sy0\">&lt;</span> B<span class=\"sy0\">.</span>F<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Random</span> Min Max<span class=\"br0\">}</span><br/>     Min <span class=\"sy0\">+</span><br/>     <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Max<span class=\"sy0\">-</span>Min<span class=\"br0\">)</span><br/>     <span class=\"sy0\">/</span> <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>randLimits _<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">RandomPoint</span><span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Random 0<span class=\"sy0\">.</span>0 100<span class=\"sy0\">.</span>0<span class=\"br0\">}</span><span class=\"sy0\">#</span><span class=\"br0\">{</span>Random 0<span class=\"sy0\">.</span>0 100<span class=\"sy0\">.</span>0<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Points = <span class=\"br0\">{</span>MakeList 5<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ForAll Points RandomPoint<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show Points<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>ClosestPair Points<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">closestPair<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"kw1\">norml2</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span>v<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>at<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>a<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>b<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">norml2</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">-</span>v<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>r<span class=\"sy0\">,</span><br/>        at<span class=\"sy0\">=</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        r<span class=\"sy0\">=</span><span class=\"kw1\">norml2</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">-</span>v<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span>v<span class=\"br0\">[</span>at<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>at<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 67, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> closestPoints<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>   <span class=\"co2\">{$MODE Delphi}</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">const</span><br/>  PointCnt <span class=\"sy3\">=</span> <span class=\"nu0\">10000</span><span class=\"sy1\">;</span><span class=\"co1\">//31623;</span><br/><span class=\"kw1\">type</span><br/>  TdblPoint <span class=\"sy3\">=</span> <span class=\"kw4\">Record</span><br/>               ptX<span class=\"sy1\">,</span><br/>               ptY <span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>              <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tPtLst <span class=\"sy3\">=</span>  <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> TdblPoint<span class=\"sy1\">;</span><br/>\u00a0<br/>  tMinDIstIdx  <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                   md1<span class=\"sy1\">,</span><br/>                   md2 <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>                 <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ClosPointBruteForce<span class=\"br0\">(</span><span class=\"kw1\">var</span>  ptl <span class=\"sy1\">:</span>tPtLst<span class=\"br0\">)</span><span class=\"sy1\">:</span>tMinDIstIdx<span class=\"sy1\">;</span><br/><span class=\"kw1\">Var</span><br/>  i<span class=\"sy1\">,</span>j<span class=\"sy1\">,</span>k <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  mindst2<span class=\"sy1\">,</span>dst2<span class=\"sy1\">:</span> double<span class=\"sy1\">;</span> <span class=\"co1\">//square of distance, no need to sqrt</span><br/>  p0<span class=\"sy1\">,</span>p1 <span class=\"sy1\">:</span> <span class=\"sy2\">^</span>TdblPoint<span class=\"sy1\">;</span>   <span class=\"co1\">//using pointer, since calc of ptl[?] takes much time</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>ptl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>ptl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">md1</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span>result<span class=\"sy1\">.</span><span class=\"me1\">md2</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>  mindst2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sqr<span class=\"br0\">(</span>ptl<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptX</span><span class=\"sy3\">-</span>ptl<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptX</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>sqr<span class=\"br0\">(</span>ptl<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptY</span><span class=\"sy3\">-</span>ptl<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptY</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    p0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>ptl<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    p1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p0<span class=\"sy1\">;</span> inc<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> j <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      dst2<span class=\"sy1\">:</span><span class=\"sy3\">=</span> sqr<span class=\"br0\">(</span>p0<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">ptX</span><span class=\"sy3\">-</span>p1<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">ptX</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>sqr<span class=\"br0\">(</span>p0<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">ptY</span><span class=\"sy3\">-</span>p1<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">ptY</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> mindst2 &gt; dst2  <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        mindst2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  dst2<span class=\"sy1\">;</span><br/>        result<span class=\"sy1\">.</span><span class=\"me1\">md1</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>        result<span class=\"sy1\">.</span><span class=\"me1\">md2</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>p1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i <span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  PointLst <span class=\"sy1\">:</span>tPtLst<span class=\"sy1\">;</span><br/>  cloPt <span class=\"sy1\">:</span> tMinDIstIdx<span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  randomize<span class=\"sy1\">;</span><br/>  setlength<span class=\"br0\">(</span>PointLst<span class=\"sy1\">,</span>PointCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> PointCnt<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">with</span> PointLst<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      ptX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> random<span class=\"sy1\">;</span><br/>      ptY <span class=\"sy1\">:</span><span class=\"sy3\">=</span> random<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  cloPt<span class=\"sy1\">:</span><span class=\"sy3\">=</span>  ClosPointBruteForce<span class=\"br0\">(</span>PointLst<span class=\"br0\">)</span> <span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cloPt<span class=\"sy1\">.</span><span class=\"me1\">md1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'P['</span><span class=\"sy1\">,</span>i<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">']= x: '</span><span class=\"sy1\">,</span>PointLst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptX</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>                     <span class=\"st0\">' y: '</span><span class=\"sy1\">,</span>PointLst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptY</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cloPt<span class=\"sy1\">.</span><span class=\"me1\">md2</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'P['</span><span class=\"sy1\">,</span>i<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">']= x: '</span><span class=\"sy1\">,</span>PointLst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptX</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><br/>                     <span class=\"st0\">' y: '</span><span class=\"sy1\">,</span>PointLst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">ptY</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 107, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#! /usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> POSIX <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>ceil<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dist<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span><br/>                 <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> closest_pair_simple<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ra</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@arr</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$ra</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$inf</span> <span class=\"sy0\">=</span> 1e600<span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$inf</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@arr</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dist<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">@arr</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@arr</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$l</span> <span class=\"br0\">(</span><span class=\"re0\">@arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> dist<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$t</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span>\t    <br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> closest_pair<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ax</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@$r</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ay</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@$r</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">\\@ax</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@ay</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> closest_pair_real<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$rx</span><span class=\"sy0\">,</span> <span class=\"re0\">$ry</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@xP</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$rx</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yP</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$ry</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> closest_pair_simple<span class=\"br0\">(</span><span class=\"re0\">$rx</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@xP</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$inf</span> <span class=\"sy0\">=</span> 1e600<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$midx</span> <span class=\"sy0\">=</span> ceil<span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@PL</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$midx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@PR</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"br0\">[</span><span class=\"re0\">$midx</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$N</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$xm</span> <span class=\"sy0\">=</span> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"re0\">$xP</span><span class=\"br0\">[</span><span class=\"re0\">$midx</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yR</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yL</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"br0\">(</span><span class=\"re0\">@yP</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$xm</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@yR</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@yL</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$al</span><span class=\"sy0\">,</span> <span class=\"re0\">$bl</span><span class=\"sy0\">,</span> <span class=\"re0\">$dL</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">\\@PL</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@yR</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ar</span><span class=\"sy0\">,</span> <span class=\"re0\">$br</span><span class=\"sy0\">,</span> <span class=\"re0\">$dR</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">\\@PR</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@yL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$al</span><span class=\"sy0\">,</span> <span class=\"re0\">$bl</span><span class=\"sy0\">,</span> <span class=\"re0\">$dL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$ar</span><span class=\"sy0\">,</span> <span class=\"re0\">$br</span><span class=\"sy0\">,</span> <span class=\"re0\">$dR</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$dR</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dL</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yS</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"br0\">(</span><span class=\"re0\">@yP</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@yS</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$xm</span> <span class=\"sy0\">-</span> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"re0\">$p</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">@yS</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$closest</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span><span class=\"re0\">$#yS</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$#yS</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"re0\">$yS</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"re0\">$yS</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> dist<span class=\"br0\">(</span><span class=\"re0\">$yS</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$yS</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$closest</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$yS</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$yS</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$d</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$closest</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$k</span><span class=\"sy0\">++;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$closest</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@points</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5000</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$N</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@points</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">10.0</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">10.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair_simple<span class=\"br0\">(</span><span class=\"re0\">\\@points</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$b1</span><span class=\"sy0\">,</span> <span class=\"re0\">$d1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair<span class=\"br0\">(</span><span class=\"re0\">\\@points</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$d1<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 77, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@points</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"kw3\">rand</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$af</span><span class=\"sy0\">,</span> <span class=\"re0\">$bf</span><span class=\"sy0\">,</span> <span class=\"re0\">$df</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair<span class=\"br0\">(</span><span class=\"re0\">@points</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"fast $df at [$af], [$bf]\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$as</span><span class=\"sy0\">,</span> <span class=\"re0\">$bs</span><span class=\"sy0\">,</span> <span class=\"re0\">$ds</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair_simple<span class=\"br0\">(</span><span class=\"re0\">@points</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"slow $ds at [$as], [$bs]\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dist<span class=\"sy0\">-</span>squared<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> closest_pair_simple<span class=\"br0\">(</span><span class=\"re0\">@arr</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> Inf <span class=\"kw1\">if</span> <span class=\"re0\">@arr</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> flat <span class=\"re0\">@arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dist<span class=\"sy0\">-</span>squared<span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"re0\">@arr</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span>  <span class=\"re0\">@arr</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"kw3\">pop</span> <span class=\"re0\">@arr</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@arr</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$l</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> dist<span class=\"sy0\">-</span>squared<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span> <span class=\"kw1\">if</span> <span class=\"re0\">$t</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span>         <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"kw3\">sqrt</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> closest_pair<span class=\"br0\">(</span><span class=\"re0\">@r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ax</span> <span class=\"sy0\">=</span> <span class=\"re0\">@r</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ay</span> <span class=\"sy0\">=</span> <span class=\"re0\">@r</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">@ax</span><span class=\"sy0\">,</span> <span class=\"re0\">@ay</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">@rx</span><span class=\"sy0\">,</span> <span class=\"re0\">@ry</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> closest_pair_simple<span class=\"br0\">(</span><span class=\"re0\">@rx</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">@rx</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@xP</span> <span class=\"sy0\">=</span> <span class=\"re0\">@rx</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yP</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ry</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$midx</span> <span class=\"sy0\">=</span> <span class=\"kw3\">ceiling</span><span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@PL</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$midx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@PR</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"br0\">[</span><span class=\"re0\">$midx</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$N</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$xm</span> <span class=\"sy0\">=</span> <span class=\"re0\">@xP</span><span class=\"br0\">[</span><span class=\"re0\">$midx</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yR</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yL</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$xm</span> <span class=\"sy0\">??</span> <span class=\"re0\">@yR</span> <span class=\"sy0\">!!</span> <span class=\"re0\">@yL</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">@yP</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$al</span><span class=\"sy0\">,</span> <span class=\"re0\">$bl</span><span class=\"sy0\">,</span> <span class=\"re0\">$dL</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">@PL</span><span class=\"sy0\">,</span> <span class=\"re0\">@yR</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ar</span><span class=\"sy0\">,</span> <span class=\"re0\">$br</span><span class=\"sy0\">,</span> <span class=\"re0\">$dR</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> closest_pair_real<span class=\"br0\">(</span><span class=\"re0\">@PR</span><span class=\"sy0\">,</span> <span class=\"re0\">@yL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$dR</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dL</span><br/>                               <span class=\"sy0\">??</span> <span class=\"br0\">(</span><span class=\"re0\">$ar</span><span class=\"sy0\">,</span> <span class=\"re0\">$br</span><span class=\"sy0\">,</span> <span class=\"re0\">$dR</span><span class=\"br0\">)</span><br/>                               <span class=\"sy0\">!!</span> <span class=\"br0\">(</span><span class=\"re0\">$al</span><span class=\"sy0\">,</span> <span class=\"re0\">$bl</span><span class=\"sy0\">,</span> <span class=\"re0\">$dL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@yS</span> <span class=\"sy0\">=</span> <span class=\"re0\">@yP</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$xm</span> <span class=\"sy0\">-</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"re0\">@yS</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$closest</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"re0\">@yS</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">@yS</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$k</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">last</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@yS</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"re0\">@yS</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sqrt</span> dist<span class=\"sy0\">-</span>squared<span class=\"br0\">(</span><span class=\"re0\">@yS</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@yS</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">(</span><span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$closest</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@yS</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@yS</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"kw1\">if</span> <span class=\"re0\">$d</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$closest</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$closest</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$m1</span><span class=\"sy0\">,</span> <span class=\"re0\">$m2</span><span class=\"sy0\">,</span> <span class=\"re0\">$dmin</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 104, "block": "<pre class=\"text highlighted_source\">function bruteForceClosestPair(sequence s)<br/>atom {x1,y1} = s[1], {x2,y2} = s[2], dx = x1-x2, dy = y1-y2, mind = dx*dx+dy*dy<br/>sequence minp = s[1..2]<br/>    for i=1 to length(s)-1 do<br/>        {x1,y1} = s[i]<br/>        for j=i+1 to length(s) do<br/>            {x2,y2} = s[j]<br/>            dx = x1-x2<br/>            dx = dx*dx<br/>            if dx&lt;mind then<br/>                dy = y1-y2<br/>                dx += dy*dy<br/>                if dx&lt;mind then<br/>                    mind = dx<br/>                    minp = {s[i],s[j]}<br/>                end if<br/>            end if<br/>        end for<br/>    end for<br/>    return {sqrt(mind),minp}<br/>end function<br/>\u00a0<br/>sequence testset = sq_rnd(repeat({1,1},10000))<br/>atom t0 = time()<br/>sequence points<br/>atom d<br/>{d,points} = bruteForceClosestPair(testset)<br/>-- (Sorting the final point pair makes brute/dc more likely to tally. Note however<br/>--  when &gt;1 equidistant pairs exist, brute and dc may well return different pairs;<br/>--  it is only a problem if they decide to return different minimum distances.)<br/>atom {{x1,y1},{x2,y2}} = sort(points)<br/>printf(1,\"Closest pair: {%f,%f} {%f,%f}, distance=%f (%3.2fs)\\n\",{x1,y2,x2,y2,d,time()-t0})<br/>\u00a0<br/>t0 = time()<br/>constant X = 1, Y = 2<br/>sequence xP = sort(testset)<br/>\u00a0<br/>function byY(sequence p1, p2)<br/>    return compare(p1[Y],p2[Y])<br/>end function<br/>sequence yP = custom_sort(routine_id(\"byY\"),testset)<br/>\u00a0<br/>function distsq(sequence p1,p2)<br/>atom {x1,y1} = p1, {x2,y2} = p2<br/>    x1 -= x2<br/>    y1 -= y2<br/>    return x1*x1 + y1*y1<br/>end function<br/>\u00a0<br/>function closestPair(sequence xP, yP)<br/>--             where xP is P(1) .. P(N) sorted by x coordinate, and<br/>--                   yP is P(1) .. P(N) sorted by y coordinate (ascending order)<br/>integer N, midN, k, nS<br/>sequence xL, xR, yL, yR, pairL, pairR, pairMin, yS, cPair<br/>atom xm, dL, dR, dmin, closest<br/>\u00a0<br/>    N = length(xP)<br/>    if length(yP)!=N then\u00a0?9/0 end if   -- (sanity check)<br/>    if N&lt;=3 then<br/>        return bruteForceClosestPair(xP)<br/>    end if<br/>    midN = floor(N/2)<br/>    xL = xP[1..midN]<br/>    xR = xP[midN+1..N]<br/>    xm = xP[midN][X]<br/>    yL = {}<br/>    yR = {}<br/>    for i=1 to N do<br/>        if yP[i][X]&lt;=xm then<br/>            yL = append(yL,yP[i])<br/>        else<br/>            yR = append(yR,yP[i])<br/>        end if<br/>    end for<br/>    {dL, pairL} = closestPair(xL, yL)<br/>    {dR, pairR} = closestPair(xR, yR)<br/>    {dmin, pairMin} = {dR, pairR}<br/>    if dL&lt;dR then<br/>        {dmin, pairMin} = {dL, pairL}<br/>    end if<br/>    yS = {}<br/>    for i=1 to length(yP) do<br/>        if abs(xm-yP[i][X])&lt;dmin then<br/>            yS = append(yS,yP[i])<br/>        end if<br/>    end for<br/>    nS = length(yS)<br/>    {closest, cPair} = {dmin*dmin, pairMin}<br/>    for i=1 to nS-1 do<br/>        k = i + 1<br/>        while k&lt;=nS and (yS[k][Y]-yS[i][Y])&lt;dmin do<br/>            d = distsq(yS[k],yS[i])<br/>            if d&lt;closest then<br/>                {closest, cPair} = {d, {yS[k], yS[i]}}<br/>            end if<br/>            k += 1<br/>        end while<br/>    end for<br/>    return {sqrt(closest), cPair}<br/>end function<br/>\u00a0<br/>{d,points} = closestPair(xP,yP)<br/>{{x1,y1},{x2,y2}} = sort(points)    -- (see note above)<br/>printf(1,\"Closest pair: {%f,%f} {%f,%f}, distance=%f (%3.2fs)\\n\",{x1,y2,x2,y2,d,time()-t0})</pre>"}, {"lang": "PicoLisp", "loc": 14, "block": "<pre class=\"text highlighted_source\">(de closestPairBF (Lst)<br/>   (let Min T<br/>      (use (Pt1 Pt2)<br/>         (for P Lst<br/>            (for Q Lst<br/>               (or<br/>                  (== P Q)<br/>                  (&gt;=<br/>                     (setq N<br/>                        (let (A (- (car P) (car Q))  B (- (cdr P) (cdr Q)))<br/>                           (+ (* A A) (* B B)) ) )<br/>                     Min )<br/>                  (setq Min N  Pt1 P  Pt2 Q) ) ) )<br/>         (list Pt1 Pt2 (sqrt Min)) ) ) )</pre>"}, {"lang": "PL/I", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Closest Pair Problem */<br/>closest: procedure options (main);<br/>   declare n fixed binary;<br/>\u00a0<br/>   get list (n);<br/>   begin;<br/>      declare 1 P(n),<br/>               2 x float,<br/>               2 y float;<br/>      declare (i, ii, j, jj) fixed binary;<br/>      declare (distance, min_distance initial (0) ) float;<br/>\u00a0<br/>      get list (P);<br/>      min_distance = sqrt( (P.x(1) - P.x(2))**2 + (P.y(1) - P.y(2))**2 );<br/>      ii = 1;  jj = 2;<br/>      do i = 1 to n;<br/>         do j = 1 to n;<br/>            distance = sqrt( (P.x(i) - P.x(j))**2 + (P.y(i) - P.y(j))**2 );<br/>            if distance &gt; 0 then<br/>             if distance &lt; min_distance  then<br/>               do;<br/>                  min_distance = distance;<br/>                  ii = i; jj = j;<br/>               end;<br/>         end;<br/>      end;<br/>      put skip edit ('The minimum distance ', min_distance,<br/>                     ' is between the points [', P.x(ii),<br/>                     ',', P.y(ii), '] and [', P.x(jj), ',', P.y(jj), ']' )<br/>                     (a, f(6,2));<br/>   end;<br/>end closest;<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 32, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/><span class=\"co1\">% main predicate, find and print closest point</span><br/>do_find_closest_points<span class=\"br0\">(</span>Points<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpoints_closest<span class=\"br0\">(</span>Points<span class=\"sy4\">,</span> points<span class=\"br0\">(</span>point<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span>Y1<span class=\"br0\">)</span><span class=\"sy4\">,</span>point<span class=\"br0\">(</span>X2<span class=\"sy4\">,</span>Y2<span class=\"br0\">)</span><span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Point 1\u00a0: (~p, ~p)~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X1<span class=\"sy4\">,</span>Y1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Point 1\u00a0: (~p, ~p)~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X2<span class=\"sy4\">,</span>Y2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Distance: ~p~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Dist<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Find the distance between two points</span><br/>distance<span class=\"br0\">(</span>point<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span>Y1<span class=\"br0\">)</span><span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X2<span class=\"sy4\">,</span>Y2<span class=\"br0\">)</span><span class=\"sy4\">,</span> points<span class=\"br0\">(</span>point<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span>Y1<span class=\"br0\">)</span><span class=\"sy4\">,</span>point<span class=\"br0\">(</span>X2<span class=\"sy4\">,</span>Y2<span class=\"br0\">)</span><span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tDx <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X2 <span class=\"sy3\">-</span> X1<span class=\"sy4\">,</span><br/>\tDy <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y2 <span class=\"sy3\">-</span> Y1<span class=\"sy4\">,</span><br/>\tDist <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>Dx <span class=\"sy3\">*</span> Dx <span class=\"sy3\">+</span> Dy <span class=\"sy3\">*</span> Dy<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% find the closest point that relatest to another point</span><br/>point_closest<span class=\"br0\">(</span>Points<span class=\"sy4\">,</span> Point<span class=\"sy4\">,</span> Closest<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tselect<span class=\"br0\">(</span>Point<span class=\"sy4\">,</span> Points<span class=\"sy4\">,</span> Remaining<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>distance<span class=\"br0\">(</span>Point<span class=\"br0\">)</span><span class=\"sy4\">,</span> Remaining<span class=\"sy4\">,</span> PointList<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfoldl<span class=\"br0\">(</span>closest<span class=\"sy4\">,</span> PointList<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Closest<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% find the closest point/dist pair for all points</span><br/>points_closest<span class=\"br0\">(</span>Points<span class=\"sy4\">,</span> Closest<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span>point_closest<span class=\"br0\">(</span>Points<span class=\"br0\">)</span><span class=\"sy4\">,</span> Points<span class=\"sy4\">,</span> ClosestPerPoint<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfoldl<span class=\"br0\">(</span>closest<span class=\"sy4\">,</span> ClosestPerPoint<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Closest<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% used by foldl to get the lowest point/distance combination</span><br/>closest<span class=\"br0\">(</span>points<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span>P2<span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> points<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span>P2<span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>closest<span class=\"br0\">(</span>points<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"sy4\">,</span> points<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span>P2<span class=\"sy4\">,</span>Dist2<span class=\"br0\">)</span><span class=\"sy4\">,</span> points<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span>P2<span class=\"sy4\">,</span>Dist2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tDist2 <span class=\"sy6\">&lt;</span> Dist<span class=\"sy4\">.</span><br/>closest<span class=\"br0\">(</span>points<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span>P2<span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"sy4\">,</span> points<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>Dist2<span class=\"br0\">)</span><span class=\"sy4\">,</span> points<span class=\"br0\">(</span>P1<span class=\"sy4\">,</span>P2<span class=\"sy4\">,</span>Dist<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tDist <span class=\"sy6\">=&lt;</span> Dist2<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 20, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.d bruteForceClosestPair<span class=\"br0\">(</span>Array P.coordinate<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> N<span class=\"sy0\">=</span>ArraySize<span class=\"br0\">(</span>P<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, i, j<br/>  <span class=\"kw1\">Protected</span> mindistance.f<span class=\"sy0\">=</span>Infinity<span class=\"br0\">(</span><span class=\"br0\">)</span>, t.d<br/>  <span class=\"kw1\">Shared</span> a, b<br/>  <span class=\"kw1\">If</span> N<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><br/>    a<span class=\"sy0\">=</span><span class=\"nu0\">0</span>: b<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> N<br/>        t<span class=\"sy0\">=</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>P<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x<span class=\"sy0\">-</span>P<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>x,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>P<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y<span class=\"sy0\">-</span>P<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">\\</span>y,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> mindistance<span class=\"sy0\">&gt;</span>t<br/>          mindistance<span class=\"sy0\">=</span>t<br/>          a<span class=\"sy0\">=</span>i: b<span class=\"sy0\">=</span>j<br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> mindistance<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 87, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">\"\"\"<br/>  Compute nearest pair of points using two algorithms<br/>\u00a0<br/>  First algorithm is 'brute force' comparison of every possible pair.<br/>  Second, 'divide and conquer', is based on:<br/>    www.cs.iupui.edu/~xkzou/teaching/CS580/Divide-and-conquer-closestPair.ppt <br/>\"\"\"</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randint<span class=\"sy0\">,</span> randrange<br/><span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> itemgetter<span class=\"sy0\">,</span> attrgetter<br/>\u00a0<br/>infinity <span class=\"sy0\">=</span> <span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"st0\">'inf'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Note the use of complex numbers to represent 2D points making distance == abs(P1-P2)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> bruteForceClosestPair<span class=\"br0\">(</span>point<span class=\"br0\">)</span>:<br/>    numPoints <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>point<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> numPoints <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> infinity<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>point<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - point<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>point<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> point<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>numPoints-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"sy0\">,</span>numPoints<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                key<span class=\"sy0\">=</span>itemgetter<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> closestPair<span class=\"br0\">(</span>point<span class=\"br0\">)</span>:<br/>    xP <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>point<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span> attrgetter<span class=\"br0\">(</span><span class=\"st0\">'real'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    yP <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>point<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span> attrgetter<span class=\"br0\">(</span><span class=\"st0\">'imag'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> _closestPair<span class=\"br0\">(</span>xP<span class=\"sy0\">,</span> yP<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> _closestPair<span class=\"br0\">(</span>xP<span class=\"sy0\">,</span> yP<span class=\"br0\">)</span>:<br/>    numPoints <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>xP<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> numPoints <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span>:<br/>        <span class=\"kw1\">return</span> bruteForceClosestPair<span class=\"br0\">(</span>xP<span class=\"br0\">)</span><br/>    Pl <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span>:numPoints/<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    Pr <span class=\"sy0\">=</span> xP<span class=\"br0\">[</span>numPoints/<span class=\"nu0\">2</span>:<span class=\"br0\">]</span><br/>    Yl<span class=\"sy0\">,</span> Yr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    xDivider <span class=\"sy0\">=</span> Pl<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">real</span><br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> yP:<br/>        <span class=\"kw1\">if</span> p.<span class=\"me1\">real</span> <span class=\"sy0\">&lt;=</span> xDivider:<br/>            Yl.<span class=\"me1\">append</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span>:<br/>            Yr.<span class=\"me1\">append</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">dl</span><span class=\"sy0\">,</span> pairl <span class=\"sy0\">=</span> _closestPair<span class=\"br0\">(</span>Pl<span class=\"sy0\">,</span> Yl<span class=\"br0\">)</span><br/>    dr<span class=\"sy0\">,</span> pairr <span class=\"sy0\">=</span> _closestPair<span class=\"br0\">(</span>Pr<span class=\"sy0\">,</span> Yr<span class=\"br0\">)</span><br/>    dm<span class=\"sy0\">,</span> pairm <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">dl</span><span class=\"sy0\">,</span> pairl<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw3\">dl</span> <span class=\"sy0\">&lt;</span> dr <span class=\"kw1\">else</span> <span class=\"br0\">(</span>dr<span class=\"sy0\">,</span> pairr<span class=\"br0\">)</span><br/>    <span class=\"co1\"># Points within dm of xDivider sorted by Y coord</span><br/>    closeY <span class=\"sy0\">=</span> <span class=\"br0\">[</span>p <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> yP  <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>p.<span class=\"me1\">real</span> - xDivider<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> dm<span class=\"br0\">]</span><br/>    numCloseY <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>closeY<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> numCloseY <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"co1\"># There is a proof that you only need compare a max of 7 next points</span><br/>        closestY <span class=\"sy0\">=</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>closeY<span class=\"br0\">[</span>i<span class=\"br0\">]</span> - closeY<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>closeY<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> closeY<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>numCloseY-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw2\">min</span><span class=\"br0\">(</span>i+<span class=\"nu0\">8</span><span class=\"sy0\">,</span> numCloseY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        key<span class=\"sy0\">=</span>itemgetter<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>dm<span class=\"sy0\">,</span> pairm<span class=\"br0\">)</span> <span class=\"kw1\">if</span> dm <span class=\"sy0\">&lt;=</span> closestY<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> closestY<br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> dm<span class=\"sy0\">,</span> pairm<br/>\u00a0<br/><span class=\"kw1\">def</span> times<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">''' Time the different functions<br/>    '''</span><br/>    <span class=\"kw1\">import</span> <span class=\"kw3\">timeit</span><br/>\u00a0<br/>    functions <span class=\"sy0\">=</span> <span class=\"br0\">[</span>bruteForceClosestPair<span class=\"sy0\">,</span> closestPair<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> functions:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'Time for'</span><span class=\"sy0\">,</span> f.__name__<span class=\"sy0\">,</span> <span class=\"kw3\">timeit</span>.<span class=\"me1\">Timer</span><span class=\"br0\">(</span><br/>            <span class=\"st0\">'%s(pointList)'</span>\u00a0% f.__name__<span class=\"sy0\">,</span><br/>            <span class=\"st0\">'from closestpair import\u00a0%s, pointList'</span>\u00a0% f.__name__<span class=\"br0\">)</span>.<span class=\"kw3\">timeit</span><span class=\"br0\">(</span>number<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>pointList <span class=\"sy0\">=</span> <span class=\"br0\">[</span>randint<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>+1j*randint<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    pointList <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>+9j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>+3j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>+0j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span>+4j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>+4j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>+10j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+9j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span>+2j<span class=\"br0\">)</span><span class=\"sy0\">,</span> 10j<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>+6j<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span> pointList<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'  bruteForceClosestPair:'</span><span class=\"sy0\">,</span> bruteForceClosestPair<span class=\"br0\">(</span>pointList<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'            closestPair:'</span><span class=\"sy0\">,</span> closestPair<span class=\"br0\">(</span>pointList<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>        pointList <span class=\"sy0\">=</span> <span class=\"br0\">[</span>randrange<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>+1j*randrange<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">,</span> pointList<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">' bruteForceClosestPair:'</span><span class=\"sy0\">,</span> bruteForceClosestPair<span class=\"br0\">(</span>pointList<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'           closestPair:'</span><span class=\"sy0\">,</span> closestPair<span class=\"br0\">(</span>pointList<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>    times<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    times<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    times<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 30, "block": "<pre class=\"text highlighted_source\">closest_pair_brute &lt;-function(x,y,plotxy=F) { <br/>    xy = cbind(x,y)<br/>    cp = bruteforce(xy)<br/>    cat(\"\\n\\nShortest path found = \\n From:\\t\\t(\",cp[1],',',cp[2],\")\\n To:\\t\\t(\",cp[3],',',cp[4],\")\\n Distance:\\t\",cp[5],\"\\n\\n\",sep=\"\")<br/>    if(plotxy) {<br/>        plot(x,y,pch=19,col='black',main=\"Closest Pair\", asp=1)<br/>        points(cp[1],cp[2],pch=19,col='red')<br/>        points(cp[3],cp[4],pch=19,col='red')<br/>    }<br/>    distance &lt;- function(p1,p2) {<br/>        x1 = (p1[1])<br/>        y1 = (p1[2]) <br/>        x2 = (p2[1])<br/>        y2 = (p2[2]) <br/>        sqrt((x2-x1)^2 + (y2-y1)^2)<br/>    }<br/>    bf_iter &lt;- function(m,p,idx=NA,d=NA,n=1) {<br/>        dd = distance(p,m[n,])<br/>        if((is.na(d) || dd&lt;=d) &amp;&amp; p!=m[n,]){d = dd; idx=n;}<br/>        if(n == length(m[,1])) { c(m[idx,],d) }<br/>        else bf_iter(m,p,idx,d,n+1)<br/>    }<br/>    bruteforce &lt;- function(pmatrix,n=1,pd=c(NA,NA,NA,NA,NA)) {<br/>        p = pmatrix[n,]<br/>        ppd = c(p,bf_iter(pmatrix,p))<br/>        if(ppd[5]&lt;pd[5] || is.na(pd[5])) pd = ppd<br/>        if(n==length(pmatrix[,1]))  pd <br/>        else bruteforce(pmatrix,n+1,pd)<br/>    }<br/>}</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (dist z0 z1) (magnitude (- z1 z0)))<br/>(define (dist* zs)  (apply dist zs))<br/>\u00a0<br/>(define (closest-pair zs)<br/>  (if (&lt; (length zs) 2)<br/>      -inf.0<br/>      (first<br/>       (sort (for/list ([z0 zs])<br/>               (list z0 (argmin (\u03bb(z) (if (= z z0) +inf.0 (dist z z0))) zs)))<br/>             &lt; #:key dist*))))<br/>\u00a0<br/>(define result (closest-pair '(0+1i 1+2i 3+4i)))<br/>(displayln (~a \"Closest points: \" result))<br/>(displayln (~a \"Distance: \" (dist* result)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 30, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  solves the  closest pair  of  points  problem  (in two dimensions).     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N low high seed <span class=\"sy0\">.</span>                      <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>    N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>    N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>    N=   <span class=\"nu0\">100</span>        <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span>  low==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  low==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  low=     <span class=\"nu0\">0</span>        <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> high==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> high==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> high= <span class=\"nu0\">20000</span>        <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed <span class=\"coMULTI\">/*seed for RANDOM (BIF)  repeatability.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>high<span class=\"br0\">)</span>;   w=w + <span class=\"br0\">(</span>w<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/*W:   for aligning the output columns.*/</span><br/>   <span class=\"coMULTI\">/*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*/</span>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N            <span class=\"coMULTI\">/*generate N random points*/</span><br/>   <span class=\"coMULTI\">/*\u2551 generate  N  points. \u2551*/</span>      @x<span class=\"sy0\">.</span>j=<span class=\"kw6\">random</span><span class=\"br0\">(</span>low, high<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*    \"    a random   X   */</span><br/>   <span class=\"coMULTI\">/*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/</span>      @y<span class=\"sy0\">.</span>j=<span class=\"kw6\">random</span><span class=\"br0\">(</span>low, high<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*    \"    \"    \"     Y   */</span><br/>                                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>              <span class=\"coMULTI\">/*X  &amp;  Y  make the point.*/</span><br/>           A=<span class=\"nu0\">1</span>;   B=<span class=\"nu0\">2</span>                            <span class=\"coMULTI\">/* [\u2193]  MINDD  is actually the  squared*/</span><br/>minDD= <span class=\"br0\">(</span>@x<span class=\"sy0\">.</span>A - @x<span class=\"sy0\">.</span>B<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>   +   <span class=\"br0\">(</span>@y<span class=\"sy0\">.</span>A - @y<span class=\"sy0\">.</span>B<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>   <span class=\"coMULTI\">/*distance between the first two points*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  use of XJ &amp; YJ speed things up.*/</span><br/>    <span class=\"kw1\">do</span>   j=<span class=\"nu0\">1</span>   <span class=\"kw2\">for</span> N-<span class=\"nu0\">1</span>;   <a class=\"__cf_email__\" data-cfemail=\"097163344971\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j;   <a class=\"__cf_email__\" data-cfemail=\"c0b9aafd80b9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j     <span class=\"coMULTI\">/*find minimum distance between a \u00b7\u00b7\u00b7  */</span><br/>      <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> N                             <span class=\"coMULTI\">/*  \u00b7\u00b7\u00b7 point and all the other points.*/</span><br/>      dd=<span class=\"br0\">(</span>xj - @x<span class=\"sy0\">.</span>k<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>  +  <span class=\"br0\">(</span>yj - @y<span class=\"sy0\">.</span>k<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>       <span class=\"coMULTI\">/*compute squared distance from points.*/</span><br/>      <span class=\"kw1\">if</span> dd<span class=\"sy0\">&lt;</span>minDD  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span>  <span class=\"kw2\">value</span>   dd  j  k    <span class=\"kw2\">with</span>    minDD  A  B<br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                <span class=\"coMULTI\">/* [\u2191]  needn't take SQRT of DD  (yet).*/</span><br/>    <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span>                                <span class=\"coMULTI\">/* [\u2191]  when done, A &amp; B are the points*/</span><br/>                 $= <span class=\"st0\">'For '</span>   N   <span class=\"st0\">\" points, the minimum distance between the two points:  \"</span><br/><span class=\"kw1\">say</span> $ <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span>, w, <span class=\"st0\">'\u2550'</span><span class=\"br0\">)</span><span class=\"st0\">\" \"</span>      <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'y'</span>, w, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>      <span class=\"st0\">'  is: '</span>     sqrt<span class=\"br0\">(</span><span class=\"kw6\">abs</span><span class=\"br0\">(</span>minDD<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"st0\">\"[\"</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>@x<span class=\"sy0\">.</span>A, w<span class=\"br0\">)</span><span class=\"st0\">','</span>           <span class=\"kw6\">right</span><span class=\"br0\">(</span>@y<span class=\"sy0\">.</span>A, w<span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"st0\">\"[\"</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>@x<span class=\"sy0\">.</span>B, w<span class=\"br0\">)</span><span class=\"st0\">','</span>           <span class=\"kw6\">right</span><span class=\"br0\">(</span>@y<span class=\"sy0\">.</span>B, w<span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; h=d+<span class=\"nu0\">6</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h%2+<span class=\"nu0\">1</span>;       <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span>;   <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(10)<br/>x = list(10)<br/>y = list(10)<br/>x[1] = 0.654682<br/>y[1] = 0.925557<br/>x[2] = 0.409382<br/>y[2] = 0.619391<br/>x[3] = 0.891663<br/>y[3] = 0.888594<br/>x[4] = 0.716629<br/>y[4] = 0.996200<br/>x[5] = 0.477721<br/>y[5] = 0.946355<br/>x[6] = 0.925092<br/>y[6] = 0.818220<br/>x[7] = 0.624291<br/>y[7] = 0.142924<br/>x[8] = 0.211332<br/>y[8] = 0.221507<br/>x[9] = 0.293786<br/>y[9] = 0.691701<br/>x[10] = 0.839186<br/>y[10] = 0.728260<br/>\u00a0<br/>min = 10000<br/>for i = 1 to 9<br/>    for j = i+1 to 10<br/>        dsq = pow((x[i] - x[j]),2) + pow((y[i] - y[j]),2)<br/>        if dsq &lt; min min = dsq  mini = i minj = j ok<br/>    next<br/>next<br/>see \"closest pair is\u00a0: \" + mini + \" and \" + minj + \" at distance \" + sqrt(min)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 53, "block": "<pre class=\"ruby highlighted_source\">Point = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:x</span>, <span class=\"re3\">:y</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> distance<span class=\"br0\">(</span>p1, p2<span class=\"br0\">)</span><br/>  <span class=\"kw4\">Math</span>.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>p1.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> p2.<span class=\"me1\">x</span>, p1.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> p2.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> closest_bruteforce<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>  mindist, minpts = <span class=\"kw3\">Float</span>::MAX, <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  points.<span class=\"me1\">combination</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>pi,pj<span class=\"sy0\">|</span><br/>    dist = distance<span class=\"br0\">(</span>pi, pj<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> dist <span class=\"sy0\">&lt;</span> mindist<br/>      mindist = dist<br/>      minpts = <span class=\"br0\">[</span>pi, pj<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"br0\">[</span>mindist, minpts<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> closest_recursive<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> closest_bruteforce<span class=\"br0\">(</span>points<span class=\"br0\">)</span> <span class=\"kw1\">if</span> points.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">3</span><br/>  xP = points.<span class=\"me1\">sort_by</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:x<span class=\"br0\">)</span><br/>  mid = points.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  xm = xP<span class=\"br0\">[</span>mid<span class=\"br0\">]</span>.<span class=\"me1\">x</span><br/>  dL, pairL = closest_recursive<span class=\"br0\">(</span>xP<span class=\"br0\">[</span><span class=\"nu0\">0</span>,mid<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  dR, pairR = closest_recursive<span class=\"br0\">(</span>xP<span class=\"br0\">[</span>mid..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  dmin, dpair = dL<span class=\"sy0\">&lt;</span>dR\u00a0? <span class=\"br0\">[</span>dL, pairL<span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span>dR, pairR<span class=\"br0\">]</span><br/>  yP = xP.<span class=\"me1\">find_all</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> <span class=\"br0\">(</span>xm <span class=\"sy0\">-</span> <span class=\"kw3\">p</span>.<span class=\"me1\">x</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&lt;</span> dmin<span class=\"br0\">}</span>.<span class=\"me1\">sort_by</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:y<span class=\"br0\">)</span><br/>  closest, closestPair = dmin, dpair<br/>  <span class=\"nu0\">0</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span>yP.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span>yP.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>yP<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> yP<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= dmin<br/>      dist = distance<span class=\"br0\">(</span>yP<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, yP<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> dist <span class=\"sy0\">&lt;</span> closest<br/>        closest = dist<br/>        closestPair = <span class=\"br0\">[</span>yP<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, yP<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"br0\">[</span>closest, closestPair<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>points = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>Point.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span>, <span class=\"kw3\">rand</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw3\">p</span> ans1 = closest_bruteforce<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> ans2 = closest_recursive<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/><span class=\"kw3\">fail</span> <span class=\"st0\">\"bogus!\"</span> <span class=\"kw1\">if</span> ans1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\u00a0!= ans2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'benchmark'</span><br/>\u00a0<br/>points = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>Point.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span>, <span class=\"kw3\">rand</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw4\">Benchmark</span>.<span class=\"me1\">bm</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>  x.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">\"bruteforce\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>ans1 = closest_bruteforce<span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  x.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">\"recursive\"</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span>ans2 = closest_recursive<span class=\"br0\">(</span>points<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 41, "block": "<pre class=\"text highlighted_source\">n =10                              ' 10 data points input<br/>dim x(n)<br/>dim y(n)<br/>\u00a0<br/>pt1 = 0                            ' 1st point<br/>pt2 = 0                            ' 2nd point<br/>\u00a0<br/>for i =1 to n                      ' read in data<br/>    read x(i)\t\t\t\t\t\t<br/>    read y(i)<br/>next i<br/>\u00a0<br/>minDist  = 1000000<br/>\u00a0<br/>for i =1 to n -1<br/>    for j =i +1 to n<br/>      distXsq =(x(i) -x(j))^2<br/>      disYsq  =(y(i) -y(j))^2<br/>      d       =abs((dxSq +disYsq)^0.5)<br/>      if d &lt;minDist then<br/>        minDist =d<br/>        pt1     =i<br/>        pt2     =j<br/>      end if<br/>    next j<br/>next i<br/>\u00a0<br/>print \"Distance =\"; minDist; \" between (\"; x(pt1); \", \"; y(pt1); \") and (\"; x(pt2); \", \"; y(pt2); \")\"<br/>\u00a0<br/>end<br/>\u00a0<br/>data  0.654682, 0.925557<br/>data  0.409382, 0.619391<br/>data  0.891663, 0.888594<br/>data  0.716629, 0.996200<br/>data  0.477721, 0.946355<br/>data  0.925092, 0.818220<br/>data  0.624291, 0.142924<br/>data  0.211332, 0.221507<br/>data  0.293786, 0.691701<br/>data  0.839186,  0.72826</pre>"}, {"lang": "Scala", "loc": 134, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">ListBuffer</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ClosestPair <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Point<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double, y<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> distance<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"sy0\">=</span> math.<span class=\"me1\">hypot</span><span class=\"br0\">(</span>x-p.<span class=\"me1\">x</span>, y-p.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> + x + <span class=\"st0\">\", \"</span> + y + <span class=\"st0\">\")\"</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Pair<span class=\"br0\">(</span>point1<span class=\"sy0\">:</span> Point, point2<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> point1 distance point2<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      point1 + <span class=\"st0\">\"-\"</span> + point2 + <span class=\"st0\">\"\u00a0: \"</span> + distance<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sortByX<span class=\"br0\">(</span>points<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    points.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span>point <span class=\"sy0\">=&gt;</span> point.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sortByY<span class=\"br0\">(</span>points<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    points.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span>point <span class=\"sy0\">=&gt;</span> point.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> divideAndConquer<span class=\"br0\">(</span>points<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pointsSortedByX <span class=\"sy0\">=</span> sortByX<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pointsSortedByY <span class=\"sy0\">=</span> sortByY<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>\u00a0<br/>    divideAndConquer<span class=\"br0\">(</span>pointsSortedByX, pointsSortedByY<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> bruteForce<span class=\"br0\">(</span>points<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numPoints <span class=\"sy0\">=</span> points.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numPoints <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pair <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>points<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, points<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numPoints <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until numPoints - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> point1 <span class=\"sy0\">=</span> points<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- i + <span class=\"nu0\">1</span> until numPoints<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> point2 <span class=\"sy0\">=</span> points<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance <span class=\"sy0\">=</span> point1 distance point2<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>distance <span class=\"sy0\">&lt;</span> pair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>            pair <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>point1, point2<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> pair<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> divideAndConquer<span class=\"br0\">(</span>pointsSortedByX<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span>, pointsSortedByY<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numPoints <span class=\"sy0\">=</span> pointsSortedByX.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>numPoints <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> bruteForce<span class=\"br0\">(</span>pointsSortedByX<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dividingIndex <span class=\"sy0\">=</span> numPoints <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> leftOfCenter <span class=\"sy0\">=</span> pointsSortedByX.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, dividingIndex<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rightOfCenter <span class=\"sy0\">=</span> pointsSortedByX.<span class=\"me1\">slice</span><span class=\"br0\">(</span>dividingIndex, numPoints<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> tempList <span class=\"sy0\">=</span> leftOfCenter.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">)</span><br/>    <span class=\"co1\">//println(tempList)</span><br/>    tempList <span class=\"sy0\">=</span> sortByY<span class=\"br0\">(</span>tempList<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> closestPair <span class=\"sy0\">=</span> divideAndConquer<span class=\"br0\">(</span>leftOfCenter, tempList<span class=\"br0\">)</span><br/>\u00a0<br/>    tempList <span class=\"sy0\">=</span> rightOfCenter.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x<span class=\"br0\">)</span><br/>    tempList <span class=\"sy0\">=</span> sortByY<span class=\"br0\">(</span>tempList<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> closestPairRight <span class=\"sy0\">=</span> divideAndConquer<span class=\"br0\">(</span>rightOfCenter, tempList<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>closestPairRight.<span class=\"me1\">distance</span> <span class=\"sy0\">&lt;</span> closestPair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>      closestPair <span class=\"sy0\">=</span> closestPairRight<br/>\u00a0<br/>    tempList <span class=\"sy0\">=</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> shortestDistance <span class=\"sy0\">=</span> closestPair.<span class=\"me1\">distance</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> centerX <span class=\"sy0\">=</span> rightOfCenter<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">x</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>point <span class=\"sy0\">&lt;</span>- pointsSortedByY<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>centerX - point.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> shortestDistance<span class=\"br0\">)</span><br/>        tempList <span class=\"sy0\">=</span> tempList <span class=\"sy0\">:</span>+ point<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    closestPair <span class=\"sy0\">=</span> shortestDistanceF<span class=\"br0\">(</span>tempList, shortestDistance, closestPair<span class=\"br0\">)</span><br/>    closestPair<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> shortestDistanceF<span class=\"br0\">(</span>tempList<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Point<span class=\"br0\">]</span>, shortestDistance<span class=\"sy0\">:</span> Double, closestPair<span class=\"sy0\">:</span> Pair <span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> shortest <span class=\"sy0\">=</span> shortestDistance<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bestResult <span class=\"sy0\">=</span> closestPair<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until tempList.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> point1 <span class=\"sy0\">=</span> tempList<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span>- i + <span class=\"nu0\">1</span> until tempList.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> point2 <span class=\"sy0\">=</span> tempList<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>point2.<span class=\"me1\">y</span> - point1.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> shortestDistance<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> closestPair<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> distance <span class=\"sy0\">=</span> point1 distance point2<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>distance <span class=\"sy0\">&lt;</span> closestPair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          bestResult <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>point1, point2<span class=\"br0\">)</span><br/>          shortest <span class=\"sy0\">=</span> distance<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    closestPair<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numPoints <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1000</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> args<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> points <span class=\"sy0\">=</span> ListBuffer<span class=\"br0\">[</span>Point<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until numPoints<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      points.+<span class=\"sy0\">=:</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Point<span class=\"br0\">(</span>r.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, r.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Generated \"</span> + numPoints + <span class=\"st0\">\" random points\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> startTime <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bruteForceClosestPair <span class=\"sy0\">=</span> bruteForce<span class=\"br0\">(</span>points.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> elapsedTime <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - startTime<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Brute force (\"</span> + elapsedTime + <span class=\"st0\">\" ms): \"</span> + bruteForceClosestPair<span class=\"br0\">)</span><br/>\u00a0<br/>    startTime <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dqClosestPair <span class=\"sy0\">=</span> divideAndConquer<span class=\"br0\">(</span>points.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>    elapsedTime <span class=\"sy0\">=</span> System.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - startTime<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Divide and conquer (\"</span> + elapsedTime + <span class=\"st0\">\" ms): \"</span> + dqClosestPair<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>bruteForceClosestPair.<span class=\"me1\">distance</span> <span class=\"sy0\">!=</span> dqClosestPair.<span class=\"me1\">distance</span><span class=\"br0\">)</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"MISMATCH\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 33, "block": "<pre class=\"text highlighted_source\">const type: point is new struct<br/>    var float: x is 0.0;<br/>    var float: y is 0.0;<br/>  end struct;<br/>\u00a0<br/>const func float: distance (in point: p1, in point: p2) is<br/>  return sqrt((p1.x-p2.x)**2+(p1.y-p2.y)**2);<br/>\u00a0<br/>const func array point: closest_pair (in array point: points) is func<br/>  result<br/>    var array point: result is 0 times point.value;<br/>  local<br/>    var float: dist is 0.0;<br/>    var float: minDistance is Infinity;<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>    var integer: savei is 0;<br/>    var integer: savej is 0;<br/>  begin<br/>    for i range 1 to pred(length(points)) do<br/>      for j range succ(i) to length(points) do<br/>        dist\u00a0:= distance(points[i], points[j]);<br/>        if dist &lt; minDistance then<br/>          minDistance\u00a0:= dist;<br/>          savei\u00a0:= i;<br/>          savej\u00a0:= j;<br/>        end if;<br/>      end for;<br/>    end for;<br/>    if minDistance &lt;&gt; Infinity then<br/>      result\u00a0:= [] (points[savei], points[savej]);<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 71, "block": "<pre class=\"ruby highlighted_source\">func dist_squared<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sqr<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> sqr<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func closest_pair_simple<span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    arr.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> Inf<br/>    var <span class=\"br0\">(</span>a, b, d<span class=\"br0\">)</span> = <span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span>, dist_squared<span class=\"br0\">(</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    arr.<span class=\"me1\">clone</span>!<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var <span class=\"kw3\">p</span> = arr.<span class=\"me1\">pop</span><br/>        <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> arr <span class=\"br0\">{</span><br/>            var t = dist_squared<span class=\"br0\">(</span><span class=\"kw3\">p</span>, l<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t <span class=\"sy0\">&lt;</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">(</span>a, b, d<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"kw3\">p</span>, l, t<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span><span class=\"br0\">(</span>a, b, d.<span class=\"me1\">sqrt</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func closest_pair_real<span class=\"br0\">(</span>rx, ry<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    rx.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> closest_pair_simple<span class=\"br0\">(</span>rx<span class=\"br0\">)</span><br/>\u00a0<br/>    var N = rx.<span class=\"me1\">len</span><br/>    var midx = <span class=\"br0\">(</span>ceil<span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>PL, PR<span class=\"br0\">)</span> = rx.<span class=\"me1\">part</span><span class=\"br0\">(</span>midx<span class=\"br0\">)</span><br/>\u00a0<br/>    var xm = rx<span class=\"br0\">[</span>midx<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>    var yR = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var yL = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> item <span class=\"kw1\">in</span> ry <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= xm\u00a0? yR\u00a0: yL<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> item<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var <span class=\"br0\">(</span>al, bl, dL<span class=\"br0\">)</span> = closest_pair_real<span class=\"br0\">(</span>PL, yR<span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>ar, br, dR<span class=\"br0\">)</span> = closest_pair_real<span class=\"br0\">(</span>PR, yL<span class=\"br0\">)</span><br/>\u00a0<br/>    al == Inf <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"br0\">(</span>ar, br, dR<span class=\"br0\">)</span><br/>    ar == Inf <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"br0\">(</span>al, bl, dL<span class=\"br0\">)</span><br/>\u00a0<br/>    var <span class=\"br0\">(</span>m1, m2, dmin<span class=\"br0\">)</span> = <span class=\"br0\">(</span>dR <span class=\"sy0\">&lt;</span> dL\u00a0? <span class=\"br0\">[</span>ar, br, dR<span class=\"br0\">]</span>...<br/>                                 \u00a0: <span class=\"br0\">[</span>al, bl, dL<span class=\"br0\">]</span>...<span class=\"br0\">)</span><br/>\u00a0<br/>    var yS = ry.<span class=\"me1\">grep</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> abs<span class=\"br0\">(</span>xm <span class=\"sy0\">-</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> dmin <span class=\"br0\">}</span><br/>\u00a0<br/>    var <span class=\"br0\">(</span>w1, w2, closest<span class=\"br0\">)</span> = <span class=\"br0\">(</span>m1, m2, dmin<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> ..^ yS.<span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> .. <span class=\"me1\">yS</span>.<span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            yS<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> yS<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> dmin <span class=\"sy0\">||</span> <span class=\"kw1\">break</span><br/>            var d = dist_squared<span class=\"br0\">(</span>yS<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, yS<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&lt;</span> closest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">(</span>w1, w2, closest<span class=\"br0\">)</span> = <span class=\"br0\">(</span>yS<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, yS<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, d<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"br0\">(</span>w1, w2, closest<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func closest_pair<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var ax = r.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    var ay = r.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> closest_pair_real<span class=\"br0\">(</span>ax, ay<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var N = <span class=\"nu0\">5000</span><br/>var points = N.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span><span class=\"sy0\">*</span><span class=\"nu0\">20</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span><span class=\"sy0\">*</span><span class=\"nu0\">20</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>var <span class=\"br0\">(</span>af, bf, df<span class=\"br0\">)</span> = closest_pair<span class=\"br0\">(</span>points<span class=\"br0\">)</span><br/>say <span class=\"st0\">\"#{df} at (#{af.join(' ')}), (#{bf.join(' ')})\"</span></pre>"}, {"lang": "Smalltalk", "loc": 90, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># retrieve the x-coordinate</span><br/><span class=\"kw1\">proc</span> x p <span class=\"br0\">{</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"co1\"># retrieve the y-coordinate</span><br/><span class=\"kw1\">proc</span> y p <span class=\"br0\">{</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> distance <span class=\"br0\">{</span>p1 p2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span>hypot<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x <span class=\"re0\">$p1</span><span class=\"br0\">]</span>-<span class=\"br0\">[</span>x <span class=\"re0\">$p2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"br0\">[</span>y <span class=\"re0\">$p1</span><span class=\"br0\">]</span>-<span class=\"br0\">[</span>y <span class=\"re0\">$p2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> closest_bruteforce <span class=\"br0\">{</span>points<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> mindist Inf<br/>    <span class=\"kw1\">set</span> minpts <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> p1 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> p2 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> dist <span class=\"br0\">[</span>distance <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dist</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$mindist</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> mindist <span class=\"re0\">$dist</span><br/>                <span class=\"kw1\">set</span> minpts <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$mindist</span> <span class=\"re0\">$minpts</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> closest_recursive <span class=\"br0\">{</span>points<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>closest_bruteforce <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> xP <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -real -increasing -index <span class=\"nu0\">0</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> mid <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>ceil<span class=\"br0\">(</span><span class=\"re0\">$n</span>/<span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> PL <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$xP</span> <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$mid</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> PR <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$xP</span> <span class=\"re0\">$mid</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> procname <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> level <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    lassign <span class=\"br0\">[</span><span class=\"re0\">$procname</span> <span class=\"re0\">$PL</span><span class=\"br0\">]</span> dL pairL<br/>    lassign <span class=\"br0\">[</span><span class=\"re0\">$procname</span> <span class=\"re0\">$PR</span><span class=\"br0\">]</span> dR pairR<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dL</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dR</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> dmin <span class=\"re0\">$dL</span><br/>        <span class=\"kw1\">set</span> dpair <span class=\"re0\">$pairL</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> dmin <span class=\"re0\">$dR</span><br/>        <span class=\"kw1\">set</span> dpair <span class=\"re0\">$pairR</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> xM <span class=\"br0\">[</span>x <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$PL</span> end<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$xP</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$xM</span> - <span class=\"br0\">[</span>x <span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> S <span class=\"re0\">$p</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> yP <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -real -increasing -index <span class=\"nu0\">1</span> <span class=\"re0\">$S</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> closest Inf<br/>    <span class=\"kw1\">set</span> nP <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$yP</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$nP</span>-<span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> yPi <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yP</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> yPk <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yP</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$nP</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>y <span class=\"re0\">$yPk</span><span class=\"br0\">]</span>-<span class=\"br0\">[</span>y <span class=\"re0\">$yPi</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><br/>        <span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"sy0\">;</span> <span class=\"kw1\">set</span> yPk <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yP</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> dist <span class=\"br0\">[</span>distance <span class=\"re0\">$yPk</span> <span class=\"re0\">$yPi</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dist</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$closest</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> closest <span class=\"re0\">$dist</span><br/>                <span class=\"kw1\">set</span> closestPair <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$yPi</span> <span class=\"re0\">$yPk</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$closest</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$closest</span> <span class=\"re0\">$closestPair</span><span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$dmin</span> <span class=\"re0\">$dpair</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># testing</span><br/><span class=\"kw1\">set</span> N <span class=\"nu0\">10000</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$N</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> points <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># instrument the number of calls to [distance] to examine the</span><br/><span class=\"co1\"># efficiency of the recursive solution</span><br/>trace add execution distance enter comparisons<br/><span class=\"kw1\">proc</span> comparisons args <span class=\"br0\">{</span><span class=\"kw2\">incr</span>\u00a0::<span class=\"me1\">comparisons</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-10s \u00a0%9s \u00a0%9s \u00a0%s\"</span> <span class=\"kw1\">method</span> compares <span class=\"kw2\">time</span> closest<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">method</span> <span class=\"br0\">{</span>bruteforce recursive<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">comparisons</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">time</span> <span class=\"br0\">[</span><span class=\"kw2\">time</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">dist</span><span class=\"br0\">(</span><span class=\"re0\">$method</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>closest_<span class=\"re0\">$method</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-10s \u00a0%9d \u00a0%9d \u00a0%s\"</span> <span class=\"re0\">$method</span> <span class=\"sy0\">$</span>::<span class=\"me1\">comparisons</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$time</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"sy0\">$</span>::<span class=\"me1\">dist</span><span class=\"br0\">(</span><span class=\"re0\">$method</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 90, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># retrieve the x-coordinate</span><br/><span class=\"kw1\">proc</span> x p <span class=\"br0\">{</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"co1\"># retrieve the y-coordinate</span><br/><span class=\"kw1\">proc</span> y p <span class=\"br0\">{</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$p</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> distance <span class=\"br0\">{</span>p1 p2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span>hypot<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x <span class=\"re0\">$p1</span><span class=\"br0\">]</span>-<span class=\"br0\">[</span>x <span class=\"re0\">$p2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"br0\">[</span>y <span class=\"re0\">$p1</span><span class=\"br0\">]</span>-<span class=\"br0\">[</span>y <span class=\"re0\">$p2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> closest_bruteforce <span class=\"br0\">{</span>points<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> mindist Inf<br/>    <span class=\"kw1\">set</span> minpts <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> p1 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> p2 <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> dist <span class=\"br0\">[</span>distance <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dist</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$mindist</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> mindist <span class=\"re0\">$dist</span><br/>                <span class=\"kw1\">set</span> minpts <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$p1</span> <span class=\"re0\">$p2</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$mindist</span> <span class=\"re0\">$minpts</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> closest_recursive <span class=\"br0\">{</span>points<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>closest_bruteforce <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> xP <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -real -increasing -index <span class=\"nu0\">0</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> mid <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>ceil<span class=\"br0\">(</span><span class=\"re0\">$n</span>/<span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> PL <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$xP</span> <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$mid</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> PR <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$xP</span> <span class=\"re0\">$mid</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> procname <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> level <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    lassign <span class=\"br0\">[</span><span class=\"re0\">$procname</span> <span class=\"re0\">$PL</span><span class=\"br0\">]</span> dL pairL<br/>    lassign <span class=\"br0\">[</span><span class=\"re0\">$procname</span> <span class=\"re0\">$PR</span><span class=\"br0\">]</span> dR pairR<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dL</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dR</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> dmin <span class=\"re0\">$dL</span><br/>        <span class=\"kw1\">set</span> dpair <span class=\"re0\">$pairL</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> dmin <span class=\"re0\">$dR</span><br/>        <span class=\"kw1\">set</span> dpair <span class=\"re0\">$pairR</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> xM <span class=\"br0\">[</span>x <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$PL</span> end<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$xP</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$xM</span> - <span class=\"br0\">[</span>x <span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> S <span class=\"re0\">$p</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> yP <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -real -increasing -index <span class=\"nu0\">1</span> <span class=\"re0\">$S</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> closest Inf<br/>    <span class=\"kw1\">set</span> nP <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$yP</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$nP</span>-<span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> yPi <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yP</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> yPk <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yP</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$nP</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>y <span class=\"re0\">$yPk</span><span class=\"br0\">]</span>-<span class=\"br0\">[</span>y <span class=\"re0\">$yPi</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span><br/>        <span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"sy0\">;</span> <span class=\"kw1\">set</span> yPk <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$yP</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> dist <span class=\"br0\">[</span>distance <span class=\"re0\">$yPk</span> <span class=\"re0\">$yPi</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dist</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$closest</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> closest <span class=\"re0\">$dist</span><br/>                <span class=\"kw1\">set</span> closestPair <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$yPi</span> <span class=\"re0\">$yPk</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$closest</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$dmin</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$closest</span> <span class=\"re0\">$closestPair</span><span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$dmin</span> <span class=\"re0\">$dpair</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># testing</span><br/><span class=\"kw1\">set</span> N <span class=\"nu0\">10000</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$N</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> points <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># instrument the number of calls to [distance] to examine the</span><br/><span class=\"co1\"># efficiency of the recursive solution</span><br/>trace add execution distance enter comparisons<br/><span class=\"kw1\">proc</span> comparisons args <span class=\"br0\">{</span><span class=\"kw2\">incr</span>\u00a0::<span class=\"me1\">comparisons</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-10s \u00a0%9s \u00a0%9s \u00a0%s\"</span> <span class=\"kw1\">method</span> compares <span class=\"kw2\">time</span> closest<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">method</span> <span class=\"br0\">{</span>bruteforce recursive<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">comparisons</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">time</span> <span class=\"br0\">[</span><span class=\"kw2\">time</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">dist</span><span class=\"br0\">(</span><span class=\"re0\">$method</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>closest_<span class=\"re0\">$method</span> <span class=\"re0\">$points</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-10s \u00a0%9d \u00a0%9d \u00a0%s\"</span> <span class=\"re0\">$method</span> <span class=\"sy0\">$</span>::<span class=\"me1\">comparisons</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$time</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"sy0\">$</span>::<span class=\"me1\">dist</span><span class=\"br0\">(</span><span class=\"re0\">$method</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import flo<br/>\u00a0<br/>clop = @iiK0 fleq$-&amp;l+ *EZF ^\\~&amp; plus+ sqr~~+ minus~~bbI</pre>"}, {"lang": "VBA", "loc": 54, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> MyPoint<br/>    X <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span><br/>    Y <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> MyPair<br/>    p1 <span class=\"kw4\">As</span> MyPoint<br/>    p2 <span class=\"kw4\">As</span> MyPoint<br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> points() <span class=\"kw4\">As</span> MyPoint, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, BF <span class=\"kw4\">As</span> MyPair, d <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span>, Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> T#<br/>Randomize Timer<br/>    Nb = 10<br/>    <span class=\"kw3\">Do</span><br/>        <span class=\"kw4\">ReDim</span> points(1 <span class=\"kw3\">To</span> Nb)<br/>        <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Nb<br/>            points(i).X = Rnd * Nb<br/>            points(i).Y = Rnd * Nb<br/>        <span class=\"kw3\">Next</span><br/>        d = 1000000000000#<br/>T = Timer<br/>        BF = BruteForce(points, d)<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"For \"</span> &amp; Nb &amp; <span class=\"st0\">\" points, runtime\u00a0: \"</span> &amp; Timer - T &amp; <span class=\"st0\">\" sec.\"</span><br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"point 1\u00a0: X:\"</span> &amp; BF.p1.X &amp; <span class=\"st0\">\" Y:\"</span> &amp; BF.p1.Y<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"point 2\u00a0: X:\"</span> &amp; BF.p2.X &amp; <span class=\"st0\">\" Y:\"</span> &amp; BF.p2.Y<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"dist\u00a0: \"</span> &amp; d<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"--------------------------------------------------\"</span><br/>        Nb = Nb * 10<br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">While</span> Nb &lt;= 10000<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> BruteForce(p() <span class=\"kw4\">As</span> MyPoint, mindist <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span>) <span class=\"kw4\">As</span> MyPair<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, d <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span>, ClosestPair <span class=\"kw4\">As</span> MyPair<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(p) - 1<br/>        <span class=\"kw3\">For</span> j = i + 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(p)<br/>            d = Dist(p(i), p(j))<br/>            <span class=\"kw3\">If</span> d &lt; mindist <span class=\"kw3\">Then</span><br/>                mindist = d<br/>                ClosestPair.p1 = p(i)<br/>                ClosestPair.p2 = p(j)<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">Next</span><br/>    BruteForce = ClosestPair<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Dist(p1 <span class=\"kw4\">As</span> MyPoint, p2 <span class=\"kw4\">As</span> MyPoint) <span class=\"kw4\">As</span> <span class=\"kw1\">Single</span><br/>    Dist = Sqr((p1.X - p2.X) ^ 2 + (p1.Y - p2.Y) ^ 2)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "Visual FoxPro", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>CLOSE DATABASES ALL<br/>CREATE CURSOR pairs(id I, xcoord B(6), ycoord B(6))<br/>INSERT INTO pairs VALUES (1, 0.654682, 0.925557)<br/>INSERT INTO pairs VALUES (2, 0.409382, 0.619391)<br/>INSERT INTO pairs VALUES (3, 0.891663, 0.888594)<br/>INSERT INTO pairs VALUES (4, 0.716629, 0.996200)<br/>INSERT INTO pairs VALUES (5, 0.477721, 0.946355)<br/>INSERT INTO pairs VALUES (6, 0.925092, 0.818220)<br/>INSERT INTO pairs VALUES (7, 0.624291, 0.142924)<br/>INSERT INTO pairs VALUES (8, 0.211332, 0.221507)<br/>INSERT INTO pairs VALUES (9, 0.293786, 0.691701)<br/>INSERT INTO pairs VALUES (10, 0.839186, 0.728260)<br/>\u00a0<br/>SELECT p1.id As id1, p2.id As id2,\u00a0;<br/>(p1.xcoord-p2.xcoord)^2 + (p1.ycoord-p2.ycoord)^2 As dist2\u00a0;<br/>FROM pairs p1 JOIN pairs p2 ON p1.id &lt; p2.id ORDER BY 3 INTO CURSOR tmp<br/>\u00a0<br/>GO TOP<br/>? \"Closest pair is \" + TRANSFORM(id1) + \" and \" + TRANSFORM(id2) + \".\"<br/>? \"Distance is \" + TRANSFORM(SQRT(dist2))<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 37, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>proc ClosestPair(P, N);         \\Show closest pair of points in array P<br/>real P; int N;<br/>real Dist2, MinDist2;<br/>int I, J, SI, SJ;<br/>[MinDist2:= 1e300;<br/>for I:= 0 to N-2 do<br/>    [for J:= I+1 to N-1 do<br/>        [Dist2:= sq(P(I,0)-P(J,0)) + sq(P(I,1)-P(J,1));<br/>        if Dist2 &lt; MinDist2 then \\squared distances are sufficient for compares<br/>            [MinDist2:= Dist2;<br/>            SI:= I;  SJ:= J;<br/>            ];<br/>        ];<br/>    ];<br/>IntOut(0, SI);  Text(0, \" -- \");  IntOut(0, SJ);  CrLf(0);<br/>RlOut(0, P(SI,0));  Text(0, \",\");  RlOut(0, P(SI,1)); <br/>Text(0, \" -- \");<br/>RlOut(0, P(SJ,0));  Text(0, \",\");  RlOut(0, P(SJ,1)); <br/>CrLf(0);<br/>];<br/>\u00a0<br/>real Data;<br/>[Format(1, 6);<br/>Data:= [[0.654682, 0.925557],   \\0 test data from BASIC examples<br/>        [0.409382, 0.619391],   \\1<br/>        [0.891663, 0.888594],   \\2<br/>        [0.716629, 0.996200],   \\3<br/>        [0.477721, 0.946355],   \\4<br/>        [0.925092, 0.818220],   \\5<br/>        [0.624291, 0.142924],   \\6<br/>        [0.211332, 0.221507],   \\7<br/>        [0.293786, 0.691701],   \\8<br/>        [0.839186, 0.728260]];  \\9<br/>ClosestPair(Data, 10);<br/>]</pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">class Point{<br/>   fcn init(_x,_y){ var[const] x=_x, y=_y; }<br/>   fcn distance(p){ (p.x-x).hypot(p.y-y) }<br/>   fcn toString   { String(\"Point(\",x,\",\",y,\")\") }<br/>}<br/>\u00a0<br/>   // find closest two points using brute ugly force:<br/>   // find all combinations of two points, measure distance, pick smallest<br/>fcn closestPoints(points){<br/>   pairs:=Utils.Helpers.pickNFrom(2,points);<br/>   triples:=pairs.apply(fcn([(p1,p2)]){ T(p1,p2,p1.distance(p2)) });<br/>   triples.reduce(fcn([(_,_,d1)]p1,[(_,_,d2)]p2){<br/>      if(d1 &lt; d2) p1 else p2<br/>   });<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 23, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DIM</span> x<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>: <span class=\"kw1\">DIM</span> y<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">30</span> READ x<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,y<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> min=1e30<br/><span class=\"nu0\">60</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">FOR</span> j=i+<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> p1=x<span class=\"br0\">(</span>i<span class=\"br0\">)</span>-x<span class=\"br0\">(</span>j<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> p2=y<span class=\"br0\">(</span>i<span class=\"br0\">)</span>-y<span class=\"br0\">(</span>j<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> dsq=p1*p1+p2*p2<br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> dsq&lt;min <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> min=dsq: <span class=\"kw1\">LET</span> mini=i: <span class=\"kw1\">LET</span> minj=j<br/><span class=\"nu0\">100</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">110</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Closest pair is \"</span>;mini;<span class=\"st0\">\" and \"</span>;minj;<span class=\"st0\">\" at distance \"</span>;<span class=\"kw3\">SQR</span> min<br/><span class=\"nu0\">130</span> STOP <br/><span class=\"nu0\">140</span> DATA <span class=\"nu0\">0.654682</span>,<span class=\"nu0\">0.925557</span><br/><span class=\"nu0\">150</span> DATA <span class=\"nu0\">0.409382</span>,<span class=\"nu0\">0.619391</span><br/><span class=\"nu0\">160</span> DATA <span class=\"nu0\">0.891663</span>,<span class=\"nu0\">0.888594</span><br/><span class=\"nu0\">170</span> DATA <span class=\"nu0\">0.716629</span>,<span class=\"nu0\">0.996200</span><br/><span class=\"nu0\">180</span> DATA <span class=\"nu0\">0.477721</span>,<span class=\"nu0\">0.946355</span><br/><span class=\"nu0\">190</span> DATA <span class=\"nu0\">0.925092</span>,<span class=\"nu0\">0.818220</span><br/><span class=\"nu0\">200</span> DATA <span class=\"nu0\">0.624291</span>,<span class=\"nu0\">0.142924</span><br/><span class=\"nu0\">210</span> DATA <span class=\"nu0\">0.211332</span>,<span class=\"nu0\">0.221507</span><br/><span class=\"nu0\">220</span> DATA <span class=\"nu0\">0.293786</span>,<span class=\"nu0\">0.691701</span><br/><span class=\"nu0\">230</span> DATA <span class=\"nu0\">0.839186</span>,<span class=\"nu0\">0.728260</span></pre>"}]}