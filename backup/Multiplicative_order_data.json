{"task": "Multiplicative_order", "blocks": [{"lang": "Ada", "loc": 21, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Multiplicative_Order <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Positive_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Find_Order<span class=\"br0\">(</span>Element, Modulus: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive;<br/>   <span class=\"co1\">-- naive algorithm</span><br/>   <span class=\"co1\">-- returns the smallest I such that (Element**I) mod Modulus = 1</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Find_Order<span class=\"br0\">(</span>Element: Positive;<br/>                       Coprime_Factors: Positive_Array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive;<br/>   <span class=\"co1\">-- faster algorithm for the same task</span><br/>   <span class=\"co1\">-- computes the order of all Coprime_Factors(I)</span><br/>   <span class=\"co1\">-- and returns their least common multiple</span><br/>   <span class=\"co1\">-- this gives the same result as Find_Order(Element, Modulus) </span><br/>   <span class=\"co1\">-- with Modulus being the product of all the Coprime_Factors(I)</span><br/>   <span class=\"co1\">--</span><br/>   <span class=\"co1\">-- preconditions: (1) 1 = GCD(Coprime_Factors(I), Coprime_Factors(J)) </span><br/>   <span class=\"co1\">--                    for all pairs I, J with I /= J</span><br/>   <span class=\"co1\">--                (2) 1 &lt; Coprime_Factors(I)   for all I</span><br/>\u00a0<br/><span class=\"kw1\">end</span> Multiplicative_Order;</pre>"}, {"lang": "ALGOL 68", "loc": 120, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> LOOPINT <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> POWMODSTRUCT <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/pow_mod.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> SORTSTRUCT <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/sort.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> GCDSTRUCT <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/gcd.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">PR READ \"prelude/iterator.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> is prime <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> p<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>    <span class=\"br0\">(</span> p <span class=\"sy1\">&gt;</span> 1 <span class=\"sy1\">|</span><span class=\"coMULTI\">#ANDF#</span> ALL<span class=\"br0\">(</span><span class=\"br0\">(</span>YIELDBOOL yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> factored<span class=\"br0\">(</span>p<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> f<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> e<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> yield<span class=\"br0\">(</span>f <span class=\"sy1\">=</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>4<span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> prime list <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>2<span class=\"sy1\">,</span>3<span class=\"sy1\">,</span>5<span class=\"sy1\">,</span>7<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> lhs<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> rhs<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> lhs <span class=\"sy1\">+</span>1<span class=\"br0\">]</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> next lhs<span class=\"sy1\">;</span><br/>    next lhs<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> lhs<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> lhs<span class=\"sy1\">;</span><br/>    lhs <span class=\"sy1\">:=</span> next lhs<span class=\"sy1\">;</span><br/>    lhs<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> lhs<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> rhs<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> primes <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> p<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> p index <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> prime list <span class=\"kw2\">DO</span><br/>        p<span class=\"sy1\">:=</span> prime list<span class=\"br0\">[</span>p index<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        yield<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">DO</span><br/>        p <span class=\"sy1\">+:=</span> 2<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> is prime<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>            p <span class=\"sy1\">+:=</span> 2<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        prime list <span class=\"sy1\">+:=</span> p<span class=\"sy1\">;</span><br/>        yield<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> factored <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> in a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a <span class=\"sy1\">:=</span> in a<span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># FOR          p IN  #</span> primes<span class=\"br0\">(</span> <span class=\"coMULTI\"># DO #</span><br/>       <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> p<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> j <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> a <span class=\"kw12\">MOD</span> p <span class=\"sy1\">=</span> 0 <span class=\"kw2\">DO</span><br/>            a <span class=\"sy1\">:=</span> a <span class=\"sy1\">%</span> p<span class=\"sy1\">;</span><br/>            j <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> j <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">THEN</span> yield <span class=\"br0\">(</span>p<span class=\"sy1\">,</span>j<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> a <span class=\"sy1\">&lt;</span> p<span class=\"sy1\">*</span>p <span class=\"kw2\">THEN</span> done <span class=\"kw2\">FI</span><br/>      <span class=\"br0\">)</span><br/>  <span class=\"coMULTI\"># ) OD #</span>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    done<span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> a <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">THEN</span> yield <span class=\"br0\">(</span>a<span class=\"sy1\">,</span>1<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> mult0rdr1 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> e<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> m <span class=\"sy1\">:=</span> p <span class=\"sy1\">**</span> <span class=\"kw8\">SHORTEN</span> e<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> t <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>p<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>p<span class=\"sy1\">**</span><span class=\"kw8\">SHORTEN</span> <span class=\"br0\">(</span>e<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">#  = Phi(p**e) where p prime #</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> q<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> qs <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># FOR          f0,f1 IN  #</span> factored<span class=\"br0\">(</span>t <span class=\"coMULTI\"># DO #</span><span class=\"sy1\">,</span> <br/>       <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> f0<span class=\"sy1\">,</span>f1<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>            <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"kw8\">SHORTEN</span><span class=\"br0\">(</span><span class=\"br0\">(</span>f1<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"kw8\">UPB</span> qs<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> next qs<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> <span class=\"kw8\">SHORTEN</span> f1 <span class=\"sy1\">+</span> 1 <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">FOR</span> q index <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> qs <span class=\"kw2\">DO</span><br/>                    q <span class=\"sy1\">:=</span> qs<span class=\"br0\">[</span>q index<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                    next qs<span class=\"br0\">[</span><span class=\"br0\">(</span>j<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"kw8\">UPB</span> qs<span class=\"sy1\">+</span>q index<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> q <span class=\"sy1\">*</span> f0<span class=\"sy1\">**</span><span class=\"br0\">(</span>j<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            qs <span class=\"sy1\">:=</span> next qs<br/>        <span class=\"br0\">)</span><br/>  <span class=\"coMULTI\">#   OD #</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">VOID</span><span class=\"br0\">(</span>in place shell sort<span class=\"br0\">(</span>qs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FOR</span> q index <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> qs <span class=\"kw2\">DO</span><br/>        q <span class=\"sy1\">:=</span> qs<span class=\"br0\">[</span>q index<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> pow mod<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>q<span class=\"sy1\">,</span>m<span class=\"br0\">)</span><span class=\"sy1\">=</span>1 <span class=\"kw2\">THEN</span> done <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    done<span class=\"sy1\">:</span><br/>    q<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> reduce <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> diadic<span class=\"sy1\">,</span> FORLONGINT iterator<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> initial value<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> out <span class=\"sy1\">:=</span> initial value<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># FOR          next IN #</span> iterator<span class=\"br0\">(</span> <span class=\"coMULTI\"># DO #</span><br/>     <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> next<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    out <span class=\"sy1\">:=</span> diadic<span class=\"br0\">(</span>out<span class=\"sy1\">,</span> next<span class=\"br0\">)</span><br/> <span class=\"coMULTI\"># OD #</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> mult order <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> m<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw4\">PROC</span> mofs <span class=\"sy1\">=</span> <span class=\"br0\">(</span>YIELDLONGINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>      <span class=\"coMULTI\"># FOR          p,          count IN #</span> factored<span class=\"br0\">(</span>m<span class=\"sy1\">,</span> <span class=\"coMULTI\"># DO #</span><br/>           <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> p<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> count<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>            yield<span class=\"br0\">(</span>mult0rdr1<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>p<span class=\"sy1\">,</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>  <span class=\"coMULTI\"># OD #</span>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    reduce<span class=\"br0\">(</span>lcm<span class=\"sy1\">,</span> mofs<span class=\"sy1\">,</span> 1<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw6\">FORMAT</span> d <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy1\">,</span> mult order<span class=\"br0\">(</span>37<span class=\"sy1\">,</span> 1000<span class=\"br0\">)</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>        <span class=\"coMULTI\"># 100 #</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> b <span class=\"sy1\">:=</span> <span class=\"kw8\">LENG</span> 10<span class=\"sy1\">**</span>20<span class=\"sy1\">-</span>1<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy1\">,</span> mult order<span class=\"br0\">(</span>2<span class=\"sy1\">,</span> b<span class=\"br0\">)</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># 3748806900 #</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy1\">,</span> mult order<span class=\"br0\">(</span>17<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># 1499522760 #</span><br/>    b <span class=\"sy1\">:=</span> 100001<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy1\">,</span> mult order<span class=\"br0\">(</span>54<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>d<span class=\"sy1\">,</span> pow mod<span class=\"br0\">(</span> 54<span class=\"sy1\">,</span> mult order<span class=\"br0\">(</span>54<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> ANY<span class=\"br0\">(</span> <span class=\"br0\">(</span>YIELDBOOL yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">FOR</span> r <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">SHORTEN</span> mult order<span class=\"br0\">(</span>54<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span> yield<span class=\"br0\">(</span>1<span class=\"sy1\">=</span>pow mod<span class=\"br0\">(</span>54<span class=\"sy1\">,</span>r<span class=\"sy1\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span>  <span class=\"br0\">)</span><br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g$<span class=\"sy1\">,</span> <span class=\"st0\">\"Exists a power r &lt; 9090 where pow mod(54,r,b) = 1\"</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g$<span class=\"sy1\">,</span> <span class=\"st0\">\"Everything checks.\"</span><span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "C", "loc": 63, "block": "<pre class=\"c highlighted_source\">ulong mpow<span class=\"br0\">(</span>ulong a<span class=\"sy0\">,</span> ulong p<span class=\"sy0\">,</span> ulong m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> r <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> a <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>\t\ta <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>\t\tp <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ulong ipow<span class=\"br0\">(</span>ulong a<span class=\"sy0\">,</span> ulong p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tulong r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> r <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> a<span class=\"sy0\">;</span><br/>\t\ta <span class=\"sy0\">*=</span> a<span class=\"sy0\">;</span><br/>\t\tp <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ulong gcd<span class=\"br0\">(</span>ulong m<span class=\"sy0\">,</span> ulong n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong t<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> t <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ulong lcm<span class=\"br0\">(</span>ulong m<span class=\"sy0\">,</span> ulong n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong g <span class=\"sy0\">=</span> gcd<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> m <span class=\"sy0\">/</span> g <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ulong multi_order_p<span class=\"br0\">(</span>ulong a<span class=\"sy0\">,</span> ulong p<span class=\"sy0\">,</span> ulong e<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong fac<span class=\"br0\">[</span><span class=\"nu0\">10000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tulong m <span class=\"sy0\">=</span> ipow<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tulong t <span class=\"sy0\">=</span> m <span class=\"sy0\">/</span> p <span class=\"sy0\">*</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> get_factors<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> fac<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>mpow<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> fac<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> m<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> fac<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ulong multi_order<span class=\"br0\">(</span>ulong a<span class=\"sy0\">,</span> ulong m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tprime_factor pf<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> get_prime_factors<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> pf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tulong res <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tres <span class=\"sy0\">=</span> lcm<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> multi_order_p<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> pf<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">p</span><span class=\"sy0\">,</span> pf<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tsieve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> multi_order<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> multi_order<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">100001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 189, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> MultiplicativeOrder <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Taken from https://stackoverflow.com/a/33918233</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> PrimeExtensions <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Random generator (thread safe)</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> ThreadLocal<span class=\"sy0\">&lt;</span>Random<span class=\"sy0\">&gt;</span> s_Gen <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ThreadLocal<span class=\"sy0\">&lt;</span>Random<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>              <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Random generator (thread safe)</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Random Gen <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> s_Gen<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsProbablyPrime<span class=\"br0\">(</span><span class=\"kw1\">this</span> BigInteger <span class=\"kw1\">value</span>, <span class=\"kw4\">int</span> witnesses <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>witnesses <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                witnesses <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            BigInteger d <span class=\"sy0\">=</span> <span class=\"kw1\">value</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>d <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                d <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                s <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">ToByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">LongLength</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            BigInteger a<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> witnesses<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                    Gen<span class=\"sy0\">.</span><span class=\"me1\">NextBytes</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    a <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> a <span class=\"sy0\">&gt;=</span> <span class=\"kw1\">value</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                BigInteger x <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">ModPow</span><span class=\"br0\">(</span>a, d, <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> <span class=\"kw1\">value</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> s<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    x <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">ModPow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">2</span>, <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"kw1\">value</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> <span class=\"kw1\">value</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Helper <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BigInteger Sqrt<span class=\"br0\">(</span><span class=\"kw1\">this</span> BigInteger self<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BigInteger b <span class=\"sy0\">=</span> self<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                BigInteger a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>                b <span class=\"sy0\">=</span> self <span class=\"sy0\">/</span> a <span class=\"sy0\">+</span> a <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;=</span> a<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> BitLength<span class=\"br0\">(</span><span class=\"kw1\">this</span> BigInteger self<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BigInteger bi <span class=\"sy0\">=</span> self<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">long</span> bitlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>bi <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                bitlength<span class=\"sy0\">++;</span><br/>                bi <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> bitlength<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> BitTest<span class=\"br0\">(</span><span class=\"kw1\">this</span> BigInteger self, <span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span><span class=\"me1\">ToByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> pos <span class=\"sy0\">/</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> mod <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>idx <span class=\"sy0\">&gt;=</span> arr<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> mod<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> PExp <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> PExp<span class=\"br0\">(</span>BigInteger prime, <span class=\"kw4\">int</span> exp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Prime <span class=\"sy0\">=</span> prime<span class=\"sy0\">;</span><br/>            Exp <span class=\"sy0\">=</span> exp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> BigInteger Prime <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Exp <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> MoTest<span class=\"br0\">(</span>BigInteger a, BigInteger n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"sy0\">.</span><span class=\"me1\">IsProbablyPrime</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Not computed. Modulus must be prime for this algorithm.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">.</span><span class=\"me1\">BitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"ord({0})\"</span>, a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"ord([big])\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">.</span><span class=\"me1\">BitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" mod {0} \"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" mod [big] \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            BigInteger mob <span class=\"sy0\">=</span> MoBachShallit58<span class=\"br0\">(</span>a, n, Factor<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"= {0}\"</span>, mob<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> BigInteger MoBachShallit58<span class=\"br0\">(</span>BigInteger a, BigInteger n, List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BigInteger n1 <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            BigInteger mo <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>PExp pe <span class=\"kw1\">in</span> pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                BigInteger y <span class=\"sy0\">=</span> n1 <span class=\"sy0\">/</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>pe<span class=\"sy0\">.</span><span class=\"me1\">Prime</span>, pe<span class=\"sy0\">.</span><span class=\"me1\">Exp</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> o <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                BigInteger x <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">ModPow</span><span class=\"br0\">(</span>a, y, BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    x <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">ModPow</span><span class=\"br0\">(</span>x, pe<span class=\"sy0\">.</span><span class=\"me1\">Prime</span>, BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    o<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>                BigInteger o1 <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>pe<span class=\"sy0\">.</span><span class=\"me1\">Prime</span>, o<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                o1 <span class=\"sy0\">=</span> o1 <span class=\"sy0\">/</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">GreatestCommonDivisor</span><span class=\"br0\">(</span>mo, o1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                mo <span class=\"sy0\">=</span> mo <span class=\"sy0\">*</span> o1<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> mo<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> Factor<span class=\"br0\">(</span>BigInteger n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> pf <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BigInteger nn <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>nn<span class=\"sy0\">.</span><span class=\"me1\">BitTest</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> e<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                nn <span class=\"sy0\">=</span> nn <span class=\"sy0\">&gt;&gt;</span> e<span class=\"sy0\">;</span><br/>                pf<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PExp<span class=\"br0\">(</span><span class=\"nu0\">2</span>, e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            BigInteger s <span class=\"sy0\">=</span> nn<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BigInteger d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> s<span class=\"br0\">)</span> d <span class=\"sy0\">=</span> nn<span class=\"sy0\">;</span><br/>                e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    BigInteger div <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">DivRem</span><span class=\"br0\">(</span>nn, d, <span class=\"kw1\">out</span> BigInteger rem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem<span class=\"sy0\">.</span><span class=\"me1\">BitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    nn <span class=\"sy0\">=</span> div<span class=\"sy0\">;</span><br/>                    e<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    pf<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PExp<span class=\"br0\">(</span>d, e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    s <span class=\"sy0\">=</span> nn<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                d <span class=\"sy0\">=</span> d <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> pf<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            MoTest<span class=\"br0\">(</span><span class=\"nu0\">37</span>, <span class=\"nu0\">3343</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            MoTest<span class=\"br0\">(</span>BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">7919</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            MoTest<span class=\"br0\">(</span>BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">15485863</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            MoTest<span class=\"br0\">(</span>BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">22801763489</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            MoTest<span class=\"br0\">(</span><span class=\"nu0\">1511678068</span>, <span class=\"nu0\">7379191741</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            MoTest<span class=\"br0\">(</span><span class=\"nu0\">3047753288</span>, <span class=\"nu0\">2257683301</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 156, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> PExp <span class=\"br0\">{</span><br/>    BigInt prime<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> exp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BigInt gcd<span class=\"br0\">(</span>BigInt x<span class=\"sy0\">,</span> BigInt y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> gcd<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// https://en.wikipedia.org/wiki/Modular_exponentiation#Right-to-left_binary_method</span><br/>BigInt modPow<span class=\"br0\">(</span>BigInt b<span class=\"sy0\">,</span> BigInt e<span class=\"sy0\">,</span> BigInt n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    BigInt result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    b <span class=\"sy0\">=</span> b <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        e <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b<span class=\"sy0\">*</span>b<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BigInt pow<span class=\"br0\">(</span><span class=\"kw4\">long</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">long</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> pow<span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> BigInt<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>BigInt pow<span class=\"br0\">(</span>BigInt b<span class=\"sy0\">,</span> BigInt e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    BigInt result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            b <span class=\"sy0\">*=</span> b<span class=\"sy0\">;</span><br/>            e <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            result <span class=\"sy0\">*=</span> b<span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">*=</span> b<span class=\"sy0\">;</span><br/>            e <span class=\"sy0\">=</span> <span class=\"br0\">(</span>e <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> b <span class=\"sy0\">*</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BigInt sqrt<span class=\"br0\">(</span>BigInt self<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BigInt b <span class=\"sy0\">=</span> self<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BigInt a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> self <span class=\"sy0\">/</span> a <span class=\"sy0\">+</span> a <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;=</span> a<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> bitLength<span class=\"br0\">(</span>BigInt self<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BigInt bi <span class=\"sy0\">=</span> self<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> length<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>bi <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        length<span class=\"sy0\">++;</span><br/>        bi <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> length<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>PExp<span class=\"br0\">[</span><span class=\"br0\">]</span> factor<span class=\"br0\">(</span>BigInt n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    PExp<span class=\"br0\">[</span><span class=\"br0\">]</span> pf<span class=\"sy0\">;</span><br/>    BigInt nn <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nn <span class=\"sy0\">&amp;</span> e<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        e <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        b<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nn <span class=\"sy0\">=</span> nn <span class=\"sy0\">&gt;&gt;</span> b<span class=\"sy0\">;</span><br/>        pf <span class=\"sy0\">~=</span> PExp<span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    BigInt s <span class=\"sy0\">=</span> nn.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    BigInt d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> s<span class=\"br0\">)</span> d <span class=\"sy0\">=</span> nn<span class=\"sy0\">;</span><br/>        e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BigInt div<span class=\"sy0\">,</span> rem<span class=\"sy0\">;</span><br/>            nn.<span class=\"me1\">divMod</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span> div<span class=\"sy0\">,</span> rem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem.<span class=\"me1\">bitLength</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            nn <span class=\"sy0\">=</span> div<span class=\"sy0\">;</span><br/>            e<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            pf <span class=\"sy0\">~=</span> PExp<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            s <span class=\"sy0\">=</span> nn.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        d <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> pf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BigInt moBachShallit58<span class=\"br0\">(</span>BigInt a<span class=\"sy0\">,</span> BigInt n<span class=\"sy0\">,</span> PExp<span class=\"br0\">[</span><span class=\"br0\">]</span> pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BigInt n1 <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    BigInt mo <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>pe<span class=\"sy0\">;</span> pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BigInt y <span class=\"sy0\">=</span> n1 <span class=\"sy0\">/</span> pe.<span class=\"me1\">prime</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span>pe.<span class=\"me1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> o <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        BigInt x <span class=\"sy0\">=</span> a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>y<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            x <span class=\"sy0\">=</span> x.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>pe.<span class=\"me1\">prime</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            o<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        BigInt o1 <span class=\"sy0\">=</span> pe.<span class=\"me1\">prime</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        o1 <span class=\"sy0\">=</span> o1 <span class=\"sy0\">/</span> gcd<span class=\"br0\">(</span>mo<span class=\"sy0\">,</span> o1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        mo <span class=\"sy0\">=</span> mo <span class=\"sy0\">*</span> o1<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> mo<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> moTest<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">ulong</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    moTest<span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> moTest<span class=\"br0\">(</span>BigInt a<span class=\"sy0\">,</span> <span class=\"kw4\">ulong</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Commented out because the implementations tried all failed for the -2 and -3 tests.</span><br/>    <span class=\"co1\">// if (!n.isProbablePrime()) {</span><br/>        <span class=\"co1\">// writeln(\"Not computed. Modulus must be prime for this algorithm.\");</span><br/>        <span class=\"co1\">// return;</span><br/>    <span class=\"co1\">// }</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">bitLength</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"ord(\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"ord([big])\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\" mod \"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    BigInt nn <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    BigInt mob <span class=\"sy0\">=</span> moBachShallit58<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> nn<span class=\"sy0\">,</span> factor<span class=\"br0\">(</span>nn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"= \"</span><span class=\"sy0\">,</span> mob<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    moTest<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">3343</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    moTest<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7919</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    moTest<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">15485863</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    moTest<span class=\"br0\">(</span>pow<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">22801763489</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    moTest<span class=\"br0\">(</span><span class=\"nu0\">1511678068</span><span class=\"sy0\">,</span> <span class=\"nu0\">7379191741</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    moTest<span class=\"br0\">(</span><span class=\"nu0\">3047753288</span><span class=\"sy0\">,</span> <span class=\"nu0\">2257683301</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 34, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'bigint<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; factor-exp returns a list ((p k) ..)\u00a0: a = p1^k1 * p2^k2 ..</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factor<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> a<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t\t\t\t<span class=\"br0\">(</span>group<span class=\"sy0\">*</span> <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; copied from Ruby</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>_mult_order a p k  <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> pk <span class=\"br0\">(</span><span class=\"kw1\">expt</span> p k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">t</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> p <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> r <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>factor<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> <span class=\"kw1\">t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <span class=\"br0\">(</span>powmod a <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"kw1\">t</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> q <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span> pk<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">!=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t    \t<span class=\"br0\">(</span><span class=\"sy0\">*=</span> r q<span class=\"br0\">)</span><br/>\t    \t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <span class=\"br0\">(</span>powmod x q pk<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tr<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>order a m<span class=\"br0\">)</span><br/>        <span class=\"st0\">\"multiplicative order\u00a0: (order a m) \u2192  n\u00a0: a^n = 1 (mod m)\"</span><br/>\t<span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">gcd</span> a m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"a and m must be coprimes\"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> mopks <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p k<span class=\"br0\">)</span>  <span class=\"br0\">(</span>factor<span class=\"sy0\">-</span><span class=\"kw1\">exp</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>_mult_order a p k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mopk mopks<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lcm</span> n mopk<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; results</span><br/>order <span class=\"nu0\">37</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">100</span><br/><span class=\"br0\">(</span>order <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">7919</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">3959</span><br/><span class=\"br0\">(</span>order <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">10</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">15485863</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">15485862</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 27, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> gcd <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> b<span class=\"br0\">)</span><br/>      a<br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> b <span class=\"br0\">(</span>mod a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lcm <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>gcd a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> NaN  <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>log <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> ord' <span class=\"br0\">[</span>a <span class=\"br0\">[</span>p e<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>m   <span class=\"br0\">(</span>imath<span class=\"sy0\">/</span>expt p e<span class=\"br0\">)</span><br/>         t   <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>quot m p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>dv <span class=\"br0\">(</span>factor<span class=\"sy0\">/</span>divisors t<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>d <span class=\"br0\">(</span><span class=\"kw1\">first</span> dv<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mmath<span class=\"sy0\">/</span>expm a d m<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                     d<br/>                     <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>next dv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> ord <span class=\"br0\">[</span>a n<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>gcd a n<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      NaN<br/>      <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span><br/>         <span class=\"br0\">(</span>factor<span class=\"sy0\">/</span>factorize n<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial ord' a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> lcm<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 102, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    moTest<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">37</span><span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3343</span><span class=\"sy1\">))</span><br/>    b <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">100</span><span class=\"sy1\">)</span><br/>    moTest<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>ten<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">),</span> one<span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">7919</span><span class=\"sy1\">))</span><br/>    moTest<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>ten<span class=\"sy1\">,</span> b<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1000</span><span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><span class=\"sy1\">),</span> one<span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">15485863</span><span class=\"sy1\">))</span><br/>    moTest<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>ten<span class=\"sy1\">,</span> b<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">10000</span><span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><span class=\"sy1\">),</span> one<span class=\"sy1\">),</span><br/>        big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">22801763489</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    moTest<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1511678068</span><span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">7379191741</span><span class=\"sy1\">))</span><br/>    moTest<span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3047753288</span><span class=\"sy1\">),</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2257683301</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> moTest<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> a<span class=\"sy3\">.</span>BitLen<span class=\"sy1\">()</span> &lt; <span class=\"nu0\">100</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"ord(%v)\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"ord([big])\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>BitLen<span class=\"sy1\">()</span> &lt; <span class=\"nu0\">100</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\" mod\u00a0%v \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" mod [big] \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>n<span class=\"sy3\">.</span>ProbablyPrime<span class=\"sy1\">(</span><span class=\"nu0\">20</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"not computed.  modulus must be prime for this algorithm.\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"=\"</span><span class=\"sy1\">,</span> moBachShallit58<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> factor<span class=\"sy1\">(</span><span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> one<span class=\"sy1\">))))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> one <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> two <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> ten <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> moBachShallit58<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">,</span> pf <span class=\"sy1\">[]</span>pExp<span class=\"sy1\">)</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    n1 <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> one<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> o1<span class=\"sy1\">,</span> g <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    mo <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> pe <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pf <span class=\"sy1\">{</span><br/>        y<span class=\"sy3\">.</span>Quo<span class=\"sy1\">(</span>n1<span class=\"sy1\">,</span> y<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>pe<span class=\"sy3\">.</span>prime<span class=\"sy1\">,</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span>pe<span class=\"sy3\">.</span>exp<span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/>        <span class=\"kw1\">var</span> o <span class=\"kw4\">int64</span><br/>        <span class=\"kw1\">for</span> x<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> &amp;y<span class=\"sy1\">,</span> n<span class=\"sy1\">);</span> x<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>one<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> o<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            x<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>&amp;x<span class=\"sy1\">,</span> pe<span class=\"sy3\">.</span>prime<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        o1<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>pe<span class=\"sy3\">.</span>prime<span class=\"sy1\">,</span> o1<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span>o<span class=\"sy1\">),</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>        mo<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>mo<span class=\"sy1\">,</span> o1<span class=\"sy3\">.</span>Quo<span class=\"sy1\">(</span>&amp;o1<span class=\"sy1\">,</span> g<span class=\"sy3\">.</span>GCD<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> mo<span class=\"sy1\">,</span> &amp;o1<span class=\"sy1\">)))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> mo<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pExp <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    prime <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    exp   <span class=\"kw4\">int64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> factor<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>pf <span class=\"sy1\">[]</span>pExp<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> e <span class=\"kw4\">int64</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span>e<span class=\"sy1\">))</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> e &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        n<span class=\"sy3\">.</span>Rsh<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"kw4\">uint</span><span class=\"sy1\">(</span>e<span class=\"sy1\">))</span><br/>        pf <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>pExp<span class=\"sy1\">{{</span>big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">),</span> e<span class=\"sy1\">}}</span><br/>    <span class=\"sy1\">}</span><br/>    s <span class=\"sy2\">:=</span> sqrt<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    q<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">),</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">);</span> n<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>one<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> d<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>d<span class=\"sy1\">,</span> two<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> d<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            d<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> e <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> e<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            q<span class=\"sy3\">.</span>QuoRem<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> r<span class=\"sy3\">.</span>BitLen<span class=\"sy1\">()</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            n<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>q<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> e &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            pf <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>pf<span class=\"sy1\">,</span> pExp<span class=\"sy1\">{</span><span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>d<span class=\"sy1\">),</span> e<span class=\"sy1\">})</span><br/>            s <span class=\"sy2\">=</span> sqrt<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sqrt<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    a <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>n<span class=\"sy1\">);</span> <span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        a<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>        b<span class=\"sy3\">.</span>Rsh<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Quo<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> a<span class=\"sy1\">),</span> a<span class=\"sy1\">),</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> b<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> a<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">primeFacsExp <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">mo=: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/> a=. x: <span class=\"kw2\">x</span><br/> <span class=\"kw2\">m</span>=. x: <span class=\"kw2\">y</span><br/> <span class=\"kw1\">assert.</span> <span class=\"nu0\">1</span>=a+.<span class=\"kw2\">m</span><br/> *./ a mopk\"<span class=\"nu0\">1</span> |: <span class=\"nu0\">__</span> q: <span class=\"kw2\">m</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 106, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MultiplicativeOrder <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> ONE <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> TWO <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> THREE <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> TEN <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">TEN</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> PExp <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> prime<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span> exp<span class=\"sy0\">;</span><br/>\u00a0<br/>        PExp<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> prime, <span class=\"kw4\">long</span> exp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">prime</span> <span class=\"sy0\">=</span> prime<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">exp</span> <span class=\"sy0\">=</span> exp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> moTest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> a, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Not computed. Modulus must be prime for this algorithm.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"ord(%s)\"</span>, a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"ord([big])\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" mod\u00a0%s \"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" mod [big] \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> mob <span class=\"sy0\">=</span> moBachShallit58<span class=\"br0\">(</span>a, n, factor<span class=\"br0\">(</span>n.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"= \"</span> <span class=\"sy0\">+</span> mob<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> moBachShallit58<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> a, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n, List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n1 <span class=\"sy0\">=</span> n.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> mo <span class=\"sy0\">=</span> ONE<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>PExp pe <span class=\"sy0\">:</span> pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> y <span class=\"sy0\">=</span> n1.<span class=\"me1\">divide</span><span class=\"br0\">(</span>pe.<span class=\"me1\">prime</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> pe.<span class=\"me1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">long</span> o <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> x <span class=\"sy0\">=</span> a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>y, n.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>pe.<span class=\"me1\">prime</span>, n.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                o<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> o1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            o1 <span class=\"sy0\">=</span> pe.<span class=\"me1\">prime</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>o1.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            o1 <span class=\"sy0\">=</span> o1.<span class=\"me1\">divide</span><span class=\"br0\">(</span>mo.<span class=\"me1\">gcd</span><span class=\"br0\">(</span>o1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            mo <span class=\"sy0\">=</span> mo.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>o1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> mo<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> factor<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> pf <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> nn <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a> e <span class=\"sy0\">=</span> 0L<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>nn.<span class=\"me1\">testBit</span><span class=\"br0\">(</span>e.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> e<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nn <span class=\"sy0\">=</span> nn.<span class=\"me1\">shiftRight</span><span class=\"br0\">(</span>e.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            pf.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> PExp<span class=\"br0\">(</span>TWO, e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> s <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> d <span class=\"sy0\">=</span> THREE<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nn.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> d <span class=\"sy0\">=</span> nn<span class=\"sy0\">;</span><br/>            e <span class=\"sy0\">=</span> 0L<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> qr <span class=\"sy0\">=</span> nn.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>qr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                nn <span class=\"sy0\">=</span> qr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                e<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                pf.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> PExp<span class=\"br0\">(</span>d, e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                s <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            d <span class=\"sy0\">=</span> d.<span class=\"me1\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> pf<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> sqrt<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> b <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> n.<span class=\"me1\">divide</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">shiftRight</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        moTest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3343</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> b <span class=\"sy0\">=</span> TEN.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        moTest<span class=\"br0\">(</span>b, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">7919</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        b <span class=\"sy0\">=</span> TEN.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        moTest<span class=\"br0\">(</span>b, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">15485863</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        b <span class=\"sy0\">=</span> TEN.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span>.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>ONE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        moTest<span class=\"br0\">(</span>b, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>22801763489L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        moTest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">1511678068</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>7379191741L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        moTest<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>3047753288L<span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>2257683301L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 23, "block": "<pre class=\"text highlighted_source\">function factors(n)<br/>    f = [one(n)]<br/>    for (p,e) in factor(n)<br/>        f = reduce(vcat, f, [f*p^j for j in 1:e])<br/>    end<br/>    return length(f) == 1\u00a0? [one(n), n]\u00a0: sort!(f)<br/>end<br/>\u00a0<br/>function multorder(a, m)<br/>    gcd(a,m) == 1 || error(\"$a and $m are not coprime\")<br/>    res = one(m)<br/>    for (p,e) in factor(m)<br/>        m = p^e<br/>        t = div(m, p) * (p-1)        <br/>        for f in factors(t)<br/>            if powermod(a, f, m) == 1<br/>                res = lcm(res, f)<br/>                break<br/>            end<br/>        end<br/>    end<br/>    res<br/>end</pre>"}, {"lang": "Kotlin", "loc": 94, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigOne   <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ONE</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigTwo   <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigThree <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigTen   <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">TEN</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PExp<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prime<span class=\"sy0\">:</span> BigInteger, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exp<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><br/>\u00a0<br/>fun moTest<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> BigInteger, n<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Not computed. Modulus must be prime for this algorithm.\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"ord($a)\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> print<span class=\"br0\">(</span><span class=\"st0\">\"ord([big])\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\" mod $n \"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> print<span class=\"br0\">(</span><span class=\"st0\">\" mod [big] \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mob <span class=\"sy0\">=</span> moBachShallit58<span class=\"br0\">(</span>a, n, factor<span class=\"br0\">(</span>n - bigOne<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"= $mob\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun moBachShallit58<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> BigInteger, n<span class=\"sy0\">:</span> BigInteger, pf<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInteger <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n1 <span class=\"sy0\">=</span> n - bigOne<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> mo <span class=\"sy0\">=</span> bigOne<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>pe in pf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> n1 / pe.<span class=\"me1\">prime</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>pe.<span class=\"me1\">exp</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> o <span class=\"sy0\">=</span> 0L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>y, n.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> bigOne<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            x <span class=\"sy0\">=</span> x.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>pe.<span class=\"me1\">prime</span>, n.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            o++<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> o1 <span class=\"sy0\">=</span> o.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        o1 <span class=\"sy0\">=</span> pe.<span class=\"me1\">prime</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>o1.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        o1 /<span class=\"sy0\">=</span> mo.<span class=\"me1\">gcd</span><span class=\"br0\">(</span>o1<span class=\"br0\">)</span><br/>        mo <span class=\"sy0\">*=</span> o1<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> mo<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun factor<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pf <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>PExp<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> e <span class=\"sy0\">=</span> 0L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>nn.<span class=\"me1\">testBit</span><span class=\"br0\">(</span>e.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> e++<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nn <span class=\"sy0\">=</span> nn shr e.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        pf.<span class=\"me1\">add</span><span class=\"br0\">(</span>PExp<span class=\"br0\">(</span>bigTwo, e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> bigSqrt<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> bigThree<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> bigOne<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> s<span class=\"br0\">)</span> d <span class=\"sy0\">=</span> nn<br/>        e <span class=\"sy0\">=</span> 0L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>q, r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> nn.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> break<br/>            nn <span class=\"sy0\">=</span> q<br/>            e++<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> 0L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            pf.<span class=\"me1\">add</span><span class=\"br0\">(</span>PExp<span class=\"br0\">(</span>d, e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            s <span class=\"sy0\">=</span> bigSqrt<span class=\"br0\">(</span>nn<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        d +<span class=\"sy0\">=</span> bigTwo<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> pf<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun bigSqrt<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInteger <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> b<br/>        b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n / a + a<span class=\"br0\">)</span> shr <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;=</span> a<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> a<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    moTest<span class=\"br0\">(</span><span class=\"nu0\">37</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">3343</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> bigTen.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> + bigOne<br/>    moTest<span class=\"br0\">(</span>b, <span class=\"nu0\">7919</span>.<span class=\"me1\">toBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    b <span class=\"sy0\">=</span> bigTen.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> + bigOne<br/>    moTest<span class=\"br0\">(</span>b, BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"15485863\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    b <span class=\"sy0\">=</span> bigTen.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span> - bigOne<br/>    moTest<span class=\"br0\">(</span>b, BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"22801763489\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    moTest<span class=\"br0\">(</span>BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"1511678068\"</span><span class=\"br0\">)</span>, BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"7379191741\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    moTest<span class=\"br0\">(</span>BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"3047753288\"</span><span class=\"br0\">)</span>, BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"2257683301\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">numtheory:-order( a, n )</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">MultiplicativeOrder[37, 1000]<br/>MultiplicativeOrder[10^100 + 1, 7919]        (*10^3th prime number  Prime[1000]*)<br/>MultiplicativeOrder[10^1000 + 1, 15485863]       (*10^6th prime number*)<br/>MultiplicativeOrder[10^10000 - 1, 22801763489]       (*10^9th prime number*)<br/>MultiplicativeOrder[13, 1 + 10^80]<br/>MultiplicativeOrder[11, 1 + 10^100]</pre>"}, {"lang": "Maxima", "loc": 17, "block": "<pre class=\"text highlighted_source\">zn_order(37, 1000);<br/>/* 100 */<br/>\u00a0<br/>zn_order(10^100 + 1, 7919);<br/>/* 3959 */<br/>\u00a0<br/>zn_order(10^1000 + 1, 15485863);<br/>/* 15485862 */<br/>\u00a0<br/>zn_order(10^10000 - 1, 22801763489);<br/>/* 22801763488 */<br/>\u00a0<br/>zn_order(13, 1 + 10^80);<br/>/* 109609547199756140150989321269669269476675495992554276140800 */<br/>\u00a0<br/>zn_order(11, 1 + 10^100);<br/>/* 2583496112724752500580158969425549088007844580826869433740066152289289764829816356800 */</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">znorder</span><span class=\"br0\">(</span><span class=\"kw1\">Mod</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/znorder/</span><span class=\"sy0\">;</span><br/>say znorder<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">100001</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span> say znorder<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 48, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"kw3\">grep</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">...*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> factor<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%%</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$a</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$j</span><span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            take <span class=\"re0\">$p</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$j</span> <span class=\"kw1\">if</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        take <span class=\"re0\">$a</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mo<span class=\"sy0\">-</span>prime<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$e</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span> <span class=\"sy0\">**</span> <span class=\"re0\">$e</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"re0\">$e</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">#  = Phi($p**$e) where $p prime</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@qs</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> factor<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$f</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@qs</span> <span class=\"sy0\">=</span> flat <span class=\"re0\">@qs</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"re0\">$q</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$f</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span> <span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$f</span><span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"sy0\">**</span> <span class=\"re0\">$j</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">@qs</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">first</span><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"re0\">$q</span> <span class=\"br0\">{</span> expmod<span class=\"br0\">(</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mo<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> gcd <span class=\"re0\">$m</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"$a and $m are not relatively prime\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">[</span>lcm<span class=\"br0\">]</span> flat <span class=\"nu0\">1</span><span class=\"sy0\">,</span> factor<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span> mo<span class=\"sy0\">-</span>prime<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span><span class=\"st0\">\"test\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">150</span><span class=\"sy0\">,</span> <span class=\"nu0\">1231</span><span class=\"sy0\">,</span> <span class=\"nu0\">123141</span><span class=\"sy0\">,</span> <span class=\"nu0\">34131</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> factor<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"re0\">$pair</span> <span class=\"br0\">{</span> <span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"sy0\">**</span> <span class=\"re0\">$pair</span><span class=\"sy0\">.</span><span class=\"me1\">value</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$n factors correctly\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">is</span> mo<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"st_h\">'mo(37,1000) == 100'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">20</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">is</span> mo<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">3748806900</span><span class=\"sy0\">,</span> <span class=\"st_h\">'mo(2,10**20-1) == 3748806900'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">is</span> mo<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1499522760</span><span class=\"sy0\">,</span> <span class=\"st_h\">'mo(17,10**20-1) == 1499522760'</span><span class=\"sy0\">;</span> <br/>    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100001</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">is</span> mo<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">9090</span><span class=\"sy0\">,</span> <span class=\"st_h\">'mo(54,100001) == 9090'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 66, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">while</span> b <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:<br/>        a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span> a\u00a0% b<br/>    <span class=\"kw1\">return</span> a<br/>\u00a0<br/><span class=\"kw1\">def</span> lcm<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a*b<span class=\"br0\">)</span> / gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>f <span class=\"sy0\">==</span> p <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>e <span class=\"kw1\">in</span> factored<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>primeList <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><br/><span class=\"kw1\">def</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primeList:<br/>        <span class=\"kw1\">yield</span> p<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>:<br/>        p +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>            p +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        primeList.<span class=\"me1\">append</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>        <span class=\"kw1\">yield</span> p<br/>\u00a0<br/><span class=\"kw1\">def</span> factored<span class=\"br0\">(</span> a<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">while</span> a%p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            a /<span class=\"sy0\">=</span> p<br/>            j +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span> p*p: <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> multOrdr1<span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>e<span class=\"br0\">)</span> <span class=\"br0\">)</span>:<br/>    m <span class=\"sy0\">=</span> p**e<br/>    t <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p-<span class=\"nu0\">1</span><span class=\"br0\">)</span>*<span class=\"br0\">(</span>p**<span class=\"br0\">(</span>e-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">#  = Phi(p**e) where p prime</span><br/>    qs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> factored<span class=\"br0\">(</span>t<span class=\"br0\">)</span>:<br/>        qs <span class=\"sy0\">=</span> <span class=\"br0\">[</span> q * f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>**j <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>+f<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> q <span class=\"kw1\">in</span> qs <span class=\"br0\">]</span><br/>    qs.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> q <span class=\"kw1\">in</span> qs:<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">pow</span><span class=\"br0\">(</span> a<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> m <span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span>: <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">return</span> q<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> multOrder<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>m<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">assert</span> gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>m<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>    mofs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>multOrdr1<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> factored<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span>lcm<span class=\"sy0\">,</span> mofs<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    <span class=\"kw1\">print</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span>        <span class=\"co1\"># 100</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>**<span class=\"nu0\">20</span>-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">print</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"co1\"># 3748806900</span><br/>    <span class=\"kw1\">print</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"co1\"># 1499522760</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">100001</span><br/>    <span class=\"kw1\">print</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"kw2\">pow</span><span class=\"br0\">(</span> <span class=\"nu0\">54</span><span class=\"sy0\">,</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">==</span><span class=\"kw2\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span>r<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>multOrder<span class=\"br0\">(</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'Exists a power r &lt; 9090 where pow(54,r,b)==1'</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'Everything checks.'</span></pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(define (order a n)<br/>  (unless (coprime? a n) (error 'order \"arguments must be coprime\"))<br/>  (for/fold ([o 1]) ([r (factorize n)])<br/>    (lcm o (order1 a r))))<br/>\u00a0<br/>(define (order1 a p&amp;e)<br/>  (match-define (list p e) p&amp;e)<br/>  (define m (expt p e))<br/>  (define t (* (- p 1) (expt p (- e 1))))<br/>  (define qs<br/>    (for/fold ([qs '(1)]) ([f (factorize t)])<br/>       (match f [(list f0 f1)<br/>                 (for*/list ([q qs] [j (in-range (+ 1 f1))])<br/>                   (* q (expt f0 j)))])))<br/>  (for/or ([q (sort qs &lt;)] #:when (= (modular-expt a q m) 1)) q))<br/>\u00a0<br/>\u00a0<br/>(order 37 1000)<br/>(order (+ (expt 10 100) 1) 7919)<br/>(order (+ (expt 10 1000) 1) 15485863)<br/>(order (- (expt 10 10000) 1) 22801763489)<br/>(order 13 (+ 1 (expt 10 80)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm computes multiplicative order of a minimum integer  N  such that  a^n mod m\u22611*/</span><br/>wa=<span class=\"nu0\">0</span>; wm=<span class=\"nu0\">0</span>     <span class=\"coMULTI\">/*       \u2550a\u2550   \u2550\u2550m\u2550\u2550     */</span>       <span class=\"coMULTI\">/*maximum widths of the A and M values.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;              @<span class=\"sy0\">.</span>1=   <span class=\"nu0\">3</span>      <span class=\"nu0\">10</span><br/>                   @<span class=\"sy0\">.</span>2=  <span class=\"nu0\">37</span>    <span class=\"nu0\">1000</span><br/>                   @<span class=\"sy0\">.</span>3=  <span class=\"nu0\">37</span>   <span class=\"nu0\">10000</span><br/>                   @<span class=\"sy0\">.</span>4=  <span class=\"nu0\">37</span>    <span class=\"nu0\">3343</span><br/>                   @<span class=\"sy0\">.</span>5=  <span class=\"nu0\">37</span>    <span class=\"nu0\">3344</span><br/>                   @<span class=\"sy0\">.</span>6=   <span class=\"nu0\">2</span>    <span class=\"nu0\">1000</span><br/>pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>d=<span class=\"nu0\">100</span>                                            <span class=\"coMULTI\">/*use 100 decimal digits for a starter.*/</span><br/>     <span class=\"kw1\">do</span> w=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>                               <span class=\"coMULTI\">/*when W\u22611, find max widths of A and M.*/</span><br/>       <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> @<span class=\"sy0\">.</span>j a <span class=\"sy0\">.</span> <span class=\"nu0\">1</span> r m , n<br/>       <span class=\"kw1\">if</span> w==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  wa=<span class=\"kw6\">max</span><span class=\"br0\">(</span>wa, <span class=\"kw6\">length</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>;   wm=<span class=\"kw6\">max</span><span class=\"br0\">(</span>wm, <span class=\"kw6\">length</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span>;   <span class=\"kw1\">iterate</span>;   <span class=\"kw3\">end</span><br/>       <span class=\"kw1\">if</span> m<span class=\"sy0\">//</span>a==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> n= <span class=\"st0\">' [solution not possible]'</span>     <span class=\"coMULTI\">/*test co-prime for  A and B. */</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d                          <span class=\"coMULTI\">/*start with  100  decimal digits.     */</span><br/>       <span class=\"kw1\">if</span> n==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> n=<span class=\"nu0\">2</span>;     p=r<span class=\"sy0\">*</span>a          <span class=\"coMULTI\">/*compute product\u2500\u2500may have an exponent*/</span><br/>                      <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  p  <span class=\"st0\">'E'</span>  _      <span class=\"coMULTI\">/*try to extract the exponent from  P. */</span><br/>                      <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> _+d  <span class=\"coMULTI\">/*bump the decimal digs.*/</span><br/>                                            p=r<span class=\"sy0\">*</span>a               <span class=\"coMULTI\">/*recalculate integer P.*/</span><br/>                                       <span class=\"kw3\">end</span><br/>                      <span class=\"kw1\">if</span> p<span class=\"sy0\">//</span>m==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>     <span class=\"coMULTI\">/*now, perform the nitty-gritty modulo.*/</span><br/>                      r=p                        <span class=\"coMULTI\">/*assign product to  R  for next mult. */</span><br/>                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span>                <span class=\"coMULTI\">/* [\u2191]    //   is really  \u00f7  remainder.*/</span><br/>       <span class=\"kw1\">say</span> pad  <span class=\"st0\">'a='</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>a,wa<span class=\"br0\">)</span>  pad  <span class=\"st0\">\"m=\"</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>m,wm<span class=\"br0\">)</span>  pad  <span class=\"st0\">'multiplicative order:'</span>   n<br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*w*/</span>                               <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 41, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> powerMod<span class=\"br0\">(</span>b, <span class=\"kw3\">p</span>, m<span class=\"br0\">)</span><br/>  <span class=\"kw3\">p</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">each_char</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>result, bit<span class=\"sy0\">|</span><br/>    result = <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> result<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<br/>    bit==<span class=\"st0\">'1'</span>\u00a0? <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m\u00a0: result<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> multOrder_<span class=\"br0\">(</span>a, <span class=\"kw3\">p</span>, k<span class=\"br0\">)</span><br/>  pk = <span class=\"kw3\">p</span> <span class=\"sy0\">**</span> k<br/>  t = <span class=\"br0\">(</span><span class=\"kw3\">p</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">p</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  r = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> q, e <span class=\"kw1\">in</span> t.<span class=\"me1\">prime_division</span><br/>    x = powerMod<span class=\"br0\">(</span>a, t <span class=\"sy0\">/</span> q<span class=\"sy0\">**</span>e, pk<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> x\u00a0!= <span class=\"nu0\">1</span><br/>      r <span class=\"sy0\">*</span>= q<br/>      x = powerMod<span class=\"br0\">(</span>x, q, pk<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span>      <br/>  r<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> multOrder<span class=\"br0\">(</span>a, m<span class=\"br0\">)</span><br/>  m.<span class=\"me1\">prime_division</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>result, f<span class=\"sy0\">|</span><br/>    result.<span class=\"me1\">lcm</span><span class=\"br0\">(</span>multOrder_<span class=\"br0\">(</span>a, <span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">37</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>b = <span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">20</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw3\">puts</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">2</span>, b<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">17</span>,b<span class=\"br0\">)</span><br/>b = <span class=\"nu0\">100001</span><br/><span class=\"kw3\">puts</span> multOrder<span class=\"br0\">(</span><span class=\"nu0\">54</span>,b<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> powerMod<span class=\"br0\">(</span><span class=\"nu0\">54</span>, multOrder<span class=\"br0\">(</span><span class=\"nu0\">54</span>,b<span class=\"br0\">)</span>, b<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">multOrder</span><span class=\"br0\">(</span><span class=\"nu0\">54</span>,b<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> powerMod<span class=\"br0\">(</span><span class=\"nu0\">54</span>, r, b<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">'Exists a power r &lt; 9090 where powerMod(54,r,b)==1'</span><br/><span class=\"kw1\">else</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">'Everything checks.'</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Seed7", "loc": 118, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const type: oneFactor is new struct<br/>    var bigInteger: prime is 0_;<br/>    var integer: exp is 0;<br/>  end struct;<br/>\u00a0<br/>const func oneFactor: oneFactor (in bigInteger: prime, in integer: exp) is func<br/>  result<br/>    var oneFactor: aFactor is oneFactor.value;<br/>  begin<br/>    aFactor.prime\u00a0:= prime;<br/>    aFactor.exp\u00a0:= exp;<br/>  end func;<br/>\u00a0<br/>const func array oneFactor: factor (in var bigInteger: n) is func<br/>  result<br/>    var array oneFactor: pf is 0 times oneFactor.value;<br/>  local<br/>    var integer: e is 0;<br/>    var bigInteger: d is 0_;<br/>    var bigInteger: s is 0_;<br/>  begin<br/>    e\u00a0:= lowestSetBit(n);<br/>    if e &gt; 0 then<br/>      n &gt;&gt;:= e;<br/>      pf\u00a0:= [] (oneFactor(2_, e));<br/>    end if;<br/>    s\u00a0:= sqrt(n);<br/>    d\u00a0:= 3_;<br/>    while n &gt; 1_ do<br/>      if d &gt; s then<br/>        d\u00a0:= n;<br/>      end if;<br/>      e\u00a0:= 0;<br/>      while n rem d = 0_ do<br/>        n\u00a0:= n div d;<br/>        incr(e);<br/>      end while;<br/>      if e &gt; 0 then<br/>        pf &amp;:= oneFactor(d, e);<br/>        s\u00a0:= sqrt(n);<br/>      end if;<br/>      d +:= 2_;<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const func bigInteger: moBachShallit58(in bigInteger: a, in bigInteger: n, in array oneFactor: pf) is func<br/>  result<br/>    var bigInteger: mo is 0_;<br/>  local<br/>    var bigInteger: n1 is 0_;<br/>    var oneFactor: pe is oneFactor.value;<br/>    var bigInteger: x is 0_;<br/>    var bigInteger: y is 0_;<br/>    var integer: o is 0;<br/>    var bigInteger: o1 is 0_;<br/>  begin<br/>    n1\u00a0:= n - 1_;<br/>    mo\u00a0:= 1_;<br/>    for pe range pf do<br/>      y\u00a0:= n1 div pe.prime ** pe.exp;<br/>      x\u00a0:= modPow(a, y, n);<br/>      o\u00a0:= 0;<br/>      while x &gt; 1_ do<br/>        x\u00a0:= modPow(x, pe.prime, n);<br/>        incr(o);<br/>      end while;<br/>      o1\u00a0:= pe.prime ** o;<br/>      mo *:= o1 div gcd(mo, o1);<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func boolean: isProbablyPrime (in bigInteger: primeCandidate, in var integer: count) is func<br/>  result<br/>    var boolean: isProbablyPrime is TRUE;<br/>  local<br/>    var bigInteger: aRandomNumber is 0_;<br/>  begin<br/>    while isProbablyPrime and count &gt; 0 do<br/>      aRandomNumber\u00a0:= rand(1_, pred(primeCandidate));<br/>      isProbablyPrime\u00a0:= modPow(aRandomNumber, pred(primeCandidate), primeCandidate) = 1_;<br/>      decr(count);<br/>    end while;<br/>    # writeln(count);<br/>  end func;<br/>\u00a0<br/>const proc: moTest (in bigInteger: a, in bigInteger: n) is func<br/>  begin<br/>    if bitLength(a) &lt; 100 then<br/>      write(\"ord(\" &lt;&amp; a &lt;&amp; \")\");<br/>    else<br/>      write(\"ord([big])\");<br/>    end if;<br/>    if bitLength(n) &lt; 100 then<br/>      write(\" mod \" &lt;&amp; n &lt;&amp; \" \");<br/>    else<br/>      write(\" mod [big] \");<br/>    end if;<br/>    if not isProbablyPrime(n, 20) then<br/>      writeln(\"not computed.  modulus must be prime for this algorithm.\")<br/>    else<br/>      writeln(\"= \" &lt;&amp; moBachShallit58(a, n, factor(n - 1_)));<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: b is 100_;<br/>  begin<br/>    moTest(37_, 3343_);<br/>    moTest(10_ ** 100 + 1_, 7919_);<br/>    moTest(10_ ** 1000 + 1_, 15485863_);<br/>    moTest(10_ ** 10000 - 1_, 22801763489_);<br/>    moTest(1511678068_, 7379191741_);<br/>    moTest(3047753288_, 2257683301_);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 26, "block": "<pre class=\"ruby highlighted_source\">func mo_prime<span class=\"br0\">(</span>a, <span class=\"kw3\">p</span>, e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var m  = <span class=\"kw3\">p</span><span class=\"sy0\">**</span>e<br/>    var t  = <span class=\"br0\">(</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>e<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    var qs = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> <span class=\"br0\">(</span>t.<span class=\"me1\">factor_exp</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        qs.<span class=\"me1\">map</span>! <span class=\"br0\">{</span><span class=\"sy0\">|</span>q<span class=\"sy0\">|</span><br/>            <span class=\"nu0\">0</span>..<span class=\"me1\">f</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> q <span class=\"sy0\">*</span> f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">**</span>j <span class=\"br0\">}</span>...<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    qs.<span class=\"me1\">sort</span>.<span class=\"me1\">first_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>q<span class=\"sy0\">|</span> powmod<span class=\"br0\">(</span>a, q, m<span class=\"br0\">)</span> == <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func mo<span class=\"br0\">(</span>a, m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gcd<span class=\"br0\">(</span>a, m<span class=\"br0\">)</span> == <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> die <span class=\"st0\">\"#{a} and #{m} are not relatively prime\"</span><br/>    <span class=\"kw4\">Math</span>.<span class=\"me1\">lcm</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, m.<span class=\"me1\">factor_exp</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> mo_prime<span class=\"br0\">(</span>a, r...<span class=\"br0\">)</span> <span class=\"br0\">}</span>...<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say mo<span class=\"br0\">(</span><span class=\"nu0\">37</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>say mo<span class=\"br0\">(</span><span class=\"nu0\">54</span>, <span class=\"nu0\">100001</span><span class=\"br0\">)</span><br/>\u00a0<br/>with <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">20</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>    say mo<span class=\"br0\">(</span><span class=\"nu0\">2</span>, b<span class=\"br0\">)</span><br/>    say mo<span class=\"br0\">(</span><span class=\"nu0\">17</span>, b<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 178, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> multOrder <span class=\"br0\">{</span>a m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    assert <span class=\"br0\">{</span><span class=\"br0\">[</span>gcd <span class=\"re0\">$a</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> mofs <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>p e<span class=\"br0\">}</span> <span class=\"br0\">[</span>factor_num <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> mofs <span class=\"br0\">[</span>multOrdr1 <span class=\"re0\">$a</span> <span class=\"re0\">$p</span> <span class=\"re0\">$e</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>struct::<span class=\"kw2\">list</span> fold <span class=\"re0\">$mofs</span> <span class=\"nu0\">1</span> lcm<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> multOrdr1 <span class=\"br0\">{</span>a p e<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p</span> <span class=\"sy0\">**</span> <span class=\"re0\">$e</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$p</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"re0\">$e</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> qs <span class=\"br0\">[</span>dict create <span class=\"nu0\">1</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>f0 f1<span class=\"br0\">}</span> <span class=\"br0\">[</span>factor_num <span class=\"re0\">$t</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>q -<span class=\"br0\">}</span> <span class=\"re0\">$qs</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> j <span class=\"br0\">[</span>range <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> + <span class=\"re0\">$f1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                dict <span class=\"kw1\">set</span> qs <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$f0</span> <span class=\"sy0\">**</span> <span class=\"re0\">$j</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>q -<span class=\"br0\">}</span> <span class=\"re0\">$qs</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>pypow<span class=\"br0\">(</span><span class=\"re0\">$a</span>, <span class=\"re0\">$q</span>, <span class=\"re0\">$m</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$q</span>    <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">####################################################</span><br/><span class=\"co1\"># utility procs</span><br/><span class=\"kw1\">proc</span> assert <span class=\"br0\">{</span>condition <span class=\"br0\">{</span>message <span class=\"st0\">\"Assertion failed!\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"re0\">$condition</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"re0\">$message</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> gcd <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$b</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> a b<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$a</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> lcm <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span> / <span class=\"br0\">[</span>gcd <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> factor_num <span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    primes::<span class=\"me1\">restart</span><br/>    <span class=\"kw1\">set</span> factors <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span>primes::<span class=\"me1\">get_next_prime</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$num</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            dict <span class=\"kw2\">incr</span> factors <span class=\"re0\">$i</span><br/>            <span class=\"kw1\">set</span> num <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$num</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$num</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            dict <span class=\"kw2\">incr</span> factors <span class=\"re0\">$num</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> i <span class=\"br0\">[</span>primes::<span class=\"me1\">get_next_prime</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$factors</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">####################################################</span><br/><span class=\"co1\"># a range command akin to Python's</span><br/><span class=\"kw1\">proc</span> range args <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>start stop step<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw1\">switch</span> -exact -- <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"nu0\">1</span> <span class=\"br0\">{</span><span class=\"kw2\">concat</span> <span class=\"nu0\">0</span> <span class=\"re0\">$args</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        <span class=\"nu0\">2</span> <span class=\"br0\">{</span><span class=\"kw2\">concat</span>   <span class=\"re0\">$args</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        <span class=\"nu0\">3</span> <span class=\"br0\">{</span><span class=\"kw2\">concat</span>   <span class=\"re0\">$args</span>  <span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"br0\">{</span>wrong <span class=\"co1\"># of args: should be \"range\u00a0?start? stop\u00a0?step?\"}}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$step</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"cannot create a range when step == 0\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> range <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$step</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"re0\">$start</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$stop</span>\u00a0: <span class=\"re0\">$stop</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$start</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> range <span class=\"re0\">$start</span><br/>        <span class=\"kw2\">incr</span> start <span class=\"re0\">$step</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$range</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># python's pow()</span><br/><span class=\"kw1\">proc</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">pypow</span> <span class=\"br0\">{</span>x y <span class=\"br0\">{</span>z <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$z</span> eq <span class=\"st0\">\"\"</span> <span class=\"sy0\">?</span> <span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"re0\">$y</span>\u00a0: <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$z</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">####################################################</span><br/><span class=\"co1\"># prime number generator</span><br/><span class=\"co1\"># ref http://wiki.tcl.tk/5996</span><br/><span class=\"co1\">####################################################</span><br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> primes <span class=\"br0\">{</span><span class=\"br0\">}</span> <br/>\u00a0<br/><span class=\"kw1\">proc</span> primes::<span class=\"me1\">reset</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">variable</span> current_index end<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> primes <span class=\"br0\">{</span>reset<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> primes::<span class=\"me1\">restart</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> <span class=\"kw2\">list</span><br/>    <span class=\"kw1\">variable</span> current_index<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> current_index <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> primes::<span class=\"me1\">is_prime</span> <span class=\"br0\">{</span>candidate<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> <span class=\"kw2\">list</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> prime <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$candidate</span> <span class=\"sy0\">%</span> <span class=\"re0\">$prime</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> false<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$prime</span> <span class=\"sy0\">*</span> <span class=\"re0\">$prime</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$candidate</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> true<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> largest <span class=\"br0\">[</span>get_next_prime<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$largest</span> <span class=\"sy0\">*</span> <span class=\"re0\">$largest</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$candidate</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>is_prime <span class=\"re0\">$candidate</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> primes::<span class=\"me1\">get_next_prime</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> <span class=\"kw2\">list</span><br/>    <span class=\"kw1\">variable</span> current_index<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$current_index</span> ne <span class=\"st0\">\"end\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> p <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$current_index</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> current_index<span class=\"br0\">]</span> == <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> current_index end<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$p</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">switch</span> -exact -- <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> candidate <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>        <span class=\"nu0\">1</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> candidate <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> candidate <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> end<span class=\"br0\">]</span><br/>            <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>                <span class=\"kw2\">incr</span> candidate <span class=\"nu0\">2</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>is_prime <span class=\"re0\">$candidate</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">lappend</span> <span class=\"kw2\">list</span> <span class=\"re0\">$candidate</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$candidate</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">####################################################</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>multOrder <span class=\"nu0\">37</span> <span class=\"nu0\">1000</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># 100</span><br/>\u00a0<br/><span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span><span class=\"nu0\">20</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>multOrder <span class=\"nu0\">2</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># 3748806900</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>multOrder <span class=\"nu0\">17</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># 1499522760</span><br/>\u00a0<br/><span class=\"kw1\">set</span> a <span class=\"nu0\">54</span><br/><span class=\"kw1\">set</span> m <span class=\"nu0\">100001</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> n <span class=\"br0\">[</span>multOrder <span class=\"re0\">$a</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># 9090</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>pypow<span class=\"br0\">(</span><span class=\"re0\">$a</span>, <span class=\"re0\">$n</span>, <span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># 1</span><br/>\u00a0<br/><span class=\"kw1\">set</span> lambda <span class=\"br0\">{</span><span class=\"br0\">{</span>a n m<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>pypow<span class=\"br0\">(</span><span class=\"re0\">$a</span>, <span class=\"re0\">$n</span>, <span class=\"re0\">$m</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> r <span class=\"br0\">[</span>lreverse <span class=\"br0\">[</span>range <span class=\"nu0\">1</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$a</span> <span class=\"re0\">$r</span> <span class=\"re0\">$m</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"Oops, $n is not the smallest:  {$a $r $m} satisfies $lambda\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"$r ...\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"OK, $n is the smallest n such that {$a $n $m} satisfies $lambda\"</span></pre>"}, {"lang": "zkl", "loc": 35, "block": "<pre class=\"text highlighted_source\">var BN   =Import(\"zklBigNum\");<br/>var Sieve=Import(\"sieve\");<br/>\u00a0<br/>    // factor n into powers of primes<br/>    // eg 9090 == 2^1 * 3^2 * 5^1 * 101^1<br/>fcn factor2PP(n){ // lazy factors using lazy primes --&gt; (prime,power) ...<br/>   Utils.Generator(fcn(a){<br/>      primes:=Utils.Generator(Sieve.postponed_sieve);<br/>      foreach p in (primes){<br/>\t e:=0; while(a%p == 0){ a /= p; e+=1; }<br/>\t if (e) vm.yield(p,e);<br/>\t if (a&lt;p*p) break;<br/>      }<br/>      if (a&gt;1) vm.yield(a,1);<br/>   },n)<br/>}<br/>\u00a0<br/>fcn _multOrdr1(a,p,e){<br/>   m:=p.pow(e);<br/>   t:=m/p*(p - 1);<br/>   qs:=L(BN(1));<br/>   foreach p2,e2 in (factor2PP(t)){ <br/>      qs=[[(e,q); [0..e2]; qs; '{ q*BN(p2).pow(e) }]];<br/>   }<br/>   qs.filter1('wrap(q){ a.powm(q,m)==1 });<br/>}<br/>\u00a0<br/>fcn multiOrder(a,m){<br/>   if (m.gcd(a)!=1) throw(Exception.ValueError(\"Not co-prime\"));<br/>   res:=BN(1);<br/>   foreach p,e in (factor2PP(m)){<br/>      res = res.lcm(_multOrdr1(BN(a),BN(p),e));<br/>   }<br/>   return(res);<br/>}</pre>"}]}