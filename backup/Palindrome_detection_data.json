{"task": "Palindrome_detection", "blocks": [{"lang": "360 Assembly", "loc": 32, "block": "<pre class=\"text highlighted_source\">*        Reverse b string          25/06/2018<br/>PALINDRO CSECT<br/>         USING  PALINDRO,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \"<br/>         LR     R13,R15            \"<br/>         LA     R8,BB              @b[1]<br/>         LA     R9,AA+L'AA-1       @a[n-1]<br/>         LA     R6,1               i=1<br/>LOOPI    C      R6,=A(L'AA)        do i=1 to length(a) <br/>         BH     ELOOPI             leave i<br/>         MVC    0(1,R8),0(R9)        substr(b,i,1)=substr(a,n-i+1,1)<br/>         LA     R8,1(R8)             @b=<a class=\"__cf_email__\" data-cfemail=\"135371\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1<br/>         BCTR   R9,0                 @<a class=\"__cf_email__\" data-cfemail=\"adcc90edcc809c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R6,1(R6)             i=i+1<br/>         B      LOOPI              end do<br/>ELOOPI   XPRNT  AA,L'AA            print a <br/>         CLC    BB,AA              if b=a <br/>         BNE    SKIP<br/>         XPRNT  MSG,L'MSG          then print msg <br/>SKIP     L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>AA       DC     CL32'INGIRUMIMUSNOCTEETCONSUMIMURIGNI'  a<br/>BB       DS     CL(L'AA)           b<br/>MSG      DC     CL23'IT IS A TRUE PALINDROME'<br/>         YREGS<br/>         END    PALINDRO</pre>"}, {"lang": "ACL2", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> reverse-split-at-r <span class=\"br0\">(</span>xs i ys<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp i<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mv xs ys<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>reverse-split-at-r <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> reverse-split-at <span class=\"br0\">(</span>xs i<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reverse-split-at-r xs i <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> is-palindrome <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>lngth <span class=\"br0\">(</span><span class=\"kw1\">length</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>idx <span class=\"br0\">(</span>floor lngth <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>xs ys<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>reverse-split-at <span class=\"br0\">(</span>coerce str '<span class=\"kw1\">list</span><span class=\"br0\">)</span> idx<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod lngth <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">equal</span> xs ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 6, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> isPalindrome<span class=\"br0\">(</span>str:<span class=\"kw3\">String</span><span class=\"br0\">)</span>:<span class=\"kw3\">Boolean</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> first:uint = <span class=\"nu0\">0</span>, second:uint = str.<span class=\"kw3\">length</span> - <span class=\"nu0\">1</span>; first <span class=\"sy0\">&lt;</span> second; first++, second--<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str.<span class=\"kw3\">charAt</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= str.<span class=\"kw3\">charAt</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span>;<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> Palindrome <span class=\"br0\">(</span>Text\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Offset <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">Text</span>'Length / <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Text <span class=\"br0\">(</span>Text'First + Offset<span class=\"br0\">)</span> /= Text <span class=\"br0\">(</span>Text'Last - Offset<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> False;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">return</span> True;<br/><span class=\"kw1\">end</span> Palindrome;</pre>"}, {"lang": "ALGOL 68", "loc": 26, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Iterative #</span><br/><span class=\"kw4\">PROC</span> palindrome <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw12\">OVER</span> 2 <span class=\"kw2\">DO</span><br/>     <span class=\"kw2\">IF</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">/=</span> s<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> s<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span>1<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw2\">GO TO</span> return false <span class=\"kw2\">FI</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span>Power<br/>   else<span class=\"sy1\">:</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">EXIT</span><br/>   return false<span class=\"sy1\">:</span> <span class=\"kw7\">FALSE</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Recursive #</span><br/><span class=\"kw4\">PROC</span> palindrome r <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> s <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">THEN</span> <span class=\"kw7\">TRUE</span><br/>   <span class=\"kw2\">ELIF</span> s<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> s<span class=\"br0\">]</span> <span class=\"sy1\">/=</span> s<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> s<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span><br/>   <span class=\"kw2\">ELSE</span> palindrome r<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> s<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> s<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">FI</span><br/><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Test #</span><br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>   <span class=\"kw3\">STRING</span> t <span class=\"sy1\">=</span> <span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"sy1\">;</span><br/>   <span class=\"kw6\">FORMAT</span> template <span class=\"sy1\">=</span> $<span class=\"st0\">\"sequence \"</span><span class=\"st0\">\"\"</span>g<span class=\"st0\">\"\"</span><span class=\"st0\">\" \"</span>b<span class=\"br0\">(</span><span class=\"st0\">\"is\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"isnt\"</span><span class=\"br0\">)</span><span class=\"st0\">\" a palindrome\"</span>l$<span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>template<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> palindrome<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>template<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> palindrome r<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 72, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span><br/>\u00a0<br/><span class=\"co1\">-- CASE-INSENSITIVE PALINDROME, IGNORING SPACES\u00a0? ----------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- isPalindrome\u00a0:: String -&gt; Bool</span><br/><span class=\"kw3\">on</span> isPalindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, reverse <span class=\"kw3\">of</span> characters <span class=\"kw3\">of</span> s<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> isPalindrome<br/>\u00a0<br/><span class=\"co1\">-- toSpaceFreeLower\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> spaceFreeToLower<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> notSpace<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            s <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">space</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, filter<span class=\"br0\">(</span>notSpace, characters <span class=\"kw3\">of</span> toLower<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> spaceFreeToLower<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    isPalindrome<span class=\"br0\">(</span>spaceFreeToLower<span class=\"br0\">(</span><span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; true</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- toLower\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> toLower<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s stringWithString:<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>'s \u00ac<br/>        lowercaseStringWithLocale:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSLocale<span class=\"co2\">'</span>s currentLocale<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/><span class=\"kw3\">end</span> toLower</pre>"}, {"lang": "Applesoft BASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">100 DATA\"MY DOG HAS FLEAS\"<br/>110 DATA\"MADAM, I'M ADAM.\"<br/>120 DATA\"1 ON 1\"<br/>130 DATA\"IN GIRUM IMUS NOCTE ET CONSUMIMUR IGNI\"<br/>140 DATA\"A man, a plan, a canal: Panama!\"<br/>150 DATA\"KAYAK\"<br/>160 DATA\"REDDER\"<br/>170 DATA\"H\"<br/>180 DATA\"\"<br/>\u00a0<br/>200 FOR L1 = 1 TO 9<br/>210    READ W$\u00a0: GOSUB 300\" IS PALINDROME?<br/>220    PRINT CHR$(34); W$; CHR$(34); \" IS \";<br/>230    IF NOT PALINDROME THEN PRINT \"NOT \";<br/>240    PRINT \"A PALINDROME\"<br/>250 NEXT<br/>260 END<br/>\u00a0<br/>300 REMIS PALINDROME?<br/>310 PA = 1<br/>320 L = LEN(W$)<br/>330 IF L = 0 THEN RETURN<br/>340 FOR L0 = 1 TO L / 2 + .5<br/>350     PA = MID$(W$, L0, 1) = MID$(W$, L - L0 + 1, 1)<br/>360     IF PALINDROME THEN NEXT L0<br/>370 RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\">IsPalindrome<span class=\"br0\">(</span>Str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> Str<br/>\t\tReversedStr <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">.</span> ReversedStr<br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ReversedStr <span class=\"sy0\">==</span> Str<span class=\"br0\">)</span>?<span class=\"st0\">\"Exact\"</span>:<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>ReversedStr<span class=\"sy0\">,</span><span class=\"st0\">\"\\W\"</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>Str<span class=\"sy0\">,</span><span class=\"st0\">\"\\W\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>?<span class=\"st0\">\"Inexact\"</span>:<span class=\"st0\">\"False\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 32, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">;== AutoIt Version: 3.3.8.1</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> _<br/><span class=\"st0\">\"In girum imus nocte, et consumimur igni\"</span><span class=\"sy0\">,</span> _  <span class=\"co0\">; inexact palindrome</span><br/><span class=\"st0\">\"Madam, I'm Adam.\"</span><span class=\"sy0\">,</span> _                         <span class=\"co0\">; inexact palindrome</span><br/><span class=\"st0\">\"sal\u00e0las\"</span><span class=\"sy0\">,</span> _                                  <span class=\"co0\">; exact palindrome</span><br/><span class=\"st0\">\"radar\"</span><span class=\"sy0\">,</span> _                                    <span class=\"co0\">; exact palindrome</span><br/><span class=\"st0\">\"Lagerregal\"</span><span class=\"sy0\">,</span> _                               <span class=\"co0\">; exact palindrome</span><br/><span class=\"st0\">\"Ein Neger mit Gazelle zagt im Regen nie.\"</span><span class=\"sy0\">,</span> _ <span class=\"co0\">; inexact palindrome</span><br/><span class=\"st0\">\"something wrong\"</span><span class=\"br0\">]</span>                            <span class=\"co0\">; no palindrome</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$sSpace42</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"                                          \"</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">6</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> _IsPalindrome<span class=\"br0\">(</span><span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">'\"'</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"br0\">(</span><span class=\"re0\">$sSpace42</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">-</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'is an exact palindrome.'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@LF</span></span></a><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> _IsPalindrome<span class=\"br0\">(</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringRegExpReplace.htm\"><span class=\"kw3\">StringRegExpReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'\\W'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">'\"'</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"br0\">(</span><span class=\"re0\">$sSpace42</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">-</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'is an  inexact palindrome.'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@LF</span></span></a><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">'\"'</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"br0\">(</span><span class=\"re0\">$sSpace42</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">-</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$aString</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'is not a palindrome.'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@LF</span></span></a><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _IsPalindrome<span class=\"br0\">(</span><span class=\"re0\">$_string</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iLen</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$_string</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>  <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Int.htm\"><span class=\"kw3\">Int</span></a><span class=\"br0\">(</span><span class=\"re0\">$iLen</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$_string</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$_string</span><span class=\"sy0\">,</span> <span class=\"re0\">$iLen</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">False</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> is_palindro<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> s <span class=\"sy2\">==</span> reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw6\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 13, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">OPTION</span> COMPARE <span class=\"kw1\">TRUE</span><br/>\u00a0<br/><span class=\"kw1\">INPUT</span> <span class=\"st0\">\"Enter your line... \"</span>, word$<br/>\u00a0<br/><span class=\"kw1\">IF</span> word$ = REVERSE$<span class=\"br0\">(</span>word$<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"This is an exact palindrome!\"</span><br/>ELIF EXTRACT$<span class=\"br0\">(</span>word$, <span class=\"st0\">\"[[:punct:]]|[[:blank:]]\"</span>, <span class=\"kw1\">TRUE</span><span class=\"br0\">)</span> = REVERSE$<span class=\"br0\">(</span>EXTRACT$<span class=\"br0\">(</span>word$, <span class=\"st0\">\"[[:punct:]]|[[:blank:]]\"</span>, <span class=\"kw1\">TRUE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"This is an inexact palindrome!\"</span><br/><span class=\"kw1\">ELSE</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Not a palindrome.\"</span><br/>ENDIF<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 80, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co1\">' OPTION _EXPLICIT ' For QB64. In VB-DOS remove the underscore.</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> txt$<br/>\u00a0<br/><span class=\"co1\">' Palindrome</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckcls.shtml\"><span class=\"kw3\">CLS</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"This is a palindrome detector program.\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Please, type a word or phrase: \"</span><span class=\"sy0\">,</span> txt$<br/>\u00a0<br/><span class=\"kw1\">IF</span> IsPalindrome<span class=\"br0\">(</span>txt$<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>  <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Is a palindrome.\"</span><br/><span class=\"kw1\">ELSE</span><br/>  <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Is Not a palindrome.\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> IsPalindrome <span class=\"br0\">(</span>AText$<span class=\"br0\">)</span><br/>  <span class=\"co1\">' Var</span><br/>  <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> CleanTXT$<span class=\"sy0\">,</span> RvrsTXT$<br/>\u00a0<br/>  CleanTXT$ <span class=\"sy0\">=</span> CleanText$<span class=\"br0\">(</span>AText$<span class=\"br0\">)</span><br/>  RvrsTXT$ <span class=\"sy0\">=</span> RvrsText$<span class=\"br0\">(</span>CleanTXT$<span class=\"br0\">)</span><br/>\u00a0<br/>  IsPalindrome <span class=\"sy0\">=</span> <span class=\"br0\">(</span>CleanTXT$ <span class=\"sy0\">=</span> RvrsTXT$<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> CleanText$ <span class=\"br0\">(</span>WhichText$<span class=\"br0\">)</span><br/>  <span class=\"co1\">' Var</span><br/>  <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i%<span class=\"sy0\">,</span> j%<span class=\"sy0\">,</span> c$<span class=\"sy0\">,</span> NewText$<span class=\"sy0\">,</span> CpyTxt$<span class=\"sy0\">,</span> AddIt%<span class=\"sy0\">,</span> SubsTXT$<br/>  <a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> False <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> True <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> False<br/>\u00a0<br/>  SubsTXT$ <span class=\"sy0\">=</span> <span class=\"st0\">\"AIOUE\"</span><br/>  CpyTxt$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckucase%24.shtml\"><span class=\"kw3\">UCASE$</span></a><span class=\"br0\">(</span>WhichText$<span class=\"br0\">)</span><br/>  j% <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>CpyTxt$<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> i% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> j%<br/>    c$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>CpyTxt$<span class=\"sy0\">,</span> i%<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' See if it is a letter. Includes Spanish letters.</span><br/>    <span class=\"kw1\">SELECT</span> <span class=\"kw1\">CASE</span> c$<br/>      <span class=\"kw1\">CASE</span> <span class=\"st0\">\"A\"</span> <span class=\"kw1\">TO</span> <span class=\"st0\">\"Z\"</span><br/>        AddIt% <span class=\"sy0\">=</span> True<br/>      <span class=\"kw1\">CASE</span> <span class=\"st0\">\"\u00a0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u00a1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u00a2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u00a3\"</span><br/>        c$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>SubsTXT$<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">(</span>c$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">159</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        AddIt% <span class=\"sy0\">=</span> True<br/>      <span class=\"kw1\">CASE</span> <span class=\"st0\">\"\u201a\"</span><br/>        c$ <span class=\"sy0\">=</span> <span class=\"st0\">\"E\"</span><br/>        AddIt% <span class=\"sy0\">=</span> True<br/>      <span class=\"kw1\">CASE</span> <span class=\"st0\">\"\u00a4\"</span><br/>        c$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\u00a5\"</span><br/>        AddIt% <span class=\"sy0\">=</span> True<br/>      <span class=\"kw1\">CASE</span> <span class=\"kw1\">ELSE</span><br/>        AddIt% <span class=\"sy0\">=</span> False<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SELECT</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> AddIt% <span class=\"kw1\">THEN</span><br/>      NewText$ <span class=\"sy0\">=</span> NewText$ <span class=\"sy0\">+</span> c$<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>  <span class=\"kw1\">NEXT</span> i%<br/>\u00a0<br/>  CleanText$ <span class=\"sy0\">=</span> NewText$<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> RvrsText$ <span class=\"br0\">(</span>WhichText$<span class=\"br0\">)</span><br/>  <span class=\"co1\">' Var</span><br/>  <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i%<span class=\"sy0\">,</span> c$<span class=\"sy0\">,</span> NewText$<span class=\"sy0\">,</span> j%<br/>\u00a0<br/>  j% <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>WhichText$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">FOR</span> i% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> j%<br/>    NewText$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckmid%24.shtml\"><span class=\"kw3\">MID$</span></a><span class=\"br0\">(</span>WhichText$<span class=\"sy0\">,</span> i%<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> NewText$<br/>  <span class=\"kw1\">NEXT</span> i%<br/>\u00a0<br/>  RvrsText$ <span class=\"sy0\">=</span> NewText$<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 27, "block": "<pre class=\"text highlighted_source\">      test$ = \"A man, a plan, a canal: Panama!\"<br/>      PRINT \"\"\"\" test$ \"\"\"\"\u00a0;<br/>      IF FNpalindrome(FNletters(test$)) THEN<br/>        PRINT \" is a palindrome\"<br/>      ELSE<br/>        PRINT \" is not a palindrome\"<br/>      ENDIF<br/>      END<br/>\u00a0<br/>      DEF FNpalindrome(A$) = (A$ = FNreverse(A$))<br/>\u00a0<br/>      DEF FNreverse(A$)<br/>      LOCAL B$, P%<br/>      FOR P% = LEN(A$) TO 1 STEP -1<br/>        B$ += MID$(A$,P%,1)<br/>      NEXT<br/>      = B$<br/>\u00a0<br/>      DEF FNletters(A$)<br/>      LOCAL B$, C%, P%<br/>      FOR P% = 1 TO LEN(A$)<br/>        C% = ASC(MID$(A$,P%))<br/>        IF C% &gt; 64 AND C% &lt; 91 OR C% &gt; 96 AND C% &lt; 123 THEN<br/>          B$ += CHR$(C% AND &amp;5F)<br/>        ENDIF<br/>      NEXT<br/>      = B$</pre>"}, {"lang": "Bash", "loc": 32, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#! /bin/bash</span><br/><span class=\"co0\"># very simple way to detect a palindrome in Bash</span><br/><span class=\"co0\"># output of bash --version -&gt; GNU bash, version 4.4.7(1)-release x86_64 ...</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"enter a string\"</span><br/><span class=\"kw2\">read</span> input<br/>\u00a0<br/><span class=\"re2\">size</span>=<span class=\"co1\">${#input}</span><br/><span class=\"re2\">count</span>=<span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re1\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"re1\">$size</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">do</span><br/>    array<span class=\"br0\">[</span><span class=\"re1\">$count</span><span class=\"br0\">]</span>=<span class=\"co1\">${input:$count:1}</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span> count+=<span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"re2\">count</span>=<span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>\u00a0; i <span class=\"sy0\">&lt;</span> <span class=\"re1\">$size</span>; i+=<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${array[$i]}</span>\"</span> == <span class=\"st0\">\"<span class=\"es3\">${array[$size - $i - 1]}</span>\"</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">then</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span> count += <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">fi</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re1\">$count</span> == <span class=\"re1\">$size</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$input</span> is a palindrome\"</span><br/><span class=\"kw1\">fi</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 15, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p string=Your string\u00a0:<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> count=0<br/>:<span class=\"re0\">loop</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">string</span><span class=\"sy0\">%</span>:~<span class=\"sy0\">%</span><span class=\"re3\">count</span>%,1</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/neq.html\"><span class=\"kw2\">neq</span></a> \"\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> reverse=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">string</span><span class=\"sy0\">%</span>:~<span class=\"sy0\">%</span><span class=\"re3\">count</span>%,1</span><span class=\"sy0\">!!</span><span class=\"re2\">reverse</span><span class=\"sy0\">!</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a count+=1<br/>\t\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop<br/>\t<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> palindrome=isn't<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">string</span><span class=\"sy0\">%</span>\"==\"<span class=\"sy0\">%</span><span class=\"re3\">reverse</span><span class=\"sy0\">%</span>\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> palindrome=is<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">string</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">palindrome</span><span class=\"sy0\">%</span> a palindrome.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a></pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">v_$0:8p&gt;:#v_:18p08g1-08p &gt;:08g`!v<br/>~-&gt;p5p ^  0v1p80-1g80vj!-g5g80g5_0'ev<br/>:a^80+1:g8&lt;&gt;8g1+:18pv&gt;0\"eslaF\"&gt;:#,<a class=\"__cf_email__\" data-cfemail=\"7c233c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <br/>[[relet]]-2010------&gt;003-x   -^\"Tru\"&lt;</pre>"}, {"lang": "Bracmat", "loc": 34, "block": "<pre class=\"text highlighted_source\">( ( palindrome<br/>  =   a<br/>    .     @(!arg:(%?a&amp;utf$!a)\u00a0?arg\u00a0!a)<br/>        &amp; palindrome$!arg<br/>      | utf$!arg<br/>  )<br/>&amp; ( desep<br/>  =   x<br/>    .     @(!arg:?x (\" \"|\"-\"|\",\")\u00a0?arg)<br/>        &amp;\u00a0!x desep$!arg<br/>      |\u00a0!arg<br/>  )<br/>&amp;     \"In girum imus nocte et consumimur igni\"<br/>      \"\u042f \u0438\u0434\u0443 \u0441 \u043c\u0435\u0447\u0435\u043c, \u0441\u0443\u0434\u0438\u044f\"<br/>      \"The quick brown fox\"<br/>      \"treg\u00f0a, g\u00f3n, rei\u00f0i - er n\u00f3g a\u00f0 gert\"<br/>      \"\u4eba\u4eba\u70ba\u6211,\u6211\u70ba\u4eba\u4eba\"<br/>      \"\uac00\ub828\ud558\uc2dc\ub2e4 \uc0ac\uc7a5\uc9d1 \uc544\ub4e4\ub538\ub4e4\uc544 \uc9d1\uc7a5\uc0ac \ub2e4\uc2dc \ud558\ub828\uac00\"<br/> \u00a0:\u00a0?candidates<br/>&amp;   whl<br/>  ' (\u00a0!candidates:%?candidate\u00a0?candidates<br/>    &amp;   out<br/>      $ (\u00a0!candidate<br/>          is<br/>          (   palindrome$(low$(str$(desep$!candidate)))<br/>            &amp; indeed<br/>          | not<br/>          )<br/>          a<br/>          palindrome<br/>        )<br/>    )<br/>&amp;<br/>);</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>zz{ri}f[^^&lt;-==<br/>\u00a0</pre>"}, {"lang": "C", "loc": 12, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> palindrome<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>l<span class=\"sy0\">;</span><br/>   l <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>l<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> s<span class=\"br0\">[</span>l<span class=\"sy0\">-</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 7, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> is_palindrome<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">equal</span><span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 21, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Reverse<span class=\"br0\">(</span><span class=\"kw4\">string</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> chars <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Array<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPalindrome<span class=\"br0\">(</span><span class=\"kw4\">string</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">value</span> <span class=\"sy0\">==</span> Reverse<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> palindrome? <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> s <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 20, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       function-id<span class=\"sy0\">.</span> palindromic-<span class=\"kw3\">test</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> test-<span class=\"kw3\">text</span>            <span class=\"kw3\">pic</span> x <span class=\"kw3\">any</span> <span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">88</span> palindromic       <span class=\"kw3\">value</span> <span class=\"kw3\">high-value</span><br/>                               <span class=\"kw3\">when</span> <span class=\"kw3\">set</span> <span class=\"kw2\">to</span> <span class=\"kw3\">false</span> <span class=\"kw3\">low-value</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> test-<span class=\"kw3\">text</span> returning result<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">set</span> palindromic <span class=\"kw2\">to</span> <span class=\"kw3\">false</span><br/>       <span class=\"kw1\">if</span> test-<span class=\"kw3\">text</span> <span class=\"kw3\">equal</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>test-<span class=\"kw3\">text</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw3\">set</span> palindromic <span class=\"kw2\">to</span> <span class=\"kw3\">true</span><br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">function</span> palindromic-<span class=\"kw3\">test</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 14, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>    String<span class=\"sy0\">::</span>isPalindrome = <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"sy0\">@</span>length <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">when</span> <span class=\"sy0\">@</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">isnt</span> <span class=\"sy0\">@</span><span class=\"br0\">[</span><span class=\"sy0\">@</span>length <span class=\"sy0\">-</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">no</span><br/>        <span class=\"kw4\">yes</span><br/>\u00a0<br/>    String<span class=\"sy0\">::</span>stripped = <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">@</span>toLowerCase<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span> <span class=\"sy0\">/</span>\\W<span class=\"sy0\">/</span>gi<span class=\"sy0\">,</span> <span class=\"st0\">''</span><br/>\u00a0<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"'#{ str }'\u00a0: #{ str.stripped().isPalindrome() }\"</span> <span class=\"kw1\">for</span> str <span class=\"kw1\">in</span> <span class=\"br0\">[</span><br/>        <span class=\"st0\">'In girum imus nocte et consumimur igni'</span><br/>        <span class=\"st0\">'A man, a plan, a canal: Panama!'</span><br/>        <span class=\"st0\">'There is no spoon.'</span><br/>    <span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> palindrome-p <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>string<span class=\"sy0\">=</span> s <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 38, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> BbtPalindrome;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ReverseStr<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">VAR</span><br/>\ttop<span class=\"sy0\">,</span>middle<span class=\"sy0\">,</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tc<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\trStr<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>rStr<span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\ttop <span class=\"sy0\">:=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>; middle <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>top <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> middle <span class=\"kw1\">DO</span><br/>\t\trStr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> str<span class=\"br0\">[</span>top <span class=\"sy0\">-</span> i<span class=\"br0\">]</span>;<br/>\t\trStr<span class=\"br0\">[</span>top <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">IF</span> <span class=\"kw3\">ODD</span><span class=\"br0\">(</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>str$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> rStr<span class=\"br0\">[</span>middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> str<span class=\"br0\">[</span>middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> rStr;<br/><span class=\"kw1\">END</span> ReverseStr;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsPalindrome<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">RETURN</span> str <span class=\"sy0\">=</span> ReverseStr<span class=\"br0\">(</span>str<span class=\"br0\">)</span>$;<br/><span class=\"kw1\">END</span> IsPalindrome;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tx<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"'salalas' is palindrome?:&gt; \"</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"salalas\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"'madamimadam' is palindrome?:&gt; \"</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"madamimadam\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"'abcbda' is palindrome?:&gt; \"</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"abcbda\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> BbtPalindrome.<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  s == s.<span class=\"me1\">reverse</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 7, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span> StrUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsPalindrome<span class=\"br0\">(</span><span class=\"kw1\">const</span> aSrcString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">SameText</span><span class=\"br0\">(</span>aSrcString<span class=\"sy1\">,</span> ReverseString<span class=\"br0\">(</span>aSrcString<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPalindrome1<span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> C<span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSomeChar<span class=\"sy0\">!</span>C<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> s2 <span class=\"sy0\">=</span> s.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    s2.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// works on Unicode too, not nothrow.</span><br/>    <span class=\"kw1\">return</span> s <span class=\"sy0\">==</span> s2<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> pali <span class=\"sy0\">=</span> isPalindrome1<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"aha\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"sees\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"oofoe\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"deified\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"Deified\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"amanaplanacanalpanama\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pali<span class=\"br0\">(</span><span class=\"st0\">\"sal\u00c3\u00a0las\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>bool isPalindrome(String s){  <br/>  for(int i = 0; i &lt; s.length/2;i++){<br/>    if(s[i]\u00a0!= s[(s.length-1) -i])<br/>      return false;        <br/>  }  <br/>  return true;  <br/>}<br/>\u00a0</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 11, "block": "<pre class=\"text highlighted_source\">palindrome?:<br/>\tlocal\u00a0:seq chars<br/>\tlocal\u00a0:len-seq -- len seq<br/>\u00a0<br/>\tfor i range 0 / len-seq 2:<br/>\t\tif /= seq! i seq! - len-seq i:<br/>\t\t\treturn false<br/>\ttrue<br/>\u00a0<br/>!. palindrome? \"ingirumimusnocteetconsumimurigni\"<br/>!. palindrome? \"nope\"</pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> isPalindrome<span class=\"br0\">(</span>string <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> upper <span class=\"sy0\">:=</span> string.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> last <span class=\"sy0\">:=</span> upper.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">?</span> <span class=\"br0\">(</span>upper<span class=\"br0\">[</span>last <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> c<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> upper<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> upper.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/>  <span class=\"br0\">}</span><br/>  return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; returns #t or #f</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>palindrome? string<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">equal</span>? <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> string<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; to strip spaces, use the following</span><br/><span class=\"co1\">;;(define (palindrome? string)</span><br/><span class=\"co1\">;;(let ((string (string-replace string \"/\\ /\" \"\" \"g\")))</span><br/><span class=\"co1\">;;(equal? (string-&gt;list string) (reverse (string-&gt;list string)))))</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 20, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>\tis_palindrome <span class=\"br0\">(</span>a_string<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is `a_string' a palindrome?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tstring_attached<span class=\"sy0\">:</span> a_string <span class=\"sy0\">/=</span> <span class=\"kw3\">Void</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tl_index, l_count<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\tl_index <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\tl_count <span class=\"sy0\">:=</span> a_string.<span class=\"me1\">count</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tl_index <span class=\"sy0\">&gt;=</span> l_count <span class=\"sy0\">-</span> l_index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"kw2\">not</span> <span class=\"kw3\">Result</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw3\">Result</span> <span class=\"kw2\">and</span> a_string <span class=\"br0\">[</span>l_index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a_string <span class=\"br0\">[</span>l_count <span class=\"sy0\">-</span> l_index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\tl_index <span class=\"sy0\">:=</span> l_index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 5, "block": "<pre class=\"text highlighted_source\">open list string<br/>\u00a0<br/>isPalindrome xs = xs == reverse xs<br/>isPalindrome &lt;| toList \"ingirumimusnocteetconsumimurigni\"<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule PalindromeDetection do<br/>  def is_palindrome(str), do: str == String.reverse(str)<br/>end<br/>\u00a0</pre>"}, {"lang": "Elm", "loc": 45, "block": "<pre class=\"text highlighted_source\">import String exposing (reverse, length) <br/>import Html exposing (Html, Attribute, text, div, input)<br/>import Html.Attributes exposing (placeholder, value, style)<br/>import Html.Events exposing (on, targetValue)<br/>import Html.App exposing (beginnerProgram)<br/>\u00a0<br/>-- The following function (copied from Haskell) satisfies the <br/>-- rosettacode task description.<br/>is_palindrome x = x == reverse x<br/>\u00a0<br/>-- The remainder of the code demonstrates the use of the function <br/>-- in a complete Elm program.<br/>main = beginnerProgram { model = \"\" , view = view , update = update }<br/>\u00a0<br/>update newStr oldStr = newStr<br/>\u00a0<br/>view\u00a0: String -&gt; Html String<br/>view candidate =<br/>  div []<br/>    ([ input<br/>        [ placeholder \"Enter a string to check.\"<br/>        , value candidate<br/>        , on \"input\" targetValue <br/>        , myStyle<br/>        ]<br/>        []<br/>     ] ++ <br/>     [ let testResult = <br/>             is_palindrome candidate<br/>\u00a0<br/>           statement = <br/>             if testResult then \"PALINDROME!\" else \"not a palindrome\"<br/>\u00a0<br/>       in div [ myStyle] [text statement]<br/>     ])<br/>\u00a0<br/>myStyle\u00a0: Attribute msg<br/>myStyle =<br/>  style<br/>    [ (\"width\", \"100%\")<br/>    , (\"height\", \"20px\")<br/>    , (\"padding\", \"5px 0 0 5px\")<br/>    , (\"font-size\", \"1em\")<br/>    , (\"text-align\", \"left\")<br/>    ]</pre>"}, {"lang": "Erlang", "loc": 20, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> palindrome <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>is_palindrome<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_palindrome</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">String</span> <span class=\"sy3\">=:=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"st0\">\"abcba\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"st0\">\"abcdef\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Latin</span> <span class=\"sy3\">=</span> <span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">No_spaces_same_case</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"re5\">Latin</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Latin</span><span class=\"sy1\">,</span> <span class=\"re5\">No_spaces_same_case</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Is ~p a palindrom? ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">String</span><span class=\"sy1\">,</span> <span class=\"re3\">is_palindrome</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">String1</span><span class=\"sy1\">,</span> <span class=\"re5\">String2</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Is ~p a palindrom? ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">String1</span><span class=\"sy1\">,</span> <span class=\"re3\">is_palindrome</span><span class=\"br0\">(</span><span class=\"re5\">String2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 8, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> isPalindrome<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\u00a0!<span class=\"sy1\">=</span> s<span class=\"br0\">[</span>$<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> isPalindrome <span class=\"br0\">(</span>s: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> arr <span class=\"sy0\">=</span> s.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   arr <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">rev</span> arr</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: kernel sequences\u00a0;<br/>: palindrome? ( str --\u00a0? ) dup reverse =\u00a0;</pre>"}, {"lang": "Falcon", "loc": 13, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/><span class=\"kw1\">function</span> is_palindrome<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\ta <span class=\"sy0\">=</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#strUpper\"><span class=\"kw6\">strUpper</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me0\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\tb <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">return</span> b <span class=\"sy0\">==</span> a<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>a <span class=\"sy0\">=</span> <span class=\"st0\">\"mom\"</span><br/><span class=\"sy0\">&gt;</span> is_palindrome<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Palindrome<br/>{<br/>  // Function to test if given string is a palindrome<br/>  public static Bool isPalindrome (Str str) <br/>  {<br/>    str == str.reverse<br/>  }<br/>\u00a0<br/>  // Give it a test run<br/>  public static Void main ()<br/>  {<br/>    echo (isPalindrome(\"\"))<br/>    echo (isPalindrome(\"a\"))<br/>    echo (isPalindrome(\"aa\"))<br/>    echo (isPalindrome(\"aba\"))<br/>    echo (isPalindrome(\"abb\"))<br/>    echo (isPalindrome(\"sal\u00e0las\"))<br/>    echo (isPalindrome(\"In girum imus nocte et consumimur igni\".lower.replace(\" \",\"\")))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "FBSL", "loc": 28, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> stripNonAlpha<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckbyval.shtml\"><span class=\"kw3\">BYVAL</span></a> s <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> sTemp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>\t<span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t\tc <span class=\"sy0\">=</span> MID<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckinstr.shtml\"><span class=\"kw3\">INSTR</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tsTemp <span class=\"sy0\">=</span> stemp &amp; c<br/>\t\t<a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>\t<span class=\"kw1\">NEXT</span><br/>\t<span class=\"kw1\">RETURN</span> sTemp<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> IsPalindrome<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckbyval.shtml\"><span class=\"kw3\">BYVAL</span></a> s <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\t<span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> STRLEN<span class=\"br0\">(</span>s<span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span> <span class=\"co1\">' only check half of the string, as scanning from both ends</span><br/>\t\t<span class=\"kw1\">IF</span> s<span class=\"br0\">{</span>i<span class=\"br0\">}</span> <span class=\"sy0\">&lt;&gt;</span> s<span class=\"br0\">{</span>STRLEN <span class=\"sy0\">-</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> FALSE <span class=\"co1\">'comparison is not case sensitive</span><br/>\t<span class=\"kw1\">NEXT</span><br/>\u00a0<br/>\t<span class=\"kw1\">RETURN</span> TRUE<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> IsPalindrome<span class=\"br0\">(</span>stripNonAlpha<span class=\"br0\">(</span><span class=\"st0\">\"A Toyota\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> IsPalindrome<span class=\"br0\">(</span>stripNonAlpha<span class=\"br0\">(</span><span class=\"st0\">\"Madam, I'm Adam\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> IsPalindrome<span class=\"br0\">(</span>stripNonAlpha<span class=\"br0\">(</span><span class=\"st0\">\"the rain in Spain falls mainly on the rooftops\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>PAUSE<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: first   over <a class=\"__cf_email__\" data-cfemail=\"402300\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>: last    &gt;r 2dup + 1- <a class=\"__cf_email__\" data-cfemail=\"fc9fbc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> r&gt; swap\u00a0;<br/>: palindrome? ( c-addr u -- f )<br/>  begin<br/>    dup 1 &lt;=      if 2drop true  exit then<br/>    first last &lt;&gt; if 2drop false exit then<br/>    1 /string 1-<br/>  again\u00a0;<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 14, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> palindro<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><br/>\u00a0<br/>  print <span class=\"sy0\">*</span>, is_palindro_r<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, is_palindro_r<span class=\"br0\">(</span><span class=\"st0\">\"anothertest\"</span><span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, is_palindro2<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, is_palindro2<span class=\"br0\">(</span><span class=\"st0\">\"test\"</span><span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, is_palindro<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, is_palindro<span class=\"br0\">(</span><span class=\"st0\">\"last test\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span></pre>"}, {"lang": "FreeBASIC", "loc": 76, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 20-06-2015</span><br/><span class=\"co1\">' compile with: fbc -s console \"filename\".bas</span><br/>\u00a0<br/><span class=\"co2\">#Ifndef TRUE        ' define true and false for older freebasic versions</span><br/>    <span class=\"co2\">#Define FALSE 0</span><br/>    <span class=\"co2\">#Define TRUE Not FALSE</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> reverse<span class=\"br0\">(</span>norm <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> rev<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>norm<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>\u00a0<br/>    rev = norm<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> l<br/>        rev<span class=\"br0\">[</span>l-i<span class=\"br0\">]</span> = norm<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> norm = rev <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">TRUE</span><br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">FALSE</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> cleanup<span class=\"br0\">(</span>in <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, action <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"co1\">' action = \"\" do nothing, [l|L] = convert to lowercase,</span><br/>    <span class=\"co1\">' [s|S] = strip spaces,  [p|P] = strip punctuation.</span><br/>    <span class=\"kw1\">If</span> action = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> in<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, p_, s_<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> ch<br/>\u00a0<br/>    action = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>action<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>action<span class=\"br0\">)</span><br/>        ch = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>action, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> ch = <span class=\"st0\">\"l\"</span> <span class=\"kw1\">Then</span> in = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> ch = <span class=\"st0\">\"p\"</span> <span class=\"kw1\">Then</span><br/>            p_ = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">ElseIf</span> ch = <span class=\"st0\">\"s\"</span> <span class=\"kw1\">Then</span><br/>            s_ = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> p_ = <span class=\"nu0\">0</span> And s_ = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> in<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> unwanted, clean<br/>\u00a0<br/>    <span class=\"kw1\">If</span> s_ = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> unwanted = <span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">If</span> p_ = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> unwanted = unwanted + <span class=\"st0\">\"`<a class=\"__cf_email__\" data-cfemail=\"08762948\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#$%^&amp;*()-=_+[]{}<span class=\"es0\">\\|</span>;:',.&lt;&gt;/?\"</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>in<span class=\"br0\">)</span><br/>        ch = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>in, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">InStr</span><span class=\"br0\">(</span>unwanted, ch<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> clean = clean + ch<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> clean<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test = <span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><br/><span class=\"co1\">'IIf ( cond, true, false ), true and false must be of the same type (num, string, UDT)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"                 reverse(test) = \"</span>; <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>test<span class=\"br0\">)</span> = <span class=\"kw1\">FALSE</span>, <span class=\"st0\">\"FALSE\"</span>, <span class=\"st0\">\"TRUE\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"  reverse(cleanup(test,\"</span><span class=\"st0\">\"l\"</span><span class=\"st0\">\")) = \"</span>; <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>cleanup<span class=\"br0\">(</span>test,<span class=\"st0\">\"l\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"kw1\">FALSE</span>, <span class=\"st0\">\"FALSE\"</span>, <span class=\"st0\">\"TRUE\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" reverse(cleanup(test,\"</span><span class=\"st0\">\"ls\"</span><span class=\"st0\">\")) = \"</span>; <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>cleanup<span class=\"br0\">(</span>test,<span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"kw1\">FALSE</span>, <span class=\"st0\">\"FALSE\"</span>, <span class=\"st0\">\"TRUE\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"reverse(cleanup(test,\"</span><span class=\"st0\">\"PLS\"</span><span class=\"st0\">\")) = \"</span>; <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>cleanup<span class=\"br0\">(</span>test,<span class=\"st0\">\"PLS\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"kw1\">FALSE</span>, <span class=\"st0\">\"FALSE\"</span>, <span class=\"st0\">\"TRUE\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"Hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frink", "loc": 2, "block": "<pre class=\"text highlighted_source\">isPalindrome[x]\u00a0:= x == reverse[x]<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 27, "block": "<pre class=\"text highlighted_source\">ZapGremlins\u00a0:= function(s)<br/>  local upper, lower, c, i, n, t;<br/>  upper\u00a0:= \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";<br/>  lower\u00a0:= \"abcdefghijklmnopqrstuvwxyz\";<br/>  t\u00a0:= [ ];<br/>  i\u00a0:= 1;<br/>  for c in s do<br/>    n\u00a0:= Position(upper, c);<br/>    if n &lt;&gt; fail then<br/>      t[i]\u00a0:= lower[n];<br/>      i\u00a0:= i + 1;<br/>    else<br/>      n\u00a0:= Position(lower, c);<br/>      if n &lt;&gt; fail then<br/>        t[i]\u00a0:= c;<br/>        i\u00a0:= i + 1;<br/>      fi;<br/>    fi;<br/>  od;<br/>  return t;<br/>end;<br/>\u00a0<br/>IsPalindrome\u00a0:= function(s)<br/>  local t;<br/>  t\u00a0:= ZapGremlins(s);<br/>  return t = Reversed(t);<br/>end;</pre>"}, {"lang": "GML", "loc": 17, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"co1\">//Setting a var from an argument passed to the script</span><br/><span class=\"kw1\">var</span> str<span class=\"sy1\">;</span><br/>str <span class=\"sy2\">=</span> argument0<br/><span class=\"co1\">//Takes out all spaces/anything that is not a letter or a number and turns uppercase letters to lowercase</span><br/>str <span class=\"sy2\">=</span> string_lettersdigits<span class=\"sy1\">(</span>string_lower<span class=\"sy1\">(</span>string_replace<span class=\"sy1\">(</span>str<span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"sy1\">,</span><span class=\"st0\">''</span><span class=\"sy1\">)));</span><br/><span class=\"kw1\">var</span> inv<span class=\"sy1\">;</span><br/>inv <span class=\"sy2\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//for loop that reverses the sequence</span><br/><span class=\"kw1\">var</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; string_length<span class=\"sy1\">(</span>str<span class=\"sy1\">);</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;)</span><br/>    <span class=\"sy1\">{</span><br/>    inv <span class=\"sy2\">+=</span> string_copy<span class=\"sy1\">(</span>str<span class=\"sy1\">,</span>string_length<span class=\"sy1\">(</span>str<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">);</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"co1\">//returns true if the sequence is a palindrome else returns false</span><br/><span class=\"kw1\">return</span> <span class=\"sy1\">(</span>str <span class=\"sy3\">==</span> inv<span class=\"sy1\">);</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> pal<br/>\u00a0<br/><span class=\"kw4\">func</span> IsPal<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    mid <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>    last <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; mid<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> s<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isPalindrome <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">-&gt;</span><br/>    s <span class=\"sy0\">==</span> s<span class=\"sy0\">?</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">is<span class=\"sy0\">_</span>palindrome x <span class=\"sy0\">=</span> x <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> x</pre>"}, {"lang": "HicEst", "loc": 17, "block": "<pre class=\"hicest highlighted_source\">   result <span class=\"sy1\">=</span> Palindrome<span class=\"br0\">(</span> <span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span> <span class=\"br0\">)</span> <span class=\"co1\">! returns 1</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Palindrome<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>   <span class=\"kw1\">CHARACTER</span> string<span class=\"sy1\">,</span> CopyOfString<br/>\u00a0<br/>   L <span class=\"sy1\">=</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>   <span class=\"kw1\">ALLOCATE</span><span class=\"br0\">(</span>CopyOfString<span class=\"sy1\">,</span> L<span class=\"br0\">)</span><br/>   CopyOfString <span class=\"sy1\">=</span> string<br/>   <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>CopyOfString<span class=\"sy1\">,</span> UpperCase<span class=\"sy1\">=</span>L<span class=\"br0\">)</span><br/>   L <span class=\"sy1\">=</span> L <span class=\"sy1\">-</span> <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>CopyOfString<span class=\"sy1\">,</span> <span class=\"kw1\">End</span><span class=\"sy1\">,</span> Left<span class=\"sy1\">=</span><span class=\"st0\">' '</span><span class=\"sy1\">,</span> Delete<span class=\"sy1\">,</span> <span class=\"kw1\">DO</span><span class=\"sy1\">=</span>L<span class=\"br0\">)</span> <span class=\"co1\">! EDIT returns number of deleted spaces</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> L<span class=\"sy1\">/</span><span class=\"nu0\">2</span><br/>     Palindrome <span class=\"sy1\">=</span> CopyOfString<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">==</span> CopyOfString<span class=\"br0\">(</span>L <span class=\"sy1\">-</span> i <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">IF</span><span class=\"br0\">(</span> Palindrome <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span><br/>   <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>arglist<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span> <span class=\"kw1\">if</span> palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" is \"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" is not\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" a palindrome.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Ioke", "loc": 1, "block": "<pre class=\"text highlighted_source\">Text isPalindrome? = method(self chars == self chars reverse)</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">isPalin0=: -: |.</pre>"}, {"lang": "Java", "loc": 4, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> pali<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> testMe<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tStringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span>testMe<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> testMe.<span class=\"me1\">equals</span><span class=\"br0\">(</span>sb.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> isPalindrome<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> str <span class=\"sy0\">===</span> str.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def palindrome: explode as $in | ($in|reverse) == $in;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">palindrome(s) = s == reverse(s)</pre>"}, {"lang": "k", "loc": 1, "block": "<pre class=\"text highlighted_source\">is_palindrome:{x~|x}</pre>"}, {"lang": "Kotlin", "loc": 29, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><span class=\"coMULTI\">/* These functions deal automatically with Unicode as all strings are UTF-16 encoded in Kotlin */</span><br/>\u00a0<br/>fun isExactPalindrome<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> s.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun isInexactPalindrome<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in s<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c.<span class=\"me1\">isLetterOrDigit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> t +<span class=\"sy0\">=</span> c<br/>    t <span class=\"sy0\">=</span> t.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> t <span class=\"sy0\">==</span> t.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"rotor\"</span>, <span class=\"st0\">\"rosetta\"</span>, <span class=\"st0\">\"step on no pets\"</span>, <span class=\"st0\">\"\u00e9t\u00e9\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>candidate in candidates<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"'$candidate' is ${if (isExactPalindrome(candidate)) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} exact palindrome\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates2 <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>         <span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span>,<br/>         <span class=\"st0\">\"Rise to vote, sir\"</span>,<br/>         <span class=\"st0\">\"A man, a plan, a canal - Panama!\"</span>,<br/>         <span class=\"st0\">\"Ce rep\u00e8re, Perec\"</span>  <span class=\"co1\">// note: '\u00e8' considered a distinct character from 'e'</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>candidate in candidates2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"'$candidate' is ${if (isInexactPalindrome(candidate)) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} inexact palindrome\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 16, "block": "<pre class=\"text highlighted_source\">define ispalindrome(text::string) =&gt; {<br/>\u00a0<br/>\tlocal(_text = string(#text)) // need to make copy to get rid of reference issues<br/>\u00a0<br/>\t#_text -&gt; replace(regexp(`(?:$|\\W)+`), -ignorecase)<br/>\u00a0<br/>\tlocal(reversed = string(#_text))<br/>\t#reversed -&gt; reverse<br/>\u00a0<br/>\treturn #_text == #reversed<br/>}<br/>\u00a0<br/>ispalindrome('T\u00e4tat\u00e4t') // works with high ascii<br/>ispalindrome('Hello World')<br/>\u00a0<br/>ispalindrome('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal \u2013 Panama!')</pre>"}, {"lang": "Lasso", "loc": 16, "block": "<pre class=\"text highlighted_source\">define ispalindrome(text::string) =&gt; {<br/>\u00a0<br/>\tlocal(_text = string(#text)) // need to make copy to get rid of reference issues<br/>\u00a0<br/>\t#_text -&gt; replace(regexp(`(?:$|\\W)+`), -ignorecase)<br/>\u00a0<br/>\tlocal(reversed = string(#_text))<br/>\t#reversed -&gt; reverse<br/>\u00a0<br/>\treturn #_text == #reversed<br/>}<br/>\u00a0<br/>ispalindrome('T\u00e4tat\u00e4t') // works with high ascii<br/>ispalindrome('Hello World')<br/>\u00a0<br/>ispalindrome('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal \u2013 Panama!')</pre>"}, {"lang": "Liberty BASIC", "loc": 22, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> isPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> isPalindrome<span class=\"br0\">(</span>removePunctuation$<span class=\"br0\">(</span><span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"S\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> isPalindrome<span class=\"br0\">(</span>removePunctuation$<span class=\"br0\">(</span><span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SC\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isPalindrome<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    isPalindrome <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><span class=\"sy0\">-</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> isPalindrome <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    <span class=\"kw1\">next</span> i<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> removePunctuation$<span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> remove$<span class=\"br0\">)</span><br/>    <span class=\"co1\">'P = remove puctuation.  S = remove spaces   C = remove case</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"kw2\">upper$</span><span class=\"br0\">(</span>remove$<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> string$ <span class=\"sy0\">=</span> <span class=\"kw2\">lower$</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"kw2\">upper$</span><span class=\"br0\">(</span>remove$<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"P\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> removeCharacters$ <span class=\"sy0\">=</span> <span class=\"st0\">\",.!'()-&amp;*?&lt;&gt;:;~[]{}\"</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"kw2\">upper$</span><span class=\"br0\">(</span>remove$<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"S\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> removeCharacters$ <span class=\"sy0\">=</span> removeCharacters$;<span class=\"st0\">\" \"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>removeCharacters$<span class=\"sy0\">,</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> string$ <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<span class=\"kw2\">right$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span> <span class=\"sy0\">:</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span> i<br/>    removePunctuation$ <span class=\"sy0\">=</span> string$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "LiveCode", "loc": 16, "block": "<pre class=\"text highlighted_source\">function palindrome txt exact<br/>    if exact is empty or exact is not false then <br/>        set caseSensitive to true  --default is false<br/>    else<br/>        replace space with empty in txt<br/>        put lower(txt) into txt<br/>    end if<br/>    return txt is reverse(txt) <br/>end palindrome<br/>\u00a0<br/>function reverse str<br/>    repeat with i = the length of str down to 1<br/>        put byte i of str after revstr<br/>    end repeat<br/>    return revstr<br/>end reverse</pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">to palindrome?\u00a0:w<br/>  output equal?\u00a0:w reverse\u00a0:w<br/>end</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> ispalindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">return</span> s <span class=\"sy0\">==</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 3, "block": "<pre class=\"text highlighted_source\">define(`palindrorev',`ifelse(`$1',invert(`$1'),`yes',`no')')dnl<br/>palindrorev(`ingirumimusnocteetconsumimurigni')<br/>palindrorev(`this is not palindrome')</pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>with(StringTools):<br/>\u00a0<br/>IsPalindrome(\"ingirumimusnocteetconsumimurigni\");<br/>\u00a0<br/>IsPalindrome(\"In girum imus nocte et consumimur igni\");<br/>\u00a0<br/>IsPalindrome(LowerCase(DeleteSpace(\"In girum imus nocte et consumimur igni\")));<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">PalindromeQ[i_String]\u00a0:= StringReverse[i] == i</pre>"}, {"lang": "MATLAB", "loc": 15, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> trueFalse = isPalindrome<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>\u00a0<br/>    trueFalse = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>string == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%See if flipping the string produces the original string</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> not<span class=\"br0\">(</span>trueFalse<span class=\"br0\">)</span> <span class=\"co1\">%If not a palindrome</span><br/>        string = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span>; <span class=\"co1\">%Lower case everything</span><br/>        trueFalse = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>string == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%Test again</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> not<span class=\"br0\">(</span>trueFalse<span class=\"br0\">)</span> <span class=\"co1\">%If still not a palindrome</span><br/>        string<span class=\"br0\">(</span>isspace<span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>; <span class=\"co1\">%Strip all space characters out</span><br/>        trueFalse = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span>string == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%Test one last time</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">palindromep(s)\u00a0:= block([t], t: sremove(\" \", sdowncase(s)), sequal(t, sreverse(t)))$<br/>\u00a0<br/>palindromep(\"Sator arepo tenet opera rotas\");  /* true */</pre>"}, {"lang": "MAXScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">fn isPalindrome s =<br/>(<br/>    local reversed = \"\"<br/>    for i in s.count to 1 by -1 do reversed += s[i]<br/>    return reversed == s<br/>)</pre>"}, {"lang": "Mirah", "loc": 12, "block": "<pre class=\"text highlighted_source\">def reverse(s:string) <br/>    StringBuilder.new(s).reverse.toString()<br/>end<br/>\u00a0<br/>def palindrome?(s:string) <br/>    s.equals(reverse(s))<br/>end<br/>\u00a0<br/>puts palindrome?(\"anna\")        # ==&gt; true<br/>puts palindrome?(\"Erik\")        # ==&gt; false<br/>puts palindrome?(\"palindroom-moordnilap\") # ==&gt; true<br/>puts nil                        # ==&gt; null</pre>"}, {"lang": "ML", "loc": 31, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">fun</span> to_locase s <span class=\"sy0\">=</span> implode ` map <span class=\"br0\">(</span>c_downcase<span class=\"br0\">)</span> ` explode s<br/>\u00a0<br/><span class=\"kw1\">fun</span> only_alpha s <span class=\"sy0\">=</span> implode ` filter <span class=\"br0\">(</span>fn x <span class=\"sy0\">=</span> c_alphabetic x<span class=\"br0\">)</span> ` explode s<br/>\u00a0<br/><span class=\"kw1\">fun</span> is_palin<br/>\t<span class=\"br0\">(</span> h1 <span class=\"sy0\">::</span> t1, h2 <span class=\"sy0\">::</span> t2, n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> \t\t       <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><br/><span class=\"sy0\">|</span>\t<span class=\"br0\">(</span> h1 <span class=\"sy0\">::</span> t1, h2 <span class=\"sy0\">::</span> t2, n <span class=\"br0\">)</span> where <span class=\"br0\">(</span> h1 eql h2 <span class=\"br0\">)</span>  <span class=\"sy0\">=</span> is_palin<span class=\"br0\">(</span> t1, t2, n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"sy0\">|</span>\t<span class=\"br0\">(</span> h1 <span class=\"sy0\">::</span> t1, h2 <span class=\"sy0\">::</span> t2, n <span class=\"br0\">)</span>                      <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><br/><span class=\"sy0\">|</span>       <span class=\"br0\">(</span>str s<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>\t\t<span class=\"kw1\">let</span><br/>\t\t\t<span class=\"kw1\">val</span> es <span class=\"sy0\">=</span> explode ` to_locase ` only_alpha s<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">val</span> res <span class=\"sy0\">=</span> rev es<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">val</span> k <span class=\"sy0\">=</span> <span class=\"br0\">(</span>len es<span class=\"br0\">)</span> div <span class=\"nu0\">2</span><br/>\t\t<span class=\"kw1\">in</span><br/>\t\t\tis_palin <span class=\"br0\">(</span>es, res, k<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> test_is_palin s <span class=\"sy0\">=</span><br/>\t<span class=\"br0\">(</span>print <span class=\"st0\">\"\\\"</span><span class=\"st0\">\"; print s; print \"</span>\\<span class=\"st0\">\" is a palindrome: \"</span><span class=\"sy0\">;</span> print ` is_palin s<span class=\"sy0\">;</span> println <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> test <span class=\"br0\">(</span>f, arg, res, ok, notok<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f arg eql res<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> @ arg @ <span class=\"st0\">\"' \"</span> @ ok<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> @ arg @ <span class=\"st0\">\"' \"</span> @ notok<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">;</span><br/>\u00a0<br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"In girum imus nocte, et consumimur igni\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"Madam, I'm Adam.\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"sal\u00e0las\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"radar\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"Lagerregal\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"Ein Neger mit Gazelle zagt im Regen nie.\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>println ` test <span class=\"br0\">(</span>is_palin, <span class=\"st0\">\"something wrong\"</span>, <span class=\"kw1\">true</span>, <span class=\"st0\">\"is a palindrome\"</span>, <span class=\"st0\">\"is NOT a palindrome\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "MMIX", "loc": 68, "block": "<pre class=\"mmix highlighted_source\">argc     <span class=\"kw2\">IS</span> <span class=\"nu3\">$0</span><br/>argv     <span class=\"kw2\">IS</span> <span class=\"nu3\">$1</span><br/>\u00a0<br/>         <span class=\"kw2\">LOC</span> Data_Segment<br/>DataSeg  <span class=\"kw2\">GREG</span> @<br/>\u00a0<br/>          <span class=\"kw2\">LOC</span> @<span class=\"sy0\">+</span><span class=\"nu1\">1000</span><br/>ItsPalStr <span class=\"kw2\">IS</span> @<span class=\"sy0\">-</span>Data_Segment<br/>          <span class=\"kw2\">BYTE</span> <span class=\"st0\">\"It's palindrome\"</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>          <span class=\"kw2\">LOC</span> @<span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"sy0\">-</span>@<span class=\"br0\">)</span>&amp;<span class=\"nu1\">7</span><br/>NoPalStr  <span class=\"kw2\">IS</span>  @<span class=\"sy0\">-</span>Data_Segment<br/>          <span class=\"kw2\">BYTE</span> <span class=\"st0\">\"It is not palindrome\"</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>         <span class=\"kw2\">LOC</span> <span class=\"nu2\">#100</span><br/>         <span class=\"kw2\">GREG</span> @<br/><span class=\"co3\">% input: $255 points to where the string to be checked is</span><br/><span class=\"co3\">% returns $255 0 if not palindrome, not zero otherwise</span><br/><span class=\"co3\">% trashs: $0,$1,$2,$3</span><br/><span class=\"co3\">% return address $4</span><br/>DetectPalindrome <span class=\"kw2\">LOC</span> @<br/>         <span class=\"kw1\">ADDU</span> <span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>      <span class=\"co2\">% $1 = $255</span><br/>2H       <span class=\"kw1\">LDB</span>  <span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>        <span class=\"co2\">% get byte at $1</span><br/>         <span class=\"kw1\">BZ</span>   <span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu1\">1F</span>          <span class=\"co2\">% if zero, end (length)</span><br/>         <span class=\"kw1\">INCL</span> <span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>           <span class=\"co2\">% $1++</span><br/>         <span class=\"kw1\">JMP</span>  <span class=\"nu1\">2B</span>             <span class=\"co2\">% loop</span><br/>1H       <span class=\"kw1\">SUBU</span> <span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>        <span class=\"co2\">% ptr last char of string</span><br/>         <span class=\"kw1\">ADDU</span> <span class=\"nu3\">$0</span><span class=\"sy0\">,</span>DataSeg<span class=\"sy0\">,</span><span class=\"nu1\">0</span>   <span class=\"co2\">% $0 to data seg.</span><br/>3H       <span class=\"kw1\">CMP</span>  <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span>     <span class=\"co2\">% is $0 == $255?</span><br/>         <span class=\"kw1\">BZ</span>   <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu1\">4F</span>          <span class=\"co2\">% then jump</span><br/>         <span class=\"kw1\">LDB</span>  <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>        <span class=\"co2\">% otherwise get the byte</span><br/>         <span class=\"kw1\">STB</span>  <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>        <span class=\"co2\">% and copy it</span><br/>         <span class=\"kw1\">INCL</span> <span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>           <span class=\"co2\">% $0++</span><br/>         <span class=\"kw1\">SUB</span>  <span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>        <span class=\"co2\">% $1--</span><br/>         <span class=\"kw1\">JMP</span>  <span class=\"nu1\">3B</span><br/>4H       <span class=\"kw1\">LDB</span>  <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>         <span class=\"kw1\">STB</span>  <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>        <span class=\"co2\">% copy the last byte</span><br/><span class=\"co3\">% now let us compare reversed string and straight string</span><br/>         <span class=\"kw1\">XOR</span>  <span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu3\">$0</span>       <span class=\"co2\">% index</span><br/>         <span class=\"kw1\">ADDU</span> <span class=\"nu3\">$1</span><span class=\"sy0\">,</span>DataSeg<span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>6H       <span class=\"kw1\">LDB</span>  <span class=\"nu3\">$2</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu3\">$0</span>       <span class=\"co2\">% pick char from rev str</span><br/>         <span class=\"kw1\">LDB</span>  <span class=\"nu3\">$3</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$0</span>     <span class=\"co2\">% pick char from straight str</span><br/>         <span class=\"kw1\">BZ</span>   <span class=\"nu3\">$3</span><span class=\"sy0\">,</span>PaliOk      <span class=\"co2\">% finished as palindrome</span><br/>         <span class=\"kw1\">CMP</span>  <span class=\"nu3\">$2</span><span class=\"sy0\">,</span><span class=\"nu3\">$2</span><span class=\"sy0\">,</span><span class=\"nu3\">$3</span>       <span class=\"co2\">% ==\u00a0?</span><br/>         <span class=\"kw1\">BNZ</span>  <span class=\"nu3\">$2</span><span class=\"sy0\">,</span><span class=\"nu1\">5F</span>          <span class=\"co2\">% if not, exit</span><br/>         <span class=\"kw1\">INCL</span> <span class=\"nu3\">$0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>           <span class=\"co2\">% $0++</span><br/>         <span class=\"kw1\">JMP</span>  <span class=\"nu1\">6B</span><br/>5H       <span class=\"kw1\">XOR</span>  <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><br/>         <span class=\"kw1\">GO</span>   <span class=\"nu3\">$4</span><span class=\"sy0\">,</span><span class=\"nu3\">$4</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>        <span class=\"co2\">% return false</span><br/>PaliOk   <span class=\"kw1\">NEG</span>  <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span>       <br/>         <span class=\"kw1\">GO</span>   <span class=\"nu3\">$4</span><span class=\"sy0\">,</span><span class=\"nu3\">$4</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>        <span class=\"co2\">% return true</span><br/><span class=\"co3\"><br/>% The Main for testing the function</span><br/><span class=\"co3\">% run from the command line</span><br/><span class=\"co3\">% $ mmix ./palindrome.mmo ingirumimusnocteetconsumimurigni</span><br/>Main     <span class=\"kw1\">CMP</span>  argc<span class=\"sy0\">,</span>argc<span class=\"sy0\">,</span><span class=\"nu1\">2</span>    <span class=\"co2\">% argc &gt; 2?</span><br/>         <span class=\"kw1\">BN</span>   argc<span class=\"sy0\">,</span><span class=\"nu1\">3F</span>        <span class=\"co2\">% no -&gt; not enough arg</span><br/>         <span class=\"kw1\">ADDU</span> <span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">8</span>        <span class=\"co2\">% argv+1</span><br/>         <span class=\"kw1\">LDOU</span> <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span>      <span class=\"co2\">% argv[1]</span><br/>         <span class=\"kw1\">GO</span>   <span class=\"nu3\">$4</span><span class=\"sy0\">,</span>DetectPalindrome<br/>         <span class=\"kw1\">BZ</span>   <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu1\">2F</span>        <span class=\"co2\">% if not palindrome, jmp</span><br/>         <span class=\"kw1\">SETL</span> <span class=\"nu3\">$0</span><span class=\"sy0\">,</span>ItsPalStr   <span class=\"co2\">% pal string</span><br/>         <span class=\"kw1\">ADDU</span> <span class=\"nu3\">$255</span><span class=\"sy0\">,</span>DataSeg<span class=\"sy0\">,</span><span class=\"nu3\">$0</span><br/>         <span class=\"kw1\">JMP</span>  <span class=\"nu1\">1F</span><br/>2H       <span class=\"kw1\">SETL</span> <span class=\"nu3\">$0</span><span class=\"sy0\">,</span>NoPalStr    <span class=\"co2\">% no pal string</span><br/>         <span class=\"kw1\">ADDU</span> <span class=\"nu3\">$255</span><span class=\"sy0\">,</span>DataSeg<span class=\"sy0\">,</span><span class=\"nu3\">$0</span><br/>1H       <span class=\"kw1\">TRAP</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut <span class=\"co2\">% print</span><br/>3H       <span class=\"kw1\">XOR</span>  <span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><span class=\"sy0\">,</span><span class=\"nu3\">$255</span><br/>         <span class=\"kw1\">TRAP</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span>       <span class=\"co2\">% exit(0)</span></pre>"}, {"lang": "Modula-2", "loc": 39, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Palindrome;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsPalindrome<span class=\"br0\">(</span>str <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span> i<span class=\"sy0\">,</span>m <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    m <span class=\"sy0\">:=</span> <span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> i&lt;m <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> str<span class=\"br0\">[</span>m<span class=\"sy0\">-</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span><br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span><br/><span class=\"kw1\">END</span> IsPalindrome;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>str <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%s:\u00a0%b<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> IsPalindrome<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"aha\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"sees\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"oofoe\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"deified\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"Deified\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"amanaplanacanalpanama\"</span><span class=\"br0\">)</span>;<br/>    Print<span class=\"br0\">(</span><span class=\"st0\">\"ingirumimusnocteetconsumimurigni\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Palindrome.</pre>"}, {"lang": "Modula-3", "loc": 15, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Palindrome;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> Text;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> isPalindrome<span class=\"br0\">(</span>string<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span> len <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Length</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> len <span class=\"kw1\">DIV</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> Text.<span class=\"me1\">GetChar</span><span class=\"br0\">(</span>string<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">#</span> Text.<span class=\"me1\">GetChar</span><span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <span class=\"br0\">(</span>len <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span>;<br/>  <span class=\"kw1\">END</span> isPalindrome;<br/><span class=\"kw1\">END</span> Palindrome.</pre>"}, {"lang": "Nemerle", "loc": 16, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using Nemerle.Utility.NString; //contains methods Explode() and Implode() which convert string -&gt; list[char] and back<br/>\u00a0<br/>module Palindrome<br/>{<br/>    IsPalindrome( text\u00a0: string)\u00a0: bool<br/>    {<br/>        Implode(Explode(text).Reverse()) == text;<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        WriteLine(\"radar is a palindrome: {0}\", IsPalindrome(\"radar\"));<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 19, "block": "<pre class=\"netrexx highlighted_source\">\u00a0<br/>y=<span class=\"st0\">'In girum imus nocte et consumimur igni'</span><br/>\u00a0<br/><span class=\"co1\">-- translation: We walk around in the night and</span><br/><span class=\"co1\">-- we are burnt by the fire (of love)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'string = '</span>y<br/><span class=\"kw1\">say</span><br/>\u00a0<br/>pal=isPal<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> pal==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"The string isn't palindromic.\"</span><br/>          <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'The string is palindromic.'</span><br/>\u00a0<br/>method isPal<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>  x=x.<span class=\"kw6\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/* removes all blanks (spaces)          */</span><br/>                                <span class=\"coMULTI\">/*   and translate to uppercase.        */</span><br/>  <span class=\"kw1\">return</span> x==x.<span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/* returns  1  if exactly equal         */</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>palindrome? s<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> r s<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> r<span class=\"br0\">)</span> <span class=\"co1\">; Reverse is destructive.</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> s r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Make \u2018reverse\u2019 non-destructive and avoid a global variable</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>palindrome? s<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> s <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>copy s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">proc reverse(s: string): string =<br/>  result = newString(s.len)<br/>  for i,c in s:<br/>    result[s.high - i] = c<br/>\u00a0<br/>proc isPalindrome(s: string): bool =<br/>  s == reverse(s)<br/>\u00a0<br/>echo isPalindrome(\"FoobooF\")</pre>"}, {"lang": "Objeck", "loc": 22, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"aasa\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"acbca\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      IsPalindrome<span class=\"br0\">(</span><span class=\"st0\">\"xx\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> IsPalindrome<span class=\"br0\">(</span>s <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>      l <span class=\"sy0\">:=</span> s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> l <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>l <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_palindrome s <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> comp n <span class=\"sy0\">=</span><br/>        n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"br0\">[</span>l<span class=\"sy0\">-</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> comp <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    comp <span class=\"br0\">(</span>l <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">String method: isPalindrome  self reverse self ==\u00a0;</pre>"}, {"lang": "Octave", "loc": 14, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> v <span class=\"sy3\">=</span> palindro_r<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    v <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/true.html\"><span class=\"kw10\">true</span></a><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">return</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">elseif</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>    v <span class=\"sy3\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">return</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> s<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    v <span class=\"sy3\">=</span> palindro_r<span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    v <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span></pre>"}, {"lang": "Oz", "loc": 3, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsPalindrome</span> S<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Reverse S<span class=\"br0\">}</span> <span class=\"sy0\">==</span> S<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">ispal<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  s<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span>v<span class=\"br0\">[</span>#v<span class=\"sy0\">-</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 23, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Palindro<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ RECURSIVE }</span><br/><span class=\"kw1\">function</span> is_palindro_r<span class=\"br0\">(</span>s <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span> &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      is_palindro_r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><br/>   <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> s<span class=\"br0\">[</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t is_palindro_r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> is_palindro_r<span class=\"br0\">(</span>copy<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>\t is_palindro_r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{ is_palindro_r }</span><br/>\u00a0<br/><span class=\"coMULTI\">{ NON RECURSIVE; see [[Reversing a string]] for \"reverse\" }</span><br/><span class=\"kw1\">function</span> is_palindro<span class=\"br0\">(</span>s <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> s <span class=\"sy3\">=</span> reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      is_palindro <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><br/>   <span class=\"kw1\">else</span><br/>      is_palindro <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 37, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># Palindrome.pm</span><br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Palindrome<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Exporter <span class=\"st_h\">'import'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">our</span> <span class=\"re0\">@EXPORT</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>palindrome palindrome_c palindrome_r palindrome_e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> palindrome<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$s</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> palindrome_c<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> palindrome_r<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$s</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">ne</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> palindrome_r<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> palindrome_e<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"co5\">@_</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">:</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^(.?|(.)(?1)\\2)$/</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">subset</span> Palindrom <span class=\"kw1\">of</span> Str <span class=\"kw1\">where</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">.</span><span class=\"kw3\">flip</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$_</span> <span class=\"kw1\">given</span> <span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w+/</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@tests</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/.</span><span class=\"me1\">lines</span><span class=\"sy0\">;</span><br/>    A man<span class=\"sy0\">,</span> a plan<span class=\"sy0\">,</span> a canal<span class=\"sy0\">:</span> Panama<span class=\"sy0\">.</span><br/>    <span class=\"me1\">My</span> dog <span class=\"kw1\">has</span> fleas<br/>    Madam<span class=\"sy0\">,</span> <span class=\"kw3\">I</span><span class=\"st_h\">'m Adam.<br/>    1 on 1<br/>    In girum imus nocte et consumimur igni<br/>    END<br/>\u00a0<br/>for @tests { say $_ ~~ Palindrom, \"\\t\", $_ }</span></pre>"}, {"lang": "Phix", "loc": 24, "block": "<pre class=\"text highlighted_source\">function is_palindrome(sequence s)<br/>    return s==reverse(s)<br/>end function<br/>\u00a0<br/>?is_palindrome(\"rotator\") -- prints 1<br/>?is_palindrome(\"tractor\") -- prints 0<br/>\u00a0<br/>constant punctuation = \" `<a class=\"__cf_email__\" data-cfemail=\"245a0564\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#$%^&amp;*()-=_+[]{}\\\\|;:',.&lt;&gt;/?\",<br/>         nulls = repeat(\"\",length(punctuation))<br/>\u00a0<br/>function extra_credit(sequence s)<br/>    s = utf8_to_utf32(lower(substitute_all(s,punctuation,nulls)))<br/>    return s==reverse(s)<br/>end function<br/>\u00a0<br/>-- these all print 1 (true)<br/>?extra_credit(\"Madam, I'm Adam.\")<br/>?extra_credit(\"A man, a plan, a canal: Panama!\")<br/>?extra_credit(\"In girum imus nocte et consumimur igni\")<br/>?extra_credit(\"\u4eba\u4eba\u70ba\u6211,\u6211\u70ba\u4eba\u4eba\")<br/>?extra_credit(\"\u042f \u0438\u0434\u0443 \u0441 \u043c\u0435\u0447\u0435\u043c, \u0441\u0443\u0434\u0438\u044f\")<br/>?extra_credit(\"\uc544\ub4e4\ub538\ub4e4\uc544\")<br/>?extra_credit(\"\uac00\ub828\ud558\uc2dc\ub2e4 \uc0ac\uc7a5\uc9d1 \uc544\ub4e4\ub538\ub4e4\uc544 \uc9d1\uc7a5\uc0ac \ub2e4\uc2dc \ud558\ub828\uac00\")<br/>?extra_credit(\"treg\u00f0a, g\u00f3n, rei\u00f0i - er n\u00f3g a\u00f0 gert\")</pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> is_palindrome<span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$string</span> <span class=\"sy0\">==</span> <a href=\"http://www.php.net/strrev\"><span class=\"kw3\">strrev</span></a><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de palindrome? (S)<br/>   (= (setq S (chop S)) (reverse S)) )</pre>"}, {"lang": "Pike", "loc": 16, "block": "<pre class=\"pike highlighted_source\">int main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span>pal<span class=\"br0\">(</span><span class=\"st0\">\"rotator\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      write<span class=\"br0\">(</span><span class=\"st0\">\"palindrome!<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pal<span class=\"br0\">(</span><span class=\"st0\">\"asdf\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      write<span class=\"br0\">(</span><span class=\"st0\">\"asdf isn't a palindrome.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>int pal<span class=\"br0\">(</span>string input<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span> reverse<span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"sy0\">==</span> input <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 1, "block": "<pre class=\"text highlighted_source\">is_palindrome = (text = reverse(text));</pre>"}, {"lang": "Potion", "loc": 11, "block": "<pre class=\"text highlighted_source\"># The readable recursive version<br/>palindrome_i = (s, b, e):<br/>  if (e &lt;= b): true.<br/>  elsif (s ord(b)\u00a0!= s ord(e)): false.<br/>  else: palindrome_i(s, b+1, e-1).<br/>.<br/>\u00a0<br/>palindrome = (s):<br/>  palindrome_i(s, 0, s length - 1).<br/>\u00a0<br/>palindrome(argv(1))</pre>"}, {"lang": "PowerBASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">FUNCTION isPalindrome (what AS STRING) AS LONG<br/>    DIM whatcopy AS STRING, chk AS STRING, tmp AS STRING * 1, L0 AS LONG<br/>\u00a0<br/>    FOR L0 = 1 TO LEN(what)<br/>        tmp = UCASE$(MID$(what, L0, 1))<br/>        SELECT CASE tmp<br/>            CASE \"A\" TO \"Z\"<br/>                whatcopy = whatcopy &amp; tmp<br/>                chk = tmp &amp; chk<br/>            CASE \"0\" TO \"9\"<br/>                MSGBOX \"Numbers are cheating! (\"\"\" &amp; what &amp; \"\"\")\"<br/>                FUNCTION = 0<br/>                EXIT FUNCTION<br/>        END SELECT<br/>    NEXT<br/>\u00a0<br/>    FUNCTION = ISTRUE((whatcopy) = chk)<br/>END FUNCTION<br/>\u00a0<br/>\u00a0<br/>FUNCTION PBMAIN () AS LONG<br/>    DATA \"My dog has fleas\", \"Madam, I'm Adam.\", \"1 on 1\", \"In girum imus nocte et consumimur igni\"<br/>    DIM L1 AS LONG, w AS STRING<br/>    FOR L1 = 1 TO DATACOUNT<br/>        w = READ$(L1)<br/>        IF ISTRUE(isPalindrome(w)) THEN<br/>            MSGBOX $DQ &amp; w &amp; \"\"\" is a palindrome\"<br/>        ELSE<br/>            MSGBOX $DQ &amp; w &amp; \"\"\" is not a palindrome\"<br/>        END IF<br/>    NEXT<br/>END FUNCTION</pre>"}, {"lang": "PowerShell", "loc": 7, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">Function</span> Test<span class=\"sy0\">-</span>Palindrome<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span> <span class=\"re0\">$Text</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$CharArray</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Text</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span>::Reverse<span class=\"br0\">(</span><span class=\"re0\">$CharArray</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$Text</span> <span class=\"kw4\">-like</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span>join <span class=\"re0\">$CharArray</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>void setup(){<br/>\tprintln(isPalindrome(InsertPalindromeHere));<br/>}<br/>\u00a0<br/>boolean isPalindrome(string check){<br/>\tchar[] letters = new char[check.length];<br/>\tstring invert = \" \";<br/>\tstring modCheck = \" \" + check;<br/>\tfor(int i = 0; i &lt; letters.length; i++){<br/>\t\tletters[i] = check.charAt(i);<br/>\t}<br/>\tfor(int i = letters.length-1; i &gt;= 0; i--){<br/>\t\tinvert = invert + letters[i];<br/>\t}<br/>\u00a0<br/>\tif(invert == modCheck){<br/>\t\treturn true;<br/>\t} else {<br/>\t\treturn false;<br/>\t}<br/>}<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\">palindrome<span class=\"br0\">(</span>Word<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> name<span class=\"br0\">(</span>Word<span class=\"sy4\">,</span>List<span class=\"br0\">)</span><span class=\"sy4\">,</span> reverse<span class=\"br0\">(</span>List<span class=\"sy4\">,</span>List<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> IsPalindrome<span class=\"br0\">(</span>StringToTest.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> StringToTest<span class=\"sy0\">=</span>ReverseString<span class=\"br0\">(</span>StringToTest<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> is_palindrome<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> s <span class=\"sy0\">==</span> s<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 13, "block": "<pre class=\"text highlighted_source\">palindro &lt;- function(p) {<br/>  if ( nchar(p) == 1 ) {<br/>    return(TRUE)<br/>  } else if ( nchar(p) == 2 ) {<br/>    return(substr(p,1,1) == substr(p,2,2))<br/>  } else {<br/>    if ( substr(p,1,1) == substr(p, nchar(p), nchar(p)) ) {<br/>      return(palindro(substr(p, 2, nchar(p)-1)))<br/>    } else {<br/>      return(FALSE)<br/>    }<br/>  }<br/>}</pre>"}, {"lang": "Racket", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (palindromb str)<br/>  (let* ([lst (string-&gt;list (string-downcase str))]<br/>         [slst (remove* '(#\\space) lst)])<br/>    (string=? (list-&gt;string (reverse slst)) (list-&gt;string slst))))<br/>\u00a0<br/>;;example output<br/>\u00a0<br/>&gt; (palindromb \"able was i ere i saw elba\")<br/>#t<br/>&gt; (palindromb \"waht the hey\")<br/>#f<br/>&gt; (palindromb \"In girum imus nocte et consumimur igni\")<br/>#t<br/>&gt; <br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 3, "block": "<pre class=\"text highlighted_source\">import String;<br/>\u00a0<br/>public bool palindrome(str text) =  toLowerCase(text) == reverse(text);</pre>"}, {"lang": "REBOL", "loc": 29, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Palindrome Recognizer\"<br/>    URL: http://rosettacode.org/wiki/Palindrome<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; In order to compete with all the one-liners, the operation is</span><br/><span class=\"co1\">; compressed: parens force left hand side to evaluate first, where I</span><br/><span class=\"co1\">; copy the phrase, then uppercase it and assign it to 'p'. Now the</span><br/><span class=\"co1\">; right hand side is evaluated: p is copied, then reversed in place;</span><br/><span class=\"co1\">; the comparison is made and implicitely returned.</span><br/>\u00a0<br/>palindrome?: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\tphrase <span class=\"br0\">[</span><span class=\"kw1\">string!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Potentially palindromatic prose.\"</span><br/>\t<span class=\"sy0\">/</span>local p<br/><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>p: <span class=\"kw3\">uppercase</span> <span class=\"kw3\">copy</span> phrase<span class=\"br0\">)</span> = <span class=\"kw3\">reverse</span> <span class=\"kw3\">copy</span> p<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Teeny Tiny Test Suite</span><br/>\u00a0<br/>assert: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>code<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"kw2\">either</span> <span class=\"kw2\">do</span> code <span class=\"br0\">[</span><span class=\"st0\">\"  ok\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"FAIL\"</span><span class=\"br0\">]</span>  <span class=\"kw3\">mold</span> code<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Simple palindromes, with an exception for variety:\"</span><br/><span class=\"kw2\">repeat</span> phrase <span class=\"br0\">[</span><span class=\"st0\">\"z\"</span> <span class=\"st0\">\"aha\"</span> <span class=\"st0\">\"sees\"</span> <span class=\"st0\">\"oofoe\"</span> <span class=\"st0\">\"Deified\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\tassert <span class=\"kw2\">compose</span> <span class=\"br0\">[</span>palindrome? <span class=\"br0\">(</span>phrase<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>crlf <span class=\"st0\">\"According to the problem statement, these should fail:\"</span><span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span>palindrome? <span class=\"st0\">\"A man, a plan, a canal, Panama.\"</span><span class=\"br0\">]</span> <span class=\"co1\">; Punctuation not ignored.</span><br/>assert <span class=\"br0\">[</span>palindrome? <span class=\"st0\">\"In girum imus nocte et consumimur igni\"</span><span class=\"br0\">]</span> <span class=\"co1\">; Spaces not removed.</span><br/>\u00a0<br/><span class=\"co1\">; I know we're doing palindromes, not alliteration, but who could resist...?</span></pre>"}, {"lang": "Retro", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>needs hash'<br/>: palindrome? ( $-f ) dup ^hash'hash [ ^strings'reverse ^hash'hash ] dip =\u00a0;<br/>\u00a0<br/>\"ingirumimusnocteetconsumimurigni\" palindrome? putn<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm checks if phrase is palindromic; ignores the case of the letters.  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> y                            <span class=\"coMULTI\">/*get (optional) phrase from the C.L.  */</span><br/><span class=\"kw1\">if</span> y=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> y=<span class=\"st0\">'In girum imus nocte et consumimur igni'</span>    <span class=\"coMULTI\">/*[\u2193] translation.*/</span><br/>               <span class=\"coMULTI\">/*We walk around in the night and we are burnt by the fire (of love).*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'string = '</span> y<br/><span class=\"kw1\">if</span> isTpal<span class=\"br0\">(</span>y<span class=\"br0\">)</span>  <span class=\"kw3\">then</span>                   <span class=\"kw1\">say</span> <span class=\"st0\">'The string is a true palindrome.'</span><br/>              <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> isPal<span class=\"br0\">(</span>y<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'The string is an inexact palindrome.'</span><br/>                                <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"The string isn't palindromic.\"</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isTpal:  <span class=\"kw1\">return</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>isPal:   <span class=\"kw1\">return</span> isTpal<span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">space</span><span class=\"br0\">(</span>x,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"radar\"<br/>bString = \"\"<br/>for i=len(aString) to 1 step -1<br/>    bString = bString + aString[i]<br/>next<br/>see aString<br/>if aString = bString see \" is a palindrome.\" + nl<br/>else see \" is not a palindrome\" + nl ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> palindrome?<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  s == s.<span class=\"me1\">reverse</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">data \"My dog has fleas\", \"Madam, I'm Adam.\", \"1 on 1\", \"In girum imus nocte et consumimur igni\"<br/>\u00a0<br/>for i = 1 to 4<br/>  read w$<br/>  print w$;\" is \";isPalindrome$(w$);\" Palindrome\"<br/>next<br/>\u00a0<br/>FUNCTION isPalindrome$(str$)<br/>for i = 1 to len(str$)<br/>  a$ = upper$(mid$(str$,i,1))<br/>   if (a$ &gt;= \"A\" and a$ &lt;= \"Z\") or (a$ &gt;= \"0\" and a$ &lt;= \"9\") then b$ = b$ + a$: c$ = a$ + c$<br/>next i<br/>if b$ &lt;&gt; c$ then isPalindrome$ = \"not\"</pre>"}, {"lang": "Rust", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn is_palindrome(string: &amp;str) -&gt; bool {<br/>    let half_len = string.len()/2;<br/>    string.chars().take(half_len).eq(string.chars().rev().take(half_len))<br/>}<br/>\u00a0<br/>macro_rules! test {<br/>    ( $( $x:tt ),* ) =&gt; { $( println!(\"'{}': {}\", $x, is_palindrome($x)); )* };<br/>}<br/>\u00a0<br/>fn main() {<br/>    test!(\"\",<br/>          \"a\",<br/>          \"ada\",<br/>          \"adad\",<br/>          \"ingirumimusnocteetconsumimurigni\",<br/>          \"\u4eba\u4eba\u70ba\u6211,\u6211\u70ba\u4eba\u4eba\",<br/>          \"\u042f \u0438\u0434\u0443 \u0441 \u043c\u0435\u0447\u0435\u043c, \u0441\u0443\u0434\u0438\u044f\",<br/>          \"\uc544\ub4e4\ub538\ub4e4\uc544\",<br/>          \"The quick brown fox\");<br/>}<br/>\u00a0</pre>"}, {"lang": "SAS", "loc": 7, "block": "<pre class=\"sas highlighted_source\">\u00a0<br/>The macro <span class=\"st0\">\"palindro\"</span> has two parameters: string <span class=\"kw4\">and</span> ignorewhitespace.<br/>  string is the expression to be checked.<br/>  ignorewhitespace, <span class=\"br0\">(</span>Y/<span class=\"kw3\">N</span><span class=\"br0\">)</span>, determines whether <span class=\"kw4\">or</span> <span class=\"kw4\">not</span> to ignore blanks <span class=\"kw4\">and</span> punctuation.<br/>This macro was written <span class=\"kw4\">in</span> SAS <span class=\"nu0\">9.2</span>.  <span class=\"kw5\">If</span> you use a version before SAS 9.1.3, <br/>the <span class=\"kw3\">compress</span> function <span class=\"kw4\">options</span> will <span class=\"kw4\">not</span> work.<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isPalindrome<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s <span class=\"sy0\">==</span> s.<span class=\"me1\">reverse</span></pre>"}, {"lang": "Scheme", "loc": 3, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>palindrome? <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>chars <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> chars <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> chars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 14, "block": "<pre class=\"text highlighted_source\">const func boolean: palindrome (in string: stri) is func<br/>  result<br/>    var boolean: isPalindrome is TRUE;<br/>  local<br/>    var integer: index is 0;<br/>    var integer: length is 0;<br/>  begin<br/>    length\u00a0:= length(stri);<br/>    for index range 1 to length div 2 do<br/>      if stri[index] &lt;&gt; stri[length - index + 1] then<br/>        isPalindrome\u00a0:= FALSE;<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 3, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>isPalindrome(string(1))\u00a0:= equalList(string, reverse(string));</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"st0\">\"noon\"</span>.<span class=\"me1\">is_palindrome</span>;    <span class=\"co1\"># true</span></pre>"}, {"lang": "Simula", "loc": 33, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    BOOLEAN PROCEDURE ISPALINDROME(T); TEXT T;<br/>    BEGIN<br/>        BOOLEAN RESULT;<br/>        INTEGER I, J;<br/>        I\u00a0:= 1;<br/>        J\u00a0:= T.LENGTH;<br/>        RESULT\u00a0:= TRUE;<br/>        WHILE RESULT AND I &lt; J DO<br/>        BEGIN<br/>            CHARACTER L, R;<br/>            T.SETPOS(I); L\u00a0:= T.GETCHAR; I\u00a0:= I + 1;<br/>            T.SETPOS(J); R\u00a0:= T.GETCHAR; J\u00a0:= J - 1;<br/>            RESULT\u00a0:= L = R;<br/>        END;<br/>        ISPALINDROME\u00a0:= RESULT;<br/>    END ISPALINDROME;<br/>\u00a0<br/>    TEXT T;<br/>    FOR T\u00a0:- \"\", \"A\", \"AA\", \"ABA\", \"SALALAS\", \"MADAMIMADAM\",<br/>             \"AB\", \"AAB\", \"ABCBDA\"<br/>    DO<br/>    BEGIN<br/>        OUTTEXT(IF ISPALINDROME(T) THEN \"IS   \" ELSE \"ISN'T\");<br/>        OUTTEXT(\" PALINDROME: \");<br/>        OUTCHAR('\"');<br/>        OUTTEXT(T);<br/>        OUTCHAR('\"');<br/>        OUTIMAGE;<br/>    END;<br/>\u00a0<br/>END.</pre>"}, {"lang": "Slate", "loc": 4, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"1d6e5d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(String traits) isPalindrome<br/>[<br/>  (s lexicographicallyCompare: s reversed) isZero<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">isPalindrome</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">aString</span> |<br/>\t<span class=\"re6\">str</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">aString</span> select: <span class=\"br0\">[</span>:<span class=\"re5\">chr</span>| chr isAlphaNumeric<span class=\"br0\">]</span><span class=\"br0\">)</span> collect: <span class=\"br0\">[</span>:<span class=\"re5\">chr</span> | chr asLowercase<span class=\"br0\">]</span>.<br/>\t<span class=\"re5\">str</span> <span class=\"sy0\">=</span> <span class=\"re5\">str</span> reversed.<br/>\t<span class=\"br0\">]</span>.<br/>\u00a0</pre>"}, {"lang": "SNOBOL4", "loc": 17, "block": "<pre class=\"text highlighted_source\">        define('pal(str)')\u00a0:(pal_end)<br/>pal     str notany(&amp;ucase &amp;lcase) =\u00a0:s(pal)<br/>        str = replace(str,&amp;ucase,&amp;lcase)<br/>        leq(str,reverse(str))\u00a0:s(return)f(freturn)<br/>pal_end<br/>\u00a0<br/>        define('palchk(str)tf')\u00a0:(palchk_end)<br/>palchk  output = str; <br/>        tf = 'False'; tf = pal(str) 'True'<br/>        output = 'Palindrome: ' tf\u00a0:(return)<br/>palchk_end        <br/>\u00a0<br/>*       # Test and display<br/>        palchk('Able was I ere I saw Elba')<br/>        palchk('In girum imus nocte et consumimur igni')<br/>        palchk('The quick brown fox jumped over the lazy dogs')<br/>end</pre>"}, {"lang": "SQL", "loc": 2, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">SET</span> @txt <span class=\"sy0\">=</span> <span class=\"kw1\">REPLACE</span><span class=\"br0\">(</span><span class=\"st0\">'In girum imus nocte et consumimur igni'</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> REVERSE<span class=\"br0\">(</span>@txt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> @txt;</pre>"}, {"lang": "Swift", "loc": 19, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>// Allow for easy character checking<br/>extension String {<br/>    subscript (i: Int) -&gt; String {<br/>        return String(Array(self)[i])<br/>    }<br/>}<br/>\u00a0<br/>func isPalindrome(str:String) -&gt; Bool {<br/>    if (count(str) == 0 || count(str) == 1) {<br/>        return true<br/>    }<br/>    let removeRange = Range&lt;String.Index&gt;(start: advance(str.startIndex, 1), end: advance(str.endIndex, -1))<br/>    if (str[0] == str[count(str) - 1]) {<br/>        return isPalindrome(str.substringWithRange(removeRange))<br/>    }<br/>    return false<br/>}</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> palindrome <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> eq <span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>pal  =\"ingirumimusnocteetconsumimurigni\"<br/>pal_r=TURN(pal)<br/>SELECT pal<br/>CASE $pal_r<br/>PRINT \"true\"<br/>DEFAULT<br/>PRINT/ERROR \"untrue\"<br/>ENDSELECT<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 5, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${text}</span>\"</span> == <span class=\"st0\">\"<span class=\"es4\">$(rev &lt;&lt;&lt; \"${text}\")</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>   <span class=\"kw3\">echo</span> <span class=\"st0\">\"Palindrome\"</span><br/><span class=\"kw1\">else</span><br/>   <span class=\"kw3\">echo</span> <span class=\"st0\">\"Not a palindrome\"</span><br/><span class=\"kw1\">fi</span></pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>palindrome = ~&amp;cixE\\letters+ * -:~&amp; ~=`A-~rlp letters</pre>"}, {"lang": "Vala", "loc": 9, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw4\">bool</span> is_palindrome <span class=\"br0\">(</span><span class=\"kw4\">string</span> str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> tmp <span class=\"sy0\">=</span> str.<span class=\"me1\">casefold</span> <span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span> <span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> tmp <span class=\"sy0\">==</span> tmp.<span class=\"me1\">reverse</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print <span class=\"br0\">(</span>is_palindrome <span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">to_string</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Function isPalindrome(aString as string) as Boolean<br/>dim tempstring as string<br/>  tempstring = Lcase(Replace(aString, \" \", \"\"))<br/>  isPalindrome = (tempstring = Reverse(tempstring))<br/>End Function<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 18, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">function</span> Squish( s1 )<br/>\t<span class=\"kw4\">dim</span> sRes<br/>\tsRes = vbNullString<br/>\t<span class=\"kw4\">dim</span> i, c<br/>\t<span class=\"kw3\">for</span> i = 1 <span class=\"kw3\">to</span> len( s1 )<br/>\t\tc = lcase( mid( s1, i, 1 ))<br/>\t\t<span class=\"kw3\">if</span> instr( <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz0123456789\"</span>, c ) <span class=\"kw3\">then</span><br/>\t\t\tsRes = sRes &amp; c<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">next</span><br/>\tSquish = sRes<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> isPalindrome( s1 )<br/>\t<span class=\"kw4\">dim</span> squished<br/>\tsquished = Squish( s1 )<br/>\tisPalindrome = ( squished = StrReverse( squished ) )<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "Vedit macro language", "loc": 7, "block": "<pre class=\"vedit highlighted_source\"><span class=\"sy0\">:</span>PALINDROME<span class=\"sy0\">:</span><br/>EOL #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> Cur_Col<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>BOL<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span> <span class=\"sy0\">&lt;=</span> #<span class=\"nu0\">2</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>CC<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> CC<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"sy0\">-</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Wortel", "loc": 13, "block": "<pre class=\"text highlighted_source\">@let {<br/> \u00a0; Using a hook<br/>  pal1 @(= @rev)<br/> \u00a0; Function with argument<br/>  pal2 &amp;s = s @rev s<br/> \u00a0; for inexact palindromes<br/>  pal3 ^(@(= @rev) .toLowerCase. &amp;\\@replace[&amp;\"\\s+\"g \"\"])<br/>  [[<br/>   \u00a0!pal1 \"abcba\"<br/>   \u00a0!pal2 \"abcbac\"<br/>   \u00a0!pal3 \"In girum imus nocte et consumimur igni\"<br/>  ]]<br/>}</pre>"}, {"lang": "X86 Assembly", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; x86_84 Linux nasm<br/>section .text<br/>\u00a0<br/>isPalindrome:<br/>  mov rsi, rax<br/>  mov rdi, rax<br/>\u00a0<br/>  get_end:<br/>    cmp byte [rsi], 0<br/>    je get_result<br/>    inc rsi<br/>    jmp get_end<br/>\u00a0<br/>  get_result:<br/>    mov rax, 0<br/>    dec rsi<br/>\u00a0<br/>    compare:<br/>      mov cl, byte [rdi]<br/>      cmp byte [rsi], cl<br/>      jne not_palindrome<br/>      cmp rsi, rdi<br/>      je palindrome<br/>      inc rdi<br/>      cmp rdi, rsi<br/>      je palindrome<br/>      dec rsi<br/>      jmp compare<br/>\u00a0<br/>  not_palindrome:<br/>    mov rax, 0<br/>    ret<br/>  palindrome:<br/>    mov rax, 1<br/>    ret<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 26, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>string 0;                       \\use zero-terminated strings<br/>\u00a0<br/>func StrLen(Str);               \\Return number of characters in an ASCIIZ string<br/>char Str;<br/>int  I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>        if Str(I) = 0 then return I;<br/>\u00a0<br/>func Palindrome(S);             \\Return 'true' if S is a palindrome<br/>char S;<br/>int  L, I;<br/>[L:= StrLen(S);<br/>for I:= 0 to L/2-1 do<br/>        if S(I) # S(L-1-I) then return false;<br/>return true;<br/>]; \\Palindrome<br/>\u00a0<br/>int Word, I;<br/>[Word:=<br/>    [\"otto\", \"mary\", \"ablewasiereisawelba\", \"ingirumimusnocteetconsumimurigni\"];<br/>for I:= 0 to 4-1 do<br/>    [Text(0, if Palindrome(Word(I)) then \"yes\" else \"no\");<br/>    CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "Yorick", "loc": 10, "block": "<pre class=\"text highlighted_source\">func is_palindrome(str) {<br/>    s = strchar(str)(:-1);<br/>    return allof(s == s(::-1));<br/>}<br/>\u00a0<br/>func prep_palindrome(str) {<br/>    s = strchar(strlower(str));<br/>    w = where(s &gt;= 'a' &amp; s &lt;= 'z');<br/>    return strchar(s(w));<br/>}</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn pali(text){<br/>   if (text.len()&lt;2) return(False);<br/>   text==text.reverse();<br/>}<br/>fcn pali2(text){ pali((text - \" \\t\\n.,\").toLower()) }  // or whatever punctuation is</pre>"}]}