{"task": "Determine_if_a_string_is_numeric", "blocks": [{"lang": "8th", "loc": 1, "block": "<pre class=\"text highlighted_source\">: number? &gt;n &gt;kind ns:n n:=\u00a0;</pre>"}, {"lang": "ActionScript", "loc": 4, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw3\">public</span> <span class=\"kw2\">function</span> isNumeric<span class=\"br0\">(</span>num:<span class=\"kw3\">String</span><span class=\"br0\">)</span>:<span class=\"kw3\">Boolean</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">!</span><span class=\"kw3\">isNaN</span><span class=\"br0\">(</span><span class=\"kw3\">parseInt</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 3, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Numeric_Tests <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Is_Numeric <span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/><span class=\"kw1\">end</span> Numeric_Tests;</pre>"}, {"lang": "Aime", "loc": 18, "block": "<pre class=\"text highlighted_source\">integer<br/>is_numeric(text s)<br/>{<br/>    return\u00a0!trap_q(alpha, s, 0);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    if (!is_numeric(\"8192&amp;*\")) {<br/>        o_text(\"Not numeric.\\n\");<br/>    }<br/>    if (is_numeric(\"8192\")) {<br/>        o_text(\"Numeric.\\n\");<br/>    }<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 27, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> is numeric <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> string<span class=\"br0\">)</span> <span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">BOOL</span> out <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>  <span class=\"kw4\">PROC</span> call back false <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>out<span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span> <span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw6\">FILE</span> memory<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">associate</span><span class=\"br0\">(</span>memory<span class=\"sy1\">,</span> string<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">on value error</span><span class=\"br0\">(</span>memory<span class=\"sy1\">,</span> call back false<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span>memory<span class=\"sy1\">,</span> call back false<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw6\">UNION</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">,</span> <span class=\"kw3\">COMPL</span><span class=\"br0\">)</span> numeric<span class=\"sy1\">:=</span><span class=\"re1\">0.0</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># use a FORMAT pattern instead of a regular expression #</span><br/>  <span class=\"kw22\">getf</span><span class=\"br0\">(</span>memory<span class=\"sy1\">,</span> <span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span> numeric<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>   <span class=\"kw3\">STRING</span><br/>     s1 <span class=\"sy1\">:=</span> <span class=\"st0\">\"152\"</span><span class=\"sy1\">,</span><br/>     s2 <span class=\"sy1\">:=</span> <span class=\"st0\">\"-3.1415926\"</span><span class=\"sy1\">,</span><br/>     s3 <span class=\"sy1\">:=</span> <span class=\"st0\">\"Foo123\"</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><br/>     s1<span class=\"sy1\">,</span> <span class=\"st0\">\" results in \"</span><span class=\"sy1\">,</span> is numeric<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>     s2<span class=\"sy1\">,</span> <span class=\"st0\">\" results in \"</span><span class=\"sy1\">,</span> is numeric<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>     s3<span class=\"sy1\">,</span> <span class=\"st0\">\" results in \"</span><span class=\"sy1\">,</span> is numeric<span class=\"br0\">(</span>s3<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><br/>   <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ALGOL W", "loc": 135, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>   \u00a0% determnines whether the string contains an integer, real or imaginary \u00a0%<br/>   \u00a0% number. Returns true if it does, false otherwise                      \u00a0%<br/>    logical procedure isNumeric( string(32) value text )\u00a0;<br/>        begin<br/>\u00a0<br/>            logical ok;<br/>           \u00a0% the \"number\" cannot be blank                                  \u00a0%<br/>            ok\u00a0:= ( text not = \" \" );<br/>            if ok then begin<br/>\u00a0<br/>               \u00a0% there is at least one non-blank character                 \u00a0%<br/>               \u00a0% must have either an integer or real/immaginary number     \u00a0%<br/>               \u00a0% integer: [+|-]digit-sequence                              \u00a0%<br/>               \u00a0% real:    [+|-][digit-sequence].digit-sequence['integer][L]\u00a0%<br/>               \u00a0% or:      [+|-]digit-sequence[.[digit-sequence]]'integer[L]\u00a0%<br/>               \u00a0% imaginary:                                                \u00a0%<br/>               \u00a0%          [+|-][digit-sequence].digit-sequence['integer][L]I%<br/>               \u00a0% or:      [+|-]digit-sequence[.[digit-sequence]]'integer[L]I%<br/>               \u00a0% The \"I\" at the end of an imaginary number can appear      \u00a0%<br/>               \u00a0% before or after the \"L\" (which indicates a long number)   \u00a0%<br/>               \u00a0% the \"I\" and \"L\" can be in either case                     \u00a0%<br/>\u00a0<br/>                procedure nextChar\u00a0; charPos\u00a0:= charPos + 1;<br/>                logical procedure have( string(1) value ch )\u00a0;<br/>                    ( charPos &lt;= maxChar and text(charPos//1) = ch )\u00a0;<br/>\u00a0<br/>                logical procedure haveDigit\u00a0;<br/>                    ( charPos &lt;= maxChar and text(charPos//1) &gt;= \"0\" and text(charPos//1) &lt;= \"9\" )\u00a0;<br/>\u00a0<br/>\u00a0<br/>                integer charPos, maxChar;<br/>                logical hadDigits, isReal;<br/>                charPos  \u00a0:=  0;<br/>                maxChar  \u00a0:= 31;<br/>                hadDigits\u00a0:= false;<br/>                isReal   \u00a0:= false;<br/>\u00a0<br/>               \u00a0% skip trailing spaces                                      \u00a0%<br/>                while maxChar &gt; 0 and text(maxChar//1) = \" \" do maxChar\u00a0:= maxChar - 1;<br/>               \u00a0% skip leading spacesx                                      \u00a0%<br/>                while have( \" \" ) do nextChar;<br/>\u00a0<br/>               \u00a0% skip optional sign                                        \u00a0%<br/>                if have( \"+\" ) or have( \"-\" ) then nextChar;<br/>\u00a0<br/>                if      haveDigit then begin<br/>                   \u00a0% have a digit sequence                                 \u00a0%<br/>                    hadDigits\u00a0:= true;<br/>                    while haveDigit do nextChar<br/>                end if_have_sign\u00a0;<br/>\u00a0<br/>                if have( \".\" ) then begin<br/>                   \u00a0% real or imaginary number                              \u00a0%<br/>                    nextChar;<br/>                    isReal   \u00a0:= true;<br/>                    hadDigits\u00a0:= hadDigits or haveDigit;<br/>                    while haveDigit do nextChar<br/>                end if_have_point\u00a0;<br/>\u00a0<br/>               \u00a0% should have had some digits                               \u00a0%<br/>                ok\u00a0:= hadDigits;<br/>\u00a0<br/>                if ok and have( \"'\" ) then begin<br/>                   \u00a0% the number has an exponent                            \u00a0%<br/>                    isReal\u00a0:= true;<br/>                    nextChar;<br/>                   \u00a0% skip optional sign                                    \u00a0%<br/>                    if have( \"+\" ) or have( \"-\" ) then nextChar;<br/>                   \u00a0% must have a digit sequence                            \u00a0%<br/>                    ok\u00a0:= haveDigit;<br/>                    while haveDigit do nextChar;<br/>                end if_ok_and_have_exponent\u00a0;<br/>\u00a0<br/>               \u00a0% if it is a real number, there could be L/I suffixes       \u00a0%<br/>                if ok and isReal then begin<br/>                    integer LCount, ICount;<br/>                    LCount\u00a0:= 0;<br/>                    ICount\u00a0:= 0;<br/>                    while have( \"L\" ) or have( \"l\" ) or have( \"I\" ) or have( \"i\" ) do begin<br/>                        if have( \"L\" ) or have( \"l\" )<br/>                        then LCount\u00a0:= LCount + 1<br/>                        else ICount\u00a0:= ICount + 1;<br/>                        nextChar<br/>                    end while_have_L_or_I\u00a0;<br/>                   \u00a0% there can be at most one L and at most 1 I            \u00a0%<br/>                    ok\u00a0:= ( LCount &lt; 2 and ICount &lt; 2 )<br/>                end if_ok_and_isReal\u00a0;<br/>\u00a0<br/>               \u00a0% must now be at the end if the number                      \u00a0%<br/>                ok\u00a0:= ok and charPos &gt;= maxChar<br/>\u00a0<br/>            end if_ok\u00a0;<br/>\u00a0<br/>            ok<br/>        end isNumeric\u00a0;<br/>\u00a0<br/>\u00a0<br/>   \u00a0% test the isNumeric procedure                                          \u00a0%<br/>    procedure testIsNumeric( string(32) value n<br/>                          \u00a0; logical    value expectedResult<br/>                           )\u00a0;<br/>        begin<br/>            logical actualResult;<br/>            actualResult\u00a0:= isNumeric( n );<br/>            write( s_w\u00a0:= 0<br/>                 , \"\"\"\", n, \"\"\" is \"<br/>                 , if actualResult then \"\" else \"not \"<br/>                 , \"numeric \"<br/>                 , if actualResult = expectedResult then \"\" else \" NOT \"<br/>                 , \"as expected\"<br/>                 )<br/>        end testIsNumeric\u00a0;<br/>\u00a0<br/>\u00a0<br/>    testIsNumeric(          \"\", false );<br/>    testIsNumeric(         \"b\", false );<br/>    testIsNumeric(         \".\", false );<br/>    testIsNumeric(       \".'3\", false );<br/>    testIsNumeric(       \"3.'\", false );<br/>    testIsNumeric(    \"0.0z44\", false );<br/>    testIsNumeric(      \"-1IL\", false );<br/>    testIsNumeric( \"4.5'23ILL\", false );<br/>\u00a0<br/>    write( \"---------\" );<br/>\u00a0<br/>    testIsNumeric(        \"-1\", true  );<br/>    testIsNumeric(    \" +.345\", true  );<br/>    testIsNumeric(   \"4.5'23I\", true  );<br/>    testIsNumeric(    \"-5'+3i\", true  );<br/>    testIsNumeric(    \"-5'-3l\", true  );<br/>    testIsNumeric(  \" -.345LI\", true  );<br/>\u00a0<br/>end.</pre>"}, {"lang": "Apex", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>String numericString = '123456';<br/>String partlyNumericString = '123DMS';<br/>String decimalString = '123.456';<br/>\u00a0<br/>System.debug(numericString.isNumeric()); // this will be true<br/>System.debug(partlyNumericString.isNumeric()); // this will be false<br/>System.debug(decimalString.isNumeric()); // this will be false<br/>System.debug(decimalString.remove('.').isNumeric()); // this will be true<br/>\u00a0</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      \u2283\u2395VFI{w\u2190\u2375\u22c4((w='-')/w)\u2190'\u00af'\u22c4w}'152 -3.1415926 Foo123'<br/>1 1 0</pre>"}, {"lang": "AppleScript", "loc": 63, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/><span class=\"co1\">-- isNumString\u00a0:: String -&gt; Bool</span><br/><span class=\"kw3\">on</span> isNumString<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">try</span><br/>        <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> s <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">set</span> c <span class=\"kw3\">to</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span>s <span class=\"kw2\">as</span> <span class=\"kw1\">number</span><span class=\"br0\">)</span><br/>            c <span class=\"kw3\">is</span> real <span class=\"kw2\">or</span> c <span class=\"kw3\">is</span> <span class=\"kw1\">integer</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"kw1\">false</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">on</span> <span class=\"kw3\">error</span><br/>        <span class=\"kw1\">false</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/><span class=\"kw3\">end</span> isNumString<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>isNumString, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">3.0</span>, <span class=\"nu0\">3.5</span>, <span class=\"st0\">\"3.5\"</span>, <span class=\"st0\">\"3E8\"</span>, <span class=\"st0\">\"-3.5\"</span>, <span class=\"st0\">\"30\"</span>, <span class=\"st0\">\"three\"</span>, three, four<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {false, false, false, true, true, true, true, false, false, false}</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- three\u00a0:: () -&gt; Int</span><br/><span class=\"kw3\">script</span> three<br/>    <span class=\"nu0\">3</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/><span class=\"co1\">-- four\u00a0:: () -&gt; Int</span><br/><span class=\"kw3\">on</span> four<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">4</span><br/><span class=\"kw3\">end</span> four<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS FOR TEST</span><br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> lambda<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> lambda\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 12, "block": "<pre class=\"autohotkey highlighted_source\">list <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.</span>14 <span class=\"sy0\">-</span><span class=\"nu0\">5.2</span> ten 0xf<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>% IsNumeric<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>IsNumeric<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">If</span> x is number<br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Else</span> <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;Output: 1  1  1  0  1</span></pre>"}, {"lang": "AWK", "loc": 3, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/>$ awk '<span class=\"kw6\">function</span> isnum<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw6\">return</span><span class=\"br0\">(</span>x<span class=\"sy2\">==</span>x<span class=\"sy3\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> isnum<span class=\"br0\">(</span><span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span>,isnum<span class=\"br0\">(</span><span class=\"st0\">\"-42\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 7, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Your string: \"</span><span class=\"sy0\">,</span> s$<br/>\u00a0<br/><span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckval.shtml\"><span class=\"kw3\">VAL</span></a><span class=\"br0\">(</span>s$<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> s$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">THEN</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Not a number\"</span><br/><span class=\"kw1\">ELSE</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"This is a number\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span></pre>"}, {"lang": "BASIC", "loc": 6, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Enter a string\"</span>;S$:<span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1000</span><br/><span class=\"co3\">20</span> <span class=\"kw1\">IF</span> R <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Is num\"</span> <span class=\"kw1\">ELSE</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><span class=\"st0\">\"Not num\"</span><br/><span class=\"co3\">99</span> <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/><span class=\"co3\">1000</span> T1<span class=\"sy0\">=</span><a href=\"http://www.qbasicnews.com/qboho/qckval.shtml\"><span class=\"kw3\">VAL</span></a><span class=\"br0\">(</span>S$<span class=\"br0\">)</span>:T1$<span class=\"sy0\">=</span><a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span>T1<span class=\"br0\">)</span><br/><span class=\"co3\">1010</span> R<span class=\"sy0\">=</span>T1$<span class=\"sy0\">=</span>S$ <a href=\"http://www.qbasicnews.com/qboho/qckor.shtml\"><span class=\"kw3\">OR</span></a> T1$<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>S$<br/><span class=\"co3\">1099</span> <span class=\"kw1\">RETURN</span></pre>"}, {"lang": "Batch File", "loc": 10, "block": "<pre class=\"dos highlighted_source\"><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a a=<span class=\"sy0\">%</span><span class=\"re3\">arg</span><span class=\"sy0\">%</span>+0 <span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">a</span><span class=\"sy0\">%</span> == 0 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">arg</span><span class=\"sy0\">%</span>\"==\"0\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Non Numeric.<br/>\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Numeric.<br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Numeric.<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">      REPEAT<br/>        READ N$<br/>        IF FN_isanumber(N$) THEN<br/>          PRINT \"'\" N$ \"' is a number\"<br/>        ELSE<br/>          PRINT \"'\" N$ \"' is NOT a number\"<br/>        ENDIF<br/>      UNTIL N$ = \"end\"<br/>      END<br/>\u00a0<br/>      DATA \"PI\", \"0123\", \"-0123\", \"12.30\", \"-12.30\", \"123!\", \"0\"<br/>      DATA \"0.0\", \".123\", \"-.123\", \"12E3\", \"12E-3\", \"12+3\", \"end\"<br/>\u00a0<br/>      DEF FN_isanumber(A$)<br/>      ON ERROR LOCAL = FALSE<br/>      IF EVAL(\"(\" + A$ + \")\") &lt;&gt; VAL(A$) THEN = FALSE<br/>      IF VAL(A$) &lt;&gt; 0 THEN = TRUE<br/>      IF LEFT$(A$,1) = \"0\" THEN = TRUE<br/>      = FALSE<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 10, "block": "<pre class=\"text highlighted_source\"> ~:0\\`#v_:\"+\"-!#v_:\"-\"-!#v_::\"E\"-\\\"e\"-*#v_                               v<br/>v       _v#     &lt;        &lt;             0&lt;<br/>&gt;~:0\\`#v_&gt;::\"0\"-0\\`\\\"9\"-0`+!#v_:\".\"-!#v_::\"E\"-\\\"e\"-*!#v_                 v<br/>^                           $&lt;        &gt;                 &gt; $               v<br/>&gt;~:0\\`#v_&gt;::\"0\"-0\\`\\\"9\"-0`+!#v_:\".\"-!#v_::\"E\"-\\\"e\"-*!#v_&gt;                v&gt;<br/>^                           $&lt;                        &gt;$~:0\\`#v_:\"+\"-#v_v<br/>v      $_v#                                                     &lt; &lt;  \u00a0:#&lt;<br/>&gt;~:0\\`#v_&gt;::\"0\"-0\\`\\\"9\"-0`+!#v_:\".\"-!#v_::\"E\"-\\\"e\"-*!v          0     &gt; v<br/>^                           $&lt;        v                 &lt;    &lt;&lt; ^_^#-\"-\"&lt;<br/>       &gt; \"ciremuN\"&gt;:#,<a class=\"__cf_email__\" data-cfemail=\"6d322d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>             &gt;&gt;#$_\"ciremun toN\"&gt;:#,<a class=\"__cf_email__\" data-cfemail=\"0b544b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^           &lt;</pre>"}, {"lang": "Bracmat", "loc": 11, "block": "<pre class=\"text highlighted_source\">43257349578692:/<br/>    F<br/>\u00a0<br/>260780243875083/35587980:/<br/>    S<br/>\u00a0<br/>247/30:~/#<br/>    F<br/>\u00a0<br/>80000000000:~/#<br/>    S</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ps^^-]to{\"Int\"\"Double\"}\\/~[\\/L[1==?*<br/>\u00a0</pre>"}, {"lang": "C", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"kw4\">int</span> isNumeric <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span> <span class=\"sy0\">||</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtod.html\"><span class=\"kw3\">strtod</span></a> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 29, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;sstream&gt; // for istringstream</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isNumeric<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> pszInput, <span class=\"kw4\">int</span> nNumberBase <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tistringstream iss<span class=\"br0\">(</span> pszInput <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> nNumberBase <span class=\"sy1\">==</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span> dTestSink<span class=\"sy4\">;</span><br/>\t\tiss <span class=\"sy1\">&gt;&gt;</span> dTestSink<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> nNumberBase <span class=\"sy1\">==</span> <span class=\"nu0\">8</span> <span class=\"sy3\">||</span> nNumberBase <span class=\"sy1\">==</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> nTestSink<span class=\"sy4\">;</span><br/>\t\tiss <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> nNumberBase <span class=\"sy1\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> <span class=\"sy4\">?</span> oct <span class=\"sy4\">:</span> hex <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> nTestSink<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// was any input successfully consumed/converted?</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy3\">!</span> iss <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// was all the input successfully consumed/converted?</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span> iss.<span class=\"me1\">rdbuf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>in_avail<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 11, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsNumeric<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> Result<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">double</span><span class=\"sy0\">.</span><span class=\"me1\">TryParse</span><span class=\"br0\">(</span>s, <span class=\"kw1\">out</span> Result<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// TryParse routines were added in Framework version 2.0.</span><br/><span class=\"br0\">}</span>        <br/>\u00a0<br/><span class=\"kw4\">string</span> <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"123\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsNumeric<span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// do something</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> numeric? <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if-let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span>seq s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> s<span class=\"br0\">)</span> \\<span class=\"sy0\">-</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>next s<span class=\"br0\">)</span> s<span class=\"br0\">)</span><br/>          s <span class=\"br0\">(</span><span class=\"kw1\">drop-while</span> #<span class=\"br0\">(</span>Character<span class=\"sy0\">/</span>isDigit <span class=\"sy0\">%</span><span class=\"br0\">)</span> s<span class=\"br0\">)</span><br/>          s <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> s<span class=\"br0\">)</span> \\<span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>next s<span class=\"br0\">)</span> s<span class=\"br0\">)</span><br/>          s <span class=\"br0\">(</span><span class=\"kw1\">drop-while</span> #<span class=\"br0\">(</span>Character<span class=\"sy0\">/</span>isDigit <span class=\"sy0\">%</span><span class=\"br0\">)</span> s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 10, "block": "<pre class=\"cobol highlighted_source\">        <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> is-<span class=\"kw3\">numeric</span><span class=\"sy0\">.</span><br/>        <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>        <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> test-numval-f<span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span><span class=\"br0\">)</span> end-<span class=\"kw2\">display</span><br/>        <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> test-numval-f<span class=\"br0\">(</span><span class=\"st0\">\"-123.01E+3\"</span><span class=\"br0\">)</span> end-<span class=\"kw2\">display</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">function</span> test-numval-f<span class=\"br0\">(</span><span class=\"st0\">\"+123.123\"</span><span class=\"br0\">)</span> <span class=\"kw3\">equal</span> <span class=\"kw3\">zero</span> <span class=\"kw3\">then</span><br/>            <span class=\"kw2\">display</span> <span class=\"st0\">\"is numeric\"</span> end-<span class=\"kw2\">display</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"kw2\">display</span> <span class=\"st0\">\"failed numval-f test\"</span> end-<span class=\"kw2\">display</span><br/>        end-<span class=\"kw1\">if</span><br/>        goback<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 4, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"br0\">(</span>isFinite<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5e5\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\"># all true</span><br/>console.<span class=\"me1\">log</span> <span class=\"br0\">(</span>isFinite<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"kw4\">NaN</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fred\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"###\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\"># all false</span><br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 15, "block": "<pre class=\"cfm highlighted_source\"><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> TestValue<span class=\"sy0\">=</span><span class=\"nu0\">34</span><span class=\"sy0\">&gt;</span></span><br/>  TestValue: <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc2\">#TestValue#</span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc5\"><span class=\"sy0\">&lt;</span><a href=\"http://december.com/html/4/element/br.html\"><span class=\"kw2\">br</span></a><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> <span class=\"kw5\">isNumeric</span><span class=\"br0\">(</span>TestValue<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>  is Numeric.<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfelse</span><span class=\"sy0\">&gt;</span></span><br/>  is NOT Numeric.<br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> TestValue<span class=\"sy0\">=</span><span class=\"st0\">\"NAS\"</span><span class=\"sy0\">&gt;</span></span><br/>  TestValue: <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc2\">#TestValue#</span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><span class=\"sc5\"><span class=\"sy0\">&lt;</span><a href=\"http://december.com/html/4/element/br.html\"><span class=\"kw2\">br</span></a><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfif</span> <span class=\"kw5\">isNumeric</span><span class=\"br0\">(</span>TestValue<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span></span><br/>  is Numeric.<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfelse</span><span class=\"sy0\">&gt;</span></span><br/>  is NOT Numeric.<br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfif</span><span class=\"sy0\">&gt;</span></span></pre>"}, {"lang": "CFScript", "loc": 1, "block": "<pre class=\"cfm highlighted_source\">isNumeric(42)</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> numeric-string-p <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>*read-<span class=\"kw1\">eval</span>* <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>ignore-errors <span class=\"br0\">(</span><span class=\"kw1\">numberp</span> <span class=\"br0\">(</span>read-from-string string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> s<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"12\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" 12<span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hello12\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-12\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"02\"</span><span class=\"sy0\">,</span><br/>                 <span class=\"st0\">\"0-12\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"+12\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1.5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1,000\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1_000\"</span><span class=\"sy0\">,</span><br/>                 <span class=\"st0\">\"0x10\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0b10101111_11110000_11110000_00110011\"</span><span class=\"sy0\">,</span><br/>                 <span class=\"st0\">\"-0b10101\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0x10.5\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st_h\">`isNumeric(\"%s\"):\u00a0%s`</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> s.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isNumeric</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 9, "block": "<pre class=\"text highlighted_source\">is-numeric s:<br/>\ttrue<br/>\ttry:<br/>\t\tdrop to-num s<br/>\tcatch value-error:<br/>\t\tnot<br/>\u00a0<br/>for v in [ \"1\" \"0\" \"3.14\" \"hello\" \"12e3\" \"12ef\" \"-3\" ]:<br/>\t!.( v is-numeric v )</pre>"}, {"lang": "Delphi", "loc": 8, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> IsNumericString<span class=\"br0\">(</span><span class=\"kw1\">const</span> inStr<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">extended</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">TryStrToFloat</span><span class=\"br0\">(</span>inStr<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> isNumeric<span class=\"br0\">(</span>specimen <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/try\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">makeDouble</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>specimen<span class=\"br0\">)</span><br/>        return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/catch\"><span class=\"kw2\">catch</span></a> _ <span class=\"br0\">{</span><br/>       return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 8, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"st0\">\"albert\"</span><span class=\"br0\">)</span><br/>   \u2192 #f<br/><span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"sy0\">-</span><span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"sy0\">-</span><span class=\"nu0\">666</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"nu0\">666</span><span class=\"br0\">)</span> 'YES 'NO<span class=\"br0\">)</span><br/>    \u2192 YES<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 10, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def is_numeric(str) do<br/>    case Float.parse(str) do<br/>      {_num, \"\"} -&gt; true<br/>      _          -&gt; false<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>[\"123\", \"-12.3\", \"123.\", \".05\", \"-12e5\", \"+123\", \" 123\", \"abc\", \"123a\", \"12.3e\", \"1 2\"] |&gt; Enum.filter(&amp;RC.is_numeric/1)</pre>"}, {"lang": "Erlang", "loc": 4, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">is_numeric</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Float</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">catch</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">list_to_float</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Int</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">catch</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">list_to_integer</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw4\">is_number</span><span class=\"br0\">(</span><span class=\"re5\">Float</span><span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"kw4\">is_number</span><span class=\"br0\">(</span><span class=\"re5\">Int</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM NUMERIC<br/>\u00a0<br/>PROCEDURE IS_NUMERIC(S$-&gt;ANS%)<br/>LOCAL T1,T1$<br/>    T1=VAL(S$)<br/>    T1$=STR$(T1)<br/>    ANS%=(T1$=S$) OR T1$=\" \"+S$<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(CHR$(12);)<br/>    INPUT(\"Enter a string\",S$)<br/>    IS_NUMERIC(S$-&gt;ANS%)<br/>    IF ANS% THEN PRINT(\"is num\") ELSE PRINT(\"not num\")<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 7, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> get.e<br/>\u00a0<br/><span class=\"kw1\">function</span> is_numeric<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> val<br/>    val <span class=\"sy1\">=</span> value<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> val<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">=</span>GET_SUCCESS <span class=\"kw1\">and</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>val<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> is_numeric a <span class=\"sy0\">=</span> <span class=\"kw3\">fst</span> <span class=\"br0\">(</span>System.<span class=\"me1\">Double</span>.<span class=\"me1\">TryParse</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">: numeric? ( string --\u00a0? ) string&gt;number &gt;boolean\u00a0;</pre>"}, {"lang": "Fantom", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  // function to see if str contains a number of any of built-in types<br/>  static Bool readNum (Str str)<br/>  {<br/>    int\u00a0:= Int.fromStr (str, 10, false)  // use base 10<br/>    if (int\u00a0!= null) return true<br/>    float\u00a0:= Float.fromStr (str, false)<br/>    if (float\u00a0!= null) return true<br/>    decimal\u00a0:= Decimal.fromStr (str, false)<br/>    if (decimal\u00a0!= null) return true<br/>\u00a0<br/>    return false<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    echo (\"For '2': \" + readNum (\"2\"))<br/>    echo (\"For '-2': \" + readNum (\"-2\"))<br/>    echo (\"For '2.5': \" + readNum (\"2.5\"))<br/>    echo (\"For '2a5': \" + readNum (\"2a5\"))<br/>    echo (\"For '-2.1e5': \" + readNum (\"-2.1e5\"))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 22, "block": "<pre class=\"text highlighted_source\">: is-numeric ( addr len -- )<br/>  2dup snumber?\u00a0?dup if      \\ not standard, but &gt;number is more cumbersome to use<br/>   0&lt; if<br/>     -rot type .\"  as integer = \" .<br/>   else<br/>     2swap type .\"  as double = \" &lt;# #s #&gt; type<br/>   then<br/>  else 2dup &gt;float if<br/>    type .\"  as float = \" f.<br/>  else<br/>    type .\"  isn't numeric in base \" base @ dec.<br/>  then then\u00a0;<br/>\u00a0<br/>s\" 1234\" is-numeric    \\ 1234 as integer = 1234<br/>s\" 1234.\" is-numeric    \\ 1234. as double = 1234<br/>s\" 1234e\" is-numeric    \\ 1234e as float = 1234.<br/>s\" $1234\" is-numeric    \\ $1234 as integer = 4660  ( hex literal )<br/>s\"\u00a0%1010\" is-numeric    \\\u00a0%1010 as integer = 10  ( binary literal )<br/>s\" beef\" is-numeric    \\ beef isn't numeric in base 10<br/>hex<br/>s\" beef\" is-numeric    \\ beef as integer = BEEF<br/>s\" &amp;1234\" is-numeric    \\ &amp;1234 as integer = 4D2 ( decimal literal )</pre>"}, {"lang": "Fortran", "loc": 9, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">FUNCTION</span> is_numeric<span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">string</span><br/>  <span class=\"kw3\">LOGICAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">is_numeric</span><br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">e</span><br/>  READ<span class=\"br0\">(</span>string,<span class=\"sy0\">*</span>,<span class=\"kw1\">IOSTAT</span><span class=\"sy0\">=</span>e<span class=\"br0\">)</span> x<br/>  is_numeric <span class=\"sy0\">=</span> e <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> is_numeric</pre>"}, {"lang": "FreeBASIC", "loc": 95, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> symbols<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">48</span> <span class=\"kw1\">to</span> <span class=\"nu0\">57</span><br/>  symbols<span class=\"br0\">(</span>i - <span class=\"nu0\">48</span><span class=\"br0\">)</span> = i<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">97</span> <span class=\"kw1\">to</span> <span class=\"nu0\">102</span><br/>  symbols<span class=\"br0\">(</span>i - <span class=\"nu0\">87</span><span class=\"br0\">)</span> = i<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> plus  <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> = <span class=\"nu0\">43</span><br/><span class=\"kw1\">Const</span> minus <span class=\"kw1\">As</span> <span class=\"kw1\">Ubyte</span> = <span class=\"nu0\">45</span><br/><span class=\"kw1\">Const</span> dot   <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> = <span class=\"nu0\">46</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isNumeric<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, base_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> OrElse s = <span class=\"st0\">\".\"</span>  OrElse s = <span class=\"st0\">\"+\"</span> OrElse s = <span class=\"st0\">\"-\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Err</span> = <span class=\"nu0\">0</span> <br/>\u00a0<br/>  <span class=\"kw1\">If</span> base_ &lt; <span class=\"nu0\">2</span> OrElse base_ &gt; <span class=\"nu0\">16</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Err</span> = <span class=\"nu0\">1000</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> t <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = plus<span class=\"br0\">)</span> OrElse <span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = minus<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>     t = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>t, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>t, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"st0\">\"&amp;h\"</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">If</span> base_ &lt;&gt; <span class=\"nu0\">16</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    t = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>t, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>t, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"st0\">\"&amp;o\"</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">If</span> base_ &lt;&gt; <span class=\"nu0\">8</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    t = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>t, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>t, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"st0\">\"&amp;b\"</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">If</span> base_ &lt;&gt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    t = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>t, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Boolean isValid, hasDot = <span class=\"kw1\">false</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    isValid = <span class=\"kw1\">False</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> base_ - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = symbols<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        isValid = <span class=\"kw1\">True</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">If</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = dot <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">CInt</span><span class=\"br0\">(</span><span class=\"kw1\">Not</span> hasDot<span class=\"br0\">)</span> AndAlso <span class=\"br0\">(</span>base_ = <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>          hasDot = <span class=\"kw1\">True</span> <br/>          IsValid = <span class=\"kw1\">True</span><br/>          <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span> <span class=\"co1\">' either more than one dot or not base 10</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isValid <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span> <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>s = <span class=\"st0\">\"1234.056789\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 10) =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>s = <span class=\"st0\">\"1234.56\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 7)  =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">7</span><span class=\"br0\">)</span> <br/>s = <span class=\"st0\">\"021101\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 2)  =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <br/>s = <span class=\"st0\">\"Dog\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 16) =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">16</span><span class=\"br0\">)</span>  <br/>s = <span class=\"st0\">\"Bad125\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 16) =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">16</span><span class=\"br0\">)</span>  <br/>s = <span class=\"st0\">\"-0177\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 8)  =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>s = <span class=\"st0\">\"+123abcd.ef\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 16) =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>s = <span class=\"st0\">\"54321\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 6)  =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>s = <span class=\"st0\">\"123xyz\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 10) =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>s = <span class=\"st0\">\"xyz\"</span><br/><span class=\"kw1\">Print</span> s, <span class=\"st0\">\" (base 10) =&gt; \"</span>; isNumeric<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 9, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sAnswer, sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>sString <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/trim\"><span class=\"kw2\">Trim</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=inputbox+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter as string\"</span>, <span class=\"st0\">\"String or Numeric\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/isnumber\"><span class=\"kw2\">IsNumber</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sAnswer <span class=\"sy0\">=</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">&amp;</span> sString <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is numeric\"</span> <a href=\"http://gambasdoc.org/help/lang/else\"><span class=\"kw1\">Else</span></a> sAnswer <span class=\"sy0\">=</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">&amp;</span> sString <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"' is a string\"</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sAnswer<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 6, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">import</span> <span class=\"st0\">\"strconv\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> IsNumeric<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    _<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseFloat<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 9, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isNumeric <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> formatter <span class=\"sy0\">=</span> java.<span class=\"me1\">text</span>.<a href=\"http://www.google.de/search?as_q=NumberFormat&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">NumberFormat</span></a>.<span class=\"me1\">instance</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> pos <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> java.<span class=\"me1\">text</span>.<a href=\"http://www.google.de/search?as_q=ParsePosition&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">ParsePosition</span></a><br/>    formatter.<span class=\"me1\">parse</span><span class=\"br0\">(</span>it, pos<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// if parse position index has moved to end of string</span><br/>    <span class=\"co1\">// them the whole string was numeric</span><br/>    pos.<span class=\"me1\">index</span> <span class=\"sy0\">==</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\">isInteger s <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reads\"><span class=\"kw3\">reads</span></a> s <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> True<br/>  <span class=\"sy0\">_</span>         <span class=\"sy0\">-&gt;</span> False<br/>\u00a0<br/>isDouble s <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reads\"><span class=\"kw3\">reads</span></a> s <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> True<br/>  <span class=\"sy0\">_</span>         <span class=\"sy0\">-&gt;</span> False<br/>\u00a0<br/>isNumeric <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isNumeric s <span class=\"sy0\">=</span> isInteger s <span class=\"sy0\">||</span> isDouble s</pre>"}, {"lang": "Haxe", "loc": 13, "block": "<pre class=\"actionscript highlighted_source\">\u00a0<br/><span class=\"kw3\">static</span> <span class=\"kw2\">function</span> isNumeric<span class=\"br0\">(</span>n:<span class=\"kw3\">String</span><span class=\"br0\">)</span>:Bool<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Std.<span class=\"kw3\">parseInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">!</span>= <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"co1\">//Std.parseInt converts a string to an int</span><br/>        <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span>; <span class=\"co1\">//as long as it results in an integer, the function will return true</span><br/>\t<span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span>;<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "HicEst", "loc": 27, "block": "<pre class=\"hicest highlighted_source\">                              <span class=\"co1\">!    = bin + 2*int + 4*flt + 8*oct +16*hex + 32*sci</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"1001\"</span><span class=\"br0\">)</span>          <span class=\"co1\">! 27 =  1       1       0       1       1        0</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"123\"</span><span class=\"br0\">)</span>           <span class=\"co1\">! 26 =  0       1       0       1       1        0</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"1E78\"</span><span class=\"br0\">)</span>          <span class=\"co1\">! 48 =  0       0       0       0       1        1</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"-0.123\"</span><span class=\"br0\">)</span>        <span class=\"co1\">!  4 =  0       0       1       0       0        1</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"-123.456e-78\"</span><span class=\"br0\">)</span>  <span class=\"co1\">! 32 =  0       0       0       0       0        1</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\" 123\"</span><span class=\"br0\">)</span>          <span class=\"co1\">!  0: leading blank</span><br/>   isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"-123.456f-78\"</span><span class=\"br0\">)</span>  <span class=\"co1\">!  0: illegal character f</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isNumeric<span class=\"br0\">(</span>string<span class=\"br0\">)</span>    <span class=\"co1\">! true ( &gt; 0 ), no leading/trailing blanks</span><br/>   <span class=\"kw1\">CHARACTER</span> string<br/>   b <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">\"[01]+\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">128</span><span class=\"sy1\">,</span> Lbin<span class=\"br0\">)</span>                <span class=\"co1\">! Lbin returns length found</span><br/>   i <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">\"-?\\d+\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">128</span><span class=\"sy1\">,</span> Lint<span class=\"br0\">)</span>                <span class=\"co1\">! regular expression: 128</span><br/>   f <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">\"-?\\d+\\.\\d*\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">128</span><span class=\"sy1\">,</span> Lflt<span class=\"br0\">)</span><br/>   o <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">\"[0-7]+\"</span><span class=\"sy1\">,</span>    <span class=\"nu0\">128</span><span class=\"sy1\">,</span> Loct<span class=\"br0\">)</span><br/>   h <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">\"[0-9A-F]+\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">128</span><span class=\"sy1\">,</span> Lhex<span class=\"br0\">)</span>            <span class=\"co1\">! case sensitive: 1+128</span><br/>   s <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">\"-?\\d+\\.*\\d*E[+-]*\\d*\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">128</span><span class=\"sy1\">,</span> Lsci<span class=\"br0\">)</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>anywhere<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>     <span class=\"co1\">! 0 (false) by default</span><br/>     isNumeric <span class=\"sy1\">=</span> <span class=\"br0\">(</span> b <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"br0\">(</span> i <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">4</span><span class=\"sy1\">*</span><span class=\"br0\">(</span> f <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">8</span><span class=\"sy1\">*</span><span class=\"br0\">(</span> o <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">16</span><span class=\"sy1\">*</span><span class=\"br0\">(</span> h <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">32</span><span class=\"sy1\">*</span><span class=\"br0\">(</span> s <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">ELSEIF</span><span class=\"br0\">(</span>boolean<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>  <span class=\"co1\">! 0 (false) by default</span><br/>     isNumeric <span class=\"sy1\">=</span> <span class=\"br0\">(</span> b <span class=\"sy1\">+</span> i <span class=\"sy1\">+</span> f <span class=\"sy1\">+</span> o <span class=\"sy1\">+</span> h <span class=\"sy1\">+</span> s <span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"co1\">! this would return 0 or 1</span><br/>   <span class=\"kw1\">ELSE</span><br/>     L <span class=\"sy1\">=</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>     isNumeric <span class=\"sy1\">=</span> <span class=\"br0\">(</span>Lbin<span class=\"sy1\">==</span>L<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>Lint<span class=\"sy1\">==</span>L<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">4</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>Lflt<span class=\"sy1\">==</span>L<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">8</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>Loct<span class=\"sy1\">==</span>L<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">16</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>Lhex<span class=\"sy1\">==</span>L<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">32</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>Lsci<span class=\"sy1\">==</span>L<span class=\"br0\">)</span><br/>   <span class=\"kw1\">ENDIF</span><br/> <span class=\"kw1\">END</span></pre>"}, {"lang": "i", "loc": 16, "block": "<pre class=\"text highlighted_source\">concept numeric(n) {<br/>\tnumber(n)<br/>\terrors {<br/>\t\tprint(n, \"  is not numeric!\")<br/>\t\treturn<br/>\t}<br/>\tprint(n, \"  is numeric\u00a0:)\")<br/>}<br/>\u00a0<br/>software {<br/>\tnumeric(\"1200\")<br/>\tnumeric(\"3.14\")<br/>\tnumeric(\"3/4\")<br/>\tnumeric(\"abcdefg\")<br/>\tnumeric(\"1234test\")<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw1\">if</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" is numeric.\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" is not numeric\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 6, "block": "<pre class=\"idl highlighted_source\">function isnumeric,input<br/>  on_ioerror, false<br/>  test <span class=\"sy0\">=</span> <span class=\"kw4\">double</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>  return, <span class=\"nu0\">1</span><br/>  false<span class=\"sy0\">:</span> return, <span class=\"nu0\">0</span><br/>end</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">isNumeric=: <span class=\"nu0\">_</span> ~: <span class=\"nu0\">_</span> \". ]<br/>isNumericScalar=: <span class=\"nu0\">1</span> -: isNumeric<br/>TXT=: ,&amp;<span class=\"st_h\">' a scalar numeric value.'</span> &amp;.&gt; <span class=\"st_h\">' is not'</span>;<span class=\"st_h\">' represents'</span><br/>sayIsNumericScalar=: , TXT {::~ isNumericScalar</pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isNumeric<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumberformatexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NumberFormatException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// s is not numeric</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> isNumeric<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>isNaN<span class=\"br0\">(</span>parseFloat<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isFinite<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">var</span> value <span class=\"sy0\">=</span> <span class=\"st0\">\"123.45e7\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// Assign string literal to value</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isNumeric<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// value is a number</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//Or, in web browser in address field:</span><br/><span class=\"co1\">//  javascript:function isNumeric(n) {return\u00a0!isNaN(parseFloat(n)) &amp;&amp; isFinite(n);}; value=\"123.45e4\"; if(isNumeric(value)) {alert('numeric')} else {alert('non-numeric')}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">try tonumber catch false</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">isnumeric(s::AbstractString) = parse(s) isa Number<br/>\u00a0<br/>tests = [\"1\", \"-121\", \"one\", \"pi\", \"1 + 1\", \"NaN\", \"1234567890123456789\", \"1234567890123456789123456789\",<br/>        \"1234567890123456789123456789.0\", \"1.3\", \"1.4e10\", \"Inf\", \"1//2\", \"1.0 + 1.0im\"]<br/>\u00a0<br/>for t in tests<br/>    fl = isnumeric(t)\u00a0? \"is\"\u00a0: \"is not\"<br/>    @printf(\"%35s\u00a0%s a direct numeric literal.\\n\", t, fl)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>fun isNumeric<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        input.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a><span class=\"br0\">(</span>e<span class=\"sy0\">:</span> NumberFormatException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputs <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"152\"</span>, <span class=\"st0\">\"-3.1415926\"</span>, <span class=\"st0\">\"Foo123\"</span>, <span class=\"st0\">\"-0\"</span>, <span class=\"st0\">\"456bar\"</span>, <span class=\"st0\">\"1.0E10\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>input in inputs<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"$input is ${if (isNumeric(input)) \"</span>numeric<span class=\"st0\">\" else \"</span>not numeric<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 2, "block": "<pre class=\"text highlighted_source\">local(str='12345')<br/>string_isNumeric(#str) // true</pre>"}, {"lang": "Lasso", "loc": 2, "block": "<pre class=\"text highlighted_source\">local(str='12345')<br/>string_isNumeric(#str) // true</pre>"}, {"lang": "Liberty BASIC", "loc": 58, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">DATA</span> <span class=\"st0\">\"PI\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0123\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-0123\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"12.30\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-12.30\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"123!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><br/><span class=\"kw1\">DATA</span> <span class=\"st0\">\"0.0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\".123\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-.123\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"12E3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"12E-3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"12+3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"end\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">while</span> n$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"end\"</span><br/>    <span class=\"kw1\">read</span> n$<br/>    <span class=\"kw1\">print</span> n$<span class=\"sy0\">,</span> IsNumber<span class=\"br0\">(</span>n$<span class=\"br0\">)</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsNumber<span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">on</span> <span class=\"kw1\">error</span> <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>NotNumber<span class=\"br0\">]</span><br/>    string$ <span class=\"sy0\">=</span> <span class=\"kw2\">trim$</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>    <span class=\"co1\">'check for float overflow</span><br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">'assume it is number and try to prove wrong</span><br/>    IsNumber <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9\"</span><br/>                HasNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"co1\">'to check if there are any digits</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"e\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><br/>                <span class=\"co1\">'\"e\" must not occur more than once</span><br/>                <span class=\"co1\">'must not occur before digits</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> HasE <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> HasNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                    IsNumber <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                    <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>                HasE <span class=\"sy0\">=</span> i <span class=\"co1\">'store position of \"e\"</span><br/>                HasNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">'needs numbers after \"e\"</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"+\"</span><br/>                <span class=\"co1\">'must be either first character or immediately after \"e\"</span><br/>                <span class=\"co1\">'(HasE = 0 if no occurrences yet)</span><br/>                <span class=\"kw1\">if</span> HasE <span class=\"sy0\">&lt;&gt;</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>                    IsNumber <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                    <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\".\"</span><br/>                <span class=\"co1\">'must not have previous points and must not come after \"e\"</span><br/>                <span class=\"kw1\">if</span> HasE <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> HasPoint <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                    IsNumber <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                    <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>                HasPoint <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">case</span> <span class=\"kw1\">else</span><br/>                <span class=\"co1\">'no other characters allowed</span><br/>                IsNumber <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>    <span class=\"kw1\">next</span> i<br/>    <span class=\"co1\">'must have digits</span><br/>    <span class=\"kw1\">if</span> HasNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> IsNumber <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">[</span>NotNumber<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lisaac", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"123457\".is_integer.println;<br/>// write TRUE on stdin<br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">show number? \"-1.23   \u00a0; true</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">if</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>   <span class=\"co1\">--it's a number</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\\\ version 2<br/>Module Checkit {<br/>      function global isNumber(a$, de$=\".\") {<br/>            =false=true  ' return boolean<br/>            if de$=\"\" then de$=str$(.1,\".\")  ' get current decimal point character<br/>            a$=trim$(ucase$(a$))<br/>            m=len(a$)<br/>            if m=0 then exit<br/>            c$=filter$(a$,\"0123456789\")<br/>            if c$ = \"\" then {<br/>                  =true<br/>            } else.if m&gt;1 then {<br/>                  \\ may have -+ and ,      <br/>                  if m=2 then {<br/>                        if not c$~\"[-+\\\"+de$+\"]\" then break<br/>                  } else {<br/>                        if left$(c$,1 ) ~\"[+-]\" then c$=mid$(c$, 2)<br/>                        if not (c$=de$ or c$=de$+\"E\" or c$ ~ de$+\"E[+-]\") then break<br/>                        if c$ ~ de$+\"E[+-]\" then if not (instr(a$,\"E+\")&gt;0 or instr(a$,\"E-\")&gt;0) then break<br/>                  }<br/>                 if de$&lt;&gt;\".\" then  a$=replace$(de$, \".\", a$, 1,1)<br/>                 try {inline \"a=\"+a$+\"==\"+a$}<br/>                 if valid(a) then =a = true=true  ' return boolean<br/>             }    <br/>      }<br/>      Print isNumber(\"+1\"), isnumber(\"-1\"), isNumber(\"1+\")=false, isnumber(\"1-\")=false<br/>      Print isNumber(\",1\",\",\"), isnumber(\"1,\",\",\"), isNumber(\",0\",\",\"), isnumber(\"0,\", \",\")<br/>      Print isNumber(\".1\"), isnumber(\"1.\"), isNumber(\".0\"), isnumber(\"0.\")<br/>      Print isNumber(\"+.1\"), isnumber(\"-1.\"), isNumber(\".12e+232\"), isnumber(\"0.122e10\")<br/>      Print isNumber(\"+.1a\")=false, isnumber(\"asasa1212\")=false, isNumber(\"1.2e43+23\")=false, isnumber(\"0.122e10\")<br/>      Print isNumber(\"1221.211.1221\")=false, isnumber(\"1221e1212\")=false, isNumber(\"1.2e4323\")=false, isnumber(\"-.122e-10\")<br/>}<br/>Checkit<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 11, "block": "<pre class=\"text highlighted_source\">isNumeric\u00a0:= proc(s)<br/>\ttry<br/>\t\tif type(parse(s), numeric) then<br/>\t\t\tprintf(\"The string is numeric.\"):<br/>\t\telse<br/>\t\t\tprintf(\"The string is not numeric.\"):<br/>\t\tend if:<br/>\tcatch:<br/>\t\tprintf(\"The string is not numeric.\"):<br/>\tend try:<br/>end proc:</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">NumberQ[ToExpression[\"02553352000242\"]]</pre>"}, {"lang": "MATLAB", "loc": 19, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>    <span class=\"co1\">% copy from Octave version on this page</span><br/>    <span class=\"kw1\">function</span> r = isnum<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isnumeric<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       r = <span class=\"nu0\">1</span>;<br/>     <span class=\"kw1\">else</span><br/>       o = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2num.html\"><span class=\"kw2\">str2num</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>       r =\u00a0!isempty<span class=\"br0\">(</span>o<span class=\"br0\">)</span>;<br/>     endif<br/>   <span class=\"kw1\">end</span> <br/>\u00a0<br/><span class=\"co1\">% tests</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">% 1</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span>\"<span class=\"nu0\">123</span>\"<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">% 1</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span>\"foo123\"<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">% 0</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span>\"123bar\"<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">% 0</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span>\"<span class=\"nu0\">3.1415</span>\"<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">% 1</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">numberp(parse_string(\"170141183460469231731687303715884105727\"));</pre>"}, {"lang": "MAXScript", "loc": 10, "block": "<pre class=\"text highlighted_source\">fn isNumeric str =<br/>(<br/>    try<br/>    (<br/>        (str as integer)\u00a0!= undefined<br/>    )<br/>    catch(false)<br/>)<br/>\u00a0<br/>isNumeric \"123\"</pre>"}, {"lang": "MIPS Assembly", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># $a0 char val<br/># $a1 address pointer<br/># $a2 PERIOD_HIT_FLAG<br/># $a3 HAS_DIGITS_FLAG<br/>\u00a0<br/>.data <br/>\t\t\t### CHANGE THIS STRING TO TEST DIFFERENT ONES... ###<br/>\tstring: .asciiz \"-.1236\"  <br/>\ts_false: .asciiz \"False\"<br/>\ts_true: .asciiz \"True\"<br/>.text<br/>main:<br/>\tset_up: #test for 0th char == 45 or 46 or 48...57<br/>\t\tla $a1,string<br/>\t\tlb $a0,($a1)<br/>\t\tbeq $a0,45,loop # == '-'<br/>\t\tbeq $a0,46,loop # == '.'<br/>\t\tblt $a0,48,exit_false # isn't below the ascii range for chars '0'...'9'<br/>\t\tbgt $a0,57,exit_false # isn't above the ascii range for chars '0'...'9'<br/>\tloop:<br/>\t\taddi $a1,$a1,1<br/>\t\tlb $a0,($a1)<br/>\t\tbeqz $a0,exit_true # test for \\0 null char<br/>\t\tbeq $a0,46,period_test #test for a duplicate period<br/>\t\tblt $a0,48,exit_false  #test for <br/>\t\tbgt $a0,57,exit_false<br/>\t\tla $a3,1 #set the HAS_DIGITS flag. This line is only reached because the<br/>\t\t\t #    tests for period and - both jump back to start. <br/>\t\tj loop<br/>\u00a0<br/>exit_true:<br/>\tbeqz $a3,exit_false<br/>\tla $a0,s_true<br/>\tla $v0,4<br/>\tsyscall<br/>\u00a0<br/>\tli $v0,10<br/>\tsyscall\t<br/>\u00a0<br/>exit_false:<br/>\tla $a0,s_false<br/>\tla $v0,4<br/>\tsyscall<br/>\u00a0<br/>\tli $v0,10<br/>\tsyscall<br/>\u00a0<br/>period_test:<br/>\tbeq $a2,1,exit_false<br/>\tli $a2,1<br/>\tj loop<br/>\u00a0</pre>"}, {"lang": "Mirah", "loc": 125, "block": "<pre class=\"text highlighted_source\">import java.text.NumberFormat<br/>import java.text.ParsePosition<br/>import java.util.Scanner<br/>\u00a0<br/># this first example relies on catching an exception, <br/># which is bad style and poorly performing in Java<br/>def is_numeric?(s:string)<br/>    begin<br/>        Double.parseDouble(s)<br/>        return true<br/>    rescue<br/>        return false<br/>    end<br/>end<br/>\u00a0<br/>puts '123   is numeric' if is_numeric?('123')<br/>puts '-123  is numeric' if is_numeric?('-123')<br/>puts '123.1 is numeric' if is_numeric?('123.1')<br/>\u00a0<br/>puts 'nil   is not numeric' unless is_numeric?(nil)<br/>puts \"''    is not numeric\" unless is_numeric?('')<br/>puts 'abc   is not numeric' unless is_numeric?('abc')<br/>puts '123-  is not numeric' unless is_numeric?('123-')<br/>puts '1.2.3 is not numeric' unless is_numeric?('1.2.3')<br/>\u00a0<br/>\u00a0<br/># check every element of the string<br/>def is_numeric2?(s: string) <br/>    if (s == nil || s.isEmpty()) <br/>        return false <br/>    end <br/>    if (!s.startsWith('-')) <br/>        if s.contains('-')<br/>            return false <br/>        end<br/>    end <br/>\u00a0<br/>    0.upto(s.length()-1) do |x|<br/>        c = s.charAt(x)<br/>        if ((x == 0) &amp;&amp; (c == '-'.charAt(0)))<br/>            # negative number<br/>        elsif (c == '.'.charAt(0))<br/>            if (s.indexOf('.', x) &gt; -1) <br/>                return false # more than one period<br/>            end        <br/>        elsif (!Character.isDigit(c))<br/>            return false<br/>        end<br/>    end <br/>    true<br/>end<br/>\u00a0<br/>\u00a0<br/>puts '123   is numeric' if is_numeric2?('123')<br/>puts '-123  is numeric' if is_numeric2?('-123')<br/>puts '123.1 is numeric' if is_numeric2?('123.1')<br/>\u00a0<br/>puts 'nil   is not numeric' unless is_numeric2?(nil)<br/>puts \"''    is not numeric\" unless is_numeric2?('')<br/>puts 'abc   is not numeric' unless is_numeric2?('abc')<br/>puts '123-  is not numeric' unless is_numeric2?('123-')<br/>puts '1.2.3 is not numeric' unless is_numeric2?('1.2.3')<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/># use a regular  expression <br/>def is_numeric3?(s:string)<br/>  s == nil || s.matches(\"[-+]?\\\\d+(\\\\.\\\\d+)?\")<br/>end<br/>\u00a0<br/>puts '123   is numeric' if is_numeric3?('123')<br/>puts '-123  is numeric' if is_numeric3?('-123')<br/>puts '123.1 is numeric' if is_numeric3?('123.1')<br/>\u00a0<br/>puts 'nil   is not numeric' unless is_numeric3?(nil)<br/>puts \"''    is not numeric\" unless is_numeric3?('')<br/>puts 'abc   is not numeric' unless is_numeric3?('abc')<br/>puts '123-  is not numeric' unless is_numeric3?('123-')<br/>puts '1.2.3 is not numeric' unless is_numeric3?('1.2.3')<br/>\u00a0<br/>\u00a0<br/>#  use the positional parser in the java.text.NumberFormat object <br/># (a more robust solution). If, after parsing, the parse position is at <br/># the end of the string, we can deduce that the entire string was a <br/># valid number.<br/>def is_numeric4?(s:string) <br/>    return false if s == nil    <br/>    formatter = NumberFormat.getInstance()<br/>    pos = ParsePosition.new(0)<br/>    formatter.parse(s, pos)<br/>    s.length() == pos.getIndex()<br/>end<br/>\u00a0<br/>\u00a0<br/>puts '123   is numeric' if is_numeric4?('123')<br/>puts '-123  is numeric' if is_numeric4?('-123')<br/>puts '123.1 is numeric' if is_numeric4?('123.1')<br/>\u00a0<br/>puts 'nil   is not numeric' unless is_numeric4?(nil)<br/>puts \"''    is not numeric\" unless is_numeric4?('')<br/>puts 'abc   is not numeric' unless is_numeric4?('abc')<br/>puts '123-  is not numeric' unless is_numeric4?('123-')<br/>puts '1.2.3 is not numeric' unless is_numeric4?('1.2.3')<br/>\u00a0<br/>\u00a0<br/># use the java.util.Scanner object. Very useful if you have to <br/># scan multiple entries. Scanner also has similar methods for longs, <br/># shorts, bytes, doubles, floats, BigIntegers, and BigDecimals as well <br/># as methods for integral types where you may input a base/radix other than <br/># 10 (10 is the default, which can be changed using the useRadix method).<br/>def is_numeric5?(s:string)<br/>    return false if s == nil<br/>    Scanner sc = Scanner.new(s)<br/>    sc.hasNextDouble()<br/>end<br/>\u00a0<br/>puts '123   is numeric' if is_numeric5?('123')<br/>puts '-123  is numeric' if is_numeric5?('-123')<br/>puts '123.1 is numeric' if is_numeric5?('123.1')<br/>\u00a0<br/>puts 'nil   is not numeric' unless is_numeric5?(nil)<br/>puts \"''    is not numeric\" unless is_numeric5?('')<br/>puts 'abc   is not numeric' unless is_numeric5?('abc')<br/>puts '123-  is not numeric' unless is_numeric5?('123-')<br/>puts '1.2.3 is not numeric' unless is_numeric5?('1.2.3')</pre>"}, {"lang": "mIRC Scripting Language", "loc": 4, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw2\">var</span> <span class=\"re1\">%value</span> = 3<br/><span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"re1\">%value</span> isnum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-s</span> <span class=\"re1\">%value</span> is numeric.<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Modula-3", "loc": 25, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Numeric <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Text;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> isNumeric<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> Text.<span class=\"me1\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">WITH</span> char <span class=\"sy0\">=</span> Text.<span class=\"me1\">GetChar</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">AND</span> char <span class=\"sy0\">=</span> <span class=\"st_h\">'-'</span> <span class=\"kw1\">THEN</span><br/>          <span class=\"kw1\">EXIT</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">IF</span> char &gt;<span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span> <span class=\"kw1\">AND</span> char &lt;<span class=\"sy0\">=</span> <span class=\"st_h\">'9'</span> <span class=\"kw1\">THEN</span><br/>          <span class=\"kw1\">EXIT</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span>;<br/>  <span class=\"kw1\">END</span> isNumeric;      <br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"isNumeric(152) = \"</span> &amp; Fmt.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"152\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"isNumeric(-3.1415926) = \"</span> &amp; Fmt.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"-3.1415926\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"isNumeric(Foo123) = \"</span> &amp; Fmt.<span class=\"me1\">Bool</span><span class=\"br0\">(</span>isNumeric<span class=\"br0\">(</span><span class=\"st0\">\"Foo123\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Numeric.</pre>"}, {"lang": "MUMPS", "loc": 1, "block": "<pre>USER&gt;WRITE +\"1\"\n1\nUSER&gt;WRITE +\"1A\"\n1\nUSER&gt;WRITE +\"A1\"\n0\nUSER&gt;WRITE +\"1E\"\n1\nUSER&gt;WRITE +\"1E2\"\n100\nUSER&gt;WRITE +\"1EA24\"\n1\nUSER&gt;WRITE +\"1E3A\"\n1000\nUSER&gt;WRITE +\"1E-3\"\n.001\n</pre>"}, {"lang": "Nemerle", "loc": 19, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module IsNumeric<br/>{<br/>    IsNumeric( input\u00a0: string)\u00a0: bool<br/>    {<br/>        mutable meh = 0.0;  // I don't want it, not going to use it, why force me to declare it?<br/>        double.TryParse(input, out meh)<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def num = \"-1.2345E6\";<br/>        def not = \"abc45\";<br/>        WriteLine($\"$num is numeric: $(IsNumeric(num))\");<br/>        WriteLine($\"$not is numeric: $(IsNumeric(not))\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 38, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> n_ over getTestData<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">-- could have used n_.datatype('N') directly here...</span><br/>  <span class=\"kw1\">if</span> isNumeric<span class=\"br0\">(</span>n_<span class=\"br0\">)</span> <span class=\"kw3\">then</span> msg = <span class=\"st0\">'numeric'</span><br/>                   <span class=\"kw3\">else</span> msg = <span class=\"st0\">'not numeric'</span><br/>  <span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'\"'</span>n_<span class=\"st0\">'\"'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> msg<br/>  <span class=\"kw3\">end</span> n_<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- Pointless in NetRexx; the DATATYPE built-in-function is more powerful!</span><br/>method isNumeric<span class=\"br0\">(</span>testString<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> testString.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'N'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method getTestData<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">-- Coercing numbers into the Rexx type has the effect of converting them to strings.</span><br/>  <span class=\"co1\">-- NetRexx will still perform arithmetic on Rexx strings if those strings represent numbers.</span><br/>  <span class=\"co1\">-- Notice that whitespace between the sign and the number are ignored even when inside a string constant</span><br/>  testData = <span class=\"br0\">[</span> Rexx -<br/>    <span class=\"st0\">' one and a half'</span>,   <span class=\"nu0\">1</span>,   <span class=\"nu0\">1.5</span>,    1.5e+27, <span class=\"st0\">'   1 '</span>, <span class=\"st0\">'  1.5 '</span>, <span class=\"st0\">'  1.5e+27 '</span>, -<br/>    <span class=\"st0\">'-one and a half'</span>, - <span class=\"nu0\">1</span>, - <span class=\"nu0\">1.5</span>,  - 1.5e-27, <span class=\"st0\">' - 1 '</span>, <span class=\"st0\">'- 1.5 '</span>, <span class=\"st0\">'- 1.5e-27 '</span>, -<br/>    <span class=\"st0\">'+one and a half'</span>, + <span class=\"nu0\">1</span>, + <span class=\"nu0\">1.5</span>,  + 1.5e+27, <span class=\"st0\">' + 1 '</span>, <span class=\"st0\">'+ 1.5 '</span>, <span class=\"st0\">'+ 1.5e+27 '</span>, -<br/>    <span class=\"st0\">'Math Constants'</span>, -<br/>     Math.<span class=\"me0\">PI</span>,  Math.<span class=\"me0\">E</span>, -<br/>    -Math.<span class=\"me0\">PI</span>, -Math.<span class=\"me0\">E</span>, -<br/>    +Math.<span class=\"me0\">PI</span>, +Math.<span class=\"me0\">E</span>, -<br/>    <span class=\"st0\">'Numeric Constants'</span>, -<br/>    Double.<span class=\"me0\">NaN</span>, Double.<span class=\"me0\">POSITIVE_INFINITY</span>, Double.<span class=\"me0\">NEGATIVE_INFINITY</span> -<br/>    <span class=\"br0\">]</span><br/>  <span class=\"kw1\">return</span> testData<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 10, "block": "<pre class=\"text highlighted_source\">import strutils<br/>let s = \"123\"<br/>var f: float<br/>try:<br/>  f = parseFloat s<br/>except EInvalidValue:<br/>  echo \"not numeric\"<br/>\u00a0<br/>if s.contains AllChars - Digits:<br/>  echo \"not a positive integer\"</pre>"}, {"lang": "Objective-C", "loc": 10, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSScanner_Class/\"><span class=\"kw5\">NSScanner</span></a> scannerWithString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"-123.4e5\"</span><span class=\"br0\">]</span> scanFloat<span class=\"sy0\">:</span><span class=\"kw2\">NULL</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\tNSLog<span class=\"br0\">(</span> <span class=\"co3\">@</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>-123.4e5<span class=\"es0\">\\\"</span> is numeric\"</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">else</span><br/>\tNSLog<span class=\"br0\">(</span> <span class=\"co3\">@</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>-123.4e5<span class=\"es0\">\\\"</span> is not numeric\"</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSScanner_Class/\"><span class=\"kw5\">NSScanner</span></a> scannerWithString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"Not a number\"</span><span class=\"br0\">]</span> scanFloat<span class=\"sy0\">:</span><span class=\"kw2\">NULL</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\tNSLog<span class=\"br0\">(</span> <span class=\"co3\">@</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>Not a number<span class=\"es0\">\\\"</span> is numeric\"</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">else</span><br/>\tNSLog<span class=\"br0\">(</span> <span class=\"co3\">@</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>Not a number<span class=\"es0\">\\\"</span> is not numeric\"</span> <span class=\"br0\">)</span>;<br/><span class=\"co2\">// prints: \"-123.4e5\" is numeric</span><br/><span class=\"co2\">// prints: \"Not a number\" is not numeric</span></pre>"}, {"lang": "OCaml", "loc": 9, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_int s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">true</span><br/>  <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"kw1\">let</span> is_float s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_string\"><span class=\"kw3\">float_of_string</span></a> s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">true</span><br/>  <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"kw1\">let</span> is_numeric s <span class=\"sy0\">=</span> is_int s <span class=\"sy0\">||</span> is_float s</pre>"}, {"lang": "Octave", "loc": 15, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> isnum<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/isnumeric.html\"><span class=\"kw5\">isnumeric</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    r <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    o <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/str2num.html\"><span class=\"kw6\">str2num</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    r <span class=\"sy3\">=</span> <span class=\"sy0\">!</span><a href=\"http://octave.sourceforge.net/octave/function/isempty.html\"><span class=\"kw5\">isempty</span></a><span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"co2\">% tests</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co2\">% 1</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span><span class=\"co4\">\"123\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co2\">% 1</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span><span class=\"co4\">\"foo123\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co2\">% 0</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span><span class=\"co4\">\"123bar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co2\">% 0</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>isnum<span class=\"br0\">(</span><span class=\"co4\">\"3.1415\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co2\">% 1</span></pre>"}, {"lang": "Oz", "loc": 3, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsNumeric</span> S<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>isInt S<span class=\"br0\">}</span> <span class=\"kw1\">orelse</span> <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>isFloat S<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">isNumeric<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>t<span class=\"sy0\">=</span><span class=\"kw1\">type</span><span class=\"br0\">(</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  t <span class=\"sy0\">==</span> <span class=\"st0\">\"t_INT\"</span> <span class=\"sy0\">||</span> t <span class=\"sy0\">==</span> <span class=\"st0\">\"T_REAL\"</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 17, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">function</span> IsNumeric<span class=\"br0\">(</span>Value<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> <span class=\"kw1\">const</span> AllowFloat<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  ValueInt<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  ValueFloat<span class=\"sy1\">:</span> Extended<span class=\"sy1\">;</span><br/>  ErrCode<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/><span class=\"co1\">// Check for integer: Val only accepts integers when passed integer param</span><br/>Value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> SysUtils<span class=\"sy1\">.</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>Val<span class=\"br0\">(</span>Value<span class=\"sy1\">,</span> ValueInt<span class=\"sy1\">,</span> ErrCode<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ErrCode <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span>      <span class=\"co1\">// Val sets error code 0 if OK</span><br/><span class=\"kw1\">if</span> <span class=\"kw1\">not</span> Result <span class=\"kw3\">and</span> AllowFloat <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>    <span class=\"co1\">// Check for float: Val accepts floats when passed float param</span><br/>    Val<span class=\"br0\">(</span>Value<span class=\"sy1\">,</span> ValueFloat<span class=\"sy1\">,</span> ErrCode<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ErrCode <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span>    <span class=\"co1\">// Val sets error code 0 if OK</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "PeopleCode", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Built-In Function<br/>Syntax<br/>\u00a0<br/>IsNumber(Value)<br/>Description<br/>\u00a0<br/>Use the IsNumber function to determine if Value contains a valid numeric value. Numeric characters include sign indicators and comma and period decimal points.<br/>To determine if a value is a number and if it's in the user's local format, use the IsUserNumber function.<br/>\u00a0<br/>Parameters<br/>\u00a0<br/>Value<br/>Specify a string you want to search to determine if it is a valid number.<br/>\u00a0<br/>Returns<br/>A Boolean value: True if Value contains a valid numeric value, False otherwise.<br/>\u00a0<br/>Example<br/>\u00a0<br/>&amp;Value = Get Field().Value; <br/>If IsNumber(&amp;Value) Then <br/>   /* do numeric processing */ <br/>Else <br/>   /* do non-numeric processing */ <br/>End-if;<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Scalar<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>looks_like_number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> looks_like_number<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"numeric\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not numeric<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 14, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>number<span class=\"sy0\">-</span>w<span class=\"sy0\">-</span>ws<span class=\"br0\">(</span> Str <span class=\"re0\">$term</span> <span class=\"sy0\">--&gt;</span> Bool <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># treat Falsey strings as numeric</span><br/>    <span class=\"re0\">$term</span><span class=\"sy0\">.</span><span class=\"me1\">Numeric</span> <span class=\"sy0\">!~~</span> Failure<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>number<span class=\"sy0\">-</span>wo<span class=\"sy0\">-</span>ws<span class=\"br0\">(</span> Str <span class=\"re0\">$term</span> <span class=\"sy0\">--&gt;</span> Bool <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># treat Falsey strings as non-numeric</span><br/>    <span class=\"sy0\">?</span><span class=\"br0\">(</span><span class=\"re0\">$term</span> <span class=\"sy0\">~~</span> <span class=\"co2\">/ \\S /</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$term</span><span class=\"sy0\">.</span><span class=\"me1\">Numeric</span> <span class=\"sy0\">!~~</span> Failure<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"               Coerce     Don't coerce\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'    String   whitespace    whitespace'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"%10s \u00a0%8s \u00a0%11s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"&lt;$_&gt;\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>number<span class=\"sy0\">-</span>w<span class=\"sy0\">-</span>ws<span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>number<span class=\"sy0\">-</span>wo<span class=\"sy0\">-</span>ws <span class=\"kw1\">for</span><br/><span class=\"br0\">(</span><span class=\"sy0\">|&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1.2</span> 1<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>3 <span class=\"sy0\">-</span><span class=\"nu0\">6</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> 12e B17 1<span class=\"sy0\">.</span>3e<span class=\"sy0\">+</span>12 1<span class=\"sy0\">.</span>3e12 <span class=\"sy0\">-</span>2<span class=\"sy0\">.</span>6e<span class=\"sy0\">-</span>3 zero<br/>0x 0xA10 0b1001 0o16 0o18 <span class=\"nu0\">2</span><span class=\"sy0\">+</span>5i<span class=\"sy0\">&gt;,</span> <span class=\"st_h\">'1 1 1'</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">Str</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">function isNumber(string s)<br/>    return scanf(s,\"%f\")!={}<br/>end function</pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'123'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/is_numeric\"><span class=\"kw3\">is_numeric</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/trim\"><span class=\"kw3\">trim</span></a><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">: (format \"123\")<br/>-&gt; 123<br/>\u00a0<br/>: (format \"123a45\")<br/>-&gt; NIL<br/>\u00a0<br/>: (format \"-123.45\" 4)<br/>-&gt; 1234500</pre>"}, {"lang": "Pike", "loc": 14, "block": "<pre class=\"pike highlighted_source\">\u00a0<br/>int<span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">)</span> is_number<span class=\"br0\">(</span>string s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    array test <span class=\"sy0\">=</span> array_sscanf<span class=\"br0\">(</span>s, <span class=\"st0\">\"%s%f%s\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sizeof<span class=\"br0\">(</span>test<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> test<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>sizeof<span class=\"br0\">(</span>test<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>sizeof<span class=\"br0\">(</span>test<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> true<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> false<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>string num <span class=\"sy0\">=</span> <span class=\"st0\">\"-1.234\"</span><br/>is_number<span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">-</span>&gt; true<br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>is_numeric: procedure (text) returns (bit (1));<br/>   declare text character (*);<br/>   declare x float;<br/>\u00a0<br/>   on conversion go to done;<br/>\u00a0<br/>   get string(text) edit (x) (E(length(text),0));<br/>   return ('1'b);<br/>\u00a0<br/>done:<br/>   return ('0'b);<br/>end is_numeric;</pre>"}, {"lang": "PL/SQL", "loc": 11, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> IsNumeric<span class=\"br0\">(</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VALUE\"><span class=\"kw2\">VALUE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a> <span class=\"br0\">)</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BOOLEAN\"><span class=\"kw1\">BOOLEAN</span></a><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>  help <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  help <span class=\"sy0\">:=</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TO_NUMBER\"><span class=\"kw2\">TO_NUMBER</span></a><span class=\"br0\">(</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VALUE\"><span class=\"kw2\">VALUE</span></a> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a><span class=\"br0\">(</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TRUE\"><span class=\"kw1\">TRUE</span></a> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=EXCEPTION\"><span class=\"kw1\">EXCEPTION</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OTHERS\"><span class=\"kw1\">OTHERS</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a><span class=\"br0\">(</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FALSE\"><span class=\"kw1\">FALSE</span></a> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> isNumeric <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    try <span class=\"br0\">{</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Out-Null</span><br/>        <span class=\"kw3\">return</span> <span class=\"re0\">$true</span><br/>    <span class=\"br0\">}</span> catch <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"re0\">$false</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 3, "block": "<pre class=\"prolog highlighted_source\">numeric_string<span class=\"br0\">(</span>String<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    atom_string<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"sy4\">,</span> String<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    atom_number<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 54, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> IsNumeric<span class=\"br0\">(</span>InString.s, DecimalCharacter.c <span class=\"sy0\">=</span> '.'<span class=\"br0\">)</span><br/>  #NotNumeric <span class=\"sy0\">=</span> #False<br/>  #IsNumeric <span class=\"sy0\">=</span> #True<br/>\u00a0<br/>  InString <span class=\"sy0\">=</span> <span class=\"kw2\">Trim</span><span class=\"br0\">(</span>InString<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> IsDecimal, CaughtDecimal, CaughtE<br/>  <span class=\"kw1\">Protected</span> IsSignPresent, IsSignAllowed <span class=\"sy0\">=</span> #True, CountNumeric<br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>CurrentChar.Character <span class=\"sy0\">=</span> @InString<br/>\u00a0<br/>  <span class=\"kw1\">While</span> <span class=\"sy0\">*</span>CurrentChar<span class=\"sy0\">\\</span>c<br/>    <span class=\"kw1\">Select</span> <span class=\"sy0\">*</span>CurrentChar<span class=\"sy0\">\\</span>c<br/>      <span class=\"kw1\">Case</span> '<span class=\"nu0\">0</span>' <span class=\"kw1\">To</span> '<span class=\"nu0\">9</span>'<br/>        CountNumeric <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        IsSignAllowed <span class=\"sy0\">=</span> #False<br/>      <span class=\"kw1\">Case</span> DecimalCharacter<br/>        <span class=\"kw1\">If</span> CaughtDecimal <span class=\"kw1\">Or</span> CaughtE <span class=\"kw1\">Or</span> CountNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          <span class=\"kw1\">ProcedureReturn</span> #NotNumeric<br/>        <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>        CountNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        CaughtDecimal <span class=\"sy0\">=</span> #True<br/>        IsDecimal <span class=\"sy0\">=</span> #True<br/>      <span class=\"kw1\">Case</span>  '<span class=\"sy0\">-</span>', '<span class=\"sy0\">+</span>'<br/>        <span class=\"kw1\">If</span> IsSignPresent <span class=\"kw1\">Or</span> <span class=\"kw1\">Not</span> IsSignAllowed: <span class=\"kw1\">ProcedureReturn</span> #NotNumeric: <span class=\"kw1\">EndIf</span> <br/>        IsSignPresent <span class=\"sy0\">=</span> #True<br/>      <span class=\"kw1\">Case</span> 'E', 'e'<br/>        <span class=\"kw1\">If</span> CaughtE <span class=\"kw1\">Or</span> CountNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          <span class=\"kw1\">ProcedureReturn</span> #NotNumeric<br/>        <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>        CaughtE <span class=\"sy0\">=</span> #True<br/>        CountNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        CaughtDecimal <span class=\"sy0\">=</span> #False<br/>        IsSignPresent <span class=\"sy0\">=</span> #False<br/>        IsSignAllowed <span class=\"sy0\">=</span> #True<br/>      <span class=\"kw1\">Default</span><br/>        <span class=\"kw1\">ProcedureReturn</span> #NotNumeric<br/>    <span class=\"kw1\">EndSelect</span><br/>    <span class=\"sy0\">*</span>CurrentChar <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> CountNumeric <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span> #NotNumeric: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #IsNumeric<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'+3183.31151E+321' = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>IsNumeric<span class=\"br0\">(</span><span class=\"st0\">\"+3183.31151E+321\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'-123456789' = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>IsNumeric<span class=\"br0\">(</span><span class=\"st0\">\"-123456789\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'123.45.6789+' = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>IsNumeric<span class=\"br0\">(</span><span class=\"st0\">\"123.45.6789+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"'-e' = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>IsNumeric<span class=\"br0\">(</span><span class=\"st0\">\"-e\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> is_numeric<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw2\">float</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>    <span class=\"kw1\">except</span> <span class=\"br0\">(</span><span class=\"kw2\">ValueError</span><span class=\"sy0\">,</span> <span class=\"kw2\">TypeError</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>is_numeric<span class=\"br0\">(</span><span class=\"st0\">'123.0'</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt; strings &lt;- c(\"152\", \"-3.1415926\", \"Foo123\")<br/>&gt; suppressWarnings(!is.na(as.numeric(strings)))<br/>[1]  TRUE  TRUE FALSE<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 50, "block": "<pre class=\"text highlighted_source\">isnumeric <br/>$Typecheck on<br/>\u00a0<br/>Defint FALSE, TRUE<br/>\u00a0<br/>FALSE = 0<br/>TRUE = NOT FALSE<br/>\u00a0<br/>Function isNumeric(s as string, optchar as string) as integer<br/>    If len(s) = 0 then<br/>        Result = FALSE<br/>        Exit Function<br/>    End If<br/>    if instr(s,\"+\") &gt; 1 then<br/>        Result = FALSE<br/>        exit function<br/>    end if    <br/>    if instr(s,\"-\") &gt; 1 then<br/>        Result = FALSE<br/>        exit function<br/>    end if              <br/>    Defint i, ndex = 0    <br/>    For i = 1 to len(s)<br/>        select case asc(mid$(s,i,1))<br/>        case 43   '+<br/>        case 45   '- <br/>        case 46 '.<br/>            if ndex = 1 then<br/>                Result = FALSE<br/>                Exit function<br/>            end if<br/>            ndex = 1<br/>        case 48 to 57  '0 to 9<br/>        case else<br/>            if instr(optchar,(mid$(s,i,1))) = 0 then <br/>                Result = FALSE<br/>                exit function<br/>            end if<br/>        end select<br/>    next<br/>    Result = TRUE<br/>End Function  <br/>\u00a0<br/>'============================================================<br/>'Begin<br/>'============================================================<br/>\u00a0<br/>showmessage (str$(isNumeric(\"-152.34\",\"\")))<br/>end<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 35, "block": "<pre class=\"rebol highlighted_source\">\u00a0<br/><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Is Numeric?\"<br/>\tURL: http://rosettacode.org/wiki/IsNumeric<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Built-in.</span><br/>\u00a0<br/>numeric?: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">not</span> <span class=\"kw3\">error?</span> <span class=\"kw2\">try</span> <span class=\"br0\">[</span><span class=\"kw3\">to-decimal</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Parse dialect for numbers.</span><br/>\u00a0<br/>sign:   <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">]</span><br/>digit:  <span class=\"kw3\">charset</span> <span class=\"st0\">\"0123456789\"</span><br/>int:    <span class=\"br0\">[</span>some digit<span class=\"br0\">]</span><br/>float:  <span class=\"br0\">[</span>int <span class=\"st0\">\".\"</span> int<span class=\"br0\">]</span><br/>number: <span class=\"br0\">[</span><br/>\tsign float <span class=\"br0\">[</span><span class=\"st0\">\"e\"</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"E\"</span><span class=\"br0\">]</span> sign int <span class=\"sy0\">|</span><br/>\tsign int <span class=\"br0\">[</span><span class=\"st0\">\"e\"</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"E\"</span><span class=\"br0\">]</span> sign int <span class=\"sy0\">|</span><br/>\tsign float <span class=\"sy0\">|</span><br/>\tsign int <br/><span class=\"br0\">]</span><br/>\u00a0<br/>pnumeric?: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">parse</span> x number<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Test cases.</span><br/>\u00a0<br/>cases: <span class=\"kw3\">parse</span> <span class=\"br0\">{</span><br/>   <span class=\"nu0\">10</span> -<span class=\"nu0\">99</span> <br/>   <span class=\"nu0\">10.43</span> -<span class=\"nu0\">12.04</span> <br/>   1e99 1.0e10 -10e3 -9.12e7 2e-4 -3.4E-5<br/>   3phase  Garkenhammer  e  n3v3r  phase3<br/><span class=\"br0\">}</span> none<br/><span class=\"kw2\">foreach</span> x cases <span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"br0\">[</span>x  numeric? x  pnumeric? x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"123\" isNumber?</pre>"}, {"lang": "REXX", "loc": 48, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program to determine if a string is numeric. */</span><br/>yyy=<span class=\"st0\">' -123.78'</span>               <span class=\"coMULTI\">/*or some such.*/</span><br/>\u00a0<br/>                             <span class=\"coMULTI\">/*strings below are all numeric (REXX).*/</span><br/>zzz=<span class=\"st0\">'  -123.78 '</span><br/>zzz=<span class=\"st0\">'-123.78'</span><br/>zzz=<span class=\"st0\">'2'</span><br/>zzz=<span class=\"st0\">\"2\"</span><br/>zzz=<span class=\"nu0\">2</span><br/>zzz=<span class=\"st0\">'000000000004'</span><br/>zzz=<span class=\"st0\">'+5'</span><br/>zzz=<span class=\"st0\">'  +6  '</span><br/>zzz=<span class=\"st0\">'  +  7  '</span><br/>zzz=<span class=\"st0\">'  -  8  '</span><br/>zzz=<span class=\"st0\">'  -  .9 '</span><br/>zzz=<span class=\"st0\">'-  19.'</span><br/>zzz=<span class=\"st0\">'.7'</span><br/>zzz=<span class=\"st0\">'2e3'</span><br/>zzz=47e567<br/>zzz=<span class=\"st0\">'2e-3'</span><br/>zzz=<span class=\"st0\">'1.2e1'</span><br/>zzz=<span class=\"st0\">'  .2E6'</span><br/>zzz=<span class=\"st0\">'  2.e5 '</span><br/>zzz=<span class=\"st0\">'       +1.2E0002  '</span><br/>zzz=<span class=\"st0\">'       +1.2e+002  '</span><br/>zzz=<span class=\"st0\">' +0000001.200e+002  '</span><br/>zzz=<span class=\"st0\">'  -  000001.200e+002  '</span><br/>zzz=<span class=\"st0\">'  -  000008.201e-00000000000000002  '</span><br/>ifx=i<br/>\u00a0<br/><span class=\"coMULTI\">/*Note:  some REXX interpreters allow use of tab chars as blanks.  */</span><br/>\u00a0<br/>                             <span class=\"coMULTI\">/*all statements below are equivalent.*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy,<span class=\"st0\">'n'</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span> \u00ac<span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span> \u00ac<span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy,<span class=\"st0\">'numeric'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span> \u00ac<span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy,<span class=\"st0\">'nim.'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span>  <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"st0\">'NUM'</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span>  <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span><span class=\"sy0\">/</span>==<span class=\"st0\">'NUM'</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span>  <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span>\u00ac==<span class=\"st0\">'NUM'</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/><span class=\"kw1\">if</span>  <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span>\u00ac= <span class=\"st0\">'NUM'</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'oops, not numeric:'</span> yyy<br/>\u00a0<br/><span class=\"coMULTI\">/*note: REXX only looks at the first char for DATATYPE's  2nd arg. */</span><br/>\u00a0<br/><span class=\"coMULTI\">/*note: some REXX interpreters don't support the \u00ac (not) character.*/</span><br/><span class=\"coMULTI\">/*note:   \"    \"       \"         \"      \"    the /  as  negation.  */</span></pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see isdigit(\"0123456789\") + nl +        # print 1<br/>    isdigit(\"0123a\")                    # print 0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> is_numeric?<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Float</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">rescue</span><br/>    <span class=\"kw2\">false</span> <span class=\"co1\"># not numeric</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw2\">true</span> <span class=\"co1\"># numeric</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\">print isNumeric(\"123\") <br/>print isNumeric(\"1ab\")<br/>\u00a0<br/>' ------------------------<br/>' Numeric Check<br/>' 0 = bad<br/>' 1 = good<br/>' ------------------------<br/>FUNCTION isNumeric(f$)<br/>isNumeric = 1<br/>f$\t= trim$(f$)<br/>if left$(f$,1) = \"-\" or left$(f$,1) = \"+\" then f$ = mid$(f$,2)<br/>for i = 1 to len(f$)<br/>        d$ = mid$(f$,i,1)<br/>\tif d$ = \",\" then goto [nxtDigit]<br/>\tif d$ = \".\" then<br/>                if dot$ = \".\" then isNumeric = 0<br/>\t\tdot$\t= \".\"<br/>\t\tgoto [nxtDigit]<br/>\tend if<br/>       if (d$ &lt; \"0\") or (d$ &gt; \"9\") then isNumeric = 0\t<br/>[nxtDigit]<br/>next i<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 4, "block": "<pre class=\"text highlighted_source\">// This function is not limited to just numeric types but rather anything that implements the FromStr trait.<br/>fn parsable&lt;T: FromStr&gt;(s: &amp;str) -&gt; bool {<br/>    s.parse::&lt;T&gt;().is_ok()<br/>}</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isNumeric<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> input.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">isDigit</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>numeric? <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre class=\"text highlighted_source\">(define (string-numeric? s) (number? (string-&gt;number s)))</pre>"}, {"lang": "Seed7", "loc": 12, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"scanstri.s7i\";<br/>\u00a0<br/>const func boolean: isNumeric (in var string: stri) is func<br/>  result<br/>    var boolean: isNumeric is FALSE;<br/>  local<br/>    var string: numberStri is \"\";<br/>  begin<br/>    numberStri\u00a0:= getNumber(stri);<br/>    isNumeric\u00a0:= stri = \"\";<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"st0\">\"0.1E-5\"</span>.<span class=\"me1\">looks_like_number</span>;       <span class=\"co1\">#=&gt; true</span></pre>"}, {"lang": "Simula", "loc": 75, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    BOOLEAN PROCEDURE ISNUMERIC(W); TEXT W;<br/>    BEGIN<br/>        BOOLEAN PROCEDURE MORE;<br/>            MORE\u00a0:= W.MORE;<br/>        CHARACTER PROCEDURE NEXT;<br/>            NEXT\u00a0:= IF MORE THEN W.GETCHAR ELSE CHAR(0);<br/>        CHARACTER PROCEDURE LAST;<br/>            LAST\u00a0:= IF W.LENGTH = 0<br/>                    THEN CHAR(0)<br/>                    ELSE W.SUB(W.LENGTH,1).GETCHAR;<br/>        CHARACTER CH;<br/>        W.SETPOS(1);<br/>        IF MORE THEN<br/>        BEGIN<br/>            CH\u00a0:= NEXT;<br/>            IF CH = '-' OR CH = '+' THEN CH\u00a0:= NEXT;<br/>            WHILE DIGIT(CH) DO CH\u00a0:= NEXT;<br/>            IF CH = '.' THEN<br/>            BEGIN<br/>                CH\u00a0:= NEXT;<br/>                IF NOT DIGIT(CH) THEN GOTO L;<br/>                WHILE DIGIT(CH) DO CH\u00a0:= NEXT;<br/>            END;<br/>            IF CH = '&amp;' THEN<br/>            BEGIN<br/>                CH\u00a0:= NEXT;<br/>                IF CH = '-' OR CH = '+' THEN CH\u00a0:= NEXT;<br/>                WHILE DIGIT(CH) DO CH\u00a0:= NEXT;<br/>            END;<br/>        END;<br/>    L:  ISNUMERIC\u00a0:= (W.LENGTH &gt; 0) AND THEN (NOT MORE) AND THEN DIGIT(LAST);<br/>    END;<br/>\u00a0<br/>    REAL X;<br/>    TEXT T;<br/>    FOR X\u00a0:= 0, -3.1415, 2.768&amp;+31, 5&amp;10, .5, 5.&amp;10 DO<br/>    BEGIN<br/>        OUTREAL(X, 10, 20);<br/>        OUTIMAGE;<br/>    END;<br/>\u00a0<br/>    OUTIMAGE;<br/>\u00a0<br/>    FOR T\u00a0:- \"0\", \"-3.1415\", \"2.768&amp;+31\", \".5\", \"5&amp;22\" DO<br/>    BEGIN<br/>        OUTTEXT(IF ISNUMERIC(T) THEN \"    NUMERIC \" ELSE \"NOT NUMERIC \");<br/>        OUTCHAR('\"');<br/>        OUTTEXT(T);<br/>        OUTCHAR('\"');<br/>        IF T = \"0\" THEN OUTCHAR(CHAR(9)); OUTCHAR(CHAR(9));<br/>        COMMENT PROBE\u00a0;<br/>        X\u00a0:= T.GETREAL;<br/>        OUTREAL(X, 10, 20);<br/>        OUTIMAGE;<br/>    END;<br/>\u00a0<br/>    OUTIMAGE;<br/>\u00a0<br/>    X\u00a0:= 5.&amp;10;<br/>  \u00a0!X\u00a0:= 5&amp;;<br/>  \u00a0!X\u00a0:= 5.;<br/>    X\u00a0:= .5;<br/>    FOR T\u00a0:- \"\", \"5.\", \"5&amp;\", \"5&amp;+\", \"5.&amp;\", \"5.&amp;-\", \"5.&amp;10\" DO<br/>    BEGIN<br/>        OUTTEXT(IF ISNUMERIC(T) THEN \"    NUMERIC \" ELSE \"NOT NUMERIC \");<br/>        OUTCHAR('\"');<br/>        OUTTEXT(T);<br/>        OUTCHAR('\"');<br/>        OUTIMAGE;<br/>    END;<br/>\u00a0<br/>END<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 20, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">String</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">realIsNumeric</span> <span class=\"br0\">[</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">self</span> first <span class=\"sy0\">=</span> $+<span class=\"br0\">)</span> |<br/>     <span class=\"br0\">(</span><span class=\"kw1\">self</span> first <span class=\"sy0\">=</span> $-<span class=\"br0\">)</span> <br/>        ifTrue: <span class=\"br0\">[</span><br/>           ^ <span class=\"br0\">(</span><span class=\"kw1\">self</span> allButFirst<span class=\"br0\">)</span> isNumeric<br/>        <span class=\"br0\">]</span><br/>        ifFalse: <span class=\"br0\">[</span><br/>           ^ <span class=\"kw1\">self</span> isNumeric<br/>        <span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"st0\">'1234'</span>.            <span class=\"coMULTI\">\"true\"</span><br/>  <span class=\"st0\">'3.14'</span>. <span class=\"st0\">'+3.8111'</span>. <span class=\"coMULTI\">\"true\"</span><br/>  <span class=\"st0\">'+45'</span>.             <span class=\"coMULTI\">\"true\"</span><br/>  <span class=\"st0\">'-3.78'</span>.           <span class=\"coMULTI\">\"true\"</span><br/>  <span class=\"st0\">'-3.78.23'</span>. <span class=\"coMULTI\">\"false\"</span><br/>  <span class=\"st0\">'123e3'</span>     <span class=\"coMULTI\">\"false: the notation is not recognized\"</span><br/><span class=\"br0\">}</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span> | a realIsNumeric printNl <span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 20, "block": "<pre class=\"text highlighted_source\">        define('nchk(str)')\u00a0:(nchk_end)<br/>nchk    convert(str,'real')\u00a0:s(return)f(freturn)<br/>nchk_end        <br/>\u00a0<br/>*       # Wrapper for testing<br/>        define('isnum(str)')\u00a0:(isnum_end)<br/>isnum   isnum = 'F'; isnum = nchk(str) 'T'<br/>        isnum = isnum ': ' str\u00a0:(return)<br/>isnum_end        <br/>\u00a0<br/>*       # Test and display<br/>        output = isnum('123')<br/>        output = isnum('123.0')<br/>        output = isnum('123.')<br/>        output = isnum('-123')<br/>        output = isnum('3.14159')<br/>        output = isnum('1.2.3')<br/>        output = isnum('abc')<br/>        output = isnum('A440')<br/>end</pre>"}, {"lang": "SQL", "loc": 7, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">DECLARE</span> @s <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">SET</span> @s <span class=\"sy0\">=</span> <span class=\"st0\">'1234.56'</span><br/>\u00a0<br/>print isnumeric<span class=\"br0\">(</span>@s<span class=\"br0\">)</span> <span class=\"co1\">--prints 1 if numeric, 0 if not.</span><br/>\u00a0<br/><span class=\"kw1\">IF</span> isnumeric<span class=\"br0\">(</span>@s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">BEGIN</span> print <span class=\"st0\">'Numeric'</span> <span class=\"kw1\">END</span> <br/><span class=\"kw1\">ELSE</span> print <span class=\"st0\">'Non-numeric'</span></pre>"}, {"lang": "Standard ML", "loc": 10, "block": "<pre class=\"text highlighted_source\">(* this function only recognizes integers in decimal format *)<br/>fun isInteger s = case Int.scan StringCvt.DEC Substring.getc (Substring.full s) of<br/>   SOME (_,subs) =&gt; Substring.isEmpty subs<br/> | NONE          =&gt; false<br/>\u00a0<br/>fun isReal s = case Real.scan Substring.getc (Substring.full s) of<br/>   SOME (_,subs) =&gt; Substring.isEmpty subs<br/> | NONE          =&gt; false<br/>\u00a0<br/>fun isNumeric s = isInteger s orelse isReal s</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func isNumeric(a: String) -&gt; Bool {<br/>  return Double(a)\u00a0!= nil<br/>}</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"kw2\">string</span> is double -strict <span class=\"re0\">$varname</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>  ... <span class=\"br0\">}</span></pre>"}, {"lang": "Toka", "loc": 10, "block": "<pre class=\"text highlighted_source\">[ ( string -- flag )<br/>  &gt;number nip ] is isNumeric<br/>\u00a0<br/>( Some tests )<br/>decimal<br/>\" 100\" isNumeric .     ( succeeds, 100 is a valid decimal integer )<br/>\" 100.21\" isNumeric .  ( fails, 100.21 is not an integer)<br/>\" a\" isNumeric .       ( fails, 'a' is not a valid integer in the decimal base )<br/>\" $a\" isNumeric .      ( succeeds, because $ is a valid override prefix )<br/>                       ( denoting that the following character is a hexadecimal number )</pre>"}, {"lang": "UNIX Shell", "loc": 23, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/bash</span><br/>isnum<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%f\"</span> <span class=\"re4\">$1</span> <span class=\"sy0\">&gt;/</span>dev<span class=\"sy0\">/</span>null <span class=\"nu0\">2</span><span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>check<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> isnum <span class=\"re4\">$1</span><br/>  <span class=\"kw1\">then</span><br/>     <span class=\"kw3\">echo</span> <span class=\"st0\">\"$1 is numeric\"</span><br/>  <span class=\"kw1\">else</span><br/>     <span class=\"kw3\">echo</span> <span class=\"st0\">\"$1 is NOT numeric\"</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>check <span class=\"nu0\">2</span><br/>check <span class=\"re5\">-3</span><br/>check +<span class=\"nu0\">45.44</span><br/>check -<span class=\"nu0\">33.332</span><br/>check <span class=\"nu0\">33</span>.aa<br/>check 3.3.3<br/>\u00a0</pre>"}, {"lang": "Ursa", "loc": 8, "block": "<pre class=\"text highlighted_source\">def isnum (string str)<br/>\ttry<br/>\t\tdouble str<br/>\t\treturn true<br/>\tcatch valueerror<br/>\t\treturn false<br/>\tend try<br/>end isnum</pre>"}, {"lang": "VBA", "loc": 16, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> Main()<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"-5.32\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"-51,321 32\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"123.4\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"123,4\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"123;4\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> Is_Numeric(<span class=\"st0\">\"123.4x\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Is_Numeric(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> Separat <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, Other <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    Separat = Application.DecimalSeparator<br/>    Other = IIf(Separat = <span class=\"st0\">\",\"</span>, <span class=\"st0\">\".\"</span>, <span class=\"st0\">\",\"</span>)<br/>    Is_Numeric = IsNumeric(Replace(s, Other, Separat))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 1, "block": "<pre class=\"vb highlighted_source\">IsNumeric(Expr)</pre>"}, {"lang": "Vedit macro language", "loc": 6, "block": "<pre class=\"vedit highlighted_source\"><span class=\"sy0\">:</span>IS_NUMERIC<span class=\"sy0\">:</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>Num_Eval<span class=\"br0\">(</span>SUPPRESS<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> Cur_Char <span class=\"sy0\">!=</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Return</span><span class=\"br0\">(</span>FALSE<span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Return</span><span class=\"br0\">(</span>TRUE<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 5, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Dim</span> Value <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"+123\"</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <a href=\"http://www.google.com/search?q=ISNUMERIC+site:msdn.microsoft.com\"><span class=\"kw7\">IsNumeric</span></a><span class=\"br0\">(</span>Value<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    PRINT <span class=\"st0\">\"It is numeric.\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span></pre>"}, {"lang": "XLISP", "loc": 2, "block": "<pre class=\"text highlighted_source\">(DEFUN NUMERICP (X)<br/>    (IF (STRING-&gt;NUMBER X) T))</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">fcn isNum(text){<br/>   try{ text.toInt(); True }<br/>   catch{ try{ text.toFloat(); True }<br/>          catch{ False }<br/>   }<br/>}</pre>"}]}