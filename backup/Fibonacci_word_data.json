{"task": "Fibonacci_word", "blocks": [{"lang": "Ada", "loc": 57, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Integer_Text_IO</span>, Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>,<br/>  Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Long_Elementary_Functions</span>,<br/>  Ada.<span class=\"me1\">Long_Float_Text_IO</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Integer_Text_IO</span>, Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>,<br/>  Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Long_Elementary_Functions</span>,<br/>  Ada.<span class=\"me1\">Long_Float_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Fibonacci_Words <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Entropy <span class=\"br0\">(</span>S\u00a0: Unbounded_String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>      CF   \u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Character<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      Len  \u00a0: <span class=\"kw3\">constant</span> Natural            \u00a0:= Length <span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/>      H    \u00a0: Long_Float                  \u00a0:= <span class=\"nu0\">0.0</span>;<br/>      Ratio\u00a0: Long_Float;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Len</span> <span class=\"kw1\">loop</span><br/>         CF <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>S, I<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= CF <span class=\"br0\">(</span>Element <span class=\"br0\">(</span>S, I<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">for</span> C <span class=\"kw3\">in</span> Character <span class=\"kw1\">loop</span><br/>         Ratio\u00a0:= Long_Float <span class=\"br0\">(</span>CF <span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">)</span> / Long_Float <span class=\"br0\">(</span>Len<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Ratio /= <span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span><br/>            H\u00a0:= H - Ratio * Log <span class=\"br0\">(</span>Ratio, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> H;<br/>   <span class=\"kw1\">end</span> Entropy;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print_Line <span class=\"br0\">(</span>Word\u00a0: Unbounded_String; Number\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Put <span class=\"br0\">(</span>Number, <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span>Length <span class=\"br0\">(</span>Word<span class=\"br0\">)</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span>Entropy <span class=\"br0\">(</span>Word<span class=\"br0\">)</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Length <span class=\"br0\">(</span>Word<span class=\"br0\">)</span> &lt; <span class=\"nu0\">35</span> <span class=\"kw1\">then</span><br/>         Put <span class=\"br0\">(</span><span class=\"st0\">\"  \"</span> &amp; Word<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      New_Line;<br/>   <span class=\"kw1\">end</span> Print_Line;<br/>\u00a0<br/>   First, Second, Result\u00a0: Unbounded_String;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Set_Col <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;  Put <span class=\"br0\">(</span><span class=\"st0\">\"N\"</span><span class=\"br0\">)</span>;<br/>   Set_Col <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;  Put <span class=\"br0\">(</span><span class=\"st0\">\"Length\"</span><span class=\"br0\">)</span>;<br/>   Set_Col <span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span>; Put <span class=\"br0\">(</span><span class=\"st0\">\"Entropy\"</span><span class=\"br0\">)</span>;<br/>   Set_Col <span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"br0\">)</span>; Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Word\"</span><span class=\"br0\">)</span>;<br/>   First\u00a0:= To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span>;<br/>   Print_Line <span class=\"br0\">(</span>First, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Second\u00a0:= To_Unbounded_String <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>;<br/>   Print_Line <span class=\"br0\">(</span>Second, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">3</span> .. <span class=\"nu0\">37</span> <span class=\"kw1\">loop</span><br/>      Result\u00a0:= Second &amp; First;<br/>      Print_Line <span class=\"br0\">(</span>Result, N<span class=\"br0\">)</span>;<br/>      First \u00a0:= Second;<br/>      Second\u00a0:= Result;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Fibonacci_Words;<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 44, "block": "<pre class=\"text highlighted_source\">real<br/>entropy(data b)<br/>{<br/>    integer count, i;<br/>    real ones, zeros;<br/>\u00a0<br/>    ones = zeros = 0;<br/>\u00a0<br/>    i = -(count = ~b);<br/>    while (i) {<br/>        if (b[i] == '0') {<br/>            zeros += 1;<br/>        } else {<br/>            ones += 1;<br/>        }<br/>\u00a0<br/>        i += 1;<br/>    }<br/>\u00a0<br/>    return -(ones /= count) * log2(ones) - (zeros /= count) * log2(zeros);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    data a, b;<br/>    integer i;<br/>\u00a0<br/>    a = \"1\";<br/>    b = \"0\";<br/>\u00a0<br/>    o_form(\"%2d\u00a0%9d /w12p10d10/ ~\\n\", 1, ~a, 0r, a);<br/>    o_form(\"%2d\u00a0%9d /w12p10d10/ ~\\n\", 2, ~b, 0r, b);<br/>    i = 3;<br/>    while (i &lt;= 37) {<br/>        bu_copy(a, 0, b);<br/>        o_form(\"%2d\u00a0%9d /w12p10d10/ ~\\n\", i, ~a, entropy(a),<br/>               i &lt; 10\u00a0? a.string\u00a0: \"\");<br/>        i += 1;<br/>        b.swap(a);<br/>    }<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 119, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># calculate some details of \"Fibonacci Words\"               #</span><br/>\u00a0<br/><span class=\"coMULTI\"># fibonacci word 1 = \"1\"                                    #</span><br/><span class=\"coMULTI\"># fibonacci word 2 = \"0\"                                    #</span><br/><span class=\"coMULTI\">#                3 = word 2 cat word 1 = \"01\"               #</span><br/><span class=\"coMULTI\">#                n = word n-1 cat word n-2                  #</span><br/>\u00a0<br/><span class=\"coMULTI\"># note the words contain only the characters \"0\" and \"1\"    #</span><br/><span class=\"coMULTI\"># also                                                      #</span><br/><span class=\"coMULTI\">#    C(word n) = C(word n-1) + C(word n-2)                  #</span><br/><span class=\"coMULTI\">#           where C(x) = the number of characters in x      #</span><br/><span class=\"coMULTI\"># Similarly,                                                #</span><br/><span class=\"coMULTI\">#      C0(word n) = C0(word n-1) + C0(word n-2)             #</span><br/><span class=\"coMULTI\"># and  C1(word n) = C1(word n-1) + C1(word n-2)             #</span><br/><span class=\"coMULTI\">#      where C0(x) = the number of \"0\"s in x and            #</span><br/><span class=\"coMULTI\">#            C1(x) = the number of \"1\"s in x                #</span><br/>\u00a0<br/><span class=\"coMULTI\"># we therefore don't have to calculate the words themselves #</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># prints the statistics for the fibonacci words from 1 to max number #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> fibonacci word stats <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> max number <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"coMULTI\"># prints some statistics for a fibonacci word:                   #</span><br/>    <span class=\"coMULTI\">#        the word number, its length and its entropy             #</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> one words stats <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> word<br/>                                 <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> zeros<br/>                                 <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> ones<br/>                                 <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>        <span class=\"kw3\">REAL</span> probability <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">REAL</span> entropy     <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>  word length  <span class=\"sy1\">=</span> zeros <span class=\"sy1\">+</span> ones<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">IF</span> zeros <span class=\"sy1\">&gt;</span> 0<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># the word contains some zeros #</span><br/>            probability <span class=\"sy1\">:=</span> zeros <span class=\"sy1\">/</span> word length<span class=\"sy1\">;</span><br/>            entropy    <span class=\"sy1\">-:=</span> probability <span class=\"sy1\">*</span> <span class=\"kw24\">log</span><span class=\"br0\">(</span> probability <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">IF</span> ones <span class=\"sy1\">&gt;</span> 0<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># the word contains some ones #</span><br/>            probability <span class=\"sy1\">:=</span> ones  <span class=\"sy1\">/</span> word length<span class=\"sy1\">;</span><br/>            entropy    <span class=\"sy1\">-:=</span> probability <span class=\"sy1\">*</span> <span class=\"kw24\">log</span><span class=\"br0\">(</span> probability <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># we want entropy in bits so convert to log base 2 #</span><br/>        entropy <span class=\"sy1\">/:=</span> <span class=\"kw24\">log</span><span class=\"br0\">(</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> word<span class=\"sy1\">,</span>         <span class=\"sy1\">-</span>5 <span class=\"br0\">)</span><br/>                 <span class=\"sy1\">+</span> <span class=\"st0\">\" \"</span><br/>                 <span class=\"sy1\">+</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> word length<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>12 <span class=\"br0\">)</span><br/>                 <span class=\"sy1\">+</span> <span class=\"st0\">\" \"</span><br/>                 <span class=\"sy1\">+</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> entropy<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><br/>                 <span class=\"br0\">)</span><br/>               <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>               <span class=\"br0\">)</span><br/>             <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># print one words stats #</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw3\">INT</span> zeros one     <span class=\"sy1\">=</span> 0<span class=\"sy1\">;</span> <span class=\"coMULTI\"># number of zeros in word 1 #</span><br/>    <span class=\"kw3\">INT</span> ones  one     <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span> <span class=\"coMULTI\"># number of ones  in word 1 #</span><br/>    <span class=\"kw3\">INT</span> zeros two     <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span> <span class=\"coMULTI\"># number of zeros in word 2 #</span><br/>    <span class=\"kw3\">INT</span> ones  two     <span class=\"sy1\">=</span> 0<span class=\"sy1\">;</span> <span class=\"coMULTI\"># number of ones  in word 2 #</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" word       length  entropy\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">IF</span> max number <span class=\"sy1\">&gt;</span> 0<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># we want at least one number's statistics #</span><br/>        <span class=\"kw22\">print</span> one words stats<span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> zeros one<span class=\"sy1\">,</span> ones one <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">IF</span> max number <span class=\"sy1\">&gt;</span> 1<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># we want at least 2 number's statistics #</span><br/>            <span class=\"kw22\">print</span> one words stats<span class=\"br0\">(</span> 2<span class=\"sy1\">,</span> zeros two<span class=\"sy1\">,</span> ones two <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">IF</span> max number <span class=\"sy1\">&gt;</span> 2<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># we want more statistics #</span><br/>\u00a0<br/>                <span class=\"kw3\">INT</span> zeros n minus 1 <span class=\"sy1\">:=</span> zeros two<span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> ones  n minus 1 <span class=\"sy1\">:=</span> ones  two<span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> zeros n minus 2 <span class=\"sy1\">:=</span> zeros one<span class=\"sy1\">;</span><br/>                <span class=\"kw3\">INT</span> ones  n minus 2 <span class=\"sy1\">:=</span> ones  one<span class=\"sy1\">;</span><br/>\u00a0<br/>                <span class=\"kw2\">FOR</span> word <span class=\"kw2\">FROM</span> 3 <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>\u00a0<br/>                    <span class=\"kw3\">INT</span> zeros n <span class=\"sy1\">:=</span> zeros n minus 1 <span class=\"sy1\">+</span> zeros n minus 2<span class=\"sy1\">;</span><br/>                    <span class=\"kw3\">INT</span> ones  n <span class=\"sy1\">:=</span> ones  n minus 1 <span class=\"sy1\">+</span> ones  n minus 2<span class=\"sy1\">;</span><br/>\u00a0<br/>                    <span class=\"kw22\">print</span> one words stats<span class=\"br0\">(</span> word<span class=\"sy1\">,</span> zeros n<span class=\"sy1\">,</span> ones n <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>                    zeros n minus 2 <span class=\"sy1\">:=</span> zeros n minus 1<span class=\"sy1\">;</span><br/>                    ones  n minus 2 <span class=\"sy1\">:=</span> ones  n minus 1<span class=\"sy1\">;</span><br/>                    zeros n minus 1 <span class=\"sy1\">:=</span> zeros n<span class=\"sy1\">;</span><br/>                    ones  n minus 1 <span class=\"sy1\">:=</span> ones  n<br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># print fibonacci word stats #</span><br/>\u00a0<br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>    <span class=\"coMULTI\"># print the statistics for the first 37 fibonacci words #</span><br/>    <span class=\"kw22\">print</span> fibonacci word stats<span class=\"br0\">(</span> 37 <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      F_WORD\u2190{{\u2375,,/\u233d\u00af2\u2191\u2375}\u2363(0\u2308\u237a-2),\u00a8\u2375}<br/>      ENTROPY\u2190{-+/R\u00d72\u235fR\u2190(+\u233f\u2375\u2218.=\u222a\u2375)\u00f7\u2374\u2375}<br/>      FORMAT\u2190{'N' 'LENGTH' 'ENTROPY'\u236a(\u2373\u2375),\u2191{(\u2374\u2375),ENTROPY \u2375}\u00a8\u2375 F_WORD 1 0}<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 28, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> FloatFast<span class=\"sy0\">,</span> <span class=\"nu0\">0.15</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>OutPut <span class=\"sy0\">:=</span> <span class=\"st0\">\"N`tLength`t`tEntropy`n\"</span><br/>        <span class=\"sy0\">.</span> <span class=\"st0\">\"1`t\"</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"`t`t\"</span> Entropy<span class=\"br0\">(</span>FW1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>        <span class=\"sy0\">.</span> <span class=\"st0\">\"2`t\"</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"`t`t\"</span> Entropy<span class=\"br0\">(</span>FW2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><br/><span class=\"br0\">{</span><br/>    FW3 <span class=\"sy0\">:=</span> FW2 FW1<span class=\"sy0\">,</span> FW1 <span class=\"sy0\">:=</span> FW2<span class=\"sy0\">,</span> FW2 <span class=\"sy0\">:=</span> FW3<br/>    Output <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"st0\">\"`t\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>FW3<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">33</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: <span class=\"st0\">\"`t\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`t\"</span> Entropy<span class=\"br0\">(</span>FW3<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Output<br/>\u00a0<br/>Entropy<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> len<span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> m <span class=\"sy0\">:=</span> n<br/>    <span class=\"kw1\">while</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        m <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>        a<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> c<br/>    <span class=\"br0\">}</span><br/>    for key<span class=\"sy0\">,</span> val in a<br/>    <span class=\"br0\">{</span><br/>        m <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Log</span></a><span class=\"br0\">(</span>p <span class=\"sy0\">:=</span> val <span class=\"sy0\">/</span> len<span class=\"br0\">)</span><br/>        e <span class=\"sy0\">-=</span> p <span class=\"sy0\">*</span> m <span class=\"sy0\">/</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Log</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">,</span> e<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 97, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_headings<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"N\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%10s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Length\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%-20s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Entropy\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%-40s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Word\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> calculate_entropy<span class=\"br0\">(</span><span class=\"kw4\">int</span> ones<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> zeros<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> total <span class=\"sy0\">=</span> ones <span class=\"sy0\">+</span> zeros<span class=\"sy0\">;</span><br/>\tresult <span class=\"sy0\">-=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> ones <span class=\"sy0\">/</span> total <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> ones <span class=\"sy0\">/</span> total<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tresult <span class=\"sy0\">-=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> zeros <span class=\"sy0\">/</span> total <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> zeros <span class=\"sy0\">/</span> total<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">!=</span> result<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// NAN</span><br/>\t\tresult <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_entropy<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>word<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> ones <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> zeros <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> word<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> word<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'0'</span><span class=\"sy0\">:</span><br/>\t\t\t\tzeros<span class=\"sy0\">++;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'1'</span><span class=\"sy0\">:</span><br/>\t\t\t\tones<span class=\"sy0\">++;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> entropy <span class=\"sy0\">=</span> calculate_entropy<span class=\"br0\">(</span>ones<span class=\"sy0\">,</span> zeros<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%-20.18f\"</span><span class=\"sy0\">,</span> entropy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_word<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>word<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%10ld\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tprint_entropy<span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%-40s\"</span><span class=\"sy0\">,</span> word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%-40s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tprint_headings<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>last_word <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>last_word<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>current_word <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>current_word<span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tprint_word<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> last_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">37</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tprint_word<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> current_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>next_word <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>current_word<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>last_word<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>next_word<span class=\"sy0\">,</span> current_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>next_word<span class=\"sy0\">,</span> last_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>last_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tlast_word <span class=\"sy0\">=</span> current_word<span class=\"sy0\">;</span><br/>\t\tcurrent_word <span class=\"sy0\">=</span> next_word<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>last_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>current_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 53, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> log2<span class=\"br0\">(</span> <span class=\"kw4\">double</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span> number <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> find_entropy<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> fiboword <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">map</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span> , <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> frequencies <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">for_each</span><span class=\"br0\">(</span> fiboword.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , fiboword.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t <span class=\"br0\">[</span> <span class=\"sy3\">&amp;</span> frequencies <span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"kw4\">char</span> c <span class=\"br0\">)</span> <span class=\"br0\">{</span> frequencies<span class=\"br0\">[</span> c <span class=\"br0\">]</span><span class=\"sy2\">++</span> <span class=\"sy4\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <br/>   <span class=\"kw4\">int</span> numlen <span class=\"sy1\">=</span> fiboword.<span class=\"me1\">length</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">double</span> infocontent <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span> , <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> p <span class=\"sy4\">:</span> frequencies <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">double</span> freq <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> p.<span class=\"me1\">second</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> numlen <span class=\"sy4\">;</span><br/>      infocontent <span class=\"sy2\">+</span><span class=\"sy1\">=</span> freq <span class=\"sy2\">*</span> log2<span class=\"br0\">(</span> freq <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   infocontent <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> infocontent <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printLine<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>fiboword , <span class=\"kw4\">int</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">right</span> <span class=\"sy1\">&lt;&lt;</span> fiboword.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"  \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setprecision</span><span class=\"br0\">(</span> <span class=\"nu0\">13</span> <span class=\"br0\">)</span> <br/>      <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> find_entropy<span class=\"br0\">(</span> fiboword <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"N\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">right</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"length\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"  \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"entropy\"</span> <span class=\"sy4\">;</span> <br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> firststring <span class=\"br0\">(</span> <span class=\"st0\">\"1\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span><br/>   printLine<span class=\"br0\">(</span> firststring , n <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> secondstring<span class=\"br0\">(</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   n<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   printLine<span class=\"br0\">(</span> secondstring , n <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">37</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">string</span> resultstring <span class=\"sy1\">=</span> firststring <span class=\"sy2\">+</span> secondstring <span class=\"sy4\">;</span><br/>      firststring.<span class=\"me1\">assign</span><span class=\"br0\">(</span> secondstring <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      secondstring.<span class=\"me1\">assign</span><span class=\"br0\">(</span> resultstring <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      n<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>      printLine<span class=\"br0\">(</span> resultstring , n <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 71, "block": "<pre class=\"c highlighted_source\">using SYS <span class=\"sy0\">=</span> System<span class=\"sy0\">;</span><br/>using SCG <span class=\"sy0\">=</span> System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Basically a port of the C++ solution as posted</span><br/><span class=\"co1\">// 2017-11-12.</span><br/><span class=\"co1\">//</span><br/>namespace FibonacciWord<br/><span class=\"br0\">{</span><br/>  class Program<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span> string<span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      PrintHeading<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      string firstString <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      PrintLine<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> firstString <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      string secondString <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>      <span class=\"sy0\">++</span>n<span class=\"sy0\">;</span><br/>      PrintLine<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> secondString <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">37</span> <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        string resultString <span class=\"sy0\">=</span> firstString <span class=\"sy0\">+</span> secondString<span class=\"sy0\">;</span><br/>        firstString <span class=\"sy0\">=</span> secondString<span class=\"sy0\">;</span><br/>        secondString <span class=\"sy0\">=</span> resultString<span class=\"sy0\">;</span><br/>        <span class=\"sy0\">++</span>n<span class=\"sy0\">;</span><br/>        PrintLine<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> resultString <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> PrintLine<span class=\"br0\">(</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> string result <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      SYS.<span class=\"me1\">Console</span>.<span class=\"me1\">Write</span><span class=\"br0\">(</span> <span class=\"st0\">\"{0,-5}\"</span><span class=\"sy0\">,</span> n <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      SYS.<span class=\"me1\">Console</span>.<span class=\"me1\">Write</span><span class=\"br0\">(</span> <span class=\"st0\">\"{0,12}\"</span><span class=\"sy0\">,</span> result.<span class=\"me1\">Length</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      SYS.<span class=\"me1\">Console</span>.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\"  {0,-16}\"</span><span class=\"sy0\">,</span> GetEntropy<span class=\"br0\">(</span> result <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    private <span class=\"kw4\">static</span> <span class=\"kw4\">double</span> GetEntropy<span class=\"br0\">(</span> string result <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      SCG.<span class=\"me1\">Dictionary</span><span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">,</span> int<span class=\"sy0\">&gt;</span> frequencies <span class=\"sy0\">=</span> new SCG.<span class=\"me1\">Dictionary</span><span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">,</span> int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      foreach <span class=\"br0\">(</span> <span class=\"kw4\">char</span> c in result <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> frequencies.<span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          <span class=\"sy0\">++</span>frequencies<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>          frequencies<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw4\">int</span> length <span class=\"sy0\">=</span> result.<span class=\"me1\">Length</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">double</span> entropy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      foreach <span class=\"br0\">(</span> var keyValue in frequencies <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> freq <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>keyValue.<span class=\"me1\">Value</span> <span class=\"sy0\">/</span> length<span class=\"sy0\">;</span><br/>        entropy <span class=\"sy0\">+=</span> freq <span class=\"sy0\">*</span> SYS.<span class=\"me1\">Math</span>.<span class=\"me1\">Log</span><span class=\"br0\">(</span> freq<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>entropy<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> PrintHeading<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      SYS.<span class=\"me1\">Console</span>.<span class=\"me1\">Write</span><span class=\"br0\">(</span> <span class=\"st0\">\"{0,-5}\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"N\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      SYS.<span class=\"me1\">Console</span>.<span class=\"me1\">Write</span><span class=\"br0\">(</span> <span class=\"st0\">\"{0,12}\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Length\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      SYS.<span class=\"me1\">Console</span>.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\"  {0,-16}\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Entropy\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 18, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> entropy <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>len <span class=\"br0\">(</span><span class=\"kw1\">count</span> s<span class=\"br0\">)</span>, log<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>log <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>frequencies s<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>_ v<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rf <span class=\"br0\">(</span><span class=\"sy0\">/</span> v len<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>log rf<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> log<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> rf<span class=\"br0\">)</span> Math<span class=\"sy0\">/</span>abs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fibonacci <span class=\"br0\">[</span>cat a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>lazy<span class=\"sy0\">-</span>seq<br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> a <span class=\"br0\">(</span>fibonacci b <span class=\"br0\">(</span>cat a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; you could also say (fibonacci + 0 1) or (fibonacci concat '(0) '(1))</span><br/>\u00a0<br/><span class=\"br0\">(</span>printf <span class=\"st0\">\"%2s\u00a0%10s\u00a0%17s\u00a0%s%n\"</span> <span class=\"st0\">\"N\"</span> <span class=\"st0\">\"Length\"</span> <span class=\"st0\">\"Entropy\"</span> <span class=\"st0\">\"Fibword\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>i <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">38</span><span class=\"br0\">)</span><br/>        w <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">37</span> <span class=\"br0\">(</span>fibonacci <span class=\"kw1\">str</span> <span class=\"st0\">\"1\"</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>printf <span class=\"st0\">\"%2d\u00a0%10d\u00a0%.15f\u00a0%s%n\"</span> i <span class=\"br0\">(</span><span class=\"kw1\">count</span> w<span class=\"br0\">)</span> <span class=\"br0\">(</span>entropy w<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> i <span class=\"nu0\">8</span><span class=\"br0\">)</span> w <span class=\"st0\">\"...\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 32, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-fibwords <span class=\"br0\">(</span><span class=\"kw1\">array</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> below <span class=\"nu0\">37</span><br/>        for j <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> then <span class=\"br0\">(</span>concatenate 'string j k<span class=\"br0\">)</span><br/>        <span class=\"kw1\">and</span> k <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span> then j<br/>     <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> i<span class=\"br0\">)</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">array</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar *fib* <span class=\"br0\">(</span>make-fibwords <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">37</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> entropy <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>table <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> '<span class=\"kw1\">eql</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>entropy 0d0<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"kw1\">length</span> string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">mapc</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash c table<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>gethash c table <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>coerce string '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>maphash <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>k v<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>ignore k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>decf entropy <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ v n<span class=\"br0\">)</span> <span class=\"br0\">(</span>log <span class=\"br0\">(</span>/ v n<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             table<span class=\"br0\">)</span><br/>    entropy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> string-or-dots <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> string<span class=\"br0\">)</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>      <span class=\"st0\">\"...\"</span><br/>      string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~2A ~10A ~17A ~A~%\"</span> <span class=\"st0\">\"N\"</span> <span class=\"st0\">\"Length\"</span> <span class=\"st0\">\"Entropy\"</span> <span class=\"st0\">\"Fibword\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>loop for i below <span class=\"nu0\">37</span><br/>      for n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> *fib* i<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>     <span class=\"br0\">(</span>format t <span class=\"st0\">\"~2D ~10D ~17,15F ~A~%\"</span><br/>             <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>entropy n<span class=\"br0\">)</span> <span class=\"br0\">(</span>string-or-dots n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">real</span> entropy<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">__traits</span><span class=\"br0\">(</span>compiles<span class=\"sy0\">,</span> s.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> sLen <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<br/>           .<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">group</span><br/>           .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>sLen<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span>p <span class=\"sy0\">*</span> p.<span class=\"me1\">log2</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">uint</span> nMax <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"  N     Length               Entropy Fibword\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>s<span class=\"sy0\">;</span> recurrence<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> a<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>nMax<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%3d\u00a0%10d\u00a0%2.19f\u00a0%s\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">++,</span> s.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>                 s.<span class=\"me1\">dup</span>.<span class=\"me1\">representation</span>.<span class=\"me1\">entropy</span>.<span class=\"me1\">abs</span><span class=\"sy0\">,</span><br/>                 s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span> <span class=\"sy0\">?</span> s <span class=\"sy0\">:</span> <span class=\"st0\">\"&lt;too long&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 28, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'struct<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>struct FW <span class=\"br0\">(</span> count0 count1 <span class=\"kw1\">length</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; a fibonacci word</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>F<span class=\"sy0\">-</span>word n<span class=\"br0\">)</span> <span class=\"co1\">;; generator</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> a <span class=\"br0\">(</span>F<span class=\"sy0\">-</span>word <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> b <span class=\"br0\">(</span>F<span class=\"sy0\">-</span>word <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>FW<br/>        <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span>count0 a<span class=\"br0\">)</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span>count0 b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span>count1 a<span class=\"br0\">)</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span>count1 b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">length</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">length</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"st0\">\"...\"</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">string</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">string</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>remember 'F<span class=\"sy0\">-</span>word <span class=\"br0\">(</span><span class=\"kw1\">vector</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>FW <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>FW <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>entropy fw<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> p <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span>count0 fw<span class=\"br0\">)</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">length</span> fw<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> p <span class=\"br0\">(</span>log2 p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">1</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span>log2 <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">1</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task <span class=\"br0\">(</span>n <span class=\"nu0\">38</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fw<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">set!</span> fw <span class=\"br0\">(</span>F<span class=\"sy0\">-</span>word i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>printf <span class=\"st0\">\"%3d\u00a0%10d\u00a0%24d\u00a0%a\"</span><br/>            i <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">length</span> fw<span class=\"br0\">)</span> <span class=\"br0\">(</span>entropy fw<span class=\"br0\">)</span> <span class=\"br0\">(</span>FW<span class=\"sy0\">-</span><span class=\"kw1\">string</span> fw<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 22, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def entropy(str) do<br/>    leng = String.length(str)<br/>    String.to_charlist(str)<br/>    |&gt; Enum.reduce(Map.new, fn c,acc -&gt; Map.update(acc, c, 1, &amp;(&amp;1+1)) end)<br/>    |&gt; Map.values<br/>    |&gt; Enum.reduce(0, fn count, entropy -&gt;<br/>         freq = count / leng<br/>         entropy - freq *\u00a0:math.log2(freq)      # log2 was added with Erlang/OTP 18<br/>       end)<br/>  end<br/>end<br/>\u00a0<br/>fibonacci_word = Stream.unfold({\"1\",\"0\"}, fn{a,b} -&gt; {a, {b, b&lt;&gt;a}} end)<br/>\u00a0<br/>IO.puts \"  N    Length       Entropy       Fibword\"<br/>fibonacci_word |&gt; Enum.take(37) |&gt; Enum.with_index<br/>|&gt; Enum.each(fn {word,i} -&gt;<br/>  len = String.length(word)<br/>  str = if len &lt; 60, do: word, else: \"&lt;too long&gt;\"<br/> \u00a0:io.format \"~3w  ~8w  ~17.15f  ~s~n\", [i+1, len, RC.entropy(word), str]<br/>end)</pre>"}, {"lang": "F#", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// include the code from /wiki/Entropy#F.23 for the entropy function</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fiboword  <span class=\"sy0\">=</span> <br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>state\u00a0: <span class=\"kw4\">string</span> <span class=\"sy0\">*</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>            Some <span class=\"br0\">(</span><span class=\"kw3\">fst</span> state, <span class=\"br0\">(</span><span class=\"kw3\">snd</span> state, <span class=\"br0\">(</span><span class=\"kw3\">snd</span> state<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"%3s\u00a0%10s\u00a0%10s\u00a0%s\"</span> <span class=\"st0\">\"#\"</span> <span class=\"st0\">\"Length\"</span> <span class=\"st0\">\"Entropy\"</span> <span class=\"st0\">\"Word (if length &lt; 40)\"</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iteri</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"br0\">(</span>s\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>    printfn <span class=\"st0\">\"%3i\u00a0%10i\u00a0%10.7g\u00a0%s\"</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> s.<span class=\"me1\">Length</span> <span class=\"br0\">(</span>entropy s<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> s.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">40</span> <span class=\"kw1\">then</span> s <span class=\"kw1\">else</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> <span class=\"nu0\">37</span> fiboword<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 36, "block": "<pre class=\"text highlighted_source\">USING: assocs combinators formatting kernel math math.functions<br/>math.ranges math.statistics namespaces pair-rocket sequences\u00a0;<br/>IN: rosetta-code.fibonacci-word<br/>\u00a0<br/>SYMBOL: 37th-fib-word<br/>\u00a0<br/>: fib ( n -- m )<br/>    {<br/>        1 =&gt; [ 1 ]<br/>        2 =&gt; [ 1 ]<br/>        [ [ 1 - fib ] [ 2 - fib ] bi + ]<br/>    } case\u00a0;<br/>\u00a0<br/>: fib-word ( n -- seq )<br/>    {<br/>        1 =&gt; [ \"1\" ]<br/>        2 =&gt; [ \"0\" ]<br/>        [ [ 1 - fib-word ] [ 2 - fib-word ] bi append ]<br/>    } case\u00a0;<br/>\u00a0<br/>: nth-fib-word ( n -- seq )<br/>    dup 1 =<br/>    [ drop \"1\" ] [ 37th-fib-word get swap fib head ] if\u00a0;<br/>\u00a0<br/>: entropy ( seq -- entropy )<br/>    [ length ] [ histogram &gt;alist [ second ] map ] bi<br/>    [ swap / ] with map<br/>    [ dup log 2 log / * ] map-sum<br/>    dup 0. = [ neg ] unless\u00a0;<br/>\u00a0<br/>37 fib-word 37th-fib-word set<br/>\"N\" \"Length\" \"Entropy\" \"%2s \u00a0%8s \u00a0%10s\\n\" printf<br/>37 [1,b] [<br/>   dup nth-fib-word [ length ] [ entropy ] bi<br/>   \"%2d \u00a0%8d \u00a0%.8f\\n\" printf<br/>] each</pre>"}, {"lang": "FreeBASIC", "loc": 61, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 25-06-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> calc_entropy<span class=\"br0\">(</span>source <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, base_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, sourcelen = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span>, totalchar<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> prop, entropy<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> sourcelen -<span class=\"nu0\">1</span><br/>        totalchar<span class=\"br0\">(</span>source<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">255</span><br/>        <span class=\"kw1\">If</span> totalchar<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        prop = totalchar<span class=\"br0\">(</span>i<span class=\"br0\">)</span> / sourcelen<br/>        entropy = entropy - <span class=\"br0\">(</span>prop * <span class=\"kw1\">Log</span> <span class=\"br0\">(</span>prop<span class=\"br0\">)</span> / <span class=\"kw1\">Log</span><span class=\"br0\">(</span>base_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> entropy<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> fw1 = <span class=\"st0\">\"1\"</span> , fw2 = <span class=\"st0\">\"0\"</span>, fw3<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, n<br/>\u00a0<br/><span class=\"kw1\">Print</span><span class=\"st0\">\"   N     Length  Entropy           Word\"</span><br/>n = <span class=\"nu0\">1</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ###\"</span>;n;\u00a0: <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ###########\"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fw1<span class=\"br0\">)</span>;<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ##.############### \"</span>; calc_entropy<span class=\"br0\">(</span>fw1,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">Print</span> fw1<br/>n = <span class=\"nu0\">2</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ###\"</span>;n\u00a0;: <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ###########\"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fw2<span class=\"br0\">)</span>;<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ##.############### \"</span>; calc_entropy<span class=\"br0\">(</span>fw2,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">Print</span>  fw2<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">35</span><br/>\u00a0<br/>    fw1 = <span class=\"st0\">\"1\"</span>\u00a0: fw2 = <span class=\"st0\">\"0\"</span> <span class=\"co1\">' construct string</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        fw3 = fw2 + fw1<br/>        <span class=\"kw1\">Swap</span> fw1, fw2    <span class=\"co1\">' swap pointers of fw1 and fw2</span><br/>        <span class=\"kw1\">Swap</span> fw2, fw3    <span class=\"co1\">' swap pointers of fw2 and fw3</span><br/>    <span class=\"kw1\">Next</span><br/>    fw1 = <span class=\"st0\">\"\"</span>\u00a0: fw3 = <span class=\"st0\">\"\"</span>  <span class=\"co1\">' free up memory</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\" ### ########### ##.############### \"</span>; n +<span class=\"nu0\">2</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fw2<span class=\"br0\">)</span>;_<br/>                                                  calc_entropy<span class=\"br0\">(</span>fw2, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fw2<span class=\"br0\">)</span> &lt; <span class=\"nu0\">55</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> fw2 <span class=\"kw1\">Else</span> <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 61, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// From http://rosettacode.org/wiki/Entropy#Go</span><br/><span class=\"kw4\">func</span> entropy<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\tm <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span>rune<span class=\"sy1\">]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{}</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>\t\tm<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>\t<span class=\"sy1\">}</span><br/>\thm <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>\t\thm <span class=\"sy2\">+=</span> c <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Log2<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tl <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Log2<span class=\"sy1\">(</span>l<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> hm<span class=\"sy3\">/</span>l<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> F_Word1 <span class=\"sy2\">=</span> <span class=\"st0\">\"1\"</span><br/><span class=\"kw1\">const</span> F_Word2 <span class=\"sy2\">=</span> <span class=\"st0\">\"0\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> FibonacciWord<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> F_Word1<span class=\"sy1\">,</span> F_Word2<br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &gt; <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">=</span> b<span class=\"sy1\">,</span> b<span class=\"sy3\">+</span>a<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> a<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> FibonacciWordGen<span class=\"sy1\">()</span> &lt;<span class=\"sy3\">-</span><span class=\"kw4\">chan</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tch <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"kw4\">string</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> F_Word1<span class=\"sy1\">,</span> F_Word2<br/>\t\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\t\tch &lt;<span class=\"sy3\">-</span> a<br/>\t\t\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">=</span> b<span class=\"sy1\">,</span> b<span class=\"sy3\">+</span>a<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}()</span><br/>\t<span class=\"kw1\">return</span> ch<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfibWords <span class=\"sy2\">:=</span> FibonacciWordGen<span class=\"sy1\">()</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3s\u00a0%9s \u00a0%-18s \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"N\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Length\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Entropy\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Word\"</span><span class=\"sy1\">)</span><br/>\tn <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\ts <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>fibWords<br/>\t\t<span class=\"co1\">// Just to show the function and generator do the same thing:</span><br/>\t\t<span class=\"kw1\">if</span> s2 <span class=\"sy2\">:=</span> FibonacciWord<span class=\"sy1\">(</span>n<span class=\"sy1\">);</span> s <span class=\"sy2\">!=</span> s2 <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"For\u00a0%d, generator produced\u00a0%q, function produced\u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> s2<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d\u00a0%9d \u00a0%.16f \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> entropy<span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> s<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">37</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\ts <span class=\"sy2\">:=</span> &lt;<span class=\"sy3\">-</span>fibWords<br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d\u00a0%9d \u00a0%.16f<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> entropy<span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Monoid<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>entropy <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>entropy <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a><br/>        <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\c <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:logBase\"><span class=\"kw3\">logBase</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">$</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> c<span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> <span class=\"br0\">(</span>\\cs <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> <span class=\"br0\">{</span> sc <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> cs <span class=\"br0\">}</span> <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/</span> sc<span class=\"br0\">)</span> cs<span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> group<br/>        <span class=\"sy0\">.</span> sort<br/>\u00a0<br/>fibonacci <span class=\"sy0\">::</span> <span class=\"br0\">(</span>Monoid m<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">-&gt;</span> m <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>fibonacci a b <span class=\"sy0\">=</span> unfoldr <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Just <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a <span class=\"sy0\">&lt;&gt;</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    printf <span class=\"st0\">\"%2s\u00a0%10s\u00a0%17s\u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"st0\">\"N\"</span> <span class=\"st0\">\"length\"</span> <span class=\"st0\">\"entropy\"</span> <span class=\"st0\">\"word\"</span><br/>    zipWithM<span class=\"sy0\">_</span> <span class=\"br0\">(</span>\\i v <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> <span class=\"br0\">{</span> l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> v <span class=\"br0\">}</span> <span class=\"kw1\">in</span> printf <span class=\"st0\">\"%2d\u00a0%10d\u00a0%.15f\u00a0%s<span class=\"es0\">\\n</span>\"</span><br/>                   i l <span class=\"br0\">(</span>entropy v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> l <span class=\"sy0\">&gt;</span> <span class=\"nu0\">40</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"...\"</span> <span class=\"kw1\">else</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">38</span><span class=\"sy0\">::</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>              <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">37</span> <span class=\"sy0\">$</span> fibonacci <span class=\"st0\">\"1\"</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 27, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">37</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"N\"</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"length\"</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"kw4\">left</span><span class=\"br0\">(</span><span class=\"st0\">\"Entrophy\"</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><br/>          <span class=\"st0\">\" Fibword\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> w <span class=\"sy0\">:=</span> fword<span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>w<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"kw4\">left</span><span class=\"br0\">(</span>H<span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">8</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"sy0\">,</span>w<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> fword<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> fcache<br/>    <span class=\"kw1\">initial</span> fcache <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">/</span>fcache<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">case</span> n <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>                     <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"st0\">\"1\"</span><br/>                     <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span><br/>                     <span class=\"kw1\">default</span><span class=\"sy0\">:</span> fword<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">||</span>fword<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> fcache<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> H<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    P <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> P<span class=\"br0\">[</span><span class=\"sy0\">!</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+:=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">/*</span>s<br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>h <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"sy0\">-:=</span> P<span class=\"br0\">[</span>c <span class=\"sy0\">:=</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"kw4\">log</span><span class=\"br0\">(</span>P<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> h<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">F_Words=: <span class=\"sy0\">(</span>,&lt;@;@:{~&amp;<span class=\"nu0\">_1</span> <span class=\"nu0\">_2</span><span class=\"sy0\">)</span>@]^:<span class=\"sy0\">(</span><span class=\"nu0\">2</span>-~[<span class=\"sy0\">)</span>&amp;<span class=\"sy0\">(</span><span class=\"st_h\">'1'</span>;<span class=\"st_h\">'0'</span><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 50, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FWord <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"coMULTI\">/*v*/</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> fWord0 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"coMULTI\">/*v*/</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> fWord1 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> nextFWord <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> result<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">equals</span> <span class=\"br0\">(</span> fWord1 <span class=\"br0\">)</span> <span class=\"br0\">)</span>      result <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">equals</span> <span class=\"br0\">(</span> fWord0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> result <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span>                             result <span class=\"sy0\">=</span> fWord1 <span class=\"sy0\">+</span> fWord0<span class=\"sy0\">;</span><br/>\u00a0<br/>        fWord0 <span class=\"sy0\">=</span> fWord1<span class=\"sy0\">;</span><br/>        fWord1 <span class=\"sy0\">=</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> entropy <span class=\"br0\">(</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> source <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span>                        length <span class=\"sy0\">=</span> source.<span class=\"me1\">length</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amap+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Map</span></a> <span class=\"sy0\">&lt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> <span class=\"sy0\">&gt;</span> counts <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ahashmap+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">HashMap</span></a> <span class=\"sy0\">&lt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/*v*/</span> <span class=\"kw4\">double</span>                     result <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> length<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> source.<span class=\"me1\">charAt</span> <span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> counts.<span class=\"me1\">containsKey</span> <span class=\"br0\">(</span> c <span class=\"br0\">)</span> <span class=\"br0\">)</span> counts.<span class=\"me1\">put</span> <span class=\"br0\">(</span> c, counts.<span class=\"me1\">get</span> <span class=\"br0\">(</span> c <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span>                            counts.<span class=\"me1\">put</span> <span class=\"br0\">(</span> c, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> count <span class=\"sy0\">:</span> counts.<span class=\"me1\">values</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> proportion <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">double</span> <span class=\"br0\">)</span> count <span class=\"sy0\">/</span> length<span class=\"sy0\">;</span><br/>\u00a0<br/>            result <span class=\"sy0\">-=</span> proportion <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span> <span class=\"br0\">(</span> proportion <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> FWord fWord <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> FWord <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">37</span><span class=\"sy0\">;</span>  <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> word <span class=\"sy0\">=</span> fWord.<span class=\"me1\">nextFWord</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span> <span class=\"br0\">(</span> <span class=\"st0\">\"%3d\u00a0%10d\u00a0%s\u00a0%n\"</span>, <span class=\"sy0\">++</span>i, word.<span class=\"me1\">length</span> <span class=\"br0\">(</span><span class=\"br0\">)</span>, entropy <span class=\"br0\">(</span> word <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 101, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">//makes outputting a table possible in environments </span><br/><span class=\"co1\">//that don't support console.table() </span><br/><span class=\"kw1\">function</span> console_table<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> pad<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> res <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            res <span class=\"sy0\">+=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"No data\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> widths <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> cells <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            cells.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> s <span class=\"kw1\">in</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> len <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>            cells<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> ss <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">+</span> xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                len <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>len<span class=\"sy0\">,</span> ss.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                cells<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>ss<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            widths.<span class=\"me1\">push</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> cells.<span class=\"me1\">length</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> widths.<span class=\"me1\">length</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                s <span class=\"sy0\">+=</span> <span class=\"st0\">\"|\"</span> <span class=\"sy0\">+</span> pad<span class=\"br0\">(</span>widths<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"sy0\">,</span> cells<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            s <span class=\"sy0\">+=</span> <span class=\"st0\">\"|<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//returns the entropy of a string as a number </span><br/><span class=\"kw1\">function</span> entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <span class=\"co1\">//create an object containing each individual char</span><br/>\t<span class=\"co1\">//and the amount of iterations per char </span><br/>    <span class=\"kw1\">function</span> prob<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> h <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span>.<span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           h<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> h<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>h<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> h<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    s <span class=\"sy0\">=</span> s.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//just in case </span><br/>    <span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> l <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> prob<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> h <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> h<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">/</span>l<span class=\"sy0\">;</span><br/>        e <span class=\"sy0\">-=</span> p <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> e<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//creates Fibonacci Word to n as described on Rosetta Code</span><br/><span class=\"co1\">//see rosettacode.org/wiki/Fibonacci_word</span><br/><span class=\"kw1\">function</span> fibWord<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> wOne <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> wTwo <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> wNth <span class=\"sy0\">=</span> <span class=\"br0\">[</span>wOne<span class=\"sy0\">,</span> wTwo<span class=\"br0\">]</span><span class=\"sy0\">,</span> w <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> o <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            w <span class=\"sy0\">=</span> wNth<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            w <span class=\"sy0\">=</span> wNth<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> wNth<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            wNth.<span class=\"me1\">push</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">var</span> l <span class=\"sy0\">=</span> w.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> entropy<span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        \to.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            \tN<span class=\"sy0\">:</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            \tLength<span class=\"sy0\">:</span> l<span class=\"sy0\">,</span><br/>            \tEntropy<span class=\"sy0\">:</span> e<span class=\"sy0\">,</span><br/>            \tWord<span class=\"sy0\">:</span> w<br/>        \t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        \to.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            \tN<span class=\"sy0\">:</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            \tLength<span class=\"sy0\">:</span> l<span class=\"sy0\">,</span><br/>            \tEntropy<span class=\"sy0\">:</span> e<span class=\"sy0\">,</span><br/>            \tWord<span class=\"sy0\">:</span> <span class=\"st0\">\"...\"</span><br/>        \t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span>            <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>    \tconsole.<span class=\"me1\">table</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>err<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    \tconsole_table<span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fibWord<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\"># Input: an array of strings.<br/># Output: an object with the strings as keys, <br/># the values of which are the corresponding frequencies.<br/>def counter:<br/>  reduce .[] as $item ( {}; .[$item] += 1 )\u00a0;<br/>\u00a0<br/># entropy in bits of the input string<br/>def entropy:<br/>  (explode | map( [.] | implode ) | counter | [ .[] | . * (.|log) ] | add) as $sum<br/>  | ((length|log) - ($sum / length)) / (2|log)\u00a0;</pre>"}, {"lang": "Julia", "loc": 27, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>entropy(s::AbstractString) = -sum(x -&gt; x / length(s) * log2(x / length(s)), values(counter(s)))<br/>\u00a0<br/>function fibboword(n::Int64)<br/>    # Initialize the result<br/>    r = Array{String}(n)<br/>    # First element<br/>    r[1] = \"0\"<br/>    # If more than 2, set the second element<br/>    if n \u2265 2 r[2] = \"1\" end<br/>    # Recursively create elements &gt; 3<br/>    for i in 3:n<br/>        r[i] = r[i - 1] * r[i - 2]<br/>    end<br/>    return r<br/>end<br/>\u00a0<br/>function testfibbo(n::Integer)<br/>    fib = fibboword(n)<br/>    for i in 1:length(fib)<br/>        @printf(\"%3d%9d%12.6f\\n\", i, length(fib[i]), entropy(fib[i]))<br/>    end<br/>    return 0<br/>end<br/>\u00a0<br/>println(\"  n\\tlength\\tentropy\")<br/>testfibbo(37)</pre>"}, {"lang": "Kotlin", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun fibWord<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Argument can't be less than 1\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"1\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><br/>    words<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><br/>    words<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> until n<span class=\"br0\">)</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> words<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + words<span class=\"br0\">[</span>i - <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> words<span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun log2<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> / Math.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun shannon<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> count0 <span class=\"sy0\">=</span> s.<span class=\"me1\">count</span> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> count1 <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span> - count0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nn <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -<span class=\"br0\">(</span>count0 / nn <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span>count0 / nn<span class=\"br0\">)</span> + count1 / nn <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span>count1 / nn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"N    Length       Entropy             Word\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"--  --------  ------------------  ----------------------------------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">37</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> fibWord<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span>String.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d \u00a0%8d \u00a0%18.16f\"</span>, i, s.<span class=\"me1\">length</span>, shannon<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"  $s\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 35, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return the base two logarithm of x</span><br/><span class=\"kw1\">function</span> log2 <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">math.log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">math.log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return the Shannon entropy of X</span><br/><span class=\"kw1\">function</span> entropy <span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> N<span class=\"sy0\">,</span> count<span class=\"sy0\">,</span> sum<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> X<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> char <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> N <span class=\"kw1\">do</span><br/>        i <span class=\"sy0\">=</span> X<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>char<span class=\"sy0\">,</span> char<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> n_i<span class=\"sy0\">,</span> count_i <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> count_i <span class=\"sy0\">/</span> N <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span>count_i <span class=\"sy0\">/</span> N<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return a table of the first n Fibonacci words</span><br/><span class=\"kw1\">function</span> fibWords <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fw <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"sy0\">#</span>fw <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">do</span> fw<span class=\"br0\">[</span><span class=\"sy0\">#</span>fw <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> fw<span class=\"br0\">[</span><span class=\"sy0\">#</span>fw<span class=\"br0\">]</span> <span class=\"sy0\">..</span> fw<span class=\"br0\">[</span><span class=\"sy0\">#</span>fw <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> fw<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"n<span class=\"es1\">\\t</span>Word length<span class=\"es1\">\\t</span>Entropy\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>fibWords<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    v <span class=\"sy0\">=</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>k <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy0\">..</span> <span class=\"sy0\">#</span>v<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span><span class=\"sy0\">#</span>v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span> <span class=\"kw1\">then</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy0\">..</span> entropy<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 7, "block": "<pre class=\"text highlighted_source\">entropy = (p - 1) Log[2, 1 - p] - p Log[2, p];<br/>\u00a0<br/>TableForm[<br/> Table[{k, Fibonacci[k], <br/>   <a class=\"__cf_email__\" data-cfemail=\"48193d212d3c080b202d2b23\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[N[entropy /. {p -&gt; Fibonacci[k - 1]/Fibonacci[k]}, 15],<br/>      0]}, {k, 37}], <br/> TableHeadings -&gt; {None, {\"N\", \"Length\", \"Entropy\"}}]</pre>"}, {"lang": "Objeck", "loc": 58, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> FibonacciWord <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> GetEntropy<span class=\"br0\">(</span>result <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>    frequencies <span class=\"sy0\">:=</span> IntMap<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      c <span class=\"sy0\">:=</span> result<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">Has</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        count <span class=\"sy0\">:=</span> frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>IntHolder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        count<span class=\"sy0\">-&gt;</span><span class=\"me1\">Set</span><span class=\"br0\">(</span>count<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> IntHolder<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    length <span class=\"sy0\">:=</span> result<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entropy <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    counts <span class=\"sy0\">:=</span> frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetValues</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> counts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      count <span class=\"sy0\">:=</span> counts<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>IntHolder<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      freq <span class=\"sy0\">:=</span> count<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> length<span class=\"sy0\">;</span><br/>      entropy <span class=\"sy0\">+=</span> freq <span class=\"sy0\">*</span> <span class=\"br0\">(</span>freq<span class=\"sy0\">-&gt;</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> entropy<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> PrintLine<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> result <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    n<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    '\\t'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    result<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    GetEntropy<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    firstString <span class=\"sy0\">:=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    PrintLine<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> firstString <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    secondString <span class=\"sy0\">:=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>    n <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    PrintLine<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> secondString <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">37</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      resultString <span class=\"sy0\">:=</span> <span class=\"st0\">\"{$secondString}{$firstString}\"</span><span class=\"sy0\">;</span><br/>      firstString <span class=\"sy0\">:=</span> secondString<span class=\"sy0\">;</span><br/>      secondString <span class=\"sy0\">:=</span> resultString<span class=\"sy0\">;</span><br/>      n  <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      PrintLine<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> resultString <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span>  <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oforth", "loc": 13, "block": "<pre class=\"text highlighted_source\">: entropy(s) -- f<br/>| freq sz |<br/>   s size dup ifZero: [ return ] asFloat -&gt;sz<br/>   ListBuffer initValue(255, 0) -&gt;freq<br/>   s apply( #[ dup freq at 1+ freq put ] )<br/>   0.0 freq applyIf( #[ 0 &lt;&gt; ], #[ sz / dup ln * - ] ) Ln2 /\u00a0;<br/>\u00a0<br/>\u00a0<br/>: FWords(n)<br/>| ws i |<br/>   ListBuffer new dup add(\"1\") dup add(\"0\") dup -&gt;ws<br/>   3 n for: i [ i 1- ws at  i 2 - ws at  +  ws add ]<br/>   dup map(#[ dup size swap entropy Pair new]) apply(#println)\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 51, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 09.08.2014 Walter Pachl 'copied' from REXX<br/>* lists the # of chars in fibonacci words and the words' entropy<br/>* as well as (part of) the Fibonacci word and the number of 0's and 1's<br/>* Note: ooRexx allows for computing up to 47 Fibonacci words<br/>*--------------------------------------------------------------------*/</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">20</span>                <span class=\"coMULTI\">/* use more precision,  default=9.*/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n fw<span class=\"sy0\">.</span>1 fw<span class=\"sy0\">.</span>2 <span class=\"sy0\">.</span>          <span class=\"coMULTI\">/* get optional args from the C.L.*/</span><br/>  <span class=\"kw1\">If</span> n==<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> n=<span class=\"nu0\">50</span>               <span class=\"coMULTI\">/* Not specified? Then use default*/</span><br/>  <span class=\"kw1\">If</span> fw<span class=\"sy0\">.</span>1==<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> fw<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span>          <span class=\"coMULTI\">/* \"      \"        \"   \"     \"    */</span><br/>  <span class=\"kw1\">If</span> fw<span class=\"sy0\">.</span>2==<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> fw<span class=\"sy0\">.</span>2=<span class=\"nu0\">0</span>          <span class=\"coMULTI\">/* \"      \"        \"   \"     \"    */</span><br/>  hdr1=<span class=\"st0\">' N     length  Entropy                 Fibonacci word    '</span>,<br/>                                                <span class=\"st0\">'# of zeroes # of ones'</span><br/>  hdr2=<span class=\"st0\">'-- ----------  ----------------------  --------------------'</span>,<br/>                                                  <span class=\"st0\">'--------- ---------'</span><br/>  <span class=\"kw1\">Say</span> hdr1<br/>  <span class=\"kw1\">Say</span> hdr2<br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">For</span> n                     <span class=\"coMULTI\">/* display  N  fibonacci words.   */</span><br/>    j1=j-<span class=\"nu0\">1</span><br/>    j2=j-<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> j<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span> <span class=\"kw3\">Then</span>                    <span class=\"coMULTI\">/* calculate FIBword if we need to*/</span><br/>      fw<span class=\"sy0\">.</span>j=fw<span class=\"sy0\">.</span>j1<span class=\"sy0\">||</span>fw<span class=\"sy0\">.</span>j2<br/>    <span class=\"kw1\">If</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>fw<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">20</span> <span class=\"kw3\">Then</span><br/>      fwd=<span class=\"kw6\">left</span><span class=\"br0\">(</span>fw<span class=\"sy0\">.</span>j,<span class=\"nu0\">20</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* display the Fibonacci word     */</span><br/>    <span class=\"kw3\">Else</span><br/>      fwd=<span class=\"kw6\">left</span><span class=\"br0\">(</span>fw<span class=\"sy0\">.</span>j,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"st0\">'...'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>fw<span class=\"sy0\">.</span>j,<span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* display parts thereof   */</span><br/>    <span class=\"kw1\">Say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">'  '</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>fw<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"st0\">'  '</span>entropy<span class=\"br0\">(</span>fw<span class=\"sy0\">.</span>j<span class=\"br0\">)</span><span class=\"st0\">'  '</span>fwd,<br/>                                            <span class=\"kw6\">right</span><span class=\"br0\">(</span>aa<span class=\"sy0\">.</span>0,<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>aa<span class=\"sy0\">.</span>1,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> hdr2<br/>  <span class=\"kw1\">Say</span> hdr1<br/>  <span class=\"kw1\">Exit</span><br/>\u00a0<br/>entropy: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> aa<span class=\"sy0\">.</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> dd<br/>  l=<span class=\"kw6\">length</span><span class=\"br0\">(</span>dd<span class=\"br0\">)</span><br/>  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  aa<span class=\"sy0\">.</span>0=l-<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>dd,,<span class=\"nu0\">0</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*fast way to count zeroes*/</span><br/>  aa<span class=\"sy0\">.</span>1=l-aa<span class=\"sy0\">.</span>0                      <span class=\"coMULTI\">/* and figure the number of ones. */</span><br/>  <span class=\"kw1\">If</span> l==<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,d+<span class=\"nu0\">2</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/* handle special case of one char*/</span><br/>  s=<span class=\"nu0\">0</span>                              <span class=\"coMULTI\">/* [?] calc entropy for each char */</span><br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> <span class=\"nu0\">2</span><br/>    _=i-<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* construct a chr from the ether.*/</span><br/>    p=aa<span class=\"sy0\">.</span>_<span class=\"sy0\">/</span>l                       <span class=\"coMULTI\">/* 'probability of aa-_ in fw     */</span><br/>    s=s-p<span class=\"sy0\">*</span>rxmlog<span class=\"br0\">(</span>p,d,<span class=\"nu0\">2</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/* add (negatively) the entropies.*/</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> s=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,d+<span class=\"nu0\">2</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/* return a left-justified  \"1\".  */</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>s,,d<span class=\"br0\">)</span>              <span class=\"coMULTI\">/* normalize the number (sum or S)*/</span><br/>::requires rxm<span class=\"sy0\">.</span>cls</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">ent<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">(</span>a<span class=\"sy0\">*</span><span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>b<span class=\"sy0\">*</span><span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">allocatemem</span><span class=\"br0\">(</span><span class=\"nu1\">75</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu1\">20</span><span class=\"br0\">)</span> <span class=\"co1\">\\\\ Allocate 75 MB stack space</span><br/>F<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">37</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>F<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span>F<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">37</span><span class=\"sy0\">,</span>F<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>F<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>F<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">37</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\" \"</span><span class=\"kw1\">fibonacci</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"st0\">\" \"</span>ent<span class=\"br0\">(</span><span class=\"kw1\">fibonacci</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">fibonacci</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 110, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> FibWord<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF DELPHI}</span><br/>   <span class=\"co2\">{$APPTYPE CONSOLE}</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">const</span><br/>  FibSMaxLen <span class=\"sy3\">=</span> <span class=\"nu0\">35</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tFibString <span class=\"sy3\">=</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>FibSMaxLen<span class=\"br0\">]</span><span class=\"sy1\">;</span><span class=\"co1\">//Ansistring;</span><br/>  tFibCnt <span class=\"sy3\">=</span> longWord<span class=\"sy1\">;</span><br/>  tFib <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>            ZeroCnt<span class=\"sy1\">,</span><br/>            OneCnt <span class=\"sy1\">:</span> tFibCnt<span class=\"sy1\">;</span><br/><span class=\"co1\">//            fibS  \u00a0: tFibString;//didn't work\u00a0:-(</span><br/>         <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  FibSCheck <span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>  Fib0<span class=\"sy1\">,</span>Fib1 <span class=\"sy1\">:</span> tFib<span class=\"sy1\">;</span><br/>  FibS0<span class=\"sy1\">,</span>FibS1<span class=\"sy1\">:</span> tFibString<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span>  FibInit<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">with</span> Fib0 <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    ZeroCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    OneCnt  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">with</span> Fib1 <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    ZeroCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    OneCnt  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  FibS0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>  FibS1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'0'</span><span class=\"sy1\">;</span><br/>  FibSCheck <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> FibLength<span class=\"br0\">(</span><span class=\"kw1\">const</span> F<span class=\"sy1\">:</span>Tfib<span class=\"br0\">)</span><span class=\"sy1\">:</span>tFibCnt<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FibLength <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">.</span><span class=\"me1\">ZeroCnt</span><span class=\"sy3\">+</span>F<span class=\"sy1\">.</span><span class=\"me1\">OneCnt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FibEntropy<span class=\"br0\">(</span><span class=\"kw1\">const</span> F<span class=\"sy1\">:</span>Tfib<span class=\"br0\">)</span><span class=\"sy1\">:</span>extended<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  rcpLn2 <span class=\"sy3\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy3\">/</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  entrp<span class=\"sy1\">,</span><br/>  ratio<span class=\"sy1\">:</span> extended<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  entrp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>  ratio <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">.</span><span class=\"me1\">ZeroCnt</span><span class=\"sy3\">/</span>FibLength<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> Ratio &lt;&gt; <span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span><br/>    entrp <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  <span class=\"sy3\">-</span>ratio<span class=\"sy3\">*</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span>ratio<span class=\"br0\">)</span><span class=\"sy3\">*</span>rcpLn2<span class=\"sy1\">;</span><br/>  ratio <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">.</span><span class=\"me1\">OneCnt</span><span class=\"sy3\">/</span>FibLength<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> Ratio &lt;&gt; <span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span><br/>    entrp <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  entrp<span class=\"sy3\">-</span>ratio<span class=\"sy3\">*</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span>ratio<span class=\"br0\">)</span><span class=\"sy3\">*</span>rcpLn2<span class=\"sy1\">;</span><br/>  FibEntropy<span class=\"sy1\">:</span><span class=\"sy3\">=</span>entrp<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> FibSExtend<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  tmpS <span class=\"sy1\">:</span> tFibString<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">IF</span> FibSCheck <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    tmpS  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FibS0<span class=\"sy3\">+</span>FibS1<span class=\"sy1\">;</span><br/>    FibS0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FibS1<span class=\"sy1\">;</span><br/>    FibS1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmpS<span class=\"sy1\">;</span><br/>    FibSCheck <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>length<span class=\"br0\">(</span>FibS1<span class=\"br0\">)</span> &lt; FibSMaxLen<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> FibNext<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  tmpFib <span class=\"sy1\">:</span> tFib<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  tmpFib<span class=\"sy1\">.</span><span class=\"me1\">ZeroCnt</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Fib0<span class=\"sy1\">.</span><span class=\"me1\">ZeroCnt</span><span class=\"sy3\">+</span>Fib1<span class=\"sy1\">.</span><span class=\"me1\">ZeroCnt</span><span class=\"sy1\">;</span><br/>  tmpFib<span class=\"sy1\">.</span><span class=\"me1\">OneCnt</span>  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Fib0<span class=\"sy1\">.</span><span class=\"me1\">OneCnt</span> <span class=\"sy3\">+</span>Fib1<span class=\"sy1\">.</span><span class=\"me1\">OneCnt</span><span class=\"sy1\">;</span><br/>  Fib0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Fib1<span class=\"sy1\">;</span><br/>  Fib1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmpFib<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> FibSCheck <span class=\"kw1\">then</span><br/>    FibSExtend<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> FibWrite<span class=\"br0\">(</span><span class=\"kw1\">const</span> F<span class=\"sy1\">:</span>Tfib<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/><span class=\"co1\">//  With F do</span><br/><span class=\"co1\">//    write(ZeroCnt:10,OneCnt:10,FibLength(F):10,FibEntropy(f):17:14);</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span>FibLength<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>FibEntropy<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">17</span><span class=\"sy1\">:</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> FibSCheck <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"sy1\">,</span>FibS1<span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'  ....'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span><br/>  FibInit<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'No.     Length   Entropy         Word'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>FibWrite<span class=\"br0\">(</span>Fib0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>FibWrite<span class=\"br0\">(</span>Fib1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">37</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    FibNext<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    FibWrite<span class=\"br0\">(</span>Fib1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 31, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> fiboword<span class=\"sy0\">;</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> fiboword <span class=\"br0\">{</span><br/>        <span class=\"re0\">$count</span><span class=\"sy0\">++;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$a</span> <span class=\"kw1\">if</span> <span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$b</span> <span class=\"kw1\">if</span> <span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$b$a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> entropy <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%c</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$c</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span> <span class=\"sy0\">/</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$e</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$e</span> <span class=\"sy0\">/</span> <a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span><span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">37</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$word</span> <span class=\"sy0\">=</span> fiboword<span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%5d<span class=\"es0\">\\t</span>%10d<span class=\"es0\">\\t</span>%.8e<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>    <span class=\"re0\">$count</span><span class=\"sy0\">,</span><br/>    <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    entropy<span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"re0\">$count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">?</span> <span class=\"st_h\">''</span> <span class=\"sy0\">:</span> <span class=\"re0\">$word</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@fib</span><span class=\"sy0\">-</span>word <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"re0\">$^b</span> <span class=\"sy0\">~</span> <span class=\"re0\">$^a</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> entropy <span class=\"br0\">{</span><br/>    <span class=\"sy0\">-</span><span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> R<span class=\"sy0\">/</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"sy0\">-&gt;</span> \\p <span class=\"br0\">{</span> p <span class=\"sy0\">*</span> <span class=\"kw3\">log</span> p <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$^string</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"me1\">Bag</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span>\u00a0\u00bb<span class=\"sy0\">/</span>\u00bb <span class=\"re0\">$string</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">@fib</span><span class=\"sy0\">-</span>word<span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">37</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%5d<span class=\"es0\">\\t</span>%10d<span class=\"es0\">\\t</span>%.8e<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">state</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">++,</span> <span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;entropy</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">??</span> <span class=\"st_h\">''</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 37, "block": "<pre class=\"text highlighted_source\">function log2(atom v)<br/>    return log(v)/log(2)<br/>end function<br/>\u00a0<br/>function entropy(sequence s)<br/>sequence symbols = {},<br/>         counts = {}<br/>    integer N = length(s)<br/>    for i=1 to N do<br/>        object si = s[i]<br/>        integer k = find(si,symbols)<br/>        if k=0 then<br/>            symbols  = append(symbols,si)<br/>            counts = append(counts,1)<br/>        else<br/>            counts[k] += 1<br/>        end if<br/>    end for<br/>    atom H = 0<br/>    integer n = length(counts)<br/>    for i=1 to n do<br/>        atom ci = counts[i]/N<br/>        H -= ci*log2(ci)<br/>    end for<br/>    return H<br/>end function<br/>\u00a0<br/>sequence F_words = {\"1\",\"0\"}<br/>for i=3 to 37 do<br/>    F_words = append(F_words,F_words[i-1]&amp;F_words[i-2])<br/>end for<br/>\u00a0<br/>for i=1 to length(F_words) do<br/>    printf(1,\"%2d: length\u00a0%9d, entropy\u00a0%f\u00a0%s\\n\",<br/>        {i,length(F_words[i]),entropy(F_words[i]),<br/>         iff(i&lt;10?F_words[i],\"...\")})<br/>end for</pre>"}, {"lang": "PL/I", "loc": 24, "block": "<pre class=\"text highlighted_source\">fibword: procedure options (main);  /* 9 October 2013 */<br/>   declare (fn, fnp1, fibword) bit (32000) varying;<br/>   declare (i, ln, lnp1, lfibword) fixed binary(31);<br/>\u00a0<br/>   fn = '1'b; fnp1 = '0'b; ln, lnp1 = 1;<br/>   put skip edit (1, length(fn), fn)     (f(2), f(10), x(1), b);<br/>   put skip edit (2, length(fnp1), fnp1) (f(2), f(10), x(1), b);<br/>   do i = 3 to 37;<br/>      lfibword = lnp1 + ln;<br/>      ln = lnp1;<br/>      lnp1 = lfibword;<br/>      if i &lt;= 10 then<br/>         do;<br/>            fibword = fnp1 || fn;<br/>            put skip edit (i, length(fibword), fibword) (f(2), f(10), x(1), b);<br/>            fn = fnp1; fnp1 = fibword;<br/>         end;<br/>      else<br/>         do;<br/>            put skip edit (i, lfibword) (f(2), f(10));<br/>         end;<br/>   end;<br/>\u00a0<br/>end fibword;</pre>"}, {"lang": "PureBasic", "loc": 35, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">Define</span> fwx$, n.i<br/>NewMap uchar.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Macro</span> RowPrint<span class=\"br0\">(</span>ns,ls,es,ws<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span>ns,<span class=\"nu0\">4</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span>ls,<span class=\"nu0\">12</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>es<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>ws<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">55</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>ws<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"...\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d nlog2<span class=\"br0\">(</span>x.d<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> countchar<span class=\"br0\">(</span>s$, Map uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span><br/>    uchar<span class=\"br0\">(</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span>s$,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>s$,<span class=\"kw2\">Left</span><span class=\"br0\">(</span>s$,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: s$<span class=\"sy0\">=</span><span class=\"kw2\">RemoveString</span><span class=\"br0\">(</span>s$,<span class=\"kw2\">Left</span><span class=\"br0\">(</span>s$,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> countchar<span class=\"br0\">(</span>s$, uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d ce<span class=\"br0\">(</span>fw$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> e.d<br/>  <span class=\"kw1\">Shared</span> uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  countchar<span class=\"br0\">(</span>fw$,uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> uchar<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: e<span class=\"sy0\">-</span>uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>fw$<span class=\"br0\">)</span><span class=\"sy0\">*</span>nlog2<span class=\"br0\">(</span>uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>fw$<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> e<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s fw<span class=\"br0\">(</span>n.i,a$<span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span>,b$<span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span>,m.i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">Select</span> n\u00a0: <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> a$\u00a0: <span class=\"kw1\">Case</span> <span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> b$\u00a0: <span class=\"kw1\">EndSelect</span><br/>  <span class=\"kw1\">If</span> m<span class=\"sy0\">&lt;</span>n\u00a0: <span class=\"kw1\">ProcedureReturn</span> fw<span class=\"br0\">(</span>n,b$<span class=\"sy0\">+</span>a$,a$,m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>a$,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>ReverseString<span class=\"br0\">(</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span>a$,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"   N      Length Entropy           Word\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">37</span>\u00a0: fwx$<span class=\"sy0\">=</span>fw<span class=\"br0\">(</span>n<span class=\"br0\">)</span>\u00a0: RowPrint<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>fwx$<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"kw2\">StrD</span><span class=\"br0\">(</span>ce<span class=\"br0\">(</span>fwx$<span class=\"br0\">)</span>,<span class=\"nu0\">15</span><span class=\"br0\">)</span>,fwx$<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 58, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> Counter<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>...     <span class=\"me1\">p</span><span class=\"sy0\">,</span> lns <span class=\"sy0\">=</span> Counter<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>...     <span class=\"kw1\">return</span> -<span class=\"kw2\">sum</span><span class=\"br0\">(</span> count/lns * <span class=\"kw3\">math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>count/lns<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> count <span class=\"kw1\">in</span> p.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>... <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> fibword<span class=\"br0\">(</span>nmax<span class=\"sy0\">=</span><span class=\"nu0\">37</span><span class=\"br0\">)</span>:<br/>...     <span class=\"me1\">fwords</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"br0\">]</span><br/>...     <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%-3s\u00a0%10s\u00a0%-10s\u00a0%s'</span>\u00a0% <span class=\"kw2\">tuple</span><span class=\"br0\">(</span><span class=\"st0\">'N Length Entropy Fibword'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>...     <span class=\"kw1\">def</span> pr<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fwords<span class=\"br0\">)</span>:<br/>...         <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>fwords<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> n:<br/>...             <span class=\"me1\">fwords</span> +<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>fwords<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>:<span class=\"br0\">]</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>...         <span class=\"me1\">v</span> <span class=\"sy0\">=</span> fwords<span class=\"br0\">[</span>n-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>...         <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%3i\u00a0%10i\u00a0%10.7g\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span> entropy<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span> v <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"kw1\">else</span> <span class=\"st0\">'&lt;too long&gt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>...     <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> nmax+<span class=\"nu0\">1</span><span class=\"br0\">)</span>: pr<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fwords<span class=\"br0\">)</span><br/>... <br/><span class=\"sy0\">&gt;&gt;&gt;</span> fibword<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>N       Length Entropy    Fibword<br/>  <span class=\"nu0\">1</span>          <span class=\"nu0\">1</span>         -<span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>  <span class=\"nu0\">2</span>          <span class=\"nu0\">1</span>         -<span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>  <span class=\"nu0\">3</span>          <span class=\"nu0\">2</span>          <span class=\"nu0\">1</span> <span class=\"nu0\">01</span><br/>  <span class=\"nu0\">4</span>          <span class=\"nu0\">3</span>  <span class=\"nu0\">0.9182958</span> <span class=\"nu0\">010</span><br/>  <span class=\"nu0\">5</span>          <span class=\"nu0\">5</span>  <span class=\"nu0\">0.9709506</span> <span class=\"nu0\">01001</span><br/>  <span class=\"nu0\">6</span>          <span class=\"nu0\">8</span>   <span class=\"nu0\">0.954434</span> <span class=\"nu0\">01001010</span><br/>  <span class=\"nu0\">7</span>         <span class=\"nu0\">13</span>  <span class=\"nu0\">0.9612366</span> <span class=\"nu0\">0100101001001</span><br/>  <span class=\"nu0\">8</span>         <span class=\"nu0\">21</span>  <span class=\"nu0\">0.9587119</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/>  <span class=\"nu0\">9</span>         <span class=\"nu0\">34</span>  <span class=\"nu0\">0.9596869</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">10</span>         <span class=\"nu0\">55</span>   <span class=\"nu0\">0.959316</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">11</span>         <span class=\"nu0\">89</span>  <span class=\"nu0\">0.9594579</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">12</span>        <span class=\"nu0\">144</span>  <span class=\"nu0\">0.9594038</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">13</span>        <span class=\"nu0\">233</span>  <span class=\"nu0\">0.9594244</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">14</span>        <span class=\"nu0\">377</span>  <span class=\"nu0\">0.9594165</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">15</span>        <span class=\"nu0\">610</span>  <span class=\"nu0\">0.9594196</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">16</span>        <span class=\"nu0\">987</span>  <span class=\"nu0\">0.9594184</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">17</span>       <span class=\"nu0\">1597</span>  <span class=\"nu0\">0.9594188</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">18</span>       <span class=\"nu0\">2584</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">19</span>       <span class=\"nu0\">4181</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">20</span>       <span class=\"nu0\">6765</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">21</span>      <span class=\"nu0\">10946</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">22</span>      <span class=\"nu0\">17711</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">23</span>      <span class=\"nu0\">28657</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">24</span>      <span class=\"nu0\">46368</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">25</span>      <span class=\"nu0\">75025</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">26</span>     <span class=\"nu0\">121393</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">27</span>     <span class=\"nu0\">196418</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">28</span>     <span class=\"nu0\">317811</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">29</span>     <span class=\"nu0\">514229</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">30</span>     <span class=\"nu0\">832040</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">31</span>    <span class=\"nu0\">1346269</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">32</span>    <span class=\"nu0\">2178309</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">33</span>    <span class=\"nu0\">3524578</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">34</span>    <span class=\"nu0\">5702887</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">35</span>    <span class=\"nu0\">9227465</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">36</span>   <span class=\"nu0\">14930352</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/> <span class=\"nu0\">37</span>   <span class=\"nu0\">24157817</span>  <span class=\"nu0\">0.9594187</span> <span class=\"sy0\">&lt;</span>too long<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 31, "block": "<pre class=\"rsplus highlighted_source\">entropy <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sapply.html\"><span class=\"kw2\">sapply</span></a><span class=\"br0\">(</span>s, entropy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  freq <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/prop.table.html\"><span class=\"kw2\">prop.<span class=\"me1\">table</span></span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/table.html\"><span class=\"kw2\">table</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/strsplit.html\"><span class=\"kw2\">strsplit</span></a><span class=\"br0\">(</span>s, <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  ret <span class=\"sy0\">&lt;-</span> <span class=\"sy0\">-</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>freq <span class=\"sy0\">*</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/log.html\"><span class=\"kw2\">log</span></a><span class=\"br0\">(</span>freq, base<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fibwords <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    fibwords <span class=\"sy0\">&lt;-</span> <span class=\"st0\">\"1\"</span><br/>  <span class=\"kw1\">else</span><br/>    fibwords <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/for.html\"><span class=\"kw2\">for</span></a> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>      fibwords <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span>fibwords, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>fibwords<span class=\"br0\">[</span>i<span class=\"sy0\">-</span>1L<span class=\"br0\">]</span>, fibwords<span class=\"br0\">[</span>i<span class=\"sy0\">-</span>2L<span class=\"br0\">]</span>, sep<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/utils/html/str.html\"><span class=\"kw8\">str</span></a> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/replicate.html\"><span class=\"kw2\">replicate</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">7</span>, <span class=\"st0\">\"too long\"</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> NULL<br/>  fibwords.<span class=\"me1\">print</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span>fibwords<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span>n, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">]</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/utils/html/str.html\"><span class=\"kw8\">str</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>  ret <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/data.frame.html\"><span class=\"kw2\">data.<span class=\"me1\">frame</span></span></a><span class=\"br0\">(</span>Length<span class=\"sy0\">=</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/nchar.html\"><span class=\"kw2\">nchar</span></a><span class=\"br0\">(</span>fibwords<span class=\"br0\">)</span>, Entropy<span class=\"sy0\">=</span>entropy<span class=\"br0\">(</span>fibwords<span class=\"br0\">)</span>, Fibwords<span class=\"sy0\">=</span>fibwords.<span class=\"me1\">print</span><span class=\"br0\">)</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/rownames.html\"><span class=\"kw2\">rownames</span></a><span class=\"br0\">(</span>ret<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> NULL<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Racket", "loc": 62, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(provide F-Word gen-F-Word (struct-out f-word) f-word-max-length)<br/>(require \"entropy.rkt\")\u00a0; save Entropy task implementation as \"entropy.rkt\"<br/>\u00a0<br/>(define f-word-max-length (make-parameter 80))<br/>(define-struct f-word (str length count-0 count-1))<br/>(define (string-&gt;f-word str)<br/>  (apply f-word str<br/>         (call-with-values<br/>          (\u03bb ()<br/>            (for/fold<br/>                ((l 0) (zeros 0) (ones 0))<br/>              ((c str))<br/>              (match c<br/>                (#\\0 (values (add1 l) (add1 zeros) ones))<br/>                (#\\1 (values (add1 l) zeros (add1 ones))))))<br/>          list)))<br/>(define F-Word# (make-hash))<br/>\u00a0<br/>(define (gen-F-Word n #:key-id key-id #:word-1 word-1 #:word-2 word-2 #:merge-fn merge-fn)<br/>  (define sub-F-Word (match-lambda (1 word-1) (2 word-2) ((? number? n) (merge-fn n))))<br/>  (hash-ref! F-Word# (list key-id (f-word-max-length) n) (\u03bb () (sub-F-Word n))))<br/>\u00a0<br/>(define (F-Word n)<br/>  (define f-word-1 (string-&gt;f-word \"1\"))<br/>  (define f-word-2 (string-&gt;f-word \"0\"))<br/>  (define (f-word-merge&gt;2 n)<br/>    (define f-1 (F-Word (- n 1)))<br/>    (define f-2 (F-Word (- n 2)))<br/>    (define length+  (+ (f-word-length f-1) (f-word-length f-2)))<br/>    (define count-0+ (+ (f-word-count-0 f-1) (f-word-count-0 f-2)))<br/>    (define count-1+ (+ (f-word-count-1 f-1) (f-word-count-1 f-2)))<br/>    (define str+<br/>      (if (and (f-word-max-length)<br/>               (&gt; length+ (f-word-max-length)))<br/>          (format \"&lt;string too long (~a)&gt;\" length+)<br/>          (string-append (f-word-str f-1) (f-word-str f-2))))<br/>    (f-word str+ length+ count-0+ count-1+))<br/>\u00a0<br/>  (gen-F-Word n<br/>              #:key-id 'words<br/>              #:word-1 f-word-1<br/>              #:word-2 f-word-2<br/>              #:merge-fn f-word-merge&gt;2))<br/>\u00a0<br/>(module+ main<br/>  (parameterize ((f-word-max-length 80))<br/>    (for ((n (sequence-map add1 (in-range 37))))<br/>      (define W (F-Word n))<br/>      (define e (hash-entropy (hash 0 (f-word-count-0 W)<br/>                                    1 (f-word-count-1 W))))<br/>      (printf \"~a ~a ~a ~a~%\"<br/>              (~a n #:width 3 #:align 'right)<br/>              (~a (f-word-length W) #:width 9 #:align 'right)<br/>              (real-&gt;decimal-string e 12)<br/>              (~a (f-word-str W))))))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-match (F-Word 4) (f-word \"010\" _ _ _))<br/>  (check-match (F-Word 5) (f-word \"01001\" _ _ _))<br/>  (check-match (F-Word 8) (f-word \"010010100100101001010\" _ _ _)))</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays the number of chars in a fibonacci word, and the word's entropy.*/</span><br/>d=<span class=\"nu0\">20</span>;     de=d+<span class=\"nu0\">6</span>;    <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> de           <span class=\"coMULTI\">/*use more precision (the default is 9)*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*get optional argument from the C.L.  */</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">42</span>                    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'N'</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"length\"</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'entropy'</span>, de<span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"Fib word\"</span>, <span class=\"nu0\">56</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\"</span>     , <span class=\"nu0\">12</span><span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>      , de<span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\"</span>       , <span class=\"nu0\">56</span><span class=\"br0\">)</span><br/>c=<span class=\"nu0\">1</span>                                              <span class=\"coMULTI\">/* [\u2193]  display   N   fibonacci words. */</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">if</span> j==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> c=<span class=\"nu0\">0</span>          <span class=\"coMULTI\">/*test for the case of  J  equals  2.  */</span><br/>      <span class=\"kw1\">if</span> j==<span class=\"nu0\">3</span> <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"kw2\">with</span> a b      <span class=\"coMULTI\">/*  \"   \"   \"    \"   \"  \"    \"     3.  */</span><br/>      <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> c=b <span class=\"sy0\">||</span> a;  L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*calculate the FIBword  if we need to.*/</span><br/>      <span class=\"kw1\">if</span> L<span class=\"sy0\">&lt;</span><span class=\"nu0\">56</span>  <span class=\"kw3\">then</span> Fw= c<br/>               <span class=\"kw3\">else</span> Fw= <span class=\"st0\">'{the word is too wide to display, length is: '</span> L<span class=\"st0\">\"}\"</span><br/>      <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">4</span><span class=\"br0\">)</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>L,<span class=\"nu0\">12</span><span class=\"br0\">)</span>    <span class=\"st0\">'  '</span>    entropy<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"st0\">\"  \"</span>    Fw<br/>      a=b;   b=c                                 <span class=\"coMULTI\">/*define the new values for  A  and  B.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                <span class=\"coMULTI\">/*display text msg;                    */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>entropy: <span class=\"kw1\">if</span> L==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, d+<span class=\"nu0\">2</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*handle special case of one character.*/</span><br/>        \u00a0!<span class=\"sy0\">.</span>0=<span class=\"kw6\">length</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>c,,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*efficient way to count the  \"zeroes\".*/</span><br/>        \u00a0!<span class=\"sy0\">.</span>1=L-!<span class=\"sy0\">.</span>0; $=<span class=\"nu0\">0</span>;  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">2</span>;   _=i-<span class=\"nu0\">1</span> <span class=\"coMULTI\">/*construct character from the ether.  */</span><br/>                          $=$ -!<span class=\"sy0\">.</span>_<span class=\"sy0\">/</span>L<span class=\"sy0\">*</span>log2<span class=\"br0\">(</span>!<span class=\"sy0\">.</span>_<span class=\"sy0\">/</span>L<span class=\"br0\">)</span> <span class=\"coMULTI\">/*add  (negatively)  the entropies.    */</span><br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>         <span class=\"kw1\">if</span> $=<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>   <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, d+<span class=\"nu0\">2</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/*return a left\u2500justified  \"1\"  (one). */</span><br/>                      <span class=\"kw1\">return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>$,,d<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*normalize the sum  (S)  number.      */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>log2: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> xx;  ig=x<span class=\"sy0\">&gt;</span><span class=\"nu0\">1.5</span>;  is=<span class=\"nu0\">1</span>-<span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>ig<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">5</span>+<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      e=<span class=\"nu0\">2.71828182845904523536028747135266249775724709369995957496696762772407663035354759</span><br/>      m=<span class=\"nu0\">0</span>;  <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>  ig <span class=\"sy0\">&amp;</span> xx<span class=\"sy0\">&gt;</span><span class=\"nu0\">1.5</span> <span class=\"sy0\">|</span> <span class=\"sy0\">\\</span>ig<span class=\"sy0\">&amp;</span>xx<span class=\"sy0\">&lt;.</span>5;   _=e;         <span class=\"kw1\">do</span> j=-<span class=\"nu0\">1</span>;   iz=xx<span class=\"sy0\">*</span> _ <span class=\"sy0\">**</span> - is<br/>            <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> ig <span class=\"sy0\">&amp;</span> iz<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"sy0\">\\</span>ig<span class=\"sy0\">&amp;</span>iz<span class=\"sy0\">&gt;.</span>5  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;  _=_<span class=\"sy0\">*</span>_; izz=iz;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>            xx=izz;  m=m+is<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>j;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*while*/</span>;     x=x<span class=\"sy0\">*</span> e<span class=\"sy0\">**</span> -m -<span class=\"nu0\">1</span>;   z=<span class=\"nu0\">0</span>;   _=-<span class=\"nu0\">1</span>;   p=z<br/>                   <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>;   _=-_<span class=\"sy0\">*</span>x;   z=z+_<span class=\"sy0\">/</span>k;   <span class=\"kw1\">if</span> z=p  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;   p=z;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>            r=z+m;            <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> r;             <span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> log2<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"sy0\">.</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Fibonacci word<br/>\u00a0<br/>fw1 = \"1\"<br/>fw2 = \"0\"<br/>\u00a0<br/>see \"N   Length  Entropy                Word\" + nl<br/>n = 1<br/>see \"\" + n + \"      \" + len(fw1) + \"           \" + calcentropy(fw1,2) + \"      \" + fw1 + nl<br/>n = 2<br/>see \"\" + n + \"      \" + len(fw2) + \"           \" + calcentropy(fw2,2) + \"      \" + fw2 + nl<br/>\u00a0<br/>for n = 1 to 55 <br/>      fw3 = fw2 + fw1<br/>      temp = fw2<br/>      fw2 = fw3<br/>      fw1 = temp<br/>      if len(fw3) &lt; 55<br/>         see \"\" + (n+2) + \"      \" + len(fw3) + \"          \" + calcentropy(fw3,2) + \"     \" + fw3 + nl<br/>      ok<br/>next<br/>\u00a0<br/>func calcentropy(source,b)<br/>        decimals(11)<br/>        entropy = 0<br/>        countOfChar = list(255) <br/>        charCount  =len( source)<br/>        usedChar  =\"\" <br/>        for i =1 to len( source)  <br/>             ch =substr(source, i, 1)<br/>             if not(substr( usedChar, ch))<br/>                usedChar =usedChar +ch<br/>             ok<br/>             j  =substr( usedChar, ch)<br/>            countOfChar[j] =countOfChar[j] +1<br/>        next  <br/>        l =len(usedChar)<br/>        for i =1 to l<br/>             probability =countOfChar[i] /charCount<br/>             entropy =entropy - (probability *logBase(probability, 2))<br/>        next <br/>        return entropy<br/>\u00a0<br/>func swap(a, b)<br/>        temp = a<br/>        a = b<br/>        b = temp<br/>        return [a, b]<br/>\u00a0<br/>func logBase (x, b) <br/>        logBase =log( x) /log( 2)<br/>        return logBase<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 24, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#encoding: ASCII-8BIT</span><br/>\u00a0<br/><span class=\"kw1\">def</span> entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  counts = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>  s.<span class=\"me1\">each_char</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> counts<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>  leng = s.<span class=\"me1\">length</span><br/>\u00a0<br/>  counts.<span class=\"me1\">values</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>entropy, count<span class=\"sy0\">|</span><br/>    freq = count <span class=\"sy0\">/</span> leng<br/>    entropy <span class=\"sy0\">-</span> freq <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log2</span><span class=\"br0\">(</span>freq<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>n_max = <span class=\"nu0\">37</span><br/>words = <span class=\"br0\">[</span><span class=\"st0\">'1'</span>, <span class=\"st0\">'0'</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> words.<span class=\"me1\">length</span> ... <span class=\"me1\">n_max</span><br/>  words <span class=\"sy0\">&lt;&lt;</span> words<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> words<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">'%3s\u00a0%9s\u00a0%15s \u00a0%s'</span> <span class=\"sy0\">%</span> <span class=\"sy0\">%</span>w<span class=\"br0\">[</span>N Length Entropy Fibword<span class=\"br0\">]</span><br/>words.<span class=\"me1\">each</span>.<span class=\"me1\">with_index</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>word, i<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">'%3i\u00a0%9i\u00a0%15.12f \u00a0%s'</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>i, word.<span class=\"me1\">length</span>, entropy<span class=\"br0\">(</span>word<span class=\"br0\">)</span>, word.<span class=\"me1\">length</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">60</span>\u00a0? word\u00a0: <span class=\"st0\">'&lt;too long&gt;'</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 46, "block": "<pre class=\"text highlighted_source\">struct Fib&lt;T&gt; {<br/>    curr: T,<br/>    next: T,<br/>}<br/>\u00a0<br/>impl&lt;T&gt; Fib&lt;T&gt; {<br/>    fn new(curr: T, next: T) -&gt; Self {<br/>        Fib { curr: curr, next: next, }<br/>    }<br/>}<br/>\u00a0<br/>impl Iterator for Fib&lt;String&gt;  {<br/>    type Item = String;<br/>    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {<br/>        let ret = self.curr.clone();<br/>        self.curr = self.next.clone();<br/>        self.next = format!(\"{}{}\", ret, self.next);<br/>        Some(ret)<br/>    }<br/>}<br/>\u00a0<br/>fn get_entropy(s: &amp;[u8]) -&gt; f64 {<br/>    let mut entropy = 0.0;<br/>    let mut histogram = [0.0; 256];<br/>\u00a0<br/>    for i in 0..s.len() {<br/>        histogram.get_mut(s[i] as usize).map(|v| *v += 1.0);<br/>    }<br/>\u00a0<br/>    for i in 0..256 {<br/>        if histogram[i] &gt; 0.0 {<br/>            let ratio = histogram[i] / s.len() as f64;<br/>            entropy -= ratio * ratio.log2();<br/>        }<br/>    }<br/>    entropy<br/>}<br/>\u00a0<br/>fn main() {<br/>    let f = Fib::new(\"1\".to_string(), \"0\".to_string());<br/>        println!(\"{:10} {:10} {:10} {:60}\", \"N\", \"Length\", \"Entropy\", \"Word\");<br/>    for (i, s) in f.take(37).enumerate() {<br/>        let word = if s.len() &gt; 60 {\"Too long\"} else {&amp;*s};<br/>        println!(\"{:10} {:10} {:.10} {:60}\", i + 1, s.len(), get_entropy(&amp;s.bytes().collect::&lt;Vec&lt;_&gt;&gt;()), word);<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 19, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><span class=\"co1\">//word iterator</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fibIt <span class=\"sy0\">=</span> Iterator.<span class=\"me1\">iterate</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>f1,f2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>f2,f1+f2<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">//entropy calculator</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> entropy<span class=\"br0\">(</span>src<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xs <span class=\"sy0\">=</span> src.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span>identity<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>  xs.<span class=\"me1\">foreach</span><span class=\"br0\">{</span>c <span class=\"sy0\">=&gt;</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> c.<span class=\"me1\">toDouble</span> / src.<span class=\"me1\">length</span><br/>    result -<span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> / Math.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  result<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//printing (spaces inserted to get the tabs align properly)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> it <span class=\"sy0\">=</span> fibIt.<span class=\"me1\">zipWithIndex</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>w <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>w.<span class=\"sy0\">_</span>2, w.<span class=\"sy0\">_</span>1.<span class=\"me1\">length</span>, entropy<span class=\"br0\">(</span>w.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span>it.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n,l,e<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s<span class=\"st0\">\"$n).<span class=\"es1\">\\t</span>$l       <span class=\"es1\">\\t</span>$e\"</span><span class=\"br0\">}</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 44, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme inexact<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"nu0\">38</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> i <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                           <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; in this context, word only contains 1 or 0 </span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>entropy word<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>N <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>num<span class=\"sy0\">-</span>ones <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>num<span class=\"sy0\">-</span>zeros <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>string<span class=\"sy0\">-</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">char=?</span> c #\\<span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>                         <span class=\"br0\">(</span><span class=\"kw1\">set!</span> num<span class=\"sy0\">-</span>ones <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> num<span class=\"sy0\">-</span>ones<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">set!</span> num<span class=\"sy0\">-</span>zeros <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> num<span class=\"sy0\">-</span>zeros<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     word<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> num<span class=\"sy0\">-</span>ones<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> num<span class=\"sy0\">-</span>zeros<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"nu0\">0</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">0</span> <br/>         <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> num<span class=\"sy0\">-</span>ones N<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> num<span class=\"sy0\">-</span>ones N<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> num<span class=\"sy0\">-</span>zeros N<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> num<span class=\"sy0\">-</span>zeros N<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; display values</span><br/><span class=\"br0\">(</span>create<span class=\"sy0\">-</span>words<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i <span class=\"br0\">(</span><span class=\"kw1\">vector-length</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> i<span class=\"br0\">)</span><br/>                          <span class=\"st0\">\" \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <br/>                            <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"st0\">\" \"</span><br/>                          <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span><br/>                            <span class=\"br0\">(</span>entropy <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"sy0\">*</span>words<span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scilab", "loc": 31, "block": "<pre class=\"text highlighted_source\">exec('.\\entropy.sci',0);<br/>\u00a0<br/>function word=fiboword(n)<br/>    word_1 = '1'; word_2 = '0';<br/>    select n<br/>    case 1<br/>        word = word_1<br/>    case 2<br/>        word = word_2;<br/>    case 3<br/>        word = strcat([word_2 word_1]);<br/>    else<br/>        word = strcat([fiboword(n-1) fiboword(n-2)])<br/>    end<br/>endfunction<br/>\u00a0<br/>final_length = 37;<br/>\u00a0<br/>N=[1:final_length]';<br/>char_length = zeros(N);<br/>entropies = zeros(N);<br/>tic();<br/>for i=1:final_length<br/>    word = fiboword(i);<br/>    char_length(i) = length(word);<br/>    entropies(i) = entropy(word);<br/>end<br/>time = toc();<br/>\u00a0<br/>disp('EXECUTION TIME: '+string(time)+'s.');<br/>disp(['N', 'LENGTH', 'ENTROPY'; string([N char_length entropies])]);</pre>"}, {"lang": "Seed7", "loc": 53, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const func float: entropy (in string: stri) is func<br/>  result<br/>    var float: entropy is 0.0;<br/>  local<br/>    var hash [char] integer: count is (hash [char] integer).value;<br/>    var char: ch is ' ';<br/>    var float: p is 0.0;<br/>  begin<br/>    for ch range stri do<br/>      if ch in count then<br/>        incr(count[ch]);<br/>      else<br/>        count @:= [ch] 1;<br/>      end if;<br/>    end for;<br/>    for key ch range count do<br/>      p\u00a0:= flt(count[ch]) / flt(length(stri));<br/>      entropy -:= p * log(p) / log(2.0);<br/>    end for;<br/>  end func\u00a0;<br/>\u00a0<br/>const func string: fibWord (in integer: number) is func<br/>  result<br/>    var string: fibWord is \"1\";<br/>  local<br/>    var integer: i is 0;<br/>    var string: a is \"1\";<br/>    var string: c is \"\";<br/>  begin<br/>    if number &gt;= 2 then<br/>      fibWord\u00a0:= \"0\";<br/>      for i range 3 to number do<br/>        c\u00a0:= a;<br/>        a\u00a0:= fibWord;<br/>        fibWord &amp;:= c;<br/>      end for;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: index is 0;<br/>    var string: fibWord is \"\";<br/>  begin<br/>    for index range 1 to 37 do<br/>      fibWord\u00a0:= fibWord(index);<br/>      writeln(index lpad 2 &lt;&amp; length(fibWord) lpad 10 &lt;&amp; \" \" &lt;&amp; entropy(fibWord) digits 15);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\">func entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>s.<span class=\"me1\">chars</span>.<span class=\"me1\">freq</span>.<span class=\"me1\">values</span>\u00a0\u00bb<span class=\"sy0\">/</span>\u00bb s.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> reduce <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span><br/>        a <span class=\"sy0\">-</span> b<span class=\"sy0\">*</span>b.<span class=\"me1\">log2</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var n_max = <span class=\"nu0\">37</span><br/>var words = <span class=\"br0\">[</span><span class=\"st0\">'1'</span>, <span class=\"st0\">'0'</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>    words.<span class=\"me1\">append</span><span class=\"br0\">(</span>words<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> words<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n_max <span class=\"sy0\">-</span> words.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"br0\">(</span><span class=\"st0\">'%3s\u00a0%10s\u00a0%15s \u00a0%s'</span> <span class=\"sy0\">%</span> <span class=\"sy0\">&lt;</span>N Length Entropy Fibword<span class=\"sy0\">&gt;</span>...<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> ^words <span class=\"br0\">{</span><br/>    var word = words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    say <span class=\"br0\">(</span><span class=\"st0\">'%3i\u00a0%10i\u00a0%15.12f \u00a0%s'</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,<br/>                                   word.<span class=\"me1\">len</span>,<br/>                                   entropy<span class=\"br0\">(</span>word<span class=\"br0\">)</span>,<br/>                                   word.<span class=\"me1\">len</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">30</span>\u00a0? word\u00a0: <span class=\"st0\">'&lt;too long&gt;'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 28, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> fibwords <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> fw <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$fw</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> fw <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$fw</span> end<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$fw</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$fw</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> fibwordinfo <span class=\"br0\">{</span>num word<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Entropy calculator from Tcl solution of that task</span><br/>    <span class=\"kw1\">set</span> log2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> log<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$word</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> char <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$word</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>dict <span class=\"kw2\">incr</span> counts <span class=\"re0\">$char</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> entropy <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">foreach</span> count <span class=\"br0\">[</span>dict values <span class=\"re0\">$counts</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> freq <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> / double<span class=\"br0\">(</span><span class=\"re0\">$len</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> entropy <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$entropy</span> - <span class=\"re0\">$freq</span> <span class=\"sy0\">*</span> log<span class=\"br0\">(</span><span class=\"re0\">$freq</span><span class=\"br0\">)</span>/<span class=\"re0\">$log2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Output formatting from Clojure solution</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%2d\u00a0%10d\u00a0%.15f\u00a0%s\"</span> <span class=\"re0\">$num</span> <span class=\"re0\">$len</span> <span class=\"re0\">$entropy</span> \\<br/>\t    <span class=\"br0\">[</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$len</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">35</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> word<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">subst</span> <span class=\"st0\">\"&lt;too long&gt;\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Output formatting from Clojure solution</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%2s\u00a0%10s\u00a0%17s\u00a0%s\"</span> N Length Entropy Fibword<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> word <span class=\"br0\">[</span>fibwords <span class=\"nu0\">37</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    fibwordinfo <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> <span class=\"re0\">$word</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 14, "block": "<pre class=\"text highlighted_source\">fcn entropy(bs){ //binary String--&gt;Float<br/>   len:=bs.len(); num1s:=(bs-\"0\").len();<br/>   T(num1s,len-num1s).filter().apply('wrap(p){ p=p.toFloat()/len; -p*p.log() })<br/>   .sum(0.0) / (2.0).log();<br/>}<br/>\u00a0<br/>\"  N     Length      Entropy Fibword\".println();<br/>ws:=L(\"1\",\"0\");<br/>foreach n in ([1..37]){<br/>   if(n&gt;2) ws.append(ws[-1]+ws[-2]);<br/>   w:=ws[-1];<br/>   \"%3d\u00a0%10d\u00a0%2.10f\u00a0%s\".fmt(n,w.len(),entropy(w),<br/>      w.len()&lt;50 and w or \"&lt;too long&gt;\").println();<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 35, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> x$=<span class=\"st0\">\"1\"</span>: <span class=\"kw1\">LET</span> y$=<span class=\"st0\">\"0\"</span>: <span class=\"kw1\">LET</span> z$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"N, Length, Entropy, Word\"</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">1</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> n;<span class=\"st0\">\" \"</span>;<span class=\"kw3\">LEN</span> x$;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> s$=x$: <span class=\"kw1\">LET</span> base=<span class=\"nu0\">2</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">PRINT</span> entropy<br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> x$<br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">2</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> n;<span class=\"st0\">\" \"</span>;<span class=\"kw3\">LEN</span> y$;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">100</span> <span class=\"kw1\">LET</span> s$=y$: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span> entropy<br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> y$<br/><span class=\"nu0\">130</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">18</span><br/><span class=\"nu0\">140</span> <span class=\"kw1\">LET</span> x$=<span class=\"st0\">\"1\"</span>: <span class=\"kw1\">LET</span> y$=<span class=\"st0\">\"0\"</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">160</span> <span class=\"kw1\">LET</span> z$=y$+x$<br/><span class=\"nu0\">170</span> <span class=\"kw1\">LET</span> p$=x$: <span class=\"kw1\">LET</span> x$=y$: <span class=\"kw1\">LET</span> y$=p$<br/><span class=\"nu0\">180</span> <span class=\"kw1\">LET</span> p$=y$: <span class=\"kw1\">LET</span> y$=z$: <span class=\"kw1\">LET</span> z$=p$<br/><span class=\"nu0\">190</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">200</span> <span class=\"kw1\">LET</span> x$=<span class=\"st0\">\"\"</span>: <span class=\"kw1\">LET</span> z$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">210</span> <span class=\"kw1\">LET</span> s$=y$: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">220</span> <span class=\"kw1\">PRINT</span> n+<span class=\"nu0\">2</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw3\">LEN</span> y$;<span class=\"st0\">\" \"</span>;entropy<br/><span class=\"nu0\">230</span> <span class=\"kw1\">PRINT</span> y$ <span class=\"kw4\">AND</span> <span class=\"br0\">(</span><span class=\"kw3\">LEN</span> y$&lt;<span class=\"nu0\">32</span><span class=\"br0\">)</span><br/><span class=\"nu0\">240</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">250</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM Calculate entropy</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> sourcelen=<span class=\"kw3\">LEN</span> s$: <span class=\"kw1\">LET</span> entropy=<span class=\"nu0\">0</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">DIM</span> t<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> sourcelen<br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> digit=<span class=\"kw3\">VAL</span> s$<span class=\"br0\">(</span>j<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> t<span class=\"br0\">(</span>digit<span class=\"br0\">)</span>=t<span class=\"br0\">(</span>digit<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">1050</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">1060</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">255</span><br/><span class=\"nu0\">1070</span> <span class=\"kw1\">IF</span> t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> prop=t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>/sourcelen: <span class=\"kw1\">LET</span> entropy=entropy-<span class=\"br0\">(</span>prop*<span class=\"kw3\">LN</span> <span class=\"br0\">(</span>prop<span class=\"br0\">)</span>/<span class=\"kw3\">LN</span> <span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1080</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">1090</span> <span class=\"kw1\">RETURN</span></pre>"}]}