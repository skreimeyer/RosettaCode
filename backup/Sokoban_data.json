{"task": "Sokoban", "blocks": [{"lang": "C", "loc": 402, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> n_boxes<span class=\"sy0\">;</span><br/><span class=\"kw4\">uint8_t</span> <span class=\"sy0\">*</span>board<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>goals<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>live<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint16_t</span> cidx_t<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint32_t</span> hash_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* board configuration is represented by an array of cell indices<br/>   of player and boxes */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> state_t state_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> state_t <span class=\"br0\">{</span> <span class=\"co1\">// variable length</span><br/>\thash_t h<span class=\"sy0\">;</span><br/>\tstate_t <span class=\"sy0\">*</span>prev<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>next<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>qnext<span class=\"sy0\">;</span><br/>\tcidx_t c<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> state_size<span class=\"sy0\">,</span> block_size <span class=\"sy0\">=</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span><br/>state_t <span class=\"sy0\">*</span>block_root<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>block_head<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span><br/>state_t<span class=\"sy0\">*</span> newstate<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>parent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">inline</span> state_t<span class=\"sy0\">*</span> next_of<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>s <span class=\"sy0\">+</span> state_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tstate_t <span class=\"sy0\">*</span>ptr<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>block_head<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tblock_size <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\tstate_t <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>block_size <span class=\"sy0\">*</span> state_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> block_root<span class=\"sy0\">;</span><br/>\t\tblock_root <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>\t\tptr <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>p <span class=\"sy0\">+</span> state_size <span class=\"sy0\">*</span> block_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tp <span class=\"sy0\">=</span> block_head <span class=\"sy0\">=</span> next_of<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstate_t <span class=\"sy0\">*</span>q<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>q <span class=\"sy0\">=</span> next_of<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span> q <span class=\"sy0\">&lt;</span> ptr<span class=\"sy0\">;</span> p <span class=\"sy0\">=</span> q<span class=\"sy0\">,</span> q <span class=\"sy0\">=</span> next_of<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>\t\tp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tptr <span class=\"sy0\">=</span> block_head<span class=\"sy0\">;</span><br/>\tblock_head <span class=\"sy0\">=</span> block_head<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>\u00a0<br/>\tptr<span class=\"sy0\">-&gt;</span>prev <span class=\"sy0\">=</span> parent<span class=\"sy0\">;</span><br/>\tptr<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ptr<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span><br/><span class=\"kw4\">void</span> unnewstate<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tp<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> block_head<span class=\"sy0\">;</span><br/>\tblock_head <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> <span class=\"br0\">{</span> space<span class=\"sy0\">,</span> wall<span class=\"sy0\">,</span> player<span class=\"sy0\">,</span> box <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define E \"\\033[\"</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> <span class=\"kw4\">const</span> glyph1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> E<span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"281b194568\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span>E<span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> E<span class=\"st0\">\"33m$\"</span>E<span class=\"st0\">\"m\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> <span class=\"kw4\">const</span> glyph2<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> E<span class=\"st0\">\"32m.\"</span>E<span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> E<span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"4e7d7c230e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span>E<span class=\"st0\">\"m\"</span><span class=\"sy0\">,</span> E<span class=\"st0\">\"32m$\"</span>E<span class=\"st0\">\"m\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#undef E</span><br/>\u00a0<br/><span class=\"co1\">// mark up positions where a box definitely should not be</span><br/><span class=\"kw4\">void</span> mark_live<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> w<span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> c <span class=\"sy0\">%</span> w<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>live<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlive<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> w<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> w <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall<span class=\"br0\">)</span><br/>\t\tmark_live<span class=\"br0\">(</span>c <span class=\"sy0\">-</span> w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> h <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">+</span> w<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">+</span> w <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall<span class=\"br0\">)</span><br/>\t\tmark_live<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> w<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall<span class=\"br0\">)</span><br/>\t\tmark_live<span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> w <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> wall<span class=\"br0\">)</span><br/>\t\tmark_live<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>state_t <span class=\"sy0\">*</span>parse_board<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tw <span class=\"sy0\">=</span> x<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>\tboard <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>w <span class=\"sy0\">*</span> h<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgoals <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>w <span class=\"sy0\">*</span> h<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>goals<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlive  <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>w <span class=\"sy0\">*</span> h<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>live<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tn_boxes <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'#'</span><span class=\"sy0\">:</span>\tboard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> wall<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'.'</span><span class=\"sy0\">:</span>\t<span class=\"co1\">// fallthrough</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy0\">:</span>\tgoals<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// fallthrough</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'@'</span><span class=\"sy0\">:</span>\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy0\">:</span>\tgoals<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// fallthrough</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"st0\">'$'</span><span class=\"sy0\">:</span>\tn_boxes<span class=\"sy0\">++;</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span>\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> is <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstate_size <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>state_t<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n_boxes<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cidx_t<span class=\"br0\">)</span> <span class=\"sy0\">+</span> is <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">/</span> is <span class=\"sy0\">*</span> is<span class=\"sy0\">;</span><br/>\u00a0<br/>\tstate_t <span class=\"sy0\">*</span>state <span class=\"sy0\">=</span> newstate<span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>goals<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> mark_live<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span> <span class=\"sy0\">||</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>\t\t\tstate<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span><span class=\"sy0\">++</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span> <span class=\"sy0\">||</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>\t\t\tstate<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> state<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_board<span class=\"br0\">(</span><span class=\"kw4\">const</span> state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> b<span class=\"br0\">[</span>w <span class=\"sy0\">*</span> h<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> board<span class=\"sy0\">,</span> w <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tb<span class=\"br0\">[</span> s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> player<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n_boxes<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tb<span class=\"br0\">[</span> s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> box<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> w <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>goals<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> glyph2 <span class=\"sy0\">:</span> glyph1<span class=\"br0\">)</span><span class=\"br0\">[</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// K&amp;R hash function</span><br/><span class=\"kw2\">inline</span><br/><span class=\"kw4\">void</span> hash<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s<span class=\"sy0\">-&gt;</span>h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">register</span> hash_t ha <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\tcidx_t <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>c<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n_boxes<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tha <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">31</span> <span class=\"sy0\">*</span> ha<span class=\"sy0\">;</span><br/>\t\ts<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">=</span> ha<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>state_t <span class=\"sy0\">**</span>buckets<span class=\"sy0\">;</span><br/>hash_t hash_size<span class=\"sy0\">,</span> fill_limit<span class=\"sy0\">,</span> filled<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> extend_table<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> old_size <span class=\"sy0\">=</span> hash_size<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>old_size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\thash_size <span class=\"sy0\">=</span> <span class=\"nu0\">1024</span><span class=\"sy0\">;</span><br/>\t\tfilled <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\tfill_limit <span class=\"sy0\">=</span> hash_size <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"co1\">// 0.75 load factor</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\thash_size <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\tfill_limit <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tbuckets <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>buckets<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>state_t<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> hash_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>buckets<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// rehash</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>buckets <span class=\"sy0\">+</span> old_size<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>state_t<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>hash_size <span class=\"sy0\">-</span> old_size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">const</span> hash_t bits <span class=\"sy0\">=</span> hash_size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> old_size<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tstate_t <span class=\"sy0\">*</span>head <span class=\"sy0\">=</span> buckets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tbuckets<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>head<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tstate_t <span class=\"sy0\">*</span>next <span class=\"sy0\">=</span> head<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> head<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">&amp;</span> bits<span class=\"sy0\">;</span><br/>\t\t\thead<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> buckets<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tbuckets<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> head<span class=\"sy0\">;</span><br/>\t\t\thead <span class=\"sy0\">=</span> next<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>state_t <span class=\"sy0\">*</span>lookup<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\thash<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstate_t <span class=\"sy0\">*</span>f <span class=\"sy0\">=</span> buckets<span class=\"br0\">[</span>s<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>hash_size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> f<span class=\"sy0\">;</span> f <span class=\"sy0\">=</span> f<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"co1\">//(f-&gt;h == s-&gt;h) &amp;&amp;</span><br/>\t\t\t<span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcmp.html\"><span class=\"kw3\">memcmp</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>c<span class=\"sy0\">,</span> f<span class=\"sy0\">-&gt;</span>c<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cidx_t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n_boxes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> f<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool add_to_table<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>lookup<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tunnewstate<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>filled<span class=\"sy0\">++</span> <span class=\"sy0\">&gt;=</span> fill_limit<span class=\"br0\">)</span><br/>\t\textend_table<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\thash_t i <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>hash_size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ts<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> buckets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tbuckets<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool success<span class=\"br0\">(</span><span class=\"kw4\">const</span> state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n_boxes<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>goals<span class=\"br0\">[</span>s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>state_t <span class=\"sy0\">*</span>move_me<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> dy<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> dx<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> w<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span> w<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> y1 <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> dy<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> x1 <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dx<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> c1 <span class=\"sy0\">=</span> y1 <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> x1<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>y1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> y1 <span class=\"sy0\">&gt;</span> h <span class=\"sy0\">||</span> x1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> x1 <span class=\"sy0\">&gt;</span> w<br/>\t\t\t<span class=\"sy0\">||</span> board<span class=\"br0\">[</span>c1<span class=\"br0\">]</span> <span class=\"sy0\">==</span> wall<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> at_box <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n_boxes<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> c1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tat_box <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> c2<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>at_box<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tc2 <span class=\"sy0\">=</span> c1 <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> dx<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>c2<span class=\"br0\">]</span> <span class=\"sy0\">==</span> wall <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>live<span class=\"br0\">[</span>c2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n_boxes<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> c2<span class=\"br0\">)</span> <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tstate_t <span class=\"sy0\">*</span>n <span class=\"sy0\">=</span> newstate<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> s<span class=\"sy0\">-&gt;</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>cidx_t<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n_boxes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tcidx_t <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>c<span class=\"sy0\">;</span><br/>\tp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c1<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>at_box<span class=\"br0\">)</span> p<span class=\"br0\">[</span>at_box<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c2<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// leet bubble sort</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n_boxes<span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"sy0\">;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tcidx_t t <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> p<span class=\"br0\">[</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\tt <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>t<span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>state_t <span class=\"sy0\">*</span>next_level<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>done<span class=\"sy0\">;</span><br/>\u00a0<br/>bool queue_move<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>s <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>add_to_table<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>success<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Success!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tdone <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\ts<span class=\"sy0\">-&gt;</span>qnext <span class=\"sy0\">=</span> next_level<span class=\"sy0\">;</span><br/>\tnext_level <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool do_move<span class=\"br0\">(</span>state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span>     queue_move<span class=\"br0\">(</span>move_me<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">||</span> queue_move<span class=\"br0\">(</span>move_me<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">||</span> queue_move<span class=\"br0\">(</span>move_me<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">||</span> queue_move<span class=\"br0\">(</span>move_me<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_moves<span class=\"br0\">(</span><span class=\"kw4\">const</span> state_t <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>prev<span class=\"br0\">)</span><br/>\t\tshow_moves<span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>prev<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tusleep<span class=\"br0\">(</span><span class=\"nu0\">200000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[H\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_board<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstate_t <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> parse_board<span class=\"br0\">(</span><br/>\u00a0<br/><span class=\"co2\">#define BIG 0</span><br/>\u00a0<br/><span class=\"co2\">#if BIG == 0</span><br/>\t\t<span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"#######\"</span><br/>\t\t<span class=\"st0\">\"#     #\"</span><br/>\t\t<span class=\"st0\">\"#     #\"</span><br/>\t\t<span class=\"st0\">\"#. #  #\"</span><br/>\t\t<span class=\"st0\">\"#. $$ #\"</span><br/>\t\t<span class=\"st0\">\"#.$$  #\"</span><br/>\t\t<span class=\"st0\">\"#.#  @#\"</span><br/>\t\t<span class=\"st0\">\"#######\"</span><br/>\u00a0<br/><span class=\"co2\">#elif BIG == 1</span><br/>\t\t<span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"#############\"</span><br/>\t\t<span class=\"st0\">\"#  #        #\"</span><br/>\t\t<span class=\"st0\">\"# $$$$$$$  @#\"</span><br/>\t\t<span class=\"st0\">\"#.......    #\"</span><br/>\t\t<span class=\"st0\">\"#############\"</span><br/>\u00a0<br/><span class=\"co2\">#elif BIG == 2</span><br/>\t\t<span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"#############\"</span><br/>\t\t<span class=\"st0\">\"#... #      #\"</span><br/>\t\t<span class=\"st0\">\"#.$$$$$$$  @#\"</span><br/>\t\t<span class=\"st0\">\"#...        #\"</span><br/>\t\t<span class=\"st0\">\"#############\"</span><br/>\u00a0<br/><span class=\"co2\">#else</span><br/>\t\t<span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"st0\">\"    #####          \"</span><br/>\t\t<span class=\"st0\">\"    #   #          \"</span><br/>\t\t<span class=\"st0\">\"    #   #          \"</span><br/>\t\t<span class=\"st0\">\"  ### #$##         \"</span><br/>\t\t<span class=\"st0\">\"  #      #         \"</span><br/>\t\t<span class=\"st0\">\"### #$## #   ######\"</span><br/>\t\t<span class=\"st0\">\"#   # ## #####   .#\"</span><br/>\t\t<span class=\"st0\">\"# $   $         ..#\"</span><br/>\t\t<span class=\"st0\">\"##### ### #@##   .#\"</span><br/>\t\t<span class=\"st0\">\"    #     #########\"</span><br/>\t\t<span class=\"st0\">\"    #######        \"</span><br/><span class=\"co2\">#endif</span><br/>\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tshow_board<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\textend_table<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tqueue_move<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"depth\u00a0%d<span class=\"es1\">\\r</span>\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tstate_t <span class=\"sy0\">*</span>head <span class=\"sy0\">=</span> next_level<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>next_level <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span> head <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>done<span class=\"sy0\">;</span> head <span class=\"sy0\">=</span> head<span class=\"sy0\">-&gt;</span>qnext<span class=\"br0\">)</span><br/>\t\t\tdo_move<span class=\"br0\">(</span>head<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>next_level<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"no solution?\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"press any key to see moves<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getchar.html\"><span class=\"kw3\">getchar</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[H<span class=\"es5\">\\033</span>[J\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshow_moves<span class=\"br0\">(</span>done<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#if 0</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>buckets<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>board<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>goals<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>live<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>block_root<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">void</span> <span class=\"sy0\">*</span>tmp <span class=\"sy0\">=</span> block_root<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>block_root<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tblock_root <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 154, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;queue&gt;</span><br/><span class=\"co2\">#include &lt;regex&gt;</span><br/><span class=\"co2\">#include &lt;tuple&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;array&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Board<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span> sData, dData<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> px, py<span class=\"sy4\">;</span><br/>\u00a0<br/>  Board<span class=\"br0\">(</span>string b<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    regex pattern<span class=\"br0\">(</span><span class=\"st0\">\"([^<span class=\"es1\">\\\\</span>n]+)<span class=\"es1\">\\\\</span>n?\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    sregex_iterator end, iter<span class=\"br0\">(</span>b.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, b.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, pattern<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> w <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> data<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"sy4\">;</span> iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> end<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>iter<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      data.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>iter<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      w <span class=\"sy1\">=</span> max<span class=\"br0\">(</span>w, <span class=\"br0\">(</span><span class=\"sy2\">*</span>iter<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> v <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> v <span class=\"sy1\">&lt;</span> data.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>v<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> sTemp, dTemp<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> u <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> u <span class=\"sy1\">&lt;</span> w<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>u<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>u <span class=\"sy1\">&gt;</span> data<span class=\"br0\">[</span>v<span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          sTemp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          dTemp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>          <span class=\"kw4\">char</span> s <span class=\"sy1\">=</span> <span class=\"st0\">' '</span>, d <span class=\"sy1\">=</span> <span class=\"st0\">' '</span>, c <span class=\"sy1\">=</span> data<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>            s <span class=\"sy1\">=</span> <span class=\"st0\">'#'</span><span class=\"sy4\">;</span><br/>          <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'.'</span> <span class=\"sy3\">||</span> c <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span> <span class=\"sy3\">||</span> c <span class=\"sy1\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>            s <span class=\"sy1\">=</span> <span class=\"st0\">'.'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'@'</span> <span class=\"sy3\">||</span> c <span class=\"sy1\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            d <span class=\"sy1\">=</span> <span class=\"st0\">'@'</span><span class=\"sy4\">;</span><br/>            px <span class=\"sy1\">=</span> u<span class=\"sy4\">;</span><br/>            py <span class=\"sy1\">=</span> v<span class=\"sy4\">;</span><br/>          <span class=\"br0\">}</span><span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'$'</span> <span class=\"sy3\">||</span> c <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>            d <span class=\"sy1\">=</span> <span class=\"st0\">'*'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>          sTemp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          dTemp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      sData.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      dData.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>dTemp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">bool</span> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> dx, <span class=\"kw4\">int</span> dy, vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span> <span class=\"sy3\">&amp;</span>data<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>sData<span class=\"br0\">[</span>y<span class=\"sy2\">+</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span>dx<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy3\">||</span> data<span class=\"br0\">[</span>y<span class=\"sy2\">+</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span>dx<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    data<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span><br/>    data<span class=\"br0\">[</span>y<span class=\"sy2\">+</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span>dx<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'@'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">bool</span> push<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> dx, <span class=\"kw4\">int</span> dy, vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span> <span class=\"sy3\">&amp;</span>data<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>sData<span class=\"br0\">[</span>y<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"sy2\">*</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"sy2\">*</span>dx<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy3\">||</span> data<span class=\"br0\">[</span>y<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"sy2\">*</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"sy2\">*</span>dx<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    data<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span><br/>    data<span class=\"br0\">[</span>y<span class=\"sy2\">+</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span>dx<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'@'</span><span class=\"sy4\">;</span><br/>    data<span class=\"br0\">[</span>y<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"sy2\">*</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span><span class=\"nu0\">2</span><span class=\"sy2\">*</span>dx<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'*'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">bool</span> isSolved<span class=\"br0\">(</span><span class=\"kw4\">const</span> vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span> <span class=\"sy3\">&amp;</span>data<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> v <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> v <span class=\"sy1\">&lt;</span> data.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>v<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> u <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> u <span class=\"sy1\">&lt;</span> data<span class=\"br0\">[</span>v<span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>u<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>sData<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"sy3\">^</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  string solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    set<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;&gt;</span> visited<span class=\"sy4\">;</span><br/>    queue<span class=\"sy1\">&lt;</span>tuple<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span>, string, <span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> open<span class=\"sy4\">;</span><br/>\u00a0<br/>    open.<span class=\"me1\">push</span><span class=\"br0\">(</span>make_tuple<span class=\"br0\">(</span>dData, <span class=\"st0\">\"\"</span>, px, py<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    visited.<span class=\"me1\">insert</span><span class=\"br0\">(</span>dData<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    array<span class=\"sy1\">&lt;</span>tuple<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span>, <span class=\"kw4\">char</span>, <span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span>, <span class=\"nu0\">4</span><span class=\"sy1\">&gt;</span> dirs<span class=\"sy4\">;</span><br/>    dirs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">'u'</span>, <span class=\"st0\">'U'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    dirs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"st0\">'r'</span>, <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    dirs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"st0\">'d'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    dirs<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> make_tuple<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"st0\">'l'</span>, <span class=\"st0\">'L'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>open.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      vector<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;&gt;</span> temp, cur <span class=\"sy1\">=</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>open.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      string cSol <span class=\"sy1\">=</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>open.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>open.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>open.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      open.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        temp <span class=\"sy1\">=</span> cur<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> dx <span class=\"sy1\">=</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">0</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> dy <span class=\"sy1\">=</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>temp<span class=\"br0\">[</span>y<span class=\"sy2\">+</span>dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy2\">+</span>dx<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>push<span class=\"br0\">(</span>x, y, dx, dy, temp<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>visited.<span class=\"me1\">find</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span> <span class=\"sy1\">==</span> visited.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>isSolved<span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">return</span> cSol <span class=\"sy2\">+</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            open.<span class=\"me1\">push</span><span class=\"br0\">(</span>make_tuple<span class=\"br0\">(</span>temp, cSol <span class=\"sy2\">+</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>, x<span class=\"sy2\">+</span>dx, y<span class=\"sy2\">+</span>dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            visited.<span class=\"me1\">insert</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>move<span class=\"br0\">(</span>x, y, dx, dy, temp<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>visited.<span class=\"me1\">find</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span> <span class=\"sy1\">==</span> visited.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>isSolved<span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> cSol <span class=\"sy2\">+</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          open.<span class=\"me1\">push</span><span class=\"br0\">(</span>make_tuple<span class=\"br0\">(</span>temp, cSol <span class=\"sy2\">+</span> get<span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>, x<span class=\"sy2\">+</span>dx, y<span class=\"sy2\">+</span>dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>          visited.<span class=\"me1\">insert</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  string level <span class=\"sy1\">=</span><br/>    <span class=\"st0\">\"#######<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#     #<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#     #<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#. #  #<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#. $$ #<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#.$$  #<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#.#  @#<span class=\"es1\">\\n</span>\"</span><br/>    <span class=\"st0\">\"#######\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  Board b<span class=\"br0\">(</span>level<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> level <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> b.<span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 174, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> SokobanSolver<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> SokobanSolver<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">class</span> Board<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Cur <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">internal</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Sol <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">internal</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> X <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">internal</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Y <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">internal</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">public</span> Board<span class=\"br0\">(</span><span class=\"kw4\">string</span> cur, <span class=\"kw4\">string</span> sol, <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Cur <span class=\"sy0\">=</span> cur<span class=\"sy0\">;</span><br/>                Sol <span class=\"sy0\">=</span> sol<span class=\"sy0\">;</span><br/>                X <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>                Y <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">string</span> destBoard, currBoard<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> playerX, playerY, nCols<span class=\"sy0\">;</span><br/>\u00a0<br/>        SokobanSolver<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> board<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span><br/>            StringBuilder destBuf <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            StringBuilder currBuf <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> board<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> nCols<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw4\">char</span> ch <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    destBuf<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> <span class=\"st0\">'$'</span> <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">!=</span> <span class=\"st0\">'@'</span> <span class=\"sy0\">?</span> ch <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    currBuf<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">?</span> ch <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">playerX</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">playerY</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            destBoard <span class=\"sy0\">=</span> destBuf<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            currBoard <span class=\"sy0\">=</span> currBuf<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">string</span> Move<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> dx, <span class=\"kw4\">int</span> dy, <span class=\"kw4\">string</span> trialBoard<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> newPlayerPos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trialBoard<span class=\"br0\">[</span>newPlayerPos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> trial <span class=\"sy0\">=</span> trialBoard<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            trial<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>            trial<span class=\"br0\">[</span>newPlayerPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">string</span> Push<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> dx, <span class=\"kw4\">int</span> dy, <span class=\"kw4\">string</span> trialBoard<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> newBoxPos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dx<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trialBoard<span class=\"br0\">[</span>newBoxPos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> trial <span class=\"sy0\">=</span> trialBoard<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            trial<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>            trial<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><span class=\"sy0\">;</span><br/>            trial<span class=\"br0\">[</span>newBoxPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">bool</span> IsSolved<span class=\"br0\">(</span><span class=\"kw4\">string</span> trialBoard<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> trialBoard<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>destBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>                        <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>trialBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">string</span> Solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> dirLabels <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"st0\">'u'</span>, <span class=\"st0\">'U'</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"st0\">'r'</span>, <span class=\"st0\">'R'</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"st0\">'d'</span>, <span class=\"st0\">'D'</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"st0\">'l'</span>, <span class=\"st0\">'L'</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> dirs <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            ISet<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> history <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            LinkedList<span class=\"sy0\">&lt;</span>Board<span class=\"sy0\">&gt;</span> open <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> LinkedList<span class=\"sy0\">&lt;</span>Board<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            history<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>currBoard<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            open<span class=\"sy0\">.</span><span class=\"me1\">AddLast</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Board<span class=\"br0\">(</span>currBoard, <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Empty</span>, playerX, playerY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>open<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">.</span><span class=\"me1\">Equals</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Board item <span class=\"sy0\">=</span> open<span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                open<span class=\"sy0\">.</span><span class=\"me1\">RemoveFirst</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">string</span> cur <span class=\"sy0\">=</span> item<span class=\"sy0\">.</span><span class=\"me1\">Cur</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">string</span> sol <span class=\"sy0\">=</span> item<span class=\"sy0\">.</span><span class=\"me1\">Sol</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> item<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> item<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> dirs<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">string</span> trial <span class=\"sy0\">=</span> cur<span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> dx <span class=\"sy0\">=</span> dirs<span class=\"br0\">[</span>i, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> dy <span class=\"sy0\">=</span> dirs<span class=\"br0\">[</span>i, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"co1\">// are we standing next to a box\u00a0?</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trial<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"co1\">// can we push it\u00a0?</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>trial <span class=\"sy0\">=</span> Push<span class=\"br0\">(</span>x, y, dx, dy, trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            <span class=\"co1\">// or did we already try this one\u00a0?</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>history<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">{</span><br/>\u00a0<br/>                                <span class=\"kw4\">string</span> newSol <span class=\"sy0\">=</span> sol <span class=\"sy0\">+</span> dirLabels<span class=\"br0\">[</span>i, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsSolved<span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    <span class=\"kw1\">return</span> newSol<span class=\"sy0\">;</span><br/>\u00a0<br/>                                open<span class=\"sy0\">.</span><span class=\"me1\">AddLast</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Board<span class=\"br0\">(</span>trial, newSol, x <span class=\"sy0\">+</span> dx, y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                history<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                        <span class=\"co1\">// otherwise try changing position</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>trial <span class=\"sy0\">=</span> Move<span class=\"br0\">(</span>x, y, dx, dy, trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>history<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            <span class=\"kw4\">string</span> newSol <span class=\"sy0\">=</span> sol <span class=\"sy0\">+</span> dirLabels<span class=\"br0\">[</span>i, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            open<span class=\"sy0\">.</span><span class=\"me1\">AddLast</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Board<span class=\"br0\">(</span>trial, newSol, x <span class=\"sy0\">+</span> dx, y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            history<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> level <span class=\"sy0\">=</span> <span class=\"st0\">\"#######,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#     #,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#     #,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#. #  #,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#. $$ #,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#.$$  #,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#.#  @#,\"</span> <span class=\"sy0\">+</span><br/>                           <span class=\"st0\">\"#######\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Level:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> line <span class=\"kw1\">in</span> level<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Solution:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SokobanSolver<span class=\"br0\">(</span>level<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 145, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> queue_usage2<span class=\"sy0\">;</span> <span class=\"co1\">// No queue in Phobos 2.064.</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">struct</span> Board <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> El <span class=\"br0\">{</span> floor <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> wall <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span><span class=\"sy0\">,</span> goal <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><span class=\"sy0\">,</span><br/>                      box <span class=\"sy0\">=</span> <span class=\"st0\">'$'</span><span class=\"sy0\">,</span> player <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><span class=\"sy0\">,</span> boxOnGoal<span class=\"sy0\">=</span><span class=\"st0\">'*'</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw2\">alias</span> CTable <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> ncols<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> CTable sData<span class=\"sy0\">,</span> dData<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> playerx<span class=\"sy0\">,</span> playery<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> board<span class=\"br0\">)</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> board<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span>row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>                   <span class=\"st0\">\"Unequal board rows.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>                <span class=\"kw2\">assert</span><span class=\"br0\">(</span>c.<span class=\"me1\">inPattern</span><span class=\"br0\">(</span><span class=\"st0\">\" #<a class=\"__cf_email__\" data-cfemail=\"9cb2b8dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Not valid input\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/*static*/</span> <span class=\"kw4\">immutable</span> sMap <span class=\"sy0\">=</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">' '</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'.'</span><span class=\"sy0\">:</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"st0\">'@'</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"sy0\">:</span><span class=\"st0\">'#'</span><span class=\"sy0\">,</span> <span class=\"st0\">'$'</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"coMULTI\">/*static*/</span> <span class=\"kw4\">immutable</span> dMap <span class=\"sy0\">=</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">' '</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'.'</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'@'</span><span class=\"sy0\">:</span><span class=\"st0\">'@'</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'$'</span><span class=\"sy0\">:</span><span class=\"st0\">'*'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        ncols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> plx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> ply <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        CTable sDataBuild<span class=\"sy0\">,</span> dDataBuild<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> board<span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> ch<span class=\"sy0\">;</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sDataBuild <span class=\"sy0\">~=</span> sMap<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                dDataBuild <span class=\"sy0\">~=</span> dMap<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> El.<span class=\"me1\">player</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    plx <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>                    ply <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">sData</span> <span class=\"sy0\">=</span> sDataBuild<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">dData</span> <span class=\"sy0\">=</span> dDataBuild<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">playerx</span> <span class=\"sy0\">=</span> plx<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">playery</span> <span class=\"sy0\">=</span> ply<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">bool</span> move<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> dx<span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> dy<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> CTable data<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sData<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> El.<span class=\"me1\">wall</span> <span class=\"sy0\">||</span><br/>            data<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> El.<span class=\"me1\">floor</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> data2 <span class=\"sy0\">=</span> data.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        data2<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> El.<span class=\"me1\">floor</span><span class=\"sy0\">;</span><br/>        data2<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> El.<span class=\"me1\">player</span><span class=\"sy0\">;</span><br/>        data <span class=\"sy0\">=</span> data2.<span class=\"me1\">assumeUnique</span><span class=\"sy0\">;</span> <span class=\"co1\">// Not enforced.</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">bool</span> push<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> dx<span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> dy<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> CTable data<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sData<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> El.<span class=\"me1\">wall</span> <span class=\"sy0\">||</span><br/>            data<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> El.<span class=\"me1\">floor</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> data2 <span class=\"sy0\">=</span> data.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>        data2<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> El.<span class=\"me1\">floor</span><span class=\"sy0\">;</span><br/>        data2<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> El.<span class=\"me1\">player</span><span class=\"sy0\">;</span><br/>        data2<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> El.<span class=\"me1\">boxOnGoal</span><span class=\"sy0\">;</span><br/>        data <span class=\"sy0\">=</span> data2.<span class=\"me1\">assumeUnique</span><span class=\"sy0\">;</span> <span class=\"co1\">// Not enforced.</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">bool</span> isSolved<span class=\"br0\">(</span><span class=\"kw2\">in</span> CTable data<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> d<span class=\"sy0\">;</span> data<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sData<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> El.<span class=\"me1\">goal</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>d <span class=\"sy0\">==</span> El.<span class=\"me1\">boxOnGoal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">immutable</span> CTable<span class=\"br0\">]</span> visitedSet <span class=\"sy0\">=</span> <span class=\"br0\">[</span>dData<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">alias</span> Four <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>CTable<span class=\"sy0\">,</span> <span class=\"kw4\">string</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        GrowableCircularQueue<span class=\"sy0\">!</span>Four open<span class=\"sy0\">;</span><br/>        open.<span class=\"me1\">push</span><span class=\"br0\">(</span>Four<span class=\"br0\">(</span>dData<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> playerx<span class=\"sy0\">,</span> playery<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> dirs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>tuple<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'u'</span><span class=\"sy0\">,</span> <span class=\"st0\">'U'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                 tuple<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'r'</span><span class=\"sy0\">,</span> <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                 tuple<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'d'</span><span class=\"sy0\">,</span> <span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                 tuple<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'l'</span><span class=\"sy0\">,</span> <span class=\"st0\">'L'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>open.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">//immutable (cur, cSol, x, y) = open.pop;</span><br/>            <span class=\"kw4\">immutable</span> item <span class=\"sy0\">=</span> open.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> cur <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> cSol <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> x <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> y <span class=\"sy0\">=</span> item<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> di<span class=\"sy0\">;</span> dirs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                CTable temp <span class=\"sy0\">=</span> cur<span class=\"sy0\">;</span><br/>                <span class=\"co1\">//immutable (dx, dy) = di[0 .. 2];</span><br/>                <span class=\"kw4\">immutable</span> dx <span class=\"sy0\">=</span> di<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">immutable</span> dy <span class=\"sy0\">=</span> di<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>temp<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> ncols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> El.<span class=\"me1\">boxOnGoal</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>push<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> temp<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> temp <span class=\"sy0\">!</span><span class=\"kw2\">in</span> visitedSet<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSolved<span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"kw1\">return</span> cSol <span class=\"sy0\">~</span> di<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        open.<span class=\"me1\">push</span><span class=\"br0\">(</span>Four<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> cSol <span class=\"sy0\">~</span> di<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> dx<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        visitedSet<span class=\"br0\">[</span>temp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>move<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> temp<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> temp <span class=\"sy0\">!</span><span class=\"kw2\">in</span> visitedSet<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSolved<span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> cSol <span class=\"sy0\">~</span> di<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    open.<span class=\"me1\">push</span><span class=\"br0\">(</span>Four<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> cSol <span class=\"sy0\">~</span> di<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> dx<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    visitedSet<span class=\"br0\">[</span>temp<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> core.<span class=\"me1\">memory</span><span class=\"sy0\">;</span><br/>    GC.<span class=\"me1\">disable</span><span class=\"sy0\">;</span> <span class=\"co1\">// Uses about twice the memory.</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> level <span class=\"sy0\">=</span><br/><span class=\"st0\">\"#######<br/>#     #<br/>#     #<br/>#. #  #<br/>#. $$ #<br/>#.$$  #<br/>#.#  @#<br/>#######\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> b <span class=\"sy0\">=</span> <span class=\"kw4\">immutable</span><span class=\"br0\">(</span>Board<span class=\"br0\">)</span><span class=\"br0\">(</span>level.<span class=\"me1\">splitLines</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>level<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> b.<span class=\"me1\">solve</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 181, "block": "<pre class=\"text highlighted_source\">defmodule Sokoban do<br/>  defp setup(level) do<br/>    {leng, board} = normalize(level)<br/>    {player, goal} = check_position(board)<br/>    board = replace(board, [{\".\", \" \"}, {\"+\", \" \"}, {\"*\", \"$\"}])<br/>    lurd = [{-1, \"l\", \"L\"}, {-leng, \"u\", \"U\"}, {1, \"r\", \"R\"}, {leng, \"d\", \"D\"}]<br/>    dirs = [-1, -leng, 1, leng]<br/>    dead_zone = set_dead_zone(board, goal, dirs)<br/>    {board, player, goal, lurd, dead_zone}<br/>  end<br/>\u00a0<br/>  defp normalize(level) do<br/>    board = String.split(level, \"\\n\", trim: true)<br/>            |&gt; Enum.map(&amp;String.trim_trailing &amp;1)<br/>    leng  = Enum.map(board, &amp;String.length &amp;1) |&gt; Enum.max<br/>    board = Enum.map(board, &amp;String.pad_trailing(&amp;1, leng)) |&gt; Enum.join<br/>    {leng, board}<br/>  end<br/>\u00a0<br/>  defp check_position(board) do<br/>    board = String.codepoints(board)<br/>    player = Enum.find_index(board, fn c -&gt; c in [\"@\", \"+\"] end)<br/>    goal = Enum.with_index(board)<br/>           |&gt; Enum.filter_map(fn {c,_} -&gt; c in [\".\", \"+\", \"*\"] end, fn {_,i} -&gt; i end)<br/>    {player, goal}<br/>  end<br/>\u00a0<br/>  defp set_dead_zone(board, goal, dirs) do<br/>    wall = String.replace(board, ~r/[^#]/, \" \")<br/>           |&gt; String.codepoints<br/>           |&gt; Enum.with_index<br/>           |&gt; Enum.into(Map.new, fn {c,i} -&gt; {i,c} end)<br/>    corner = search_corner(wall, goal, dirs)<br/>    set_dead_zone(wall, dirs, goal, corner, corner)<br/>  end<br/>\u00a0<br/>  defp set_dead_zone(wall, dirs, goal, corner, dead) do<br/>    dead2 = Enum.reduce(corner, dead, fn pos,acc -&gt;<br/>              Enum.reduce(dirs, acc, fn dir,acc2 -&gt;<br/>                if wall[pos+dir] == \"#\", do: acc2,<br/>                    else: acc2 ++ check_side(wall, dirs, pos+dir, dir, goal, dead, [])<br/>              end)<br/>            end)<br/>    if dead == dead2, do:\u00a0:lists.usort(dead),<br/>                    else: set_dead_zone(wall, dirs, goal, corner, dead2)<br/>  end<br/>\u00a0<br/>  defp replace(string, replacement) do<br/>    Enum.reduce(replacement, string, fn {a,b},str -&gt;<br/>      String.replace(str, a, b)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp search_corner(wall, goal, dirs) do<br/>    Enum.reduce(wall, [], fn {i,c},corner -&gt;<br/>      if c == \"#\" or i in goal do<br/>        corner<br/>      else<br/>        case count_wall(wall, i, dirs) do<br/>          2 -&gt; if wall[i-1]\u00a0!= wall[i+1], do: [i | corner], else: corner<br/>          3 -&gt; [i | corner]<br/>          _ -&gt; corner<br/>        end<br/>      end<br/>    end)<br/>  end<br/>\u00a0<br/>  defp check_side(wall, dirs, pos, dir, goal, dead, acc) do<br/>    if wall[pos] == \"#\" or<br/>      count_wall(wall, pos, dirs) == 0 or<br/>      pos in goal do<br/>      []<br/>    else<br/>      if pos in dead, do: acc, else: check_side(wall, dirs, pos+dir, dir, goal, dead, [pos|acc])<br/>    end<br/>  end<br/>\u00a0<br/>  defp count_wall(wall, pos, dirs) do<br/>    Enum.count(dirs, fn dir -&gt; wall[pos + dir] == \"#\" end)<br/>  end<br/>\u00a0<br/>  defp push_box(board, pos, dir, route, goal, dead_zone) do<br/>    pos2dir = pos + 2 * dir<br/>    if String.at(board, pos2dir) == \" \" and not pos2dir in dead_zone do<br/>      board2 = board |&gt; replace_at(pos,     \" \")<br/>                     |&gt; replace_at(pos+dir, \"@\")<br/>                     |&gt; replace_at(pos2dir, \"$\")<br/>      unless visited?(board2) do<br/>        if solved?(board2, goal) do<br/>          IO.puts route<br/>          exit(:normal)<br/>        else<br/>          queue_in({board2, pos+dir, route})<br/>        end<br/>      end<br/>    end<br/>  end<br/>\u00a0<br/>  defp move_player(board, pos, dir) do<br/>    board |&gt; replace_at(pos, \" \") |&gt; replace_at(pos+dir, \"@\")<br/>  end<br/>\u00a0<br/>  defp replace_at(str, pos, c) do<br/>    {left, right} = String.split_at(str, pos)<br/>    {_, right} = String.split_at(right, 1)<br/>    left &lt;&gt; c &lt;&gt; right<br/>    # String.slice(str, 0, pos) &lt;&gt; c &lt;&gt; String.slice(str, pos+1..-1)<br/>  end<br/>\u00a0<br/>  defp solved?(board, goal) do<br/>    Enum.all?(goal, fn g -&gt; String.at(board, g) == \"$\" end)<br/>  end<br/>\u00a0<br/>  @pattern\u00a0:sokoban_pattern_set<br/>  @queue  \u00a0:sokoban_queue<br/>\u00a0<br/>  defp start_link do<br/>    Agent.start_link(fn -&gt; MapSet.new end, name: @pattern)<br/>    Agent.start_link(fn -&gt;\u00a0:queue.new end, name: @queue)<br/>  end<br/>\u00a0<br/>  defp visited?(board) do<br/>    Agent.get_and_update(@pattern, fn set -&gt;<br/>      {board in set, MapSet.put(set, board)}<br/>    end)<br/>  end<br/>\u00a0<br/>  defp queue_in(data) do<br/>    Agent.update(@queue, fn queue -&gt;\u00a0:queue.in(data, queue) end)<br/>  end<br/>\u00a0<br/>  defp queue_out do<br/>    Agent.get_and_update(@queue, fn q -&gt;<br/>      case\u00a0:queue.out(q) do<br/>        {{:value, data}, queue} -&gt; {data, queue}<br/>        x -&gt; x<br/>      end<br/>    end)<br/>  end<br/>\u00a0<br/>  def solve(level) do<br/>    {board, player, goal, lurd, dead_zone} = setup(level)<br/>    start_link<br/>    visited?(board)<br/>    queue_in({board, player, \"\"})<br/>    solve(goal, lurd, dead_zone)<br/>  end<br/>\u00a0<br/>  defp solve(goal, lurd, dead_zone) do<br/>    case queue_out do<br/>      {board, pos, route} -&gt;<br/>        Enum.each(lurd, fn {dir,move,push} -&gt;<br/>          case String.at(board, pos+dir) do<br/>            \"$\" -&gt; push_box(board, pos, dir, route&lt;&gt;push, goal, dead_zone)<br/>            \" \" -&gt; board2 = move_player(board, pos, dir)<br/>                   unless visited?(board2) do<br/>                     queue_in({board2, pos+dir, route&lt;&gt;move})<br/>                   end<br/>            _ -&gt;\u00a0:not_move    # wall<br/>          end<br/>        end)<br/>      _ -&gt;<br/>        IO.puts \"No solution\"<br/>        exit(:normal)<br/>    end<br/>    solve(goal, lurd, dead_zone)<br/>  end<br/>end<br/>\u00a0<br/>level = \"\"\"<br/>#######<br/>#     #<br/>#     #<br/>#. #  #<br/>#. $$ #<br/>#.$$  #<br/>#.#  @#<br/>#######<br/>\"\"\"<br/>IO.puts level<br/>Sokoban.solve(level)</pre>"}, {"lang": "Go", "loc": 117, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    level <span class=\"sy2\">:=</span> <span class=\"co2\">`<br/>#######<br/>#     #<br/>#     #<br/>#. #  #<br/>#. $$ #<br/>#.$$  #<br/>#.#  @#<br/>#######`</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"level:%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> level<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"solution:<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> solve<span class=\"sy1\">(</span>level<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>board <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    buffer <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>board<span class=\"sy1\">))</span><br/>    width <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>board<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:],</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    dirs <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>        move<span class=\"sy1\">,</span> push <span class=\"kw4\">string</span> <br/>        dPos       <span class=\"kw4\">int</span><br/>    <span class=\"sy1\">}{</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"u\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"U\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span>width<span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"r\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"R\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"d\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy1\">,</span> width<span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"st0\">\"l\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"L\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">}</span><br/>    visited <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">{</span>board<span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span><br/>    open <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>state<span class=\"sy1\">{</span>state<span class=\"sy1\">{</span>board<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Index</span><span class=\"sy1\">(</span>board<span class=\"sy1\">,</span> <span class=\"st0\">\"@\"</span><span class=\"sy1\">)}}</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>open<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        s1 <span class=\"sy2\">:=</span> &amp;open<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        open <span class=\"sy2\">=</span> open<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> dir <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dirs <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">var</span> newBoard<span class=\"sy1\">,</span> newSol <span class=\"kw4\">string</span><br/>            newPos <span class=\"sy2\">:=</span> s1<span class=\"sy3\">.</span>pos <span class=\"sy3\">+</span> dir<span class=\"sy3\">.</span>dPos<br/>            <span class=\"kw1\">switch</span> s1<span class=\"sy3\">.</span>board<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'$'</span><span class=\"sy1\">,</span> <span class=\"st0\">'*'</span><span class=\"sy1\">:</span><br/>                newBoard <span class=\"sy2\">=</span> s1<span class=\"sy3\">.</span>push<span class=\"sy1\">(</span>dir<span class=\"sy3\">.</span>dPos<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> newBoard <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy3\">||</span> visited<span class=\"sy1\">[</span>newBoard<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">continue</span><br/>                <span class=\"sy1\">}</span><br/>                newSol <span class=\"sy2\">=</span> s1<span class=\"sy3\">.</span>cSol <span class=\"sy3\">+</span> dir<span class=\"sy3\">.</span>push<br/>                <span class=\"kw1\">if</span> strings<span class=\"sy3\">.</span>IndexAny<span class=\"sy1\">(</span>newBoard<span class=\"sy1\">,</span> <span class=\"st0\">\".+\"</span><span class=\"sy1\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">return</span> newSol<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> <span class=\"st0\">'.'</span><span class=\"sy1\">:</span><br/>                newBoard <span class=\"sy2\">=</span> s1<span class=\"sy3\">.</span>move<span class=\"sy1\">(</span>dir<span class=\"sy3\">.</span>dPos<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> visited<span class=\"sy1\">[</span>newBoard<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">continue</span><br/>                <span class=\"sy1\">}</span><br/>                newSol <span class=\"sy2\">=</span> s1<span class=\"sy3\">.</span>cSol <span class=\"sy3\">+</span> dir<span class=\"sy3\">.</span>move<br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>            open <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>open<span class=\"sy1\">,</span> state<span class=\"sy1\">{</span>newBoard<span class=\"sy1\">,</span> newSol<span class=\"sy1\">,</span> newPos<span class=\"sy1\">})</span><br/>            visited<span class=\"sy1\">[</span>newBoard<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> state <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    board <span class=\"kw4\">string</span><br/>    cSol  <span class=\"kw4\">string</span><br/>    pos   <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> buffer <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>state<span class=\"sy1\">)</span> move<span class=\"sy1\">(</span>dPos <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>buffer<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>board<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> buffer<span class=\"sy1\">[</span>s<span class=\"sy3\">.</span>pos<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'@'</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>s<span class=\"sy3\">.</span><span class=\"me1\">pos</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">' '</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>s<span class=\"sy3\">.</span>pos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'.'</span><br/>    <span class=\"sy1\">}</span><br/>    newPos <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>pos <span class=\"sy3\">+</span> dPos<br/>    <span class=\"kw1\">if</span> buffer<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">' '</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'@'</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'+'</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>buffer<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>state<span class=\"sy1\">)</span> push<span class=\"sy1\">(</span>dPos <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    newPos <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>pos <span class=\"sy3\">+</span> dPos<br/>    boxPos <span class=\"sy2\">:=</span> newPos <span class=\"sy3\">+</span> dPos<br/>    <span class=\"kw1\">switch</span> s<span class=\"sy3\">.</span>board<span class=\"sy1\">[</span>boxPos<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"st0\">' '</span><span class=\"sy1\">,</span> <span class=\"st0\">'.'</span><span class=\"sy1\">:</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>buffer<span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>board<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> buffer<span class=\"sy1\">[</span>s<span class=\"sy3\">.</span>pos<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'@'</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>s<span class=\"sy3\">.</span><span class=\"me1\">pos</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">' '</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>s<span class=\"sy3\">.</span>pos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'.'</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> buffer<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'$'</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'@'</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>newPos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'+'</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> buffer<span class=\"sy1\">[</span>boxPos<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">' '</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>boxPos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'$'</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        buffer<span class=\"sy1\">[</span>boxPos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'*'</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>buffer<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 132, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>liftM<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>mapMaybe<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Sequence <span class=\"kw1\">as</span> Seq<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Set <span class=\"kw1\">as</span> Set<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span>Left<span class=\"sy0\">,</span> Right<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Field <span class=\"sy0\">=</span> Space <span class=\"sy0\">|</span> Wall <span class=\"sy0\">|</span> Goal<br/>           <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Action <span class=\"sy0\">=</span> Up <span class=\"sy0\">|</span> Down <span class=\"sy0\">|</span> Left <span class=\"sy0\">|</span> Right <span class=\"sy0\">|</span> PushUp <span class=\"sy0\">|</span> PushDown <span class=\"sy0\">|</span> PushLeft <span class=\"sy0\">|</span> PushRight<br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> Action <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Up        <span class=\"sy0\">=</span> <span class=\"st0\">\"u\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Down      <span class=\"sy0\">=</span> <span class=\"st0\">\"d\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Left      <span class=\"sy0\">=</span> <span class=\"st0\">\"l\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Right     <span class=\"sy0\">=</span> <span class=\"st0\">\"r\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> PushUp    <span class=\"sy0\">=</span> <span class=\"st0\">\"U\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> PushDown  <span class=\"sy0\">=</span> <span class=\"st0\">\"D\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> PushLeft  <span class=\"sy0\">=</span> <span class=\"st0\">\"L\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> PushRight <span class=\"sy0\">=</span> <span class=\"st0\">\"R\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Index <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> FieldArray <span class=\"sy0\">=</span> Array Index Field<br/><span class=\"kw1\">type</span> BoxArray <span class=\"sy0\">=</span> Array Index <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/><span class=\"kw1\">type</span> PlayerPos <span class=\"sy0\">=</span> Index<br/><span class=\"kw1\">type</span> GameState <span class=\"sy0\">=</span> <span class=\"br0\">(</span>BoxArray<span class=\"sy0\">,</span> PlayerPos<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> Game <span class=\"sy0\">=</span> <span class=\"br0\">(</span>FieldArray<span class=\"sy0\">,</span> GameState<span class=\"br0\">)</span><br/>\u00a0<br/>toField <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> Field<br/>toField <span class=\"st0\">'#'</span> <span class=\"sy0\">=</span> Wall<br/>toField <span class=\"st0\">' '</span> <span class=\"sy0\">=</span> Space<br/>toField <span class=\"st0\">'@'</span> <span class=\"sy0\">=</span> Space<br/>toField <span class=\"st0\">'$'</span> <span class=\"sy0\">=</span> Space<br/>toField <span class=\"st0\">'.'</span> <span class=\"sy0\">=</span> Goal<br/>toField <span class=\"st0\">'+'</span> <span class=\"sy0\">=</span> Goal<br/>toField <span class=\"st0\">'*'</span> <span class=\"sy0\">=</span> Goal<br/>\u00a0<br/>toPush <span class=\"sy0\">::</span> Action <span class=\"sy0\">-&gt;</span> Action<br/>toPush Up    <span class=\"sy0\">=</span> PushUp<br/>toPush Down  <span class=\"sy0\">=</span> PushDown<br/>toPush Left  <span class=\"sy0\">=</span> PushLeft<br/>toPush Right <span class=\"sy0\">=</span> PushRight<br/>toPush n     <span class=\"sy0\">=</span> n<br/>\u00a0<br/>toMove <span class=\"sy0\">::</span> Action <span class=\"sy0\">-&gt;</span> Index<br/>toMove PushUp    <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>toMove PushDown  <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>toMove PushLeft  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>toMove PushRight <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>toMove n <span class=\"sy0\">=</span> toMove <span class=\"sy0\">$</span> toPush n<br/>\u00a0<br/><span class=\"co1\">-- Parse the string-based game board into an easier-to-use format.</span><br/><span class=\"co1\">-- Assume that the board is valid (rectangular, one player, etc).</span><br/>parseGame <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Game<br/>parseGame fieldStrs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>field<span class=\"sy0\">,</span> <span class=\"br0\">(</span>boxes<span class=\"sy0\">,</span> player<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    width     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> fieldStrs<br/>    height    <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> fieldStrs<br/>    bound     <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> height <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    flatField <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> transpose fieldStrs<br/>    charField <span class=\"sy0\">=</span> listArray bound flatField<br/>    field     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> toField charField<br/>    boxes     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"st0\">\"$*\"</span><span class=\"br0\">)</span> charField<br/>    player    <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a> <span class=\"st0\">\"@+\"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> assocs charField<br/>\u00a0<br/>add <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>add <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Attempt to perform an action, returning the updated game and adjusted</span><br/><span class=\"co1\">-- action if the action was legal.</span><br/>tryAction <span class=\"sy0\">::</span> Game <span class=\"sy0\">-&gt;</span> Action <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>Game<span class=\"sy0\">,</span> Action<span class=\"br0\">)</span><br/>tryAction <span class=\"br0\">(</span>field<span class=\"sy0\">,</span> <span class=\"br0\">(</span>boxes<span class=\"sy0\">,</span> player<span class=\"br0\">)</span><span class=\"br0\">)</span> action<br/>  <span class=\"sy0\">|</span> field <span class=\"sy0\">!</span> vec <span class=\"sy0\">==</span> Wall <span class=\"sy0\">=</span> Nothing<br/>  <span class=\"sy0\">|</span> boxes <span class=\"sy0\">!</span> vec <span class=\"sy0\">=</span><br/>     <span class=\"kw1\">if</span> boxes <span class=\"sy0\">!</span> vecB <span class=\"sy0\">||</span> field <span class=\"sy0\">!</span> vecB <span class=\"sy0\">==</span> Wall<br/>     <span class=\"kw1\">then</span> Nothing<br/>     <span class=\"kw1\">else</span> Just <span class=\"br0\">(</span><span class=\"br0\">(</span>field<span class=\"sy0\">,</span> <span class=\"br0\">(</span>boxes <span class=\"sy0\">//</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>vec<span class=\"sy0\">,</span> False<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>vecB<span class=\"sy0\">,</span> True<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> vec<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>               toPush action<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span><span class=\"br0\">(</span>field<span class=\"sy0\">,</span> <span class=\"br0\">(</span>boxes<span class=\"sy0\">,</span> vec<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> action<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    actionVec <span class=\"sy0\">=</span> toMove action<br/>    vec       <span class=\"sy0\">=</span> player `add` actionVec<br/>    vecB      <span class=\"sy0\">=</span> vec `add` actionVec<br/>\u00a0<br/><span class=\"co1\">-- Search the game for a solution.</span><br/>solveGame <span class=\"sy0\">::</span> Game <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span>Action<span class=\"br0\">]</span><br/>solveGame <span class=\"br0\">(</span>field<span class=\"sy0\">,</span> initState<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  liftM <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span> bfs <span class=\"br0\">(</span>Seq<span class=\"sy0\">.</span>singleton <span class=\"br0\">(</span>initState<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Set<span class=\"sy0\">.</span>singleton initState<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    goals           <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> Goal<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> assocs field<br/>    isSolved st     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>st <span class=\"sy0\">!</span><span class=\"br0\">)</span> goals<br/>    possibleActions <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Up<span class=\"sy0\">,</span> Down<span class=\"sy0\">,</span> Left<span class=\"sy0\">,</span> Right<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\">-- Breadth First Search of the game tree.</span><br/>    bfs <span class=\"sy0\">::</span> Seq<span class=\"sy0\">.</span>Seq <span class=\"br0\">(</span>GameState<span class=\"sy0\">,</span> <span class=\"br0\">[</span>Action<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Set<span class=\"sy0\">.</span>Set GameState <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span>Action<span class=\"br0\">]</span><br/>    bfs queue visited <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">case</span> Seq<span class=\"sy0\">.</span>viewl queue <span class=\"kw1\">of</span><br/>        Seq<span class=\"sy0\">.</span>EmptyL <span class=\"sy0\">-&gt;</span> Nothing<br/>        <span class=\"br0\">(</span>game<span class=\"sy0\">@</span><span class=\"br0\">(</span>boxes<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> actions<span class=\"br0\">)</span> Seq<span class=\"sy0\">.</span>:<span class=\"sy0\">&lt;</span> queueB <span class=\"sy0\">-&gt;</span><br/>          <span class=\"kw1\">if</span> isSolved boxes<br/>          <span class=\"kw1\">then</span> Just actions<br/>          <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">let</span> newMoves <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> Set<span class=\"sy0\">.</span>notMember visited <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>                           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> g<span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>g<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>                           mapMaybe <span class=\"br0\">(</span>tryAction <span class=\"br0\">(</span>field<span class=\"sy0\">,</span> game<span class=\"br0\">)</span><span class=\"br0\">)</span> possibleActions<br/>                visitedB <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> Set<span class=\"sy0\">.</span>insert<span class=\"br0\">)</span> visited <span class=\"sy0\">$</span><br/>                           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> newMoves<br/>                queueC   <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span>Seq<span class=\"sy0\">.|&gt;</span><span class=\"br0\">)</span> queueB <span class=\"sy0\">$</span><br/>                           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>g<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>g<span class=\"sy0\">,</span> a:actions<span class=\"br0\">)</span><span class=\"br0\">)</span> newMoves<br/>            <span class=\"kw1\">in</span> bfs queueC visitedB<br/>\u00a0<br/>exampleA <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>exampleA <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"#######\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#     #\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#     #\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#. #  #\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#. $$ #\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#.$$  #\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#.#  @#\"</span><br/>  <span class=\"sy0\">,</span><span class=\"st0\">\"#######\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> solveGame <span class=\"sy0\">$</span> parseGame exampleA <span class=\"kw1\">of</span><br/>    Nothing       <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Unsolvable\"</span><br/>    Just solution <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> exampleA<br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> solution</pre>"}, {"lang": "Java", "loc": 138, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Sokoban <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> destBoard, currBoard<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> playerX, playerY, nCols<span class=\"sy0\">;</span><br/>\u00a0<br/>    Sokoban<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> board<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        StringBuilder destBuf <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        StringBuilder currBuf <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> board.<span class=\"me1\">length</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> nCols<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                <span class=\"kw4\">char</span> ch <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                destBuf.<span class=\"me1\">append</span><span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> <span class=\"st0\">'$'</span> <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">!=</span> <span class=\"st0\">'@'</span> <span class=\"sy0\">?</span> ch <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                currBuf.<span class=\"me1\">append</span><span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">?</span> ch <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">this</span>.<span class=\"me1\">playerX</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">this</span>.<span class=\"me1\">playerY</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        destBoard <span class=\"sy0\">=</span> destBuf.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        currBoard <span class=\"sy0\">=</span> currBuf.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> dx, <span class=\"kw4\">int</span> dy, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> trialBoard<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> newPlayerPos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trialBoard.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>newPlayerPos<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> trial <span class=\"sy0\">=</span> trialBoard.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trial<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>        trial<span class=\"br0\">[</span>newPlayerPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> push<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> dx, <span class=\"kw4\">int</span> dy, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> trialBoard<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> newBoxPos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dx<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trialBoard.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>newBoxPos<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> trial <span class=\"sy0\">=</span> trialBoard.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        trial<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>        trial<span class=\"br0\">[</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><span class=\"sy0\">;</span><br/>        trial<span class=\"br0\">[</span>newBoxPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> isSolved<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> trialBoard<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> trialBoard.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>destBoard.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>                    <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>trialBoard.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">class</span> Board <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> cur, sol<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> x, y<span class=\"sy0\">;</span><br/>\u00a0<br/>            Board<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s2, <span class=\"kw4\">int</span> px, <span class=\"kw4\">int</span> py<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                cur <span class=\"sy0\">=</span> s1<span class=\"sy0\">;</span><br/>                sol <span class=\"sy0\">=</span> s2<span class=\"sy0\">;</span><br/>                x <span class=\"sy0\">=</span> px<span class=\"sy0\">;</span><br/>                y <span class=\"sy0\">=</span> py<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dirLabels <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"st0\">'u'</span>, <span class=\"st0\">'U'</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">'r'</span>, <span class=\"st0\">'R'</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">'d'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">'l'</span>, <span class=\"st0\">'L'</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dirs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Set<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> history <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        LinkedList<span class=\"sy0\">&lt;</span>Board<span class=\"sy0\">&gt;</span> open <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LinkedList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        history.<span class=\"me1\">add</span><span class=\"br0\">(</span>currBoard<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        open.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Board<span class=\"br0\">(</span>currBoard, <span class=\"st0\">\"\"</span>, playerX, playerY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>open.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Board item <span class=\"sy0\">=</span> open.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> cur <span class=\"sy0\">=</span> item.<span class=\"me1\">cur</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> sol <span class=\"sy0\">=</span> item.<span class=\"me1\">sol</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> item.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> item.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> dirs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> trial <span class=\"sy0\">=</span> cur<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> dx <span class=\"sy0\">=</span> dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> dy <span class=\"sy0\">=</span> dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co1\">// are we standing next to a box\u00a0?</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trial.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols <span class=\"sy0\">+</span> x <span class=\"sy0\">+</span> dx<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"co1\">// can we push it\u00a0?</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>trial <span class=\"sy0\">=</span> push<span class=\"br0\">(</span>x, y, dx, dy, trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                        <span class=\"co1\">// or did we already try this one\u00a0?</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>history.<span class=\"me1\">contains</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> newSol <span class=\"sy0\">=</span> sol <span class=\"sy0\">+</span> dirLabels<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSolved<span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"kw1\">return</span> newSol<span class=\"sy0\">;</span><br/>\u00a0<br/>                            open.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Board<span class=\"br0\">(</span>trial, newSol, x <span class=\"sy0\">+</span> dx, y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            history.<span class=\"me1\">add</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">// otherwise try changing position</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>trial <span class=\"sy0\">=</span> move<span class=\"br0\">(</span>x, y, dx, dy, trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>history.<span class=\"me1\">contains</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> newSol <span class=\"sy0\">=</span> sol <span class=\"sy0\">+</span> dirLabels<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        open.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Board<span class=\"br0\">(</span>trial, newSol, x <span class=\"sy0\">+</span> dx, y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        history.<span class=\"me1\">add</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> level <span class=\"sy0\">=</span> <span class=\"st0\">\"#######,#     #,#     #,#. #  #,#. $$ #,\"</span><br/>                <span class=\"sy0\">+</span> <span class=\"st0\">\"#.$$  #,#.#  @#,#######\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Sokoban<span class=\"br0\">(</span>level.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 116, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">LinkedList</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Sokoban<span class=\"br0\">(</span>board<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> destBoard<span class=\"sy0\">:</span> String<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> currBoard<span class=\"sy0\">:</span> String<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> playerX <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> playerY <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> destBuf <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> currBuf <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until board.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span> until nCols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ch <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>                destBuf.<span class=\"me1\">append</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> <span class=\"st0\">'$'</span> <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">!=</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span> ch <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                currBuf.<span class=\"me1\">append</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch <span class=\"sy0\">!=</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span> ch <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    playerX <span class=\"sy0\">=</span> c<br/>                    playerY <span class=\"sy0\">=</span> r<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        destBoard <span class=\"sy0\">=</span> destBuf.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        currBoard <span class=\"sy0\">=</span> currBuf.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun move<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, dx<span class=\"sy0\">:</span> Int, dy<span class=\"sy0\">:</span> Int, trialBoard<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newPlayerPos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y + dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols + x + dx<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>trialBoard<span class=\"br0\">[</span>newPlayerPos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> trial <span class=\"sy0\">=</span> trialBoard.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        trial<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> nCols + x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>        trial<span class=\"br0\">[</span>newPlayerPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> String<span class=\"br0\">(</span>trial<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun push<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, dx<span class=\"sy0\">:</span> Int, dy<span class=\"sy0\">:</span> Int, trialBoard<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newBoxPos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols + x + <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> dx<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>trialBoard<span class=\"br0\">[</span>newBoxPos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> trial <span class=\"sy0\">=</span> trialBoard.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        trial<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> nCols + x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>        trial<span class=\"br0\">[</span><span class=\"br0\">(</span>y + dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols + x + dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><br/>        trial<span class=\"br0\">[</span>newBoxPos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'$'</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> String<span class=\"br0\">(</span>trial<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun isSolved<span class=\"br0\">(</span>trialBoard<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until trialBoard.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>destBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>trialBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun solve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Board<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cur<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sol<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dirLabels <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">'u'</span> to <span class=\"st0\">'U'</span>, <span class=\"st0\">'r'</span> to <span class=\"st0\">'R'</span>, <span class=\"st0\">'d'</span> to <span class=\"st0\">'D'</span>, <span class=\"st0\">'l'</span> to <span class=\"st0\">'L'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dirs <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">0</span> to -<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> to <span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span> to <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> history <span class=\"sy0\">=</span> mutableSetOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        history.<span class=\"me1\">add</span><span class=\"br0\">(</span>currBoard<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> open <span class=\"sy0\">=</span> LinkedList<span class=\"sy0\">&lt;</span>Board<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        open.<span class=\"me1\">add</span><span class=\"br0\">(</span>Board<span class=\"br0\">(</span>currBoard, <span class=\"st0\">\"\"</span>, playerX, playerY<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>open.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>cur, sol, x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> open.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until dirs.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> trial <span class=\"sy0\">=</span> cur<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dx <span class=\"sy0\">=</span> dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dy <span class=\"sy0\">=</span> dirs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">second</span><br/>\u00a0<br/>                <span class=\"co1\">// are we standing next to a box\u00a0?</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>trial<span class=\"br0\">[</span><span class=\"br0\">(</span>y + dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> nCols + x + dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'$'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"co1\">// can we push it\u00a0?</span><br/>                    trial <span class=\"sy0\">=</span> push<span class=\"br0\">(</span>x, y, dx, dy, trial<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>trial.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                        <span class=\"co1\">// or did we already try this one\u00a0?</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>trial <span class=\"sy0\">!</span>in history<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newSol <span class=\"sy0\">=</span> sol + dirLabels<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">second</span><br/>                            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isSolved<span class=\"br0\">(</span>trial<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> newSol<br/>                            open.<span class=\"me1\">add</span><span class=\"br0\">(</span>Board<span class=\"br0\">(</span>trial, newSol, x + dx, y + dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            history.<span class=\"me1\">add</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"co1\">// otherwise try changing position</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                    trial <span class=\"sy0\">=</span> move<span class=\"br0\">(</span>x, y, dx, dy, trial<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>trial.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> trial <span class=\"sy0\">!</span>in history<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newSol <span class=\"sy0\">=</span> sol + dirLabels<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first</span><br/>                        open.<span class=\"me1\">add</span><span class=\"br0\">(</span>Board<span class=\"br0\">(</span>trial, newSol, x + dx, y + dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        history.<span class=\"me1\">add</span><span class=\"br0\">(</span>trial<span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span>          <br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"No solution\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> level <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"#######\"</span>,<br/>        <span class=\"st0\">\"#     #\"</span>,<br/>        <span class=\"st0\">\"#     #\"</span>,<br/>        <span class=\"st0\">\"#. #  #\"</span>,<br/>        <span class=\"st0\">\"#. $$ #\"</span>,<br/>        <span class=\"st0\">\"#.$$  #\"</span>,<br/>        <span class=\"st0\">\"#.#  @#\"</span>,<br/>        <span class=\"st0\">\"#######\"</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>level.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>Sokoban<span class=\"br0\">(</span>level<span class=\"br0\">)</span>.<span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 94, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> dir <span class=\"sy0\">=</span> U <span class=\"sy0\">|</span> D <span class=\"sy0\">|</span> L <span class=\"sy0\">|</span> R<br/><span class=\"kw1\">type</span> move_t <span class=\"sy0\">=</span> Move <span class=\"kw1\">of</span> dir <span class=\"sy0\">|</span> Push <span class=\"kw1\">of</span> dir<br/>\u00a0<br/><span class=\"kw1\">let</span> letter <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>   <span class=\"sy0\">|</span> Push<span class=\"br0\">(</span>U<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>U<span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Push<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>D<span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Push<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>L<span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Push<span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>R<span class=\"sy0\">'</span><br/>   <span class=\"sy0\">|</span> Move<span class=\"br0\">(</span>U<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>u<span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Move<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>d<span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Move<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>l<span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Move<span class=\"br0\">(</span>R<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>r<span class=\"sy0\">'</span><br/>\u00a0<br/><span class=\"kw1\">let</span> cols <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">let</span> delta <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> U <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>cols<span class=\"br0\">)</span> <span class=\"sy0\">|</span> D <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">!</span>cols <span class=\"sy0\">|</span> L <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> R <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> store <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">251</span><br/><span class=\"kw1\">let</span> mark t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace store t <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> marked t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>mem store t<br/>\u00a0<br/><span class=\"kw1\">let</span> show ml <span class=\"sy0\">=</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> <span class=\"br0\">(</span>letter c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev ml<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> gen_moves <span class=\"br0\">(</span>x,boxes<span class=\"br0\">)</span> bd <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> empty i <span class=\"sy0\">=</span> bd<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">'</span> <span class=\"sy0\">'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem i boxes<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> check l dir <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> delta dir <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> x1 <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>dx <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem x1 boxes <span class=\"kw1\">then</span> <span class=\"br0\">(</span><br/>         <span class=\"kw1\">if</span> empty <span class=\"br0\">(</span>x1<span class=\"sy0\">+</span>dx<span class=\"br0\">)</span> <span class=\"kw1\">then</span> Push<span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"sy0\">::</span> l <span class=\"kw1\">else</span> l<br/>      <span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span><br/>         <span class=\"kw1\">if</span> bd<span class=\"sy0\">.</span><span class=\"br0\">(</span>x1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">'</span> <span class=\"sy0\">'</span> <span class=\"kw1\">then</span> Move<span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"sy0\">::</span> l <span class=\"kw1\">else</span> l<br/>      <span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left check <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>U<span class=\"sy0\">;</span> L<span class=\"sy0\">;</span> R<span class=\"sy0\">;</span> D<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> do_move <span class=\"br0\">(</span>x,boxes<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>   <span class=\"sy0\">|</span> Push<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> dx <span class=\"sy0\">=</span> delta d <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> x1 <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>dx <span class=\"kw1\">in</span> <span class=\"kw1\">let</span> x2 <span class=\"sy0\">=</span> x1<span class=\"sy0\">+</span>dx <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> shift <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>         <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"shift\"</span><br/>         <span class=\"sy0\">|</span> h <span class=\"sy0\">::</span> t <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> h <span class=\"sy0\">=</span> x1 <span class=\"kw1\">then</span> x2 <span class=\"sy0\">::</span> t <span class=\"kw1\">else</span> h <span class=\"sy0\">::</span> shift t <span class=\"kw1\">in</span><br/>      x1, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fast_sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span>shift boxes<span class=\"br0\">)</span><br/>   <span class=\"sy0\">|</span> Move<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">+</span><span class=\"br0\">(</span>delta d<span class=\"br0\">)</span><span class=\"br0\">)</span>, boxes<br/>\u00a0<br/><span class=\"kw1\">let</span> init_pos bd <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> q <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span> <br/>   <span class=\"kw1\">let</span> check i c <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> c <span class=\"sy0\">=</span> <span class=\"sy0\">'</span>$<span class=\"sy0\">'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">=</span> <span class=\"sy0\">'*'</span> <span class=\"kw1\">then</span> q <span class=\"sy0\">:=</span> i<span class=\"sy0\">::!</span>q<br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> c <span class=\"sy0\">=</span> <span class=\"sy0\">'</span>@<span class=\"sy0\">'</span> <span class=\"kw1\">then</span> p <span class=\"sy0\">:=</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri check bd<span class=\"sy0\">;</span><br/>   <span class=\"br0\">(</span><span class=\"sy0\">!</span>p, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fast_sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"sy0\">!</span>q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> final_box bd <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> check <span class=\"br0\">(</span>i,l<span class=\"br0\">)</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> c <span class=\"sy0\">=</span> <span class=\"sy0\">'.'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">=</span> <span class=\"sy0\">'*'</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,i<span class=\"sy0\">::</span>l<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>,l<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fast_sort <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>fold_left check <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> bd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> array_of_input inp <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length inp <span class=\"kw1\">and</span> c <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>hd inp<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>create <span class=\"br0\">(</span>r<span class=\"sy0\">*</span>c<span class=\"br0\">)</span> <span class=\"sy0\">'</span> <span class=\"sy0\">'</span> <span class=\"kw1\">in</span> <span class=\"br0\">(</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> r <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth inp i <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> c <span class=\"kw1\">do</span> a<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>c<span class=\"sy0\">+</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">done</span><br/>   <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>   cols <span class=\"sy0\">:=</span> c<span class=\"sy0\">;</span> a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> solve b <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> board <span class=\"sy0\">=</span> array_of_input b <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> targets <span class=\"sy0\">=</span> final_box board <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> solved pos <span class=\"sy0\">=</span> targets <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsnd\"><span class=\"kw3\">snd</span></a> pos <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> clear <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"sy0\">'#'</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'#'</span> <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span> <span class=\"sy0\">'</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> bdc <span class=\"sy0\">=</span> clear board <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> q <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>create <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> pos1 <span class=\"sy0\">=</span> init_pos board <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">begin</span><br/>      mark pos1<span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>add <span class=\"br0\">(</span>pos1, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> q<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>is_empty q<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw1\">let</span> curr, mhist <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>pop q <span class=\"kw1\">in</span><br/>         <span class=\"kw1\">let</span> moves <span class=\"sy0\">=</span> gen_moves curr bdc <span class=\"kw1\">in</span><br/>         <span class=\"kw1\">let</span> check m <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">let</span> next <span class=\"sy0\">=</span> do_move curr m <span class=\"kw1\">in</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>marked next<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> solved next <span class=\"kw1\">then</span> <span class=\"br0\">(</span>show <span class=\"br0\">(</span>m<span class=\"sy0\">::</span>mhist<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexit\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">(</span>mark next<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>add <span class=\"br0\">(</span>next,m<span class=\"sy0\">::</span>mhist<span class=\"br0\">)</span> q<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>         <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter check moves<br/>      <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"No solution\"</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> level <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"#######\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#     #\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#     #\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#. #  #\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#. $$ #\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#.$$  #\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#.#  @#\"</span><span class=\"sy0\">;</span><br/>             <span class=\"st0\">\"#######\"</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>solve level</pre>"}, {"lang": "Perl", "loc": 205, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>FATAL all<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@initial</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/\\n/</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"co1\">#############</span><br/><span class=\"co1\">#  #        #</span><br/><span class=\"co1\"># $$$$$$$  @#</span><br/><span class=\"co1\">#.......    #</span><br/><span class=\"co1\">#############</span><br/>\u00a0<br/><span class=\"co1\">#######</span><br/><span class=\"co1\">#     #</span><br/><span class=\"co1\">#     #</span><br/><span class=\"co1\">#. #  #</span><br/><span class=\"co1\">#. $$ #</span><br/><span class=\"co1\">#.$$  #</span><br/><span class=\"co1\">#.#  @#</span><br/><span class=\"co1\">#######</span><br/>\u00a0<br/><span class=\"coMULTI\">=for<br/>space is an empty square<br/># is a wall<br/>@ is the player<br/>$ is a box<br/>. is a goal<br/>+ is the player on a goal<br/>* is a box on a goal<br/>=cut</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$cols</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$initial</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$initial</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">@initial</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$initial</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$size</span> <span class=\"sy0\">==</span> <span class=\"re0\">$cols</span> <span class=\"sy0\">*</span> <span class=\"re0\">@initial</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> WALL<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> PLAYER<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> BOX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> GOAL<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%input</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>\t<span class=\"st_h\">' '</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st_h\">'#'</span> <span class=\"sy0\">=&gt;</span> WALL<span class=\"sy0\">,</span> <span class=\"st_h\">'@'</span> <span class=\"sy0\">=&gt;</span> PLAYER<span class=\"sy0\">,</span> <span class=\"st_h\">'$'</span> <span class=\"sy0\">=&gt;</span> BOX<span class=\"sy0\">,</span><br/>\t<span class=\"st_h\">'.'</span> <span class=\"sy0\">=&gt;</span> GOAL<span class=\"sy0\">,</span> <span class=\"st_h\">'+'</span> <span class=\"sy0\">=&gt;</span> PLAYER<span class=\"sy0\">|</span>GOAL<span class=\"sy0\">,</span> <span class=\"st_h\">'*'</span> <span class=\"sy0\">=&gt;</span> BOX<span class=\"sy0\">|</span>GOAL<span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%output</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">(</span><span class=\"re0\">%input</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> packed_initial <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span> <span class=\"re0\">$ret</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$input</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a> <span class=\"re0\">$initial</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$ret</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> printable_board <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$board</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@c</span> <span class=\"sy0\">=</span> <span class=\"re0\">@output</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$board</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">@row</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@c</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$cols</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$ret</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">@row</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$ret</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$packed</span> <span class=\"sy0\">=</span> packed_initial<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@udlr</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>u d l r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@UDLR</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>U D L R<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@deltas</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"re0\">$cols</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"re0\">$cols</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%fseen</span><span class=\"sy0\">;</span><br/>INIT_FORWARD<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$initial</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/(\\@|\\+)/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">use</span> vars <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"re0\">@ftodo</span> <span class=\"re0\">@fnext</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@ftodo</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$packed</span><span class=\"sy0\">,</span>  <span class=\"co5\">$-</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$fseen</span><span class=\"br0\">{</span><span class=\"re0\">$packed</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%rseen</span><span class=\"sy0\">;</span><br/>INIT_REVERSE<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$goal</span> <span class=\"sy0\">=</span> <span class=\"re0\">$packed</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"re0\">$ftodo</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">-=</span> PLAYER<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@u</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span> <span class=\"sy0\">&amp;</span> GOAL <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> <span class=\"re0\">$t</span> <span class=\"sy0\">&amp;</span> BOX <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$t</span> <span class=\"sy0\">&amp;</span> BOX <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> <span class=\"re0\">$t</span> <span class=\"sy0\">&amp;</span> GOAL <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">@u</span> <span class=\"sy0\">==</span> <span class=\"re0\">@b</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> BOX <span class=\"kw1\">for</span> <span class=\"re0\">@u</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">-=</span> BOX <span class=\"kw1\">for</span> <span class=\"re0\">@b</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">use</span> vars <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"re0\">@rtodo</span> <span class=\"re0\">@rnext</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tFINAL_PLACE<span class=\"sy0\">:</span> <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$player</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tFIND_GOAL<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$goal</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> GOAL <span class=\"kw1\">and</span> <span class=\"kw1\">last</span> FIND_GOAL <span class=\"kw1\">for</span> <span class=\"re0\">@deltas</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">next</span> FINAL_PLACE<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$a_goal</span> <span class=\"sy0\">=</span> <span class=\"re0\">$goal</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$a_goal</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> PLAYER<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@rtodo</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$a_goal</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$a_goal</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">#print printable_board($a_goal);</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$movelen</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$solution</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MAIN<span class=\"sy0\">:</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">@ftodo</span> <span class=\"kw1\">and</span> <span class=\"re0\">@rtodo</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\tFORWARD<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$moves</span><span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@ftodo</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> PLAYER<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dir_num</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$delta</span> <span class=\"sy0\">=</span> <span class=\"re0\">$deltas</span><span class=\"br0\">[</span><span class=\"re0\">$dir_num</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@loc</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$player</span> <span class=\"sy0\">+</span> <span class=\"re0\">$delta</span> <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@val</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@loc</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$val</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> WALL <span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"re0\">$val</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> BOX <span class=\"kw1\">and</span> <span class=\"re0\">$val</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>BOX<span class=\"sy0\">|</span>WALL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"re0\">$level</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">-=</span> PLAYER<span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> PLAYER<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$nmoves</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$val</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> BOX <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">-=</span> BOX<span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> BOX<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$nmoves</span> <span class=\"sy0\">=</span> <span class=\"re0\">$moves</span> <span class=\"sy0\">.</span> <span class=\"re0\">$UDLR</span><span class=\"br0\">[</span><span class=\"re0\">$dir_num</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$nmoves</span> <span class=\"sy0\">=</span> <span class=\"re0\">$moves</span> <span class=\"sy0\">.</span> <span class=\"re0\">$udlr</span><span class=\"br0\">[</span><span class=\"re0\">$dir_num</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$fseen</span><span class=\"br0\">{</span><span class=\"re0\">$new</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$fseen</span><span class=\"br0\">{</span><span class=\"re0\">$new</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nmoves</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@fnext</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"re0\">$nmoves</span><span class=\"sy0\">,</span> <span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$new</span><span class=\"br0\">}</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\">#print(($val[1] &amp; BOX)\u00a0? \"Push $UDLR[$dir_num]\\n\"\u00a0: \"Fwalk $udlr[$dir_num]\\n\");</span><br/>\t\t\t<span class=\"re0\">$solution</span> <span class=\"sy0\">=</span> <span class=\"re0\">$new</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">last</span> MAIN<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">last</span> FORWARD <span class=\"kw1\">if</span> <span class=\"re0\">@ftodo</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">use</span> vars <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"re0\">*ftodo</span> <span class=\"re0\">*fnext</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">*ftodo</span><span class=\"sy0\">,</span> <span class=\"re0\">*fnext</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">\\@fnext</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@ftodo</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"co1\"># end FORWARD</span><br/>\u00a0<br/>\tBACKWARD<span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$moves</span><span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@rtodo</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"&lt;$level&gt;\"</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"re0\">$player</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> PLAYER<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dir_num</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$delta</span> <span class=\"sy0\">=</span> <span class=\"re0\">$deltas</span><span class=\"br0\">[</span><span class=\"re0\">$dir_num</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\"># look behind and in front of the player.</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@loc</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$player</span> <span class=\"sy0\">+</span> <span class=\"re0\">$delta</span> <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@val</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@loc</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\"># unlike the forward solution, we cannot push boxes</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$val</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>WALL<span class=\"sy0\">|</span>BOX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"re0\">$level</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> PLAYER<span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">-=</span> PLAYER<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"co1\"># unlike the forward solution, if we have a box behind us</span><br/>\t\t\t<span class=\"co1\"># we can *either* pull it or not.  This means there are</span><br/>\t\t\t<span class=\"co1\"># two \"successors\" to this board.</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$val</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> BOX <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$pull</span> <span class=\"sy0\">=</span> <span class=\"re0\">$new</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$pull</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">-=</span> BOX<span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/vec.html\"><span class=\"kw3\">vec</span></a><span class=\"br0\">(</span><span class=\"re0\">$pull</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> BOX<span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/goto.html\"><span class=\"kw3\">goto</span></a> RWALK <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$pull</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$pmoves</span> <span class=\"sy0\">=</span> <span class=\"re0\">$UDLR</span><span class=\"br0\">[</span><span class=\"re0\">$dir_num</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"re0\">$moves</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$pull</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pmoves</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@rnext</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$pmoves</span><span class=\"sy0\">,</span> <span class=\"re0\">$pull</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/goto.html\"><span class=\"kw3\">goto</span></a> RWALK <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$fseen</span><span class=\"br0\">{</span><span class=\"re0\">$pull</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Doing pull<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$solution</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pull</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">last</span> MAIN<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tRWALK<span class=\"sy0\">:</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$new</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"co1\"># next direction.</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$wmoves</span> <span class=\"sy0\">=</span> <span class=\"re0\">$udlr</span><span class=\"br0\">[</span><span class=\"re0\">$dir_num</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"re0\">$moves</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$new</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$wmoves</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@rnext</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$wmoves</span><span class=\"sy0\">,</span> <span class=\"re0\">$new</span><span class=\"sy0\">,</span> <span class=\"re0\">$loc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$fseen</span><span class=\"br0\">{</span><span class=\"re0\">$new</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Rwalk<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$solution</span> <span class=\"sy0\">=</span> <span class=\"re0\">$new</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">last</span> MAIN<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">last</span> BACKWARD <span class=\"kw1\">if</span> <span class=\"re0\">@rtodo</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">use</span> vars <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><span class=\"re0\">*rtodo</span> <span class=\"re0\">*rnext</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">*rtodo</span><span class=\"sy0\">,</span> <span class=\"re0\">*rnext</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">\\@rnext</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@rtodo</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"co1\"># end BACKWARD</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$solution</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$fmoves</span> <span class=\"sy0\">=</span> <span class=\"re0\">$fseen</span><span class=\"br0\">{</span><span class=\"re0\">$solution</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$rmoves</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rseen</span><span class=\"br0\">{</span><span class=\"re0\">$solution</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Solution found!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Time: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"co5\">$^T</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" seconds<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Moves: $fmoves $rmoves<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Move Length: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$fmoves</span> <span class=\"sy0\">.</span> <span class=\"re0\">$rmoves</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Middle Board: <span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> printable_board<span class=\"br0\">(</span><span class=\"re0\">$solution</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"No solution found!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">__END__</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 101, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$level</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">:</span>to<span class=\"sy0\">//;</span><br/><span class=\"co1\">#######</span><br/><span class=\"co1\">#     #</span><br/><span class=\"co1\">#     #</span><br/><span class=\"co1\">#. #  #</span><br/><span class=\"co1\">#. $$ #</span><br/><span class=\"co1\">#.$$  #</span><br/><span class=\"co1\">#.#  @#</span><br/><span class=\"co1\">#######</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">'level:'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">print</span> <span class=\"re0\">$level</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">'solution:'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> solve<span class=\"br0\">(</span><span class=\"re0\">$level</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>   <br/>\u00a0<br/><span class=\"kw2\">class</span> State <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Str <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">board</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Str <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">sol</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Int <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">pos</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> move<span class=\"br0\">(</span>Int <span class=\"re0\">$delta</span> <span class=\"sy0\">--&gt;</span> Str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"re0\">$!board</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$new</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$!pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'@'</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$!pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$!pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">:=</span> <span class=\"re0\">$!pos</span> <span class=\"sy0\">+</span> <span class=\"re0\">$delta</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$new</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">' '</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'@'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'+'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$new</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"kw3\">push</span><span class=\"br0\">(</span>Int <span class=\"re0\">$delta</span> <span class=\"sy0\">--&gt;</span> Str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">:=</span> <span class=\"re0\">$!pos</span> <span class=\"sy0\">+</span> <span class=\"re0\">$delta</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$box</span> <span class=\"sy0\">:=</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">+</span> <span class=\"re0\">$delta</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"st_h\">''</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$!board</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$box</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">' '</span> <span class=\"sy0\">|</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"re0\">$!board</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$new</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$!pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'@'</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$!pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$!pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'.'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$new</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'$'</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'@'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'+'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$new</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$box</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">' '</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$box</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'$'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            substr<span class=\"sy0\">-</span>rw<span class=\"br0\">(</span><span class=\"re0\">$new</span><span class=\"sy0\">,</span><span class=\"re0\">$box</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'*'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$new</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve<span class=\"br0\">(</span>Str <span class=\"re0\">$start</span> <span class=\"sy0\">--&gt;</span> Str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$board</span> <span class=\"sy0\">=</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@dirs</span> <span class=\"sy0\">=</span><br/>        <span class=\"br0\">[</span><span class=\"st0\">\"u\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"U\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"re0\">$width</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"st0\">\"r\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"st0\">\"d\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"st0\">\"l\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%visited</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"kw3\">index</span><span class=\"br0\">(</span><span class=\"st_h\">'@'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@open</span> <span class=\"sy0\">=</span> State<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$board</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>sol<span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$pos</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">@open</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$state</span> <span class=\"sy0\">=</span> <span class=\"re0\">@open</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@dirs</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$move</span><span class=\"sy0\">,</span> <span class=\"re0\">$push</span><span class=\"sy0\">,</span> <span class=\"re0\">$delta</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$board</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$sol</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <span class=\"re0\">$state</span><span class=\"sy0\">.</span><span class=\"me1\">pos</span> <span class=\"sy0\">+</span> <span class=\"re0\">$delta</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">given</span> <span class=\"re0\">$state</span><span class=\"sy0\">.</span><span class=\"me1\">board</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> <span class=\"st_h\">'$'</span> <span class=\"sy0\">|</span> <span class=\"st_h\">'*'</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$board</span> <span class=\"sy0\">=</span> <span class=\"re0\">$state</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$delta</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$board</span> <span class=\"kw1\">eq</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">||</span> <span class=\"re0\">%visited</span><span class=\"br0\">{</span><span class=\"re0\">$board</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$sol</span> <span class=\"sy0\">=</span> <span class=\"re0\">$state</span><span class=\"sy0\">.</span><span class=\"me1\">sol</span> <span class=\"sy0\">~</span> <span class=\"re0\">$push</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> <span class=\"re0\">$sol</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$board</span> <span class=\"sy0\">~~</span> <span class=\"co2\">/&lt;[ . + ]&gt;/</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"st_h\">' '</span> <span class=\"sy0\">|</span> <span class=\"st_h\">'.'</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">$board</span> <span class=\"sy0\">=</span> <span class=\"re0\">$state</span><span class=\"sy0\">.</span><span class=\"me1\">move</span><span class=\"br0\">(</span><span class=\"re0\">$delta</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">%visited</span><span class=\"br0\">{</span><span class=\"re0\">$board</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$sol</span> <span class=\"sy0\">=</span> <span class=\"re0\">$state</span><span class=\"sy0\">.</span><span class=\"me1\">sol</span> <span class=\"sy0\">~</span> <span class=\"re0\">$move</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">default</span> <span class=\"br0\">{</span> <span class=\"kw1\">next</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">@open</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> State<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span><span class=\"re0\">$board</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$sol</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$pos</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">%visited</span><span class=\"br0\">{</span><span class=\"re0\">$board</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 82, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/># Display board<br/>(de display ()<br/>   (disp *Board NIL<br/>      '((This)<br/>         (pack<br/>            (if2 (== This *Pos) (memq This *Goals)<br/>               \"+\"                   # Player on goal<br/>               \"@\"                   # Player elsewhere<br/>               (if (: val) \"*\" \".\")  # On gloal<br/>               (or (: val) \" \") )    # Elsewhere<br/>            \" \" ) ) ) )<br/>\u00a0<br/># Initialize<br/>(de main (Lst)<br/>   (mapc<br/>      '((B L)<br/>         (mapc<br/>            '((This C)<br/>               (case C<br/>                  (\" \")<br/>                  (\".\" (push '*Goals This))<br/>                  (\"@\" (setq *Pos This))<br/>                  (\"$\" (=: val C) (push '*Boxes This))<br/>                  (T (=: val C)) ) )<br/>               B L ) )<br/>      (setq *Board (grid (length (car Lst)) (length Lst)))<br/>      (apply mapcar (flip (mapcar chop Lst)) list) )<br/>   (display) )<br/>\u00a0<br/># Generate possible push-moves<br/>(de pushes ()<br/>   (make<br/>      (for Box *Boxes<br/>         (unless (or (; (west Box) val) (; (east Box) val))<br/>            (when (moves (east Box))<br/>               (link (cons (cons Box (west Box)) *Pos \"L\" @)) )<br/>            (when (moves (west Box))<br/>               (link (cons (cons Box (east Box)) *Pos \"R\" @)) ) )<br/>         (unless (or (; (south Box) val) (; (north Box) val))<br/>            (when (moves (north Box))<br/>               (link (cons (cons Box (south Box)) *Pos \"D\" @)) )<br/>            (when (moves (south Box))<br/>               (link (cons (cons Box (north Box)) *Pos \"U\" @)) ) ) ) ) )<br/>\u00a0<br/># Moves of player to destination<br/>(de moves (Dst Hist)<br/>   (or<br/>      (== Dst *Pos)<br/>      (mini length<br/>         (extract<br/>            '((Dir)<br/>               (with ((car Dir) Dst)<br/>                  (cond<br/>                     ((== This *Pos) (cons (cdr Dir)))<br/>                     ((: val))<br/>                     ((memq This Hist))<br/>                     ((moves This (cons Dst Hist))<br/>                        (cons (cdr Dir) @) ) ) ) )<br/>            '((west . \"r\") (east . \"l\") (south . \"u\") (north . \"d\")) ) ) ) )<br/>\u00a0<br/># Find solution<br/>(de go (Res)<br/>   (unless (idx '*Hist (sort (copy *Boxes)) T)  # No repeated state<br/>      (if (find '((This) (&lt;&gt; \"$\" (: val))) *Goals)<br/>         (pick<br/>            '((Psh)<br/>               (setq  # Move<br/>                  *Pos (caar Psh)<br/>                  *Boxes (cons (cdar Psh) (delq *Pos *Boxes)) )<br/>               (put *Pos 'val NIL)<br/>               (put (cdar Psh) 'val \"$\")<br/>               (prog1 (go (append (cddr Psh) Res))<br/>                  (setq  # Undo move<br/>                     *Pos (cadr Psh)<br/>                     *Boxes (cons (caar Psh) (delq (cdar Psh) *Boxes)) )<br/>                  (put (cdar Psh) 'val NIL)<br/>                  (put (caar Psh) 'val \"$\") ) )<br/>            (pushes) )<br/>         (display)  # Display solution<br/>         (pack (flip Res)) ) ) )</pre>"}, {"lang": "Python", "loc": 96, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">array</span> <span class=\"kw1\">import</span> <span class=\"kw3\">array</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> deque<br/><span class=\"kw1\">import</span> psyco<br/>\u00a0<br/>data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>nrows <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>px <span class=\"sy0\">=</span> py <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>sdata <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>ddata <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">def</span> init<span class=\"br0\">(</span>board<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> data<span class=\"sy0\">,</span> nrows<span class=\"sy0\">,</span> sdata<span class=\"sy0\">,</span> ddata<span class=\"sy0\">,</span> px<span class=\"sy0\">,</span> py<br/>    data <span class=\"sy0\">=</span> <span class=\"kw2\">filter</span><span class=\"br0\">(</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> board.<span class=\"me1\">splitlines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    nrows <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> data<span class=\"br0\">)</span><br/>\u00a0<br/>    maps <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">' '</span>:<span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'.'</span>: <span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"st0\">'@'</span>:<span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span>:<span class=\"st0\">'#'</span><span class=\"sy0\">,</span> <span class=\"st0\">'$'</span>:<span class=\"st0\">' '</span><span class=\"br0\">}</span><br/>    mapd <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">' '</span>:<span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'.'</span>: <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'@'</span>:<span class=\"st0\">'@'</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span>:<span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'$'</span>:<span class=\"st0\">'*'</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r<span class=\"sy0\">,</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> c<span class=\"sy0\">,</span> ch <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span>:<br/>            sdata +<span class=\"sy0\">=</span> maps<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><br/>            ddata +<span class=\"sy0\">=</span> mapd<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> ch <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span>:<br/>                px <span class=\"sy0\">=</span> c<br/>                py <span class=\"sy0\">=</span> r<br/>\u00a0<br/><span class=\"kw1\">def</span> push<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> data<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> sdata<span class=\"br0\">[</span><span class=\"br0\">(</span>y+<span class=\"nu0\">2</span>*dy<span class=\"br0\">)</span> * nrows + x+<span class=\"nu0\">2</span>*dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"kw1\">or</span> \\<br/>       data<span class=\"br0\">[</span><span class=\"br0\">(</span>y+<span class=\"nu0\">2</span>*dy<span class=\"br0\">)</span> * nrows + x+<span class=\"nu0\">2</span>*dx<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><br/>\u00a0<br/>    data2 <span class=\"sy0\">=</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> data<span class=\"br0\">)</span><br/>    data2<span class=\"br0\">[</span>y * nrows + x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>    data2<span class=\"br0\">[</span><span class=\"br0\">(</span>y+dy<span class=\"br0\">)</span> * nrows + x+dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><br/>    data2<span class=\"br0\">[</span><span class=\"br0\">(</span>y+<span class=\"nu0\">2</span>*dy<span class=\"br0\">)</span> * nrows + x+<span class=\"nu0\">2</span>*dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span><br/>    <span class=\"kw1\">return</span> data2.<span class=\"me1\">tostring</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> is_solved<span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sdata<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw2\">open</span> <span class=\"sy0\">=</span> deque<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>ddata<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> px<span class=\"sy0\">,</span> py<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    visited <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span>ddata<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    dirs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'u'</span><span class=\"sy0\">,</span> <span class=\"st0\">'U'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'r'</span><span class=\"sy0\">,</span> <span class=\"st0\">'R'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'d'</span><span class=\"sy0\">,</span> <span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'l'</span><span class=\"sy0\">,</span> <span class=\"st0\">'L'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    lnrows <span class=\"sy0\">=</span> nrows<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">open</span>:<br/>        cur<span class=\"sy0\">,</span> csol<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"kw2\">open</span>.<span class=\"me1\">popleft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> di <span class=\"kw1\">in</span> dirs:<br/>            temp <span class=\"sy0\">=</span> cur<br/>            dx<span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> di<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> di<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> temp<span class=\"br0\">[</span><span class=\"br0\">(</span>y+dy<span class=\"br0\">)</span> * lnrows + x+dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span>:<br/>                temp <span class=\"sy0\">=</span> push<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> temp<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> temp <span class=\"kw1\">and</span> temp <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> visited:<br/>                    <span class=\"kw1\">if</span> is_solved<span class=\"br0\">(</span>temp<span class=\"br0\">)</span>:<br/>                        <span class=\"kw1\">return</span> csol + di<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>                    <span class=\"kw2\">open</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> csol + di<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x+dx<span class=\"sy0\">,</span> y+dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    visited.<span class=\"me1\">add</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span>:<br/>                <span class=\"kw1\">if</span> sdata<span class=\"br0\">[</span><span class=\"br0\">(</span>y+dy<span class=\"br0\">)</span> * lnrows + x+dx<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span> <span class=\"kw1\">or</span> \\<br/>                   temp<span class=\"br0\">[</span><span class=\"br0\">(</span>y+dy<span class=\"br0\">)</span> * lnrows + x+dx<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span>:<br/>                    <span class=\"kw1\">continue</span><br/>\u00a0<br/>                data2 <span class=\"sy0\">=</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"st0\">\"c\"</span><span class=\"sy0\">,</span> temp<span class=\"br0\">)</span><br/>                data2<span class=\"br0\">[</span>y * lnrows + x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><br/>                data2<span class=\"br0\">[</span><span class=\"br0\">(</span>y+dy<span class=\"br0\">)</span> * lnrows + x+dx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'@'</span><br/>                temp <span class=\"sy0\">=</span> data2.<span class=\"me1\">tostring</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> temp <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> visited:<br/>                    <span class=\"kw1\">if</span> is_solved<span class=\"br0\">(</span>temp<span class=\"br0\">)</span>:<br/>                        <span class=\"kw1\">return</span> csol + di<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>                    <span class=\"kw2\">open</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> csol + di<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x+dx<span class=\"sy0\">,</span> y+dy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    visited.<span class=\"me1\">add</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"No solution\"</span><br/>\u00a0<br/>\u00a0<br/>level <span class=\"sy0\">=</span> <span class=\"st0\">\"\"\"<span class=\"es0\">\\</span><br/>#######<br/>#     #<br/>#     #<br/>#. #  #<br/>#. $$ #<br/>#.$$  #<br/>#.#  @#<br/>#######\"\"\"</span><br/>\u00a0<br/>psyco.<span class=\"me1\">full</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>init<span class=\"br0\">(</span>level<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> level<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 109, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require data/heap<br/>  \"../lib/vector2.rkt\" \"../lib/queue.rkt\" (only-in \"../lib/util.rkt\" push! tstruct ret awhen))<br/>\u00a0<br/>(define level (list \"#######\"<br/>                    \"#     #\"<br/>                    \"#     #\"<br/>                    \"#. #  #\"<br/>                    \"#. $$ #\"<br/>                    \"#.$$  #\"<br/>                    \"#.#  @#\"<br/>                    \"#######\"))<br/>(define (strings-&gt;vec2 l) (lists-&gt;vec2 (map string-&gt;list l)))<br/>;turn everything except walls into distance from goals<br/>(define (clear-level l)<br/>  (ret ([l (vec2-copy l)])<br/>    (define dots (vec2-atsq l #\\.))<br/>    (define q (list-&gt;q (map (\u03bb (p) (cons p 0)) dots)))<br/>    (let bfs ()\u00a0;this search has implicit history in the mutated vector2<br/>      (unless (nilq? q)<br/>        (match-define (cons p n) (deq! q))<br/>        (define x (<a class=\"__cf_email__\" data-cfemail=\"502635336210\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> l p))<br/>       \u00a0;stop if position is either a wall or a previously filled number<br/>        (cond [(or (eq? x #\\#) (number? x)) (bfs)]<br/>              [else (vec2! l p n)<br/>                    (for-adj l x [p p] #f (enq! (cons p (add1 n)) q))<br/>                    (bfs)])))))<br/>\u00a0<br/>;corresponds to PicoLisp's move table in \"moves\", while also adding a push direction mapping<br/>(tstruct move (f d))<br/>(define-values (mu md ml mr LURD)<br/>  (let ()<br/>    (define t (map (\u03bb (x) (cons (car x) (apply pos (cdr x))))<br/>                   '([#\\u -1 0] [#\\d 1 0] [#\\l 0 -1] [#\\r 0 1])))<br/>    (define (mv d)<br/>      (define x (assoc d t))<br/>      (move (\u03bb (p) (pos+ p (cdr x))) (car x)))<br/>    (values (mv #\\u) (mv #\\d) (mv #\\l) (mv #\\r)<br/>            (\u03bb (d) (char-upcase (car (findf (\u03bb (x) (equal? d (cdr x))) t)))))))<br/>\u00a0<br/>;state = player pos * box poses<br/>(tstruct st (p b))<br/>(define (st= s1 s2) (andmap (\u03bb (b) (member b (st-b s2))) (st-b s1)))<br/>(define (box? p s) (member p (st-b s)))<br/>;calculates value of a state for insertion into priority queue<br/>;value is sum of box distances from goals<br/>(define (value s l) (apply + (map (\u03bb (p) (<a class=\"__cf_email__\" data-cfemail=\"c4b2a1a7f684\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> l p)) (st-b s))))<br/>;init state for a level<br/>(define (st0 l) (st (vec2-atq l #\\@) (vec2-atsq l #\\$)))<br/>(define (make-solution-checker l)<br/>  (define dots (vec2-atsq l #\\.))<br/>  (\u03bb (s) (andmap (\u03bb (b) (member b dots)) (st-b s))))<br/>\u00a0<br/>;state after push * lurd history<br/>(tstruct push (st h))<br/>(define (pushes s l)<br/>  (ret ([pushes '()])<br/>    (for ([b (in-list (st-b s))])<br/>      (for-adj l a [p b] #f<br/>        (define d (pos- p b))\u00a0;direction of push<br/>        (define op (pos- b d))\u00a0;where player stands to push<br/>        (define o (<a class=\"__cf_email__\" data-cfemail=\"aadccfc998ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> l op))<br/>       \u00a0;make sure push pos and push dest are clear<br/>        (when (and (number? a) (number? o)<br/>                   (not (box? p s)) (not (box? op s)))<br/>          (awhen [@ (moves s op l)]<br/>            (define new-st (st b (cons p (remove b (st-b s)))))<br/>            (push! (push new-st (cons (LURD d) @)) pushes)))))))<br/>\u00a0<br/>;state * goal pos * level -&gt; lurd string<br/>(define (moves s g l)<br/>  (define h '())<br/>  (define q (list-&gt;q (list (list (st-p s)))))<br/>  (let bfs ()<br/>    (if (nilq? q)<br/>        #f<br/>        (match-let ([(cons p lurd) (deq! q)])<br/>          (cond [(equal? p g) lurd]<br/>                [(or (char=? (<a class=\"__cf_email__\" data-cfemail=\"730516104133\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> l p) #\\#) (box? p s) (member p h)) (bfs)]<br/>                [else (push! p h)<br/>                      (for-each (\u03bb (m)<br/>                                  (match-define (move f s) m)<br/>                                  (enq! (cons (f p) (cons s lurd)) q))<br/>                                (list mu md ml mr))<br/>                      (bfs)])))))<br/>\u00a0<br/>(define (sokoban l)<br/>  (define-values (clear s0 solved?)<br/>    (let ([l (strings-&gt;vec2 l)])<br/>      (values (clear-level l) (st0 l) (make-solution-checker l))))<br/>  (define h '())<br/>  (tstruct q-elem (s lurd v))\u00a0;priority queue stores state, lurd hist, and value<br/>  (define (elem&lt;= s1 s2) (&lt;= (q-elem-v s1) (q-elem-v s2)))\u00a0;compare wrapped values<br/> \u00a0;queue stores a single element at the beginning consisting of:<br/> \u00a0;1. starting state, 2. empty lurd history, 3. value of starting state<br/>  (define q (vector-&gt;heap elem&lt;= (vector (q-elem s0 '() (value s0 clear)))))<br/>  (let bfs ()<br/>    (match-define (q-elem s lurd _) (heap-min q))<br/>    (heap-remove-min! q)<br/>    (cond [(solved? s) (list-&gt;string (reverse lurd))]<br/>          [(memf (\u03bb (s1) (st= s s1)) h) (bfs)]<br/>          [else (push! s h)<br/>                (for-each (\u03bb (p)<br/>                            (define s (push-st p))<br/>                            (heap-add! q (q-elem s (append (push-h p) lurd) (value s clear))))<br/>                          (pushes s clear))<br/>                (bfs)])))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 59, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Sokoban<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>level<span class=\"br0\">)</span><br/>    board = level.<span class=\"me1\">each_line</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:rstrip<span class=\"br0\">)</span><br/>    <span class=\"re1\">@nrows</span> = board.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:size<span class=\"br0\">)</span>.<span class=\"me1\">max</span><br/>    board.<span class=\"me1\">map</span>!<span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> line.<span class=\"me1\">ljust</span><span class=\"br0\">(</span>@nrows<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    board.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>row, r<span class=\"sy0\">|</span><br/>      row.<span class=\"me1\">each_char</span>.<span class=\"me1\">with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>ch, c<span class=\"sy0\">|</span><br/>        <span class=\"re1\">@px</span>, <span class=\"re1\">@py</span> = c, r  <span class=\"kw1\">if</span> ch == <span class=\"st0\">'@'</span> <span class=\"kw1\">or</span> ch == <span class=\"st0\">'+'</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"re1\">@goal</span> = board.<span class=\"me1\">join</span>.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">' <a class=\"__cf_email__\" data-cfemail=\"785638\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#$+*'</span>, <span class=\"st0\">' .   ..'</span><span class=\"br0\">)</span><br/>                 .<span class=\"me1\">each_char</span>.<span class=\"me1\">with_index</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>ch, c<span class=\"sy0\">|</span> ch == <span class=\"st0\">'.'</span><span class=\"br0\">}</span><br/>                 .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:last<span class=\"br0\">)</span><br/>    <span class=\"re1\">@board</span> = board.<span class=\"me1\">join</span>.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">' <a class=\"__cf_email__\" data-cfemail=\"94bad4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#$+*'</span>, <span class=\"st0\">'  @#$ $'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> pos<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    y <span class=\"sy0\">*</span> <span class=\"re1\">@nrows</span> <span class=\"sy0\">+</span> x<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> push<span class=\"br0\">(</span>x, y, dx, dy, board<span class=\"br0\">)</span>         <span class=\"co1\"># modify board</span><br/>    <span class=\"kw2\">return</span>  <span class=\"kw1\">if</span> board<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>dx, y<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>dy<span class=\"br0\">)</span><span class=\"br0\">]</span>\u00a0!= <span class=\"st0\">' '</span><br/>    board<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x     , y     <span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"st0\">' '</span><br/>    board<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> dx, y <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"st0\">'@'</span><br/>    board<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>dx, y<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>dy<span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"st0\">'$'</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> solved?<span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>    <span class=\"re1\">@goal</span>.<span class=\"me1\">all</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> board<span class=\"br0\">[</span>i<span class=\"br0\">]</span> == <span class=\"st0\">'$'</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  DIRS = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">'u'</span>, <span class=\"st0\">'U'</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"st0\">'r'</span>, <span class=\"st0\">'R'</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span>, <span class=\"st0\">'d'</span>, <span class=\"st0\">'D'</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"st0\">'l'</span>, <span class=\"st0\">'L'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">def</span> solve<br/>    queue = <span class=\"br0\">[</span><span class=\"br0\">[</span>@board, <span class=\"st0\">\"\"</span>, <span class=\"re1\">@px</span>, <span class=\"re1\">@py</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    visited = <span class=\"kw4\">Set</span><span class=\"br0\">[</span>@board<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">until</span> queue.<span class=\"me1\">empty</span>?<br/>      current, csol, x, y = queue.<span class=\"me1\">shift</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> dx, dy, cmove, cpush <span class=\"kw1\">in</span> DIRS<br/>        work = current.<span class=\"me1\">dup</span><br/>        <span class=\"kw1\">case</span> work<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>dx, y<span class=\"sy0\">+</span>dy<span class=\"br0\">)</span><span class=\"br0\">]</span>      <span class=\"co1\"># next character</span><br/>        <span class=\"kw1\">when</span> <span class=\"st0\">'$'</span><br/>          <span class=\"kw1\">next</span>  <span class=\"kw1\">unless</span> push<span class=\"br0\">(</span>x, y, dx, dy, work<span class=\"br0\">)</span><br/>          <span class=\"kw1\">next</span>  <span class=\"kw1\">unless</span> visited.<span class=\"me1\">add</span>?<span class=\"br0\">(</span>work<span class=\"br0\">)</span><br/>          <span class=\"kw2\">return</span> csol<span class=\"sy0\">+</span>cpush  <span class=\"kw1\">if</span> solved?<span class=\"br0\">(</span>work<span class=\"br0\">)</span><br/>          queue <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>work, csol<span class=\"sy0\">+</span>cpush, x<span class=\"sy0\">+</span>dx, y<span class=\"sy0\">+</span>dy<span class=\"br0\">]</span><br/>        <span class=\"kw1\">when</span> <span class=\"st0\">' '</span><br/>          work<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">]</span>       = <span class=\"st0\">' '</span><br/>          work<span class=\"br0\">[</span>pos<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>dx, y<span class=\"sy0\">+</span>dy<span class=\"br0\">)</span><span class=\"br0\">]</span> = <span class=\"st0\">'@'</span><br/>          queue <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>work, csol<span class=\"sy0\">+</span>cmove, x<span class=\"sy0\">+</span>dx, y<span class=\"sy0\">+</span>dy<span class=\"br0\">]</span>  <span class=\"kw1\">if</span> visited.<span class=\"me1\">add</span>?<span class=\"br0\">(</span>work<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"st0\">\"No solution\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Tcl", "loc": 70, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> solveSokoban b <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> cols <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dxes <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$cols</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$cols</span> -<span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$b</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"re0\">$c</span> <span class=\"br0\">{</span><br/>\t    <span class=\"st0\">\" \"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\" \"</span><span class=\"br0\">}</span><br/>\t    <span class=\"st0\">\"#\"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\"#\"</span><span class=\"br0\">}</span><br/>\t    <span class=\"st0\">\"@\"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> startplayer <span class=\"re0\">$i</span> <span class=\"br0\">}</span><br/>\t    <span class=\"st0\">\"$\"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><span class=\"kw2\">lappend</span> startbox <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>\t    <span class=\"st0\">\".\"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span>                    <span class=\"kw2\">lappend</span> targets <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>\t    <span class=\"st0\">\"+\"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> startplayer <span class=\"re0\">$i</span><span class=\"sy0\">;</span> <span class=\"kw2\">lappend</span> targets <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>\t    <span class=\"st0\">\"*\"</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> bdc <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><span class=\"kw2\">lappend</span> startbox <span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"kw2\">lappend</span> targets <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">incr</span> i<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$startplayer</span> <span class=\"re0\">$startbox</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> store<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> idx <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$q</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> idx <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span> x boxes<br/>\t<span class=\"kw1\">foreach</span> dir <span class=\"br0\">{</span>U D L R<span class=\"br0\">}</span> dx <span class=\"re0\">$dxes</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> x1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span> <span class=\"re0\">$boxes</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$bdc</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> x1 <span class=\"re0\">$dx</span><span class=\"br0\">]</span><span class=\"br0\">]</span> ne <span class=\"st0\">\" \"</span> || <span class=\"re0\">$x1</span> <span class=\"kw1\">in</span> <span class=\"re0\">$boxes</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">continue</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">set</span> tmpboxes <span class=\"re0\">$boxes</span><br/>\t\t<span class=\"kw1\">set</span> x1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$boxes</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$boxes</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> == <span class=\"re0\">$x1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">lset</span> tmpboxes <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x1</span> + <span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dx</span> == <span class=\"nu0\">1</span> || <span class=\"re0\">$dx</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> next <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x1</span> <span class=\"re0\">$tmpboxes</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> next <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x1</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer <span class=\"re0\">$tmpboxes</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists store<span class=\"br0\">(</span><span class=\"re0\">$next</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$targets</span> eq <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$next</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\t\t    lassign <span class=\"re0\">$c</span> ispush olddir<br/>\t\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$ispush</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw2\">append</span> solution <span class=\"re0\">$olddir</span><br/>\t\t\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw2\">append</span> solution <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$olddir</span><span class=\"br0\">]</span><br/>\t\t\t    <span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">append</span> solution <span class=\"re0\">$dir</span><span class=\"br0\">]</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t    <span class=\"kw1\">set</span> store<span class=\"br0\">(</span><span class=\"re0\">$next</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t    <span class=\"kw1\">set</span> nm <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t    <span class=\"kw2\">lappend</span> q <span class=\"re0\">$next</span><br/>\t\t    <span class=\"kw2\">lappend</span> q <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> nm <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">1</span> <span class=\"re0\">$dir</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$bdc</span> <span class=\"re0\">$x1</span><span class=\"br0\">]</span> eq <span class=\"st0\">\" \"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> next <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$boxes</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists store<span class=\"br0\">(</span><span class=\"re0\">$next</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> store<span class=\"br0\">(</span><span class=\"re0\">$next</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t    <span class=\"kw1\">set</span> nm <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$q</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t    <span class=\"kw2\">lappend</span> q <span class=\"re0\">$next</span><br/>\t\t    <span class=\"kw2\">lappend</span> q <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> nm <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">0</span> <span class=\"re0\">$dir</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">error</span> <span class=\"st0\">\"no solution\"</span><br/><span class=\"br0\">}</span></pre>"}]}