{"task": "Grayscale_image", "blocks": [{"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">type</span> Grayscale_Image <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Luminance;</pre>"}, {"lang": "BASIC256", "loc": 23, "block": "<pre class=\"text highlighted_source\">w = 143<br/>h = 188<br/>name$ = \"Mona_Lisa.jpg\"<br/>graphsize w,h<br/>imgload w/2, h/2, name$<br/>fastgraphics<br/>\u00a0<br/>for x = 0 to w-1<br/>   for y = 0 to h-1<br/>      p = pixel(x,y)<br/>      b = p\u00a0% 256<br/>      p = p \\256<br/>      g = p\u00a0% 256<br/>      p = p \\ 256<br/>      r = p\u00a0% 256<br/>      l = 0.2126*r + 0.7152*g + 0.0722*b<br/>      color rgb(l,l,l)<br/>      plot x,y<br/>   next y<br/>   refresh<br/>next x<br/>\u00a0<br/>imgsave \"Grey_\"+name$,\"jpg\"</pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">      Width% = 200<br/>      Height% = 200<br/>\u00a0<br/>      VDU 23,22,Width%;Height%;8,16,16,128<br/>      *display c:\\lena<br/>\u00a0<br/>      FOR y% = 0 TO Height%-1<br/>        FOR x% = 0 TO Width%-1<br/>          rgb% = FNgetpixel(x%,y%)<br/>          r% = rgb% &gt;&gt; 16<br/>          g% = (rgb% &gt;&gt; 8) AND &amp;FF<br/>          b% = rgb% AND &amp;FF<br/>          l% = INT(0.3*r% + 0.59*g% + 0.11*b% + 0.5)<br/>          PROCsetpixel(x%,y%,l%,l%,l%)<br/>        NEXT<br/>      NEXT y%<br/>      END<br/>\u00a0<br/>      DEF PROCsetpixel(x%,y%,r%,g%,b%)<br/>      COLOUR 1,r%,g%,b%<br/>      GCOL 1<br/>      LINE x%*2,y%*2,x%*2,y%*2<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNgetpixel(x%,y%)<br/>      LOCAL col%<br/>      col% = TINT(x%*2,y%*2)<br/>      SWAP\u00a0?^col%,?(^col%+2)<br/>      = col%</pre>"}, {"lang": "C", "loc": 12, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> luminance<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> luminance pixel1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> width<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> height<span class=\"sy0\">;</span><br/>   luminance <span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> grayimage_t<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> grayimage_t <span class=\"sy0\">*</span>grayimage<span class=\"sy0\">;</span><br/>\u00a0<br/>grayimage alloc_grayimg<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>grayimage tograyscale<span class=\"br0\">(</span>image<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>image tocolor<span class=\"br0\">(</span>grayimage<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C#", "loc": 18, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/>Bitmap tImage <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span><span class=\"st0\">\"spectrum.bmp\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> tImage<span class=\"sy0\">.</span><span class=\"me1\">Width</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> tImage<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tColor tCol <span class=\"sy0\">=</span> tImage<span class=\"sy0\">.</span><span class=\"me1\">GetPixel</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// L = 0.2126\u00b7R + 0.7152\u00b7G + 0.0722\u00b7B </span><br/>\t\t<span class=\"kw4\">double</span> L <span class=\"sy0\">=</span> <span class=\"nu0\">0.2126</span> <span class=\"sy0\">*</span> tCol<span class=\"sy0\">.</span><span class=\"me1\">R</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span> <span class=\"sy0\">*</span> tCol<span class=\"sy0\">.</span><span class=\"me1\">G</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span> <span class=\"sy0\">*</span> tCol<span class=\"sy0\">.</span><span class=\"me1\">B</span><span class=\"sy0\">;</span><br/>\t\ttImage<span class=\"sy0\">.</span><span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>x, y, Color<span class=\"sy0\">.</span><span class=\"me1\">FromArgb</span><span class=\"br0\">(</span>Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>, Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>, Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Save</span><br/>tImage<span class=\"sy0\">.</span><span class=\"me1\">Save</span><span class=\"br0\">(</span><span class=\"st0\">\"spectrum2.bmp\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 40, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">import</span> '<span class=\"br0\">[</span>java<span class=\"sy0\">.</span>io File<span class=\"br0\">]</span><br/>        '<span class=\"br0\">[</span>javax<span class=\"sy0\">.</span>imageio ImageIO<span class=\"br0\">]</span><br/>        '<span class=\"br0\">[</span>java<span class=\"sy0\">.</span>awt Color<span class=\"br0\">]</span><br/>        '<span class=\"br0\">[</span>java<span class=\"sy0\">.</span>awt<span class=\"sy0\">.</span>image BufferedImage<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rgb<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>gray <span class=\"br0\">[</span>color<span class=\"sy0\">-</span>image<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>width <span class=\"br0\">(</span><span class=\"sy0\">.</span>getWidth color<span class=\"sy0\">-</span>image<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">partition</span> width<br/>               <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">range</span> width<span class=\"br0\">)</span><br/>                     y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>getHeight color<span class=\"sy0\">-</span>image<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rgb <span class=\"br0\">(</span><span class=\"sy0\">.</span>getRGB color<span class=\"sy0\">-</span>image x y<span class=\"br0\">)</span> <br/>                       rgb<span class=\"sy0\">-</span>object <span class=\"br0\">(</span>new Color rgb<span class=\"br0\">)</span> <br/>                       r <span class=\"br0\">(</span><span class=\"sy0\">.</span>getRed rgb<span class=\"sy0\">-</span>object<span class=\"br0\">)</span> <br/>                       g <span class=\"br0\">(</span><span class=\"sy0\">.</span>getGreen rgb<span class=\"sy0\">-</span>object<span class=\"br0\">)</span><br/>                       b <span class=\"br0\">(</span><span class=\"sy0\">.</span>getBlue rgb<span class=\"sy0\">-</span>object<span class=\"br0\">)</span> <br/>                       a <span class=\"br0\">(</span><span class=\"sy0\">.</span>getAlpha rgb<span class=\"sy0\">-</span>object<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                   <span class=\"co1\">;Compute the grayscale value an return it: L = 0.2126\u00b7R + 0.7152\u00b7G + 0.0722\u00b7B</span><br/>                   <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> r <span class=\"nu0\">0.2126</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> g <span class=\"nu0\">0.7152</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> b <span class=\"nu0\">0.0722</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> write<span class=\"sy0\">-</span>matrix<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>image <span class=\"br0\">[</span>matrix filename<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>ImageIO<span class=\"sy0\">/</span>write <br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>height <span class=\"br0\">(</span><span class=\"kw1\">count</span> matrix<span class=\"br0\">)</span> <br/>         width <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> matrix<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>         output<span class=\"sy0\">-</span>image <span class=\"br0\">(</span>new BufferedImage width height BufferedImage<span class=\"sy0\">/</span>TYPE_BYTE_GRAY<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>row<span class=\"sy0\">-</span>index    <span class=\"br0\">(</span><span class=\"kw1\">range</span> height<span class=\"br0\">)</span> <br/>             column<span class=\"sy0\">-</span>index <span class=\"br0\">(</span><span class=\"kw1\">range</span> width<span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>       <span class=\"br0\">(</span><span class=\"sy0\">.</span>setRGB output<span class=\"sy0\">-</span>image column<span class=\"sy0\">-</span>index row<span class=\"sy0\">-</span>index <span class=\"br0\">(</span><span class=\"sy0\">.</span>intValue <span class=\"br0\">(</span>nth <span class=\"br0\">(</span>nth matrix row<span class=\"sy0\">-</span>index<span class=\"br0\">)</span> column<span class=\"sy0\">-</span>index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     output<span class=\"sy0\">-</span>image<span class=\"br0\">)</span><br/>   <span class=\"st0\">\"png\"</span> <br/>   <span class=\"br0\">(</span>new File filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println<br/>  <span class=\"br0\">(</span>write<span class=\"sy0\">-</span>matrix<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>image<br/>    <span class=\"br0\">(</span>rgb<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>gray<br/>      <span class=\"br0\">(</span>ImageIO<span class=\"sy0\">/</span>read <span class=\"br0\">(</span>new File <span class=\"st0\">\"test.jpg\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"test-gray-cloj.png\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 26, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>in-package #<span class=\"sy0\">:</span><span class=\"me1\">rgb-pixel-buffer</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rgb-to-gray-image <span class=\"br0\">(</span>rgb-image<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>rgb-to-gray <span class=\"br0\">(</span>rgb-<span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>round <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">0.2126</span> <span class=\"br0\">(</span>rgb-pixel-red rgb-<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t     <span class=\"br0\">(</span>* <span class=\"nu0\">0.7152</span> <span class=\"br0\">(</span>rgb-pixel-green rgb-<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t     <span class=\"br0\">(</span>* <span class=\"nu0\">0.0722</span> <span class=\"br0\">(</span>rgb-pixel-blue rgb-<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>gray-image <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span>array-dimensions rgb-image<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"br0\">(</span>unsigned-byte <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span>array-total-size rgb-image<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> gray-image i<span class=\"br0\">)</span> <span class=\"br0\">(</span>rgb-to-gray <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> rgb-image i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      gray-image<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>export 'rgb-to-gray-image<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> grayscale-image-to-pgm-file <span class=\"br0\">(</span>image file-<span class=\"kw1\">name</span> <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>max-<span class=\"kw1\">value</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>p file-<span class=\"kw1\">name</span> <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span><br/>\t\t     <span class=\"sy0\">:</span><span class=\"me1\">if-exists</span> <span class=\"sy0\">:</span><span class=\"me1\">supersede</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format p <span class=\"st0\">\"P2 ~&amp;~A ~A ~&amp;~A\"</span> <span class=\"br0\">(</span>array-dimension image <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>array-dimension image <span class=\"nu0\">0</span><span class=\"br0\">)</span> max-<span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span>array-total-size image<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> image i<span class=\"br0\">)</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>export 'grayscale-image-to-pgm-file<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 117, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">module</span> grayscale_image<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">public</span> <span class=\"kw2\">import</span> bitmap<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Gray <span class=\"br0\">{</span><br/>    <span class=\"kw4\">ubyte</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> black <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> white <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> c <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>Image<span class=\"sy0\">!</span>Color loadPGM<span class=\"br0\">(</span>Color<span class=\"br0\">)</span><span class=\"br0\">(</span>Image<span class=\"sy0\">!</span>Color img<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> fileName<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> readNum<span class=\"br0\">(</span>FILE<span class=\"sy0\">*</span> f<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>fscanf<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> fgetc<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> fgetc<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> EOF<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>img <span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        img <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>Color<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> fin <span class=\"sy0\">=</span> fopen<span class=\"br0\">(</span>fileName.<span class=\"me1\">toStringz</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>exit<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fin<span class=\"br0\">)</span> fclose<span class=\"br0\">(</span>fin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>fin<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Can't open input file.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fgetc<span class=\"br0\">(</span>fin<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'P'</span> <span class=\"sy0\">||</span><br/>        fgetc<span class=\"br0\">(</span>fin<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'5'</span> <span class=\"sy0\">||</span><br/>        <span class=\"sy0\">!</span>isWhite<span class=\"br0\">(</span>fgetc<span class=\"br0\">(</span>fin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Not a PGM (PPM P5) image.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> nc <span class=\"sy0\">=</span> readNum<span class=\"br0\">(</span>fin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> nr <span class=\"sy0\">=</span> readNum<span class=\"br0\">(</span>fin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> maxVal <span class=\"sy0\">=</span> readNum<span class=\"br0\">(</span>fin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> nr <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> maxVal <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong input image sizes.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    img.<span class=\"me1\">allocate</span><span class=\"br0\">(</span>nc<span class=\"sy0\">,</span> nr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> pix <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>img.<span class=\"me1\">image</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> count <span class=\"sy0\">=</span> fread<span class=\"br0\">(</span>pix.<span class=\"me1\">ptr</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> nc <span class=\"sy0\">*</span> nr<span class=\"sy0\">,</span> fin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">!=</span> nc <span class=\"sy0\">*</span> nr<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong number of items read.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    pix.<span class=\"me1\">copy</span><span class=\"br0\">(</span>img.<span class=\"me1\">image</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> img<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> savePGM<span class=\"br0\">(</span>Color<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>Color img<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> fileName<span class=\"br0\">)</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>img <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>fileName.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>img.<span class=\"me1\">nx</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> img.<span class=\"me1\">ny</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span><br/>           img.<span class=\"me1\">image</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> img.<span class=\"me1\">nx</span> <span class=\"sy0\">*</span> img.<span class=\"me1\">ny</span><span class=\"sy0\">,</span><br/>           <span class=\"st0\">\"Wrong image.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> fout <span class=\"sy0\">=</span> fopen<span class=\"br0\">(</span>fileName.<span class=\"me1\">toStringz</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"wb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fout <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"File can't be opened.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fprintf<span class=\"br0\">(</span>fout<span class=\"sy0\">,</span> <span class=\"st0\">\"P5<span class=\"es1\">\\n</span>%d\u00a0%d<span class=\"es1\">\\n</span>255<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> img.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> img.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> pix <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>img.<span class=\"me1\">image</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> p<span class=\"sy0\">;</span> pix<span class=\"br0\">)</span><br/>        p <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>pix<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>img.<span class=\"me1\">image</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> count <span class=\"sy0\">=</span> fwrite<span class=\"br0\">(</span>pix.<span class=\"me1\">ptr</span><span class=\"sy0\">,</span> <span class=\"kw4\">ubyte</span>.<span class=\"me1\">sizeof</span><span class=\"sy0\">,</span><br/>                             img.<span class=\"me1\">nx</span> <span class=\"sy0\">*</span> img.<span class=\"me1\">ny</span><span class=\"sy0\">,</span> fout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">!=</span> img.<span class=\"me1\">nx</span> <span class=\"sy0\">*</span> img.<span class=\"me1\">ny</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong number of items written.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fclose<span class=\"br0\">(</span>fout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>Gray lumCIE<span class=\"br0\">(</span><span class=\"kw2\">in</span> RGB c<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> Gray<span class=\"br0\">(</span><span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu16\">0.2126</span> <span class=\"sy0\">*</span> c.<span class=\"me1\">r</span> <span class=\"sy0\">+</span><br/>                            <span class=\"nu16\">0.7152</span> <span class=\"sy0\">*</span> c.<span class=\"me1\">g</span> <span class=\"sy0\">+</span><br/>                            <span class=\"nu16\">0.0722</span> <span class=\"sy0\">*</span> c.<span class=\"me1\">b</span> <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Gray lumAVG<span class=\"br0\">(</span><span class=\"kw2\">in</span> RGB c<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> Gray<span class=\"br0\">(</span><span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu16\">0.3333</span> <span class=\"sy0\">*</span> c.<span class=\"me1\">r</span> <span class=\"sy0\">+</span><br/>                            <span class=\"nu16\">0.3333</span> <span class=\"sy0\">*</span> c.<span class=\"me1\">g</span> <span class=\"sy0\">+</span><br/>                            <span class=\"nu16\">0.3333</span> <span class=\"sy0\">*</span> c.<span class=\"me1\">b</span> <span class=\"sy0\">+</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Image<span class=\"sy0\">!</span>Gray rgb2grayImage<span class=\"br0\">(</span><span class=\"kw2\">alias</span> Conv<span class=\"sy0\">=</span>lumCIE<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>RGB im<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>im.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> im.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> rgb<span class=\"sy0\">;</span> im.<span class=\"me1\">image</span><span class=\"br0\">)</span><br/>        result.<span class=\"me1\">image</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Conv<span class=\"br0\">(</span>rgb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Image<span class=\"sy0\">!</span>RGB gray2rgbImage<span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>Gray im<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>im.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> im.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> gr<span class=\"sy0\">;</span> im.<span class=\"me1\">image</span><span class=\"br0\">)</span><br/>        result.<span class=\"me1\">image</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> RGB<span class=\"br0\">(</span>gr<span class=\"sy0\">,</span> gr<span class=\"sy0\">,</span> gr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">version</span> <span class=\"br0\">(</span>grayscale_image_main<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> im1 <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>Gray<span class=\"sy0\">;</span><br/>        im1.<span class=\"me1\">loadPGM</span><span class=\"br0\">(</span><span class=\"st0\">\"lena.pgm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        gray2rgbImage<span class=\"br0\">(</span>im1<span class=\"br0\">)</span>.<span class=\"me1\">savePPM6</span><span class=\"br0\">(</span><span class=\"st0\">\"lena_rgb.ppm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> img2 <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>RGB<span class=\"sy0\">;</span><br/>        img2.<span class=\"me1\">loadPPM6</span><span class=\"br0\">(</span><span class=\"st0\">\"quantum_frog.ppm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        img2.<span class=\"me1\">rgb2grayImage</span>.<span class=\"me1\">savePGM</span><span class=\"br0\">(</span><span class=\"st0\">\"quantum_frog_grey.pgm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Euler Math Toolbox", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;A=loadrgb(\"mona.jpg\");<br/>&gt;insrgb(A);<br/>&gt;function grayscale (A) ...<br/>${r,g,b}=getrgb(A);<br/>$c=0.2126*r+0.7152*g+0.0722*b;<br/>$return rgb(c,c,c);<br/>$endfunction<br/>&gt;insrgb(grayscale(A));<br/>&gt;insrgb(A|grayscale(A));<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 74, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>ros_bitmap<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>new<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> fill<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> set_pixel<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"kw3\">get</span>_pixel<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> convert<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span><span class=\"re1\">bitmap</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><br/>    mode <span class=\"sy3\">=</span> rgb<span class=\"sy1\">,</span><br/>    pixels <span class=\"sy3\">=</span> nil<span class=\"sy1\">,</span><br/>    shape <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">tuple_to_bytes</span><span class=\"br0\">(</span><span class=\"br0\">{</span>rgb<span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">G</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">R</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">G</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">;</span><br/><span class=\"re3\">tuple_to_bytes</span><span class=\"br0\">(</span><span class=\"br0\">{</span>gray<span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">L</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">bytes_to_tuple</span><span class=\"br0\">(</span>rgb<span class=\"sy1\">,</span> <span class=\"re5\">Bytes</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">R</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">G</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"sy3\">=</span> <span class=\"re5\">Bytes</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span>rgb<span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">G</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">bytes_to_tuple</span><span class=\"br0\">(</span>gray<span class=\"sy1\">,</span> <span class=\"re5\">Bytes</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">L</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"sy3\">=</span> <span class=\"re5\">Bytes</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">{</span>gray<span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>rgb<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> rgb<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>rgb<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> gray<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>gray<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> <span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re3\">is_tuple</span><span class=\"br0\">(</span><span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"br0\">[</span><span class=\"re5\">Mode</span>|Components<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"kw3\">tuple_to_list</span><span class=\"br0\">(</span><span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Bytes</span> <span class=\"sy3\">=</span> <span class=\"kw3\">list_to_binary</span><span class=\"br0\">(</span><span class=\"re5\">Components</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  #<span class=\"re7\">bitmap</span><span class=\"br0\">{</span><br/>    pixels<span class=\"sy3\">=</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span> <span class=\"sy3\">*</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>default<span class=\"sy1\">,</span> <span class=\"re5\">Bytes</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    shape<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    mode<span class=\"sy3\">=</span><span class=\"re5\">Mode</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fill</span><span class=\"br0\">(</span>#<span class=\"re7\">bitmap</span><span class=\"br0\">{</span>shape<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> mode<span class=\"sy3\">=</span><span class=\"re5\">Mode</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">when</span> <span class=\"kw3\">element</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Mode</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">Height</span><span class=\"sy1\">,</span> <span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">set_pixel</span><span class=\"br0\">(</span>#<span class=\"re7\">bitmap</span><span class=\"br0\">{</span>pixels<span class=\"sy3\">=</span><span class=\"re5\">Pixels</span><span class=\"sy1\">,</span> shape<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">_Height</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> mode<span class=\"sy3\">=</span><span class=\"re5\">Mode</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Bitmap</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span>at<span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span>  <span class=\"kw3\">element</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Mode</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Index</span> <span class=\"sy3\">=</span> <span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span> <span class=\"sy3\">*</span> <span class=\"re5\">Width</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Bitmap</span><span class=\"re8\">#</span><span class=\"re7\">bitmap</span><span class=\"br0\">{</span>pixels<span class=\"sy3\">=</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">set</span><span class=\"br0\">(</span><span class=\"re5\">Index</span><span class=\"sy1\">,</span> <span class=\"re3\">tuple_to_bytes</span><span class=\"br0\">(</span><span class=\"re5\">ColorTuple</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Pixels</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span>_<span class=\"re3\">pixel</span><span class=\"br0\">(</span>#<span class=\"re7\">bitmap</span><span class=\"br0\">{</span>pixels<span class=\"sy3\">=</span><span class=\"re5\">Pixels</span><span class=\"sy1\">,</span> shape<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">Width</span><span class=\"sy1\">,</span> <span class=\"re5\">_Height</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> mode<span class=\"sy3\">=</span><span class=\"re5\">Mode</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span>at<span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Index</span> <span class=\"sy3\">=</span> <span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span> <span class=\"sy3\">*</span> <span class=\"re5\">Width</span><span class=\"sy1\">,</span><br/>  <span class=\"re5\">Bytes</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">Index</span><span class=\"sy1\">,</span> <span class=\"re5\">Pixels</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">bytes_to_tuple</span><span class=\"br0\">(</span><span class=\"re5\">Mode</span><span class=\"sy1\">,</span> <span class=\"re5\">Bytes</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">luminance</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">R</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">G</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"sy2\">&lt;&lt;</span><span class=\"br0\">(</span><span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"re5\">R</span> <span class=\"sy3\">*</span> <span class=\"nu0\">0.2126</span> <span class=\"sy3\">+</span> <span class=\"re5\">G</span> <span class=\"sy3\">*</span> <span class=\"nu0\">0.7152</span> <span class=\"sy3\">+</span> <span class=\"re5\">B</span> <span class=\"sy3\">*</span> <span class=\"nu0\">0.0722</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% convert from rgb to grayscale</span><br/><span class=\"re3\">convert</span><span class=\"br0\">(</span>#<span class=\"re7\">bitmap</span><span class=\"br0\">{</span>pixels<span class=\"sy3\">=</span><span class=\"re5\">Pixels</span><span class=\"sy1\">,</span> mode<span class=\"sy3\">=</span>rgb<span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Bitmap</span><span class=\"sy1\">,</span> gray<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Bitmap</span><span class=\"re8\">#</span><span class=\"re7\">bitmap</span><span class=\"br0\">{</span><br/>    pixels<span class=\"sy3\">=</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">_I</span><span class=\"sy1\">,</span> <span class=\"re5\">Pixel</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <span class=\"re3\">luminance</span><span class=\"br0\">(</span><span class=\"re5\">Pixel</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Pixels</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    mode<span class=\"sy3\">=</span>gray<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">%% convert from grayscale to rgb</span><br/><span class=\"re3\">convert</span><span class=\"br0\">(</span>#<span class=\"re7\">bitmap</span><span class=\"br0\">{</span>pixels<span class=\"sy3\">=</span><span class=\"re5\">Pixels</span><span class=\"sy1\">,</span> mode<span class=\"sy3\">=</span>gray<span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Bitmap</span><span class=\"sy1\">,</span> rgb<span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Bitmap</span><span class=\"re8\">#</span><span class=\"re7\">bitmap</span><span class=\"br0\">{</span><br/>    pixels<span class=\"sy3\">=</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">_I</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">L</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">L</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span>:<span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span>:<span class=\"nu0\">8</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Pixels</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    mode<span class=\"sy3\">=</span>rgb<span class=\"br0\">}</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">%% no conversion if the mode is the same with the bitmap.</span><br/><span class=\"re3\">convert</span><span class=\"br0\">(</span>#<span class=\"re7\">bitmap</span><span class=\"br0\">{</span>mode<span class=\"sy3\">=</span><span class=\"re5\">Mode</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">Bitmap</span><span class=\"sy1\">,</span> <span class=\"re5\">Mode</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">Bitmap</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 20, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> to_gray<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> image<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> color<br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>image<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            color <span class=\"sy1\">=</span> <span class=\"kw2\">and_bits</span><span class=\"br0\">(</span>image<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>#FF0000<span class=\"sy2\">,</span>#FF00<span class=\"sy2\">,</span>#FF<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span><br/>                                          <span class=\"br0\">{</span>#010000<span class=\"sy2\">,</span>#0100<span class=\"sy2\">,</span>#01<span class=\"br0\">}</span> <span class=\"co1\">-- unpack color triple</span><br/>            image<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">0.2126</span><span class=\"sy1\">*</span>color<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"nu0\">0.7152</span><span class=\"sy1\">*</span>color<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"nu0\">0.0722</span><span class=\"sy1\">*</span>color<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> image<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> to_color<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> image<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>image<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            image<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> image<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">*</span>#010101<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> image<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "FBSL", "loc": 15, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> colored <span class=\"sy0\">=</span> <span class=\"st0\">\".\\LenaClr.bmp\"</span><span class=\"sy0\">,</span> grayscale <span class=\"sy0\">=</span> <span class=\"st0\">\".\\LenaGry.bmp\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> head<span class=\"sy0\">,</span> tail<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> ptr<span class=\"sy0\">,</span> blobsize <span class=\"sy0\">=</span> <span class=\"nu0\">54</span> <span class=\"co1\">' sizeof BMP file headers</span><br/>\u00a0<br/>FILEGET<span class=\"br0\">(</span>FILEOPEN<span class=\"br0\">(</span>colored<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qckbinary.shtml\"><span class=\"kw3\">BINARY</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> FILELEN<span class=\"br0\">(</span>colored<span class=\"br0\">)</span><span class=\"br0\">)</span>: FILECLOSE<span class=\"br0\">(</span>FILEOPEN<span class=\"br0\">)</span> <span class=\"co1\">' load buffer</span><br/>head <span class=\"sy0\">=</span> @FILEGET <span class=\"sy0\">+</span> blobsize: tail <span class=\"sy0\">=</span> @FILEGET <span class=\"sy0\">+</span> FILELEN <span class=\"co1\">' set loop bounds</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> ptr <span class=\"sy0\">=</span> head <span class=\"kw1\">TO</span> tail <span class=\"kw1\">STEP</span> <span class=\"nu0\">3</span> <span class=\"co1\">' transform color triplets</span><br/>\tb <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckpeek.shtml\"><span class=\"kw3\">PEEK</span></a><span class=\"br0\">(</span>ptr <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">' read Windows colors stored in BGR order</span><br/>\tg <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckpeek.shtml\"><span class=\"kw3\">PEEK</span></a><span class=\"br0\">(</span>ptr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\tr <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckpeek.shtml\"><span class=\"kw3\">PEEK</span></a><span class=\"br0\">(</span>ptr <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\tl <span class=\"sy0\">=</span> <span class=\"nu0\">0.2126</span> <span class=\"sy0\">*</span> r <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span> <span class=\"sy0\">*</span> g <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span> <span class=\"sy0\">*</span> b <span class=\"co1\">' derive luminance</span><br/>\t<a href=\"http://www.qbasicnews.com/qboho/qcksetmem.shtml\"><span class=\"kw3\">SETMEM</span></a><span class=\"br0\">(</span>FILEGET<span class=\"sy0\">,</span> RGB<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><span class=\"sy0\">,</span> ptr <span class=\"sy0\">-</span> head <span class=\"sy0\">+</span> blobsize<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">' write grayscale</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>FILEPUT<span class=\"br0\">(</span>FILEOPEN<span class=\"br0\">(</span>grayscale<span class=\"sy0\">,</span> BINARY_NEW<span class=\"br0\">)</span><span class=\"sy0\">,</span> FILEGET<span class=\"br0\">)</span>: FILECLOSE<span class=\"br0\">(</span>FILEOPEN<span class=\"br0\">)</span> <span class=\"co1\">' save buffer</span></pre>"}, {"lang": "Forth", "loc": 56, "block": "<pre class=\"text highlighted_source\">\\ grayscale bitmap (without word-alignment for scan lines)<br/>\u00a0<br/>\\ bdim, bwidth, bdata all work with graymaps<br/>\u00a0<br/>: graymap ( w h -- gmp )<br/>  2dup * bdata allocate throw<br/>  dup &gt;r 2! r&gt;\u00a0;<br/>\u00a0<br/>: gxy ( x y gmp -- addr )<br/>  dup bwidth rot * rot + swap bdata +\u00a0;<br/>\u00a0<br/>: <a class=\"__cf_email__\" data-cfemail=\"6f082f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ( x y gmp -- c ) gxy <a class=\"__cf_email__\" data-cfemail=\"771437\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>: g! ( c x y bmp -- ) gxy c!\u00a0;<br/>\u00a0<br/>: gfill ( c gmp -- )<br/>  dup bdata swap bdim * rot fill\u00a0;<br/>\u00a0<br/>: gshow ( gmp -- )<br/>  dup bdim<br/>  0 do cr<br/>    dup 0 do<br/>      over i j rot <a class=\"__cf_email__\" data-cfemail=\"c6a186\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> if [char] * emit else space then<br/>    loop<br/>  loop<br/>  2drop\u00a0;<br/>\u00a0<br/>\\ RGB &lt;-&gt; Grayscale<br/>: lum&gt;rgb ( 0..255 -- pixel )<br/>   dup 8 lshift or<br/>   dup 8 lshift or\u00a0;<br/>\u00a0<br/>: pixel&gt;rgb ( pixel -- r g b )<br/>  256 /mod 256 /mod\u00a0;<br/>: rgb&gt;lum ( pixel -- 0..255 )<br/>  pixel&gt;rgb<br/>   722 *   swap<br/>  7152 * + swap<br/>  2126 * + 10000 /\u00a0;<br/>\u00a0<br/>: bitmap&gt;graymap ( bmp -- gmp )<br/>  dup bdim graymap<br/>  dup bdim nip 0 do<br/>    dup bwidth 0 do<br/>      over i j rot <a class=\"__cf_email__\" data-cfemail=\"e183a1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> rgb&gt;lum<br/>      over i j rot g!<br/>    loop<br/>  loop nip\u00a0;<br/>\u00a0<br/>: graymap&gt;bitmap ( gmp -- bmp )<br/>  dup bdim bitmap<br/>  dup bdim nip 0 do<br/>    dup bwidth 0 do<br/>      over i j rot <a class=\"__cf_email__\" data-cfemail=\"690e29\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> lum&gt;rgb<br/>      over i j rot b!<br/>    loop<br/>  loop nip\u00a0;</pre>"}, {"lang": "Fortran", "loc": 4, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">type</span> scimage<br/>   <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">channel</span><br/>   <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">width</span>, height<br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span> scimage</pre>"}, {"lang": "Go", "loc": 100, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> raster<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Grmap parallels Bitmap, but with an element type of uint16</span><br/><span class=\"co1\">// in place of Pixel.</span><br/><span class=\"kw1\">type</span> Grmap <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    Comments   <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>    rows<span class=\"sy1\">,</span> cols <span class=\"kw4\">int</span><br/>    px         <span class=\"sy1\">[]</span><span class=\"kw4\">uint16</span><br/>    pxRow      <span class=\"sy1\">[][]</span><span class=\"kw4\">uint16</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// NewGrmap constructor.</span><br/><span class=\"kw4\">func</span> NewGrmap<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>b <span class=\"sy3\">*</span>Grmap<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    g <span class=\"sy2\">:=</span> &amp;Grmap<span class=\"sy1\">{</span><br/>        Comments<span class=\"sy1\">:</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>creator<span class=\"sy1\">},</span> <span class=\"co1\">// creator a const in bitmap source file</span><br/>        rows<span class=\"sy1\">:</span>     y<span class=\"sy1\">,</span><br/>        cols<span class=\"sy1\">:</span>     x<span class=\"sy1\">,</span><br/>        px<span class=\"sy1\">:</span>       <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">uint16</span><span class=\"sy1\">,</span> x<span class=\"sy3\">*</span>y<span class=\"sy1\">),</span><br/>        pxRow<span class=\"sy1\">:</span>    <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">uint16</span><span class=\"sy1\">,</span> y<span class=\"sy1\">),</span><br/>    <span class=\"sy1\">}</span><br/>    x0<span class=\"sy1\">,</span> x1 <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> x<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g<span class=\"sy3\">.</span>pxRow <span class=\"sy1\">{</span><br/>        g<span class=\"sy3\">.</span>pxRow<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> g<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span>x0<span class=\"sy1\">:</span>x1<span class=\"sy1\">]</span><br/>        x0<span class=\"sy1\">,</span> x1 <span class=\"sy2\">=</span> x1<span class=\"sy1\">,</span> x1<span class=\"sy3\">+</span>x<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> g<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b <span class=\"sy3\">*</span>Grmap<span class=\"sy1\">)</span> Extent<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>cols<span class=\"sy1\">,</span> rows <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> b<span class=\"sy3\">.</span>cols<span class=\"sy1\">,</span> b<span class=\"sy3\">.</span>rows<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>Grmap<span class=\"sy1\">)</span> Fill<span class=\"sy1\">(</span>c <span class=\"kw4\">uint16</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g<span class=\"sy3\">.</span>px <span class=\"sy1\">{</span><br/>        g<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>Grmap<span class=\"sy1\">)</span> SetPx<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">,</span> c <span class=\"kw4\">uint16</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span> <span class=\"kw3\">recover</span><span class=\"sy1\">()</span> <span class=\"sy1\">}()</span><br/>    g<span class=\"sy3\">.</span>pxRow<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>Grmap<span class=\"sy1\">)</span> GetPx<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">uint16</span><span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span> <span class=\"kw3\">recover</span><span class=\"sy1\">()</span> <span class=\"sy1\">}()</span><br/>    <span class=\"kw1\">return</span> g<span class=\"sy3\">.</span>pxRow<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">],</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Grmap method of Bitmap, converts (color) Bitmap to (grayscale) Grmap</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b <span class=\"sy3\">*</span>Bitmap<span class=\"sy1\">)</span> Grmap<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>Grmap <span class=\"sy1\">{</span><br/>    g <span class=\"sy2\">:=</span> NewGrmap<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>cols<span class=\"sy1\">,</span> b<span class=\"sy3\">.</span>rows<span class=\"sy1\">)</span><br/>    g<span class=\"sy3\">.</span>Comments <span class=\"sy2\">=</span> append<span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">{},</span> b<span class=\"sy3\">.</span>Comments<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b<span class=\"sy3\">.</span>px <span class=\"sy1\">{</span><br/>        g<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">uint16</span><span class=\"sy1\">((</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>R<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">2126</span> <span class=\"sy3\">+</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>G<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">7152</span> <span class=\"sy3\">+</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>B<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">722</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span><br/>            math<span class=\"sy3\">.</span>MaxUint16 <span class=\"sy3\">/</span> <span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>MaxUint8 <span class=\"sy3\">*</span> <span class=\"nu0\">10000</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> g<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Bitmap method Grmap, converts Grmap to Bitmap.  All pixels in the resulting</span><br/><span class=\"co1\">// color Bitmap will be (very nearly) shades of gray.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>Grmap<span class=\"sy1\">)</span> Bitmap<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>Bitmap <span class=\"sy1\">{</span><br/>    b <span class=\"sy2\">:=</span> NewBitmap<span class=\"sy1\">(</span>g<span class=\"sy3\">.</span>cols<span class=\"sy1\">,</span> g<span class=\"sy3\">.</span>rows<span class=\"sy1\">)</span><br/>    b<span class=\"sy3\">.</span>Comments <span class=\"sy2\">=</span> append<span class=\"sy1\">([]</span><span class=\"kw4\">string</span><span class=\"sy1\">{},</span> g<span class=\"sy3\">.</span>Comments<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g<span class=\"sy3\">.</span>px <span class=\"sy1\">{</span><br/>        roundedSum <span class=\"sy2\">:=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>MaxUint8 <span class=\"sy3\">/</span> math<span class=\"sy3\">.</span>MaxUint16<br/>        rounded <span class=\"sy2\">:=</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>roundedSum <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>        remainder <span class=\"sy2\">:=</span> roundedSum <span class=\"sy3\">%</span> <span class=\"nu0\">3</span><br/>        b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>R <span class=\"sy2\">=</span> rounded<br/>        b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>G <span class=\"sy2\">=</span> rounded<br/>        b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>B <span class=\"sy2\">=</span> rounded<br/>        <span class=\"kw1\">if</span> remainder &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            odd <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">switch</span> odd <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>remainder <span class=\"sy3\">*</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy1\">:</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>R<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy1\">:</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>G<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy1\">:</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>B<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">6</span><span class=\"sy1\">:</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>G<span class=\"sy2\">++</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>B<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">7</span><span class=\"sy1\">:</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>R<span class=\"sy2\">++</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>B<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">8</span><span class=\"sy1\">:</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>R<span class=\"sy2\">++</span><br/>                b<span class=\"sy3\">.</span>px<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>G<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> b<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Bitmap<span class=\"sy0\">.</span>Gray<span class=\"br0\">(</span><span class=\"kw1\">module</span> Bitmap<span class=\"sy0\">.</span>Gray<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Bitmap<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/>\u00a0<br/><span class=\"kw1\">newtype</span> Gray <span class=\"sy0\">=</span> Gray <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> Color Gray <span class=\"kw1\">where</span><br/>    luminance <span class=\"br0\">(</span>Gray x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/>    black <span class=\"sy0\">=</span> Gray <span class=\"nu0\">0</span><br/>    white <span class=\"sy0\">=</span> Gray <span class=\"nu0\">255</span><br/>    toNetpbm <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:toEnum\"><span class=\"kw3\">toEnum</span></a> <span class=\"sy0\">.</span> luminance<br/>    fromNetpbm <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"sy0\">$</span> Gray <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a><br/>    netpbmMagicNumber <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"P5\"</span><br/>    netpbmMaxval <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"255\"</span><br/>\u00a0<br/>toGrayImage <span class=\"sy0\">::</span> Color c <span class=\"sy0\">=&gt;</span> Image s c <span class=\"sy0\">-&gt;</span> ST s <span class=\"br0\">(</span>Image s Gray<span class=\"br0\">)</span><br/>toGrayImage <span class=\"sy0\">=</span> mapImage <span class=\"sy0\">$</span> Gray <span class=\"sy0\">.</span> luminance</pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. converts the image to grayscale according to formula</span><br/><span class=\"co1\">NB. L = 0.2126*R + 0.7152*G + 0.0722*B</span><br/>toGray=: [: &lt;. +/ .*\"<span class=\"nu0\">1</span>&amp;<span class=\"nu0\">0.2126</span> <span class=\"nu0\">0.7152</span> <span class=\"nu0\">0.0722</span><br/>\u00a0<br/><span class=\"co1\">NB. converts grayscale image to the color image, with all channels equal</span><br/>toColor=: <span class=\"nu0\">3</span> &amp; $\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 24, "block": "<pre class=\"java highlighted_source\"><span class=\"kw4\">void</span> convertToGrayscale<span class=\"br0\">(</span><span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> image<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>image.<span class=\"me1\">getWidth</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>image.<span class=\"me1\">getHeight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> color <span class=\"sy0\">=</span> image.<span class=\"me1\">getRGB</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> alpha <span class=\"sy0\">=</span> <span class=\"br0\">(</span>color <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> red <span class=\"sy0\">=</span> <span class=\"br0\">(</span>color <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> green <span class=\"sy0\">=</span> <span class=\"br0\">(</span>color <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> blue <span class=\"sy0\">=</span> <span class=\"br0\">(</span>color<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> lum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0.2126</span> <span class=\"sy0\">*</span> red <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span> <span class=\"sy0\">*</span> green <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span> <span class=\"sy0\">*</span> blue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            alpha <span class=\"sy0\">=</span> <span class=\"br0\">(</span>alpha <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            red <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lum <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            green <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lum <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            blue <span class=\"sy0\">=</span> lum<span class=\"sy0\">;</span><br/>\u00a0<br/>            color <span class=\"sy0\">=</span> alpha <span class=\"sy0\">+</span> red <span class=\"sy0\">+</span> green <span class=\"sy0\">+</span> blue<span class=\"sy0\">;</span><br/>\u00a0<br/>            image.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>i,j,color<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 25, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> toGray<span class=\"br0\">(</span>img<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  let cnv <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">\"canvas\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  let ctx <span class=\"sy0\">=</span> cnv.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  let imgW <span class=\"sy0\">=</span> img.<span class=\"me1\">width</span><span class=\"sy0\">;</span><br/>  let imgH <span class=\"sy0\">=</span> img.<span class=\"me1\">height</span><span class=\"sy0\">;</span><br/>  cnv.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> imgW<span class=\"sy0\">;</span><br/>  cnv.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> imgH<span class=\"sy0\">;</span><br/>\u00a0<br/>  ctx.<span class=\"me1\">drawImage</span><span class=\"br0\">(</span>img<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  let pixels <span class=\"sy0\">=</span> ctx.<span class=\"me1\">getImageData</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> imgW<span class=\"sy0\">,</span> imgH<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> pixels.<span class=\"me1\">height</span><span class=\"sy0\">;</span> y <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> pixels.<span class=\"me1\">width</span><span class=\"sy0\">;</span> x <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      let i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> pixels.<span class=\"me1\">width</span> <span class=\"sy0\">+</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>      let avg <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pixels.<span class=\"me1\">data</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> pixels.<span class=\"me1\">data</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> pixels.<span class=\"me1\">data</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      pixels.<span class=\"me1\">data</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> avg<span class=\"sy0\">;</span><br/>      pixels.<span class=\"me1\">data</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> avg<span class=\"sy0\">;</span><br/>      pixels.<span class=\"me1\">data</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> avg<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  ctx.<span class=\"me1\">putImageData</span><span class=\"br0\">(</span>pixels<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> pixels.<span class=\"me1\">width</span><span class=\"sy0\">,</span> pixels.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> cnv.<span class=\"me1\">toDataURL</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Color, Images, FixedPointNumbers<br/>\u00a0<br/>const M_RGB_Y = reshape(Color.M_RGB_XYZ[2,:], 3)<br/>\u00a0<br/>function rgb2gray(img::Image)<br/>    g = red(img)*M_RGB_Y[1] + green(img)*M_RGB_Y[2] + blue(img)*M_RGB_Y[3]<br/>    g = clamp(g, 0.0, 1.0)<br/>    return grayim(g)<br/>end<br/>\u00a0<br/>function gray2rgb(img::Image)<br/>    colorspace(img) == \"Gray\" || return img<br/>    g = map((x)-&gt;RGB{Ufixed8}(x, x, x), img.data)<br/>    return Image(g, spatialorder=spatialorder(img))<br/>end<br/>\u00a0<br/>ima = imread(\"grayscale_image_color.png\")<br/>imb = rgb2gray(ima)<br/>imc = gray2rgb(imb)<br/>imwrite(imc, \"grayscale_image_rc.png\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">image</span>.<span class=\"me1\">BufferedImage</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">imageio</span>.<span class=\"me1\">ImageIO</span><br/>\u00a0<br/>fun BufferedImage.<span class=\"me1\">toGrayScale</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until height<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> argb  <span class=\"sy0\">=</span> getRGB<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> alpha <span class=\"sy0\">=</span> <span class=\"br0\">(</span>argb shr <span class=\"nu0\">24</span><span class=\"br0\">)</span> and 0xFF<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> red   <span class=\"sy0\">=</span> <span class=\"br0\">(</span>argb shr <span class=\"nu0\">16</span><span class=\"br0\">)</span> and 0xFF<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> green <span class=\"sy0\">=</span> <span class=\"br0\">(</span>argb shr  <span class=\"nu0\">8</span><span class=\"br0\">)</span> and 0xFF<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blue  <span class=\"sy0\">=</span>  argb and 0xFF<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lumin <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0.2126</span> <span class=\"sy0\">*</span> red + <span class=\"nu0\">0.7152</span> <span class=\"sy0\">*</span> green + <span class=\"nu0\">0.0722</span> <span class=\"sy0\">*</span> blue<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            argb <span class=\"sy0\">=</span> <span class=\"br0\">(</span>alpha shl <span class=\"nu0\">24</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>lumin shl <span class=\"nu0\">16</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>lumin shl <span class=\"nu0\">8</span><span class=\"br0\">)</span> or lumin<br/>            setRGB<span class=\"br0\">(</span>x, y, argb<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image <span class=\"sy0\">=</span> ImageIO.<span class=\"me1\">read</span><span class=\"br0\">(</span>File<span class=\"br0\">(</span><span class=\"st0\">\"bbc.jpg\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// using BBC BASIC image</span><br/>    image.<span class=\"me1\">toGrayScale</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> grayFile <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"bbc_gray.jpg\"</span><span class=\"br0\">)</span><br/>    ImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>image, <span class=\"st0\">\"jpg\"</span>, grayFile<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 19, "block": "<pre class=\"text highlighted_source\">on rgbToGrayscaleImageFast (img)<br/>  res = image(img.width, img.height, 8)<br/>  res.paletteRef = #grayScale<br/>  res.copyPixels(img, img.rect, img.rect)<br/>  return res<br/>end<br/>\u00a0<br/>on rgbToGrayscaleImageCustom (img)<br/>  res = image(img.width, img.height, 8)<br/>  res.paletteRef = #grayScale<br/>  repeat with x = 0 to img.width-1<br/>    repeat with y = 0 to img.height-1<br/>      c = img.getPixel(x,y)<br/>      n = c.red*0.2126 + c.green*0.7152 + c.blue*0.0722<br/>      res.setPixel(x,y, color(256-n))<br/>    end repeat<br/>  end repeat<br/>  return res<br/>end</pre>"}, {"lang": "Lua", "loc": 26, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> ConvertToGrayscaleImage<span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> size_x<span class=\"sy0\">,</span> size_y <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>bitmap<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>bitmap<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">local</span> gray_im <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size_x <span class=\"kw1\">do</span><br/>        gray_im<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size_y <span class=\"kw1\">do</span> <br/>            gray_im<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span> <span class=\"nu0\">0.2126</span><span class=\"sy0\">*</span>bitmap<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span><span class=\"sy0\">*</span>bitmap<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span><span class=\"sy0\">*</span>bitmap<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> gray_im<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ConvertToColorImage<span class=\"br0\">(</span> gray_im <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> size_x<span class=\"sy0\">,</span> size_y <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>gray_im<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>gray_im<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>    <br/>    <span class=\"kw1\">local</span> bitmap <span class=\"sy0\">=</span> Allocate_Bitmap<span class=\"br0\">(</span> size_x<span class=\"sy0\">,</span> size_y <span class=\"br0\">)</span>         <span class=\"co1\">-- this function is defined at http://rosettacode.org/wiki/Basic_bitmap_storage#Lua</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size_x <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size_y <span class=\"kw1\">do</span> <br/>            bitmap<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> gray_im<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> gray_im<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> gray_im<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> bitmap<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 16, "block": "<pre class=\"text highlighted_source\">with(ImageTools):<br/>#conversion forward<br/>dimensions:=[upperbound(img)];<br/>gray\u00a0:= Matrix(dimensions[1], dimensions[2]);<br/>for i from 1 to dimensions[1] do<br/>\tfor j from 1 to dimensions[2] do<br/>\t\tgray[i,j]\u00a0:= 0.2126 * img[i,j,1] + 0.7152*img[i,j,2] + 0.0722*img[i,j,3]:<br/>\tend do:<br/>end do:<br/>#display the result<br/>Embed(Create(gray)):<br/>#conversion backward<br/>x:=Create(gray);<br/>ToRGB(x);<br/>#display the result<br/>Embed(x);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">toGrayscale[rgb_Image]\u00a0:= ImageApply[#.{0.2126, 0.7152, 0.0722}&amp;, rgb]<br/>toFakeRGB[L_Image]\u00a0:= ImageApply[{#, #, #}&amp;, L] </pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>grayImage<span class=\"br0\">]</span> = colortograyscale<span class=\"br0\">(</span>inputImage<span class=\"br0\">)</span><br/>   grayImage = rgb2gray<span class=\"br0\">(</span>inputImage<span class=\"br0\">)</span>;</pre>"}, {"lang": "OCaml", "loc": 20, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> to_grayscale <span class=\"re1\">~img</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>_, r_channel, g_channel, b_channel<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> width <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>dim1 r_channel<br/>  <span class=\"kw1\">and</span> height <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>dim2 r_channel <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> gray_channel <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> kind <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>int8_unsigned<br/>    <span class=\"kw1\">and</span> layout <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>c_layout<br/>    <span class=\"kw1\">in</span><br/>    <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>create kind layout width height<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> height <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> width <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> r_channel<span class=\"sy0\">.</span><span class=\"br0\">{</span>x,y<span class=\"br0\">}</span><br/>      <span class=\"kw1\">and</span> g <span class=\"sy0\">=</span> g_channel<span class=\"sy0\">.</span><span class=\"br0\">{</span>x,y<span class=\"br0\">}</span><br/>      <span class=\"kw1\">and</span> b <span class=\"sy0\">=</span> b_channel<span class=\"sy0\">.</span><span class=\"br0\">{</span>x,y<span class=\"br0\">}</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>_126 <span class=\"sy0\">*</span> r <span class=\"sy0\">+</span>  <span class=\"nu0\">7</span>_152 <span class=\"sy0\">*</span> g <span class=\"sy0\">+</span> <span class=\"nu0\">722</span> <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span>_000 <span class=\"kw1\">in</span><br/>      gray_channel<span class=\"sy0\">.</span><span class=\"br0\">{</span>x,y<span class=\"br0\">}</span> <span class=\"sy0\">&lt;-</span> v<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>gray_channel<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 2, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> <span class=\"br0\">[</span>grayImage<span class=\"br0\">]</span> <span class=\"sy3\">=</span> colortograyscale<span class=\"br0\">(</span>inputImage<span class=\"br0\">)</span><br/>   grayImage <span class=\"sy3\">=</span> rgb2gray<span class=\"br0\">(</span>inputImage<span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oz", "loc": 27, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">import</span><br/>   Array2D<br/><span class=\"kw1\">export</span><br/>   ToGraymap<br/>   FromGraymap<br/><span class=\"kw1\">define</span><br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ToGraymap</span> bitmap<span class=\"br0\">(</span>Arr<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      graymap<span class=\"br0\">(</span><span class=\"br0\">{</span>Array2D<span class=\"sy0\">.</span>map Arr Luminance<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Luminance</span> Color<span class=\"br0\">}</span><br/>      F = <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>map Color Int<span class=\"sy0\">.</span>toFloat<span class=\"br0\">}</span><br/>   <span class=\"kw1\">in</span><br/>      0<span class=\"sy0\">.</span>2126<span class=\"sy0\">*</span>F<span class=\"sy0\">.</span>1 <span class=\"sy0\">+</span> 0<span class=\"sy0\">.</span>7152<span class=\"sy0\">*</span>F<span class=\"sy0\">.</span>2 <span class=\"sy0\">+</span> 0<span class=\"sy0\">.</span>0722<span class=\"sy0\">*</span>F<span class=\"sy0\">.</span>3<br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">FromGraymap</span> graymap<span class=\"br0\">(</span>Arr<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      bitmap<span class=\"br0\">(</span><span class=\"br0\">{</span>Array2D<span class=\"sy0\">.</span>map Arr ToColor<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ToColor</span> Lum<span class=\"br0\">}</span><br/>      L = <span class=\"br0\">{</span>Float<span class=\"sy0\">.</span>toInt Lum<span class=\"br0\">}</span><br/>   <span class=\"kw1\">in</span><br/>      color<span class=\"br0\">(</span>L L L<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 27, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#! /usr/bin/perl</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Image<span class=\"sy0\">::</span><span class=\"me2\">Imlib2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tograyscale<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$gimg</span> <span class=\"sy0\">=</span> Image<span class=\"sy0\">::</span><span class=\"me2\">Imlib2</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">,</span> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$gimg</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">width</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$gimg</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">height</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">query_pixel</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$gray</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.2126</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span> <span class=\"sy0\">*</span> <span class=\"re0\">$g</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"co1\"># discard alpha info...</span><br/>\t    <span class=\"re0\">$gimg</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">set_color</span><span class=\"br0\">(</span><span class=\"re0\">$gray</span><span class=\"sy0\">,</span> <span class=\"re0\">$gray</span><span class=\"sy0\">,</span> <span class=\"re0\">$gray</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$gimg</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">draw_point</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$gimg</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$animage</span> <span class=\"sy0\">=</span> Image<span class=\"sy0\">::</span><span class=\"me2\">Imlib2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">load</span><span class=\"br0\">(</span><span class=\"st0\">\"Lenna100.jpg\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$gscale</span> <span class=\"sy0\">=</span> tograyscale<span class=\"br0\">(</span><span class=\"re0\">$animage</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$gscale</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">set_quality</span><span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$gscale</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"st0\">\"Lennagray.jpg\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$filename</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'default.ppm'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$in</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"re0\">$filename</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>r<span class=\"sy0\">,</span> <span class=\"sy0\">:</span>enc<span class=\"sy0\">&lt;</span>iso<span class=\"sy0\">-</span><span class=\"nu0\">8859</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$type</span><span class=\"sy0\">,</span> <span class=\"re0\">$dim</span><span class=\"sy0\">,</span> <span class=\"re0\">$depth</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$in</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$outfile</span> <span class=\"sy0\">=</span> <span class=\"re0\">$filename</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"st_h\">'.ppm'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'.pgm'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$out</span> <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"re0\">$outfile</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w<span class=\"sy0\">,</span> <span class=\"sy0\">:</span>enc<span class=\"sy0\">&lt;</span>iso<span class=\"sy0\">-</span><span class=\"nu0\">8859</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"br0\">(</span><span class=\"st0\">\"P5<span class=\"es0\">\\n</span>$dim<span class=\"es0\">\\n</span>$depth\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$in</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$gs</span> <span class=\"sy0\">=</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.2126</span> <span class=\"sy0\">+</span> <span class=\"re0\">$g</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.7152</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.0722</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"sy0\">:</span> chr<span class=\"br0\">(</span><span class=\"re0\">$gs</span> <span class=\"kw3\">min</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$in</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">function to_gray(sequence image)<br/>sequence color<br/>    for i=1 to length(image) do<br/>        for j=1 to length(image[i]) do<br/>            -- unpack color triple<br/>            color = sq_div(sq_and_bits(image[i][j], {#FF0000,#FF00,#FF}),<br/>                                                    {#010000,#0100,#01})<br/>            image[i][j] = floor(0.2126*color[1] + 0.7152*color[2] + 0.0722*color[3])*#010101<br/>        end for<br/>    end for<br/>    return image<br/>end function<br/>\u00a0<br/>sequence img = read_ppm(\"Lena.ppm\")<br/>    img = to_gray(img)</pre>"}, {"lang": "PHP", "loc": 21, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> BitmapGrayscale <span class=\"kw2\">extends</span> Bitmap <span class=\"br0\">{</span><br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> toGrayscale<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">h</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">w</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">data</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu19\">0.2126</span><span class=\"br0\">)</span><br/>           <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">data</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu19\">0.7152</span><span class=\"br0\">)</span><br/>           <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">data</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu19\">0.0722</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/round\"><span class=\"kw3\">round</span></a><span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">data</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"sy0\">,</span><span class=\"re0\">$l</span><span class=\"sy0\">,</span><span class=\"re0\">$l</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> BitmapGrayscale<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"kw4\">null</span><span class=\"sy0\">,</span><span class=\"kw4\">null</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setPixel</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setPixel</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setPixel</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">toGrayscale</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">writeP6</span><span class=\"br0\">(</span><span class=\"st_h\">'p6-grayscale.ppm'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>do j = 1 to hbound(image,1);<br/>   do i = 0 to hbound(image,2);<br/>      color = image(i,j);<br/>      R = substr(color, 17, 8);<br/>      G = substr(color, 9, 8);<br/>      B = substr(color, 1, 8);<br/>      grey =  trunc(0.2126*R + 0.7152*G + 0.0722*B);<br/>      greybits = grey;<br/>      image(i,j) = substr(greybits, length(greybits)-7, 8);<br/>   end;<br/>end;<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 23, "block": "<pre class=\"text highlighted_source\"># Convert color image (PPM) to greyscale image (PGM)<br/>(de ppm-&gt;pgm (Ppm)<br/>   (mapcar<br/>      '((Y)<br/>         (mapcar<br/>            '((C)<br/>               (/<br/>                  (+<br/>                     (* (car C) 2126)  # Red<br/>                     (* (cadr C) 7152)  # Green<br/>                     (* (caddr C) 722) )  # Blue<br/>                  10000 ) )<br/>            Y ) )<br/>      Ppm ) )<br/>\u00a0<br/># Convert greyscale image (PGM) to color image (PPM)<br/>(de pgm-&gt;ppm (Pgm)<br/>   (mapcar<br/>      '((Y)<br/>         (mapcar<br/>            '((G) (list G G G))<br/>            Y ) )<br/>      Pgm ) )</pre>"}, {"lang": "PureBasic", "loc": 35, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> ImageGrayout<span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> w, h, x, y, r, g, b, gray, color<br/>\u00a0<br/>  w <span class=\"sy0\">=</span> <span class=\"kw2\">ImageWidth</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>  h <span class=\"sy0\">=</span> <span class=\"kw2\">ImageHeight</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>  <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> w <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      color <span class=\"sy0\">=</span> <span class=\"kw2\">Point</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>      r    <span class=\"sy0\">=</span> <span class=\"kw2\">Red</span><span class=\"br0\">(</span>color<span class=\"br0\">)</span><br/>      g    <span class=\"sy0\">=</span> <span class=\"kw2\">Green</span><span class=\"br0\">(</span>color<span class=\"br0\">)</span><br/>      b    <span class=\"sy0\">=</span> <span class=\"kw2\">Blue</span><span class=\"br0\">(</span>color<span class=\"br0\">)</span><br/>      gray <span class=\"sy0\">=</span> <span class=\"nu0\">0.2126</span><span class=\"sy0\">*</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span><span class=\"sy0\">*</span>g <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span><span class=\"sy0\">*</span>b<br/>      <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x, y, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>gray, gray, gray<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> ImageToColor<span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> w, h, x, y, v, gray<br/>\u00a0<br/>  w <span class=\"sy0\">=</span> <span class=\"kw2\">ImageWidth</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>  h <span class=\"sy0\">=</span> <span class=\"kw2\">ImageHeight</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>  <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span><span class=\"kw2\">ImageOutput</span><span class=\"br0\">(</span>image<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> w <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> h <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      gray <span class=\"sy0\">=</span> <span class=\"kw2\">Point</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>      v    <span class=\"sy0\">=</span> <span class=\"kw2\">Red</span><span class=\"br0\">(</span>gray<span class=\"br0\">)</span> <span class=\"co1\">;for gray, each of the color's components is the same </span><br/>      <span class=\"co1\">;color = RGB(0.2126*v, 0.7152*v, 0.0722*v)</span><br/>      <span class=\"kw2\">Plot</span><span class=\"br0\">(</span>x, y, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>v, v, v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 53, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># String masquerading as ppm file (version P3)</span><br/><span class=\"kw1\">import</span> io<br/>ppmfileout <span class=\"sy0\">=</span> io.<span class=\"kw3\">StringIO</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> togreyscale<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> h <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">height</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> w <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">width</span><span class=\"br0\">)</span>:<br/>            r<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><br/>            l <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"nu0\">0.2126</span> * r + <span class=\"nu0\">0.7152</span> * g + <span class=\"nu0\">0.0722</span> * b<span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>.<span class=\"kw2\">set</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> Colour<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>Bitmap.<span class=\"me1\">togreyscale</span> <span class=\"sy0\">=</span> togreyscale    <br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Draw something simple</span><br/>bitmap <span class=\"sy0\">=</span> Bitmap<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> white<span class=\"br0\">)</span><br/>bitmap.<span class=\"me1\">fillrect</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> Colour<span class=\"br0\">(</span><span class=\"nu0\">127</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">63</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>bitmap.<span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> Colour<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">127</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Colour:'</span><span class=\"br0\">)</span><br/><span class=\"co1\"># Write to the open 'file' handle</span><br/>bitmap.<span class=\"me1\">writeppmp3</span><span class=\"br0\">(</span>ppmfileout<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>ppmfileout.<span class=\"me1\">getvalue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Grey:'</span><span class=\"br0\">)</span><br/>bitmap.<span class=\"me1\">togreyscale</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ppmfileout <span class=\"sy0\">=</span> io.<span class=\"kw3\">StringIO</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>bitmap.<span class=\"me1\">writeppmp3</span><span class=\"br0\">(</span>ppmfileout<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>ppmfileout.<span class=\"me1\">getvalue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"st0\">'''<br/>The print statement above produces the following output\u00a0:<br/>\u00a0<br/>Colour:<br/>P3<br/># generated from Bitmap.writeppmp3<br/>4 4<br/>255<br/>   255 255 255   255 255 255   255 255 255     0 127  31<br/>   255 255 255   255 255 255   255 255 255   255 255 255<br/>   255 255 255   127   0  63   255 255 255   255 255 255<br/>   255 255 255   127   0  63   255 255 255   255 255 255<br/>\u00a0<br/>Grey:<br/>P3<br/># generated from Bitmap.writeppmp3<br/>4 4<br/>254<br/>   254 254 254   254 254 254   254 254 254    93  93  93<br/>   254 254 254   254 254 254   254 254 254   254 254 254<br/>   254 254 254    31  31  31   254 254 254   254 254 254<br/>   254 254 254    31  31  31   254 254 254   254 254 254<br/>\u00a0<br/>'''</span></pre>"}, {"lang": "R", "loc": 33, "block": "<pre class=\"text highlighted_source\"># Conversion from Grey to RGB uses the following code<br/>setAs(\"pixmapGrey\", \"pixmapRGB\",<br/>function(from, to){<br/>    z = new(to, as(from, \"pixmap\"))<br/>    <a class=\"__cf_email__\" data-cfemail=\"89f3c9fbeced\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"066074696b466174637f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"a6dce6c1d4c3c3c8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"3553475a58755247504c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"95efd5f7f9e0f0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"f395819c9eb39481968a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"b0caf0d3d8d1deded5dcc3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = c(\"red\", \"green\", \"blue\")<br/>    z<br/>})<br/>\u00a0<br/># Conversion from RGB to grey uses built-in coefficients of 0.3, 0.59, 0.11.  To see this, type<br/>getMethods(addChannels)<br/>\u00a0<br/># We can override this behaviour with<br/>setMethod(\"addChannels\", \"pixmapRGB\",<br/>function(object, coef=NULL){<br/>    if(is.null(coef)) coef = c(0.2126, 0.7152, 0.0722)<br/>    z = new(\"pixmapGrey\", object)<br/>    <a class=\"__cf_email__\" data-cfemail=\"d1ab91b6a3b4a8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = coef[1] * <a class=\"__cf_email__\" data-cfemail=\"1778757d72746357657273\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + coef[2] * <a class=\"__cf_email__\" data-cfemail=\"9ef1fcf4fbfdeadef9ecfbfbf0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> +<br/>        coef[3] * <a class=\"__cf_email__\" data-cfemail=\"cfa0ada5aaacbb8fada3baaa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"91ebd1f2f9f0fffff4fde2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = \"grey\"<br/>    z<br/>})<br/>\u00a0<br/># Colour image<br/>plot(p1 &lt;- pixmapRGB(c(c(1,0,0,0,0,1), c(0,1,0,0,1,0), c(0,0,1,1,0,0)), nrow=6, ncol=6))<br/>\u00a0<br/>#Convert to grey<br/>plot(p2 &lt;- as(p1, \"pixmapGrey\"))<br/>\u00a0<br/># Convert back to \"colour\"<br/>plot(p3 &lt;- as(p2, \"pixmapRGB\"))</pre>"}, {"lang": "Racket", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require racket/draw)<br/>\u00a0<br/>(define (gray-&gt;color gray-bm)<br/>  (define gray-dc (new bitmap-dc% [bitmap gray-bm]))<br/>  (define-values (w h) (send gray-dc get-size))<br/>  (define width (exact-floor w))<br/>  (define height (exact-floor h))<br/>  (define color-bm (make-bitmap width height))<br/>  (define color-dc (new bitmap-dc% [bitmap color-bm]))<br/>  (define pixels (make-bytes (* 4 width height)))<br/>  (send gray-dc get-argb-pixels 0 0 width height pixels)<br/>  (send color-dc set-argb-pixels 0 0 width height pixels)<br/>  color-bm)<br/>\u00a0<br/>(define (color-&gt;gray color-bm)<br/>  (define color-dc (new bitmap-dc% [bitmap color-bm]))<br/>  (define-values (w h) (send color-dc get-size))<br/>  (define width (exact-floor w))<br/>  (define height (exact-floor h))<br/>  (define gray-bm (make-bitmap width height))<br/>  (define gray-dc (new bitmap-dc% [bitmap gray-bm]))<br/>  (define pixels (make-bytes (* 4 width height)))<br/>  (send color-dc get-argb-pixels 0 0 width height pixels)<br/>  (for ([i (in-range 0 (* 4 width height) 4)])<br/>    (define \u03b1 (bytes-ref pixels i))<br/>    (define r (bytes-ref pixels (+ i 1)))<br/>    (define g (bytes-ref pixels (+ i 2)))<br/>    (define b (bytes-ref pixels (+ i 3)))<br/>    (define l (exact-floor (+ (* 0.2126 r) (* 0.7152 g) (* 0.0722 b))))    <br/>    (bytes-set! pixels (+ i 1) l)<br/>    (bytes-set! pixels (+ i 2) l)<br/>    (bytes-set! pixels (+ i 3) l))<br/>  (send gray-dc set-argb-pixels 0 0 width height pixels)<br/>  gray-bm)<br/>\u00a0<br/>(require images/icons/symbol)<br/>(define rosetta (text-icon \"Rosetta Code\" #:color \"red\" #:height 80))<br/>rosetta<br/>(color-&gt;gray rosetta)<br/>(gray-&gt;color (color-&gt;gray rosetta))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program converts a RGB (red\u2500green\u2500blue) image into a  grayscale/greyscale image. */</span><br/>  blue= <span class=\"st0\">'00 00 ff'</span>x                              <span class=\"coMULTI\">/*define the blue color  (hexadecimal).*/</span><br/>    @<span class=\"sy0\">.</span>= blue                                     <span class=\"coMULTI\">/*set the entire  image  to blue color.*/</span><br/> width=  <span class=\"nu0\">60</span>                                      <span class=\"coMULTI\">/* width of the   image  (in pixels).  */</span><br/>height= <span class=\"nu0\">100</span>                                      <span class=\"coMULTI\">/*height  \"  \"      \"      \"   \"       */</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span>    col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> width<br/>     <span class=\"kw1\">do</span> row=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> height                        <span class=\"coMULTI\">/* [\u2193]  C2D  convert  char \u2500\u2500\u2500&gt; decimal*/</span><br/>     r=  <span class=\"kw6\">left</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row, <span class=\"nu0\">1</span><span class=\"br0\">)</span>   \u00a0;    r=<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*extract the component red  &amp; convert.*/</span><br/>     g=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0;    g=<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*   \"     \"      \"    green \"    \"    */</span><br/>     b= <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row, <span class=\"nu0\">1</span><span class=\"br0\">)</span>   \u00a0;    b=<span class=\"kw6\">c2d</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*   \"     \"      \"    blue  \"    \"    */</span><br/>     _= <span class=\"kw6\">d2c</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>2126<span class=\"sy0\">*</span>r + <span class=\"sy0\">.</span>7152<span class=\"sy0\">*</span>g + <span class=\"sy0\">.</span>0722<span class=\"sy0\">*</span>b<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*convert RGB number  \u2500\u2500\u2500\u25ba  grayscale. */</span><br/>     @<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row=<span class=\"kw6\">copies</span><span class=\"br0\">(</span>_, <span class=\"nu0\">3</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*redefine old RGB    \u2500\u2500\u2500\u25ba  grayscale. */</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*row*/</span>                               <span class=\"coMULTI\">/* [\u2191]  D2C  convert  decimal \u2500\u2500\u2500\u25ba char*/</span><br/>  <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*col*/</span>                               <span class=\"coMULTI\">/* [\u2191]  x%1   is the same as  TRUNC(x) */</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> RGBColour<br/>  <span class=\"kw1\">def</span> to_grayscale<br/>    luminosity = <span class=\"kw3\">Integer</span><span class=\"br0\">(</span><span class=\"nu0\">0.2126</span><span class=\"sy0\">*</span>@red <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span><span class=\"sy0\">*</span>@green <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span><span class=\"sy0\">*</span>@blue<span class=\"br0\">)</span><br/>    <span class=\"kw2\">self</span>.<span class=\"kw1\">class</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>luminosity, luminosity, luminosity<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Pixmap<br/>  <span class=\"kw1\">def</span> to_grayscale<br/>    gray = <span class=\"kw2\">self</span>.<span class=\"kw1\">class</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>@width, <span class=\"re1\">@height</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@width</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>      <span class=\"re1\">@height</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>        gray<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = <span class=\"kw2\">self</span><span class=\"br0\">[</span>x,y<span class=\"br0\">]</span>.<span class=\"me1\">to_grayscale</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    gray<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> BitmapOps <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> luminosity<span class=\"br0\">(</span>c<span class=\"sy0\">:</span>Color<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">0.2126</span><span class=\"sy0\">*</span>c.<span class=\"me1\">getRed</span> + <span class=\"nu0\">0.7152</span><span class=\"sy0\">*</span>c.<span class=\"me1\">getGreen</span> + <span class=\"nu0\">0.0722</span><span class=\"sy0\">*</span>c.<span class=\"me1\">getBlue</span>+<span class=\"nu0\">0.5</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> grayscale<span class=\"br0\">(</span>bm<span class=\"sy0\">:</span>RgbBitmap<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> image<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> RgbBitmap<span class=\"br0\">(</span>bm.<span class=\"me1\">width</span>, bm.<span class=\"me1\">height</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until bm.<span class=\"me1\">width</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until bm.<span class=\"me1\">height</span><span class=\"sy0\">;</span> l<span class=\"sy0\">=</span>luminosity<span class=\"br0\">(</span>bm.<span class=\"me1\">getPixel</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         image.<span class=\"me1\">setPixel</span><span class=\"br0\">(</span>x, y, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>l,l,l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      image<br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 19, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Image::Imlib2'</span><span class=\"br0\">)</span><br/>\u00a0<br/>func tograyscale<span class=\"br0\">(</span>img<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>width, height<span class=\"br0\">)</span> = <span class=\"br0\">(</span>img.<span class=\"me1\">width</span>, img.<span class=\"me1\">height</span><span class=\"br0\">)</span><br/>    var gimg = <span class=\"sy0\">%</span>s<span class=\"st0\">'Image::Imlib2'</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> y,x <span class=\"kw1\">in</span> <span class=\"br0\">(</span>^height ~X ^width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var <span class=\"br0\">(</span>r, g, b<span class=\"br0\">)</span> = img.<span class=\"me1\">query_pixel</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>        var gray = int<span class=\"br0\">(</span><span class=\"nu0\">0.2126</span><span class=\"sy0\">*</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">0.7152</span><span class=\"sy0\">*</span>g <span class=\"sy0\">+</span> <span class=\"nu0\">0.0722</span><span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/>        gimg.<span class=\"me1\">set_color</span><span class=\"br0\">(</span>gray, gray, gray, <span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>        gimg.<span class=\"me1\">draw_point</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> gimg<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>input=<span class=\"st0\">'input.png'</span>, output=<span class=\"st0\">'output.png'</span><span class=\"br0\">)</span> = ARGV...<br/><span class=\"me1\">var</span> image = <span class=\"sy0\">%</span>s<span class=\"st0\">'Image::Imlib2'</span>.<span class=\"kw3\">load</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>var gscale = tograyscale<span class=\"br0\">(</span>image<span class=\"br0\">)</span><br/>gscale.<span class=\"me1\">set_quality</span><span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><br/>gscale.<span class=\"me1\">save</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"kw1\">proc</span> grayscale image <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> w <span class=\"br0\">[</span>image width <span class=\"re0\">$image</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> h <span class=\"br0\">[</span>image height <span class=\"re0\">$image</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$h</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            lassign <span class=\"br0\">[</span><span class=\"re0\">$image</span> get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> r g b<br/>            <span class=\"kw1\">set</span> l <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"nu0\">0.2126</span><span class=\"sy0\">*</span><span class=\"re0\">$r</span> + <span class=\"nu0\">0.7152</span><span class=\"sy0\">*</span><span class=\"re0\">$g</span> + <span class=\"nu0\">0.0722</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"re0\">$image</span> put <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"#%02x%02x%02x\"</span> <span class=\"re0\">$l</span> <span class=\"re0\">$l</span> <span class=\"re0\">$l</span><span class=\"br0\">]</span> -to <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Vedit macro language", "loc": 21, "block": "<pre class=\"vedit highlighted_source\"><span class=\"co1\">//  Convert RGB image to grayscale (8 bit/pixel)</span><br/><span class=\"co1\">//    #10 = buffer that contains image data</span><br/><span class=\"co1\">//  On return:</span><br/><span class=\"co1\">//    #20 = buffer for the new grayscale image</span><br/>\u00a0<br/><span class=\"sy0\">:</span>RGB_TO_GRAYSCALE<span class=\"sy0\">:</span><br/>File_Open<span class=\"br0\">(</span><span class=\"st0\">\"|(VEDIT_TEMP)\\gray.data\"</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"sy0\">+</span>NOEVENT<span class=\"sy0\">+</span>NOMSG<span class=\"br0\">)</span><br/>#<span class=\"nu0\">20</span> <span class=\"sy0\">=</span> Buf_Num<br/>BOF<br/>Del_Char<span class=\"br0\">(</span>ALL<span class=\"br0\">)</span><br/>Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span>File_Size<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    #<span class=\"nu0\">9</span> <span class=\"sy0\">=</span>  Cur_Char<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2126</span><br/>    #<span class=\"nu0\">9</span> <span class=\"sy0\">+=</span> Cur_Char<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">7152</span><br/>    #<span class=\"nu0\">9</span> <span class=\"sy0\">+=</span> Cur_Char<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">722</span><br/>    Char<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    Ins_Char<span class=\"br0\">(</span>#<span class=\"nu0\">9</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>    Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 58, "block": "<pre class=\"vbnet highlighted_source\">\u00a0<br/><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Drawing</span><span class=\"sy0\">.</span><span class=\"me1\">Imaging</span><br/>\u00a0<br/>  <span class=\"kw1\">Public</span> <span class=\"kw1\">Function</span> Grayscale<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> Map <span class=\"kw1\">As</span> Bitmap<span class=\"br0\">)</span> <span class=\"kw1\">As</span> Bitmap<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> oData<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> GetData<span class=\"br0\">(</span>Map<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> oReturn <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Bitmap<span class=\"br0\">(</span>Map<span class=\"sy0\">.</span><span class=\"me1\">Width</span>, Map<span class=\"sy0\">.</span><span class=\"me1\">Height</span>, Map<span class=\"sy0\">.</span><span class=\"me1\">PixelFormat</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> a <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> r <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> g <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> b <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> l <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> oData<span class=\"sy0\">.</span><span class=\"me1\">GetUpperBound</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>oData<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>      r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>oData<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"nu0\">255</span><br/>      g <span class=\"sy0\">=</span> <span class=\"br0\">(</span>oData<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"nu0\">255</span><br/>      b <span class=\"sy0\">=</span> oData<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"nu0\">255</span><br/>\u00a0<br/>      l <span class=\"sy0\">=</span> <span class=\"kw4\">CInt</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> 0<span class=\"sy0\">.</span>2126F <span class=\"sy0\">+</span> g <span class=\"sy0\">*</span> 0<span class=\"sy0\">.</span>7152F <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> 0<span class=\"sy0\">.</span>0722F<span class=\"br0\">)</span><br/>\u00a0<br/>      oData<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> l<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    SetData<span class=\"br0\">(</span>oReturn, oData<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> oReturn<br/>\u00a0<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>  <span class=\"kw1\">Private</span> <span class=\"kw1\">Function</span> GetData<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> Map <span class=\"kw1\">As</span> Bitmap<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> oBMPData <span class=\"kw1\">As</span> BitmapData <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">Dim</span> oData<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>\u00a0<br/>    oBMPData <span class=\"sy0\">=</span> Map<span class=\"sy0\">.</span><span class=\"me1\">LockBits</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Rectangle<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, Map<span class=\"sy0\">.</span><span class=\"me1\">Width</span>, Map<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"br0\">)</span>, ImageLockMode<span class=\"sy0\">.</span><span class=\"kw1\">ReadOnly</span>, PixelFormat<span class=\"sy0\">.</span><span class=\"me1\">Format32bppArgb</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Array<span class=\"sy0\">.</span><span class=\"me1\">Resize</span><span class=\"br0\">(</span>oData, Map<span class=\"sy0\">.</span><span class=\"me1\">Width</span> <span class=\"sy0\">*</span> Map<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Runtime<span class=\"sy0\">.</span><span class=\"me1\">InteropServices</span><span class=\"sy0\">.</span><span class=\"me1\">Marshal</span><span class=\"sy0\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span>oBMPData<span class=\"sy0\">.</span><span class=\"me1\">Scan0</span>, oData, <span class=\"nu0\">0</span>, oData<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Map<span class=\"sy0\">.</span><span class=\"me1\">UnlockBits</span><span class=\"br0\">(</span>oBMPData<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> oData<br/>\u00a0<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>  <span class=\"kw1\">Private</span> <span class=\"kw1\">Sub</span> SetData<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> Map <span class=\"kw1\">As</span> Bitmap, <span class=\"kw1\">ByVal</span> Data <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> oBMPData <span class=\"kw1\">As</span> BitmapData <span class=\"sy0\">=</span> <span class=\"kw1\">Nothing</span><br/>\u00a0<br/>    oBMPData <span class=\"sy0\">=</span> Map<span class=\"sy0\">.</span><span class=\"me1\">LockBits</span><span class=\"br0\">(</span><span class=\"kw1\">New</span> Rectangle<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, Map<span class=\"sy0\">.</span><span class=\"me1\">Width</span>, Map<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"br0\">)</span>, ImageLockMode<span class=\"sy0\">.</span><span class=\"kw1\">WriteOnly</span>, PixelFormat<span class=\"sy0\">.</span><span class=\"me1\">Format32bppArgb</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Runtime<span class=\"sy0\">.</span><span class=\"me1\">InteropServices</span><span class=\"sy0\">.</span><span class=\"me1\">Marshal</span><span class=\"sy0\">.</span><span class=\"me1\">Copy</span><span class=\"br0\">(</span>Data, <span class=\"nu0\">0</span>, oBMPData<span class=\"sy0\">.</span><span class=\"me1\">Scan0</span>, Data<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><br/>\u00a0<br/>    Map<span class=\"sy0\">.</span><span class=\"me1\">UnlockBits</span><span class=\"br0\">(</span>oBMPData<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span></pre>"}, {"lang": "Yabasic", "loc": 20, "block": "<pre class=\"text highlighted_source\">import image<br/>\u00a0<br/>open window 600,600<br/>\u00a0<br/>GetImage(1, \"House.bmp\")<br/>DisplayImage(1, 0, 0)<br/>\u00a0<br/>For x = 1 to 300<br/>    For y = 1 to 300<br/>\tz$ = getbit$(x,y,x,y)<br/>\tr = dec(mid$(z$,9,2))<br/>\tg = dec(mid$(z$,11,2))<br/>\tb = dec(mid$(z$,13,2))<br/>\tr3=(r+g+b)/3<br/>\tg3=(r+g+b)/3<br/>\tb3=(r+g+b)/3<br/>\tcolor r3,g3,b3<br/>\tdot x+300,y+300<br/>    next y<br/>next x</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">fcn toGrayScale(img){  // in-place conversion<br/>   foreach x,y in (img.w,img.h){<br/>      r,g,b:=img[x,y].toBigEndian(3);<br/>      lum:=(0.2126*r + 0.7152*g + 0.0722*b).toInt();<br/>      img[x,y]=((lum*256) + lum)*256 + lum;<br/>   }<br/>}</pre>"}]}