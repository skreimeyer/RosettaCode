{"task": "Factorial", "blocks": [{"lang": "0815", "loc": 11, "block": "<pre class=\"text highlighted_source\">}:r:        Start reader loop.<br/>  |~  \t    Read n,  <br/>  #:end:    if n is 0 terminates<br/>  &gt;=        enqueue it as the initial product, reposition.<br/>  }:f:      Start factorial loop.<br/>    x&lt;:1:x- Decrement n.<br/>    {=*&gt;    Dequeue product, position n, multiply, update product.<br/>  ^:f:<br/>  {+%       Dequeue incidental 0, add to get Y into Z, output fac(n).<br/>  &lt;:a:~$    Output a newline.<br/>^:r:</pre>"}, {"lang": "360 Assembly", "loc": 64, "block": "<pre class=\"text highlighted_source\">FACTO    CSECT<br/>         USING  FACTO,R13<br/>SAVEAREA B      STM-SAVEAREA(R15)<br/>         DC     17F'0'<br/>         DC     CL8'FACTO'<br/>STM      STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15         base register and savearea pointer<br/>         ZAP    N,=P'1'         n=1<br/>LOOPN    CP     N,NN            if n&gt;nn<br/>         BH     ENDLOOPN        then goto endloop<br/>         LA     R1,PARMLIST<br/>         L      R15,=A(FACT)<br/>         BALR   R14,R15         call fact(n)<br/>\t ZAP    F,0(L'R,R1)     f=fact(n)<br/>DUMP     EQU    *<br/>\t MVC    S,MASK<br/>\t ED     S,N<br/>         MVC    WTOBUF+5(2),S+30<br/>\t MVC    S,MASK<br/>\t ED     S,F<br/>         MVC    WTOBUF+9(32),S<br/>         WTO    MF=(E,WTOMSG)\t\t  <br/>\t AP     N,=P'1'         n=n+1  <br/>\t B      LOOPN<br/>ENDLOOPN EQU    *<br/>RETURN   EQU    *<br/>         L      R13,4(0,R13)<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14<br/>FACT     EQU    *               function FACT(l)<br/>         L      R2,0(R1)<br/>         L      R3,12(R2)<br/>         ZAP    L,0(L'N,R2)     l=n<br/>         ZAP    R,=P'1'         r=1<br/>         ZAP    I,=P'2'         i=2<br/>LOOP     CP     I,L             if i&gt;l<br/>         BH     ENDLOOP         then goto endloop<br/>\t MP     R,I             r=r*i<br/>\t AP     I,=P'1'         i=i+1  <br/>\t B      LOOP<br/>ENDLOOP  EQU    *<br/>         LA     R1,R            return r<br/>         BR     R14             end function FACT<br/>         DS     0D<br/>NN       DC     PL16'29'<br/>N        DS     PL16<br/>F        DS     PL16<br/>C        DS     CL16<br/>II       DS     PL16<br/>PARMLIST DC     A(N)<br/>S        DS     CL33            <br/>MASK     DC     X'40',29X'20',X'212060'  CL33<br/>WTOMSG   DS     0F<br/>         DC     H'80',XL2'0000'<br/>WTOBUF   DC     CL80'FACT(..)=................................ '<br/>L        DS     PL16<br/>R        DS     PL16<br/>I        DS     PL16<br/>         LTORG<br/>         YREGS  <br/>         END    FACTO</pre>"}, {"lang": "ABAP", "loc": 8, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> factorial <span class=\"kw4\">using</span> iv_val <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_res <span class=\"kw4\">type</span> i <span class=\"kw4\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a> iv_val <span class=\"kw4\">times</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPMULTIPLY.htm\"><span class=\"kw3\">multiply</span></a> lv_res <span class=\"kw4\">by</span> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  iv_val <span class=\"sy1\">=</span> lv_res<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ActionScript", "loc": 11, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw3\">public</span> <span class=\"kw3\">static</span> <span class=\"kw2\">function</span> factorial<span class=\"br0\">(</span>n:<span class=\"kw3\">int</span><span class=\"br0\">)</span>:<span class=\"kw3\">int</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>\u00a0<br/>    <span class=\"kw2\">var</span> fact:<span class=\"kw3\">int</span> = <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">int</span> = <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span>= n; i++<span class=\"br0\">)</span><br/>        fact <span class=\"sy0\">*</span>= i;<br/>\u00a0<br/>    <span class=\"kw1\">return</span> fact;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> Factorial <span class=\"br0\">(</span>N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span><br/>   Result\u00a0: Positive\u00a0:= N;<br/>   Counter\u00a0: Natural\u00a0:= N - <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Counter</span> <span class=\"kw1\">loop</span><br/>      Result\u00a0:= Result * I;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">return</span> Result;<br/><span class=\"kw1\">end</span> Factorial;</pre>"}, {"lang": "Aime", "loc": 14, "block": "<pre class=\"text highlighted_source\">integer<br/>factorial(integer n)<br/>{<br/>    integer i, result;<br/>\u00a0<br/>    result = 1;<br/>    i = 1;<br/>    while (i &lt; n) {<br/>        i += 1;<br/>        result *= i;<br/>    }<br/>\u00a0<br/>    return result;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 5, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> factorial <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> upb n<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> z <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> upb n <span class=\"kw2\">DO</span> z <span class=\"sy1\">*:=</span> n <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  z<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"sy1\">~</span></pre>"}, {"lang": "ALGOL-M", "loc": 8, "block": "<pre class=\"text highlighted_source\">INTEGER FUNCTION FACTORIAL( N ); INTEGER N;<br/>BEGIN<br/>    INTEGER I, FACT;<br/>    FACT\u00a0:= 1;<br/>    FOR I\u00a0:= 2 STEP 1 UNTIL N DO<br/>        FACT\u00a0:= FACT * I;<br/>    FACTORIAL\u00a0:= FACT;<br/>END;</pre>"}, {"lang": "ALGOL W", "loc": 15, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% computes factorial n iteratively                                      \u00a0%<br/>    integer procedure factorial( integer value n )\u00a0;<br/>        if n &lt; 2<br/>        then 1<br/>        else begin<br/>            integer f;<br/>            f\u00a0:= 2;<br/>            for i\u00a0:= 3 until n do f\u00a0:= f * i;<br/>            f<br/>        end factorial\u00a0;<br/>\u00a0<br/>    for t\u00a0:= 0 until 10 do write( \"factorial: \", t, factorial( t ) );<br/>\u00a0<br/>end.</pre>"}, {"lang": "AmigaE", "loc": 5, "block": "<pre class=\"text highlighted_source\">PROC fact(x) IS IF x&gt;=2 THEN x*fact(x-1) ELSE 1<br/>\u00a0<br/>PROC main()<br/>  WriteF('5! = \\d\\n', fact(5))<br/>ENDPROC</pre>"}, {"lang": "AntLang", "loc": 1, "block": "<pre class=\"text highlighted_source\">factorial:{1 */ 1+range[x]} /Call: factorial[1000]</pre>"}, {"lang": "Apex", "loc": 11, "block": "<pre class=\"text highlighted_source\">public static long fact(final Integer n) {<br/>    if (n &lt; 0) {<br/>        System.debug('No negative numbers');<br/>        return 0;<br/>    }<br/>    long ans = 1;<br/>    for (Integer i = 1; i &lt;= n; i++) {<br/>        ans *= i;<br/>    }<br/>    return ans;<br/>}</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">     \u00a0!6<br/>720</pre>"}, {"lang": "AppleScript", "loc": 8, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> factorial<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">set</span> R <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> x &gt; <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>R, x<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>R <span class=\"sy0\">*</span> x, x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> R<br/><span class=\"kw3\">end</span> factorial</pre>"}, {"lang": "Applesoft BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">100 N = 4\u00a0: GOSUB 200\"FACTORIAL<br/>110 PRINT N<br/>120 END<br/>\u00a0<br/>200 N = INT(N)<br/>210 IF N &gt; 1 THEN FOR I = N - 1 TO 2 STEP -1\u00a0: N = N * I\u00a0: NEXT I<br/>220 RETURN</pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre>&lt; n &gt;\n\n{ @n = 0 ,\n   ( return , 1 )\n,  \n   ( return ,\n       @n *\u00a0!factorial( @n -\u00a0! )\n   )\n}\n</pre>"}, {"lang": "AsciiDots", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/---------*--~-$#-&amp;<br/>| /--;---\\| [!]-\\<br/>| *------++--*#1/<br/>| | /1#\\ ||<br/>[*]*{-}-*~&lt;+*?#-.<br/>*-------+-&lt;/<br/>\\-#0----/<br/>\u00a0</pre>"}, {"lang": "ATS", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun<br/>fact<br/>(<br/>  n: int<br/>)\u00a0: int = res where<br/>{<br/>  var n: int = n<br/>  var res: int = 1<br/>  val () = while (n &gt; 0) (res\u00a0:= res * n; n\u00a0:= n - 1)<br/>}<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% factorial<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  result <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% n<br/>    result <span class=\"sy0\">*=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>  <span class=\"kw1\">Return</span> result <br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 12, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">;AutoIt Version: 3.2.10.0</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Factorial\"</span><span class=\"sy0\">,</span>factorial<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> factorial<span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$int</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>      <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"nu0\">0</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>   <span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$int</span><br/>        <span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> <span class=\"re0\">$fact</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$fact</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> fact_r<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw6\">return</span> n<span class=\"sy3\">*</span>fact_r<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 7, "block": "<pre class=\"text highlighted_source\">Lbl FACT<br/>1\u2192R<br/>For(I,1,r\u2081)<br/> R*I\u2192R<br/>End<br/>R<br/>Return</pre>"}, {"lang": "Babel", "loc": 10, "block": "<pre class=\"text highlighted_source\">((main <br/>    {(0 1 2 3 4 5 6 7 8 9 10)<br/>    {fact\u00a0!\u00a0%d nl &lt;&lt;}    <br/>    each})<br/>\u00a0<br/>(fact<br/>       {({dup 0 =}{ zap 1 }<br/>         {dup 1 =}{ zap 1 }<br/>         {1      }{ &lt;- 1 {iter 1 + *} -&gt; 1 - times })<br/>        cond}))</pre>"}, {"lang": "BaCon", "loc": 11, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Factorial</span><br/><span class=\"kw1\">FUNCTION</span> factorial<span class=\"br0\">(</span>NUMBER n<span class=\"br0\">)</span> <span class=\"kw1\">TYPE</span> NUMBER<br/>    <span class=\"kw1\">IF</span> n &lt;= <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ELSE</span><br/>        <span class=\"kw1\">RETURN</span> n * factorial<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    ENDIF<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/>n = <span class=\"kw1\">VAL</span><span class=\"br0\">(</span>TOKEN$<span class=\"br0\">(</span>ARGUMENT$, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> n, factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> FORMAT <span class=\"st0\">\"%ld! =\u00a0%ld<span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "bash", "loc": 11, "block": "<pre class=\"bash highlighted_source\">factorial<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"re4\">$1</span> <span class=\"re5\">-le</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>  <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"re2\">result</span>=$<span class=\"br0\">(</span>factorial $<span class=\"br0\">[</span><span class=\"re4\">$1</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span>result<span class=\"sy0\">*</span><span class=\"re4\">$1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 8, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> factorial <span class=\"br0\">(</span>n <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw1\">DIM</span> f <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span>, i <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>    f = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">FOR</span>  i = <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> n<br/>        f = f*i<br/>    <span class=\"kw1\">NEXT</span> i<br/>    factorial = f<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BASIC256", "loc": 12, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">print</span> <span class=\"st0\">\"enter a number, n = \"</span>;<br/><span class=\"kw4\">input</span> n<br/><span class=\"kw4\">print</span> <span class=\"kw1\">string</span>(n) + <span class=\"st0\">\"! = \"</span> + <span class=\"kw1\">string</span>(factorial(n))<br/>\u00a0<br/><span class=\"kw2\">function</span> factorial(n)<br/>   factorial = 1<br/>   <span class=\"kw3\">if</span> n &gt; 0 <span class=\"kw3\">then</span><br/>      <span class=\"kw3\">for</span> p = 1 <span class=\"kw3\">to</span> n<br/>      factorial *= p<br/>      <span class=\"kw3\">next</span> p<br/>   <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "Batch File", "loc": 9, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p x=<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a fs=<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span>-1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> y=<span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">FOR</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">a</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">IN</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">fs</span><span class=\"sy0\">%</span>, -1, 1<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">DO</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">SET</span></a> /a y*=<span class=\"sy0\">%%</span><span class=\"re3\">a</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">x</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> y=1<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">y</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a></pre>"}, {"lang": "BBC BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">      *FLOAT64<br/>      @% = &amp;1010<br/>\u00a0<br/>      PRINT FNfactorial(18)<br/>      END<br/>\u00a0<br/>      DEF FNfactorial(n)<br/>      IF n &lt;= 1 THEN = 1 ELSE = n * FNfactorial(n-1)</pre>"}, {"lang": "bc", "loc": 7, "block": "<pre class=\"text highlighted_source\">#! /usr/bin/bc -q<br/>\u00a0<br/>define f(x) {<br/>  if (x &lt;= 1) return (1); return (f(x-1) * x)<br/>}<br/>f(1000)<br/>quit</pre>"}, {"lang": "beeswax", "loc": 4, "block": "<pre class=\"text highlighted_source\">        p      &lt;<br/>_&gt;1FT\"pF&gt;M\"p~.~d<br/>      &gt;Pd  &gt;~{Np<br/> d             &lt;</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">&amp;1\\&gt; \u00a0:v v *&lt;<br/>   ^-1:_$&gt;\\:|<br/>         @.$&lt;</pre>"}, {"lang": "Bracmat", "loc": 28, "block": "<pre class=\"text highlighted_source\">      ( <br/>      =   <br/>        .  \u00a0!arg:0&amp;1<br/>          |  \u00a0!arg<br/>            *   ( ( <br/>                  =   r<br/>                    .  \u00a0!arg:?r<br/>                      &amp;   <br/>                        ' ( <br/>                          .  \u00a0!arg:0&amp;1<br/>                            |\u00a0!arg*(($r)$($r))$(!arg+-1)<br/>                          )<br/>                  )<br/>                $ ( <br/>                  =   r<br/>                    .  \u00a0!arg:?r<br/>                      &amp;   <br/>                        ' ( <br/>                          .  \u00a0!arg:0&amp;1<br/>                            |\u00a0!arg*(($r)$($r))$(!arg+-1)<br/>                          )<br/>                  )<br/>                )<br/>              $ (!arg+-1)<br/>      )<br/>    $ 10<br/> \u00a0: 3628800<br/>\u00a0</pre>"}, {"lang": "Brainf***", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;++++++++++&gt;&gt;&gt;+&gt;+[&gt;&gt;&gt;+[-[&lt;&lt;&lt;&lt;&lt;[+&lt;&lt;&lt;&lt;&lt;]&gt;&gt;[[-]&gt;[&lt;&lt;+&gt;+&gt;-]&lt;[&gt;+&lt;-]&lt;[&gt;+&lt;-[&gt;+&lt;-[&gt;<br/>+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;[-]&gt;&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;-[&gt;+&lt;-]]]]]]]]]]]&gt;[&lt;+&gt;-<br/>]+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;]++[-&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;-]+&gt;&gt;&gt;&gt;&gt;]&lt;[&gt;++&lt;-]&lt;&lt;&lt;&lt;[&lt;[<br/>&gt;+&lt;-]&lt;&lt;&lt;&lt;]&gt;&gt;[-&gt;[-]++++++[&lt;++++++++&gt;-]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[&lt;[&gt;+&gt;+&lt;&lt;-]&gt;.&lt;&lt;&lt;&lt;&lt;]&gt;.&gt;&gt;&gt;&gt;]</pre>"}, {"lang": "Brat", "loc": 3, "block": "<pre class=\"text highlighted_source\">factorial = { x |<br/>  true? x == 0 1 { x * factorial(x - 1)}<br/>}</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 6?!<br/>720<br/>\u00a0</pre>"}, {"lang": "embedded C for AVR MCU", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">long</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">long</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <br/>        result <span class=\"sy0\">*=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">--</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        result <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>            <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span>nameof<span class=\"br0\">(</span>number<span class=\"br0\">)</span>, number, <span class=\"st0\">\"Must be zero or a positive number.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> factor <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> factor <span class=\"sy0\">&lt;=</span> number<span class=\"sy0\">;</span> factor<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            accumulator <span class=\"sy0\">*=</span> factor<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> accumulator<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Factorial<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 8, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;boost/iterator/counting_iterator.hpp&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// last is one-past-end</span><br/>  <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>boost<span class=\"sy4\">::</span><span class=\"me2\">counting_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, boost<span class=\"sy4\">::</span><span class=\"me2\">counting_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>n<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, std<span class=\"sy4\">::</span><span class=\"me2\">multiplies</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cat", "loc": 2, "block": "<pre class=\"text highlighted_source\">define rec_fac<br/>      { dup 1 &lt;= [pop 1] [dec rec_fac *] if }</pre>"}, {"lang": "Ceylon", "loc": 21, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tInteger? recursiveFactorial(Integer n) =&gt; <br/>\t\t\tswitch(n &lt;=&gt; 0)<br/>\t\t\tcase(smaller) null<br/>\t\t\tcase(equal) 1<br/>\t\t\tcase(larger) if(exists f = recursiveFactorial(n - 1)) then n * f else null;<br/>\u00a0<br/>\u00a0<br/>\tInteger? iterativeFactorial(Integer n) =&gt;<br/>\t\t\tswitch(n &lt;=&gt; 0)<br/>\t\t\tcase(smaller) null<br/>\t\t\tcase(equal) 1<br/>\t\t\tcase(larger) (1:n).reduce(times);<br/>\u00a0<br/>\tfor(Integer i in 0..10) {<br/>\t\tprint(\"the iterative factorial of     ``i`` is ``iterativeFactorial(i) else \"negative\"``<br/>\t\t       and the recursive factorial of ``i`` is ``recursiveFactorial(i) else \"negative\"``\\n\");<br/>\t}<br/>}<br/>\u00a0</pre>"}, {"lang": "Chapel", "loc": 7, "block": "<pre class=\"text highlighted_source\">proc fac(n) {<br/>\tvar r = 1;<br/>\tfor i in 1..n do<br/>\t\tr *= i;<br/>\u00a0<br/>\treturn r;<br/>}</pre>"}, {"lang": "Chef", "loc": 17, "block": "<pre class=\"text highlighted_source\">Caramel Factorials.<br/>\u00a0<br/>Only reads one value.<br/>\u00a0<br/>Ingredients.<br/>1 g Caramel<br/>2 g Factorials<br/>\u00a0<br/>Method.<br/>Take Factorials from refrigerator.<br/>Put Caramel into 1st mixing bowl.<br/>Verb the Factorials.<br/>Combine Factorials into 1st mixing bowl.<br/>Verb Factorials until verbed.<br/>Pour contents of the 1st mixing bowl into the 1st baking dish.<br/>\u00a0<br/>Serves 1.</pre>"}, {"lang": "ChucK", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>0 =&gt; int total;<br/>fun int factorial(int i)<br/>{<br/>    if (i == 0) return 1;<br/>    else<br/>    {<br/>        i * factorial(i - 1) =&gt; total;<br/>    } <br/>    return total;<br/>}<br/>\u00a0</pre>"}, {"lang": "Clay", "loc": 14, "block": "<pre class=\"text highlighted_source\">factorialRec(n) {<br/>    if (n == 0) return 1;<br/>    return n * factorialRec(n - 1);<br/>}<br/>\u00a0<br/>factorialIter(n) {<br/>    for (i in range(1, n))<br/>        n *= i;<br/>    return n;<br/>}<br/>\u00a0<br/>factorialFold(n) {<br/>    return reduce(multiply, 1, range(1, n + 1));<br/>}</pre>"}, {"lang": "CLIPS", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"> <span class=\"br0\">(</span>deffunction factorial <span class=\"br0\">(</span>?a<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>integerp\u00a0?a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>\u00a0?a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> then<br/>        <span class=\"br0\">(</span>printout t <span class=\"st0\">\"Factorial Error!\"</span> crlf<span class=\"br0\">)</span><br/>     else<br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0?a <span class=\"nu0\">0</span><span class=\"br0\">)</span> then<br/>            <span class=\"nu0\">1</span><br/>         else<br/>            <span class=\"br0\">(</span>*\u00a0?a <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span>-\u00a0?a <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn factorial <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"sy0\"> * </span><span class=\"br0\">(</span>range <span class=\"nu0\">2</span> <span class=\"br0\">(</span>inc x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 10, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>factorial var n<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>product 1<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:foreach\"><span class=\"kw1\">foreach</span></a><span class=\"sy0\">(</span>i RANGE 2 <span class=\"re0\">${n}</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR product <span class=\"st0\">\"<span class=\"es1\">${product}</span> * <span class=\"es1\">${i}</span>\"</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endforeach\"><span class=\"kw1\">endforeach</span></a><span class=\"sy0\">(</span>i<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> <span class=\"re0\">${product}</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>factorial<span class=\"sy0\">)</span><br/>\u00a0<br/>factorial<span class=\"sy0\">(</span>f 12<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"st0\">\"12! = <span class=\"es1\">${f}</span>\"</span><span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 1, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">FACTORIAL</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> result</pre>"}, {"lang": "CoffeeScript", "loc": 5, "block": "<pre class=\"coffeescript highlighted_source\">fac = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><br/>    <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    n <span class=\"sy0\">*</span> fac n<span class=\"sy0\">-</span><span class=\"nu0\">1</span></pre>"}, {"lang": "Comal", "loc": 7, "block": "<pre class=\"text highlighted_source\">  PROC Recursive(n) CLOSED<br/>    r:=1<br/>    IF n&gt;1 THEN <br/>      r:=n*Recursive(n-1)<br/>    ENDIF<br/>    RETURN r<br/>  ENDPROC Recursive</pre>"}, {"lang": "Comefrom0x10", "loc": 15, "block": "<pre class=\"text highlighted_source\">n = 5 # calculates n!<br/>acc = 1<br/>\u00a0<br/>factorial<br/>  comefrom<br/>\u00a0<br/>  comefrom accumulate if n &lt; 1<br/>\u00a0<br/>accumulate<br/>  comefrom factorial<br/>  acc = acc * n<br/>  comefrom factorial if n is 0<br/>  n = n - 1<br/>\u00a0<br/>acc # prints the result</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fact <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>* n <span class=\"br0\">(</span>fact<span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Computer/zero Assembly", "loc": 43, "block": "<pre class=\"text highlighted_source\">        LDA  x<br/>        BRZ  done_i  \u00a0; 0! = 1<br/>\u00a0<br/>        STA  i<br/>\u00a0<br/>loop_i: LDA  fact<br/>        STA  n<br/>\u00a0<br/>        LDA  i<br/>        SUB  one<br/>        BRZ  done_i<br/>\u00a0<br/>        STA  j<br/>\u00a0<br/>loop_j: LDA  fact<br/>        ADD  n<br/>        STA  fact<br/>\u00a0<br/>        LDA  j<br/>        SUB  one<br/>        BRZ  done_j<br/>\u00a0<br/>        STA  j<br/>        JMP  loop_j<br/>\u00a0<br/>done_j: LDA  i<br/>        SUB  one<br/>        STA  i<br/>\u00a0<br/>        JMP  loop_i<br/>\u00a0<br/>done_i: LDA  fact<br/>        STP<br/>\u00a0<br/>one:         1<br/>\u00a0<br/>fact:        1<br/>\u00a0<br/>i:           0<br/>j:           0<br/>n:           0<br/>\u00a0<br/>x:           5</pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">uint</span> factorial<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc<br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Computed and printed at compile-time.</span><br/><span class=\"kw2\">pragma</span><span class=\"br0\">(</span>msg<span class=\"sy0\">,</span> <span class=\"nu0\">12</span>.<span class=\"me1\">factorial</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Computed and printed at run-time.</span><br/>    <span class=\"nu0\">12</span>.<span class=\"me1\">factorial</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 11, "block": "<pre class=\"text highlighted_source\">int fact(int n) {<br/>  if(n&lt;0) {<br/>    throw new IllegalArgumentException('Argument less than 0');<br/>  }<br/>  return n==0\u00a0? 1\u00a0: n*fact(n-1);<br/>}<br/>\u00a0<br/>main() {<br/>  print(fact(10));<br/>  print(fact(-1));<br/>}</pre>"}, {"lang": "dc", "loc": 19, "block": "<pre class=\"text highlighted_source\">[*<br/> * (n) lfx -- (factorial of n)<br/> *]sz<br/>[<br/> 1 Sp           [product = 1]sz<br/> [              [Loop while 1 &lt; n:]sz<br/>  d lp * sp      [product = n * product]sz<br/>  1 -            [n = n - 1]sz<br/>  d 1 &lt;f<br/> ]Sf d 1 &lt;f<br/> Lfsz           [Drop loop.]sz<br/> sz             [Drop n.]sz<br/> Lp             [Push product.]sz<br/>]sf<br/>\u00a0<br/>[*<br/> * For example, print the factorial of 50.<br/> *]sz<br/>50 lfx psz</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 6, "block": "<pre class=\"text highlighted_source\">factorial:<br/>    1<br/>    while over:<br/>        * over<br/>        swap -- swap<br/>    drop swap</pre>"}, {"lang": "Delphi", "loc": 16, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Factorial1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FactorialIterative<span class=\"br0\">(</span>aNumber<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Int64</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> aNumber <span class=\"kw1\">do</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">*</span> Result<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'5! = '</span><span class=\"sy1\">,</span> FactorialIterative<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 8, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> IterativeFactorial<span class=\"br0\">(</span>n <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> <br/>   i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      Result <span class=\"sy3\">*=</span> i<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Dylan", "loc": 3, "block": "<pre class=\"text highlighted_source\">define method factorial(n)<br/>  reduce1(\\*, range(from: 1, to: n));<br/>end</pre>"}, {"lang": "E", "loc": 4, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">1</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">2</span>..<span class=\"me1\">n</span> <span class=\"br0\">{</span> _ <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 6, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fact n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>product <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">f</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>fact <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">3628800</span><br/>\u00a0</pre>"}, {"lang": "EGL", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function fact(n int in) returns (bigint)<br/>    if (n &lt; 0)<br/>        writestdout(\"No negative numbers\");<br/>        return (0);<br/>    end<br/>    ans bigint = 1;<br/>    for (i int from 1 to n)<br/>        ans *= i;<br/>    end<br/>    return (ans);<br/>end<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 51, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>note<br/>\tdescription<span class=\"sy0\">:</span> <span class=\"st0\">\"recursive and iterative factorial example of a positive integer.\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tFACTORIAL_EXAMPLE<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tn<span class=\"sy0\">:</span> NATURAL<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tn <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>Factorial of \"</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>recursive_factorial <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\trecursive_factorial <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> NATURAL<span class=\"br0\">)</span><span class=\"sy0\">:</span> NATURAL<br/>\t\t\t<span class=\"co1\">-- factorial of 'n'</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> n <span class=\"sy0\">*</span> recursive_factorial <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\titerative_factorial <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> NATURAL<span class=\"br0\">)</span><span class=\"sy0\">:</span> NATURAL<br/>\t\t\t<span class=\"co1\">-- factorial of 'n'</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tv<span class=\"sy0\">:</span> <span class=\"kw2\">like</span> n<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\tv <span class=\"sy0\">:=</span> n<br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tv <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">*</span> v<br/>\t\t\t\tv <span class=\"sy0\">:=</span> v <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 3, "block": "<pre class=\"text highlighted_source\">fact = fact' 1L             <br/>       where fact' acc 0 = acc                  <br/>             fact' acc n = fact' (n * acc) (n - 1)</pre>"}, {"lang": "Elixir", "loc": 25, "block": "<pre class=\"text highlighted_source\">defmodule Factorial do<br/>  # Simple recursive function<br/>  def fac(0), do: 1<br/>  def fac(n) when n &gt; 0, do: n * fac(n - 1)<br/>\u00a0<br/>  # Tail recursive function<br/>  def fac_tail(0), do: 1<br/>  def fac_tail(n), do: fac_tail(n, 1)<br/>  def fac_tail(1, acc), do: acc <br/>  def fac_tail(n, acc) when n &gt; 1, do: fac_tail(n - 1, acc * n)<br/>\u00a0<br/>  # Tail recursive function with default parameter<br/>  def fac_default(n, acc \\\\ 1)<br/>  def fac_default(0, acc), do: acc<br/>  def fac_default(n, acc) when n &gt; 0, do: fac_default(n - 1, acc * n)<br/>\u00a0<br/>  # Using Enumeration features<br/>  def fac_reduce(0), do: 1<br/>  def fac_reduce(n) when n &gt; 0, do: Enum.reduce(1..n, 1, &amp;*/2)<br/>\u00a0<br/>  # Using Enumeration features with pipe operator<br/>  def fac_pipe(0), do: 1<br/>  def fac_pipe(n) when n &gt; 0, do: 1..n |&gt; Enum.reduce(1, &amp;*/2)<br/>\u00a0<br/>end</pre>"}, {"lang": "Elm", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>factorial\u00a0: Int -&gt; Int<br/>factorial n =<br/>  if n &lt; 1 then 1 else n*factorial(n-1)<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fact <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"n is an integer, this function returns n!, that is n * (n - 1)<br/>* (n - 2)....* 4 * 3 * 2 * 1\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>t <span class=\"br0\">(</span>* n <span class=\"br0\">(</span>fact <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><span class=\"sy3\">*</span><span class=\"re5\">Y</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    PROCEDURE FACTORIAL(X%-&gt;F)<br/>      F=1<br/>      IF X%&lt;&gt;0 THEN<br/>        FOR I%=X% TO 2 STEP \u00c41 DO<br/>          F=F*X%<br/>        END FOR<br/>      END IF<br/>    END PROCEDURE<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 9, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> factorial<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw2\">atom</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    f <span class=\"sy1\">*=</span> n<br/>    n <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> f<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Ezhil", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u0ba8\u0bbf\u0bb0\u0bb2\u0bcd\u0baa\u0bbe\u0b95\u0bae\u0bcd  fact ( n )<br/>  @( n == 0 ) \u0b86\u0ba9\u0bbe\u0bb2\u0bcd<br/>            \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1  1<br/>     \u0b87\u0bb2\u0bcd\u0bb2\u0bc8<br/>            \u0baa\u0bbf\u0ba9\u0bcd\u0b95\u0bca\u0b9f\u0bc1    n*fact( n - 1 )<br/>    \u0bae\u0bc1\u0b9f\u0bbf<br/>\u0bae\u0bc1\u0b9f\u0bbf<br/>\u00a0<br/>\u0baa\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bbf fact ( 10 )<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">//val inline factorial\u00a0:</span><br/><span class=\"co1\">//   ^a -&gt;  ^a</span><br/><span class=\"co1\">//    when  ^a\u00a0: (static member get_One\u00a0: -&gt;  ^a) and</span><br/><span class=\"co1\">//          ^a\u00a0: (static member ( + )\u00a0:  ^a *  ^a -&gt;  ^a) and</span><br/><span class=\"co1\">//          ^a\u00a0: (static member ( * )\u00a0:  ^a *  ^a -&gt;  ^a)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">inline</span> factorial n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">[</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">LanguagePrimitives</span></a>.<span class=\"me1\">GenericOne</span> .. <span class=\"me1\">n</span> <span class=\"br0\">]</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USING: math.ranges sequences\u00a0;<br/>\u00a0<br/>: factorial ( n -- n ) [1,b] product\u00a0;</pre>"}, {"lang": "FALSE", "loc": 2, "block": "<pre class=\"text highlighted_source\">[1\\[$][<a class=\"__cf_email__\" data-cfemail=\"230763\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*\\1-]#%]f:<br/>^'0- f;!.</pre>"}, {"lang": "Fancy", "loc": 10, "block": "<pre class=\"text highlighted_source\">def class Number {<br/>  def factorial {<br/>    1 upto: self . product<br/>  }<br/>}<br/>\u00a0<br/># print first ten factorials<br/>1 upto: 10 do_each: |i| {<br/>  i to_s ++ \"! = \" ++ (i factorial) println<br/>}</pre>"}, {"lang": "Fantom", "loc": 36, "block": "<pre class=\"text highlighted_source\">class Main<br/>{<br/>  static Int factorialRecursive (Int n)<br/>  {<br/>    if (n &lt;= 1)<br/>      return 1<br/>    else<br/>      return n * (factorialRecursive (n - 1))<br/>  }<br/>\u00a0<br/>  static Int factorialIterative (Int n)<br/>  {<br/>    Int product\u00a0:= 1<br/>    for (Int i\u00a0:= 2; i &lt;=n\u00a0; ++i)<br/>    {<br/>      product *= i<br/>    }<br/>    return product<br/>  }<br/>\u00a0<br/>  static Int factorialFunctional (Int n)<br/>  {<br/>    (1..n).toList.reduce(1) |a,v| <br/>    { <br/>      v-&gt;mult(a) // use a dynamic invoke<br/>      // alternatively, cast a:  v * (Int)a<br/>    }<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    echo (factorialRecursive(20))<br/>    echo (factorialIterative(20))<br/>    echo (factorialFunctional(20))<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: fac ( n -- n! ) 1 swap 1+ 1\u00a0?do i * loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">nfactorial <span class=\"sy0\">=</span> <span class=\"kw4\">PRODUCT</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "FPr", "loc": 1, "block": "<pre class=\"text highlighted_source\">fact==((1&amp;),iota)\\(1*2)&amp; </pre>"}, {"lang": "FreeBASIC", "loc": 27, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Factorial_Iterative<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  Var result = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>    result *= i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> result<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Factorial_Recursive<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span> n * Factorial_Recursive<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">Print</span> i; <span class=\"st0\">\" =&gt;\"</span>; Factorial_Iterative<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">6</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"##\"</span>; i; <br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\" =&gt;\"</span>; Factorial_Recursive<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "friendly interactive shell", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function factorial<br/>\tset x $argv[1]<br/>\tset result 1<br/>\tfor i in (seq $x)<br/>\t\tset result (expr $i '*' $result)<br/>\tend<br/>\techo $result<br/>end<br/>\u00a0</pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>factorial[x]\u00a0:= x!<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 10, "block": "<pre class=\"text highlighted_source\">def factorial( n ) =<br/>  if n &lt; 0<br/>    error( 'factorial: n should be non-negative' )<br/>  else<br/>    res = 1<br/>\u00a0<br/>    for i &lt;- 2..n<br/>      res *= i<br/>\u00a0<br/>    res</pre>"}, {"lang": "Futhark", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun fact(n: int): int =<br/>  if n == 0 then 1<br/>            else n * fact(n-1)<br/>\u00a0</pre>"}, {"lang": "Iterative", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun fact(n: int): int =<br/>  loop (out = 1) = for i &lt; n do<br/>    out * (i+1)<br/>  in out<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn factorialIterative( n as long ) as double<br/>dim as double f<br/>dim as long i<br/>\u00a0<br/>if ( n &gt; 1 )<br/>  f = 1<br/>  for i = 2 To n<br/>    f = f * i<br/>  next i<br/>else<br/>  f = 1<br/>end if<br/>end fn = f<br/>\u00a0<br/>local fn factorialRecursive( n as long ) as double<br/>dim as double f<br/>\u00a0<br/>if ( n &lt; 2 )<br/> f = 1<br/>else<br/> f = n * fn factorialRecursive( n -1 )<br/>end if<br/>end fn = f<br/>\u00a0<br/>dim as long i<br/>\u00a0<br/>for i = 0 to 12<br/>  print \"Iterative:\"; using \"####\"; i; \" =\"; fn factorialIterative( i )<br/>  print \"Recursive:\"; using \"####\"; i; \" =\"; fn factorialRecursive( i )<br/>  print<br/>next i<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 5, "block": "<pre class=\"text highlighted_source\"># Built-in<br/>Factorial(5);<br/>\u00a0<br/># An implementation<br/>fact\u00a0:= n -&gt; Product([1 .. n]);</pre>"}, {"lang": "Genyris", "loc": 4, "block": "<pre class=\"text highlighted_source\">def factorial (n)<br/>    if (&lt; n 2) 1<br/>      * n<br/>        factorial (- n 1)</pre>"}, {"lang": "GML", "loc": 5, "block": "<pre class=\"gml highlighted_source\">n <span class=\"sy0\">=</span> argument0<br/>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    j <span class=\"sy0\">*=</span> i<br/><span class=\"kw1\">return</span> j</pre>"}, {"lang": "gnuplot", "loc": 3, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+xrange%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">xrange</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">4.95</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+key%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">key</span></a> <span class=\"kw5\">left</span><br/><span class=\"kw1\">plot</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"sy0\">!</span></pre>"}, {"lang": "Go", "loc": 22, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>factorial<span class=\"sy1\">(</span><span class=\"nu0\">800</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> factorial<span class=\"sy1\">(</span>n <span class=\"kw4\">int64</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><br/>    <span class=\"sy1\">}</span><br/>    r <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> f <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">);</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        r<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> f<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 2, "block": "<pre class=\"text highlighted_source\">{.!{1}{,{)}%{*}*}if}:fact;<br/>5fact puts # test</pre>"}, {"lang": "GridScript", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#FACTORIAL.<br/>\u00a0<br/>@width 14<br/>@height 8<br/>\u00a0<br/>(1,3):START<br/>(7,1):CHECKPOINT 0<br/>(3,3):INPUT INT TO n<br/>(5,3):STORE n<br/>(7,3):GO EAST<br/>(9,3):DECREMENT n<br/>(11,3):SWITCH n<br/>(11,5):MULTIPLY BY n<br/>(11,7):GOTO 0<br/>(13,3):PRINT<br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rFact<br/>rFact <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>it <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> it <span class=\"sy0\">*</span> rFact<span class=\"br0\">(</span>it <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">1</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">factorial n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 8, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Clipboard<span class=\"br0\">)</span> factorial<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>  <span class=\"co1\">! pasted: 720</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   factorial <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> n<br/>      factorial <span class=\"sy1\">=</span> factorial <span class=\"sy1\">*</span> i<br/>   <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "HolyC", "loc": 9, "block": "<pre class=\"text highlighted_source\">U64 Factorial(U64 n) {<br/>  U64 i, result = 1;<br/>  for (i = 1; i &lt;= n; ++i)<br/>    result *= i;<br/>  return result;<br/>}<br/>\u00a0<br/>Print(\"1: \u00a0%d\\n\", Factorial(1));<br/>Print(\"10:\u00a0%d\\n\", Factorial(10));</pre>"}, {"lang": "Hy", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">*</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; 720</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; 1</span></pre>"}, {"lang": "i", "loc": 13, "block": "<pre class=\"text highlighted_source\">concept factorial(n) {<br/>\treturn n!<br/>}<br/>\u00a0<br/>software {<br/>\tprint(factorial(-23))<br/>\tprint(factorial(0))<br/>\tprint(factorial(1))<br/>\tprint(factorial(2))<br/>\tprint(factorial(3))<br/>\tprint(factorial(22))<br/>} <br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span>     <br/>   n <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">101</span><span class=\"sy1\">,</span> n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> n<span class=\"sy1\">*</span>factorial<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> </pre>"}, {"lang": "IDL", "loc": 3, "block": "<pre class=\"idl highlighted_source\">function fact,n<br/>   return, product<span class=\"br0\">(</span>lindgen<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>end</pre>"}, {"lang": "Inform 6", "loc": 6, "block": "<pre class=\"text highlighted_source\">[ factorial n;<br/>  if(n == 0)<br/>    return 1;<br/>  else<br/>    return n * factorial(n - 1);<br/>];</pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"nu0\">3</span> factorial</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\"> \u00a0! <span class=\"nu0\">8</span>             <span class=\"co1\">NB.  Built in factorial operator</span><br/><span class=\"nu0\">40320</span></pre>"}, {"lang": "Java", "loc": 11, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">long</span> fact<span class=\"br0\">(</span><span class=\"kw2\">final</span> <span class=\"kw3\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"No negative numbers\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">long</span> ans = <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ans <span class=\"sy0\">*</span>= i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> ans<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 12, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">//check our edge case</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">throw</span> <span class=\"st0\">\"Number must be non-negative\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//we skip zero and one since both are 1 and are identity</span><br/>  while <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">*=</span> n<span class=\"sy0\">;</span><br/>    n<span class=\"sy0\">--;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JOVIAL", "loc": 9, "block": "<pre class=\"text highlighted_source\">PROC FACTORIAL(ARG) U;<br/>    BEGIN<br/>    ITEM ARG U;<br/>    ITEM TEMP U;<br/>    TEMP = 1;<br/>    FOR I:2 BY 1 WHILE I&lt;=ARG;<br/>        TEMP = TEMP*I;<br/>    FACTORIAL = TEMP;<br/>    END</pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">DEFINE factorial == [0 =] [pop 1] [dup 1 - factorial *] ifte. </pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">def fact:<br/>  reduce range(1; .+1) as $i (1; . * $i);</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre>help?&gt; factorial\nsearch: factorial Factorization factorize\n\n  factorial(n)\n\n  Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at\n  least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))\n  to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is\n  equivalent to gamma(n+1).\n\n  julia&gt; factorial(6)\n  720\n\n  julia&gt; factorial(21)\n  ERROR: OverflowError()\n  [...]\n\n  julia&gt; factorial(21.0)\n  5.109094217170944e19\n\n  julia&gt; factorial(big(21))\n  51090942171709440000</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">  facti:*/1+!:<br/>  facti 5<br/>120</pre>"}, {"lang": "Klong", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    factRecursive::{:[x&gt;1;x*.f(x-1);1]}<br/>    factIterative::{*/1+!x}<br/>\u00a0</pre>"}, {"lang": "KonsolScript", "loc": 13, "block": "<pre class=\"text highlighted_source\">function factorial(Number n):Number {<br/>  Var:Number ret;<br/>  if (n &gt;= 0) {<br/>    ret = 1;<br/>    Var:Number i = 1;<br/>    for (i = 1; i &lt;= n; i++) {<br/>      ret = ret * i;<br/>    }<br/>  } else {<br/>    ret = 0;<br/>  }<br/>  return ret;<br/>}</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\">fun facti<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"negative numbers not allowed\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>  -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ans <span class=\"sy0\">=</span> 1L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> ans <span class=\"sy0\">*=</span> i<br/>        ans<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun factr<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"negative numbers not allowed\"</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> 1L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>  -<span class=\"sy0\">&gt;</span> n <span class=\"sy0\">*</span> factr<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$n! = \"</span> + facti<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$n! = \"</span> + factr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 4, "block": "<pre class=\"text highlighted_source\"> \u00a0: fact iota 1 + '* reduce\u00a0;<br/>  5 fact<br/>120<br/>\u00a0</pre>"}, {"lang": "Lasso", "loc": 8, "block": "<pre class=\"text highlighted_source\">define factorial(n) =&gt; {<br/>  local(x = 1)<br/>  with i in generateSeries(2, #n)<br/>  do {<br/>    #x *= #i<br/>  }<br/>  return #x<br/>}</pre>"}, {"lang": "LFE", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factorial <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* n <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 29, "block": "<pre class=\"lb highlighted_source\">    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">40</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" FactorialI( \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"####\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span>; <span class=\"st0\">\") = \"</span>; factorialI<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" FactorialR( \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"####\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span>; <span class=\"st0\">\") = \"</span>; factorialR<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> factorialI<span class=\"br0\">(</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            f <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>                f <span class=\"sy0\">=</span> f <span class=\"sy0\">*</span> i<br/>            <span class=\"kw1\">Next</span> i<br/>        <span class=\"kw1\">else</span><br/>            f <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    factorialI <span class=\"sy0\">=</span>f<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> factorialR<span class=\"br0\">(</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>            f <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            f <span class=\"sy0\">=</span>n <span class=\"sy0\">*</span>factorialR<span class=\"br0\">(</span> n <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    factorialR <span class=\"sy0\">=</span>f<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span></pre>"}, {"lang": "Lingo", "loc": 4, "block": "<pre class=\"text highlighted_source\">on fact (n)<br/>  if n&lt;=1 then return 1<br/>  return n * fact(n-1)<br/>end</pre>"}, {"lang": "Lisaac", "loc": 9, "block": "<pre class=\"text highlighted_source\">- factorial x\u00a0: INTEGER\u00a0: INTEGER &lt;- (<br/>  + result\u00a0: INTEGER;<br/>  (x &lt;= 1).if {<br/>    result\u00a0:= 1;<br/>  } else {<br/>    result\u00a0:= x * factorial(x - 1);<br/>  };<br/>  result<br/>);</pre>"}, {"lang": "LiveCode", "loc": 32, "block": "<pre class=\"text highlighted_source\">// recursive<br/>function factorialr n<br/>    if n &lt; 2 then <br/>        return 1<br/>    else<br/>        return n * factorialr(n-1)<br/>    end if<br/>end factorialr<br/>\u00a0<br/>// using accumulator<br/>function factorialacc n acc<br/>    if n = 0 then<br/>        return acc<br/>    else<br/>        return factorialacc(n-1, n * acc)<br/>    end if<br/>end factorialacc<br/>\u00a0<br/>function factorial n<br/>    return factorialacc(n,1)<br/>end factorial<br/>\u00a0<br/>// iterative<br/>function factorialit n<br/>    put 1 into f<br/>    if n &gt; 1 then <br/>        repeat with i = 1 to n<br/>            multiply f by i<br/>        end repeat<br/>    end if<br/>    return f<br/>end factorialit</pre>"}, {"lang": "Logo", "loc": 4, "block": "<pre class=\"text highlighted_source\">to factorial\u00a0:n<br/>  if\u00a0:n &lt; 2 [output 1]<br/>  output\u00a0:n * factorial\u00a0:n-1<br/>end</pre>"}, {"lang": "LOLCODE", "loc": 16, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I Faktorial <span class=\"kw4\">YR</span> Number<br/>  <span class=\"kw2\">BOTH SAEM</span> <span class=\"nu0\">1</span> <span class=\"kw4\">AN</span> <span class=\"kw4\">BIGGR</span> <span class=\"kw2\">OF</span> Number <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <br/>  <span class=\"kw2\">O RLY?</span><br/>   YA RLY<br/>    <span class=\"kw1\">FOUND YR</span> <span class=\"nu0\">1</span><br/>   NO WAI<br/>    <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">PRODUKT</span> <span class=\"kw2\">OF</span> Number <span class=\"kw4\">AN</span> I <span class=\"kw2\">IZ</span> Faktorial <span class=\"kw4\">YR</span> DIFFRENCE <span class=\"kw2\">OF</span> Number <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <span class=\"kw2\">MKAY</span><br/>  OIC<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/><span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> <span class=\"kw3\">LOOP</span> <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> Index WILE <span class=\"kw2\">DIFFRINT</span> Index <span class=\"kw4\">AN</span> <span class=\"nu0\">13</span><br/>  <span class=\"kw1\">VISIBLE</span> Index <span class=\"st0\">\"! = \"</span> I <span class=\"kw2\">IZ</span> Faktorial <span class=\"kw4\">YR</span> Index <span class=\"kw2\">MKAY</span><br/><span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> <span class=\"kw3\">LOOP</span><br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Function factorial (n){<br/>            If n&lt;0 then Error \"Factorial Error!\"<br/>            If n&gt;27 then Error \"Overflow\"<br/>\u00a0<br/>            <a class=\"__cf_email__\" data-cfemail=\"a3ce9e92e3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:While n&gt;1 {m*=n:n--}:=m<br/>      }<br/>      Const Proportional=4<br/>      Const ProportionalLeftJustification=5<br/>      Const NonProportional=0<br/>      Const NonProportionalLeftJustification=1<br/>      For i=1 to 27 <br/>      \\\\ we can print over (erasing line first), without new line at the end<br/>      \\\\ and we can change how numbers apears, and the with of columns<br/>      \\\\ numbers by default have right justification<br/>      \\\\ all $() format have temporary use in this kind of print.<br/>      Print Over $(Proportional),$(\"\\f\\a\\c\\t\\o\\r\\i\\a\\l\\(#\\)\\=\",15), i, $(ProportionalLeftJustification), $(\"#,###\",40), factorial(i)<br/>      Print        \\\\ new line<br/>      Next i<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 3, "block": "<pre class=\"text highlighted_source\">define(`factorial',`ifelse(`$1',0,1,`eval($1*factorial(decr($1)))')')dnl<br/>dnl<br/>factorial(5)</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; 5!;<br/>                                  120<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">factorial[n_Integer]\u00a0:= n*factorial[n-1]<br/>factorial[0] = 1</pre>"}, {"lang": "MATLAB", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">answer = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/factorial.html\"><span class=\"kw2\">factorial</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span></pre>"}, {"lang": "Maude", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fmod FACTORIAL is<br/>\u00a0<br/>\tprotecting INT .<br/>\u00a0<br/>\top undefined\u00a0: -&gt; Int .<br/>\top _!\u00a0: Int -&gt; Int .<br/>\u00a0<br/>\tvar n\u00a0: Int .<br/>\u00a0<br/>\teq 0\u00a0! = 1 .<br/>\teq n\u00a0! = if n &lt; 0 then undefined else n * (sd(n, 1)\u00a0!) fi .<br/>\u00a0<br/>endfm<br/>\u00a0<br/>red 11\u00a0! .<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">n!</pre>"}, {"lang": "MAXScript", "loc": 10, "block": "<pre class=\"text highlighted_source\">fn factorial n =<br/>(<br/>    if n == 0 then return 1<br/>    local fac = 1<br/>    for i in 1 to n do<br/>    (<br/>        fac *= i<br/>    )<br/>    fac<br/>)</pre>"}, {"lang": "Mercury", "loc": 16, "block": "<pre class=\"text highlighted_source\">:- module factorial.<br/>\u00a0<br/>:- interface.<br/>:- import_module integer.<br/>\u00a0<br/>:- func factorial(integer) = integer.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- pragma memo(factorial/1).<br/>\u00a0<br/>factorial(N) =<br/>    (   N =&lt; integer(0)<br/>    -&gt;  integer(1)<br/>   \u00a0;   factorial(N - integer(1)) * N<br/>    ).</pre>"}, {"lang": "MIPS Assembly", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>##################################<br/># Factorial; iterative           #<br/># By Keith Stellyes\u00a0:)           #<br/># Targets Mars implementation    #<br/># August 24, 2016                #<br/>##################################<br/>\u00a0<br/># This example reads an integer from user, stores in register a1<br/># Then, it uses a0 as a multiplier and target, it is set to 1<br/>\u00a0<br/># Pseudocode:<br/># a0 = 1<br/># a1 = read_int_from_user()<br/># while(a1 &gt; 1)<br/># {<br/># a0 = a0*a1<br/># DECREMENT a1<br/># }<br/># print(a0)<br/>\u00a0<br/>.text ### PROGRAM BEGIN ###<br/>\t### GET INTEGER FROM USER ###<br/>\tli $v0, 5 #set syscall arg to READ_INTEGER<br/>\tsyscall #make the syscall<br/>\tmove $a1, $v0 #int from READ_INTEGER is returned in $v0, but we need $v0<br/>\t              #this will be used as a counter<br/>\u00a0<br/>\t### SET $a1 TO INITAL VALUE OF 1 AS MULTIPLIER ###<br/>\tli $a0,1<br/>\u00a0<br/>\t### Multiply our multiplier, $a1 by our counter, $a0 then store in $a1 ###<br/>loop:\tble $a1,1,exit # If the counter is greater than 1, go back to start<br/>\tmul $a0,$a0,$a1 #a1 = a1*a0<br/>\u00a0<br/>\tsubi $a1,$a1,1 # Decrement counter<br/>\u00a0<br/>\tj loop # Go back to start<br/>\u00a0<br/>exit: <br/>\t### PRINT RESULT ###<br/>\tli $v0,1 #set syscall arg to PRINT_INTEGER<br/>\t#NOTE: syscall 1 (PRINT_INTEGER) takes a0 as its argument. Conveniently, that<br/>\t#      is our result. <br/>\tsyscall  #make the syscall<br/>\u00a0<br/>\t#exit<br/>\tli $v0, 10 #set syscall arg to EXIT<br/>\tsyscall #make the syscall<br/>\u00a0</pre>"}, {"lang": "Mirah", "loc": 8, "block": "<pre class=\"text highlighted_source\">def factorial_iterative(n:int)<br/>    2.upto(n-1) do |i|<br/>        n *= i <br/>    end<br/>    n<br/>end<br/>\u00a0<br/>puts factorial_iterative 10</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre>\u0412\u041f\t\u041f0\t1\t\u0418\u041f0\t*\tL0\t03\t\u0421/\u041f\n</pre>"}, {"lang": "ML/I", "loc": 17, "block": "<pre class=\"text highlighted_source\">MCSKIP \"WITH\" NL<br/>\"\" Factorial - iterative<br/>MCSKIP MT,&lt;&gt;<br/>MCINS\u00a0%.<br/>MCDEF FACTORIAL WITHS ()<br/>AS &lt;MCSET T1=%A1.<br/>MCSET T2=1<br/>MCSET T3=1<br/>%L1.MCGO L2 IF T3 GR T1<br/>MCSET T2=T2*T3<br/>MCSET T3=T3+1<br/>MCGO L1<br/>%L2.%T2.&gt;<br/>fact(1) is FACTORIAL(1)<br/>fact(2) is FACTORIAL(2)<br/>fact(3) is FACTORIAL(3)<br/>fact(4) is FACTORIAL(4)</pre>"}, {"lang": "Modula-2", "loc": 26, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Factorial;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Factorial<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">VAR</span> result <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    result <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> n<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        result <span class=\"sy0\">:=</span> result <span class=\"sy0\">*</span> n;<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> result<br/><span class=\"kw1\">END</span> Factorial;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    n <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> n<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span><br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%2c! =\u00a0%7c<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> Factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Factorial.</pre>"}, {"lang": "Modula-3", "loc": 11, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> FactIter<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span><br/>    result <span class=\"sy0\">:=</span> n;<br/>    counter <span class=\"sy0\">:=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> counter <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw1\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      result <span class=\"sy0\">:=</span> result <span class=\"sy0\">*</span> i;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> result;<br/>  <span class=\"kw1\">END</span> FactIter;</pre>"}, {"lang": "MUMPS", "loc": 13, "block": "<pre class=\"text highlighted_source\">factorial(num)\tNew ii,result<br/>\tIf num&lt;0 Quit \"Negative number\"<br/>\tIf num[\".\" Quit \"Not an integer\"<br/>\tSet result=1 For ii=1:1:num Set result=result*ii<br/>\tQuit result<br/>\u00a0<br/>Write $$factorial(0)\u00a0; 1<br/>Write $$factorial(1)\u00a0; 1<br/>Write $$factorial(2)\u00a0; 2<br/>Write $$factorial(3)\u00a0; 6<br/>Write $$factorial(10)\u00a0; 3628800<br/>Write $$factorial(-6)\u00a0; Negative number<br/>Write $$factorial(3.7)\u00a0; Not an integer</pre>"}, {"lang": "MyrtleScript", "loc": 7, "block": "<pre class=\"text highlighted_source\">func factorial args: int a\u00a0: returns: int {<br/>    int factorial = a<br/>    repeat int i = (a - 1)\u00a0: i == 0\u00a0: i-- {<br/>        factorial *= i<br/>    }<br/>    return factorial<br/>}</pre>"}, {"lang": "Neko", "loc": 13, "block": "<pre class=\"text highlighted_source\">var factorial = function(number) {<br/>\tvar i = 1;<br/>\tvar result = 1;<br/>\u00a0<br/>\twhile(i &lt;= number) {<br/>\t\tresult *= i;<br/>\t\ti += 1;<br/>\t}<br/>\u00a0<br/>\treturn result;<br/>};<br/>\u00a0<br/>$print(factorial(10));</pre>"}, {"lang": "Nemerle", "loc": 35, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module Program<br/>{<br/>  Main()\u00a0: void<br/>  {<br/>      WriteLine(\"Factorial of which number?\");<br/>      def number = long.Parse(ReadLine());<br/>      WriteLine(\"Using Fold\u00a0: Factorial of {0} is {1}\", number, FactorialFold(number));<br/>      WriteLine(\"Using Match: Factorial of {0} is {1}\", number, FactorialMatch(number));<br/>      WriteLine(\"Iterative \u00a0: Factorial of {0} is {1}\", number, FactorialIter(number));<br/>  }<br/>\u00a0<br/>  FactorialFold(number\u00a0: long)\u00a0: long<br/>  {<br/>      $[1L..number].FoldLeft(1L, _ * _ )<br/>  }<br/>\u00a0<br/>  FactorialMatch(number\u00a0: long)\u00a0: long<br/>  {<br/>      |0L =&gt; 1L<br/>      |n  =&gt; n * FactorialMatch(n - 1L)<br/>  }<br/>\u00a0<br/>  FactorialIter(number\u00a0: long)\u00a0: long<br/>  {<br/>      mutable accumulator = 1L;<br/>      for (mutable factor = 1L; factor &lt;= number; factor++)<br/>      {<br/>          accumulator *= factor;<br/>      }<br/>      accumulator  //implicit return<br/>  }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 51, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">64</span> <span class=\"co1\">-- switch to exponential format when numbers become larger than 64 digits</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Input a number: \\-'</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">do</span><br/>  n_ = long <span class=\"kw2\">ask</span> <span class=\"co1\">-- Gets the number, must be an integer</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> n_<span class=\"st0\">'! ='</span> factorial<span class=\"br0\">(</span>n_<span class=\"br0\">)</span> <span class=\"st0\">'(using iteration)'</span><br/>  <span class=\"kw1\">say</span> n_<span class=\"st0\">'! ='</span> factorial<span class=\"br0\">(</span>n_, <span class=\"st0\">'r'</span><span class=\"br0\">)</span> <span class=\"st0\">'(using recursion)'</span><br/>\u00a0<br/>  <span class=\"kw3\">catch</span> ex = Exception<br/>    ex.<span class=\"me0\">printStackTrace</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method factorial<span class=\"br0\">(</span>n_ = long, fmethod = <span class=\"st0\">'I'</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx <span class=\"kw2\">signals</span> IllegalArgumentException<br/>\u00a0<br/>  <span class=\"kw1\">if</span> n_ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> -<br/>    <span class=\"kw1\">signal</span> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">'Sorry, but'</span> n_ <span class=\"st0\">'is not a positive integer'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">select</span><br/>    <span class=\"kw3\">when</span> fmethod.<span class=\"kw6\">upper</span> = <span class=\"st0\">'R'</span> <span class=\"kw3\">then</span> -<br/>      fact = factorialRecursive<span class=\"br0\">(</span>n_<span class=\"br0\">)</span><br/>    <span class=\"kw3\">otherwise</span> -<br/>      fact = factorialIterative<span class=\"br0\">(</span>n_<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> fact<br/>\u00a0<br/>method factorialIterative<span class=\"br0\">(</span>n_ = long<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  fact = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">1</span> to n_<br/>    fact = fact <span class=\"sy0\">*</span> i_<br/>    <span class=\"kw3\">end</span> i_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> fact<br/>\u00a0<br/>method factorialRecursive<span class=\"br0\">(</span>n_ = long<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  <span class=\"kw1\">if</span> n_ <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> -<br/>    fact = n_ <span class=\"sy0\">*</span> factorialRecursive<span class=\"br0\">(</span>n_ - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">else</span> -<br/>   fact = <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> fact</pre>"}, {"lang": "newLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exp\"><span class=\"kw1\">exp</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#gammaln\"><span class=\"kw1\">gammaln</span></a> <span class=\"br0\">(</span><span class=\"sy1\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exp\"><span class=\"kw1\">exp</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#gammaln\"><span class=\"kw1\">gammaln</span></a> <span class=\"br0\">(</span><span class=\"sy1\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>factorial <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"nu0\">24</span></pre>"}, {"lang": "Nial", "loc": 1, "block": "<pre class=\"text highlighted_source\">fact is recur [ 0 =, 1 first, pass, product, -1 +]</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import math<br/>let i:int = fac(x)<br/>\u00a0</pre>"}, {"lang": "Niue", "loc": 5, "block": "<pre class=\"text highlighted_source\">[ dup 1 &gt; [ dup 1 - factorial * ] when ] 'factorial\u00a0;<br/>\u00a0<br/>( test )<br/>4 factorial . ( =&gt; 24 )<br/>10 factorial . ( =&gt; 3628800 )</pre>"}, {"lang": "Oberon", "loc": 42, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Factorial;<br/><span class=\"kw1\">IMPORT</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> <br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Iterative<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">,</span> r<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>n &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>    r <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> n <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span> <span class=\"kw1\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      r <span class=\"sy0\">:=</span> r <span class=\"sy0\">*</span> i<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> r<br/>  <span class=\"kw1\">END</span> Iterative;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Recursive<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    r<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>n &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>    r <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">IF</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <br/>      r <span class=\"sy0\">:=</span> n <span class=\"sy0\">*</span> Recursive<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> r<br/>  <span class=\"kw1\">END</span> Recursive;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span> <span class=\"kw1\">DO</span><br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Iterative \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st_h\">'! ='</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Iterative<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">Ln</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span> <span class=\"kw1\">DO</span><br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Recursive \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st_h\">'! ='</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Recursive<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Factorial.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 7, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Fact <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"nu0\">5</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Factorial</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> factorial n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span> n <span class=\"sy0\">*</span> factorial <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 23, "block": "<pre class=\"octave highlighted_source\"><span class=\"co2\">% built in factorial</span><br/><a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%d\\n\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/factorial.html\"><span class=\"kw6\">factorial</span></a><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"co2\">% let's define our recursive...</span><br/><span class=\"kw4\">function</span> <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy3\">=</span> my_fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy3\">=</span> n <span class=\"sy1\">*</span> my_fact<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%d\\n\"</span><span class=\"sy5\">,</span> my_fact<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"co2\">% let's define our iterative</span><br/><span class=\"kw4\">function</span> <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy3\">=</span> iter_fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">:</span>n<br/>    <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/fact.html\"><span class=\"kw6\">fact</span></a> <span class=\"sy1\">*</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%d\\n\"</span><span class=\"sy5\">,</span> iter_fact<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: fact(n)  n ifZero: [ 1 ] else: [ n n 1- fact * ]\u00a0;</pre>"}, {"lang": "Order", "loc": 9, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8fac                     \\<br/>ORDER_PP_FN(8fn(8N,                           \\<br/>                8if(8less_eq(8N, 0),          \\<br/>                    1,                        \\<br/>                    8mul(8N, 8fac(8dec(8N))))))</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span>8to_lit<span class=\"br0\">(</span>8fac<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">// 40320</span></pre>"}, {"lang": "Oz", "loc": 3, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Fac1</span> N<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>FoldL <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 N 1<span class=\"br0\">}</span> Number<span class=\"sy0\">.</span><span class=\"st0\">'*'</span> 1<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">*</span>fact<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Panda", "loc": 5, "block": "<pre class=\"text highlighted_source\">fun fac(n) type integer-&gt;integer<br/>  product{{1..n}}<br/>\u00a0<br/>1..10.fac<br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 9, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">function</span> factorial<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> result<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>   result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"sy3\">*</span> i<span class=\"sy1\">;</span><br/>  factorial <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result<br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Peloton", "loc": 1, "block": "<pre class=\"text highlighted_source\">&lt;@ SAYFCTLIT&gt;5&lt;/@&gt;</pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> factorial<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"re0\">$result</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$result</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># using a .. range</span><br/><span class=\"kw2\">sub</span> factorial <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$r</span> <span class=\"sy0\">*=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> postfix<span class=\"sy0\">:&lt;!&gt;</span> <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">5</span><span class=\"sy0\">!;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">global function factorial(integer n)<br/>atom res = 1<br/>    while n&gt;1 do<br/>        res *= n<br/>        n -= 1<br/>    end while<br/>    return res<br/>end function</pre>"}, {"lang": "PHP", "loc": 14, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"re0\">$factorial</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$factorial</span> <span class=\"sy0\">=</span> <span class=\"re0\">$factorial</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$factorial</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de fact (N)<br/>   (if (=0 N)<br/>      1<br/>      (* N (fact (dec N))) ) )</pre>"}, {"lang": "Piet", "loc": 37, "block": "<pre class=\"text highlighted_source\">push 1<br/>not<br/>in(number)<br/>duplicate <br/>not        // label a<br/>pointer    // pointer 1<br/>duplicate<br/>push 1<br/>subtract<br/>push 1<br/>pointer<br/>push 1<br/>noop<br/>pointer<br/>duplicate  // the next op is back at label a<br/>\u00a0<br/>push 1     // this part continues from pointer 1<br/>noop<br/>push 2     // label b<br/>push 1<br/>rot 1 2<br/>duplicate<br/>not<br/>pointer    // pointer 2<br/>multiply<br/>push 3<br/>pointer<br/>push 3<br/>pointer<br/>push 3<br/>push 3<br/>pointer<br/>pointer    // back at label b<br/>\u00a0<br/>pop        // continues from pointer 2<br/>out(number)<br/>exit</pre>"}, {"lang": "PL/I", "loc": 12, "block": "<pre class=\"pli highlighted_source\">factorial<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> N <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"kw1\">nonassignable</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> F <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> N <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">signal</span> <span class=\"kw1\">error</span><span class=\"sy0\">;</span><br/>   F <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> N<span class=\"sy0\">;</span><br/>      F <span class=\"sy0\">=</span> F <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> factorial<span class=\"sy0\">;</span></pre>"}, {"lang": "PostScript", "loc": 12, "block": "<pre class=\"text highlighted_source\">/fact {<br/>  dup 0 eq    \u00a0% check for the argument being 0<br/>  {<br/>    pop 1     \u00a0% if so, the result is 1<br/>  }<br/>  {<br/>    dup<br/>    1 sub<br/>    fact      \u00a0% call recursively with n - 1<br/>    mul       \u00a0% multiply the result with n<br/>  } ifelse<br/>} def</pre>"}, {"lang": "PowerBASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">function fact1#(n%)<br/>local i%,r#<br/>r#=1<br/>for i%=1 to n%<br/>r#=r#*i%<br/>next<br/>fact1#=r#<br/>end function<br/>\u00a0<br/>function fact2#(n%)<br/>if n%&lt;=2 then fact2#=n% else fact2#=fact2#(n%-1)*n%<br/>end function<br/>\u00a0<br/>for i%=1 to 20<br/>print i%,fact1#(i%),fact2#(i%)<br/>next</pre>"}, {"lang": "PowerShell", "loc": 6, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Factorial <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>Factorial <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Processing", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>int fact(int n){<br/>\tif(n &lt;= 1){<br/>\t\treturn 1;<br/>\t} else{<br/>\t\treturn n*fact(n-1);<br/>\t}<br/>}<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 2, "block": "<pre class=\"prolog highlighted_source\">fact<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> X<span class=\"sy6\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/>fact<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> F<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> fact<span class=\"br0\">(</span>Y<span class=\"sy4\">,</span>Z<span class=\"br0\">)</span><span class=\"sy4\">,</span> F <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Z<span class=\"sy3\">*</span>X<span class=\"sy4\">.</span></pre>"}, {"lang": "Pure", "loc": 3, "block": "<pre class=\"text highlighted_source\">fact n = n*fact (n-1) if n&gt;0;<br/>       = 1 otherwise;<br/>let facts = map fact (1..10); facts;</pre>"}, {"lang": "PureBasic", "loc": 7, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>    f <span class=\"sy0\">=</span> f <span class=\"sy0\">*</span> i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> f<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">factorial</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span></pre>"}, {"lang": "Q", "loc": 1, "block": "<pre class=\"q highlighted_source\">f:<span class=\"br0\">(</span><span class=\"sy0\">*</span>/<span class=\"br0\">)</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw1\">til</span><span class=\"sy0\">@</span></pre>"}, {"lang": "QB64", "loc": 54, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>REDIM fac#(0)<br/>Factorial fac#(), 655, 10, power#<br/>PRINT power#<br/>SUB Factorial (fac#(), n&amp;, numdigits%, power#)<br/>power# = 0<br/>fac#(0) = 1<br/>remain# = 0<br/>stx&amp; = 0<br/>slog# = 0<br/>NumDiv# = 10 ^ numdigits%<br/>FOR fac# = 1 TO n&amp;<br/>    slog# = slog# + LOG(fac#) / LOG(10)<br/>    FOR x&amp; = 0 TO stx&amp;<br/>        fac#(x&amp;) = fac#(x&amp;) * fac# + remain#<br/>        tx# = fac#(x&amp;) MOD NumDiv#<br/>        remain# = (fac#(x&amp;) - tx#) / NumDiv#<br/>        fac#(x&amp;) = tx#<br/>    NEXT<br/>    IF remain# &gt; 0 THEN<br/>        stx&amp; = UBOUND(fac#) + 1<br/>        REDIM _PRESERVE fac#(stx&amp;)<br/>        fac#(stx&amp;) = remain#<br/>        remain# = 0<br/>    END IF<br/>NEXT<br/>\u00a0<br/>scanz&amp; = LBOUND(fac#)<br/>DO<br/>    IF scanz&amp; &lt; UBOUND(fac#) THEN<br/>        IF fac#(scanz&amp;) THEN<br/>            EXIT DO<br/>        ELSE<br/>            scanz&amp; = scanz&amp; + 1<br/>        END IF<br/>    ELSE<br/>        EXIT DO<br/>    END IF<br/>LOOP<br/>\u00a0<br/>FOR x&amp; = UBOUND(fac#) TO scanz&amp; STEP -1<br/>    m$ = LTRIM$(RTRIM$(STR$(fac#(x&amp;))))<br/>    IF x&amp; &lt; UBOUND(fac#) THEN<br/>        WHILE LEN(m$) &lt; numdigits%<br/>            m$ = \"0\" + m$<br/>        WEND<br/>    END IF<br/>    PRINT m$; \" \";<br/>    power# = power# + LEN(m$)<br/>NEXT<br/>power# = power# + (scanz&amp; * numdigits%) - 1<br/>PRINT slog#<br/>END SUB<br/>\u00a0</pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">fact &lt;- function(n) {<br/>  if ( n &lt;= 1 ) 1<br/>  else n * fact(n-1)<br/>}</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">(define (factorial n)<br/>  (if (= 0 n)<br/>      1<br/>      (* n (factorial (- n 1)))))</pre>"}, {"lang": "Rapira", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u0424\u0443\u043d \u0424\u0430\u043a\u0442(n)<br/>  f\u00a0:= 1<br/>  \u0434\u043b\u044f i \u043e\u0442 1 \u0434\u043e n<br/>        f\u00a0:= f * i<br/>  \u043a\u0446<br/>  \u0412\u043e\u0437\u0432\u0440\u0430\u0442 f<br/>\u041a\u043e\u043d \u0424\u0443\u043d</pre>"}, {"lang": "Rascal", "loc": 6, "block": "<pre class=\"text highlighted_source\">public int factorial_iter(int n){<br/>\tresult = 1;<br/>\tfor(i &lt;- [1..n])<br/>\t\tresult *= i;<br/>\treturn result;<br/>}</pre>"}, {"lang": "REBOL", "loc": 55, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Factorial\"<br/>    URL: http://rosettacode.org/wiki/Factorial_function<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Standard recursive implementation.</span><br/>\u00a0<br/>factorial: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t<span class=\"kw2\">either</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span>n <span class=\"sy0\">*</span> factorial n - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Iteration.</span><br/>\u00a0<br/>ifactorial: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\tf: <span class=\"nu0\">1</span><br/>\t<span class=\"kw2\">for</span> i <span class=\"nu0\">2</span> n <span class=\"nu0\">1</span> <span class=\"br0\">[</span>f: f <span class=\"sy0\">*</span> i<span class=\"br0\">]</span><br/>\tf<br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Automatic memoization.</span><br/><span class=\"co1\">; I'm just going to say up front that this is a stunt. However, you've</span><br/><span class=\"co1\">; got to admit it's pretty nifty. Note that the 'memo' function</span><br/><span class=\"co1\">; works with an unlimited number of arguments (although the expected</span><br/><span class=\"co1\">; gains decrease as the argument count increases).</span><br/>\u00a0<br/>memo: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Defines memoizing function -- keeps arguments/results for later use.\"</span><br/>\targs <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Function arguments. Just specify variable names.\"</span><br/>\tbody <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> <span class=\"st0\">\"The body block of the function.\"</span><br/>\t<span class=\"sy0\">/</span>local m-args m-r<br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t<span class=\"kw2\">do</span> <span class=\"kw2\">compose</span><span class=\"sy0\">/</span>deep <span class=\"br0\">[</span><br/>\t\t<span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t\t\t<span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">/</span>dump <span class=\"st0\">\"Dump memory.\"</span><br/>\t\t<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t\t\tm-args: <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw2\">if</span> dump <span class=\"br0\">[</span><span class=\"kw2\">return</span> m-args<span class=\"br0\">]</span><br/>\u00a0<br/>\t\t\t<span class=\"kw2\">if</span> m-r: <span class=\"kw3\">select</span><span class=\"sy0\">/</span>only m-args <span class=\"kw2\">reduce</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">return</span> m-r<span class=\"br0\">]</span><br/>\u00a0<br/>\t\t\tm-r: <span class=\"kw2\">do</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>body<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw3\">append</span> m-args <span class=\"kw2\">reduce</span> <span class=\"br0\">[</span><span class=\"kw2\">reduce</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>args<span class=\"br0\">)</span><span class=\"br0\">]</span> m-r<span class=\"br0\">]</span><br/>\t\t\tm-r<br/>\t\t<span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>mfactorial: memo <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t<span class=\"kw2\">either</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span>n <span class=\"sy0\">*</span> mfactorial n - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Test them on numbers zero to ten.</span><br/>\u00a0<br/><span class=\"kw2\">for</span> i <span class=\"nu0\">0</span> <span class=\"nu0\">10</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"br0\">[</span>i <span class=\"st0\">\":\"</span> factorial i  ifactorial i  mfactorial i<span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">: &lt;factorial&gt; dup 1 = if; dup 1- &lt;factorial&gt; *\u00a0;<br/>: factorial dup 0 = [ 1+ ] [ &lt;factorial&gt; ] if\u00a0;</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  computes  the  factorial of a  non-negative integer.                    */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100000</span>                            <span class=\"coMULTI\">/*100k digits:  handles  N  up to  25k.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n                                      <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> n=<span class=\"st0\">''</span>                   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> er  <span class=\"st0\">'no argument specified.'</span><br/><span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> er  <span class=\"st0\">'too many arguments specified.'</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>n,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> er  <span class=\"st0\">\"argument isn't numeric: \"</span>          n<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>n,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>       <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> er  <span class=\"st0\">\"argument isn't a whole number: \"</span>   n<br/><span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>                    <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> er  <span class=\"st0\">\"argument can't be negative: \"</span>      n<br/>!=<span class=\"nu0\">1</span>                                              <span class=\"coMULTI\">/*define the factorial product (so far)*/</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> n;      \u00a0!=!<span class=\"sy0\">*</span>j                  <span class=\"coMULTI\">/*compute the factorial the hard way.  */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                <span class=\"coMULTI\">/* [\u2191]  where da rubber meets da road. */</span><br/>\u00a0<br/><span class=\"kw1\">say</span> n<span class=\"st0\">'!  is  ['</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span> <span class=\"st0\">\"digits]:\"</span>              <span class=\"coMULTI\">/*display number of digits in factorial*/</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*add some whitespace to the output.   */</span><br/><span class=\"kw1\">say</span>\u00a0!                                            <span class=\"coMULTI\">/*display the factorial product.       */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>er:    <span class=\"kw1\">say</span>;       <span class=\"kw1\">say</span> <span class=\"st0\">'***error***'</span>;      <span class=\"kw1\">say</span>;      <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;      <span class=\"kw1\">say</span>;          <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>give n<br/>x = fact(n)<br/>see n + \" factorial is\u00a0: \" + x<br/>\u00a0<br/>func fact nr if nr = 1 return 1 else return nr * fact(nr-1) ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 39, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Recursive</span><br/><span class=\"kw1\">def</span> factorial_recursive<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  n.<span class=\"me1\">zero</span>?\u00a0? <span class=\"nu0\">1</span>\u00a0: n <span class=\"sy0\">*</span> factorial_recursive<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Tail-recursive</span><br/><span class=\"kw1\">def</span> factorial_tail_recursive<span class=\"br0\">(</span>n, prod = <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  n.<span class=\"me1\">zero</span>?\u00a0? prod\u00a0: factorial_tail_recursive<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, prod <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Iterative with Range#each</span><br/><span class=\"kw1\">def</span> factorial_iterative<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">2</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> n <span class=\"sy0\">*</span>= i <span class=\"br0\">}</span><br/>  n.<span class=\"me1\">zero</span>?\u00a0? <span class=\"nu0\">1</span>\u00a0: n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Iterative with Range#inject</span><br/><span class=\"kw1\">def</span> factorial_inject<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"sy0\">|</span>prod, i<span class=\"sy0\">|</span> prod <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Iterative with Range#reduce, requires Ruby 1.8.7</span><br/><span class=\"kw1\">def</span> factorial_reduce<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,\u00a0:<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'benchmark'</span><br/>\u00a0<br/>n = <span class=\"nu0\">400</span><br/>m = <span class=\"nu0\">10000</span><br/>\u00a0<br/><span class=\"kw4\">Benchmark</span>.<span class=\"me1\">bm</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'recursive:'</span><span class=\"br0\">)</span>       <span class=\"br0\">{</span>m.<span class=\"me1\">times</span> <span class=\"br0\">{</span>factorial_recursive<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'tail recursive:'</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span>m.<span class=\"me1\">times</span> <span class=\"br0\">{</span>factorial_tail_recursive<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'iterative:'</span><span class=\"br0\">)</span>       <span class=\"br0\">{</span>m.<span class=\"me1\">times</span> <span class=\"br0\">{</span>factorial_iterative<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'inject:'</span><span class=\"br0\">)</span>          <span class=\"br0\">{</span>m.<span class=\"me1\">times</span> <span class=\"br0\">{</span>factorial_inject<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'reduce:'</span><span class=\"br0\">)</span>          <span class=\"br0\">{</span>m.<span class=\"me1\">times</span> <span class=\"br0\">{</span>factorial_reduce<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">for i = 0 to 100<br/>   print \" fctrI(\";right$(\"00\";str$(i),2); \") = \"; fctrI(i)<br/>   print \" fctrR(\";right$(\"00\";str$(i),2); \") = \"; fctrR(i)<br/>next i<br/>end<br/>\u00a0<br/>function fctrI(n)<br/>fctrI = 1<br/> if n &gt;1 then<br/>  for i = 2 To n<br/>    fctrI = fctrI * i<br/>  next i<br/> end if<br/>end function<br/>\u00a0<br/>function fctrR(n)<br/>fctrR = 1<br/>if n &gt; 1 then fctrR = n * fctrR(n -1)<br/>end function</pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">fn factorial_recursive (n: u64) -&gt; u64 {<br/>    match n {<br/>        0 =&gt; 1,<br/>        _ =&gt; n * factorial_recursive(n-1)<br/>    }<br/>}<br/>\u00a0<br/>fn factorial_iterative(n: u64) -&gt; u64 {<br/>    (1..n+1).fold(1, |p, n| p*n)<br/>}<br/>\u00a0<br/>fn main () {<br/>    for i in 1..10 {<br/>        println!(\"{}\", factorial_recursive(i))<br/>    }<br/>    for i in 1..10 {<br/>        println!(\"{}\", factorial_iterative(i))<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "SASL", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fac 4<br/>where fac 0 = 1<br/>      fac n = n * fac (n - 1)<br/>?<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 20, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  -- recursive<br/>  fact(a: INTI):INTI is<br/>    if a &lt; 1.inti then return 1.inti; end;<br/>    return a * fact(a - 1.inti);<br/>  end;<br/>\u00a0<br/>  -- iterative<br/>  fact_iter(a:INTI):INTI is<br/>    s\u00a0::= 1.inti;<br/>    loop s\u00a0:= s * a.downto!(1.inti); end;<br/>    return s;<br/>  end;<br/>\u00a0<br/>  main is<br/>    a\u00a0:INTI\u00a0:= 10.inti;<br/>    #OUT + fact(a) + \" = \" + fact_iter(a) + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factorial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> res <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to n<span class=\"br0\">)</span><br/>    res <span class=\"sy0\">*=</span>i <br/>  res<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 4, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"nu0\">1</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scilab", "loc": 1, "block": "<pre class=\"scilab highlighted_source\">answer <span class=\"sy0\">=</span> <a href=\"http://www.scilab.org/product/dic-mat-sci/M2SCI_doc.htm\"><span class=\"kw3\">factorial</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 10, "block": "<pre class=\"text highlighted_source\">const func bigInteger: factorial (in bigInteger: n) is func<br/>  result<br/>    var bigInteger: fact is 1_;<br/>  local<br/>    var bigInteger: i is 0_;<br/>  begin<br/>    for i range 1_ to n do<br/>      fact *:= i;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Self", "loc": 1, "block": "<pre class=\"text highlighted_source\">n factorial</pre>"}, {"lang": "SequenceL", "loc": 1, "block": "<pre class=\"text highlighted_source\">factorial(n)\u00a0:= product(1 ... n);</pre>"}, {"lang": "SETL", "loc": 17, "block": "<pre class=\"text highlighted_source\">$ Recursive<br/>proc fact(n);<br/>    if (n &lt; 2) then<br/>        return 1;<br/>    else<br/>        return n * fact(n - 1);<br/>    end if;<br/>end proc;<br/>\u00a0<br/>$ Iterative<br/>proc factorial(n);<br/>    v\u00a0:= 1;<br/>    for i in {2..n} loop<br/>        v *:= i;<br/>    end loop;<br/>    return v;<br/>end proc;</pre>"}, {"lang": "Shen", "loc": 3, "block": "<pre class=\"text highlighted_source\">(define factorial<br/>    0 -&gt; 1<br/>    X -&gt; (* X (factorial (- X 1))))</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">func factorial_recursive<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n == <span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> __FUNC__<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 15, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">begin</span><br/>    <span class=\"kw4\">integer</span> <span class=\"kw1\">procedure</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">integer</span> n<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">begin</span><br/>        <span class=\"kw4\">integer</span> fact<span class=\"sy1\">,</span> i<span class=\"sy1\">;</span><br/>        fact <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> step <span class=\"nu0\">1</span> <span class=\"kw1\">until</span> n <span class=\"kw1\">do</span><br/>            fact <span class=\"sy1\">:</span><span class=\"sy3\">=</span> fact <span class=\"sy3\">*</span> i<span class=\"sy1\">;</span><br/>        factorial <span class=\"sy1\">:</span><span class=\"sy3\">=</span> fact<br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">integer</span> f<span class=\"sy1\">;</span> outtext<span class=\"br0\">(</span>\"factorials<span class=\"sy1\">:</span>\"<span class=\"br0\">)</span><span class=\"sy1\">;</span> outimage<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> f <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>        outint<span class=\"br0\">(</span>f<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> outint<span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> outimage<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Sisal", "loc": 10, "block": "<pre class=\"text highlighted_source\">define main<br/>\u00a0<br/>function main(x\u00a0: integer returns integer)<br/>\u00a0<br/>  for a in 1, x<br/>    returns<br/>      value of product a<br/>  end for<br/>\u00a0<br/>end function</pre>"}, {"lang": "Slate", "loc": 8, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"096749\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Integer traits) factorial<br/>\"The standard recursive definition.\"<br/>[<br/>  n isNegative ifTrue: [error: 'Negative inputs to factorial are invalid.'].<br/>  n &lt;= 1<br/>    ifTrue: [1]<br/>    ifFalse: [n * ((n - 1) factorial)]<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 13, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Number</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">my_factorial</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">self</span> &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span> ^<span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>               ifFalse: <span class=\"br0\">[</span> |<span class=\"re3\">c</span>|<br/>                 <span class=\"re6\">c</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>                 <span class=\"re5\">2</span> to: <span class=\"kw1\">self</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | c add: <span class=\"re5\">i</span> <span class=\"br0\">]</span>.<br/>\t\t ^ <span class=\"br0\">(</span><span class=\"re5\">c</span> fold: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> | a * <span class=\"re5\">b</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>               <span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">7</span> factorial printNl.<br/><span class=\"re5\">7</span> my_factorial printNl.</pre>"}, {"lang": "SNOBOL4", "loc": 4, "block": "<pre class=\"text highlighted_source\">        define('rfact(n)')\u00a0:(rfact_end)<br/>rfact   rfact = le(n,0) 1\u00a0:s(return)<br/>        rfact = n * rfact(n - 1)\u00a0:(return)<br/>rfact_end</pre>"}, {"lang": "SPL", "loc": 4, "block": "<pre class=\"text highlighted_source\">fact(n)=<br/> \u00a0? n!&gt;1, &lt;=1<br/>  &lt;= n*fact(n-1)<br/>.</pre>"}, {"lang": "SSEM", "loc": 22, "block": "<pre class=\"text highlighted_source\">11100000000000100000000000000000   0. -7 to c<br/>10101000000000010000000000000000   1. Sub. 21<br/>10100000000001100000000000000000   2. c to 5<br/>10100000000000100000000000000000   3. -5 to c<br/>10100000000001100000000000000000   4. c to 5<br/>00000000000000000000000000000000   5. generated at run time<br/>00000000000001110000000000000000   6. Stop<br/>00010000000000100000000000000000   7. -8 to c<br/>11111111111111111111111111111111   8. -1<br/>11111111111111111111111111111111   9. -1<br/>01111111111111111111111111111111  10. -2<br/>01011111111111111111111111111111  11. -6<br/>00010111111111111111111111111111  12. -24<br/>00010001111111111111111111111111  13. -120<br/>00001100101111111111111111111111  14. -720<br/>00001010001101111111111111111111  15. -5040<br/>00000001010001101111111111111111  16. -40320<br/>00000001011011100101111111111111  17. -362880<br/>00000000100001010001001111111111  18. -3628800<br/>00000000110101110111100110111111  19. -39916800<br/>00000000001000001100111011000111  20. -479001600<br/>01010000000000000000000000000000  21. 10</pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">fun factorial n =<br/>  if n &lt;= 0 then 1<br/>  else n * factorial (n-1)</pre>"}, {"lang": "Stata", "loc": 15, "block": "<pre class=\"text highlighted_source\">mata<br/>real scalar function fact1(real scalar n) {<br/>\tif (n&lt;2) return(1)<br/>\telse return(fact1(n-1)*n)<br/>}<br/>\u00a0<br/>real scalar function fact2(real scalar n) {<br/>\ta=1<br/>\tfor (i=2;i&lt;=n;i++) a=a*i<br/>\treturn(a)<br/>}<br/>\u00a0<br/>printf(\"%f\\n\",fact1(8))<br/>printf(\"%f\\n\",fact2(8))<br/>printf(\"%f\\n\",factorial(8))</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func factorial(_ n: Int) -&gt; Int {<br/>\treturn n &lt; 2\u00a0? 1\u00a0: (2...n).reduce(1, *)<br/>}</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> ifact n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> sum <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">10\u2192N<br/>N! \t\t\t---&gt; 362880<br/>prod(seq(I,I,1,N)) \t---&gt; 362880</pre>"}, {"lang": "TI-89 BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">factorial(x)<br/>Func<br/>  Return \u03a0(y,y,1,x)<br/>EndFunc</pre>"}, {"lang": "TorqueScript", "loc": 8, "block": "<pre class=\"text highlighted_source\">function Factorial(%num)<br/>{<br/>    if(%num &lt; 2)<br/>        return 1;<br/>    for(%a =\u00a0%num-1;\u00a0%a &gt; 1;\u00a0%a--)<br/>       \u00a0%num *=\u00a0%a;<br/>    return\u00a0%num;<br/>}</pre>"}, {"lang": "TransFORTH", "loc": 4, "block": "<pre class=\"text highlighted_source\">: FACTORIAL<br/>1 SWAP<br/>1 + 1 DO<br/>I * LOOP\u00a0;</pre>"}, {"lang": "TUSCRIPT", "loc": 16, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>LOOP num=-1,12<br/> IF (num==0,1) THEN<br/>  f=1<br/> ELSEIF (num&lt;0) THEN<br/>  PRINT num,\" is negative number\"<br/>  CYCLE<br/> ELSE<br/>  f=VALUE(num)<br/>  LOOP n=#num,2,-1<br/>   f=f*(n-1)<br/>  ENDLOOP<br/> ENDIF<br/>formatnum=CENTER(num,+2,\" \")<br/>PRINT \"factorial of \",formatnum,\" = \",f<br/>ENDLOOP</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">$ txr -p '(n-perm-k 10 10)'<br/>3628800</pre>"}, {"lang": "UNIX Shell", "loc": 7, "block": "<pre class=\"bash highlighted_source\">factorial<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"$1\"</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw3\">test</span> <span class=\"st0\">\"$1\"</span> <span class=\"re5\">-lt</span> <span class=\"nu0\">2</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">set</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es5\">`expr \"$1\" - 1`</span>\"</span> <span class=\"st0\">\"<span class=\"es5\">`expr \"$2\" \\* \"$1\"`</span>\"</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"$2\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursa", "loc": 10, "block": "<pre class=\"text highlighted_source\">def factorial (int n)<br/>\tdecl int result<br/>\tset result 1<br/>\tdecl int i<br/>\tfor (set i 1) (&lt; i (+ n 1)) (inc i)<br/>\t\tset result (* result i)<br/>\tend<br/>\treturn result<br/>end<br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>good_factorial   = ~&amp;?\\1! product:-1^lrtPC/~&amp; iota<br/>better_factorial = ~&amp;?\\1! ^T(~&amp;lSL,@rS product:-1)+ ~&amp;Z-~^*lrtPC/~&amp; iota</pre>"}, {"lang": "Verbexx", "loc": 77, "block": "<pre class=\"text highlighted_source\">// ----------------<br/>// recursive method  (requires INTV_T input parm)<br/>// ----------------<br/>\u00a0<br/>fact_r @FN [n] <br/>{  <br/>    @CASE<br/>      when:(n &lt;  0iv) {-1iv                 }<br/>      when:(n == 0iv) { 1iv                 } <br/>      else:           { n * (@fact_r n-1iv) } <br/>};<br/>\u00a0<br/>\u00a0<br/>// ----------------<br/>// iterative method  (requires INTV_T input parm) <br/>// ----------------<br/>\u00a0<br/>fact_i @FN [n]<br/>{<br/>    @CASE <br/>      when:(n &lt;  0iv) {-1iv } <br/>      when:(n == 0iv) { 1iv }<br/>      else:           {<br/>                        @VAR i fact = 1iv 1iv;<br/>                        @LOOP while:(i &lt;= n) { fact *= i++ };<br/>                      }<br/>};<br/>\u00a0<br/>\u00a0<br/>// ------------------<br/>// Display factorials<br/>// ------------------<br/>\u00a0<br/>@VAR i = -1iv; <br/>@LOOP times:15<br/>{<br/>     @SAY \u00abrecursive \u00a0\u00bb i \u00ab! =\u00a0\u00bb (@fact_r i) between:\"\";   <br/>     @SAY \u00abiterative \u00a0\u00bb i \u00ab! =\u00a0\u00bb (@fact_i i) between:\"\";  <br/>\u00a0<br/>     i = 5iv * i / 4iv + 1iv;<br/>}; <br/>\u00a0<br/>\u00a0<br/>/]========================================================================================= <br/>\u00a0<br/>Output:<br/>\u00a0<br/>recursive  -1! = -1<br/>iterative  -1! = -1<br/>recursive  0! = 1<br/>iterative  0! = 1<br/>recursive  1! = 1<br/>iterative  1! = 1<br/>recursive  2! = 2<br/>iterative  2! = 2<br/>recursive  3! = 6<br/>iterative  3! = 6<br/>recursive  4! = 24<br/>iterative  4! = 24<br/>recursive  6! = 720<br/>iterative  6! = 720<br/>recursive  8! = 40320<br/>iterative  8! = 40320<br/>recursive  11! = 39916800<br/>iterative  11! = 39916800<br/>recursive  14! = 87178291200<br/>iterative  14! = 87178291200<br/>recursive  18! = 6402373705728000<br/>iterative  18! = 6402373705728000<br/>recursive  23! = 25852016738884976640000<br/>iterative  23! = 25852016738884976640000<br/>recursive  29! = 8841761993739701954543616000000<br/>iterative  29! = 8841761993739701954543616000000<br/>recursive  37! = 13763753091226345046315979581580902400000000<br/>iterative  37! = 13763753091226345046315979581580902400000000<br/>recursive  47! = 258623241511168180642964355153611979969197632389120000000000<br/>iterative  47! = 258623241511168180642964355153611979969197632389120000000000</pre>"}, {"lang": "Vim Script", "loc": 7, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw1\">function</span><span class=\"sy0\">!</span> Factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> a<span class=\"sy0\">:</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">:</span>n <span class=\"sy0\">*</span> Factorial<span class=\"br0\">(</span>a<span class=\"sy0\">:</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">endif</span><br/>endfunction</pre>"}, {"lang": "VBA", "loc": 28, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 17<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Factorial \"</span> &amp; i &amp; <span class=\"st0\">\" , recursive\u00a0: \"</span> &amp; FactRec(i) &amp; <span class=\"st0\">\", iterative\u00a0: \"</span> &amp; FactIter(i)<br/><span class=\"kw3\">Next</span><br/>Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Factorial 120, recursive\u00a0: \"</span> &amp; FactRec(120) &amp; <span class=\"st0\">\", iterative\u00a0: \"</span> &amp; FactIter(120)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> FactRec(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw3\">If</span> Nb &gt; 170 <span class=\"kw3\">Or</span> Nb &lt; 0 <span class=\"kw3\">Then</span> FactRec = 0: <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>    <span class=\"kw3\">If</span> Nb = 1 <span class=\"kw3\">Or</span> Nb = 0 <span class=\"kw3\">Then</span><br/>        FactRec = 1<br/>    <span class=\"kw3\">Else</span><br/>        FactRec = Nb * FactRec(Nb - 1)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> FactIter(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/><span class=\"kw3\">If</span> Nb &gt; 170 <span class=\"kw3\">Or</span> Nb &lt; 0 <span class=\"kw3\">Then</span> FactIter = 0: <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, F<br/>    F = 1<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Nb<br/>        F = F * i<br/>    <span class=\"kw3\">Next</span> i<br/>    FactIter = F<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 41, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">Dim</span> lookupTable(170), returnTable(170), currentPosition, <span class=\"kw4\">input</span><br/>currentPosition = 0<br/>\u00a0<br/><span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> <span class=\"kw5\">True</span><br/>\t<span class=\"kw4\">input</span> = InputBox(<span class=\"st0\">\"Please type a number (-1 to quit):\"</span>)<br/>\tMsgBox <span class=\"st0\">\"The factorial of \"</span> &amp; <span class=\"kw4\">input</span> &amp; <span class=\"st0\">\" is \"</span> &amp; factorial(CDbl(<span class=\"kw4\">input</span>))<br/><span class=\"kw3\">Loop</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> factorial (x)<br/>\t<span class=\"kw3\">If</span> x = -1 <span class=\"kw3\">Then</span><br/>\t\tWScript.Quit 0<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw4\">Dim</span> temp<br/>\ttemp = lookup(x)<br/>\t<span class=\"kw3\">If</span> x &lt;= 1 <span class=\"kw3\">Then</span><br/>\t\tfactorial = 1<br/>\t<span class=\"kw3\">ElseIf</span> temp &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>\t\tfactorial = temp<br/>\t<span class=\"kw3\">Else</span><br/>\t\ttemp = factorial(x - 1) * x<br/>\t\tstore x, temp<br/>\t\tfactorial = temp<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> lookup (x)<br/>\t<span class=\"kw4\">Dim</span> i<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> currentPosition - 1<br/>\t\t<span class=\"kw3\">If</span> lookupTable(i) = x <span class=\"kw3\">Then</span><br/>\t\t\tlookup = returnTable(i)<br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tlookup = 0<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> store (x, y)<br/>\tlookupTable(currentPosition) = x<br/>\treturnTable(currentPosition) = y<br/>\tcurrentPosition = currentPosition + 1<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VHDL", "loc": 74, "block": "<pre class=\"vhdl highlighted_source\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">ALL</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">numeric_std</span>.<span class=\"kw1\">ALL</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">ENTITY</span> Factorial <span class=\"kw1\">IS</span><br/>\t<span class=\"kw1\">GENERIC</span> <span class=\"br0\">(</span><br/>\t\t\tNbin <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- number of bit to input number </span><br/>\t\t\tNbou <span class=\"sy0\">:</span> <span class=\"kw2\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- number of bit to output factorial</span><br/>\u00a0<br/>\t<span class=\"kw1\">PORT</span> <span class=\"br0\">(</span><br/>\t\tclk <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- clock of circuit</span><br/>\t\tsr  <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">-- set and reset  </span><br/>\t\tN   <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span>Nbin<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- max number </span><br/>\t    Fn  <span class=\"sy0\">:</span> <span class=\"kw1\">OUT</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span>Nbou<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">-- factorial of \"n\"</span><br/>\u00a0<br/><span class=\"kw1\">END</span> Factorial <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">ARCHITECTURE</span> Behavior <span class=\"kw1\">OF</span> Factorial <span class=\"kw1\">IS</span> <br/><span class=\"co1\">---------------------- Program Multiplication -------------------------------- </span><br/>\t<span class=\"kw1\">FUNCTION</span> Mult <span class=\"br0\">(</span> <span class=\"kw1\">CONSTANT</span> MFa <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">CONSTANT</span> MI   <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"kw1\">IS</span> \t\t\t <br/>\t<span class=\"kw1\">VARIABLE</span> Z <span class=\"sy0\">:</span> <span class=\"kw2\">UNSIGNED</span><span class=\"br0\">(</span>MFa'<span class=\"kw1\">RANGE</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">VARIABLE</span> U <span class=\"sy0\">:</span> <span class=\"kw2\">UNSIGNED</span><span class=\"br0\">(</span>MI'<span class=\"kw1\">RANGE</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\tZ <span class=\"sy0\">:=</span> TO_UNSIGNED<span class=\"br0\">(</span><span class=\"nu0\">0</span>, MFa<span class=\"re2\">'LENGTH</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- to obtain the multiplication</span><br/>\tU <span class=\"sy0\">:=</span> MI <span class=\"sy0\">;</span> <span class=\"co1\">-- regressive counter </span><br/>\t\t<span class=\"kw1\">LOOP</span> <br/>\t\t\tZ <span class=\"sy0\">:=</span> Z <span class=\"sy0\">+</span> MFa <span class=\"sy0\">;</span> <span class=\"co1\">-- make multiplication</span><br/>\t\t\tU <span class=\"sy0\">:=</span> U <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">;</span> <br/>\t\t\t<span class=\"kw1\">EXIT</span> <span class=\"kw1\">WHEN</span> U <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">END</span> <span class=\"kw1\">LOOP</span> <span class=\"sy0\">;</span> <br/>\t\t<span class=\"kw1\">RETURN</span> Z <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">END</span> Mult <span class=\"sy0\">;</span> <br/><span class=\"co1\">-------------------Program Factorial ---------------------------------------</span><br/>\t<span class=\"kw1\">FUNCTION</span> Fact <span class=\"br0\">(</span><span class=\"kw1\">CONSTANT</span> Nx <span class=\"sy0\">:</span> <span class=\"kw1\">IN</span> <span class=\"kw2\">NATURAL</span> <span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">UNSIGNED</span> <span class=\"kw1\">IS</span> <br/>\t<span class=\"kw1\">VARIABLE</span> C  <span class=\"sy0\">:</span> <span class=\"kw2\">NATURAL</span> <span class=\"kw1\">RANGE</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>Nbin<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">VARIABLE</span> I  <span class=\"sy0\">:</span> <span class=\"kw2\">UNSIGNED</span><span class=\"br0\">(</span>Nbin<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">VARIABLE</span> Fa <span class=\"sy0\">:</span> <span class=\"kw2\">UNSIGNED</span><span class=\"br0\">(</span>Nbou<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">BEGIN</span> <br/>\t\tC <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- counter </span><br/>\t\tI <span class=\"sy0\">:=</span>  TO_UNSIGNED<span class=\"br0\">(</span><span class=\"nu0\">1</span>, Nbin<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\t\tFa <span class=\"sy0\">:=</span> TO_UNSIGNED<span class=\"br0\">(</span><span class=\"nu0\">1</span>, Nbou<span class=\"br0\">)</span> <span class=\"sy0\">;</span>\t<br/>\t\t<span class=\"kw1\">LOOP</span><br/>\t\t\t<span class=\"kw1\">EXIT</span> <span class=\"kw1\">WHEN</span> C <span class=\"sy0\">=</span> Nx <span class=\"sy0\">;</span> <span class=\"co1\">-- end loop </span><br/>\t\t\tC <span class=\"sy0\">:=</span> C <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">;</span>  <span class=\"co1\">-- progressive couter </span><br/>\t\t\tFa <span class=\"sy0\">:=</span> Mult <span class=\"br0\">(</span>Fa , I <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">-- call function to make a multiplication </span><br/>\t\t\tI <span class=\"sy0\">:=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">;</span> <span class=\"co1\">-- </span><br/>\t\t<span class=\"kw1\">END</span> <span class=\"kw1\">LOOP</span> <span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">RETURN</span> Fa <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">END</span> Fact <span class=\"sy0\">;</span><br/><span class=\"co1\">--------------------- Program TO Call Factorial Function ------------------------------------------------------</span><br/>\t<span class=\"kw1\">TYPE</span> Table <span class=\"kw1\">IS</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>Nbin<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span> <span class=\"kw2\">UNSIGNED</span><span class=\"br0\">(</span>Nbou<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DOWNTO</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">FUNCTION</span> Call_Fact <span class=\"kw1\">RETURN</span> Table <span class=\"kw1\">IS</span><br/>\t<span class=\"kw1\">VARIABLE</span> Fc <span class=\"sy0\">:</span> Table <span class=\"sy0\">;</span> <br/>\t<span class=\"kw1\">BEGIN</span> <br/>\t\t<span class=\"kw1\">FOR</span> c <span class=\"kw1\">IN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span>Nbin<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">LOOP</span><br/>\t\t\tFc<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> Fact<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">;</span>\t\t<br/>\t\t<span class=\"kw1\">END</span> <span class=\"kw1\">LOOP</span> <span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">RETURN</span> Fc <span class=\"sy0\">;</span> <br/>\t<span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> Call_Fact<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">CONSTANT</span> Result <span class=\"sy0\">:</span> Table <span class=\"sy0\">:=</span> Call_Fact <span class=\"sy0\">;</span><br/> <span class=\"co1\">------------------------------------------------------------------------------------------------------------</span><br/><span class=\"kw1\">SIGNAL</span> Nin <span class=\"sy0\">:</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span>N'<span class=\"kw1\">RANGE</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"kw1\">BEGIN</span>    <span class=\"co1\">-- start of architecture</span><br/>\u00a0<br/>\u00a0<br/>Nin <span class=\"sy0\">&lt;=</span> N               <span class=\"kw1\">WHEN</span> RISING_EDGE<span class=\"br0\">(</span>clk<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> sr <span class=\"sy0\">=</span> <span class=\"st0\">\"10\"</span> <span class=\"kw1\">ELSE</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">OTHERS</span> <span class=\"sy0\">=&gt;</span> '<span class=\"nu0\">0</span>'<span class=\"br0\">)</span> <span class=\"kw1\">WHEN</span> RISING_EDGE<span class=\"br0\">(</span>clk<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> sr <span class=\"sy0\">=</span> <span class=\"st0\">\"01\"</span> <span class=\"kw1\">ELSE</span><br/>\t   <span class=\"kw1\">UNAFFECTED</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Fn <span class=\"sy0\">&lt;=</span> <span class=\"kw2\">STD_LOGIC_VECTOR</span><span class=\"br0\">(</span>Result<span class=\"br0\">(</span>TO_INTEGER<span class=\"br0\">(</span><span class=\"kw2\">UNSIGNED</span><span class=\"br0\">(</span>Nin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">WHEN</span> RISING_EDGE<span class=\"br0\">(</span>clk<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">END</span> Behavior <span class=\"sy0\">;</span></pre>"}, {"lang": "Wart", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>fact n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>n * <span class=\"br0\">(</span>fact n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "WDTE", "loc": 4, "block": "<pre class=\"text highlighted_source\">let\u00a0! n =&gt; switch n {<br/>  == 0 =&gt; 1;<br/>  default =&gt; - n 1 -&gt;\u00a0! -&gt; * n;<br/>};</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@fac 10</pre>"}, {"lang": "Wrapl", "loc": 1, "block": "<pre class=\"text highlighted_source\">DEF fac(n) n &lt;= 1 | PROD 1:to(n);</pre>"}, {"lang": "x86 Assembly", "loc": 11, "block": "<pre class=\"asm highlighted_source\"><span class=\"kw5\">global</span> factorial<br/><span class=\"kw5\">section</span> <span class=\"kw5\">.text</span><br/>\u00a0<br/><span class=\"co1\">; Input in ECX register (greater than 0!)</span><br/><span class=\"co1\">; Output in EAX register</span><br/>factorial<span class=\"sy1\">:</span><br/>  <span class=\"kw1\">mov</span>   <span class=\"kw4\">eax</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">.</span>factor<span class=\"sy1\">:</span><br/>  <span class=\"kw1\">mul</span>   <span class=\"kw4\">ecx</span><br/>  <span class=\"kw1\">loop</span>  <span class=\"sy1\">.</span>factor<br/>  <span class=\"kw1\">ret</span></pre>"}, {"lang": "XL", "loc": 2, "block": "<pre class=\"text highlighted_source\">0! -&gt; 1<br/>N! -&gt; N * (N-1)!</pre>"}, {"lang": "XLISP", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factorial <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">nil</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"nu0\">1</span><br/>\t\t\t<span class=\"br0\">(</span>* x <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span>- x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 11, "block": "<pre class=\"text highlighted_source\">func FactIter(N);       \\Factorial of N using iterative method<br/>int N;                  \\range: 0..12<br/>int F, I;<br/>[F:= 1;<br/>for I:= 2 to N do F:= F*I;<br/>return F;<br/>];<br/>\u00a0<br/>func FactRecur(N);      \\Factorial of N using recursive method<br/>int N;                  \\range: 0..12<br/>return if N&lt;2 then 1 else N*FactRecur(N-1);</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn fact(n){[2..n].reduce('*,1)}<br/>fcn factTail(n,N=1) {  // tail recursion<br/>   if (n == 0) return(N);<br/>   return(self.fcn(n-1,n*N));<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 9, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> x=<span class=\"nu0\">5</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"5! = \"</span>;r<br/><span class=\"nu0\">999</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM *************</span><br/><span class=\"nu0\">1001</span> <span class=\"co3\">REM * FACTORIAL *</span><br/><span class=\"nu0\">1002</span> <span class=\"co3\">REM *************</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> r=<span class=\"nu0\">1</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">IF</span> x&lt;<span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1030</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> x: <span class=\"kw1\">LET</span> r=r*i: <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1040</span> <span class=\"kw1\">RETURN</span> </pre>"}]}