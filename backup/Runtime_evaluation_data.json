{"task": "Runtime_evaluation", "blocks": [{"lang": "ALGOL 68", "loc": 1, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw22\">print</span><span class=\"br0\">(</span>evaluate<span class=\"br0\">(</span><span class=\"st0\">\"4.0*arctan(1.0)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 32, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; requires AutoHotkey_H or AutoHotkey.dll</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% eval<span class=\"br0\">(</span><span class=\"st0\">\"3 + 4\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% eval<span class=\"br0\">(</span><span class=\"st0\">\"4 + 4\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>\u00a0<br/>eval<span class=\"br0\">(</span>expression<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>global script<br/>script <span class=\"sy0\">=</span> <br/><span class=\"br0\">(</span><br/>    expression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">%expression%</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><br/>renameFunction<span class=\"br0\">(</span><span class=\"st0\">\"expression\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>  <span class=\"co1\">; remove any previous expressions</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a> load <span class=\"co1\">; cannot use addScript inside a function yet</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">exp</span></a> <span class=\"sy0\">:=</span> <span class=\"st0\">\"expression\"</span><br/><span class=\"kw1\">return</span> <span class=\"re0\">%exp%</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">load:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_AhkPath\"><span class=\"kw2\">A_AhkPath</span></a> <span class=\"st0\">\"\\addScript\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span>script<span class=\"sy0\">,</span><span class=\"st0\">\"Uchar\"</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Cdecl UInt\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>renameFunction<span class=\"br0\">(</span>funcName<span class=\"sy0\">,</span> newname<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>static         <br/>x<span class=\"re0\">%newname%</span> <span class=\"sy0\">:=</span> newname   <span class=\"co1\">; store newname in a static variable so its memory is not freed</span><br/>strput<span class=\"br0\">(</span>newname<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>x<span class=\"re0\">%newname%</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">strlen</span></a><span class=\"br0\">(</span>newname<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> fnp <span class=\"sy0\">:=</span> FindFunc<span class=\"br0\">(</span>funcName<span class=\"br0\">)</span><br/>  <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">numput</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>x<span class=\"re0\">%newname%</span><span class=\"sy0\">,</span> fnp<span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"uint\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre>100 DEF PROC graph f$\n110   LOCAL x,y\n120   PLOT 0,90\n130   FOR x = -2 TO 2 STEP 0.02\n140     LET y = VAL(f$)\n150     DRAW TO x*50+100, y*50+90\n160   NEXT x\n170 END PROC\n</pre>"}, {"lang": "BBC BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">      expr$ = \"PI^2 + 1\"<br/>      PRINT EVAL(expr$)</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {5 5 .+}e!<br/>10<br/>\u00a0</pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 1, "block": "<pre>USER&gt;Set cmd=\"Write \"\"Hello, World!\"\"\"\nUSER&gt;Xecute cmd\nHello, World!\n\nUSER&gt;Set fnc=\"(num1, num2) Set res=num1+num2 Quit res\"\nUSER&gt;Write $Xecute(fnc, 2, 3)\n5\n</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">eval</span> '<span class=\"br0\">(</span>+ <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; returns 9</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!run-blob\u00a0!compile-string \"(fake filename)\" \"!print \\qHello world\\q\"</pre>"}, {"lang": "E", "loc": 2, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> e<span class=\"st0\">`1 + 1`</span>.<span class=\"me1\">eval</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/safeScope\"><span class=\"kw6\">safeScope</span></a><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 2</span></pre>"}, {"lang": "EchoLisp", "loc": 8, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>eval <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">42</span><br/><span class=\"br0\">(</span>eval '<span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; quoted argument</span><br/>   \u2192 <span class=\"nu0\">42</span><br/><span class=\"br0\">(</span>eval <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"st0\">\"(* 6 7)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">42</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 6, "block": "<pre class=\"text highlighted_source\">import extensions'scripting.<br/>\u00a0<br/>program =<br/>[<br/>    escript eval(\"system'console writeLine(\"\"Hello World\"\").\").<br/>].</pre>"}, {"lang": "Elixir", "loc": 6, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Code.eval_string(\"x + 4 * Enum.sum([1,2,3,4])\", [x: 17])<br/>{57, [x: 17]}<br/>iex(2)&gt; Code.eval_string(\"c = a + b\", [a: 1, b: 2])<br/>{3, [a: 1, b: 2, c: 3]} <br/>iex(3)&gt; Code.eval_string(\"a = a + b\", [a: 1, b: 2])<br/>{3, [a: 3, b: 2]}</pre>"}, {"lang": "Erlang", "loc": 11, "block": "<pre class=\"erlang highlighted_source\"><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Tokens</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erl_scan.html\"><span class=\"kw5\">erl_scan</span></a>:<span class=\"re3\">string</span><span class=\"br0\">(</span><span class=\"st0\">\"X + 4 * lists:sum([1,2,3,4]).\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy1\">...</span><br/><span class=\"nu0\">2</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Form</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erl_parse.html\"><span class=\"kw5\">erl_parse</span></a>:<span class=\"re3\">parse_exprs</span><span class=\"br0\">(</span><span class=\"re5\">Tokens</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy1\">...</span><br/><span class=\"nu0\">3</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">Bindings</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erl_eval.html\"><span class=\"kw5\">erl_eval</span></a>:<span class=\"re3\">add_binding</span><span class=\"br0\">(</span><span class=\"st_h\">'X'</span><span class=\"sy1\">,</span> <span class=\"nu0\">17</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erl_eval.html\"><span class=\"kw5\">erl_eval</span></a>:<span class=\"re3\">new_bindings</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st_h\">'X'</span><span class=\"sy1\">,</span><span class=\"nu0\">17</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"nu0\">4</span><span class=\"sy3\">&gt;</span> <span class=\"br0\">{</span>value<span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erl_eval.html\"><span class=\"kw5\">erl_eval</span></a>:<span class=\"re3\">expr</span><span class=\"br0\">(</span><span class=\"re5\">Form</span><span class=\"sy1\">,</span> <span class=\"re5\">Bindings</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                 <br/><span class=\"br0\">{</span>value<span class=\"sy1\">,</span><span class=\"nu0\">57</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"st_h\">'X'</span><span class=\"sy1\">,</span><span class=\"nu0\">17</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"nu0\">5</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">Value</span><span class=\"sy1\">.</span><br/><span class=\"nu0\">57</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>IN: scratchpad \"\\\"Hello, World!\\\" print\" ( -- ) eval\nHello, World!\nIN: scratchpad  4 5 \"+\" ( a b -- c ) eval\n9\n</pre>"}, {"lang": "Forth", "loc": 4, "block": "<pre class=\"text highlighted_source\">s\" variable foo   1e fatan 4e f*\" evaluate<br/>\u00a0<br/>f.      \\ 3.14159...<br/>1 foo\u00a0!</pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>eval[\"length = 1234 feet + 2 inches\"]<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 25, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"bitbucket.org/binet/go-eval/pkg/eval\"</span><br/>\t<span class=\"st0\">\"go/token\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tw <span class=\"sy2\">:=</span> eval<span class=\"sy3\">.</span>NewWorld<span class=\"sy1\">();</span><br/>\tfset <span class=\"sy2\">:=</span> token<span class=\"sy3\">.</span>NewFileSet<span class=\"sy1\">();</span><br/>\u00a0<br/>\tcode<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> w<span class=\"sy3\">.</span>Compile<span class=\"sy1\">(</span>fset<span class=\"sy1\">,</span> <span class=\"st0\">\"1 + 2\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Compile error\"</span><span class=\"sy1\">);</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tval<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> code<span class=\"sy3\">.</span>Run<span class=\"sy1\">();</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Run time error\"</span><span class=\"sy1\">);</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy1\">;</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Return value:\"</span><span class=\"sy1\">,</span> val<span class=\"sy1\">)</span> <span class=\"co1\">//prints, well, 3</span><br/>\u00a0<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre>[2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118]</pre>"}, {"lang": "GW-BASIC", "loc": 10, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <a href=\"http://www.qbasicnews.com/qboho/qckline.shtml\"><span class=\"kw3\">LINE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Type an expression: \"</span><span class=\"sy0\">,</span>A$<br/><span class=\"co3\">20</span> <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> <span class=\"st0\">\"CHAIN.TMP\"</span> <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckoutput.shtml\"><span class=\"kw3\">OUTPUT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <span class=\"re2\">#1</span><br/><span class=\"co3\">30</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"re2\">#1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"70 LET Y=(\"</span><span class=\"sy0\">+</span>A$<span class=\"sy0\">+</span><span class=\"st0\">\")\"</span><br/><span class=\"co3\">40</span> <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a> <span class=\"re2\">#1</span><br/><span class=\"co3\">50</span> <a href=\"http://www.qbasicnews.com/qboho/qckchain.shtml\"><span class=\"kw3\">CHAIN</span></a> MERGE <span class=\"st0\">\"CHAIN.TMP\"</span><span class=\"sy0\">,</span><span class=\"nu0\">60</span><span class=\"sy0\">,</span>ALL<br/><span class=\"co3\">60</span> <span class=\"kw1\">FOR</span> X<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span><br/><span class=\"co3\">70</span> REM<br/><span class=\"co3\">80</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> X<span class=\"sy0\">,</span>Y<br/><span class=\"co3\">90</span> <span class=\"kw1\">NEXT</span> X<br/><span class=\"co3\">100</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">10</span></pre>"}, {"lang": "Harbour", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Procedure Main()<br/>   local bAdd\u00a0:= {|Label,n1,n2| Qout( Label ), QQout( n1 + n2 )}<br/>   Eval( bAdd, \"5+5 = \", 5, 5 )<br/>   Eval( bAdd, \"5-5 = \", 5, -5 )<br/>   return<br/>\u00a0<br/>Upon execution you see: <br/>5+5 = 10<br/>5-5 =  0<br/>\u00a0</pre>"}, {"lang": "HicEst", "loc": 8, "block": "<pre class=\"hicest highlighted_source\">value <span class=\"sy1\">=</span> <span class=\"kw1\">XEQ</span><span class=\"br0\">(</span> <span class=\"st0\">\" temp = 1 + 2 + 3 \"</span><span class=\"br0\">)</span> <span class=\"co1\">! value is assigned 6</span><br/><span class=\"co1\">! temp is undefined outside XEQ, if it was not defined before.</span><br/>\u00a0<br/><span class=\"kw1\">XEQ</span><span class=\"br0\">(</span><span class=\"st0\">\" WRITE(Messagebox) 'Hello World\u00a0!' \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span><span class=\"st0\">\"my_file.txt\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">READ</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span><span class=\"st0\">\"my_file.txt\"</span><span class=\"sy1\">,</span> Row<span class=\"sy1\">=</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> string<br/><span class=\"kw1\">XEQ</span><span class=\"br0\">(</span> string <span class=\"br0\">)</span> <span class=\"co1\">! executes row 6 of my_file.txt</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">\". <span class=\"st_h\">'a =: +/ 1 2 3'</span> <span class=\"co1\">NB. execute a string to sum 1, 2 and 3 and assign to noun a</span></pre>"}, {"lang": "Java", "loc": 86, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.ByteArrayOutputStream</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.OutputStream</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.reflect.InvocationTargetException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.URI</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.FileObject</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.ForwardingJavaFileManager</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.JavaCompiler</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.JavaFileObject</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.SimpleJavaFileObject</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.StandardJavaFileManager</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.StandardLocation</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.tools.ToolProvider</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Evaluator<span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">new</span> Evaluator<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">eval</span><span class=\"br0\">(</span><br/>            <span class=\"st0\">\"SayHello\"</span>,<br/>            <span class=\"st0\">\"public class SayHello{public void speak(){System.out.println(<span class=\"es0\">\\\"</span>Hello world<span class=\"es0\">\\\"</span>);}}\"</span>,<br/>            <span class=\"st0\">\"speak\"</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> eval<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> className, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> classCode, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> methodName<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, ByteArrayOutputStream<span class=\"sy0\">&gt;</span> classCache <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        JavaCompiler                       compiler   <span class=\"sy0\">=</span> ToolProvider.<span class=\"me1\">getSystemJavaCompiler</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw2\">null</span> <span class=\"sy0\">==</span> compiler <span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aruntimeexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RuntimeException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Could not get a compiler.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        StandardJavaFileManager                            sfm  <span class=\"sy0\">=</span> compiler.<span class=\"me1\">getStandardFileManager</span><span class=\"br0\">(</span><span class=\"kw2\">null</span>, <span class=\"kw2\">null</span>, <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ForwardingJavaFileManager<span class=\"sy0\">&lt;</span>StandardJavaFileManager<span class=\"sy0\">&gt;</span> fjfm <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ForwardingJavaFileManager<span class=\"sy0\">&lt;</span>StandardJavaFileManager<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>sfm<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> JavaFileObject getJavaFileForOutput<span class=\"br0\">(</span>Location location, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> className, JavaFileObject.<span class=\"me1\">Kind</span> kind, FileObject sibling<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>StandardLocation.<span class=\"me1\">CLASS_OUTPUT</span> <span class=\"sy0\">==</span> location <span class=\"sy0\">&amp;&amp;</span> JavaFileObject.<span class=\"me1\">Kind</span>.<span class=\"kw1\">CLASS</span> <span class=\"sy0\">==</span> kind<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> SimpleJavaFileObject<span class=\"br0\">(</span>URI.<span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"st0\">\"mem:///\"</span> <span class=\"sy0\">+</span> className <span class=\"sy0\">+</span> <span class=\"st0\">\".class\"</span><span class=\"br0\">)</span>, JavaFileObject.<span class=\"me1\">Kind</span>.<span class=\"kw1\">CLASS</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        @Override<br/>                        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aoutputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">OutputStream</span></a> openOutputStream<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><span class=\"br0\">{</span><br/>                            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abytearrayoutputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ByteArrayOutputStream</span></a> baos <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abytearrayoutputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ByteArrayOutputStream</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            classCache.<span class=\"me1\">put</span><span class=\"br0\">(</span>className, baos<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">return</span> baos<span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Unexpected output file requested: \"</span> <span class=\"sy0\">+</span> location <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> className <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> kind<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>JavaFileObject<span class=\"sy0\">&gt;</span> files <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LinkedList<span class=\"sy0\">&lt;</span>JavaFileObject<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">{</span><br/>            add<span class=\"br0\">(</span><br/>                <span class=\"kw1\">new</span> SimpleJavaFileObject<span class=\"br0\">(</span>URI.<span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"st0\">\"string:///\"</span> <span class=\"sy0\">+</span> className <span class=\"sy0\">+</span> <span class=\"st0\">\".java\"</span><span class=\"br0\">)</span>, JavaFileObject.<span class=\"me1\">Kind</span>.<span class=\"me1\">SOURCE</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    @Override<br/>                    <span class=\"kw1\">public</span> CharSequence getCharContent<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> ignoreEncodingErrors<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                        <span class=\"kw1\">return</span> classCode<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Now we can compile!</span><br/>        compiler.<span class=\"me1\">getTask</span><span class=\"br0\">(</span><span class=\"kw2\">null</span>, fjfm, <span class=\"kw2\">null</span>, <span class=\"kw2\">null</span>, <span class=\"kw2\">null</span>, files<span class=\"br0\">)</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">try</span><span class=\"br0\">{</span><br/>            Class<span class=\"sy0\">&lt;?&gt;</span> clarse <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aclassloader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ClassLoader</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                @Override<br/>                <span class=\"kw1\">public</span> Class<span class=\"sy0\">&lt;?&gt;</span> findClass<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> name.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span>className<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"This class loader is for \"</span> <span class=\"sy0\">+</span> className <span class=\"sy0\">+</span> <span class=\"st0\">\" - could not handle <span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">+</span> name <span class=\"sy0\">+</span> <span class=\"st0\">'\"'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes <span class=\"sy0\">=</span> classCache.<span class=\"me1\">get</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> defineClass<span class=\"br0\">(</span>name, bytes, <span class=\"nu0\">0</span>, bytes.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span>.<span class=\"me1\">loadClass</span><span class=\"br0\">(</span>className<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Invoke a method on the thing we compiled</span><br/>            clarse.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span>methodName<span class=\"br0\">)</span>.<span class=\"me1\">invoke</span><span class=\"br0\">(</span>clarse.<span class=\"me1\">newInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aclassnotfoundexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ClassNotFoundException</span></a> <span class=\"sy0\">|</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainstantiationexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InstantiationException</span></a> <span class=\"sy0\">|</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalaccessexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalAccessException</span></a> <span class=\"sy0\">|</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anosuchmethodexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NoSuchMethodException</span></a> <span class=\"sy0\">|</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainvocationtargetexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InvocationTargetException</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aruntimeexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RuntimeException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Run failed: \"</span> <span class=\"sy0\">+</span> x, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 1, "block": "<pre>$ kotlinc\nWelcome to Kotlin version 1.2.31 (JRE 1.8.0_162-8u162-b12-0ubuntu0.16.04.2-b12)\nType\u00a0:help for help,\u00a0:quit for quit\n&gt;&gt;&gt; 20 + 22\n42\n&gt;&gt;&gt; 5 * Math.sqrt(81.0)\n45.0\n&gt;&gt;&gt; fun triple(x: Int) = x * 3\n&gt;&gt;&gt; triple(16)\n48\n&gt;&gt;&gt;\u00a0:quit\n</pre>"}, {"lang": "Lasso", "loc": 30, "block": "<pre class=\"text highlighted_source\">//code, fragment name, autocollect, inplaintext<br/>local(mycode = \"'Hello world, it is '+date\")<br/>sourcefile('['+#mycode+']','arbritraty_name', true, true)-&gt;invoke<br/>\u00a0<br/>'\\r'<br/>\u00a0<br/>\u00a0<br/>var(x = 100)<br/>local(mycode = \"Outside Lasso\\r['Hello world, var x is '+var(x)]\")<br/>// autocollect (3rd param): return any output generated<br/>// inplaintext (4th param): if true, assumes this is mixed Lasso and plain text, <br/>//\t\trequires Lasso code to be in square brackets or other supported code block demarkation. <br/>sourcefile(#mycode,'arbritraty_name', true, true)-&gt;invoke<br/>\u00a0<br/>'\\r'<br/>\u00a0<br/>var(y = 2)<br/>local(mycode = \"'Hello world, is there output?\\r'<br/>var(x) *= var(y)\")<br/>// autocollect (3rd param): as false, no output returned<br/>// inplaintext (4th param): as false, assumes this is Lasso code, no mixed-mode Lasso and text.<br/>sourcefile(#mycode,'arbritraty_name', false, false)-&gt;invoke<br/>'var x is now: '+$x<br/>\u00a0<br/>'\\r'<br/>\u00a0<br/>var(z = 3)<br/>local(mycode = \"var(x) *= var(z)\")<br/>sourcefile(#mycode,'arbritraty_name', false, false)-&gt;invoke<br/>'var x is now: '+$x</pre>"}, {"lang": "Liberty BASIC", "loc": 21, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'Dimension a numerical and string array</span><br/><span class=\"kw1\">Dim</span> myArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> myStringArray$<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'Fill both arrays with the appropriate data</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>    myArray<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    myStringArray$<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"String - \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"co1\">'Set two variables with the names of each array</span><br/>numArrayName$ <span class=\"sy0\">=</span> <span class=\"st0\">\"myArray\"</span><br/>strArrayName$ <span class=\"sy0\">=</span> <span class=\"st0\">\"myStringArray\"</span><br/>\u00a0<br/><span class=\"co1\">'Retrieve the array data by evaluating a string</span><br/><span class=\"co1\">'that correlates to the array</span><br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw2\">Eval$</span><span class=\"br0\">(</span>numArrayName$ <span class=\"sy0\">+</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw2\">Eval$</span><span class=\"br0\">(</span>strArrayName$ <span class=\"sy0\">+</span> <span class=\"st0\">\"$(\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> i </pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">f <span class=\"sy0\">=</span> <span class=\"kw3\">loadstring</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"co1\">-- load a string as a function. Returns a function.</span><br/>\u00a0<br/>one <span class=\"sy0\">=</span> <span class=\"kw3\">loadstring</span><span class=\"st0\">\"return 1\"</span> <span class=\"co1\">-- one() returns 1</span><br/>\u00a0<br/>two <span class=\"sy0\">=</span> <span class=\"kw3\">loadstring</span><span class=\"st0\">\"return ...\"</span> <span class=\"co1\">-- two() returns the arguments passed to it</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> foo <span class=\"sy0\">=</span> eval<span class=\"br0\">(</span><span class=\"st0\">'{value: 42}'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>eval<span class=\"br0\">(</span><span class=\"st0\">'var bar = \"Hello, world!\";'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">typeof</span> foo<span class=\"sy0\">;</span> <span class=\"co1\">// 'object'</span><br/><span class=\"kw1\">typeof</span> bar<span class=\"sy0\">;</span> <span class=\"co1\">// 'string'</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">include(\"myfile.jl\")</pre>"}, {"lang": "M2000 Interpreter", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module checkit {<br/>      Module dummy {<br/>            i++<br/>            Print Number<br/>      }<br/>      \\\\ using Stack New { } we open a new stack for values, and old one connected back at the end<br/>      \\\\ using block For This {} we erase any new definition, so we erase i (which Local make a new one)<br/>      a$={<br/>            Stack New {<br/>                  For this {<br/>                        Local i<br/>                        for i=1 to 10\u00a0: print i\u00a0: next i<br/>                  }<br/>            }<br/>            If valid(k) then print k<br/>      }<br/>      i=500<br/>      k=600<br/>      Push 1000<br/>      inline a$<br/>      Print i=500<br/>      Print Number=1000<br/>      \\\\ eval an expression<br/>      Print Eval(\"i+k\")<br/>      \\\\ eval a function<br/>      Print Function(\"{read x\u00a0: = x**2}\", 2)=4<br/>      Dim k(10)=123<br/>      \\\\ eval array only<br/>      Print array(\"k()\", 2)=123<br/>      Push 10, 10<br/>      \\\\ call a module by make it inline first<br/>      inline code dummy, dummy<br/>      Print i=502<br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 9, "block": "<pre class=\"text highlighted_source\">Print[ToExpression[\"1 + 1\"]];<br/>Print[ToExpression[\"Print[\\\"Hello, world!\\\"]; 10!\"]];<br/>x = 5;<br/>Print[ToExpression[\"x!\"]];<br/>Print[ToExpression[\"Module[{x = 8}, x!]\"]];<br/>Print[MemoryConstrained[ToExpression[\"Range[5]\"], 10000, {}]];<br/>Print[MemoryConstrained[ToExpression[\"Range[10^5]\"], 10000, {}]];<br/>Print[TimeConstrained[ToExpression[\"Pause[1]; True\"], 2, False]];<br/>Print[TimeConstrained[ToExpression[\"Pause[60]; True\"], 2, False]];</pre>"}, {"lang": "MATLAB", "loc": 37, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> testEval<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Expressions:\\n'</span><span class=\"br0\">)</span><br/>    x = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"co2\">'5+10^2'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"co2\">'y = (x-100).*[1 2 3]'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"co2\">'z = strcat('</span><span class=\"co2\">'my'</span><span class=\"co2\">', '</span><span class=\"co2\">' string'</span><span class=\"co2\">')'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span><br/>        w <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"co2\">' = 45'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">catch</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Runtime error: interpretation of w is a function\\n\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"co1\">% eval('v') = 5</span><br/>    <span class=\"co1\">% Invalid at compile-time as MATLAB interprets as using eval as a variable</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Other Statements:\\n'</span><span class=\"br0\">)</span><br/>    nl = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n'</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"co2\">'for k = 1:20'</span> nl <span class=\"sy0\">...</span><br/>              <span class=\"co2\">'fprintf('</span><span class=\"co2\">'%.3f\\n'</span><span class=\"co2\">', k)'</span> nl <span class=\"sy0\">...</span><br/>              <span class=\"co2\">'if k == 3'</span> nl <span class=\"sy0\">...</span><br/>                  <span class=\"co2\">'break'</span> nl <span class=\"sy0\">...</span><br/>              <span class=\"co2\">'end'</span> nl <span class=\"sy0\">...</span><br/>          <span class=\"co2\">'end'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    true == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"co2\">'1'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span><br/>        true <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span><span class=\"co2\">' == 1'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">catch</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Runtime error: interpretation of == 1 is of input to true\\n\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Programming on the fly:\\n'</span><span class=\"br0\">)</span><br/>    userIn = true;<br/>    codeBlock = <span class=\"co2\">''</span>;<br/>    <span class=\"kw1\">while</span> userIn<br/>        userIn = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Enter next line of code: '</span>, <span class=\"co2\">'s'</span><span class=\"br0\">)</span>;<br/>        codeBlock = <span class=\"br0\">[</span>codeBlock nl userIn<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">end</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span>codeBlock<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 17, "block": "<pre class=\"text highlighted_source\">/* Here is how to create a function and return a value at runtime. In the first example,<br/>the function is made global, i.e. it still exists after the statement is run. In the second example, the function<br/>is declared local. The evaluated string may read or write any variable defined before eval_string is run. */<br/>\u00a0<br/>kill(f)$<br/>\u00a0<br/>eval_string(\"block(f(x)\u00a0:= x^2 + 1, f(2))\");<br/>5<br/>\u00a0<br/>fundef(f);<br/>/* f(x)\u00a0:= x^2 + 1 */<br/>\u00a0<br/>eval_string(\"block([f], local(f), f(x)\u00a0:= x^3 + 1, f(2))\");<br/>9<br/>\u00a0<br/>fundef(f);<br/>/* f(x)\u00a0:= x^2 + 1 */</pre>"}, {"lang": "Oforth", "loc": 5, "block": "<pre class=\"text highlighted_source\">\"[ [ $a, 12], [$b, 1.2], [ $c, [ $aaa, $bbb, $ccc ] ], [ $torun, #first ] ]\" perform .s<br/>[1] (List) [[a, 12], [b, 1.2], [c, [aaa, bbb, ccc]], [torun, #first]]<br/>\u00a0<br/>\"12 13 +\" perform<br/>[1:interpreter] ExCompiler\u00a0: Can't evaluate &lt;+&gt;</pre>"}, {"lang": "ooRexx", "loc": 5, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>   a = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   ins = <span class=\"st0\">\"loop num over a; say num; end\"</span><br/>   <span class=\"kw1\">interpret</span> ins<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 54, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>  function ExecSeries(string s,double b,e,i) as string<br/>  '===================================================<br/>  '<br/>  sys a,p<br/>  string v,u,tab,cr,er<br/>  '<br/>  'PREPARE OUTPUT BUFFER<br/>  '<br/>  p=1<br/>  cr=chr(13) chr(10)<br/>  tab=chr(9)<br/>  v=nuls 4096<br/>  mid v,p,s+cr+cr<br/>  p+=4+len s<br/>  '<br/>  double x,y,z 'shared variables<br/>  '<br/>  'COMPILE<br/>  '<br/>  a=compile s<br/>  er=error<br/>  if er then<br/>    print \"runtime error: \"  er\u00a0: exit function<br/>  end if<br/>  '<br/>  'EXECUTE<br/>  '<br/>  for x=b to e step i<br/>    if p+128&gt;=len v then<br/>      v+=nuls len(v) 'extend buffer<br/>    end if<br/>    call a<br/>    u=str(x) tab str(y) cr<br/>    mid v,p,u\u00a0: p+=len u<br/>  next<br/>  '<br/>  freememory a 'release compiled code<br/>  '<br/>  return left v,p-1 'results<br/>  '<br/>  end function<br/>\u00a0<br/>  '=====<br/>  'TESTS<br/>  '=====<br/>\u00a0<br/>  'Expression, StartVal, EndVal stepVal, Increment<br/>\u00a0<br/>  print ExecSeries \"y=x*x*x\", 1, 10, 1<br/>  print ExecSeries \"y=sqrt x\",1, 9 , 1<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 17, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% simplest case: just evaluate expressions without bindings</span><br/>  R1 = <span class=\"br0\">{</span>Compiler<span class=\"sy0\">.</span>virtualStringToValue <span class=\"st0\">\"{Abs ~42}\"</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show R1<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% eval expressions with additional bindings and</span><br/>  <span class=\"co1\">%% the possibility to kill the evaluation by calling KillProc</span><br/>  KillProc<br/>  R2 = <span class=\"br0\">{</span>Compiler<span class=\"sy0\">.</span>evalExpression <span class=\"st0\">\"{Abs A}\"</span> <span class=\"kw1\">unit</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span>:<span class=\"sy0\">~</span>42<span class=\"br0\">)</span>\u00a0?KillProc<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show R2<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% full control: add and remove bindings, eval expressions or</span><br/>  <span class=\"co1\">%% statements, set compiler switches etc.</span><br/>  Engine = <span class=\"br0\">{</span>New Compiler<span class=\"sy0\">.</span>engine init<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Engine enqueue<span class=\"br0\">(</span>setSwitch<span class=\"br0\">(</span>expression <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">%% statements instead of expr.</span><br/>  <span class=\"br0\">{</span>Engine enqueue<span class=\"br0\">(</span>mergeEnv<span class=\"br0\">(</span>env<span class=\"br0\">(</span><span class=\"st0\">'A'</span>:42 <span class=\"st0\">'System'</span>:System<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Engine enqueue<span class=\"br0\">(</span>feedVirtualString<span class=\"br0\">(</span><span class=\"st0\">\"{System.show A}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">runme<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>runme<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello world!\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$ans</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"st_h\">'abs($a * $b)'</span><span class=\"sy0\">;</span>  <span class=\"co1\"># =&gt; 35</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$ans</span> <span class=\"sy0\">=</span> EVAL <span class=\"st_h\">'abs($a * $b)'</span><span class=\"sy0\">;</span>  <span class=\"co1\"># =&gt; 35</span></pre>"}, {"lang": "PHP", "loc": 7, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/>  <span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'echo \"hello world\"'</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.php.net/eval\"><span class=\"kw3\">eval</span></a><span class=\"br0\">(</span><span class=\"re0\">$code</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$code</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'return \"hello world\"'</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span> <a href=\"http://www.php.net/eval\"><span class=\"kw3\">eval</span></a><span class=\"br0\">(</span><span class=\"re0\">$code</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"pike highlighted_source\">program demo <span class=\"sy0\">=</span> compile_string<span class=\"br0\">(</span>#<span class=\"st0\">\"<br/>    string name=<span class=\"es0\">\\\"</span>demo<span class=\"es0\">\\\"</span>;<br/>    string hello()<br/>    { <br/>       return(<span class=\"es0\">\\\"</span>hello, i am <span class=\"es0\">\\\"</span>+name); <br/>    }\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>demo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>&gt;hello<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"st0\">\"hello, i am demo\"</span></pre>"}, {"lang": "Pike", "loc": 9, "block": "<pre class=\"pike highlighted_source\">program demo <span class=\"sy0\">=</span> compile_string<span class=\"br0\">(</span>#<span class=\"st0\">\"<br/>    string name=<span class=\"es0\">\\\"</span>demo<span class=\"es0\">\\\"</span>;<br/>    string hello()<br/>    { <br/>       return(<span class=\"es0\">\\\"</span>hello, i am <span class=\"es0\">\\\"</span>+name); <br/>    }\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>demo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>&gt;hello<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"st0\">\"hello, i am demo\"</span></pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$test2plus2</span> <span class=\"sy0\">=</span> <span class=\"st0\">'2 + 2 -eq 4'</span><br/><span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$test2plus2</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">exec</span> <span class=\"st0\">'''<br/>x = sum([1,2,3,4])<br/>print x<br/>'''</span><br/><span class=\"nu0\">10</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">expr1 &lt;- quote(a+b*c)<br/>expr2 &lt;- parse(text=\"a+b*c\")[[1]]<br/>expr3 &lt;- call(\"+\", quote(`a`), call(\"*\", quote(`b`), quote(`c`)))</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require racket/sandbox)<br/>(define e (make-evaluator 'racket))<br/>(e '(define + *))<br/>(e '(+ 10 20))<br/>(+ 10 20)<br/>;; (e '(delete-file \"/etc/passwd\"))<br/>;; --&gt; delete-file: `delete' access denied for /etc/passwd<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 3, "block": "<pre class=\"rebol highlighted_source\">a: -<span class=\"nu0\">5</span><br/>b: <span class=\"nu0\">7</span><br/>answer: <span class=\"kw2\">do</span> <span class=\"br0\">[</span><span class=\"kw3\">abs</span> a <span class=\"sy0\">*</span> b<span class=\"br0\">]</span>     <span class=\"co1\">; =&gt; 35</span></pre>"}, {"lang": "REXX", "loc": 20, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program illustrates the ability to  execute code  entered  at runtime (from C.L.)*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">10000000</span>                          <span class=\"coMULTI\">/*ten million digits should do it.     */</span><br/>bee=<span class=\"nu0\">51</span><br/>stuff= <span class=\"st0\">'bee=min(-2,44);  say 13*2 \"[from inside the box.]\";  abc=abs(bee)'</span><br/><span class=\"kw1\">interpret</span> stuff<br/><span class=\"kw1\">say</span> <span class=\"st0\">'bee='</span>  bee<br/><span class=\"kw1\">say</span> <span class=\"st0\">'abc='</span>  abc<br/><span class=\"kw1\">say</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  now, we hear from the user.    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'enter an expression:'</span><br/><span class=\"kw1\">pull</span> expression<br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'expression entered is:'</span>  expression<br/><span class=\"kw1\">say</span><br/>\u00a0<br/><span class=\"kw1\">interpret</span> <span class=\"st0\">'?='</span>expression<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'length of result='</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">' left 50 bytes of result='</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>?,<span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"st0\">\"\u00b7\u00b7\u00b7\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'right 50 bytes of result=\u00b7\u00b7\u00b7'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>?, <span class=\"nu0\">50</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Eval(\"nOutput = 5+2*5 \" )<br/>See \"5+2*5 = \" + nOutput + nl<br/>Eval(\"for x = 1 to 10 see x + nl next\")<br/>Eval(\"func test see 'message from test!' \")<br/>test()<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">a, b = <span class=\"nu0\">5</span>, <span class=\"sy0\">-</span><span class=\"nu0\">7</span><br/>ans = <span class=\"kw3\">eval</span> <span class=\"st0\">\"(a * b).abs\"</span>  <span class=\"co1\"># =&gt; 35</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">define</span> x <span class=\"nu0\">37</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>eval '<span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">42</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>eval '<span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>interaction<span class=\"sy0\">-</span>environment<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">42</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>eval '<span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>scheme<span class=\"sy0\">-</span>report<span class=\"sy0\">-</span>environment <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; provides R5RS definitions</span><br/>\u00a0<br/>Error: <span class=\"kw1\">identifier</span> <span class=\"kw1\">not</span> visible x.<br/>Type <span class=\"br0\">(</span>debug<span class=\"br0\">)</span> to enter the debugger.<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>eval <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">;; this is input from the user.</span><br/><span class=\"nu0\">9</span></pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>say <span class=\"kw3\">eval</span> <span class=\"st0\">'(a * b).abs'</span>;  <span class=\"co1\"># =&gt; 35</span><br/>say <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> b <span class=\"sy0\">-&gt;</span> abs<span class=\"br0\">)</span>;      <span class=\"co1\"># =&gt; 35</span></pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">`(4 + 5) evaluate.<br/>`(4 + 5) evaluateIn: prototypes.</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">[</span> <span class=\"re5\">4</span> + <span class=\"re5\">5</span> <span class=\"br0\">]</span> value.</pre>"}, {"lang": "SNOBOL4", "loc": 4, "block": "<pre class=\"text highlighted_source\">     expression = \"' page ' (i + 1)\"<br/>     i = 7<br/>     output = eval(expression)<br/>end</pre>"}, {"lang": "Sparkling", "loc": 2, "block": "<pre class=\"text highlighted_source\">let fn = exprtofn(\"13 + 37\");<br/>fn() // -&gt; 50</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> four <span class=\"nu0\">4</span><br/><span class=\"kw1\">set</span> result1 <span class=\"br0\">[</span><span class=\"kw1\">eval</span> <span class=\"st0\">\"expr {$four + 5}\"</span><span class=\"br0\">]</span>           <span class=\"sy0\">;</span><span class=\"co1\"># string input</span><br/>\u00a0<br/><span class=\"kw1\">set</span> result2 <span class=\"br0\">[</span><span class=\"kw1\">eval</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$four</span> + <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># list input</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 4, "block": "<pre class=\"bash highlighted_source\">$ <span class=\"re2\">a</span>=<span class=\"nu0\">42</span><br/>$ <span class=\"re2\">b</span>=a<br/>$ <span class=\"kw3\">eval</span> <span class=\"st0\">\"echo <span class=\"es1\">\\$</span><span class=\"es2\">$b</span>\"</span><br/><span class=\"nu0\">42</span></pre>"}, {"lang": "UNIX Shell", "loc": 4, "block": "<pre class=\"bash highlighted_source\">$ <span class=\"re2\">a</span>=<span class=\"nu0\">42</span><br/>$ <span class=\"re2\">b</span>=a<br/>$ <span class=\"kw3\">eval</span> <span class=\"st0\">\"echo <span class=\"es1\">\\$</span><span class=\"es2\">$b</span>\"</span><br/><span class=\"nu0\">42</span></pre>"}, {"lang": "Ursa", "loc": 3, "block": "<pre class=\"text highlighted_source\"># writes hello world to the console<br/>eval \"out \\\"hello world\\\" endl console\" console<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">Compiler.Compiler.compileText(<br/>     \"fcn f(text){text.len()}\").f(\"foobar\")<br/>//--&gt;6</pre>"}]}