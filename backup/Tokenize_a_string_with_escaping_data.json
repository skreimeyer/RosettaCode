{"task": "Tokenize_a_string_with_escaping", "blocks": [{"lang": "AppleScript", "loc": 87, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- TOKENIZE ------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- tokenize\u00a0:: String -&gt; Character -&gt; Character -&gt; [String]</span><br/><span class=\"kw3\">on</span> tokenize<span class=\"br0\">(</span>str, chrDelim, chrEsc<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> charParse<br/>        <span class=\"co1\">-- Record: {esc:Bool, token:String, tokens:[String]}</span><br/>        <span class=\"co1\">-- charParse\u00a0:: Record -&gt; Character -&gt; Record</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> blnEsc <span class=\"kw3\">to</span> esc <span class=\"kw3\">of</span> a<br/>            <span class=\"kw3\">set</span> blnEscChar <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">not</span> blnEsc<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> chrEsc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">not</span> blnEsc<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> chrDelim<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> strToken <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>                <span class=\"kw3\">set</span> lstTokens <span class=\"kw3\">to</span> <span class=\"br0\">(</span>tokens <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> token <span class=\"kw3\">of</span> a<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> strToken <span class=\"kw3\">to</span> <span class=\"br0\">(</span>token <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> cond<span class=\"br0\">(</span>blnEscChar, <span class=\"st0\">\"\"</span>, x<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> lstTokens <span class=\"kw3\">to</span> tokens <span class=\"kw3\">of</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>            <span class=\"br0\">{</span>esc:blnEscChar, token:strToken, tokens:lstTokens<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> recParse <span class=\"kw3\">to</span> foldl<span class=\"br0\">(</span>charParse, \u00ac<br/>        <span class=\"br0\">{</span>esc:<span class=\"kw1\">false</span>, token:<span class=\"st0\">\"\"</span>, tokens:<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>, splitOn<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    tokens <span class=\"kw3\">of</span> recParse <span class=\"sy0\">&amp;</span> token <span class=\"kw3\">of</span> recParse<br/><span class=\"kw3\">end</span> tokenize<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">script</span> numberedLine<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, s<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> iLine <span class=\"kw3\">to</span> lineNum <span class=\"kw3\">of</span> a<br/>            <span class=\"br0\">{</span>lineNum:iLine <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, report:report <span class=\"kw3\">of</span> a <span class=\"sy0\">&amp;</span> iLine <span class=\"sy0\">&amp;</span> <span class=\"st0\">\":\"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">tab</span> <span class=\"sy0\">&amp;</span> s <span class=\"sy0\">&amp;</span> linefeed<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    report <span class=\"kw3\">of</span> foldl<span class=\"br0\">(</span>numberedLine, <span class=\"br0\">{</span>lineNum:<span class=\"nu0\">1</span>, report:<span class=\"st0\">\"\"</span><span class=\"br0\">}</span>, \u00ac<br/>        tokenize<span class=\"br0\">(</span><span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span>, <span class=\"st0\">\"|\"</span>, <span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- splitOn\u00a0:: Text -&gt; Text -&gt; [Text]</span><br/><span class=\"kw3\">on</span> splitOn<span class=\"br0\">(</span>strDelim, strMain<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strDelim<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> <span class=\"kw1\">items</span> <span class=\"kw3\">of</span> strMain<br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> xs<br/><span class=\"kw3\">end</span> splitOn<br/>\u00a0<br/><span class=\"co1\">-- cond\u00a0:: Bool -&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> cond<span class=\"br0\">(</span>bool, f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        g<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> cond</pre>"}, {"lang": "AWK", "loc": 28, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f TOKENIZE_A_STRING_WITH_ESCAPING.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    tokenize<span class=\"br0\">(</span><span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span>,<span class=\"st0\">\"|\"</span>,<span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> tokenize<span class=\"br0\">(</span>str,sep,esc,  chr,escaping,field,i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;%s&lt;<span class=\"es0\">\\n</span>\"</span>,str<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%02d: &gt;\"</span>,<span class=\"sy3\">++</span>field<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      chr = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>escaping <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>,chr<span class=\"br0\">)</span><br/>        escaping = <span class=\"nu0\">0</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>chr <span class=\"sy2\">==</span> sep<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;<span class=\"es0\">\\n</span>%02d: &gt;\"</span>,<span class=\"sy3\">++</span>field<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>chr <span class=\"sy2\">==</span> esc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        escaping = <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>,chr<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">REM &gt;tokenizer<br/>PROC_tokenize(\"one^|uno||three^^^^|four^^^|^cuatro|\", \"|\", \"^\")<br/>END<br/>:<br/>DEF PROC_tokenize(src$, sep$, esc$)<br/>LOCAL field%, char$, escaping%, i%<br/>field% = 1<br/>escaping% = FALSE<br/>PRINT field%; \" \";<br/>FOR i% = 1 TO LEN src$<br/>  char$ = MID$(src$, i%, 1)<br/>  IF escaping% THEN<br/>    PRINT char$;<br/>    escaping% = FALSE<br/>  ELSE<br/>    CASE char$ OF<br/>    WHEN sep$<br/>      PRINT<br/>      field% += 1<br/>      PRINT field%; \" \";<br/>    WHEN esc$<br/>      escaping% = TRUE<br/>    OTHERWISE<br/>      PRINT char$;<br/>    ENDCASE<br/>  ENDIF<br/>NEXT<br/>PRINT<br/>ENDPROC</pre>"}, {"lang": "C", "loc": 101, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define STR_DEMO \"one^|uno||three^^^^|four^^^|^cuatro|\"</span><br/><span class=\"co2\">#define SEP '|'</span><br/><span class=\"co2\">#define ESC '^'</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> Str<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* just for an easier reading */</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ===&gt; FUNCTION PROTOTYPES &lt;================================================ */</span><br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> ElQ<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> sep<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> esc <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Str <span class=\"sy0\">*</span>Tokenize<span class=\"br0\">(</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> sep<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> esc<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>q <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*==============================================================================<br/>Main function.<br/>Just passes a copy of the STR_DEMO string to the tokenization function and shows<br/>the results.<br/>==============================================================================*/</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> s<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> STR_DEMO<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> q<span class=\"sy0\">;</span><br/>\u00a0<br/>    Str <span class=\"sy0\">*</span>list <span class=\"sy0\">=</span> Tokenize<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> SEP<span class=\"sy0\">,</span> ESC<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>q <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> list <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span> Original string:\u00a0%s<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> STR_DEMO <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"\u00a0%d tokens:<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> q <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>q<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i <span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"\u00a0%4d.\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span> list <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*==============================================================================<br/>\"ElQ\" stands for \"Elements Quantity\". Counts the amount of valid element in the<br/>string s, according to the separator character provided in sep and the escape<br/>character provided in esc.<br/>==============================================================================*/</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> ElQ<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> sep<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> esc <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> q<span class=\"sy0\">,</span> e<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> e<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> q<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> p<span class=\"sy0\">=</span>s<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>p <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">==</span> esc <span class=\"br0\">)</span><br/>            e <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>e<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">==</span> sep <span class=\"br0\">)</span><br/>            q <span class=\"sy0\">+=</span> <span class=\"sy0\">!</span>e<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> q<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*==============================================================================<br/>The actual tokenization function.<br/>Allocates as much dynamic memory as needed to contain the pointers to the<br/>tokenized portions of the string passed as the \"s\" parameter, then looks for the<br/>separators characters sep, paying attention to the occurrences of the escape<br/>character provided in esc. When a valid separator is found, the function swaps<br/>it with a '\\0' terminator character and stores the pointer to the next string<br/>into the array of pointers in dynamic memory. On output, the value of *q is the<br/>number of pointers in the array. The caller is responsible for deallocating with<br/>free() the returned array of pointers when it is no longer needed.<br/>In case of failure, NULL is returned.<br/>==============================================================================*/</span><br/>\u00a0<br/>Str <span class=\"sy0\">*</span>Tokenize<span class=\"br0\">(</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> sep<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> esc<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>q <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Str <span class=\"sy0\">*</span>list <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"sy0\">*</span>q <span class=\"sy0\">=</span> ElQ<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> sep<span class=\"sy0\">,</span> esc <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    list <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Str<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> list <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> e<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/>        i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        list<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> e<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> p<span class=\"sy0\">=</span>s<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>p <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">==</span> esc <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                e <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>e<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">==</span> sep <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>e <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                list<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                e <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> list<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 41, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> TokenizeAStringWithEscaping<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> testcase <span class=\"sy0\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> token <span class=\"kw1\">in</span> testcase<span class=\"sy0\">.</span><span class=\"me1\">Tokenize</span><span class=\"br0\">(</span>separator<span class=\"sy0\">:</span> <span class=\"st0\">'|'</span>, escape<span class=\"sy0\">:</span> <span class=\"st0\">'^'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> token<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Adding a\u00a0: so we can see empty lines</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> Tokenize<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">string</span> input, <span class=\"kw4\">char</span> separator, <span class=\"kw4\">char</span> escape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> buffer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">bool</span> escaping <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"kw1\">in</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>escaping<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                buffer<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                escaping <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> escape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                escaping <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> separator<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                buffer<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>buffer<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> input<span class=\"br0\">[</span>input<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> separator<span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> buffer<span class=\"sy0\">.</span><span class=\"me1\">Flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Flush<span class=\"br0\">(</span><span class=\"kw1\">this</span> StringBuilder stringBuilder<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> result <span class=\"sy0\">=</span> stringBuilder<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stringBuilder<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "COBOL", "loc": 136, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FORMAT FREE<br/><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> <span class=\"st0\">'tokenizewithescaping'</span><span class=\"sy0\">.</span><br/>environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>repository<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span> escape-<span class=\"kw4\">char</span> <span class=\"kw3\">pic</span> x <span class=\"kw3\">value</span> <span class=\"st0\">'^'</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> separator-<span class=\"kw4\">char</span> <span class=\"kw3\">pic</span> x <span class=\"kw3\">value</span> <span class=\"st0\">'|'</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> reference-<span class=\"kw3\">string</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/>   <span class=\"st0\">'one^|uno||three^^^^|four^^^|^cuatro|'</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span> input-<span class=\"kw3\">string</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> c <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> escaped <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span> t <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> t-<span class=\"kw4\">max</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> t-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">32</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> token-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">32</span><span class=\"sy0\">.</span><br/>   <span class=\"nu0\">03</span>  token-len <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>   <span class=\"nu0\">03</span>  token <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span> l <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> l-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">16</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span> error-found <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>start-tokenize-with-escaping<span class=\"sy0\">.</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span> reference-<span class=\"kw3\">string</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'token'</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'^^^^^^^^'</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'||||||||'</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">all</span> <span class=\"st0\">'token'</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">all</span> <span class=\"st0\">'t|'</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> input-<span class=\"kw3\">string</span><br/>    <span class=\"kw2\">perform</span> tokenize<br/>\u00a0<br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>\u00a0<br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>    <span class=\"sy0\">.</span><br/>tokenize<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'string:'</span><br/>    <span class=\"kw2\">display</span> input-<span class=\"kw3\">string</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'N'</span> <span class=\"kw2\">to</span> escaped error-found<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> t-<span class=\"kw4\">max</span><br/>    <span class=\"kw2\">initialize</span> token-entry<span class=\"br0\">(</span>t-<span class=\"kw4\">max</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> l<br/>\u00a0<br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> c <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span><br/>    c &gt; <span class=\"kw4\">length</span><span class=\"br0\">(</span>input-<span class=\"kw3\">string</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">or</span> input-<span class=\"kw3\">string</span><span class=\"br0\">(</span>c:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">spaces</span><br/>\u00a0<br/>        <span class=\"kw2\">evaluate</span> escaped <span class=\"kw3\">also</span> input-<span class=\"kw3\">string</span><span class=\"br0\">(</span>c:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">when</span> <span class=\"st0\">'N'</span> <span class=\"kw3\">also</span> escape-<span class=\"kw4\">char</span><br/>            <span class=\"kw2\">move</span> <span class=\"st0\">'Y'</span> <span class=\"kw2\">to</span> escaped<br/>        <span class=\"kw3\">when</span> <span class=\"st0\">'N'</span> <span class=\"kw3\">also</span> separator-<span class=\"kw4\">char</span><br/>            <span class=\"kw2\">perform</span> increment-t-<span class=\"kw4\">max</span><br/>            <span class=\"kw1\">if</span> error-found <span class=\"sy0\">=</span> <span class=\"st0\">'Y'</span><br/>                <span class=\"kw2\">exit</span> paragraph<br/>            end-<span class=\"kw1\">if</span><br/>        <span class=\"kw3\">when</span> <span class=\"st0\">'N'</span> <span class=\"kw3\">also</span> <span class=\"kw3\">any</span><br/>            <span class=\"kw2\">perform</span> move-c<br/>            <span class=\"kw1\">if</span> error-found <span class=\"sy0\">=</span> <span class=\"st0\">'Y'</span><br/>                <span class=\"kw2\">exit</span> paragraph<br/>            end-<span class=\"kw1\">if</span><br/>        <span class=\"kw3\">when</span> <span class=\"st0\">'Y'</span> <span class=\"kw3\">also</span> <span class=\"kw3\">any</span><br/>            <span class=\"kw2\">perform</span> move-c<br/>            <span class=\"kw1\">if</span> error-found <span class=\"sy0\">=</span> <span class=\"st0\">'Y'</span><br/>                <span class=\"kw2\">exit</span> paragraph<br/>            end-<span class=\"kw1\">if</span><br/>            <span class=\"kw2\">move</span> <span class=\"st0\">'N'</span> <span class=\"kw2\">to</span> escaped<br/>        end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw1\">if</span> l &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">move</span> l <span class=\"kw2\">to</span> token-len<span class=\"br0\">(</span>t-<span class=\"kw4\">max</span><span class=\"br0\">)</span><br/>    end-<span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'no tokens'</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'tokens:'</span><br/>        <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> t <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> t &gt; t-<span class=\"kw4\">max</span><br/>            <span class=\"kw1\">if</span> token-len<span class=\"br0\">(</span>t<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><br/>                <span class=\"kw2\">display</span> t <span class=\"st0\">': '</span> token-len<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw3\">space</span> token<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw2\">display</span> t <span class=\"st0\">': '</span> token-len<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>            end-<span class=\"kw1\">if</span><br/>        end-<span class=\"kw2\">perform</span><br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/>increment-t-<span class=\"kw4\">max</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> t-<span class=\"kw4\">max</span> &gt;<span class=\"sy0\">=</span> t-lim<br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'error: at '</span> c <span class=\"st0\">' number of tokens exceeds '</span> t-lim<br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'Y'</span> <span class=\"kw2\">to</span> error-found<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw2\">move</span> l <span class=\"kw2\">to</span> token-len<span class=\"br0\">(</span>t-<span class=\"kw4\">max</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> t-<span class=\"kw4\">max</span><br/>        <span class=\"kw2\">initialize</span> token-entry<span class=\"br0\">(</span>t-<span class=\"kw4\">max</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> l<br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'N'</span> <span class=\"kw2\">to</span> error-found<br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/>move-c<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> l &gt;<span class=\"sy0\">=</span> l-lim<br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'error: at '</span> c <span class=\"st0\">' token length exceeds '</span> l-lim<br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'Y'</span> <span class=\"kw2\">to</span> error-found<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> l<br/>        <span class=\"kw2\">move</span> input-<span class=\"kw3\">string</span><span class=\"br0\">(</span>c:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> token<span class=\"br0\">(</span>t-<span class=\"kw4\">max</span><span class=\"br0\">)</span><span class=\"br0\">(</span>l:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'N'</span> <span class=\"kw2\">to</span> error-found<br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> <span class=\"st0\">'tokenizewithescaping'</span><span class=\"sy0\">.</span> <br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 23, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split <span class=\"br0\">(</span>input separator escape<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>make-string-buffer <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'character <span class=\"sy0\">:</span><span class=\"me1\">adjustable</span> t <span class=\"sy0\">:</span><span class=\"me1\">fill-pointer</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop with token <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-string-buffer<span class=\"br0\">)</span><br/>          with result <span class=\"sy0\">=</span> <span class=\"kw1\">nil</span><br/>          with to-be-escaped <span class=\"sy0\">=</span> <span class=\"kw1\">nil</span><br/>          for ch across input<br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>to-be-escaped<br/>                    <span class=\"br0\">(</span>vector-push-extend ch token<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> to-be-escaped <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span>char<span class=\"sy0\">=</span> ch escape<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> to-be-escaped t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span>char<span class=\"sy0\">=</span> ch separator<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>push token result<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> token <span class=\"br0\">(</span>make-string-buffer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>t<br/>                    <span class=\"br0\">(</span>vector-push-extend ch token<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          finally <span class=\"br0\">(</span>push token result<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>nreverse result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>token <span class=\"br0\">(</span>split <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span> #\\<span class=\"sy0\">|</span> #\\<span class=\"sy0\">^</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"'~A'~%\"</span> token<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 35, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> sample <span class=\"sy0\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>tokenizeString<span class=\"br0\">(</span>sample<span class=\"sy0\">,</span> <span class=\"st0\">'|'</span><span class=\"sy0\">,</span> <span class=\"st0\">'^'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> tokenizeString<span class=\"br0\">(</span><span class=\"kw4\">string</span> source<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> seperator<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> escape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">array</span> <span class=\"sy0\">:</span> appender<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">exception</span> <span class=\"sy0\">:</span> enforce<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> output <span class=\"sy0\">=</span> appender<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> token <span class=\"sy0\">=</span> appender<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> inEsc<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>ch<span class=\"sy0\">;</span> source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inEsc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            inEsc <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> escape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            inEsc <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ch <span class=\"sy0\">==</span> seperator<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            output.<span class=\"me1\">put</span><span class=\"br0\">(</span>token.<span class=\"me1\">data</span>.<span class=\"me1\">idup</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            token.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        token.<span class=\"me1\">put</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    enforce<span class=\"br0\">(</span><span class=\"sy0\">!</span>inEsc<span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid terminal escape\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    output.<span class=\"me1\">put</span><span class=\"br0\">(</span>token.<span class=\"me1\">data</span>.<span class=\"me1\">idup</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> output.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 45, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import extensions'routines.<br/>import system'collections.<br/>import system'routines.<br/>import system'text.<br/>\u00a0<br/>literal extension $op<br/>{<br/>    tokenize separator:separator escape:escape<br/>    [<br/>        var buffer\u00a0:= TextBuffer new.<br/>        var list\u00a0:= ArrayList new.<br/>\u00a0<br/>        bool escaping\u00a0:= false.<br/>        self forEach(:ch)<br/>        [<br/>            if (escaping)<br/>            [<br/>                buffer write:ch.<br/>                escaping\u00a0:= false<br/>            ];<br/>            if (ch == escape)<br/>            [<br/>                escaping\u00a0:= true<br/>            ];<br/>            if (ch == separator)<br/>            [<br/>                list append(buffer literal).<br/>                buffer clear<br/>            ];<br/>            [<br/>                buffer write:ch<br/>            ]<br/>        ].<br/>\u00a0<br/>        ^ list<br/>    ]<br/>}<br/>\u00a0<br/>const literal testcase = \"one^|uno||three^^^^|four^^^|^cuatro|\".<br/>\u00a0<br/>program =<br/>[<br/>    testcase tokenize separator:\"|\" escape:\"^\"; forEach:printingLn<br/>].</pre>"}, {"lang": "F#", "loc": 28, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span>.<span class=\"me1\">RegularExpressions</span><br/>\u00a0<br/><span class=\"co3\">(*<br/>    .NET regexes have unlimited look-behind, so we can look for separators<br/>    which are preceeded by an even number of (or no) escape characters<br/>*)</span><br/><span class=\"kw1\">let</span> split esc sep s <span class=\"sy0\">=</span><br/>    Regex.<span class=\"me1\">Split</span> <span class=\"br0\">(</span><br/>        s,<br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"(?&lt;=(?:<span class=\"es0\">\\b</span>|[^{0}])(?:{0}{0})*){1}\"</span>, Regex.<span class=\"me1\">Escape</span><span class=\"br0\">(</span>esc<span class=\"br0\">)</span>, Regex.<span class=\"me1\">Escape</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> unescape esc s <span class=\"sy0\">=</span><br/>    Regex.<span class=\"me1\">Replace</span><span class=\"br0\">(</span><br/>        s,<br/>        Regex.<span class=\"me1\">Escape</span><span class=\"br0\">(</span>esc<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"(.)\"</span>,<br/>        <span class=\"st0\">\"$1\"</span><br/>        <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>esc, sep<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"^\"</span>, <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><br/>    <span class=\"sy0\">|&gt;</span> split esc sep<br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span>unescape esc<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"'%s'\"</span> s<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Fortran", "loc": 44, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> SPLIT<span class=\"br0\">(</span>TEXT,SEP,ESC<span class=\"br0\">)</span>\t<span class=\"co1\">!Identifies and prints tokens from within a text.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!To be scanned.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> SEP\t<span class=\"co1\">!The only separator for tokens.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> ESC\t<span class=\"co1\">!Miscegnator.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span> TOKEN\t<span class=\"co1\">!Surely sufficient space.</span><br/>       <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!Counts the tokens as they're found.</span><br/>       <span class=\"kw3\">INTEGER</span> I\t<span class=\"co1\">!Steps through the text.</span><br/>       <span class=\"kw3\">INTEGER</span> L\t<span class=\"co1\">!Length of the token so far accumulated.</span><br/>       <span class=\"kw3\">LOGICAL</span> ESCAPING\t<span class=\"co1\">!Miscegnatory state.</span><br/>        N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!No tokens so far.</span><br/>        L <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Nor any text for the first.</span><br/>        ESCAPING <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!And the state is good.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Step through the text.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ESCAPING<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Are we in a mess?</span><br/>            L <span class=\"sy0\">=</span> L <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Yes. An ESC character had been seen.</span><br/>            TOKEN<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span> <span class=\"sy0\">=</span> TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!So, whatever follows is taken as itself.</span><br/>            ESCAPING <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t\t<span class=\"co1\">!There are no specially-recognised names.</span><br/>           <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!Otherwise, we're in text to inspect.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">ESC</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!So, is it a troublemaker?</span><br/>             ESCAPING <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t\t\t<span class=\"co1\">!Yes! Trouble is to follow.</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">SEP</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!If instead a separator,</span><br/>             <span class=\"kw1\">CALL</span> SPLOT\t\t\t\t<span class=\"co1\">!Then the token up to it is complete.</span><br/>            <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!Otherwise, a simple constituent character.</span><br/>             L <span class=\"sy0\">=</span> L <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t\t<span class=\"co1\">!So, count it in.</span><br/>             TOKEN<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span> <span class=\"sy0\">=</span> TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t\t<span class=\"co1\">!And copy it in.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for grist.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!So much for that character.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next.</span><br/><span class=\"co1\">Completes on end-of-text with L &gt; 0, or, if the last character had been SEP, a null token is deemed to be following.</span><br/>        <span class=\"kw1\">CALL</span> SPLOT\t<span class=\"co1\">!Tail end.</span><br/>       <span class=\"kw1\">CONTAINS</span>\t<span class=\"co1\">!Save on having two copies of this code.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> SPLOT\t<span class=\"co1\">!Show the token and scrub.</span><br/>         N <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Another one.</span><br/>         WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> N,TOKEN<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span>\t<span class=\"co1\">!Reveal.</span><br/>    <span class=\"nu0\">1</span>    FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Token \"</span>,I0,<span class=\"st0\">\" &gt;\"</span>,A,<span class=\"st0\">\"&lt;\"</span><span class=\"br0\">)</span><span class=\"co1\">!Fancy layout.</span><br/>         L <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t\t\t<span class=\"co1\">!Prepare for a fresh token.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SPLOT\t<span class=\"co1\">!A brief life.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SPLIT\t<span class=\"co1\">!And then oblivion.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> SPLIT<span class=\"br0\">(</span><span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span>,<span class=\"st0\">\"|\"</span>,<span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "Go", "loc": 44, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"errors\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> TokenizeString<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">,</span> sep<span class=\"sy1\">,</span> escape rune<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>tokens <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> runes <span class=\"sy1\">[]</span>rune<br/>\tinEscape <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> inEscape<span class=\"sy1\">:</span><br/>\t\t\tinEscape <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>\t\t\t<span class=\"kw1\">fallthrough</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\t\trunes <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>runes<span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">case</span> r <span class=\"sy3\">==</span> escape<span class=\"sy1\">:</span><br/>\t\t\tinEscape <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\t\t<span class=\"kw1\">case</span> r <span class=\"sy3\">==</span> sep<span class=\"sy1\">:</span><br/>\t\t\ttokens <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>tokens<span class=\"sy1\">,</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>runes<span class=\"sy1\">))</span><br/>\t\t\trunes <span class=\"sy2\">=</span> runes<span class=\"sy1\">[:</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\ttokens <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>tokens<span class=\"sy1\">,</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>runes<span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">if</span> inEscape <span class=\"sy1\">{</span><br/>\t\terr <span class=\"sy2\">=</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"invalid terminal escape\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> tokens<span class=\"sy1\">,</span> err<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> sample <span class=\"sy2\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><br/>\t<span class=\"kw1\">const</span> separator <span class=\"sy2\">=</span> <span class=\"st0\">'|'</span><br/>\t<span class=\"kw1\">const</span> escape <span class=\"sy2\">=</span> <span class=\"st0\">'^'</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Input:  \u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> sample<span class=\"sy1\">)</span><br/>\ttokens<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> TokenizeString<span class=\"sy1\">(</span>sample<span class=\"sy1\">,</span> separator<span class=\"sy1\">,</span> escape<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"error:\"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Tokens:\u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> tokens<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">splitEsc <span class=\"sy0\">::</span> <span class=\"br0\">(</span>Foldable t1<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">-&gt;</span> t <span class=\"sy0\">-&gt;</span> t1 t <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>splitEsc sep esc <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> process <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> process <span class=\"br0\">(</span>st<span class=\"sy0\">,</span> r:rs<span class=\"br0\">)</span> ch<br/>          <span class=\"sy0\">|</span> st <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">==</span> esc               <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>      r:rs<span class=\"br0\">)</span><br/>          <span class=\"sy0\">|</span> st <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">==</span> sep               <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>   <span class=\"br0\">[</span><span class=\"br0\">]</span>:r:rs<span class=\"br0\">)</span><br/>          <span class=\"sy0\">|</span> st <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> sep <span class=\"sy0\">==</span> esc <span class=\"sy0\">&amp;&amp;</span> ch <span class=\"sy0\">/=</span> sep <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>ch<span class=\"br0\">]</span>:r:rs<span class=\"br0\">)</span><br/>          <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>                          <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ch:r<span class=\"br0\">)</span>:rs<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 24, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>tokenize1=: tokenize =: <span class=\"st_h\">'^|'</span>&amp;$:\u00a0:<span class=\"sy0\">(</span><span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><span class=\"sy0\">)</span><br/> <span class=\"st_h\">'ESC SEP'</span> =. <span class=\"kw2\">x</span><br/> STATE =. <span class=\"nu0\">0</span><br/> RESULT =. <span class=\"nu0\">0</span> $ a:<br/> TOKEN =. <span class=\"st_h\">''</span><br/> <span class=\"re0\">for_C.</span> <span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>  <span class=\"kw1\">if.</span> STATE <span class=\"kw1\">do.</span><br/>   TOKEN =. TOKEN , C<br/>   STATE =. <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">else.</span><br/>   <span class=\"kw1\">if.</span> C = ESC <span class=\"kw1\">do.</span><br/>    STATE =. <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">elseif.</span> C = SEP <span class=\"kw1\">do.</span><br/>    RESULT =. RESULT , &lt; TOKEN<br/>    TOKEN =. <span class=\"st_h\">''</span><br/>   <span class=\"kw1\">elseif.</span> <span class=\"kw1\">do.</span><br/>    TOKEN =. TOKEN , C<br/>   <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/> <span class=\"kw1\">end.</span><br/> RESULT =. RESULT , &lt; TOKEN<br/><span class=\"sy0\">)</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 44, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TokenizeStringWithEscaping <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> sample <span class=\"sy0\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> separator <span class=\"sy0\">=</span> <span class=\"st0\">'|'</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> escape <span class=\"sy0\">=</span> <span class=\"st0\">'^'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>tokenizeString<span class=\"br0\">(</span>sample, separator, escape<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> tokenizeString<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s, <span class=\"kw4\">char</span> sep, <span class=\"kw4\">char</span> escape<span class=\"br0\">)</span><br/>            <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> tokens <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span> inEscape <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"sy0\">:</span> s.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inEscape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                inEscape <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> escape<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                inEscape <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> sep<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                tokens.<span class=\"me1\">add</span><span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sb.<span class=\"me1\">setLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inEscape<span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Invalid terminal escape\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        tokens.<span class=\"me1\">add</span><span class=\"br0\">(</span>sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> tokens<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 14, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> tokenize<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> esc<span class=\"sy0\">,</span> sep<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> e<span class=\"sy0\">=</span>s.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>e<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> esc<span class=\"br0\">)</span> t<span class=\"sy0\">+=</span>s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">!=</span> sep<span class=\"br0\">)</span> t<span class=\"sy0\">+=</span>c<br/>\t\t<span class=\"kw1\">else</span> a.<span class=\"me1\">push</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">,</span> t<span class=\"sy0\">=</span><span class=\"st0\">''</span>\t\t<br/>\t<span class=\"br0\">}</span><br/>\ta.<span class=\"me1\">push</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> a<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"st0\">'one^|uno||three^^^^|four^^^|^cuatro|'</span><br/>document.<span class=\"me1\">write</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span>\t<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy0\">=</span>tokenize<span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">'^'</span><span class=\"sy0\">,</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> document.<span class=\"me1\">write</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">': '</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span></pre>"}, {"lang": "jq", "loc": 36, "block": "<pre class=\"text highlighted_source\"># Tokenize the input using the string \"escape\" as the prefix escape string<br/>def tokenize(separator; escape):<br/>\u00a0<br/>  # Helper functions:<br/>  # mapper/1 is like map/1, but for each element, $e, in the input array,<br/>  # if $e is an array, then it is inserted,<br/>  # otherwise the elements of ($e|f) are inserted.<br/>  def mapper(f): reduce .[] as $e<br/>    ( [];<br/>      if ($e|type) == \"array\" then . + [$e] else . + ($e | f) end )\u00a0;<br/>\u00a0<br/>  # interpolate x<br/>  def interpolate(x):<br/>    reduce .[] as $i ([]; . +  [$i, x]) | .[0:-1];<br/>\u00a0<br/>  def splitstring(s; twixt):<br/>    if type == \"string\" then split(s) | interpolate(twixt)<br/>    else .<br/>    end;<br/>\u00a0<br/>  # concatenate sequences of non-null elements:<br/>  def reform:<br/>    reduce .[] as $x ([];<br/>      if $x == null and .[-1] == null then .[0:-1] + [\"\", null]<br/>      elif $x == null then . + [null]<br/>      elif .[-1] == null then .[0:-1] + [$x]<br/>      else .[0:-1] +  [ .[-1] + $x ]<br/>      end)<br/>    | if .[-1] == null then .[-1] = \"\" else . end;<br/>\u00a0<br/>  splitstring(escape + escape; [escape])<br/>  | mapper( splitstring( escape + separator; [separator]) )<br/>  | mapper( splitstring( separator; null ) )<br/>  | map( if type == \"string\" then split(escape) else . end)<br/>  | flatten<br/>  | reform\u00a0;</pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\">function tokenize2(s::AbstractString, sep::Char, esc::Char)<br/>    SPE = \"\\ufffe\"<br/>    SPF = \"\\uffff\"<br/>    s = replace(s, \"$esc$esc\", SPE) |&gt;<br/>        s -&gt; replace(s, \"$esc$sep\", SPF) |&gt;<br/>        s -&gt; last(s) == esc\u00a0? string(replace(s[1:end-1], esc, \"\"), esc)\u00a0: replace(s, esc, \"\")<br/>    return map(split(s, sep)) do token<br/>        token = replace(token, SPE, esc)<br/>        return replace(token, SPF, sep)<br/>    end<br/>end<br/>\u00a0<br/>@show tokenize2(\"one^|uno||three^^^^|four^^^|^cuatro|\", '|', '^')</pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SPE <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es3\">\\ufffe</span>\"</span>  <span class=\"co1\">// unused unicode char in Specials block</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SPF <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es3\">\\uffff</span>\"</span>  <span class=\"co1\">// ditto</span><br/>\u00a0<br/>fun tokenize<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> String, sep<span class=\"sy0\">:</span> Char, esc<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> str.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"$esc$esc\"</span>, SPE<span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"$esc$sep\"</span>, SPF<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> esc<span class=\"br0\">)</span> <span class=\"co1\">// i.e. 'esc' not escaping anything</span><br/>        s.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"$esc\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> + esc<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <br/>        s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"$esc\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s.<span class=\"me1\">split</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">replace</span><span class=\"br0\">(</span>SPE, <span class=\"st0\">\"$esc\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>SPF, <span class=\"st0\">\"$sep\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> str <span class=\"sy0\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sep <span class=\"sy0\">=</span> <span class=\"st0\">'|'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> esc <span class=\"sy0\">=</span> <span class=\"st0\">'^'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> items <span class=\"sy0\">=</span> tokenize<span class=\"br0\">(</span>str, sep, esc<span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>item in items<span class=\"br0\">)</span> println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>item.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"(empty)\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> item<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 43, "block": "<pre class=\"text highlighted_source\">-- in some movie script<br/>\u00a0<br/>on tokenize (str, sep, esc)<br/>  l = []<br/>  _player.itemDelimiter = sep<br/>  cnt = str.item.count<br/>  repeat with i = 1 to cnt<br/>    prev = l.getLast() -- can be VOID<br/>    if _trailEscCount(prev, esc) mod 2 then<br/>      l[l.count] = prev.char[1..prev.length-1]&amp;sep&amp;str.item[i]<br/>    else<br/>      l.add(str.item[i])<br/>    end if<br/>  end repeat<br/>  -- remove escape characters from tokens<br/>  cnt = l.count<br/>  repeat with i = 1 to cnt<br/>    l[i] = _removeEsc(l[i], esc)<br/>  end repeat<br/>  return l<br/>end<br/>\u00a0<br/>-- counts number of trailing escape characters<br/>on _trailEscCount (str, esc)<br/>  n = 0<br/>  repeat with i = str.length down to 1<br/>    if str.char[i]=esc then n=n+1<br/>    else exit repeat<br/>  end repeat<br/>  return n<br/>end<br/>\u00a0<br/>-- could be implemented more efficiently by using offset()<br/>on _removeEsc (str, esc)<br/>  cnt = str.length-1<br/>  repeat with i = 1 to cnt<br/>    if str.char[i]=esc then<br/>      delete char i of str<br/>      cnt = cnt-1<br/>    end if<br/>  end repeat<br/>  return str<br/>end</pre>"}, {"lang": "Lua", "loc": 33, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> tokenise <span class=\"br0\">(</span>str<span class=\"sy0\">,</span> sep<span class=\"sy0\">,</span> esc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> strList<span class=\"sy0\">,</span> word<span class=\"sy0\">,</span> escaped<span class=\"sy0\">,</span> ch <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>str <span class=\"kw1\">do</span><br/>        ch <span class=\"sy0\">=</span> str<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> ch <span class=\"sy0\">==</span> esc <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> escaped <span class=\"kw1\">then</span><br/>                word <span class=\"sy0\">=</span> word <span class=\"sy0\">..</span> ch<br/>                escaped <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>            <span class=\"kw1\">else</span><br/>                escaped <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">elseif</span> ch <span class=\"sy0\">==</span> sep <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> escaped <span class=\"kw1\">then</span><br/>                word <span class=\"sy0\">=</span> word <span class=\"sy0\">..</span> ch<br/>                escaped <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>strList<span class=\"sy0\">,</span> word<span class=\"br0\">)</span><br/>                word <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">else</span><br/>            escaped <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>            word <span class=\"sy0\">=</span> word <span class=\"sy0\">..</span> ch<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>strList<span class=\"sy0\">,</span> word<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> strList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> testStr <span class=\"sy0\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><br/><span class=\"kw1\">local</span> testSep<span class=\"sy0\">,</span> testEsc <span class=\"sy0\">=</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"^\"</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>tokenise<span class=\"br0\">(</span>testStr<span class=\"sy0\">,</span> testSep<span class=\"sy0\">,</span> testEsc<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "OCaml", "loc": 18, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> split_with_escaping <span class=\"re1\">~esc</span> <span class=\"re1\">~sep</span> s <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> buf <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">16</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop i <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> len <span class=\"kw1\">then</span> <span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>contents buf<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> esc <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> len <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>add_char buf s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      loop <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sep <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>contents buf <span class=\"kw1\">in</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>clear buf<span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">::</span> loop <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\"><span class=\"kw2\">Buffer</span></a><span class=\"sy0\">.</span>add_char buf s<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      loop <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>  loop <span class=\"nu0\">0</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> tokenize <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"re0\">$sep</span><span class=\"sy0\">,</span> <span class=\"re0\">$esc</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/quotemeta.html\"><span class=\"kw3\">quotemeta</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/quotemeta.html\"><span class=\"kw3\">quotemeta</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@fields</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/$esc . (*SKIP)(*FAIL) | $sep/sx</span><span class=\"sy0\">,</span> <span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/</span><span class=\"re0\">$esc</span><span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"co3\">$1</span><span class=\"sy0\">/</span>gsr <span class=\"br0\">}</span> <span class=\"re0\">@fields</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> tokenize <span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$sep</span><span class=\"sy0\">!,</span> <span class=\"sy0\">:</span><span class=\"re0\">$esc</span><span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$string</span><span class=\"sy0\">.</span><span class=\"kw3\">match</span><span class=\"br0\">(</span><span class=\"co2\">/([ &lt;!before $sep | $esc&gt; . | $esc . ]*)+\u00a0% $sep/</span><span class=\"br0\">)</span>\\<br/>                  <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">subst</span><span class=\"sy0\">:</span> <span class=\"co2\">/$esc )&gt; ./</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"'$_'\"</span> <span class=\"kw1\">for</span> tokenize <span class=\"st_h\">'one^|uno||three^^^^|four^^^|^cuatro|'</span><span class=\"sy0\">,</span> sep <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'|'</span><span class=\"sy0\">,</span> esc <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'^'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 26, "block": "<pre class=\"text highlighted_source\">function tokenize(string s, integer sep, integer esc)<br/>sequence ret = {}<br/>string this = \"\"<br/>integer skip = 0<br/>\u00a0<br/>    if length(s)!=0 then<br/>        for i=1 to length(s) do<br/>            integer si = s[i]<br/>            if skip then<br/>                this &amp;= si<br/>                skip = 0<br/>            elsif si=esc then<br/>                skip = 1<br/>            elsif si=sep then<br/>                ret = append(ret,this)<br/>                this = \"\"<br/>            else<br/>                this &amp;= si<br/>            end if<br/>        end for<br/>        ret = append(ret,this)<br/>    end if<br/>    return ret<br/>end function<br/>\u00a0<br/>?tokenize(\"one^|uno||three^^^^|four^^^|^cuatro|\",'|','^')</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de tokenize (Str Sep Esc)<br/>   (split<br/>      (make<br/>         (for (L (chop Str)  L)<br/>            (let C (pop 'L)<br/>               (cond<br/>                  ((= C Esc) (link (pop 'L)))<br/>                  ((= C Sep) (link 0))<br/>                  (T (link C)) ) ) ) )<br/>      0 ) )</pre>"}, {"lang": "PowerShell", "loc": 31, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Split<span class=\"sy0\">-</span>String <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$String</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"re0\">$Separator</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"re0\">$Escape</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$String</span> <span class=\"kw4\">-notmatch</span> <span class=\"st0\">\"\\$Separator|\\$Escape\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"re0\">$String</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"re3\">bool</span><span class=\"br0\">]</span><span class=\"re0\">$escaping</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$String</span>.Length; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"re0\">$character</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span>.Substring<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$escaping</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$character</span><br/>            <span class=\"re0\">$escaping</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$character</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Separator</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$output</span>; <span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>; <span class=\"kw3\">break</span><span class=\"br0\">}</span><br/>                <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Escape</span><span class=\"br0\">}</span>    <span class=\"br0\">{</span><span class=\"re0\">$escaping</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span>   \u00a0; <span class=\"kw3\">break</span><span class=\"br0\">}</span><br/>                Default             <span class=\"br0\">{</span><span class=\"re0\">$output</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$character</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$String</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Separator</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">String</span><span class=\"br0\">]</span>::Empty<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 26, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> token_with_escape<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> escape <span class=\"sy0\">=</span> <span class=\"st0\">'^'</span><span class=\"sy0\">,</span> separator <span class=\"sy0\">=</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<br/>        Issue  python -m doctest thisfile.py  to run the doctests.<br/>\u00a0<br/>        &gt;&gt;&gt; print(token_with_escape('one^|uno||three^^^^|four^^^|^cuatro|'))<br/>        ['one|uno', '', 'three^^', 'four^|cuatro', '']<br/>    '''</span><br/>    result <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">token</span> <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>    state <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> a:<br/>        <span class=\"kw1\">if</span> state <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            <span class=\"kw1\">if</span> c <span class=\"sy0\">==</span> escape:<br/>                state <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">elif</span> c <span class=\"sy0\">==</span> separator:<br/>                result.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">token</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">token</span> <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>            <span class=\"kw1\">else</span>:<br/>                <span class=\"kw3\">token</span> +<span class=\"sy0\">=</span> c<br/>        <span class=\"kw1\">elif</span> state <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw3\">token</span> +<span class=\"sy0\">=</span> c<br/>            state <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    result.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw3\">token</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> result<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require racket/match)<br/>\u00a0<br/>;; Returns a tokenising function based on sep and esc<br/>(define ((tokenise-with-escape sep esc) str)<br/>  (define tsil-&gt;string (compose list-&gt;string reverse))<br/>  (define (inr rem l-acc acc)<br/>    (match rem<br/>      ['() (if (and (null? acc) (null? l-acc)) null (reverse (cons (tsil-&gt;string l-acc) acc)))]<br/>      [(list (== sep)   tl ...) (inr tl null (cons (tsil-&gt;string l-acc) acc))]<br/>      [(list (== esc) c tl ...) (inr tl (cons c l-acc) acc)]<br/>      [(list c          tl ...) (inr tl (cons c l-acc) acc)]))<br/>  (inr (string-&gt;list str) null null))<br/>\u00a0<br/>;; This is the tokeniser that matches the parameters in the task<br/>(define task-tokeniser (tokenise-with-escape #\\| #\\^))<br/>\u00a0<br/>(define (report-input-output str)<br/>  (printf \"Input:  ~s~%Output: ~s~%~%\" str (task-tokeniser str)))<br/>\u00a0<br/>(report-input-output \"one^|uno||three^^^^|four^^^|^cuatro|\")<br/>(report-input-output \"\")<br/>(report-input-output \"|\")<br/>(report-input-output \"^\")<br/>(report-input-output \".\")</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates tokenizing and displaying a string with escaping sequences. */</span><br/>  str = <span class=\"st0\">'one^|uno||three^^^^|four^^^|^cuatro|'</span>   <span class=\"coMULTI\">/*the character string to be tokenized.*/</span><br/>  esc = <span class=\"st0\">'^'</span>                                      <span class=\"coMULTI\">/* \"    escape  character to be used.  */</span><br/>  sep = <span class=\"st0\">'|'</span>                                      <span class=\"coMULTI\">/* \"  separator     \"      \"  \"   \"    */</span><br/>  out =                                          <span class=\"coMULTI\">/* \"  output string  (so far).         */</span><br/>eMode = <span class=\"nu0\">0</span>                                        <span class=\"coMULTI\">/*a flag,  escape is in progress.      */</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span>;  _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>str, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*parse a single character at a time.  */</span><br/>  <span class=\"kw1\">if</span> eMode   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; out=out <span class=\"sy0\">||</span> _;  eMode=<span class=\"nu0\">0</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*are we in escape mode? */</span><br/>  <span class=\"kw1\">if</span> _==esc  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;                eMode=<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*is it an escape char\u00a0? */</span><br/>  <span class=\"kw1\">if</span> _==sep  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; <span class=\"kw1\">call</span> show;               <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/* \"  \" a separator char?*/</span><br/>  out=out <span class=\"sy0\">||</span> _                                                 <span class=\"coMULTI\">/*append the character.  */</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> out<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> _==sep  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> show             <span class=\"coMULTI\">/*handle a residual str or a separator.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show:  <span class=\"kw1\">say</span>  <span class=\"st0\">'[length'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>out<span class=\"br0\">)</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"st0\">\"]\"</span>   out;             out=;               <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>tokenize(\"one^|uno||three^^^^|four^^^|^cuatro|\", \"|\", \"^\")<br/>\u00a0<br/>func tokenize(src, sep, esc)<br/>field = 1<br/>escaping = false<br/>see \"\" + field + \" \"<br/>for i = 1 to len(src)<br/>    char = substr(src, i, 1)<br/>    if escaping <br/>       see char<br/>       escaping = false<br/>    else<br/>       switch char <br/>              on sep<br/>                 see nl<br/>                 field = field + 1<br/>                 see \"\" + field + \" \"<br/>              on esc<br/>                 escaping = true<br/>              other<br/>                 see char <br/>       off<br/>    ok<br/>next<br/>see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> tokenize<span class=\"br0\">(</span><span class=\"kw3\">string</span>, sep, esc<span class=\"br0\">)</span><br/>  sep = <span class=\"kw4\">Regexp</span>.<span class=\"me1\">escape</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span><br/>  esc = <span class=\"kw4\">Regexp</span>.<span class=\"me1\">escape</span><span class=\"br0\">(</span>esc<span class=\"br0\">)</span><br/>  <span class=\"kw3\">string</span>.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\G <span class=\"br0\">(</span>?:^ <span class=\"sy0\">|</span> <span class=\"co1\">#{sep}) (?: [^#{sep}#{esc}] | #{esc} .)*/x).collect do |m|</span><br/>    m.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"co1\">#{esc}(.)/, '\\1').gsub(/^#{sep}/, '')</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> tokenize<span class=\"br0\">(</span><span class=\"st0\">'one^|uno||three^^^^|four^^^|^cuatro|'</span>, <span class=\"st0\">'|'</span>, <span class=\"st0\">'^'</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TokenizeStringWithEscaping0 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>markerSpE,markerSpF<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">\\ufffe</span>\"</span> , <span class=\"st0\">\"<span class=\"es3\">\\uffff</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> tokenize<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> String, sep<span class=\"sy0\">:</span> String, esc<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s0 <span class=\"sy0\">=</span> str.<span class=\"me1\">replace</span><span class=\"br0\">(</span> esc + esc, markerSpE<span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>esc + sep, markerSpF<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s0.<span class=\"me1\">last</span>.<span class=\"me1\">toString</span> <span class=\"sy0\">==</span> esc<span class=\"br0\">)</span> s0.<span class=\"me1\">replace</span><span class=\"br0\">(</span>esc, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> + esc <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> s0.<span class=\"me1\">replace</span><span class=\"br0\">(</span>esc, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    s.<span class=\"me1\">split</span><span class=\"br0\">(</span>sep.<span class=\"me1\">head</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>markerSpE, esc<span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>markerSpF, sep<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> str <span class=\"sy0\">=</span> <span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span><br/>\u00a0<br/>  tokenize<span class=\"br0\">(</span>str, <span class=\"st0\">\"|\"</span>, <span class=\"st0\">\"^\"</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>it <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>it.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> <span class=\"st0\">\"&lt;empty token&gt;\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> it<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func tokenize<span class=\"br0\">(</span><span class=\"kw3\">string</span>, sep, esc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var fields = <span class=\"kw3\">string</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><br/>        Regex<span class=\"br0\">(</span>esc.<span class=\"me1\">escape</span> <span class=\"sy0\">+</span> <span class=\"st0\">'.(*SKIP)(*FAIL)|'</span> <span class=\"sy0\">+</span> sep.<span class=\"me1\">escape</span>, <span class=\"st0\">'s'</span><span class=\"br0\">)</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">)</span><br/>    fields.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span>esc <span class=\"sy0\">+</span> <span class=\"st0\">'(.)'</span><span class=\"br0\">)</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s1<span class=\"sy0\">|</span> s1 <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>tokenize<span class=\"br0\">(</span><span class=\"st0\">\"one^|uno||three^^^^|four^^^|^cuatro|\"</span>, <span class=\"st0\">'|'</span>, <span class=\"st0\">'^'</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>str<span class=\"sy0\">|</span><br/>    say str.<span class=\"me1\">dump</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 34, "block": "<pre class=\"tcl highlighted_source\">oo::<span class=\"me1\">class</span> create tokens <span class=\"br0\">{</span><br/>    constructor <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"br0\">[</span>coroutine Next my Iter <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>        oo::<span class=\"me1\">objdefine</span> <span class=\"br0\">[</span>self<span class=\"br0\">]</span> forward next Next<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> Iter <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        yield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            yield <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$s</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> -code <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> tokenize <span class=\"br0\">{</span>s <span class=\"br0\">{</span>sep |<span class=\"br0\">}</span> <span class=\"br0\">{</span>escape ^<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> part <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">set</span> parts <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">set</span> iter <span class=\"br0\">[</span>tokens new <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"re0\">$iter</span> next<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> eq <span class=\"re0\">$escape</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">append</span> part <span class=\"br0\">[</span><span class=\"re0\">$iter</span> next<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> eq <span class=\"re0\">$sep</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> parts <span class=\"re0\">$part</span><br/>            <span class=\"kw1\">set</span> part <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">append</span> part <span class=\"re0\">$c</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">lappend</span> parts <span class=\"re0\">$part</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$parts</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>tokenize one^|uno||three^^^^|four^^^|^cuatro| | ^<span class=\"br0\">]</span></pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn tokenize(str,sep,esc){<br/>   sink:=Sink(String);<br/>   foreach c in (str){<br/>      switch(c){<br/>         case(esc){ sink.write(__cWalker.next()); }  // error if ^EoS<br/>\t case(sep){ sink.write(\"\\xff\"); }<br/>\t else     { sink.write(c) }<br/>      }<br/>   }<br/>   sink.close().split(\"\\xff\");<br/>}</pre>"}]}