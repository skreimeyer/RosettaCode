{"task": "Generate_lower_case_ASCII_alphabet", "blocks": [{"lang": "0815", "loc": 1, "block": "<pre class=\"text highlighted_source\">&lt;:61:~}:000:&gt;&gt;&amp;{~&lt;:7a:-#:001:&lt;:1:+^:000:</pre>"}, {"lang": "360 Assembly", "loc": 28, "block": "<pre class=\"text highlighted_source\">*        Generate lower case alphabet - 15/10/2015<br/>LOWER    CSECT<br/>         USING  LOWER,R15          set base register<br/>         LA     R7,PG              <a class=\"__cf_email__\" data-cfemail=\"ea9a8d83d7aa9a8d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         SR     R6,R6              clear <br/>         IC     R6,=C'a'           char='a'<br/>         BCTR   R6,0               char=char-1<br/>LOOP     LA     R6,1(R6)           char=char+1<br/>         STC    R6,CHAR<br/>         CLI    CHAR,C'i'          if char&gt;'i'<br/>         BNH    OK<br/>         CLI    CHAR,C'j'          and char&lt;'j'<br/>         BL     SKIP               then skip<br/>         CLI    CHAR,C'r'          if char&gt;'r'<br/>         BNH    OK<br/>         CLI    CHAR,C's'          and char&lt;'s'<br/>         BL     SKIP               then skip<br/>OK       MVC    0(1,R7),CHAR       output char<br/>         LA     R7,1(R7)           pgi=pgi+1<br/>SKIP     CLI    CHAR,C'z'          if char='z'<br/>         BNE    LOOP               loop<br/>         XPRNT  PG,26              print buffer<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>CHAR     DS     C                  character<br/>PG       DS     CL26               buffer<br/>         YREGS<br/>         END    LOWER</pre>"}, {"lang": "6502 Assembly", "loc": 17, "block": "<pre class=\"text highlighted_source\">ASCLOW: PHA            \u00a0; push contents of registers that we<br/>        TXA            \u00a0; shall be using onto the stack<br/>        PHA<br/>        LDA   #$61     \u00a0; ASCII \"a\"<br/>        LDX   #$00<br/>ALLOOP: STA   $2000,X<br/>        INX<br/>        CLC<br/>        ADC   #$01<br/>        CMP   #$7B     \u00a0; have we got beyond ASCII \"z\"?<br/>        BNE   ALLOOP<br/>        LDA   #$00     \u00a0; terminate the string with ASCII NUL<br/>        STA   $2000,X<br/>        PLA            \u00a0; retrieve register contents from<br/>        TAX            \u00a0; the stack<br/>        PLA<br/>        RTS            \u00a0; return</pre>"}, {"lang": "8th", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"\" ( 'a n:+ s:+ ) 0 25 loop<br/>. cr<br/>\u00a0</pre>"}, {"lang": "ABAP", "loc": 3, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">REPORT</span></a> lower_case_ascii<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"kw4\">to_lower</span><span class=\"br0\">(</span> sy<span class=\"sy0\">-</span>abcde <span class=\"br0\">)</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\">   <span class=\"kw3\">type</span> Lower_Case <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Character <span class=\"kw3\">range</span> 'a' .. 'z';</pre>"}, {"lang": "ALGOL 68", "loc": 6, "block": "<pre class=\"algol68 highlighted_source\">    <span class=\"coMULTI\"># in ALGOL 68, a STRING is an array of characters with flexible bounds #</span><br/>    <span class=\"coMULTI\"># so we can declare an array of 26 characters and assign a string      #</span><br/>    <span class=\"coMULTI\"># containing the lower-case letters to it                              #</span><br/>\u00a0<br/>    <span class=\"br0\">[</span> 26 <span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> lc <span class=\"sy1\">:=</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre class=\"text highlighted_source\">      \u2395UCS 96+\u237326</pre>"}, {"lang": "AppleScript", "loc": 38, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>enumFromTo<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"z\"</span><span class=\"br0\">)</span>, \u00ac<br/>        enumFromTo<span class=\"br0\">(</span><span class=\"st0\">\"\ud83d\udc10\"</span>, <span class=\"st0\">\"\ud83d\udc1f\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Enum a =&gt; a -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> m <span class=\"kw3\">is</span> <span class=\"kw1\">integer</span> <span class=\"kw3\">then</span><br/>        enumFromToInt<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        enumFromToChar<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- enumFromToChar\u00a0:: Char -&gt; Char -&gt; [Char]</span><br/><span class=\"kw3\">on</span> enumFromToChar<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>intM, intN<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw1\">id</span> <span class=\"kw3\">of</span> m, <span class=\"kw1\">id</span> <span class=\"kw3\">of</span> n<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> intM <span class=\"kw3\">to</span> intN <span class=\"kw1\">by</span> signum<span class=\"br0\">(</span>intN <span class=\"sy0\">-</span> intM<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> xs <span class=\"kw3\">to</span> character <span class=\"kw1\">id</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> xs<br/><span class=\"kw3\">end</span> enumFromToChar<br/>\u00a0<br/><span class=\"co1\">-- signum\u00a0:: Num -&gt; Num</span><br/><span class=\"kw3\">on</span> signum<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> signum</pre>"}, {"lang": "Applesoft BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">L$=\"abcdefghijklmnopqrstuvwxyz\"</pre>"}, {"lang": "ATS", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>// How to compile:<br/>//<br/>// patscc -DATS_MEMALLOC_LIBC -o lowercase lowercase.dats<br/>//<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () =<br/>{<br/>//<br/>val N = 26<br/>//<br/>val A =<br/>arrayref_tabulate_cloref&lt;char&gt;<br/>(<br/>  i2sz(N), lam(i) =&gt; int2char0(char2int0('a') + sz2i(i))<br/>) (* end of [val] *)<br/>//<br/>} (* end of [main0] *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">:=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><br/>\ta<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">96</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoIt", "loc": 9, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _a2z<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$a2z</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">122</span><br/>\t\t<span class=\"re0\">$a2z</span> <span class=\"sy0\">&amp;=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Chr.htm\"><span class=\"kw3\">Chr</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$a2z</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f GENERATE_LOWER_CASE_ASCII_ALPHABET.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">255</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      c = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span>,i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy5\">:</span>lower<span class=\"sy5\">:</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lower_chars = lower_chars c<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%d:\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"kw4\">length</span><span class=\"br0\">(</span>lower_chars<span class=\"br0\">)</span>,lower_chars<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">      DIM lower&amp;(25)<br/>      FOR i%=0TO25<br/>        lower&amp;(i%)=ASC\"a\"+i%<br/>      NEXT<br/>      END</pre>"}, {"lang": "Batch File", "loc": 13, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>:: This code appends the ASCII characters from 97-122 to\u00a0%alphabet%, removing any room for error.</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>97,1,122<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  cmd /c <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"alphabet=<span class=\"sy0\">!</span><span class=\"re2\">alphabet</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">=exitcodeAscii</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">alphabet</span><span class=\"sy0\">%</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">0\"z\":&gt;\"a\"`#v_  &gt;:#,<a class=\"__cf_email__\" data-cfemail=\"93ccb7d3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>     ^:- 1:&lt;</pre>"}, {"lang": "Bracmat", "loc": 6, "block": "<pre class=\"text highlighted_source\">  a:?seq:?c<br/>&amp;   whl<br/>  ' ( chr$(asc$!c+1):~&gt;z:?c<br/>    &amp;\u00a0!seq\u00a0!c:?seq<br/>    )<br/>&amp;\u00a0!seq</pre>"}, {"lang": "Brainf***", "loc": 26, "block": "<pre class=\"bf highlighted_source\"><span class=\"co1\">Make room for 26 characters</span><br/><span class=\"sy2\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br/><span class=\"sy2\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br/><span class=\"co1\">Set counter to 26</span><br/><span class=\"sy2\">&gt;&gt;</span><br/><span class=\"sy0\">+++++++++++++</span><br/><span class=\"sy0\">+++++++++++++</span><br/><span class=\"co1\">Generate the numbers 1 to 26</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&lt;&lt;</span><span class=\"co1\">    Decrement counter</span><br/>  <span class=\"sy1\">[</span><span class=\"sy0\">+</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\">  Add one to each nonzero cell moving right to left</span><br/>  <span class=\"sy0\">+</span><span class=\"co1\">     Add one to first zero cell encountered</span><br/>  <span class=\"sy1\">[</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"co1\">  Return head to counter</span><br/><span class=\"sy1\">]</span><br/><span class=\"sy2\">&lt;&lt;</span><br/><span class=\"co1\">Add 96 to each cell</span><br/><span class=\"sy1\">[</span><br/><span class=\"sy0\">++++++++++++++++</span><br/><span class=\"sy0\">++++++++++++++++</span><br/><span class=\"sy0\">++++++++++++++++</span><br/><span class=\"sy0\">++++++++++++++++</span><br/><span class=\"sy0\">++++++++++++++++</span><br/><span class=\"sy0\">++++++++++++++++</span><br/><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><br/><span class=\"co1\">Print each cell</span><br/><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy3\">.</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><br/><span class=\"sy0\">++++++++++</span><span class=\"sy3\">.</span><span class=\"co1\"> \\n</span></pre>"}, {"lang": "C", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define N 26</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> lower<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        lower<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 8, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> lower<span class=\"br0\">(</span><span class=\"nu0\">26</span>,<span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">iota</span><span class=\"br0\">(</span>lower.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, lower.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 10, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">internal</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">map</span> char <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span>int \\a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>int \\z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 17, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> lower-case-alphabet-<span class=\"kw3\">program</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  ascii-<span class=\"kw4\">lower-case</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> lower-case-<span class=\"kw3\">alphabet</span> <span class=\"kw3\">pic</span> a<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> character-<span class=\"kw1\">code</span>      <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> loop-counter        <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>control-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> add-next-letter-paragraph <span class=\"kw2\">varying</span> loop-counter <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">until</span> loop-counter <span class=\"kw3\">is</span> <span class=\"kw3\">greater</span> <span class=\"kw3\">than</span> <span class=\"nu0\">26</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> lower-case-<span class=\"kw3\">alphabet</span> <span class=\"kw3\">upon</span> console<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>add-next-letter-paragraph<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">add</span> <span class=\"nu0\">97</span> <span class=\"kw2\">to</span> loop-counter <span class=\"kw2\">giving</span> character-<span class=\"kw1\">code</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span>character-<span class=\"kw1\">code</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> lower-case-<span class=\"kw3\">alphabet</span><span class=\"br0\">(</span>loop-counter:<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 3, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>String.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">97</span>..<span class=\"nu0\">122</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defvar *lower*<br/>  <span class=\"br0\">(</span>loop with a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>char-code #\\a<span class=\"br0\">)</span><br/>        for i below <span class=\"nu0\">26</span><br/>        collect <span class=\"br0\">(</span>code-char <span class=\"br0\">(</span>+ a i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 3, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">:</span> lowercase<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 11, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> atoz<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  ch <span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy1\">..</span><span class=\"st0\">'z'</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">write</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DUP", "loc": 2, "block": "<pre class=\"text highlighted_source\">0\"abcdefghijklmnopqrstuvwxyz\"        {store character values of string in cells 0..length of string-1}<br/>26[$][^^-;,1-]#                      {Loop from 26-26 to 26-0, print the respective cell contents to STDOUT}</pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; 1)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> \\a <span class=\"br0\">(</span>first <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>unicode <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>unicode<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i \\a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span>a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span> <span class=\"kw1\">f</span> g h i j k <span class=\"kw1\">l</span> m n o p q r <span class=\"kw1\">s</span> <span class=\"kw1\">t</span> u v w x y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;2) using a sequence</span><br/><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>take <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span> .. <span class=\"st0\">\"z\"</span><span class=\"br0\">]</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span>a b c <span class=\"kw1\">d</span> <span class=\"kw1\">e</span> <span class=\"kw1\">f</span> g h i j k <span class=\"kw1\">l</span> m n o p q r <span class=\"kw1\">s</span> <span class=\"kw1\">t</span> u v w x y z<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; or</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>letter <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span> .. <span class=\"st0\">\"z\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> letter<span class=\"br0\">)</span><br/>    \u2192 abcdefghijklmnopqrstuvwxyz<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 34, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'collections.<br/>\u00a0<br/>singleton Alphabet\u00a0:: BaseEnumerable<br/>{<br/>    enumerator = Enumerator::<br/>    {<br/>        char current.<br/>\u00a0<br/>        get = current.<br/>\u00a0<br/>        bool next<br/>        [<br/>            if ($nil==current)<br/>            [<br/>                current\u00a0:= $97.<br/>            ];<br/>            if (current\u00a0!= $122)<br/>            [<br/>                current\u00a0:= (current toInt + 1) toChar.<br/>            ];<br/>            [<br/>                ^ false<br/>            ].<br/>\u00a0<br/>            ^ true<br/>        ]<br/>    }.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(Alphabet).<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Enum.to_list(?a ..\u00a0?z)<br/>'abcdefghijklmnopqrstuvwxyz'<br/>iex(2)&gt; Enum.to_list(?a ..\u00a0?z) |&gt; List.to_string<br/>\"abcdefghijklmnopqrstuvwxyz\"</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re6\">$a</span><span class=\"sy1\">,</span><span class=\"re6\">$z</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> lower <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">]</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"%A\"</span> lower</pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">USING: spelling\u00a0;\u00a0! ALPHABET<br/>\u00a0<br/>ALPHABET print<br/>0x61 0x7A [a,b] &gt;string print<br/>: russian-alphabet-without-io ( -- str ) 0x0430 0x0450 [a,b) &gt;string\u00a0;<br/>: russian-alphabet ( -- str ) 0x0451 6 russian-alphabet-without-io insert-nth\u00a0;<br/>russian-alphabet print</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: printit    26 0 do   [char] a I + emit   loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 6, "block": "<pre class=\"fortran highlighted_source\">  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">alpha</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">26</span><br/>    alpha<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span><span class=\"kw4\">iachar</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span></pre>"}, {"lang": "Gambas", "loc": 8, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/asc\"><span class=\"kw2\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/asc\"><span class=\"kw2\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/chr\"><span class=\"kw2\">Chr</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>;<br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 7, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> loweralpha<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tp <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"nu0\">26</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> p <span class=\"sy1\">{</span><br/>\t\tp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">+</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> lower <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\">lower <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'z'</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> lower</pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre>&amp;lcase</pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   thru=: &lt;. + <a class=\"__cf_email__\" data-cfemail=\"10793e50\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>+*<span class=\"sy0\">)</span>@-~<br/>   thru&amp;.<span class=\"sy0\">(</span>a.&amp;i.<span class=\"sy0\">)</span>/<span class=\"st_h\">'az'</span><br/>abcdefghijklmnopqrstuvwxyz</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LowerAscii <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> ch <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> ch <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"sy0\">;</span> ch<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"lower ascii:\u00a0%s, length:\u00a0%s\"</span>, sb, sb.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 17, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>cFrom<span class=\"sy0\">,</span> cTo<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> cRange<span class=\"br0\">(</span>cFrom<span class=\"sy0\">,</span> cTo<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> iStart <span class=\"sy0\">=</span> cFrom.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><br/>      <span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>cTo.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> iStart <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span>iStart <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> cRange<span class=\"br0\">(</span>cFrom<span class=\"sy0\">,</span> cTo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"az\" | explode | [range( .[0]; 1+.[1] )] | implode'</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">@show collect('a':'z')<br/>@show join('a':'z')</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">`c$97+!26</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> alphabet <span class=\"sy0\">=</span> CharArray<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>it + <span class=\"nu0\">97</span><span class=\"br0\">)</span>.<span class=\"me1\">toChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LC3 Assembly", "loc": 15, "block": "<pre class=\"text highlighted_source\">        .ORIG      0x3000<br/>\u00a0<br/>        LD         R0,ASCIIa<br/>        LD         R1,ASCIIz<br/>        NOT        R1,R1<br/>\u00a0<br/>LOOP    OUT<br/>        ADD        R0,R0,1<br/>        ADD        R2,R0,R1<br/>        BRN        LOOP<br/>\u00a0<br/>        HALT<br/>\u00a0<br/>ASCIIa  .FILL      0x61<br/>ASCIIz  .FILL      0x7A</pre>"}, {"lang": "Lingo", "loc": 6, "block": "<pre class=\"text highlighted_source\">alphabet = []<br/>repeat with i = 97 to 122<br/>  alphabet.add(numtochar(i))<br/>end repeat<br/>put alphabet<br/>-- [\"a\", \"b\", \"c\", ... , \"x\", \"y\", \"z\"]</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">show map \"char iseq 97 122</pre>"}, {"lang": "Lua", "loc": 8, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> getAlphabet <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> letters <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> ascii <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><span class=\"sy0\">,</span> <span class=\"nu0\">122</span> <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>letters<span class=\"sy0\">,</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span>ascii<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> letters<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> alpha <span class=\"sy0\">=</span> getAlphabet<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>alpha<span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"br0\">]</span> <span class=\"sy0\">..</span> alpha<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">..</span> alpha<span class=\"br0\">[</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"br0\">)</span> </pre>"}, {"lang": "M2000 Interpreter", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\\\ old style Basic, including a Binary.Or() function<br/>Module OldStyle {<br/>      10 LET A$=\"\"<br/>      20 FOR I=ASC(\"A\") TO ASC(\"Z\")<br/>      30 LET A$=A$+CHR$(BINARY.OR(I, 32))<br/>      40 NEXT I<br/>      50 PRINT A$<br/>}<br/>CALL OldStyle<br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>delete([], makelist(if(alphacharp(ascii(i))) then parse_string(ascii(i)) else [], i, 96, 122));</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">start = 97;<br/>lowerCaseLetters = Table[FromCharacterCode[start + i], {i, 0, 25}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"co2\">'a'</span>:<span class=\"co2\">'z'</span></pre>"}, {"lang": "Mercury", "loc": 16, "block": "<pre class=\"text highlighted_source\">:- module gen_lowercase_ascii.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module char, int, list.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    list.map(char.det_from_int, 0'a .. 0'z, Alphabet),<br/>    io.print_line(Alphabet,\u00a0!IO).<br/>\u00a0<br/>:- end_module gen_lowercase_ascii.</pre>"}, {"lang": "NESL", "loc": 1, "block": "<pre class=\"text highlighted_source\">lower_case_ascii = {code_char(c)\u00a0: c in [97:123]};</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\"># A slice just contains the first and last value<br/>let alpha: Slice[char] = 'a'..'z'<br/>echo alpha # (a: a, b: z)<br/>\u00a0<br/># but can be used to check if a character is in it:<br/>echo 'f' in alpha # true<br/>echo 'G' in alpha # false<br/>\u00a0<br/># A set contains all elements as a bitvector:<br/>let alphaSet: set[char] = {'a'..'z'}<br/>echo alphaSet # {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z}<br/>echo 'f' in alphaSet # true<br/>var someChars = {'a','f','g'}<br/>echo someChars &lt;= alphaSet # true<br/>\u00a0<br/>import sequtils<br/># A sequence:<br/>let alphaSeq = toSeq 'a'..'z'<br/>echo alphaSeq # @[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]<br/>echo alphaSeq[10] # k</pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"nu0\">26</span> <span class=\"sy0\">'</span>a<span class=\"sy0\">'</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>mapi <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i c <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> c <span class=\"sy0\">+</span> i <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int\"><span class=\"kw3\">char_of_int</span></a><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <span class=\"sy0\">=</span><br/><span class=\"br0\">[</span><span class=\"sy0\">|'</span>a<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>b<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>c<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>d<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>e<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>f<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>g<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>h<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>i<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>j<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>k<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>l<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>m<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>n<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>o<span class=\"sy0\">';</span><br/>  <span class=\"sy0\">'</span>p<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>q<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>r<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>s<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>t<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>u<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>v<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>w<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>x<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>y<span class=\"sy0\">';</span> <span class=\"sy0\">'</span>z<span class=\"sy0\">'|</span><span class=\"br0\">]</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">'a' 'z' seqFrom</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">97</span>..<span class=\"nu1\">122</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 11, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> atoz<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tlowAlphabet <span class=\"sy3\">=</span> <span class=\"st0\">'a'</span><span class=\"sy1\">..</span><span class=\"st0\">'z'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  ch <span class=\"sy1\">:</span> tlowAlphabet<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> ch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'a'</span><span class=\"sy0\">..</span><span class=\"st_h\">'z'</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"kw1\">my</span> <span class=\"re0\">@letters</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">..</span><span class=\"st_h\">'z'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">string az = \"\"<br/>    for ch='a' to 'z' do<br/>        az &amp;= ch<br/>    end for<br/>?az</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$lower</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'z'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/var_dump\"><span class=\"kw3\">var_dump</span></a><span class=\"br0\">(</span><span class=\"re0\">$lower</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(mapcar char (range (char \"a\") (char \"z\")))</pre>"}, {"lang": "PL/I", "loc": 15, "block": "<pre class=\"text highlighted_source\">gen: procedure options (main);  /* 7 April 2014. */<br/>   declare 1 ascii union,<br/>             2 letters (26) character (1),<br/>             2 iletters(26) unsigned fixed binary (8),<br/>           letter character(1);<br/>   declare i fixed binary;<br/>\u00a0<br/>   letters(1), letter = lowercase('A');<br/>\u00a0<br/>   do i = 2 to 26;<br/>      iletters(i) = iletters(i-1) + 1;    <br/>   end;<br/>   put edit (letters) (a);<br/>\u00a0<br/>end gen;</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$asString</span> <span class=\"sy0\">=</span> <span class=\"nu0\">97</span>..<span class=\"nu0\">122</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$asArray</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"re0\">$asArray</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">}</span> <span class=\"kw5\">-End</span> <span class=\"br0\">{</span><span class=\"re0\">$asArray</span> <span class=\"sy0\">-</span>join<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"re0\">$asString</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 5, "block": "<pre class=\"prolog highlighted_source\">a_to_z<span class=\"br0\">(</span>From<span class=\"sy4\">,</span> To<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmaplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"sy4\">,</span> <span class=\"br0\">[</span>From<span class=\"sy4\">,</span> To<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>C_From<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>C_To<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">bagof</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>C<span class=\"br0\">]</span><span class=\"sy4\">,</span> between<span class=\"br0\">(</span>C_From<span class=\"sy4\">,</span> C_To<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"sy4\">,</span>L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># From the standard library:</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">string</span> <span class=\"kw1\">import</span> ascii_lowercase<br/>\u00a0<br/><span class=\"co1\"># Generation:</span><br/>lower <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'z'</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"text highlighted_source\"># From constants built into R:<br/>letters<br/>\u00a0<br/># Or generate the same with:<br/>sapply(97:122, intToUtf8)</pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre class=\"text highlighted_source\">(define lowercase-letters (build-list 26 (lambda (x) (integer-&gt;char (+ x (char-&gt;integer #\\a))))))</pre>"}, {"lang": "REXX", "loc": 4, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 08.02.2014 Walter Pachl<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">xrange</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span>,<span class=\"st0\">'z'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for i = ascii(\"a\") to ascii(\"z\")<br/>    see char(i);<br/>next i<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"st0\">'a'</span> .. <span class=\"st0\">'z'</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"st0\">'a'</span> .. <span class=\"st0\">'z'</span><span class=\"br0\">]</span></pre>"}, {"lang": "Rust", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main() {<br/>    // An iterator over the lowercase alpha's<br/>    let ascii_iter = (0..26).map(|x| (x + 'a' as u8) as char);<br/>\u00a0<br/>    println!(\"{:?}\", ascii_iter.collect::&lt;Vec&lt;_&gt;&gt;());<br/>}<br/>\u00a0</pre>"}, {"lang": "S-lang", "loc": 1, "block": "<pre class=\"text highlighted_source\">variable alpha_ch = ['a':'z'], a;</pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Abc <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lowAlfa <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span> to <span class=\"st0\">'z'</span> <span class=\"co1\">//That's all</span><br/>  <span class=\"co1\">// Now several tests</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">toSeq</span> <span class=\"sy0\">==</span> Seq<span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span>, <span class=\"st0\">'e'</span>, <span class=\"st0\">'f'</span>, <span class=\"st0\">'g'</span>, <span class=\"st0\">'h'</span>, <span class=\"st0\">'i'</span>, <span class=\"st0\">'j'</span>,<br/>    <span class=\"st0\">'k'</span>, <span class=\"st0\">'l'</span>, <span class=\"st0\">'m'</span>, <span class=\"st0\">'n'</span>, <span class=\"st0\">'o'</span>, <span class=\"st0\">'p'</span>, <span class=\"st0\">'q'</span>, <span class=\"st0\">'r'</span>, <span class=\"st0\">'s'</span>, <span class=\"st0\">'t'</span>, <span class=\"st0\">'u'</span>, <span class=\"st0\">'v'</span>, <span class=\"st0\">'w'</span>, <span class=\"st0\">'x'</span>, <span class=\"st0\">'y'</span>, <span class=\"st0\">'z'</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"No complete lowercase alfabet.\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">26</span>, <span class=\"st0\">\"No 26 characters in alfabet\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">start</span> <span class=\"sy0\">==</span> <span class=\"st0\">'a'</span>, <span class=\"st0\">\"Character 'a' not first char!\u00a0???\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">head</span> <span class=\"sy0\">==</span> <span class=\"st0\">'a'</span>, <span class=\"st0\">\"Character 'a' not heading!\u00a0???\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">head</span> <span class=\"sy0\">==</span> lowAlfa<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"st0\">\"Heading char is not first char.\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa contains <span class=\"st0\">'n'</span>, <span class=\"st0\">\"Character n not present.\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span><span class=\"st0\">'n'</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">13</span>, <span class=\"st0\">\"Character n not on the 14th position.\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>lowAlfa.<span class=\"me1\">last</span> <span class=\"sy0\">==</span> lowAlfa<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span>, <span class=\"st0\">\"Expected character (z)on the last and 26th pos.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [within ${<br/>    scala.compat.Platform.currentTime - executionStart<br/>  } ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">map</span> integer<span class=\"sy0\">-&gt;</span>char <span class=\"br0\">(</span>iota <span class=\"nu0\">26</span> <span class=\"br0\">(</span>char<span class=\"sy0\">-&gt;</span>integer #\\a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 12, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: lower is \"\";<br/>    var char: ch is ' ';<br/>  begin<br/>    for ch range 'a' to 'z' do<br/>      lower &amp;:= ch;<br/>    end for;<br/>    writeln(lower);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var arr = <span class=\"st0\">'a'</span>..<span class=\"st0\">'z'</span>;<br/>say arr.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 6, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\"> asciiLower </span>|<br/><span class=\"re6\">asciiLower</span> <span class=\"sy0\">:=</span> <span class=\"re0\">String</span> new.<br/><span class=\"re5\">97</span> to: <span class=\"re5\">122</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">asciiCode</span> |<br/>    <span class=\"re6\">asciiLower</span> <span class=\"sy0\">:=</span> <span class=\"re5\">asciiLower</span> , <span class=\"re5\">asciiCode</span> asCharacter<br/><span class=\"br0\">]</span>.<br/>^asciiLower</pre>"}, {"lang": "Snobol", "loc": 1, "block": "<pre class=\"text highlighted_source\">  &amp;ALPHABET ('a' LEN(25)) . OUTPUT\u00a0;* Works in ASCII but not EBCDIC.</pre>"}, {"lang": "SPL", "loc": 9, "block": "<pre class=\"text highlighted_source\">&gt; i, 1..26<br/>  d = [i+96,0]<br/>  a[i] = #.str(d)<br/>&lt;<br/>'now A is an array of letters a..z<br/>\u00a0<br/>&gt; i, 1..#.size(a,1)<br/>  #.output(a[i],#.rs)<br/>&lt;</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">val lowercase_letters = List.tabulate (26, fn x =&gt; chr (x + ord #\"a\"));</pre>"}, {"lang": "Stata", "loc": 13, "block": "<pre class=\"text highlighted_source\">// built-in: lowercase and uppercase letters<br/>display c(alpha)<br/>display c(ALPHA)<br/>\u00a0<br/>// generate a variable with the letters<br/>clear<br/>set obs 26<br/>gen a=char(96+_n)<br/>\u00a0<br/>// or in Mata<br/>mata<br/>char(97..122)<br/>end</pre>"}, {"lang": "SuperCollider", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(97..122).asAscii;<br/>// answers abcdefghijklmnopqrstuvwxyz<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 6, "block": "<pre class=\"text highlighted_source\">var letters = [Character]()<br/>\u00a0<br/>for i in 97...122 {<br/>    let char = Character(UnicodeScalar(i))<br/>    letters.append(char)<br/>}</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> alpha <span class=\"br0\">{</span>a b c d e f g h i j k l m n o p q r s t u v w x y z<span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"text highlighted_source\">lower=({a..z})</pre>"}, {"lang": "Ursa", "loc": 6, "block": "<pre class=\"text highlighted_source\">decl int i<br/>decl string low<br/>for (set i (ord \"a\")) (&lt; i (+ (ord \"z\") 1)) (inc i)<br/>        set low (+ low (chr i))<br/>end for<br/>out low endl console</pre>"}, {"lang": "VBA", "loc": 21, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_Lower_Case_Ascii_Alphabet()<br/><span class=\"kw4\">Dim</span> Alpha() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    Alpha = Alphabet(97, 122)<br/>    Debug.<span class=\"kw4\">Print</span> Join(Alpha, <span class=\"st0\">\", \"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Alphabet(FirstAscii <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, LastAscii <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/><span class=\"kw4\">Dim</span> strarrTemp() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, i&amp;<br/>\u00a0<br/>    <span class=\"kw4\">ReDim</span> strarrTemp(0 <span class=\"kw3\">To</span> LastAscii - FirstAscii)<br/>    <span class=\"kw3\">For</span> i = FirstAscii <span class=\"kw3\">To</span> LastAscii<br/>        strarrTemp(i - FirstAscii) = Chr(i)<br/>    <span class=\"kw3\">Next</span><br/>    Alphabet = strarrTemp<br/>    Erase strarrTemp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 9, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> ASCII_Sequence(range)<br/>\tarr = Split(range,<span class=\"st0\">\"..\"</span>)<br/>\t<span class=\"kw3\">For</span> i = Asc(arr(0)) <span class=\"kw3\">To</span> Asc(arr(1))<br/>\t\tASCII_Sequence = ASCII_Sequence &amp; Chr(i) &amp; <span class=\"st0\">\" \"</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write ASCII_Sequence(WScript.Arguments(0))<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "Vim Script", "loc": 4, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw1\">let</span> lower = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw3\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">let</span> lower <span class=\"sy0\">+</span>= <span class=\"br0\">[</span><span class=\"kw3\">nr2char</span><span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"kw3\">char2nr</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">endfor</span></pre>"}, {"lang": "xEec", "loc": 1, "block": "<pre class=\"text highlighted_source\">h$` h$` &gt;0_0 t h$y ms p h? jn00_0 p r h#1 ma t jn0_0 &gt;00_0 p p r p</pre>"}, {"lang": "XLISP", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ascii-lower <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">defun</span> add-chars <span class=\"br0\">(</span>x y s<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> x y<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>add-chars <span class=\"br0\">(</span>+ x <span class=\"nu0\">1</span><span class=\"br0\">)</span> y <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> s <span class=\"br0\">(</span>string <span class=\"br0\">(</span>integer-<span class=\"sy0\">&gt;</span>char x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>add-chars <span class=\"nu0\">97</span> <span class=\"nu0\">122</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">[\"a\"..\"z\"]  // lasy list<br/>[\"a\"..\"z\"].walk() //--&gt;L(\"a\",\"b\",\"c\",\"d\",\"e\",...<br/>\"a\".toAsc().pump(26,List,\"toChar\")  // another way to create the list<br/>\"a\".toAsc().pump(26,String,\"toChar\")  // create a string<br/>   //--&gt;\"abcdefghijklmnopqrstuvwxyz\"<br/>Utils.Helpers.lowerLetters  // string const</pre>"}]}