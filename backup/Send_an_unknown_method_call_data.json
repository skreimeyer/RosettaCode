{"task": "Send_an_unknown_method_call", "blocks": [{"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"ahk highlighted_source\">obj <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"re2\">mA: </span>Func<span class=\"br0\">(</span><span class=\"st0\">\"mA\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re2\">mB: </span>Func<span class=\"br0\">(</span><span class=\"st0\">\"mB\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re2\">mC: </span>Func<span class=\"br0\">(</span><span class=\"st0\">\"mC\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"sy0\">,</span> methodToCall<span class=\"sy0\">,</span> <span class=\"sy0\">,</span> Which method should I call?<br/>obj<span class=\"br0\">[</span>methodToCall<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>mA<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> Method A<br/><span class=\"br0\">}</span><br/>mB<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> Method B<br/><span class=\"br0\">}</span><br/>mC<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/> <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> Method C<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 20, "block": "<pre class=\"text highlighted_source\">(task=<br/>  ( oracle<br/>  =   (predicate=\"is made of green cheese\")<br/>      (generateTruth=.str$(!arg \" \"\u00a0!(its.predicate) \".\"))<br/>      (generateLie=.str$(!arg \" \"\u00a0!(its.predicate) \"!\"))<br/>  )<br/>&amp; new$oracle:?SourceOfKnowledge<br/>&amp;   put<br/>  $ \"You may ask the Source of Eternal Wisdom ONE thing.<br/>Enter \\\"Truth\\\" or \\\"Lie\\\" on the next line and press the &lt;Enter&gt; key.<br/>\"<br/>&amp;   whl<br/>  ' ( get':?trueorlie:~Truth:~Lie<br/>    &amp; put$\"Try again\\n\"<br/>    )<br/>&amp; put$(str$(\"You want a \"\u00a0!trueorlie \". About what?\" \\n))<br/>&amp; get'(,STR):?something<br/>&amp; (SourceOfKnowledge..str$(generate\u00a0!trueorlie))$!something<br/>);<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Example<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> foo<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> example <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> method <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>example<span class=\"sy0\">.</span><span class=\"me1\">GetType</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">GetMethod</span><span class=\"br0\">(</span>method<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Invoke</span><span class=\"br0\">(</span>example, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">object</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span> <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}(5) = {1}\"</span>, method, result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 14, "block": "<pre class=\"text highlighted_source\">Class Unknown.Example Extends\u00a0%RegisteredObject<br/>{<br/>\u00a0<br/>Method Foo()<br/>{<br/>\tWrite \"This is foo\",\u00a0!<br/>}<br/>\u00a0<br/>Method Bar()<br/>{<br/>\tWrite \"This is bar\",\u00a0!<br/>}<br/>\u00a0<br/>}</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span><span class=\"kw1\">intern</span> <span class=\"st0\">\"SOME-METHOD\"</span><span class=\"br0\">)</span> my-object a few arguments<span class=\"br0\">)</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 4, "block": "<pre class=\"text highlighted_source\">local\u00a0:object {\u00a0:add @+ }<br/>local\u00a0:method\u00a0:add<br/>\u00a0<br/>!. object! method 1 2</pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> name <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">[</span><span class=\"st0\">\"foo\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bar\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">call</span><span class=\"br0\">(</span>example<span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 17, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>class Example<br/>{<br/>    foo\u00a0: x<br/>        = x + 42.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var example\u00a0:= Example new.<br/>    var methodSignature\u00a0:= \"foo\".<br/>\u00a0<br/>    var result\u00a0:= example~(Signature new literal:methodSignature) eval:5.<br/>\u00a0<br/>    console printLine(methodSignature,\"(\",5,\") = \",result).<br/>].</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">include FMS-SI.f<br/>include FMS-SILib.f<br/>\u00a0<br/>var x  \\ instantiate a class var object named x<br/>\u00a0<br/>\\ Use a standard Forth string and evaluate it.<br/>\\ This is equivalent to sending the\u00a0!: message to object x<br/>42 x  s\"\u00a0!:\"  evaluate  <br/>\u00a0<br/>x p: 42     \\ send the print message ( p: ) to x to verify the contents <br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 24, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"reflect\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> example <span class=\"kw4\">struct</span><span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"co1\">// the method must be exported to be accessed through reflection.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>example<span class=\"sy1\">)</span> Foo<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">42</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// create an object with a method</span><br/>    <span class=\"kw1\">var</span> e example<br/>    <span class=\"co1\">// get the method by name</span><br/>    m <span class=\"sy2\">:=</span> reflect<span class=\"sy3\">.</span><span class=\"me1\">ValueOf</span><span class=\"sy1\">(</span>e<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">MethodByName</span><span class=\"sy1\">(</span><span class=\"st0\">\"Foo\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// call the method with no argments</span><br/>    r <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>Call<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// interpret first return value as int</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>r<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Int<span class=\"sy1\">())</span> <span class=\"co1\">// =&gt; 42</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 11, "block": "<pre class=\"text highlighted_source\">class Example {<br/>    def foo(value) {<br/>        \"Invoked with '$value'\"<br/>    }<br/>}<br/>\u00a0<br/>def example = new Example()<br/>def method = \"foo\"<br/>def arg = \"test value\"<br/>\u00a0<br/>assert \"Invoked with 'test value'\" == example.\"$method\"(arg)</pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   x <span class=\"sy0\">:=</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\"># create object</span><br/>   x<span class=\"sy0\">.</span><span class=\"me1\">m1</span><span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\"># static call of m1 method</span><br/>   <span class=\"co1\">#  two examples where the method string can be dynamically constructed ...</span><br/>   <span class=\"st0\">\"foo_m1\"</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\"># ... need to know class name and method name to construct name</span><br/>   x<span class=\"sy0\">.</span>__m<span class=\"br0\">[</span><span class=\"st0\">\"m1\"</span><span class=\"br0\">]</span>   <span class=\"co1\"># ... general method (better)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> foo<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"co1\"># define object</span><br/><span class=\"kw1\">method</span> m1<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 5, "block": "<pre class=\"io highlighted_source\">Example\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span><br/>Example foo\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>x, <span class=\"nu0\">42</span>+x<span class=\"br0\">)</span><br/>\u00a0<br/>name\u00a0:= <span class=\"st0\">\"foo\"</span><br/>Example <span class=\"kw2\">clone</span> <span class=\"kw2\">perform</span><span class=\"br0\">(</span>name,<span class=\"nu0\">5</span><span class=\"br0\">)</span> println  <span class=\"co1\">// prints \"47\"</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">   sum =: +/<br/>   prod =: */<br/>   count =: #<br/>\u00a0<br/>   nameToDispatch =: <span class=\"st_h\">'sum'</span>    <span class=\"co1\">NB. pick a name already defined</span><br/>\u00a0<br/>   \". nameToDispatch,<span class=\"st_h\">' 1 2 3'</span><br/><span class=\"nu0\">6</span><br/>   nameToDispatch~ <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">6</span><br/>   nameToDispatch <span class=\"sy0\">(</span><span class=\"nu0\">128</span>!:<span class=\"nu0\">2</span><span class=\"sy0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">6</span><br/>\u00a0<br/>   nameToDispatch =: <span class=\"st_h\">'count'</span>  <span class=\"co1\">NB. pick another name</span><br/>\u00a0<br/>   \". nameToDispatch,<span class=\"st_h\">' 1 2 3'</span><br/><span class=\"nu0\">3</span><br/>   nameToDispatch~ <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">3</span><br/>   nameToDispatch <span class=\"sy0\">(</span><span class=\"nu0\">128</span>!:<span class=\"nu0\">2</span><span class=\"sy0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">3</span></pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.lang.reflect.Method</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Example <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> foo<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> example <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">;</span><br/>    Class<span class=\"sy0\">&lt;?&gt;</span> clazz <span class=\"sy0\">=</span> example.<span class=\"me1\">getClass</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amethod+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Method</span></a> meth <span class=\"sy0\">=</span> clazz.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span>name, <span class=\"kw4\">int</span>.<span class=\"kw1\">class</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> result <span class=\"sy0\">=</span> meth.<span class=\"me1\">invoke</span><span class=\"br0\">(</span>example, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// result is int wrapped in an object (Integer)</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"co1\">// prints \"47\"</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\">example <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Object</span><span class=\"sy0\">;</span><br/>example.<span class=\"me1\">foo</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>name <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">;</span><br/>example<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>      # <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">47</span></pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">const functions = Dict{String,Function}(<br/>    \"foo\" =&gt; x -&gt; 42 + x,<br/>    \"bar\" =&gt; x -&gt; 42 * x)<br/>\u00a0<br/>@show functions[\"foo\"](3)<br/>@show functions[\"bar\"](3)</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Kotlin JS version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> C <span class=\"br0\">{</span><br/>    fun foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"foo called\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> C<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <span class=\"st0\">\"c.foo\"</span><br/>    js<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// invokes c.foo dynamically</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 11, "block": "<pre class=\"text highlighted_source\">define mytype =&gt; type {<br/>\tpublic foo() =&gt; {<br/>\t\treturn 'foo was called'<br/>\t}<br/>\tpublic bar() =&gt; {<br/>\t\treturn 'this time is was bar'<br/>\t}<br/>}<br/>local(obj = mytype, methodname = tag('foo'), methodname2 = tag('bar'))<br/>#obj-&gt;\\#methodname-&gt;invoke<br/>#obj-&gt;\\#methodname2-&gt;invoke</pre>"}, {"lang": "Lingo", "loc": 5, "block": "<pre class=\"text highlighted_source\">obj = script(\"MyClass\").new()<br/>-- ...<br/>method = #foo<br/>arg1 = 23<br/>res = call(method, obj, arg1)</pre>"}, {"lang": "Logtalk", "loc": 6, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(foo).<br/>\u00a0<br/>\t<span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(bar<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\tbar(<span class=\"nu0\">42</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> example <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> example<span class=\"sy0\">:</span>foo <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> x <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> name <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><br/>example<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">(</span>example<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">--&gt; 47</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">ToExpression[Input[\"function? E.g. Sin\",]][Input[\"value? E.g. 0.4123\"]]</pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>  funName = <span class=\"co2\">'foo'</span>;   <span class=\"co1\">% generate function name</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a> <span class=\"br0\">(</span>funNAME, <span class=\"sy0\">...</span><span class=\"br0\">)</span>  <span class=\"co1\">% evaluation function with optional parameters</span><br/>\u00a0<br/>  funName = <span class=\"co2\">'a=atan(pi)'</span>;   <span class=\"co1\">% generate function name</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a> <span class=\"br0\">(</span>funName, <span class=\"co2\">'printf('</span><span class=\"co2\">'Error\\n'</span><span class=\"co2\">')'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 22, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> Example <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>foo;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> Example<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>foo <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> @42;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">id</span> example <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Example alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>    <span class=\"kw4\">SEL</span> selector <span class=\"sy0\">=</span> <span class=\"kw1\">@selector</span><span class=\"br0\">(</span>foo<span class=\"br0\">)</span>; <span class=\"co2\">// or = NSSelectorFromString(@\"foo\");</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span>example performSelector<span class=\"sy0\">:</span>selector<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">16 \"sqrt\" asMethod perform</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu1\">5</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"()\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Example<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> foo <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> Example<span class=\"sy0\">-&gt;</span><span class=\"me1\">new</span><span class=\"sy0\">-&gt;</span><span class=\"re0\">$name</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"47\"</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$object</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span> <span class=\"kw1\">but</span> <span class=\"kw2\">role</span> <span class=\"br0\">{</span> <span class=\"kw2\">method</span> add<span class=\"sy0\">-</span>me<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> self <span class=\"sy0\">+</span> <span class=\"re0\">$x</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'add-me'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$object</span><span class=\"sy0\">.</span><span class=\"st0\">\"$name\"</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\"># 47</span></pre>"}, {"lang": "Phix", "loc": 10, "block": "<pre class=\"text highlighted_source\">procedure Hello()<br/>   \u00a0?\"Hello\"<br/>end procedure<br/>\u00a0<br/>string erm = \"Hemmm\"<br/>for i=3 to 5 do<br/>    erm[i]+=-1+(i=5)*3<br/>end for<br/>\u00a0<br/>call_proc(routine_id(erm),{})</pre>"}, {"lang": "PHP", "loc": 15, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">class</span> Example <span class=\"br0\">{</span><br/>  <span class=\"kw2\">function</span> foo<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$example</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'foo'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$example</span><span class=\"sy0\">-&gt;</span><span class=\"re0\">$name</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span>        <span class=\"co1\">// prints \"47\"</span><br/>\u00a0<br/><span class=\"co1\">// alternately:</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/call_user_func\"><span class=\"kw3\">call_user_func</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$example</span><span class=\"sy0\">,</span> <span class=\"re0\">$name</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(send (expression) Obj arg1 arg2)</pre>"}, {"lang": "Pike", "loc": 3, "block": "<pre class=\"pike highlighted_source\">string unknown <span class=\"sy0\">=</span> <span class=\"st0\">\"format_nice\"</span><span class=\"sy0\">;</span><br/>object now <span class=\"sy0\">=</span> Calendar.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>now<span class=\"br0\">[</span>unknown<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$method</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Get-Member</span> <span class=\"kw5\">-MemberType</span> Method <span class=\"kw5\">-Static</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Definition.Split<span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.Count <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random<span class=\"br0\">)</span>.Name<br/><span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><br/><span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::<span class=\"re0\">$method</span><span class=\"br0\">(</span><span class=\"re0\">$number</span><span class=\"br0\">)</span><br/><span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>    Method <span class=\"sy0\">=</span> <span class=\"re0\">$method</span><br/>    Number <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><br/>    Result <span class=\"sy0\">=</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$output</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Format-List</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Example<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>     <span class=\"kw1\">def</span> foo<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span>:<br/>             <span class=\"kw1\">return</span> <span class=\"nu0\">42</span> + x<br/>\u00a0<br/>name <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><br/><span class=\"kw2\">getattr</span><span class=\"br0\">(</span>Example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> name<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>      <span class=\"co1\"># =&gt; 47</span></pre>"}, {"lang": "Qi", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define foo -&gt; 5)<br/>\u00a0<br/>(define execute-function<br/>  Name -&gt; (eval [(INTERN Name)]))<br/>\u00a0<br/>(execute-function \"foo\")<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket <br/>(define greeter<br/>  (new (class object% (super-new)<br/>         (define/public (hello name)<br/>           (displayln (~a \"Hello \" name \".\"))))))<br/>\u00a0<br/>; normal method call<br/>(send greeter hello \"World\")<br/>\u00a0<br/>; sending an unknown method<br/>(define unknown 'hello)<br/>(dynamic-send greeter unknown \"World\")<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Example<br/>  <span class=\"kw1\">def</span> foo<br/>    <span class=\"nu0\">42</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> bar<span class=\"br0\">(</span>arg1, arg2, <span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>    block.<span class=\"me1\">call</span> arg1, arg2<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>symbol = <span class=\"re3\">:foo</span><br/>Example.<span class=\"me1\">new</span>.<span class=\"me1\">send</span> symbol                         <span class=\"co1\"># =&gt; 42</span><br/>Example.<span class=\"me1\">new</span>.<span class=\"me1\">send</span><span class=\"br0\">(</span> <span class=\"re3\">:bar</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span> x<span class=\"sy0\">+</span>y <span class=\"br0\">}</span>    <span class=\"co1\"># =&gt; 3</span><br/>args = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>Example.<span class=\"me1\">new</span>.<span class=\"me1\">send</span><span class=\"br0\">(</span> <span class=\"st0\">\"bar\"</span>, <span class=\"sy0\">*</span>args <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span> x<span class=\"sy0\">+</span>y <span class=\"br0\">}</span>  <span class=\"co1\"># =&gt; 3</span></pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Example <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> foo<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">42</span> + x<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Main <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> example <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Example<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> meth <span class=\"sy0\">=</span> example.<span class=\"me1\">getClass</span>.<span class=\"me1\">getMethod</span><span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span>, classOf<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>meth.<span class=\"me1\">invoke</span><span class=\"br0\">(</span>example, <span class=\"nu0\">5</span>.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>AnyRef<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">47</span>.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>AnyRef<span class=\"br0\">]</span>, <span class=\"st0\">\"Not confirm expectation.\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${scala.compat.Platform.currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Example <span class=\"br0\">{</span><br/>    method foo<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"nu0\">42</span> <span class=\"sy0\">+</span> x<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var name = <span class=\"st0\">'foo'</span><br/>var obj = Example<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>say obj.<span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>          <span class=\"co1\"># prints: 47</span><br/>say obj.<span class=\"me1\">method</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>    <span class=\"co1\"># =//=</span></pre>"}, {"lang": "Smalltalk", "loc": 9, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re1\">#Example</span>.<br/>\u00a0<br/><span class=\"re0\">Example</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">foo</span>: <span class=\"re5\">x</span> <span class=\"br0\">[</span><br/>    ^ <span class=\"nu0\">42</span> + <span class=\"re5\">x</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">symbol</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'foo:'</span> asSymbol. <span class=\"coMULTI\">\" same as symbol\u00a0:= #foo: \"</span><br/>\u00a0<br/><span class=\"re0\">Example</span> new perform: <span class=\"re5\">symbol</span> with: <span class=\"re5\">5</span>. <span class=\"coMULTI\">\" returns 47 \"</span></pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>oo::<span class=\"me1\">class</span> create Example <span class=\"br0\">{</span><br/>    <span class=\"kw1\">method</span> foo <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">42</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"fee$s\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"fie$s\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> <span class=\"nu0\">3</span> <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"foe$s\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> <span class=\"nu0\">4</span> <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">puts</span> <span class=\"st0\">\"fum$s\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> eg <span class=\"br0\">[</span>Example new<span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> mthd <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%c%c%c\"</span> <span class=\"nu0\">102</span> <span class=\"nu0\">111</span> <span class=\"nu0\">111</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>    <span class=\"co1\"># A \"foo\" by any other means would smell as sweet</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"re0\">$eg</span> <span class=\"re0\">$mthd</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$eg</span> <span class=\"re0\">$i</span> ...<br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">name:=\"len\"; \"this is a test\".resolve(name)() //--&gt;14</pre>"}]}