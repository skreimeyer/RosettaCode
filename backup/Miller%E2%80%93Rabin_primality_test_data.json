{"task": "Miller%E2%80%93Rabin_primality_test", "blocks": [{"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Number <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Miller_Rabin <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Result_Type <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Composite, Probably_Prime<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Prime <span class=\"br0\">(</span>N\u00a0: Number; K\u00a0: Positive\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Result_Type;<br/>\u00a0<br/><span class=\"kw1\">end</span> Miller_Rabin;</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> LINT<span class=\"sy1\">=</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> LOOPINT <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> POWMODSTRUCT <span class=\"sy1\">=</span> LINT<span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/pow_mod.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> miller rabin <span class=\"sy1\">=</span> <span class=\"br0\">(</span>LINT n<span class=\"sy1\">,</span> LOOPINT k<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw2\">IF</span> n<span class=\"sy1\">&lt;=</span>3 <span class=\"kw2\">THEN</span> <span class=\"kw7\">TRUE</span><br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> n <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span><br/>    <span class=\"kw2\">ELSE</span><br/>        LINT d <span class=\"sy1\">:=</span> n <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> s <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> d <span class=\"kw2\">DO</span><br/>            d <span class=\"sy1\">:=</span> d <span class=\"kw12\">OVER</span> 2<span class=\"sy1\">;</span><br/>            s <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">TO</span> k <span class=\"kw2\">DO</span><br/>            LINT a <span class=\"sy1\">:=</span> 2 <span class=\"sy1\">+</span> <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span>random<span class=\"sy1\">*</span><span class=\"br0\">(</span>n<span class=\"sy1\">-</span>3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            LINT x <span class=\"sy1\">:=</span>  pow mod<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> x <span class=\"sy1\">/=</span> 1 <span class=\"kw2\">THEN</span><br/>                <span class=\"kw2\">TO</span> s <span class=\"kw2\">DO</span><br/>                    <span class=\"kw2\">IF</span> x <span class=\"sy1\">=</span> n<span class=\"sy1\">-</span>1 <span class=\"kw2\">THEN</span> done <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                    x <span class=\"sy1\">:=</span> x<span class=\"sy1\">*</span>x <span class=\"sy1\">%*</span> n<br/>                <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                else<span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> x <span class=\"sy1\">/=</span> n<span class=\"sy1\">-</span>1 <span class=\"kw2\">THEN</span> return false <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                done<span class=\"sy1\">:</span> <span class=\"kw7\">EMPTY</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw7\">TRUE</span> <span class=\"kw2\">EXIT</span><br/>        return false<span class=\"sy1\">:</span> <span class=\"kw7\">FALSE</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 937 <span class=\"kw2\">TO</span> 1000 <span class=\"kw2\">DO</span><br/>  <span class=\"kw2\">IF</span> miller rabin<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> 10<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 41, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">999983</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">999809</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">999727</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">52633</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">60787</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">999999</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">999995</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MillerRabin<span class=\"br0\">(</span><span class=\"nu0\">999991</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 0</span><br/>\u00a0<br/>MillerRabin<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; 0: composite, 1: probable prime (n &lt; 2**31)</span><br/>   d <span class=\"sy0\">:=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> s <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">While</span>\u00a0!<span class=\"br0\">(</span>d<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      d<span class=\"sy0\">&gt;&gt;=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> s<span class=\"sy0\">++</span><br/>\u00a0<br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%k%</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> a<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"co1\">; if n &lt; 4,759,123,141, it is enough to test a = 2, 7, and 61.</span><br/>      x <span class=\"sy0\">:=</span> PowMod<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> || x<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a><br/>      Cont <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% s<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>         x <span class=\"sy0\">:=</span> PowMod<span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>         <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Cont <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      IfEqual Cont<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a><br/>      <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>PowMod<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; x**n mod m</span><br/>   y <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">:=</span> n<span class=\"sy0\">,</span> z <span class=\"sy0\">:=</span> x<br/>   <span class=\"kw1\">While</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>      y <span class=\"sy0\">:=</span> i<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>y<span class=\"sy0\">*</span>z<span class=\"sy0\">,</span>m<span class=\"br0\">)</span>\u00a0: y<span class=\"sy0\">,</span> z <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>z<span class=\"sy0\">*</span>z<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"sy0\">,</span> i <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">Return</span> y<br/><span class=\"br0\">}</span></pre>"}, {"lang": "bc", "loc": 68, "block": "<pre class=\"text highlighted_source\">seed = 1   /* seed of the random number generator */<br/>scale = 0<br/>\u00a0<br/>/* Random number from 0 to 32767. */<br/>define rand() {<br/>  /* Cheap formula (from POSIX) for random numbers of low quality. */<br/>  seed = (seed * 1103515245 + 12345)\u00a0% 4294967296<br/>  return ((seed / 65536)\u00a0% 32768)<br/>}<br/>\u00a0<br/>/* Random number in range [from, to]. */<br/>define rangerand(from, to) {<br/>  auto b, h, i, m, n, r<br/>\u00a0<br/>  m = to - from + 1<br/>  h = length(m) / 2 + 1  /* want h iterations of rand()\u00a0% 100 */<br/>  b = 100 ^ h\u00a0% m        /* want n &gt;= b */<br/>  while (1) {<br/>    n = 0                /* pick n in range [b, 100 ^ h) */<br/>    for (i = h; i &gt; 0; i--) {<br/>      r = rand()<br/>      while (r &lt; 68) { r = rand(); }  /* loop if the modulo bias */<br/>      n = (n * 100) + (r\u00a0% 100)       /* append 2 digits to n */<br/>    }<br/>    if (n &gt;= b) { break; }  /* break unless the modulo bias */<br/>  }<br/>  return (from + (n\u00a0% m))<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>/* n is probably prime? */<br/>define miller_rabin_test(n, k) {<br/>  auto d, r, a, x, s<br/>\u00a0<br/>  if (n &lt;= 3) { return (1); }<br/>  if ((n\u00a0% 2) == 0) { return (0); }<br/>\u00a0<br/>  /* find s and d so that d * 2^s = n - 1 */<br/>  d = n - 1<br/>  s = 0<br/>  while((d\u00a0% 2) == 0) {<br/>     d /= 2<br/>     s += 1<br/>  }<br/>\u00a0<br/>  while (k-- &gt; 0) {<br/>    a = rangerand(2, n - 2)<br/>    x = (a ^ d)\u00a0% n<br/>    if (x\u00a0!= 1) {<br/>      for (r = 0; r &lt; s; r++) {<br/>        if (x == (n - 1)) { break; }<br/>        x = (x * x)\u00a0% n<br/>      }<br/>      if (x\u00a0!= (n - 1)) {<br/>        return (0)<br/>      }<br/>    }<br/>  }<br/>  return (1)<br/>}<br/>\u00a0<br/>for (i = 1; i &lt; 1000; i++) {<br/>  if (miller_rabin_test(i, 10) == 1) {<br/>    i<br/>  }<br/>}<br/>quit</pre>"}, {"lang": "Bracmat", "loc": 70, "block": "<pre class=\"text highlighted_source\">( 1:?seed<br/>&amp; ( rand<br/>  =   <br/>    .   mod$(!seed*1103515245+12345.4294967296):?seed<br/>      &amp; mod$(div$(!seed.65536).32768)<br/>  )<br/>&amp; ( rangerand<br/>  =   from to b h i m n r length<br/>    .  \u00a0!arg:(?from,?to)<br/>      &amp;\u00a0!to+-1*!from+1:?m<br/>      &amp; @(!m:? [?length)<br/>      &amp; div$(!length+1.2)+1:?h<br/>      &amp; 100^mod$(!h.!m):?b<br/>      &amp;   whl<br/>        ' ( 0:?n<br/>          &amp;\u00a0!h+1:?i<br/>          &amp;   whl<br/>            ' (\u00a0!i+-1:&gt;0:?i<br/>              &amp; rand$:?r<br/>              &amp; whl'(!r:&lt;68&amp;rand$:?r)<br/>              &amp;\u00a0!n*100+mod$(!r.100):?n<br/>              )<br/>          &amp;\u00a0!n:&gt;!b<br/>          )<br/>      &amp;\u00a0!from+mod$(!n.!m)<br/>  )<br/>&amp; ( miller-rabin-test<br/>  =   n k d r a x s return<br/>    .  \u00a0!arg:(?n,?k)<br/>      &amp; (\u00a0!n:~&gt;3&amp;1<br/>        | mod$(!n.2):0<br/>        |  \u00a0!n+-1:?d<br/>          &amp; 0:?s<br/>          &amp;   whl<br/>            ' ( mod$(!d.2):0<br/>              &amp;\u00a0!d*1/2:?d<br/>              &amp; 1+!s:?s<br/>              )<br/>          &amp; 1:?return<br/>          &amp;   whl<br/>            ' (\u00a0!k+-1:?k:~&lt;0<br/>              &amp; rangerand$(2,!n+-2):?a<br/>              &amp; mod$(!a^!d.!n):?x<br/>              &amp; (\u00a0!x:1<br/>                |   0:?r<br/>                  &amp;   whl<br/>                    ' (\u00a0!r+1:~&gt;!s:?r<br/>                      &amp;\u00a0!n+-1:~!x<br/>                      &amp; mod$(!x*!x.!n):?x<br/>                      )<br/>                  &amp; (\u00a0!n+-1:!x<br/>                    | 0:?return&amp;~<br/>                    )<br/>                )<br/>              )<br/>          &amp;\u00a0!return<br/>        )<br/>  )<br/>&amp; 0:?i<br/>&amp;\u00a0:?primes<br/>&amp;   whl<br/>  ' ( 1+!i:&lt;1000:?i<br/>    &amp; (   miller-rabin-test$(!i,10):1<br/>        &amp;\u00a0!primes\u00a0!i:?primes<br/>      | <br/>      )<br/>    )<br/>&amp;\u00a0!primes:? [-11\u00a0?last<br/>&amp; out$!last<br/>);</pre>"}, {"lang": "C", "loc": 5, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#ifndef _MILLER_RABIN_H_</span><br/><span class=\"co2\">#define _MILLER_RABIN_H</span><br/><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>bool miller_rabin_test<span class=\"br0\">(</span>mpz_t n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span></pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> RabinMiller<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> k<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>s <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  s <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Random r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> k<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> r<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">long</span> mod <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> temp<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span>  mod <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod <span class=\"sy0\">*</span> a<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>temp <span class=\"sy0\">!=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> mod <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> mod <span class=\"sy0\">!=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                mod <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod <span class=\"sy0\">*</span> mod<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>                temp <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mod <span class=\"sy0\">!=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> temp <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 75, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns test-p<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>math<span class=\"sy0\">.</span>numeric-tower <span class=\"sy0\">:</span><span class=\"me1\">as</span> math<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span><span class=\"kw1\">set</span> <span class=\"sy0\">:</span><span class=\"me1\">as</span> <span class=\"kw1\">set</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def WITNESSLOOP <span class=\"st0\">\"witness\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>def COMPOSITE <span class=\"st0\">\"composite\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn m* <span class=\"br0\">[</span>p q m<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Computes (p*q) mod m \"</span><br/>  <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>*' p q<span class=\"br0\">)</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn power<br/>  <span class=\"st0\">\"modular exponentiation (i.e. b^e mod m\"</span><br/>  <span class=\"br0\">[</span>b e m<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>b b<span class=\"sy0\">,</span> e e<span class=\"sy0\">,</span> x <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? e<span class=\"br0\">)</span><br/>      x<br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>even? e<span class=\"br0\">)</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>m* b b m<span class=\"br0\">)</span> <span class=\"br0\">(</span>quot e <span class=\"nu0\">2</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>m* b b m<span class=\"br0\">)</span> <span class=\"br0\">(</span>quot e <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>m* b x m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Sequence of random numbers to use in the test</span><br/><span class=\"br0\">(</span>defn rand-num <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" random number between 2 and n-2 \"</span><br/>  <span class=\"br0\">(</span>bigint <span class=\"br0\">(</span>math/floor <span class=\"br0\">(</span>+' <span class=\"nu0\">2</span> <span class=\"br0\">(</span>*' <span class=\"br0\">(</span>- n <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>rand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Unique set of random numbers</span><br/><span class=\"br0\">(</span>defn unique-random-numbers <span class=\"br0\">[</span>n k<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" k unique random numbers between 2 and n-2 \"</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>a-<span class=\"kw1\">set</span> #<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>count a-<span class=\"kw1\">set</span><span class=\"br0\">)</span> k<span class=\"br0\">)</span> a-<span class=\"kw1\">set</span><br/>      <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>conj a-<span class=\"kw1\">set</span> <span class=\"br0\">(</span>rand-num n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn find-d-s <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" write n \u2212 1 as 2s\u00b7d with d odd \"</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>d <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span><span class=\"sy0\">,</span> s <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>odd? d<span class=\"br0\">)</span><br/>      <span class=\"br0\">[</span>d s<span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>quot d <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>inc s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn random-test<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span>random-test n <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"nu0\">1000</span> <span class=\"br0\">(</span>bigint <span class=\"br0\">(</span>/ n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>n k<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Random version of primality test\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>d s<span class=\"br0\">]</span> <span class=\"br0\">(</span>find-d-s n<span class=\"br0\">)</span><br/>        <span class=\"co1\">; Individual Primality Test</span><br/>        single-test <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>a s<span class=\"br0\">]</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>z <span class=\"br0\">(</span>power a d n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>some #<span class=\"br0\">{</span>z<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                         WITNESSLOOP<br/>                         <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>x <span class=\"br0\">(</span>power z <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> r s<span class=\"br0\">]</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> COMPOSITE<br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span><span class=\"br0\">)</span> WITNESSLOOP<br/>                             <span class=\"br0\">(</span><span class=\"sy0\">=</span> r <span class=\"nu0\">0</span><span class=\"br0\">)</span> COMPOSITE<br/>                             <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>power x <span class=\"nu0\">2</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>dec r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"co1\">; Apply Test</span><br/>    <span class=\"co1\">;(not-any? #(= COMPOSITE (local-test\u00a0% s))</span><br/>    <span class=\"co1\">;          (unique-random-numbers n k))))</span><br/>    <span class=\"br0\">(</span>not-any? #<span class=\"br0\">(</span><span class=\"sy0\">=</span> COMPOSITE <span class=\"br0\">(</span>single-test <span class=\"sy0\">%</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>unique-random-numbers n k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Testing</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Primes beteen 900-1000:\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>q <span class=\"br0\">(</span>range <span class=\"nu0\">900</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>random-test q<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\" \"</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Is Prime?\"</span> <span class=\"nu0\">4547337172376300111955330758342147474062293202868155909489</span> <span class=\"br0\">(</span>random-test <span class=\"nu0\">4547337172376300111955330758342147474062293202868155909489</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Is Prime?\"</span> <span class=\"nu0\">4547337172376300111955330758342147474062293202868155909393</span> <span class=\"br0\">(</span>random-test <span class=\"nu0\">4547337172376300111955330758342147474062293202868155909393</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Is Prime?\"</span> <span class=\"nu0\">643808006803554439230129854961492699151386107534013432918073439524138264842370630061369715394739134090922937332590384720397133335969549256322620979036686633213903952966175107096769180017646161851573147596390153</span><br/>         <span class=\"br0\">(</span>random-test <span class=\"nu0\">643808006803554439230129854961492699151386107534013432918073439524138264842370630061369715394739134090922937332590384720397133335969549256322620979036686633213903952966175107096769180017646161851573147596390153</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"Is Prime?\"</span> <span class=\"nu0\">743808006803554439230129854961492699151386107534013432918073439524138264842370630061369715394739134090922937332590384720397133335969549256322620979036686633213903952966175107096769180017646161851573147596390153</span><br/>         <span class=\"br0\">(</span>random-test <span class=\"nu0\">743808006803554439230129854961492699151386107534013432918073439524138264842370630061369715394739134090922937332590384720397133335969549256322620979036686633213903952966175107096769180017646161851573147596390153</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 43, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> factor-out <span class=\"br0\">(</span>number divisor<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return two values R and E such that NUMBER = DIVISOR^E * R,<br/>  and R is not divisible by DIVISOR.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>e <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>r number <span class=\"br0\">(</span>/ r divisor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod r divisor<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>values r e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mult-mod <span class=\"br0\">(</span>x y modulus<span class=\"br0\">)</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>* x y<span class=\"br0\">)</span> modulus<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> expt-mod <span class=\"br0\">(</span>base exponent modulus<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Fast modular exponentiation by repeated squaring.\"</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>expt-mod-iter <span class=\"br0\">(</span>b e p<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> e <span class=\"nu0\">0</span><span class=\"br0\">)</span> p<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">evenp</span> e<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>expt-mod-iter <span class=\"br0\">(</span>mult-mod b b modulus<span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>/ e <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                                   p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>t<br/>                    <span class=\"br0\">(</span>expt-mod-iter b<br/>                                   <span class=\"br0\">(</span><span class=\"nu0\">1</span>- e<span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>mult-mod b p modulus<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>expt-mod-iter base exponent <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> random-in-range <span class=\"br0\">(</span>lower upper<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return a random integer from the range [lower..upper].\"</span><br/>  <span class=\"br0\">(</span>+ lower <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>- upper lower<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> miller-rabin-test <span class=\"br0\">(</span>n k<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Test N for primality by performing the Miller-Rabin test K times.<br/>  Return NIL if N is composite, and T if N is probably prime.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">4</span><span class=\"br0\">)</span>     t<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">evenp</span> n<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t<br/>         <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>d s<span class=\"br0\">)</span> <span class=\"br0\">(</span>factor-out <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>strong-liar? <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span>expt-mod a d n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>loop repeat s<br/>                                  for y <span class=\"sy0\">=</span> x then <span class=\"br0\">(</span>mult-mod y y n<span class=\"br0\">)</span><br/>                                  thereis <span class=\"br0\">(</span><span class=\"sy0\">=</span> y <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop repeat k<br/>                   always <span class=\"br0\">(</span>strong-liar? <span class=\"br0\">(</span>random-in-range <span class=\"nu0\">2</span> <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 50, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isProbablePrime<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> k<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">ulong</span> modPow<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">ulong</span> e<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> m<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">ulong</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>e <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>            e <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">ulong</span> d <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">ulong</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>d <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        d <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">^^</span> s <span class=\"sy0\">*</span> d <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    outer<span class=\"sy0\">:</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">ulong</span> a <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">ulong</span> x <span class=\"sy0\">=</span> modPow<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> __<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            x <span class=\"sy0\">=</span> modPow<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span> outer<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Demo code.</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isProbablePrime.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 23, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> millerRabinPrimalityTest<span class=\"br0\">(</span>n <span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> k <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"sy0\">,</span> random<span class=\"br0\">)</span> <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/boolean\"><span class=\"kw6\">boolean</span></a> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a> <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a> <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> d <span class=\"sy0\">:=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> s <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    d <span class=\"sy0\">//=</span> <span class=\"nu0\">2</span><br/>    s <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">k</span> <span class=\"br0\">{</span><br/>     <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> nextTrial <span class=\"sy0\">:=</span> __continue<br/>     <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> a <span class=\"sy0\">:=</span> random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>     <span class=\"co1\"># [2, n - 2] = [0, n - 4] + 2 = [0, n - 3) + 2</span><br/>     <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> x <span class=\"sy0\">:=</span> a<span class=\"sy0\">**</span>d <span class=\"sy0\">%%</span> n                     <span class=\"co1\"># Note: Will do optimized modular exponentiation</span><br/>     <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">&lt;=&gt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> nextTrial<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>     <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span> .. <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy0\">:=</span> x<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">%%</span> n<br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a> <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=&gt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> nextTrial<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>     <span class=\"br0\">}</span><br/>     return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/>  <span class=\"br0\">}</span><br/>  return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 41, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; output\u00a0: #t if n probably prime</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>miller<span class=\"sy0\">-</span>rabin n <span class=\"br0\">(</span>k <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>composite #f<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">d</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> a <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> <span class=\"kw1\">s</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> <span class=\"kw1\">d</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> <span class=\"kw1\">d</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>i k<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> a <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>random <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <span class=\"br0\">(</span>powmod a <span class=\"kw1\">d</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:continue <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> composite<br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">[</span><span class=\"br0\">(</span>r <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <span class=\"br0\">(</span>powmod x <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:break <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> #t<br/>\t\t#:break <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span>  #f<br/>\t\t#t <br/>\t\t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t #:break composite <span class=\"sy0\">=&gt;</span> #f <span class=\"br0\">)</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">not</span> composite<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; output</span><br/><span class=\"br0\">(</span>miller<span class=\"sy0\">-</span>rabin #<span class=\"nu0\">101</span><span class=\"br0\">)</span><br/>    \u2192 #t<br/><span class=\"br0\">(</span>miller<span class=\"sy0\">-</span>rabin #<span class=\"nu0\">111</span><span class=\"br0\">)</span><br/>    \u2192 #f<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> big<span class=\"sy0\">-</span>prime <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>prime 1e<span class=\"sy0\">+</span>100<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">3461396142610375479080862553800503306376298093021233334170610435506057862777898396429</span><br/><span class=\"nu0\">6627816219192601527</span><br/><span class=\"br0\">(</span>miller<span class=\"sy0\">-</span>rabin big<span class=\"sy0\">-</span>prime<span class=\"br0\">)</span><br/>    \u2192 #t<br/><span class=\"br0\">(</span>miller<span class=\"sy0\">-</span>rabin <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>factorial <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 #f<br/><span class=\"br0\">(</span>prime? <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>factorial <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; native</span><br/>    \u2192 #f<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 90, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>miller_rabin<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>is_prime<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> power<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">341550071728321</span> <span class=\"sy1\">-&gt;</span><br/> \t\t\t<span class=\"re3\">is_mr_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re3\">is_mr_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re3\">random_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">1373653</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">9080191</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">31</span><span class=\"sy1\">,</span> <span class=\"nu0\">73</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">25326001</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">3215031751</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">4759123141</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">61</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">1122004669633</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"sy1\">,</span> <span class=\"nu0\">23</span><span class=\"sy1\">,</span> <span class=\"nu0\">1662803</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">2152302898747</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">3474749660383</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">proving_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">341550071728321</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">11</span><span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"sy1\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">is_mr_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">As</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span><span class=\"sy3\">&gt;</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">find_ds</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         <span class=\"co1\">%% this is a test for compositeness; the two case patterns disprove</span><br/>         <span class=\"co1\">%%    compositeness.</span><br/>    <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">any</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                          <span class=\"kw1\">case</span> <span class=\"re3\">mr_series</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>                              <span class=\"br0\">[</span><span class=\"nu0\">1</span>|_<span class=\"br0\">]</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span>                     <span class=\"co1\">% first elem of list = 1</span><br/>                              <span class=\"re5\">L</span>     <span class=\"sy1\">-&gt;</span> <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span>   <span class=\"co1\">% some elem of list = N-1</span><br/>                          <span class=\"kw1\">end</span><br/>                  <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>                  <span class=\"re5\">As</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">find_ds</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">find_ds</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">find_ds</span><span class=\"br0\">(</span><span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re5\">D</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">of</span><br/>        true <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">find_ds</span><span class=\"br0\">(</span><span class=\"re5\">D</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        false <span class=\"sy1\">-&gt;</span><br/>            <span class=\"br0\">{</span><span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">mr_series</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Js</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">J</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">pow_mod</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">J</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Js</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">pow_mod</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re5\">E</span> <span class=\"kw1\">of</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">E</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>                 true  <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"re3\">pow_mod</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">E</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"re5\">M</span><span class=\"sy1\">;</span><br/>                 false <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy3\">*</span><span class=\"re3\">pow_mod</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"re5\">M</span><br/>             <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">random_bases</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">basis</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">basis</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span><span class=\"sy3\">&gt;</span><span class=\"nu0\">2</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>  <span class=\"co1\">% random:uniform returns a single random number in range 1 -&gt; N-3, to which is added 1, shifting the range to 2 -&gt; N-2</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">power</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span> <span class=\"sy3\">*</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Fortran", "loc": 57, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>  <span class=\"kw1\">module</span> Miller_Rabin<br/>  <span class=\"kw3\">use</span> PrimeDecompose<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">max_decompose</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/>  <span class=\"kw3\">private</span> <span class=\"sy0\">::</span> <span class=\"me2\">int_rrand</span>, max_decompose<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> int_rrand<span class=\"br0\">(</span>from, <span class=\"kw1\">to</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">int_rrand</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">from</span>, <span class=\"kw1\">to</span><br/>\u00a0<br/>    <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">o</span><br/>    <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span><br/>    int_rrand <span class=\"sy0\">=</span> <span class=\"kw4\">floor</span><span class=\"br0\">(</span>from <span class=\"sy0\">+</span> o <span class=\"sy0\">*</span> <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw4\">max</span><span class=\"br0\">(</span>from,<span class=\"kw1\">to</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">min</span><span class=\"br0\">(</span>from, <span class=\"kw1\">to</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> int_rrand<br/>\u00a0<br/>  <span class=\"kw1\">function</span> miller_rabin_test<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">k</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>max_decompose<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">huge</span><span class=\"br0\">)</span>                     <span class=\"sy0\">::</span> <span class=\"me2\">s</span>, d, i, a, x, r<br/>\u00a0<br/>    res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>    f <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>n &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>n, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">call</span> find_factors<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, f<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> <span class=\"kw4\">count</span><span class=\"br0\">(</span>f <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">**</span> s<span class=\"br0\">)</span><br/>    loop<span class=\"sy0\">:</span>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, k<br/>       a <span class=\"sy0\">=</span> int_rrand<span class=\"br0\">(</span><span class=\"nu0\">2</span>_huge, n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       x <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>a <span class=\"sy0\">**</span> d, n<span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>       <span class=\"kw1\">do</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span> x <span class=\"sy0\">==</span> <span class=\"br0\">(</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">cycle</span> loop<br/>          x <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x, n<span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> x <span class=\"sy0\">==</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>       res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> loop<br/>    res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> miller_rabin_test<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> Miller_Rabin</pre>"}, {"lang": "FreeBASIC", "loc": 101, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 29-11-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' TRUE/FALSE are built-in constants since FreeBASIC 1.04</span><br/><span class=\"co1\">' But we have to define them for older versions.</span><br/><span class=\"co2\">#Ifndef TRUE</span><br/>    <span class=\"co2\">#Define FALSE 0</span><br/>    <span class=\"co2\">#Define TRUE Not FALSE</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> mul_mod<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, modulus <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><br/>    <span class=\"co1\">' returns a * b mod modulus</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> x, y = a <span class=\"co1\">' a mod modulus, but a is already smaller then modulus</span><br/>\u00a0<br/>    <span class=\"kw1\">While</span> b &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>b And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            x = <span class=\"br0\">(</span>x + y<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> modulus<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        y = <span class=\"br0\">(</span>y <span class=\"kw1\">Shl</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> modulus<br/>        b = b <span class=\"kw1\">Shr</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> x<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> pow_mod<span class=\"br0\">(</span>b <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, power <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, modulus <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span><br/>    <span class=\"co1\">' returns b ^ power mod modulus</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> x = <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">While</span> power &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>power And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            <span class=\"co1\">' x = (x * b) Mod modulus</span><br/>            x = mul_mod<span class=\"br0\">(</span>x, b, modulus<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"co1\">' b = (b * b) Mod modulus</span><br/>        b = mul_mod<span class=\"br0\">(</span>b, b, modulus<span class=\"br0\">)</span><br/>        power = power <span class=\"kw1\">Shr</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> x<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> miller_rabin_test<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span>, k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Byte</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> n &gt; 9223372036854775808ull <span class=\"kw1\">Then</span> <span class=\"co1\">' limit 2^63, pow_mod/mul_mod can't handle bigger numbers</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"number is to big, program will end\"</span><br/>        <span class=\"kw1\">Sleep</span><br/>        <span class=\"kw1\">End</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"co1\">' 2 is a prime, if n is smaller then 2 or n is even then n = composite</span><br/>    <span class=\"kw1\">If</span> n = <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">TRUE</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> OrElse <span class=\"br0\">(</span><span class=\"br0\">(</span>n And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">FALSE</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> a, x, n_one = n - <span class=\"nu0\">1</span>, d = n_one<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> s<br/>\u00a0<br/>    <span class=\"kw1\">While</span> <span class=\"br0\">(</span>d And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>        d = d <span class=\"kw1\">Shr</span> <span class=\"nu0\">1</span><br/>        s = s + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">While</span> k &gt; <span class=\"nu0\">0</span><br/>        k = k - <span class=\"nu0\">1</span><br/>        a = <span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * <span class=\"br0\">(</span>n -<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> +<span class=\"nu0\">2</span>          <span class=\"co1\">' 2 &lt;= a &lt; n</span><br/>        x = pow_mod<span class=\"br0\">(</span>a, d, n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x = n_one<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">While</span><br/>        <span class=\"kw1\">For</span> r <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> s -<span class=\"nu0\">1</span><br/>            x = pow_mod<span class=\"br0\">(</span>x, <span class=\"nu0\">2</span>, n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">FALSE</span><br/>            <span class=\"kw1\">If</span> x = n_one <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">While</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">If</span> x &lt;&gt; n_one <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">FALSE</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw1\">TRUE</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span> <span class=\"kw1\">Timer</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> total<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> y, limit = <span class=\"nu0\">2</span>^<span class=\"nu0\">63</span>-<span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">For</span> y = limit - <span class=\"nu0\">1000</span> <span class=\"kw1\">To</span> limit<br/>    <span class=\"kw1\">If</span> miller_rabin_test<span class=\"br0\">(</span>y, <span class=\"nu0\">5</span><span class=\"br0\">)</span> = <span class=\"kw1\">TRUE</span> <span class=\"kw1\">Then</span><br/>        total = total + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Print</span> y,<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> total; <span class=\"st0\">\" primes between \"</span>; limit - <span class=\"nu0\">1000</span>; <span class=\"st0\">\" and \"</span>; y -<span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "FunL", "loc": 30, "block": "<pre class=\"text highlighted_source\">import util.rnd<br/>\u00a0<br/>def isProbablyPrimeMillerRabin( n, k ) =<br/>  d = n - 1<br/>  s = 0<br/>\u00a0<br/>  while 2|d<br/>    s++<br/>    d /= 2<br/>\u00a0<br/>  repeat k<br/>    a = rnd( 2, n )<br/>    x = a^d mod n<br/>\u00a0<br/>    if x == 1 or x == n - 1 then continue<br/>\u00a0<br/>    repeat s - 1<br/>      x = x^2 mod n<br/>\u00a0<br/>      if x == 1 then return false<br/>\u00a0<br/>      if x == n - 1 then break<br/>    else<br/>      return false<br/>\u00a0<br/>  true<br/>\u00a0<br/>for i &lt;- 3..100<br/>  if isProbablyPrimeMillerRabin( i, 5 )<br/>    println( i )</pre>"}, {"lang": "Go", "loc": 66, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"log\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// max uint32 is not prime</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">32</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// a few primes near the top of the range.  source: prime pages.</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint32</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">32</span> <span class=\"sy3\">-</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">32</span> <span class=\"sy3\">-</span> <span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">32</span> <span class=\"sy3\">-</span> <span class=\"nu0\">65</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">32</span> <span class=\"sy3\">-</span> <span class=\"nu0\">99</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> c &gt; p<span class=\"sy1\">;</span> c<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> prime<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                log<span class=\"sy3\">.</span>Fatalf<span class=\"sy1\">(</span><span class=\"st0\">\"prime(%d) returned true\"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>prime<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatalf<span class=\"sy1\">(</span><span class=\"st0\">\"prime(%d) returned false\"</span><span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        c<span class=\"sy2\">--</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> prime<span class=\"sy1\">(</span>n <span class=\"kw4\">uint32</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// bases of 2, 7, 61 are sufficient to cover 2^32</span><br/>    <span class=\"kw1\">switch</span> n <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">61</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// compute s, d where 2^s * d = n-1</span><br/>    nm1 <span class=\"sy2\">:=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    d <span class=\"sy2\">:=</span> nm1<br/>    s <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> d&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        d &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        s<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    n64 <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> a <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint32</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">61</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// compute x\u00a0:= a^d\u00a0% n</span><br/>        x <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        p <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> dr <span class=\"sy2\">:=</span> d<span class=\"sy1\">;</span> dr &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> dr &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> dr&amp;<span class=\"nu0\">1</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                x <span class=\"sy2\">=</span> x <span class=\"sy3\">*</span> p <span class=\"sy3\">%</span> n64<br/>            <span class=\"sy1\">}</span><br/>            p <span class=\"sy2\">=</span> p <span class=\"sy3\">*</span> p <span class=\"sy3\">%</span> n64<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> nm1 <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> r &gt;<span class=\"sy2\">=</span> s <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>            <span class=\"sy1\">}</span><br/>            x <span class=\"sy2\">=</span> x <span class=\"sy3\">*</span> x <span class=\"sy3\">%</span> n64<br/>            <span class=\"kw1\">if</span> x <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> nm1 <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 45, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Primes <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>Unsafe<br/>\u00a0<br/><span class=\"co1\">-- Miller-Rabin wrapped up as an (almost deterministic) pure function</span><br/>isPrime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isPrime n <span class=\"sy0\">=</span> unsafePerformIO <span class=\"br0\">(</span>isMillerRabinPrime <span class=\"nu0\">100</span> n<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>isMillerRabinPrime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isMillerRabinPrime k n<br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> n    <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span>   <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` primesTo100<span class=\"br0\">)</span><br/>   <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> ws <span class=\"sy0\">&lt;-</span> witnesses k n<br/>                    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a> <span class=\"br0\">[</span>test n <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span> evens <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> odds<span class=\"br0\">)</span> a <span class=\"sy0\">|</span> a <span class=\"sy0\">&lt;-</span> ws<span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>evens<span class=\"sy0\">,</span>odds<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:span\"><span class=\"kw3\">span</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>test <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> nat <span class=\"sy0\">=&gt;</span> nat <span class=\"sy0\">-&gt;</span> nat <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>nat<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> nat <span class=\"sy0\">-&gt;</span> nat <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>test n n<span class=\"sy0\">_</span>1 evens d a <span class=\"sy0\">=</span> x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">_</span>1<span class=\"br0\">]</span> <span class=\"sy0\">||</span> n<span class=\"sy0\">_</span>1 `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` powers <br/>  <span class=\"kw1\">where</span><br/>    x <span class=\"sy0\">=</span> powerMod n a d<br/>    powers <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>powerMod n a<span class=\"br0\">)</span> evens<br/>\u00a0<br/>witnesses <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"sy0\">,</span> Random a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>witnesses k n <br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9080191</span>         <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"nu0\">31</span><span class=\"sy0\">,</span><span class=\"nu0\">73</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4759123141</span>      <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">61</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3474749660383</span>   <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">341550071728321</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>           <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> g <span class=\"sy0\">&lt;-</span> newStdGen<br/>                             <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> k <span class=\"br0\">(</span>randomRs <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> g<span class=\"br0\">)</span><br/>\u00a0<br/>primesTo100 <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>primesTo100 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span><span class=\"nu0\">29</span><span class=\"sy0\">,</span><span class=\"nu0\">31</span><span class=\"sy0\">,</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span><span class=\"nu0\">43</span><span class=\"sy0\">,</span><span class=\"nu0\">47</span><span class=\"sy0\">,</span><span class=\"nu0\">53</span><span class=\"sy0\">,</span><span class=\"nu0\">59</span><span class=\"sy0\">,</span><span class=\"nu0\">61</span><span class=\"sy0\">,</span><span class=\"nu0\">67</span><span class=\"sy0\">,</span><span class=\"nu0\">71</span><span class=\"sy0\">,</span><span class=\"nu0\">73</span><span class=\"sy0\">,</span><span class=\"nu0\">79</span><span class=\"sy0\">,</span><span class=\"nu0\">83</span><span class=\"sy0\">,</span><span class=\"nu0\">89</span><span class=\"sy0\">,</span><span class=\"nu0\">97</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- powerMod m x n = x^n `mod` m</span><br/>powerMod <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> nat <span class=\"sy0\">=&gt;</span> nat <span class=\"sy0\">-&gt;</span> nat <span class=\"sy0\">-&gt;</span> nat <span class=\"sy0\">-&gt;</span> nat<br/>powerMod m x n  <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> x x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` m <br/>  <span class=\"kw1\">where</span><br/>  f d a y <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> d<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> y <span class=\"kw1\">else</span> g d a y <br/>  g i b y <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> i    <span class=\"sy0\">=</span> g <span class=\"br0\">(</span>i `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b<span class=\"sy0\">*</span>b `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` m<span class=\"br0\">)</span> y<br/>          <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> b <span class=\"br0\">(</span>b<span class=\"sy0\">*</span>y `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` m<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 33, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>A <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" is \"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>mrp<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"probably prime\"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"composite\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mrp<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>    nm1 <span class=\"sy0\">:=</span> decompose<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    s <span class=\"sy0\">:=</span> nm1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    d <span class=\"sy0\">:=</span> nm1<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span>k <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        a <span class=\"sy0\">:=</span> <span class=\"sy0\">?</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        x <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">^</span>d<span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>        <span class=\"kw1\">if</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">|</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">next</span><br/>        <span class=\"kw1\">every</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            x <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>            <span class=\"kw1\">if</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>            <span class=\"kw1\">if</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> <span class=\"kw1\">next</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">fail</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> decompose<span class=\"br0\">(</span>nm1<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>    d <span class=\"sy0\">:=</span> nm1<br/>    <span class=\"kw1\">while</span> d<span class=\"sy0\">%</span>2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        d <span class=\"sy0\">/:=</span> <span class=\"nu0\">2</span><br/>        s <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>s<span class=\"sy0\">,</span>d<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MillerRabinPrimalityTest <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> certainty <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span>certainty<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"probably prime\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"composite\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MillerRabinPrimalityTest <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> certainty <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span>certainty<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"probably prime\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"composite\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 33, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> probablyPrime<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">===</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">===</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Write (n - 1) as 2^s * d</span><br/>\t<span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\twhile <span class=\"br0\">(</span>d <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\td <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">++</span>s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tWitnessLoop<span class=\"sy0\">:</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// A base between 2 and n - 2</span><br/>\t\t<span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">===</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">===</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> s <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tx <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">===</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">continue</span> WitnessLoop<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> while <span class=\"br0\">(</span><span class=\"sy0\">--</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>witnesses(n::Union(Uint8,Int8,Uint16,Int16)) = (2,3)<br/>witnesses(n::Union(Uint32,Int32)) = n &lt; 1373653\u00a0? (2,3)\u00a0: (2,7,61)<br/>witnesses(n::Union(Uint64,Int64)) =<br/>        n &lt; 1373653        \u00a0? (2,3)\u00a0:<br/>        n &lt; 4759123141     \u00a0? (2,7,61)\u00a0:<br/>        n &lt; 2152302898747  \u00a0? (2,3,5,7,11)\u00a0:<br/>        n &lt; 3474749660383  \u00a0? (2,3,5,7,11,13)\u00a0:<br/>                              (2,325,9375,28178,450775,9780504,1795265022)<br/>\u00a0<br/>function isprime(n::Integer)<br/>    n == 2 &amp;&amp; return true<br/>    (n &lt; 2) | iseven(n) &amp;&amp; return false<br/>    s = trailing_zeros(n-1)<br/>    d = (n-1) &gt;&gt;&gt; s<br/>    for a in witnesses(n)<br/>        a &lt; n || break<br/>        x = powermod(a,d,n)<br/>        x == 1 &amp;&amp; continue<br/>        t = s<br/>        while x\u00a0!= n-1<br/>            (t-=1) &lt;= 0 &amp;&amp; return false<br/>            x = oftype(n, Base.widemul(x,x)\u00a0% n)<br/>            x == 1 &amp;&amp; return false<br/>        end<br/>    end<br/>    return true<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigTwo <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>2L<span class=\"br0\">)</span><br/>\u00a0<br/>fun isProbablyPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger, k<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    require <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> bigTwo <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">%</span> bigTwo <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Must be odd and greater than 2\"</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nn <span class=\"sy0\">=</span> n - BigInteger.<span class=\"me1\">ONE</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d<span class=\"sy0\">:</span> BigInteger<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        s++<br/>        d <span class=\"sy0\">=</span> nn.<span class=\"me1\">shiftRight</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">%</span> bigTwo <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    loop<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a<span class=\"sy0\">:</span> BigInteger<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            a <span class=\"sy0\">=</span> BigInteger<span class=\"br0\">(</span>n.<span class=\"me1\">bitLength</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, rand<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> bigTwo || a <span class=\"sy0\">&gt;</span> nn<span class=\"br0\">)</span> <span class=\"co1\">// make sure it's in the interval [2, n - 1]</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> a.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>d, n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ONE</span> || x <span class=\"sy0\">==</span> nn<span class=\"br0\">)</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">1</span> until s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            x <span class=\"sy0\">=</span>  <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">==</span> nn<span class=\"br0\">)</span> break<span class=\"sy0\">@</span>loop<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">20</span> <span class=\"co1\">// say</span><br/>    <span class=\"co1\">// obtain all primes up to 100</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The following numbers less than 100 are prime:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">3</span>..<span class=\"nu0\">99</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isProbablyPrime<span class=\"br0\">(</span>BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, k<span class=\"br0\">)</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// check if some big numbers are probably prime</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bia <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"4547337172376300111955330758342147474062293202868155909489\"</span><span class=\"br0\">)</span>,<br/>        BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"4547337172376300111955330758342147474062293202868155909393\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>bi in bia<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$bi is ${if (isProbablyPrime(bi, k)) \"</span>probably prime<span class=\"st0\">\" else \"</span>composite<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 292, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">DIM</span> mersenne<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">7</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">31</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">127</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">8191</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">131071</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">524287</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">2147483647</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">2305843009213693951</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">618970019642690137449562111</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">162259276829213363391578010288127</span><br/>mersenne<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">170141183460469231731687303715884105727</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">dim</span> SmallPrimes<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">data</span>       <span class=\"nu0\">2</span><span class=\"sy0\">,</span>      <span class=\"nu0\">3</span><span class=\"sy0\">,</span>      <span class=\"nu0\">5</span><span class=\"sy0\">,</span>      <span class=\"nu0\">7</span><span class=\"sy0\">,</span>     <span class=\"nu0\">11</span><span class=\"sy0\">,</span>     <span class=\"nu0\">13</span><span class=\"sy0\">,</span>     <span class=\"nu0\">17</span><span class=\"sy0\">,</span>     <span class=\"nu0\">19</span><span class=\"sy0\">,</span>     <span class=\"nu0\">23</span><span class=\"sy0\">,</span>     <span class=\"nu0\">29</span><br/><span class=\"kw1\">data</span>      <span class=\"nu0\">31</span><span class=\"sy0\">,</span>     <span class=\"nu0\">37</span><span class=\"sy0\">,</span>     <span class=\"nu0\">41</span><span class=\"sy0\">,</span>     <span class=\"nu0\">43</span><span class=\"sy0\">,</span>     <span class=\"nu0\">47</span><span class=\"sy0\">,</span>     <span class=\"nu0\">53</span><span class=\"sy0\">,</span>     <span class=\"nu0\">59</span><span class=\"sy0\">,</span>     <span class=\"nu0\">61</span><span class=\"sy0\">,</span>     <span class=\"nu0\">67</span><span class=\"sy0\">,</span>     <span class=\"nu0\">71</span><br/><span class=\"kw1\">data</span>      <span class=\"nu0\">73</span><span class=\"sy0\">,</span>     <span class=\"nu0\">79</span><span class=\"sy0\">,</span>     <span class=\"nu0\">83</span><span class=\"sy0\">,</span>     <span class=\"nu0\">89</span><span class=\"sy0\">,</span>     <span class=\"nu0\">97</span><span class=\"sy0\">,</span>    <span class=\"nu0\">101</span><span class=\"sy0\">,</span>    <span class=\"nu0\">103</span><span class=\"sy0\">,</span>    <span class=\"nu0\">107</span><span class=\"sy0\">,</span>    <span class=\"nu0\">109</span><span class=\"sy0\">,</span>    <span class=\"nu0\">113</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">127</span><span class=\"sy0\">,</span>    <span class=\"nu0\">131</span><span class=\"sy0\">,</span>    <span class=\"nu0\">137</span><span class=\"sy0\">,</span>    <span class=\"nu0\">139</span><span class=\"sy0\">,</span>    <span class=\"nu0\">149</span><span class=\"sy0\">,</span>    <span class=\"nu0\">151</span><span class=\"sy0\">,</span>    <span class=\"nu0\">157</span><span class=\"sy0\">,</span>    <span class=\"nu0\">163</span><span class=\"sy0\">,</span>    <span class=\"nu0\">167</span><span class=\"sy0\">,</span>    <span class=\"nu0\">173</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">179</span><span class=\"sy0\">,</span>    <span class=\"nu0\">181</span><span class=\"sy0\">,</span>    <span class=\"nu0\">191</span><span class=\"sy0\">,</span>    <span class=\"nu0\">193</span><span class=\"sy0\">,</span>    <span class=\"nu0\">197</span><span class=\"sy0\">,</span>    <span class=\"nu0\">199</span><span class=\"sy0\">,</span>    <span class=\"nu0\">211</span><span class=\"sy0\">,</span>    <span class=\"nu0\">223</span><span class=\"sy0\">,</span>    <span class=\"nu0\">227</span><span class=\"sy0\">,</span>    <span class=\"nu0\">229</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">233</span><span class=\"sy0\">,</span>    <span class=\"nu0\">239</span><span class=\"sy0\">,</span>    <span class=\"nu0\">241</span><span class=\"sy0\">,</span>    <span class=\"nu0\">251</span><span class=\"sy0\">,</span>    <span class=\"nu0\">257</span><span class=\"sy0\">,</span>    <span class=\"nu0\">263</span><span class=\"sy0\">,</span>    <span class=\"nu0\">269</span><span class=\"sy0\">,</span>    <span class=\"nu0\">271</span><span class=\"sy0\">,</span>    <span class=\"nu0\">277</span><span class=\"sy0\">,</span>    <span class=\"nu0\">281</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">283</span><span class=\"sy0\">,</span>    <span class=\"nu0\">293</span><span class=\"sy0\">,</span>    <span class=\"nu0\">307</span><span class=\"sy0\">,</span>    <span class=\"nu0\">311</span><span class=\"sy0\">,</span>    <span class=\"nu0\">313</span><span class=\"sy0\">,</span>    <span class=\"nu0\">317</span><span class=\"sy0\">,</span>    <span class=\"nu0\">331</span><span class=\"sy0\">,</span>    <span class=\"nu0\">337</span><span class=\"sy0\">,</span>    <span class=\"nu0\">347</span><span class=\"sy0\">,</span>    <span class=\"nu0\">349</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">353</span><span class=\"sy0\">,</span>    <span class=\"nu0\">359</span><span class=\"sy0\">,</span>    <span class=\"nu0\">367</span><span class=\"sy0\">,</span>    <span class=\"nu0\">373</span><span class=\"sy0\">,</span>    <span class=\"nu0\">379</span><span class=\"sy0\">,</span>    <span class=\"nu0\">383</span><span class=\"sy0\">,</span>    <span class=\"nu0\">389</span><span class=\"sy0\">,</span>    <span class=\"nu0\">397</span><span class=\"sy0\">,</span>    <span class=\"nu0\">401</span><span class=\"sy0\">,</span>    <span class=\"nu0\">409</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">419</span><span class=\"sy0\">,</span>    <span class=\"nu0\">421</span><span class=\"sy0\">,</span>    <span class=\"nu0\">431</span><span class=\"sy0\">,</span>    <span class=\"nu0\">433</span><span class=\"sy0\">,</span>    <span class=\"nu0\">439</span><span class=\"sy0\">,</span>    <span class=\"nu0\">443</span><span class=\"sy0\">,</span>    <span class=\"nu0\">449</span><span class=\"sy0\">,</span>    <span class=\"nu0\">457</span><span class=\"sy0\">,</span>    <span class=\"nu0\">461</span><span class=\"sy0\">,</span>    <span class=\"nu0\">463</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">467</span><span class=\"sy0\">,</span>    <span class=\"nu0\">479</span><span class=\"sy0\">,</span>    <span class=\"nu0\">487</span><span class=\"sy0\">,</span>    <span class=\"nu0\">491</span><span class=\"sy0\">,</span>    <span class=\"nu0\">499</span><span class=\"sy0\">,</span>    <span class=\"nu0\">503</span><span class=\"sy0\">,</span>    <span class=\"nu0\">509</span><span class=\"sy0\">,</span>    <span class=\"nu0\">521</span><span class=\"sy0\">,</span>    <span class=\"nu0\">523</span><span class=\"sy0\">,</span>    <span class=\"nu0\">541</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">547</span><span class=\"sy0\">,</span>    <span class=\"nu0\">557</span><span class=\"sy0\">,</span>    <span class=\"nu0\">563</span><span class=\"sy0\">,</span>    <span class=\"nu0\">569</span><span class=\"sy0\">,</span>    <span class=\"nu0\">571</span><span class=\"sy0\">,</span>    <span class=\"nu0\">577</span><span class=\"sy0\">,</span>    <span class=\"nu0\">587</span><span class=\"sy0\">,</span>    <span class=\"nu0\">593</span><span class=\"sy0\">,</span>    <span class=\"nu0\">599</span><span class=\"sy0\">,</span>    <span class=\"nu0\">601</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">607</span><span class=\"sy0\">,</span>    <span class=\"nu0\">613</span><span class=\"sy0\">,</span>    <span class=\"nu0\">617</span><span class=\"sy0\">,</span>    <span class=\"nu0\">619</span><span class=\"sy0\">,</span>    <span class=\"nu0\">631</span><span class=\"sy0\">,</span>    <span class=\"nu0\">641</span><span class=\"sy0\">,</span>    <span class=\"nu0\">643</span><span class=\"sy0\">,</span>    <span class=\"nu0\">647</span><span class=\"sy0\">,</span>    <span class=\"nu0\">653</span><span class=\"sy0\">,</span>    <span class=\"nu0\">659</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">661</span><span class=\"sy0\">,</span>    <span class=\"nu0\">673</span><span class=\"sy0\">,</span>    <span class=\"nu0\">677</span><span class=\"sy0\">,</span>    <span class=\"nu0\">683</span><span class=\"sy0\">,</span>    <span class=\"nu0\">691</span><span class=\"sy0\">,</span>    <span class=\"nu0\">701</span><span class=\"sy0\">,</span>    <span class=\"nu0\">709</span><span class=\"sy0\">,</span>    <span class=\"nu0\">719</span><span class=\"sy0\">,</span>    <span class=\"nu0\">727</span><span class=\"sy0\">,</span>    <span class=\"nu0\">733</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">739</span><span class=\"sy0\">,</span>    <span class=\"nu0\">743</span><span class=\"sy0\">,</span>    <span class=\"nu0\">751</span><span class=\"sy0\">,</span>    <span class=\"nu0\">757</span><span class=\"sy0\">,</span>    <span class=\"nu0\">761</span><span class=\"sy0\">,</span>    <span class=\"nu0\">769</span><span class=\"sy0\">,</span>    <span class=\"nu0\">773</span><span class=\"sy0\">,</span>    <span class=\"nu0\">787</span><span class=\"sy0\">,</span>    <span class=\"nu0\">797</span><span class=\"sy0\">,</span>    <span class=\"nu0\">809</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">811</span><span class=\"sy0\">,</span>    <span class=\"nu0\">821</span><span class=\"sy0\">,</span>    <span class=\"nu0\">823</span><span class=\"sy0\">,</span>    <span class=\"nu0\">827</span><span class=\"sy0\">,</span>    <span class=\"nu0\">829</span><span class=\"sy0\">,</span>    <span class=\"nu0\">839</span><span class=\"sy0\">,</span>    <span class=\"nu0\">853</span><span class=\"sy0\">,</span>    <span class=\"nu0\">857</span><span class=\"sy0\">,</span>    <span class=\"nu0\">859</span><span class=\"sy0\">,</span>    <span class=\"nu0\">863</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">877</span><span class=\"sy0\">,</span>    <span class=\"nu0\">881</span><span class=\"sy0\">,</span>    <span class=\"nu0\">883</span><span class=\"sy0\">,</span>    <span class=\"nu0\">887</span><span class=\"sy0\">,</span>    <span class=\"nu0\">907</span><span class=\"sy0\">,</span>    <span class=\"nu0\">911</span><span class=\"sy0\">,</span>    <span class=\"nu0\">919</span><span class=\"sy0\">,</span>    <span class=\"nu0\">929</span><span class=\"sy0\">,</span>    <span class=\"nu0\">937</span><span class=\"sy0\">,</span>    <span class=\"nu0\">941</span><br/><span class=\"kw1\">data</span>     <span class=\"nu0\">947</span><span class=\"sy0\">,</span>    <span class=\"nu0\">953</span><span class=\"sy0\">,</span>    <span class=\"nu0\">967</span><span class=\"sy0\">,</span>    <span class=\"nu0\">971</span><span class=\"sy0\">,</span>    <span class=\"nu0\">977</span><span class=\"sy0\">,</span>    <span class=\"nu0\">983</span><span class=\"sy0\">,</span>    <span class=\"nu0\">991</span><span class=\"sy0\">,</span>    <span class=\"nu0\">997</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1009</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1013</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1019</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1021</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1031</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1033</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1039</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1049</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1051</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1061</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1063</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1069</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1087</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1091</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1093</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1097</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1103</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1109</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1117</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1123</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1129</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1151</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1153</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1163</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1171</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1181</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1187</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1193</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1201</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1213</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1217</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1223</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1229</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1231</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1237</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1249</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1259</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1277</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1279</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1283</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1289</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1291</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1297</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1301</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1303</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1307</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1319</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1321</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1327</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1361</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1367</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1373</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1381</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1399</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1409</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1423</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1427</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1429</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1433</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1439</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1447</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1451</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1453</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1459</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1471</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1481</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1483</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1487</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1489</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1493</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1499</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1511</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1523</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1531</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1543</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1549</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1553</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1559</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1567</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1571</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1579</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1583</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1597</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1601</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1607</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1609</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1613</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1619</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1621</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1627</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1637</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1657</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1663</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1667</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1669</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1693</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1697</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1699</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1709</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1721</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1723</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1733</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1741</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1747</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1753</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1759</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1777</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1783</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1787</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1789</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1801</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1811</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1823</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1831</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1847</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1861</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1867</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1871</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1873</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1877</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1879</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1889</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1901</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1907</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1913</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1931</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1933</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1949</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1951</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1973</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1979</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1987</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">1993</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1997</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1999</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2003</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2011</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2017</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2027</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2029</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2039</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2053</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2063</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2069</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2081</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2083</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2087</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2089</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2099</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2111</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2113</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2129</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2131</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2137</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2141</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2143</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2153</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2161</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2179</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2203</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2207</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2213</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2221</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2237</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2239</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2243</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2251</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2267</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2269</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2273</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2281</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2287</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2293</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2297</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2309</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2311</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2333</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2339</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2341</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2347</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2351</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2357</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2371</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2377</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2381</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2383</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2389</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2393</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2399</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2411</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2417</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2423</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2437</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2441</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2447</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2459</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2467</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2473</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2477</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2503</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2521</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2531</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2539</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2543</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2549</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2551</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2557</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2579</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2591</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2593</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2609</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2617</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2621</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2633</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2647</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2657</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2659</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2663</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2671</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2677</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2683</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2687</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2689</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2693</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2699</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2707</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2711</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2713</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2719</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2729</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2731</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2741</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2749</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2753</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2767</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2777</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2789</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2791</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2797</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2801</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2803</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2819</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2833</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2837</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2843</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2851</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2857</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2861</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2879</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2887</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2897</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2903</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">2909</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2917</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2927</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2939</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2953</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2957</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2963</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2969</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2971</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2999</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3001</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3011</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3019</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3023</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3037</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3041</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3049</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3061</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3067</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3079</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3083</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3089</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3109</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3119</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3121</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3137</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3163</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3167</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3169</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3181</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3187</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3191</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3203</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3209</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3217</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3221</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3229</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3251</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3253</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3257</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3259</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3271</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3299</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3301</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3307</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3313</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3319</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3323</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3329</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3331</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3343</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3347</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3359</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3361</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3371</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3373</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3389</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3391</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3407</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3413</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3433</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3449</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3457</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3461</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3463</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3467</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3469</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3491</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3499</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3511</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3517</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3527</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3529</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3533</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3539</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3541</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3547</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3557</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3559</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3571</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3581</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3583</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3593</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3607</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3613</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3617</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3623</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3631</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3637</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3643</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3659</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3671</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3673</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3677</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3691</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3697</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3701</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3709</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3719</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3727</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3733</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3739</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3761</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3767</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3769</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3779</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3793</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3797</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3803</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3821</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3823</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3833</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3847</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3851</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3853</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3863</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3877</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3881</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3889</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3907</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">3911</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3917</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3919</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3923</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3929</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3931</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3943</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3947</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3967</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3989</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4001</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4003</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4007</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4013</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4019</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4021</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4027</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4049</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4051</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4057</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4073</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4079</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4091</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4093</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4099</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4111</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4127</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4129</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4133</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4139</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4153</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4157</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4159</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4177</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4201</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4211</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4217</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4219</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4229</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4231</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4241</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4243</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4253</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4259</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4261</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4271</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4273</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4283</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4289</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4297</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4327</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4337</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4339</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4349</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4357</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4363</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4373</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4391</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4397</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4409</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4421</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4423</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4441</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4447</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4451</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4457</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4463</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4481</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4483</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4493</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4507</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4513</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4517</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4519</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4523</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4547</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4549</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4561</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4567</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4583</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4591</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4597</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4603</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4621</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4637</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4639</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4643</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4649</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4651</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4657</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4663</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4673</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4679</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4691</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4703</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4721</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4723</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4729</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4733</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4751</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4759</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4783</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4787</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4789</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4793</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4799</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4801</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4813</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4817</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4831</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4861</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4871</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4877</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4889</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4903</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4909</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4919</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4931</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4933</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4937</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">4943</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4951</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4957</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4967</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4969</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4973</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4987</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4993</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4999</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5003</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5009</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5011</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5021</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5023</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5039</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5051</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5059</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5077</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5081</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5087</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5099</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5101</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5107</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5113</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5119</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5147</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5153</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5167</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5171</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5179</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5189</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5197</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5209</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5227</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5231</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5233</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5237</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5261</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5273</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5279</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5281</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5297</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5303</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5309</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5323</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5333</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5347</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5351</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5381</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5387</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5393</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5399</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5407</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5413</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5417</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5419</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5431</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5437</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5441</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5443</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5449</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5471</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5477</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5479</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5483</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5501</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5503</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5507</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5519</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5521</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5527</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5531</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5557</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5563</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5569</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5573</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5581</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5591</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5623</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5639</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5641</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5647</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5651</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5653</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5657</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5659</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5669</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5683</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5689</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5693</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5701</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5711</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5717</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5737</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5741</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5743</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5749</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5779</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5783</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5791</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5801</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5807</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5813</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5821</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5827</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5839</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5843</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5849</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5851</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5857</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5861</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5867</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5869</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5879</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5881</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5897</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5903</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5923</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5927</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5939</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">5953</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5981</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5987</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6007</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6011</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6029</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6037</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6043</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6047</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6053</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6067</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6073</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6079</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6089</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6091</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6101</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6113</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6121</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6131</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6133</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6143</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6151</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6163</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6173</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6197</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6199</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6203</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6211</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6217</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6221</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6229</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6247</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6257</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6263</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6269</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6271</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6277</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6287</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6299</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6301</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6311</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6317</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6323</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6329</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6337</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6343</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6353</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6359</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6361</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6367</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6373</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6379</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6389</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6397</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6421</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6427</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6449</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6451</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6469</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6473</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6481</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6491</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6521</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6529</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6547</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6551</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6553</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6563</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6569</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6571</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6577</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6581</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6599</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6607</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6619</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6637</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6653</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6659</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6661</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6673</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6679</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6689</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6691</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6701</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6703</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6709</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6719</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6733</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6737</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6761</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6763</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6779</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6781</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6791</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6793</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6803</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6823</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6827</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6829</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6833</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6841</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6857</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6863</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6869</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6871</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6883</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6899</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6907</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6911</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6917</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">6947</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6949</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6959</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6961</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6967</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6971</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6977</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6983</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6991</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6997</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7001</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7013</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7019</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7027</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7039</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7043</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7057</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7069</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7079</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7103</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7109</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7121</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7127</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7129</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7151</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7159</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7177</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7187</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7193</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7207</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7211</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7213</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7219</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7229</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7237</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7243</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7247</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7253</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7283</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7297</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7307</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7309</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7321</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7331</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7333</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7349</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7351</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7369</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7393</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7411</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7417</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7433</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7451</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7457</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7459</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7477</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7481</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7487</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7489</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7499</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7507</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7517</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7523</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7529</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7537</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7541</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7547</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7549</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7559</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7561</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7573</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7577</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7583</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7589</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7591</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7603</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7607</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7621</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7639</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7643</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7649</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7669</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7673</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7681</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7687</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7691</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7699</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7703</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7717</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7723</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7727</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7741</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7753</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7757</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7759</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7789</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7793</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7817</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7823</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7829</span><br/><span class=\"kw1\">data</span>    <span class=\"nu0\">7841</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7853</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7867</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7873</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7877</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7879</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7883</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7901</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7907</span><span class=\"sy0\">,</span>   <span class=\"nu0\">7919</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Liberty Miller Rabin Demonstration\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Loading Small Primes\"</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000</span><span class=\"sy0\">:</span>   <span class=\"kw1\">read</span> x <span class=\"sy0\">:</span> SmallPrimes<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>x <span class=\"sy0\">:</span><span class=\"kw1\">next</span> <span class=\"sy0\">:</span>NoOfSmallPrimes<span class=\"sy0\">=</span><span class=\"nu0\">1000</span><br/><span class=\"kw1\">print</span> NoOfSmallPrimes;<span class=\"st0\">\" Primes Loaded\"</span><br/>\u00a0<br/><span class=\"co1\">'Prompt \"Enter number to test:\";resp$</span><br/><span class=\"co1\">'x=val(resp$)</span><br/><span class=\"co1\">'goto [Jump]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">11</span><br/>\u00a0<br/> x<span class=\"sy0\">=</span>mersenne<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/> t1<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/> <span class=\"br0\">[</span>TryAnother<span class=\"br0\">]</span><br/> <span class=\"kw1\">print</span><br/>\u00a0<br/> iterations<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/> <span class=\"br0\">[</span><span class=\"kw1\">Loop</span><span class=\"br0\">]</span><br/>    iterations<span class=\"sy0\">=</span>iterations<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> MillerRabin<span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>     t2<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">print</span> <span class=\"st0\">\"Composite, found in \"</span>;t2<span class=\"sy0\">-</span>t1;<span class=\"st0\">\" milliseconds\"</span><br/>    <span class=\"kw1\">else</span><br/>     t2<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">print</span> x;<span class=\"st0\">\" Probably Prime. Tested in \"</span>;t2<span class=\"sy0\">-</span>t1;<span class=\"st0\">\" milliseconds\"</span><br/>     <span class=\"kw1\">playwave</span> <span class=\"st0\">\"tada.wav\"</span><span class=\"sy0\">,</span> async<br/> <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/> <span class=\"kw1\">print</span><br/>\u00a0<br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">END</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Function</span> GCD<span class=\"br0\">(</span> m<span class=\"sy0\">,</span>n <span class=\"br0\">)</span><br/><span class=\"co1\">' Find greatest common divisor with Extend Euclidian Algorithm</span><br/><span class=\"co1\">' Knuth Vol 1 P.13 Algorithm E</span><br/>\u00a0<br/>ap <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span>b  <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span>a  <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"sy0\">:</span>bp <span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span> c  <span class=\"sy0\">=</span>m <span class=\"sy0\">:</span>d  <span class=\"sy0\">=</span>n<br/>\u00a0<br/><span class=\"br0\">[</span>StepE2<span class=\"br0\">]</span><br/>q  <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>c<span class=\"sy0\">/</span>d<span class=\"br0\">)</span> <span class=\"sy0\">:</span>r  <span class=\"sy0\">=</span> c<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>d<br/>\u00a0<br/><span class=\"kw1\">if</span> r<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    c<span class=\"sy0\">=</span>d <span class=\"sy0\">:</span>d<span class=\"sy0\">=</span>r <span class=\"sy0\">:</span>t<span class=\"sy0\">=</span>ap <span class=\"sy0\">:</span>ap<span class=\"sy0\">=</span>a <span class=\"sy0\">:</span>a<span class=\"sy0\">=</span>t<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>a <span class=\"sy0\">:</span>t<span class=\"sy0\">=</span>bp  <span class=\"sy0\">:</span>bp<span class=\"sy0\">=</span>b  <span class=\"sy0\">:</span>b<span class=\"sy0\">=</span>t<span class=\"sy0\">-</span>q<span class=\"sy0\">*</span>b<br/>    <span class=\"co1\">'print ap;\" \";b;\" \";a;\" \";bp;\" \";c;\" \";d;\" \";t;\" \";q</span><br/>    <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>StepE2<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>GCD<span class=\"sy0\">=</span>a<span class=\"sy0\">*</span>m<span class=\"sy0\">+</span>b<span class=\"sy0\">*</span>n<br/>\u00a0<br/><span class=\"co1\">'print ap;\" \";b;\" \";a;\" \";bp;\" \";c;\" \";d;\" \";t;\" \";q</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> <span class=\"co1\">'Extended Euclidian GCD</span><br/>\u00a0<br/> <span class=\"kw1\">function</span> IsEven<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> x <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        IsEven<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>         IsEven<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">function</span> IsOdd<span class=\"br0\">(</span> x <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> x <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        IsOdd<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">else</span><br/>        IsOdd<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Function</span> FastExp<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>                  <span class=\"co1\">'MOD(x,N)</span><br/>      FastExp<span class=\"sy0\">=</span>x<span class=\"sy0\">-</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>x<span class=\"sy0\">/</span>N<span class=\"br0\">)</span><span class=\"sy0\">*</span>N<br/>      <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>ExitFunction<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> y <span class=\"kw1\">and</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"kw1\">then</span><br/>\u00a0<br/>     dum1<span class=\"sy0\">=</span>y<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>     dum2<span class=\"sy0\">=</span>y<span class=\"sy0\">-</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>y<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>              <span class=\"co1\">'MOD(y,2)</span><br/>\u00a0<br/>     temp<span class=\"sy0\">=</span>FastExp<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>dum1<span class=\"sy0\">,</span>N<span class=\"br0\">)</span><br/>     z<span class=\"sy0\">=</span>temp<span class=\"sy0\">*</span>temp<br/>     FastExp<span class=\"sy0\">=</span>z<span class=\"sy0\">-</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>z<span class=\"sy0\">/</span>N<span class=\"br0\">)</span><span class=\"sy0\">*</span>N            <span class=\"co1\">'MOD(temp*temp,N)</span><br/>     <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>ExitFunction<span class=\"br0\">]</span><br/>  <span class=\"kw1\">else</span><br/>\u00a0<br/>     dum1<span class=\"sy0\">=</span>y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>     dum1<span class=\"sy0\">=</span>dum1<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>     temp<span class=\"sy0\">=</span>FastExp<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>dum1<span class=\"sy0\">,</span>N<span class=\"br0\">)</span><br/>     dum2<span class=\"sy0\">=</span>temp<span class=\"sy0\">*</span>temp<br/>     temp<span class=\"sy0\">=</span>dum2<span class=\"sy0\">-</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>dum2<span class=\"sy0\">/</span>N<span class=\"br0\">)</span><span class=\"sy0\">*</span>N            <span class=\"co1\">'MOD(dum2,N)</span><br/>\u00a0<br/>     z<span class=\"sy0\">=</span>temp<span class=\"sy0\">*</span>x<br/>     FastExp<span class=\"sy0\">=</span>z<span class=\"sy0\">-</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>z<span class=\"sy0\">/</span>N<span class=\"br0\">)</span><span class=\"sy0\">*</span>N             <span class=\"co1\">'MOD(temp*x,N)</span><br/>     <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>ExitFunction<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"br0\">[</span>ExitFunction<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Function</span> MillerRabin<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'print \"Miller Rabin\"</span><br/><span class=\"co1\">'t1=time$(\"ms\")</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> IsEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    MillerRabin<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>ExtFn<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"br0\">[</span><span class=\"kw1\">Loop</span><span class=\"br0\">]</span><br/>    i<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">1000</span> <span class=\"kw1\">then</span> <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>Continue<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"kw1\">MOD</span> SmallPrimes<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      MillerRabin<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>ExtFn<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">goto</span> <span class=\"br0\">[</span><span class=\"kw1\">Loop</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>Continue<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> GCD<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    MillerRabin<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>ExtFn<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  q<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/>  t<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span>  <span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>   t<span class=\"sy0\">=</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>   q<span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>q<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">wend</span><br/>\u00a0<br/>\u00a0<br/>  r<span class=\"sy0\">=</span>FastExp<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    e<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> e <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>t<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r <span class=\"sy0\">&lt;&gt;</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        r<span class=\"sy0\">=</span>FastExp<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">While</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>      e<span class=\"sy0\">=</span>e<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/>    <span class=\"br0\">[</span>ExitLoop<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      MillerRabin<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">else</span><br/>      MillerRabin<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"br0\">[</span>ExtFn<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 9, "block": "<pre class=\"text highlighted_source\">MillerRabin[n_,k_]:=Module[{d=n-1,s=0,test=True},While[Mod[d,2]==0 ,d/=2\u00a0;s++]<br/>Do[<br/>  a=RandomInteger[{2,n-1}]; x=PowerMod[a,d,n];<br/>  If[x!=1,<br/>   For[ r = 0, r &lt; s, r++, If[x==n-1, Continue[]]; x = Mod[x*x, n]; ];<br/>   If[ x\u00a0!= n-1, test=False ];<br/>  ];<br/>,{k}];<br/>Print[test] ]</pre>"}, {"lang": "Maxima", "loc": 47, "block": "<pre class=\"text highlighted_source\">/* Miller-Rabin algorithm is builtin, see function primep. Here is another implementation */<br/>\u00a0<br/>\u00a0<br/>/* find highest power of p, p^s, that divide n, and return s and n / p^s */<br/>\u00a0<br/>facpow(n, p)\u00a0:= block(<br/>   [s: 0],<br/>   while mod(n, p) = 0 do (s: s + 1, n: quotient(n, p)),<br/>   [s, n]<br/>)$<br/>\u00a0<br/>/* check whether n is a strong pseudoprime to base a; s and d are given by facpow(n - 1, 2) */<br/>\u00a0<br/>sppp(n, a, s, d)\u00a0:= block(<br/>   [x: power_mod(a, d, n), q: false],<br/>   if x = 1 or x = n - 1 then true else (<br/>      from 2 thru s do (<br/>         x: mod(x * x, n),<br/>         if x = 1 then return(q: false) elseif x = n - 1 then return(q: true)<br/>      ),<br/>      q<br/>   )<br/>)$<br/>\u00a0<br/>/* Miller-Rabin primality test. For n &lt; 341550071728321, the test is deterministic;<br/>   for larger n, the number of bases tested is given by the option variable<br/>   primep_number_of_tests, which is used by Maxima in primep. The bound for deterministic<br/>   test is also the same as in primep. */<br/>\u00a0<br/>miller_rabin(n)\u00a0:= block(<br/>   [v: [2, 3, 5, 7, 11, 13, 17], s, d, q: true, a],<br/>   if n &lt; 19 then member(n, v) else (<br/>      [s, d]: facpow(n - 1, 2),<br/>      if n &lt; 341550071728321 then (    /* see http://oeis.org/A014233 */<br/>         for a in v do (<br/>            if not sppp(n, a, s, d) then return(q: false)<br/>         ),<br/>         q<br/>      ) else (<br/>         thru primep_number_of_tests do (<br/>            a: 2 + random(n - 3),<br/>            if not sppp(n, a, s, d) then return(q: false)<br/>         ),<br/>         q<br/>      )<br/>   )<br/>)$</pre>"}, {"lang": "Mercury", "loc": 1, "block": "<pre>  \u00a0:- func n2 = integer.integer.\n  \u00a0:- pragma memo(n2/0).\n   n2 = integer.integer(2).\n</pre>"}, {"lang": "Oz", "loc": 107, "block": "<pre class=\"oz highlighted_source\">\u00a0<br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/><span class=\"co1\">% module: Primality</span><br/><span class=\"co1\">% file: Primality.oz</span><br/><span class=\"co1\">% version: 17 DEC 2014 @ 6:50AM</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">declare</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsPrime</span> N<span class=\"br0\">}</span>\t\t\t<span class=\"co1\">% main interface of module</span><br/>\t<span class=\"kw1\">if</span> N <span class=\"sy0\">&lt;</span> 2 <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 4 <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>\t<span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>N <span class=\"kw1\">mod</span> 2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 341330071728321 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>IsMRprime N <span class=\"br0\">{</span>DetWit N<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span>IsMRprime N <span class=\"br0\">{</span>ProbWit N 20<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">DetWit</span> N<span class=\"br0\">}</span>\t\t\t<span class=\"co1\">% deterministic witnesses</span><br/>\t<span class=\"kw1\">if</span> N <span class=\"sy0\">&lt;</span> 1373653 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 3<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 9080191 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>31 73<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 25326001 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 3 5<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 3215031751 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 3 5 7<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 4759123141 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 7 61<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 1122004669633 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 13 23 1662803<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 2152302898747 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 3 5 7 11<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 3474749660383 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 3 5 7 11 13<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">elseif</span> N <span class=\"sy0\">&lt;</span> 341550071728321 <span class=\"kw1\">then</span> <span class=\"br0\">[</span>2 3 5 7 11 13 17<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">else</span> nil<br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ProbWit</span> N K<span class=\"br0\">}</span>\t\t<span class=\"co1\">% probabilistic witnesses</span><br/>\t<span class=\"kw1\">local</span> A B C <span class=\"kw1\">in</span><br/>\tA = 6364136223846793005<br/>\tB = 1442695040888963407<br/>\tC = N <span class=\"sy0\">-</span> 2<br/>\t<span class=\"br0\">{</span>RWloop N A B C K nil<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">RWloop</span> N A B C K L<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> N1 <span class=\"kw1\">in</span><br/>\t\tN1 = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>N <span class=\"sy0\">*</span> A<span class=\"br0\">)</span> <span class=\"sy0\">+</span> B<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> C<span class=\"br0\">)</span> <span class=\"sy0\">+</span> 1<br/>\t\t<span class=\"kw1\">if</span> K <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> L<br/>\t\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span>RWloop N1 A B C <span class=\"br0\">(</span>K <span class=\"sy0\">-</span> 1<span class=\"br0\">)</span> N1<span class=\"sy0\">|</span>L<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsMRprime</span> N As<span class=\"br0\">}</span>\t<span class=\"co1\">% the Miller-Rabin algorithm\t</span><br/>\t<span class=\"kw1\">local</span> D S T Ts <span class=\"kw1\">in</span><br/>\t<span class=\"br0\">{</span>FindDS N<span class=\"br0\">}</span> = D<span class=\"sy0\">|</span>S<br/>\t<span class=\"br0\">{</span>OuterLoop N As D S<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">OuterLoop</span> N As D S<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> A At Base C <span class=\"kw1\">in</span><br/>\tAs = A<span class=\"sy0\">|</span>At<br/>\tBase = <span class=\"br0\">{</span>Powm A D N<span class=\"br0\">}</span><br/>\tC = <span class=\"br0\">{</span>InnerLoop Base N 0 S<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span>Not C<span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <br/>\t<span class=\"kw1\">elseif</span> <span class=\"br0\">{</span>And C <span class=\"br0\">(</span>At <span class=\"sy0\">==</span> nil<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"kw1\">true</span> <br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span>OuterLoop N At D S<span class=\"br0\">}</span> <br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">InnerLoop</span> Base N Loop S<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> NextBase NextLoop <span class=\"kw1\">in</span><br/>\tNextBase = <span class=\"br0\">(</span>Base <span class=\"sy0\">*</span> Base<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> N<br/>\tNextLoop = Loop <span class=\"sy0\">+</span> 1<br/>\t   <span class=\"kw1\">if</span> <span class=\"br0\">{</span>And <span class=\"br0\">(</span>Loop <span class=\"sy0\">==</span> 0<span class=\"br0\">)</span> <span class=\"br0\">(</span>Base <span class=\"sy0\">==</span> 1<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>\t   <span class=\"kw1\">elseif</span> Base <span class=\"sy0\">==</span> <span class=\"br0\">(</span>N <span class=\"sy0\">-</span> 1<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>\t   <span class=\"kw1\">elseif</span> NextLoop <span class=\"sy0\">==</span> S <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>\t   <span class=\"kw1\">else</span> <span class=\"br0\">{</span>InnerLoop NextBase N NextLoop S<span class=\"br0\">}</span>    <br/>\t   <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">FindDS</span> N<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span>FindDS1 <span class=\"br0\">(</span>N <span class=\"sy0\">-</span> 1<span class=\"br0\">)</span> 0<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">FindDS1</span> D S<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>D <span class=\"kw1\">mod</span> 2 <span class=\"sy0\">==</span> 0<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>FindDS1 <span class=\"br0\">(</span>D <span class=\"kw1\">div</span> 2<span class=\"br0\">)</span> <span class=\"br0\">(</span>S <span class=\"sy0\">+</span> 1<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> D<span class=\"sy0\">|</span>S<br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%</span><br/>\u00a0<br/><span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Powm</span> A D N<span class=\"br0\">}</span> \t\t<span class=\"co1\">% returns (A ^ D) mod N</span><br/>\t<span class=\"kw1\">if</span> D <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> 1<br/>\t<span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>D <span class=\"kw1\">mod</span> 2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Pow <span class=\"br0\">{</span>Powm A <span class=\"br0\">(</span>D <span class=\"kw1\">div</span> 2<span class=\"br0\">)</span> N<span class=\"br0\">}</span> 2<span class=\"br0\">}</span> <span class=\"kw1\">mod</span> N<br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">(</span>A <span class=\"sy0\">*</span> <span class=\"br0\">{</span>Powm A <span class=\"br0\">(</span>D <span class=\"sy0\">-</span> 1<span class=\"br0\">)</span> N<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> N<br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">%--------------------------------------------------------------------------%\t</span><br/><span class=\"co1\">% end_module Primality</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">MR<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">ispseudoprime</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 32, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> bigint try <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'GMP'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is_prime <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$d</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$s</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  LOOP<span class=\"sy0\">:</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bmodpow</span><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$s</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span>  <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">next</span> LOOP <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> is_prime <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 42, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># the expmod-function from: http://rosettacode.org/wiki/Modular_exponentiation</span><br/><span class=\"kw2\">sub</span> expmod<span class=\"br0\">(</span>Int <span class=\"re0\">$a</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> Int <span class=\"re0\">$b</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">repeat</span> <span class=\"kw1\">while</span> <span class=\"re0\">$b</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$b</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">subset</span> PrimeCandidate <span class=\"kw1\">of</span> Int <span class=\"kw1\">where</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">and</span> <span class=\"re0\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Bool <span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> is_prime<span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$k</span><span class=\"br0\">)</span>            <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> Bool <span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> is_prime<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$k</span><span class=\"br0\">)</span>                 <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> Bool <span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> is_prime<span class=\"br0\">(</span>PrimeCandidate <span class=\"re0\">$n</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> Int <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> Int <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"re0\">$d</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$d</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$s</span><span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> expmod<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\"># one could just write \"next if $x == 1 | $n - 1\"</span><br/>\t\t<span class=\"co1\"># but this takes much more time in current rakudo/nom</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$s</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> mod <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">!==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"br0\">{</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> </pre>"}, {"lang": "Phix", "loc": 66, "block": "<pre class=\"text highlighted_source\">function powermod(atom a, atom n, atom m)<br/>-- calculate a^n%mod<br/>    atom p = a, res = 1<br/>    while n do<br/>        if and_bits(n,1) then<br/>            res = mod(res*p,m)<br/>        end if<br/>        p = mod(p*p,m)<br/>        n = floor(n/2)<br/>    end while<br/>    return res<br/>end function<br/>\u00a0<br/>function witness(atom n, atom s, atom d, sequence a)<br/>-- n-1 = 2^s * d with d odd by factoring powers of 2 from n-1<br/>    for i=1 to length(a) do<br/>        atom x = powermod(a[i], d, n), y, w=s<br/>        while w do<br/>            y = mod(x*x,n)<br/>            if y == 1 and x\u00a0!= 1 and x\u00a0!= n-1 then<br/>                return false<br/>            end if<br/>            x = y<br/>            w -= 1<br/>        end while<br/>        if y\u00a0!= 1 then<br/>            return false<br/>        end if<br/>    end for<br/>    return true;<br/>end function<br/>\u00a0<br/>function is_prime_mr(atom n)<br/>    if (mod(n,2)==0 and n!=2) <br/>    or (n&lt;2) <br/>    or (mod(n,3)==0 and n!=3) then<br/>        return false<br/>    elsif n&lt;=3 then<br/>        return true<br/>    end if<br/>    atom d = floor(n/2)<br/>    atom s = 1;<br/>    while and_bits(d,1)=0 do<br/>        d /= 2<br/>        s += 1<br/>    end while<br/>\u00a0<br/>    sequence a<br/>    if n &lt; 1373653 then<br/>        a = {2, 3}<br/>    elsif n &lt; 9080191 then<br/>        a = {31, 73}<br/>    elsif (machine_bits()=32 and n &lt; 94910107)<br/>       or (machine_bits()=64 and n &lt; 4295041217) then<br/>        a = {2, 7, 61}<br/>    else<br/>        puts(1,\"limits exceeded\\n\")<br/>        return 0<br/>    end if<br/>    return witness(n, s, d, a)<br/>end function<br/>\u00a0<br/>sequence tests = {999983,999809,999727,52633,60787,999999,999995,999991}<br/>for i=1 to length(tests) do<br/>    printf(1,\"%d is\u00a0%s\\n\",{tests[i],{\"composite\",\"prime\"}[is_prime_mr(tests[i])+1]})<br/>end for</pre>"}, {"lang": "PHP", "loc": 39, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$d</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$s</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$k</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/bcpowmod\"><span class=\"kw3\">bcpowmod</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/bcmod\"><span class=\"kw3\">bcmod</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/bcmul\"><span class=\"kw3\">bcmul</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$i</span>, \"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 47, "block": "<pre class=\"text highlighted_source\">(de longRand (N)<br/>   (use (R D)<br/>      (while (=0 (setq R (abs (rand)))))<br/>      (until (&gt; R N)<br/>         (unless (=0 (setq D (abs (rand))))<br/>            (setq R (* R D)) ) )<br/>      (% R N) ) )<br/>\u00a0<br/>(de **Mod (X Y N)<br/>   (let M 1<br/>      (loop<br/>         (when (bit? 1 Y)<br/>            (setq M (% (* M X) N)) )<br/>         (T (=0 (setq Y (&gt;&gt; 1 Y)))<br/>            M )<br/>         (setq X (% (* X X) N)) ) ) )<br/>\u00a0<br/>(de _prim? (N D S)<br/>   (use (A X R)<br/>      (while (&gt; 2 (setq A (longRand N))))<br/>      (setq R 0  X (**Mod A D N))<br/>      (loop<br/>         (T<br/>            (or<br/>               (and (=0 R) (= 1 X))<br/>               (= X (dec N)) )<br/>            T )<br/>         (T<br/>            (or<br/>               (and (&gt; R 0) (= 1 X))<br/>               (&gt;= (inc 'R) S) )<br/>            NIL )<br/>         (setq X (% (* X X) N)) ) ) )<br/>\u00a0<br/>(de prime? (N K)<br/>   (default K 50)<br/>   (and<br/>      (&gt; N 1)<br/>      (bit? 1 N)<br/>      (let (D (dec N)  S 0)<br/>         (until (bit? 1 D)<br/>            (setq<br/>               D  (&gt;&gt; 1 D)<br/>               S  (inc S) ) )<br/>         (do K<br/>            (NIL (_prim? N D S))<br/>            T ) ) ) )</pre>"}, {"lang": "Prolog", "loc": 83, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> module<span class=\"br0\">(</span>primality<span class=\"sy4\">,</span> <span class=\"br0\">[</span>is_prime<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% is_prime/2 returns false if N is composite, true if N probably prime</span><br/><span class=\"co1\">%    implements a Miller-Rabin primality test and is deterministic for N &lt; 3.415e+14,</span><br/><span class=\"co1\">%    and is probabilistic for larger N. Adapted from the Erlang version.</span><br/>is_prime<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Ret <span class=\"sy6\">=</span> false<span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>          <span class=\"co1\">% 1 is non-prime</span><br/>is_prime<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Ret <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>           <span class=\"co1\">% 2 is prime</span><br/>is_prime<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Ret <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>           <span class=\"co1\">% 3 is prime</span><br/>is_prime<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tN <span class=\"sy6\">&gt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Ret <span class=\"sy6\">=</span> false<span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>  <span class=\"co1\">% even number &gt; 3 is composite</span><br/>is_prime<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tN <span class=\"sy6\">&gt;</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>                  <span class=\"co1\">% odd number &gt; 3</span><br/>\tN <span class=\"sy6\">&lt;</span> <span class=\"nu0\">341550071728321</span><span class=\"sy4\">,</span><br/>\tdeterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/> \tis_mr_prime<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>               <span class=\"co1\">% deterministic test</span><br/>is_prime<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\trandom_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <span class=\"nu0\">100</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tis_mr_prime<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Out<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span>             <span class=\"co1\">% probabilistic test</span><br/>\u00a0<br/><span class=\"co1\">% returns list of deterministic witnesses</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">1373653</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">9080191</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">31</span><span class=\"sy4\">,</span> <span class=\"nu0\">73</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">25326001</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">3215031751</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">4759123141</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">61</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">1122004669633</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">13</span><span class=\"sy4\">,</span> <span class=\"nu0\">23</span><span class=\"sy4\">,</span> <span class=\"nu0\">1662803</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">2152302898747</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">3474749660383</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">11</span><span class=\"sy4\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>deterministic_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> N <span class=\"sy6\">&lt;</span> <span class=\"nu0\">341550071728321</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">11</span><span class=\"sy4\">,</span> <span class=\"nu0\">13</span><span class=\"sy4\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% random_witnesses/4 returns a list of K witnesses selected at random with range 2 -&gt; N-2</span><br/>random_witnesses<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>random_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> K<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Out<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t\tG <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\t\tH <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> random<span class=\"br0\">(</span>G<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\tI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> K <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    \trandom_witnesses<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> I<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% find_ds/2 receives odd integer N and returns [D, S] s.t. N-1 = 2^S * D</span><br/>find_ds<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tA <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    find_ds<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>find_ds<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tD <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span> <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span><br/>\tP <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> D <span class=\"sy3\">//</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tQ <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> S <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tfind_ds<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Q<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>find_ds<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span>D<span class=\"sy4\">,</span> S<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>is_mr_prime<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> As<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    find_ds<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    L <span class=\"sy6\">=</span> <span class=\"br0\">[</span>D <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>    T <span class=\"sy6\">=</span> <span class=\"br0\">[</span>S <span class=\"sy5\">|</span> _<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>    outer_loop<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> As<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>outer_loop<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> As<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    As <span class=\"sy6\">=</span> <span class=\"br0\">[</span>A <span class=\"sy5\">|</span> At<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>    Base <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> powm<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    inner_loop<span class=\"br0\">(</span>Base<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Result<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>  Result <span class=\"sy6\">==</span> false           <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Ret <span class=\"sy6\">=</span> false<br/>\t<span class=\"sy4\">;</span>  Result <span class=\"sy6\">==</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">,</span> At <span class=\"sy6\">==</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Ret <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><br/>\t<span class=\"sy4\">;</span>  outer_loop<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> At<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Ret<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>inner_loop<span class=\"br0\">(</span>Base<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> Loop<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Result<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    Next_Base <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>Base <span class=\"sy3\">*</span> Base<span class=\"br0\">)</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> N<span class=\"sy4\">,</span><br/>    Next_Loop <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Loop <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span> Loop <span class=\"sy1\">=:=</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Base <span class=\"sy1\">=:=</span> <span class=\"nu0\">1</span>   <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Result <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><br/>\t<span class=\"sy4\">;</span>             Base <span class=\"sy1\">=:=</span> N<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Result <span class=\"sy6\">=</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><br/>\t<span class=\"sy4\">;</span> Next_Loop <span class=\"sy1\">=:=</span> S          <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Result <span class=\"sy6\">=</span> false<br/>\t<span class=\"sy4\">;</span> inner_loop<span class=\"br0\">(</span>Next_Base<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> Next_Loop<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> Result<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 29, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Enumeration</span> <br/>  #Composite<br/>  #Probably_prime<br/><span class=\"kw1\">EndEnumeration</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Miller_Rabin<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> d<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, s, x, r<br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">=</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #Probably_prime<br/>  <span class=\"kw1\">ElseIf</span> n<span class=\"sy0\">%</span>2<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #Composite<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">While</span> d<span class=\"sy0\">%</span>2<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    d<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    s<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">While</span> k<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    x<span class=\"sy0\">=</span><span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>,d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>    <span class=\"kw1\">If</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Or</span> x<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">For</span> r<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      x<span class=\"sy0\">=</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"sy0\">%</span>n<br/>      <span class=\"kw1\">If</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span>: <span class=\"kw1\">ProcedureReturn</span> #Composite: <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">If</span> x<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>: <span class=\"kw1\">Break</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">If</span> x<span class=\"sy0\">&lt;&gt;</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>: <span class=\"kw1\">ProcedureReturn</span> #Composite: <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #Probably_prime<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 78, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>_mrpt_num_trials <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"co1\"># number of bases to test</span><br/>\u00a0<br/><span class=\"kw1\">def</span> is_probable_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Miller-Rabin primality test.<br/>\u00a0<br/>    A return value of False means n is certainly not prime. A return value of<br/>    True means n is very likely a prime.<br/>\u00a0<br/>    &gt;&gt;&gt; is_probable_prime(1)<br/>    Traceback (most recent call last):<br/>        ...<br/>    AssertionError<br/>    &gt;&gt;&gt; is_probable_prime(2)<br/>    True<br/>    &gt;&gt;&gt; is_probable_prime(3)<br/>    True<br/>    &gt;&gt;&gt; is_probable_prime(4)<br/>    False<br/>    &gt;&gt;&gt; is_probable_prime(5)<br/>    True<br/>    &gt;&gt;&gt; is_probable_prime(123456789)<br/>    False<br/>\u00a0<br/>    &gt;&gt;&gt; primes_under_1000 = [i for i in range(2, 1000) if is_probable_prime(i)]<br/>    &gt;&gt;&gt; len(primes_under_1000)<br/>    168<br/>    &gt;&gt;&gt; primes_under_1000[-10:]<br/>    [937, 941, 947, 953, 967, 971, 977, 983, 991, 997]<br/>\u00a0<br/>    &gt;&gt;&gt; is_probable_prime(6438080068035544392301298549614926991513861075340134<span class=\"es0\">\\</span><br/>3291807343952413826484237063006136971539473913409092293733259038472039<span class=\"es0\">\\</span><br/>7133335969549256322620979036686633213903952966175107096769180017646161<span class=\"es0\">\\</span><br/>851573147596390153)<br/>    True<br/>\u00a0<br/>    &gt;&gt;&gt; is_probable_prime(7438080068035544392301298549614926991513861075340134<span class=\"es0\">\\</span><br/>3291807343952413826484237063006136971539473913409092293733259038472039<span class=\"es0\">\\</span><br/>7133335969549256322620979036686633213903952966175107096769180017646161<span class=\"es0\">\\</span><br/>851573147596390153)<br/>    False<br/>    \"\"\"</span><br/>    <span class=\"kw1\">assert</span> n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><br/>    <span class=\"co1\"># special case 2</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>    <span class=\"co1\"># ensure n is odd</span><br/>    <span class=\"kw1\">if</span> n\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"co1\"># write n-1 as 2**s * d</span><br/>    <span class=\"co1\"># repeatedly try to divide n-1 by 2</span><br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    d <span class=\"sy0\">=</span> n-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        quotient<span class=\"sy0\">,</span> remainder <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> remainder <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">break</span><br/>        s +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        d <span class=\"sy0\">=</span> quotient<br/>    <span class=\"kw1\">assert</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>**s * d <span class=\"sy0\">==</span> n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># test the base a to see whether it is a witness for the compositeness of n</span><br/>    <span class=\"kw1\">def</span> try_composite<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">pow</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">pow</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"nu0\">2</span>**i * d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n-<span class=\"nu0\">1</span>:<br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">True</span> <span class=\"co1\"># n is definitely composite</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>_mrpt_num_trials<span class=\"br0\">)</span>:<br/>        a <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> try_composite<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span> <span class=\"co1\"># no base tested showed n as composite</span></pre>"}, {"lang": "Racket", "loc": 33, "block": "<pre class=\"text highlighted_source\">#lang racket  <br/>(define (miller-rabin-expmod base exp m)<br/>  (define (squaremod-with-check x)<br/>    (define (check-nontrivial-sqrt1 x square)<br/>      (if (and (= square 1)<br/>               (not (= x 1))<br/>               (not (= x (- m 1))))<br/>          0<br/>          square))<br/>    (check-nontrivial-sqrt1 x (remainder (expt x 2) m)))<br/>  (cond ((= exp 0) 1)<br/>        ((even? exp) (squaremod-with-check<br/>                      (miller-rabin-expmod base (/ exp 2) m)))<br/>        (else<br/>         (remainder (* base (miller-rabin-expmod base (- exp 1) m))<br/>                    m))))<br/>\u00a0<br/>(define (miller-rabin-test n)<br/>  (define (try-it a)<br/>    (define (check-it x)<br/>      (and (not (= x 0)) (= x 1)))<br/>    (check-it (miller-rabin-expmod a (- n 1) n)))<br/>  (try-it (+ 1 (random (remainder (- n 1) 4294967087)))))<br/>\u00a0<br/>(define (fast-prime? n times)<br/>  (for/and ((i (in-range times)))<br/>    (miller-rabin-test n)))<br/>\u00a0<br/>(define (prime? n(times 100))<br/>  (fast-prime? n times))<br/>\u00a0<br/>(prime? 4547337172376300111955330758342147474062293202868155909489)\u00a0;-&gt; outputs true<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program puts the  Miller\u2500Rabin  primality test  through its paces.               */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> limit times <span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> limit==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> limit==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> limit=<span class=\"nu0\">1000</span>       <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> times==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> times==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> times=  <span class=\"nu0\">10</span>       <span class=\"coMULTI\">/*  \"      \"        \"   \"   \"     \"    */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">200</span>, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>limit<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*we're dealing with some ginormous #s.*/</span><br/>tell= times<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>                                    <span class=\"coMULTI\">/*display primes  only if times is neg.*/</span><br/>times=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span>;          w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*use absolute value of TIMES; get len.*/</span><br/><span class=\"kw1\">call</span> genP  limit                                 <span class=\"coMULTI\">/*suspenders now, use a belt later \u00b7\u00b7\u00b7 */</span><br/>@MR= <span class=\"st0\">'Miller\u2500Rabin primality test'</span>               <span class=\"coMULTI\">/*define a character literal for  SAY. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"There are\"</span>     #     <span class=\"st0\">'primes \u2264'</span>     limit   <span class=\"coMULTI\">/*might as well display some stuff.    */</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2193]  (skipping unity); show sep line*/</span><br/>     <span class=\"kw1\">do</span> a=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> times;     <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">89</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*(skipping unity)   do range of TIMEs.*/</span><br/>     p=<span class=\"nu0\">0</span>                                         <span class=\"coMULTI\">/*counter of primes for this pass.     */</span><br/>          <span class=\"kw1\">do</span> z=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> limit                      <span class=\"coMULTI\">/*now, let's get busy and crank primes.*/</span><br/>          <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>M_Rt<span class=\"br0\">(</span>z, a<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*Not prime?   Then try another number.*/</span><br/>          p=p + <span class=\"nu0\">1</span>                                <span class=\"coMULTI\">/*well, we found another one, by gum!  */</span><br/>          <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> z   <span class=\"st0\">'is prime according to'</span>     @MR     <span class=\"st0\">\"with K=\"</span>a<br/>          <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>z   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>          <span class=\"kw1\">say</span> <span class=\"st0\">'[K='</span>a<span class=\"st0\">\"] \"</span>    z   <span class=\"st0\">\"isn't prime\u00a0!\"</span>  <span class=\"coMULTI\">/*oopsy\u2500doopsy  and/or  whoopsy\u2500daisy\u00a0!*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*z*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'        for 1\u2500\u2500\u25ba'</span>limit<span class=\"st0\">\", K=\"</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>a,w<span class=\"br0\">)</span><span class=\"st0\">','</span> @MR <span class=\"st0\">\"found\"</span>  p  <span class=\"st0\">'primes {out of'</span> #<span class=\"st0\">\"}.\"</span><br/>     <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*a*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>genP: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> high;     @<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;     @<span class=\"sy0\">.</span>1=<span class=\"nu0\">2</span>;   @<span class=\"sy0\">.</span>2=<span class=\"nu0\">3</span>;    \u00a0!<span class=\"sy0\">.</span>2=<span class=\"nu0\">1</span>;  \u00a0!<span class=\"sy0\">.</span>3=<span class=\"nu0\">1</span>;     #=<span class=\"nu0\">2</span><br/>         <span class=\"kw1\">do</span> <a class=\"__cf_email__\" data-cfemail=\"89e3b4c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#+<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> high               <span class=\"coMULTI\">/*just examine odd integers from here. */</span><br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">while</span> k<span class=\"sy0\">*</span>k<span class=\"sy0\">&lt;</span>=j;  <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>@<span class=\"sy0\">.</span>k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>         #=#+<span class=\"nu0\">1</span>;    @<span class=\"sy0\">.</span>#=j;        \u00a0!<span class=\"sy0\">.</span>j=<span class=\"nu0\">1</span>          <span class=\"coMULTI\">/*bump prime counter; add prime to the */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>;      <span class=\"kw1\">return</span>                <span class=\"coMULTI\">/*@. array; define a prime in\u00a0!. array.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>M_Rt: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n,k;  d=n-<span class=\"nu0\">1</span>;   nL=d  <span class=\"coMULTI\">/*Miller\u2500Rabin:   A.K.A.  Rabin\u2500Miller.*/</span><br/>      <span class=\"kw1\">if</span> n==<span class=\"nu0\">2</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*special case of (the)  even  prime.  */</span><br/>      <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"sy0\">|</span> n<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*check for too low, or an even number.*/</span><br/>      s=-<span class=\"nu0\">1</span>;      <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> d<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>; d=d%2; s=s+<span class=\"nu0\">1</span> <span class=\"coMULTI\">/*keep halving  until a zero remainder.*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/>\u00a0<br/>               <span class=\"kw1\">do</span> k;   \u00a0?=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, nL<span class=\"br0\">)</span>          <span class=\"coMULTI\">/* [\u2193]  perform the DO loop   K  times.*/</span><br/>               x=?<span class=\"sy0\">**</span>d <span class=\"sy0\">//</span> n                       <span class=\"coMULTI\">/*X  can get real gihugeic really fast.*/</span><br/>               <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span> <span class=\"sy0\">|</span> x==nL  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>     <span class=\"coMULTI\">/*First or penultimate? Try another pow*/</span><br/>                 <span class=\"kw1\">do</span> s;     x=x<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">//</span> n           <span class=\"coMULTI\">/*compute new  X   \u2261   X\u00b2  modulus  N. */</span><br/>                 <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>         <span class=\"coMULTI\">/*if unity,  it's definitely not prime.*/</span><br/>                 <span class=\"kw1\">if</span> x==nL  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>            <span class=\"coMULTI\">/*if  N-1,   then it could be prime.   */</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span>                     <span class=\"coMULTI\">/* [\u2191]  // is REXX's division remainder*/</span><br/>               <span class=\"kw1\">if</span> x<span class=\"sy0\">\\</span>==nL   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>         <span class=\"coMULTI\">/*nope, it ain't prime nohows, noway.  */</span><br/>               <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*k*/</span>                     <span class=\"coMULTI\">/*maybe it's prime, maybe it ain't \u00b7\u00b7\u00b7 */</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                                   <span class=\"coMULTI\">/*coulda/woulda/shoulda be prime;  yup.*/</span></pre>"}, {"lang": "Ring", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Miller\u2013Rabin primality test<br/>\u00a0<br/>see \"Input a number: \" give n<br/>see \"Input test: \" give k<br/>\u00a0<br/>test =  millerrabin(n,k)<br/>if test = 0  <br/>   see \"Probably Prime\" + nl<br/>else<br/>   see \"Composite\" + nl<br/>ok<br/>\u00a0<br/>func millerrabin(n, k)<br/>       if n = 2 <br/>          millerRabin = 0 <br/>          return millerRabin<br/>       ok <br/>       if n\u00a0% 2 = 0 or n &lt; 2 <br/>          millerRabin = 1 <br/>          return millerRabin<br/>       ok <br/>       d = n - 1<br/>       s = 0<br/>       while d\u00a0% 2 = 0<br/>               d = d / 2<br/>               s = s + 1<br/>       end <br/>       while k &gt; 0<br/>               k = k - 1<br/>               base = 2 + floor((random(10)/10)*(n-3))<br/>               x = pow(base, d)\u00a0% n<br/>               if x\u00a0!= 1 and x\u00a0!= n-1 <br/>                  for r=1 to s-1<br/>                      x = (x * x)\u00a0% n<br/>                      if x = 1 <br/>                         millerRabin = 1  <br/>                         return millerRabin<br/>                      ok<br/>                      if x = n-1 <br/>                         exit<br/>                      ok<br/>                  next <br/>                  if x\u00a0!= n-1 <br/>                     millerRabin = 1 <br/>                     return millerRabin<br/>                  ok<br/>                ok<br/>     end<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> mod_exp<span class=\"br0\">(</span>n, e, mod<span class=\"br0\">)</span><br/>  <span class=\"kw3\">fail</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">'negative exponent'</span> <span class=\"kw1\">if</span> e <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>  prod = <span class=\"nu0\">1</span><br/>  base = n <span class=\"sy0\">%</span> mod<br/>  <span class=\"kw1\">until</span> e.<span class=\"me1\">zero</span>?<br/>    prod = <span class=\"br0\">(</span>prod <span class=\"sy0\">*</span> base<span class=\"br0\">)</span> <span class=\"sy0\">%</span> mod <span class=\"kw1\">if</span> e.<span class=\"me1\">odd</span>?<br/>    e <span class=\"sy0\">&gt;&gt;</span>= <span class=\"nu0\">1</span><br/>    base = <span class=\"br0\">(</span>base <span class=\"sy0\">*</span> base<span class=\"br0\">)</span> <span class=\"sy0\">%</span> mod<br/>  <span class=\"kw1\">end</span><br/>  prod<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> miller_rabin_prime?<span class=\"br0\">(</span>n, g<span class=\"br0\">)</span><br/>  d = n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  s = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> d <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>    d <span class=\"sy0\">/</span>= <span class=\"nu0\">2</span><br/>    s <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  g.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    a = <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    x = mod_exp<span class=\"br0\">(</span>a, d, n<span class=\"br0\">)</span> <span class=\"co1\"># x = (a**d)\u00a0% n</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> x == <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> x == n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">s</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      x = mod_exp<span class=\"br0\">(</span>x, <span class=\"nu0\">2</span>, n<span class=\"br0\">)</span> <span class=\"co1\"># x = (x**2)\u00a0% n</span><br/>      <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> x == <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> x == n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> x\u00a0!= n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw2\">true</span> <span class=\"co1\"># probably</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> primes = <span class=\"br0\">(</span><span class=\"nu0\">3</span>..<span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">find_all</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> miller_rabin_prime?<span class=\"br0\">(</span>i,<span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 55, "block": "<pre class=\"text highlighted_source\">input \"Input a number:\";n<br/>input \"Input test:\";k<br/>\u00a0<br/>test =  millerRabin(n,k)<br/>if test = 0 then <br/>  print \"Probably Prime\"<br/> else<br/>  print \"Composite\"<br/>end if<br/>wait<br/>\u00a0<br/>' ----------------------------------------<br/>' Returns <br/>'  Composite     = 1<br/>'  Probably Prime = 0<br/>' ----------------------------------------<br/> FUNCTION millerRabin(n, k)<br/>  if n = 2 then<br/>    millerRabin = 0 'probablyPrime<br/>    goto [funEnd]<br/>  end if<br/>\u00a0<br/>  if n mod 2 = 0 or n &lt; 2 then<br/>    millerRabin = 1 'composite<br/>    goto [funEnd]<br/>  end if<br/>\u00a0<br/>d = n - 1<br/>while d mod 2 = 0<br/>  d = d / 2<br/>  s = s + 1<br/>wend<br/>\u00a0<br/>while k &gt; 0<br/>  k = k - 1<br/>  base = 2 + int(rnd(1)*(n-3))<br/>  x = (base^d) mod n<br/>  if x &lt;&gt; 1 and x &lt;&gt; n-1 then<br/>    for r=1 To s-1<br/>      x =(x * x) mod n<br/>      if x=1 then<br/>       millerRabin = 1 ' composite <br/>       goto [funEnd]<br/>      end if<br/>      if x = n-1 then exit for<br/>    next r<br/>\u00a0<br/>    if x&lt;&gt;n-1 then<br/>      millerRabin =  1 ' composite <br/>      goto [funEnd]<br/>    end if<br/>  end if<br/>wend<br/>[funEnd]<br/>END FUNCTION</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"me1\">BigInt</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MillerRabinPrimalityTest <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>n, certainty <span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, args<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"$n is ${if (n.isProbablePrime(certainty)) \"</span>probably prime<span class=\"st0\">\" else \"</span>composite<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 43, "block": "<pre class=\"scheme highlighted_source\">#<span class=\"sy0\">!</span>r6rs<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>rnrs base <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi\u00a0:<span class=\"nu0\">27</span> random<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Fast modular exponentiation.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>modexpt b <span class=\"kw1\">e</span> M<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">even?</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>modexpt <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">*</span> b b<span class=\"br0\">)</span> M<span class=\"br0\">)</span> <span class=\"br0\">(</span>div <span class=\"kw1\">e</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">odd?</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"sy0\">*</span> b <span class=\"br0\">(</span>modexpt b <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">e</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Return s, d such that d is odd and 2^s * d = n.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>split n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> recur <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">d</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">odd?</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>values <span class=\"kw1\">s</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>recur <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">s</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>div <span class=\"kw1\">d</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Test whether the number a proves that n is composite.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>composite<span class=\"sy0\">-</span>witness? n a<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span><span class=\"sy0\">*-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>split <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>modexpt a <span class=\"kw1\">d</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">let</span> try <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"kw1\">s</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <span class=\"br0\">(</span>modexpt x <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> r<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>try <span class=\"br0\">(</span><span class=\"sy0\">-</span> r <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Test whether n &gt; 2 is a Miller-Rabin pseudoprime, k trials.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>pseudoprime? n k<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> k<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>composite<span class=\"sy0\">-</span>witness? n a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>pseudoprime? n <span class=\"br0\">(</span><span class=\"sy0\">-</span> k <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Test whether any integer is prime.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>prime? n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>pseudoprime? n <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 46, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func boolean: millerRabin (in bigInteger: n, in integer: k) is func<br/>  result<br/>    var boolean: probablyPrime is TRUE;<br/>  local<br/>    var bigInteger: d is 0_;<br/>    var integer: r is 0;<br/>    var integer: s is 0;<br/>    var bigInteger: a is 0_;<br/>    var bigInteger: x is 0_;<br/>    var integer: tests is 0;<br/>  begin<br/>    if n &lt; 2_ or (n &gt; 2_ and not odd(n)) then<br/>      probablyPrime\u00a0:= FALSE;<br/>    elsif n &gt; 3_ then<br/>      d\u00a0:= pred(n);<br/>      s\u00a0:= lowestSetBit(d);<br/>      d &gt;&gt;:= s;<br/>      while tests &lt; k and probablyPrime do<br/>        a\u00a0:= rand(2_, pred(n));<br/>        x\u00a0:= modPow(a, d, n);<br/>        if x &lt;&gt; 1_ and x &lt;&gt; pred(n) then<br/>          r\u00a0:= 1;<br/>          while r &lt; s and x &lt;&gt; 1_ and x &lt;&gt; pred(n) do<br/>            x\u00a0:= modPow(x, 2_, n);<br/>            incr(r);<br/>          end while;<br/>          probablyPrime\u00a0:= x = pred(n);<br/>        end if;<br/>        incr(tests);<br/>      end while;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: number is 0_;<br/>  begin<br/>    for number range 2_ to 1000_ do<br/>      if millerRabin(number, 10) then<br/>        writeln(number);<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 27, "block": "<pre class=\"ruby highlighted_source\">func is_prime<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    n == <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/>    n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"kw2\">false</span><br/>    n  <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> <span class=\"kw2\">false</span><br/>\u00a0<br/>    var d = n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    var s = valuation<span class=\"br0\">(</span>d, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    d <span class=\"sy0\">&gt;&gt;</span>= s<br/>\u00a0<br/>    k.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>        var a = irand<span class=\"br0\">(</span><span class=\"nu0\">2</span>, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        var x = expmod<span class=\"br0\">(</span>a, d, n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x ~~ <span class=\"br0\">[</span><span class=\"nu0\">1</span>, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"br0\">(</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>            x = expmod<span class=\"br0\">(</span>x, <span class=\"nu0\">2</span>, n<span class=\"br0\">)</span><br/>            <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x == n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x\u00a0!= n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> is_prime<span class=\"br0\">(</span>n, <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">grep</span><span class=\"br0\">(</span>^<span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Smalltalk", "loc": 34, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Integer</span> extend <span class=\"br0\">[</span><br/>  <span class=\"re5\">millerRabinTest</span>: <span class=\"re5\">kl</span> <span class=\"br0\">[</span> |<span class=\"re3\">k</span>| <span class=\"re6\">k</span> <span class=\"sy0\">:=</span> <span class=\"re5\">kl</span>.<br/>    <span class=\"kw1\">self</span> &lt;<span class=\"sy0\">=</span> <span class=\"re5\">3</span> <br/>      ifTrue: <span class=\"br0\">[</span> ^true <span class=\"br0\">]</span><br/>      ifFalse: <span class=\"br0\">[</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">self</span> even<span class=\"br0\">)</span><br/>           ifTrue: <span class=\"br0\">[</span> ^false <span class=\"br0\">]</span><br/>           ifFalse: <span class=\"br0\">[</span> |<span class=\"re3\">d s</span>|<br/>              <span class=\"re6\">d</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> - <span class=\"re5\">1</span>.<br/>              <span class=\"re5\">s</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/>              <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"re5\">d</span> rem: <span class=\"re5\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span><br/>                 whileTrue: <span class=\"br0\">[</span><br/>                   <span class=\"re5\">d</span> <span class=\"sy0\">:=</span> <span class=\"re5\">d</span> / <span class=\"re5\">2</span>.<br/>                   <span class=\"re5\">s</span> <span class=\"sy0\">:=</span> <span class=\"re5\">s</span> + <span class=\"re5\">1</span>.<br/>                 <span class=\"br0\">]</span>.<br/>              <span class=\"br0\">[</span> <span class=\"re5\">k</span><span class=\"sy0\">:=</span><span class=\"re5\">k</span>-<span class=\"re5\">1</span>. <span class=\"re5\">k</span> &gt;<span class=\"sy0\">=</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span><br/>                 whileTrue: <span class=\"br0\">[</span> |<span class=\"re3\">a x r</span>|<br/>                    <span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Random</span> between: <span class=\"re5\">2</span> and: <span class=\"br0\">(</span><span class=\"kw1\">self</span> - <span class=\"re5\">2</span><span class=\"br0\">)</span>.<br/>                    <span class=\"re5\">x</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">a</span> raisedTo: <span class=\"re5\">d</span><span class=\"br0\">)</span> rem: <span class=\"kw1\">self</span>.<br/>                    <span class=\"br0\">(</span> <span class=\"re5\">x</span> <span class=\"sy0\">=</span> <span class=\"re5\">1</span> <span class=\"br0\">)</span><br/>                      ifFalse: <span class=\"br0\">[</span> |<span class=\"re3\">r</span>|<br/>\t\t        <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> -<span class=\"re5\">1</span>.<br/>                          <span class=\"br0\">[</span> <span class=\"re5\">r</span> <span class=\"sy0\">:=</span> <span class=\"re5\">r</span> + <span class=\"re5\">1</span>. <span class=\"br0\">(</span><span class=\"re5\">r</span> &lt; s<span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span><span class=\"re5\">x</span> ~<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">self</span> - <span class=\"re5\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>                          whileTrue: <span class=\"br0\">[</span><br/>                     \t    <span class=\"re5\">x</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">x</span> raisedTo: <span class=\"re5\">2</span><span class=\"br0\">)</span> rem: <span class=\"kw1\">self</span><br/>                          <span class=\"br0\">]</span>.<br/>                        <span class=\"br0\">(</span> <span class=\"re5\">x</span> ~<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">self</span> - <span class=\"re5\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span> ^false <span class=\"br0\">]</span><br/>                      <span class=\"br0\">]</span><br/>                 <span class=\"br0\">]</span>.<br/>              ^true<br/>           <span class=\"br0\">]</span><br/>      <span class=\"br0\">]</span>        <br/>  <span class=\"br0\">]</span> <br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "Standard ML", "loc": 49, "block": "<pre class=\"text highlighted_source\">open LargeInt;<br/>\u00a0<br/>val mr_iterations = Int.toLarge 20;<br/>val rng = Random.rand (557216670, 13504100); (* arbitrary pair to seed RNG *)<br/>\u00a0<br/>fun expmod base 0 m = 1<br/>  | expmod base exp m =<br/>      if exp mod 2 = 0<br/>      then let val rt = expmod base (exp div 2) m;<br/>               val sq = (rt*rt) mod m<br/>           in if sq = 1<br/>                 andalso rt &lt;&gt; 1     (* ignore the two *)<br/>                 andalso rt &lt;&gt; (m-1) (* 'trivial' roots *)<br/>              then 0<br/>              else sq<br/>           end<br/>      else (base*(expmod base (exp-1) m)) mod m;<br/>\u00a0<br/>(* arbitrary precision random number [0,n) *)<br/>fun rand n =<br/>  let val base = Int.toLarge(valOf Int.maxInt)+1;<br/>      fun step r lim =<br/>        if lim &lt; n then step (Int.toLarge(Random.randNat rng) + r*base) (lim*base)<br/>                   else r mod n<br/>  in step 0 1 end;<br/>\u00a0<br/>fun miller_rabin n = <br/>  let fun trial n 0 = true<br/>        | trial n t = let val a = 1+rand(n-1)<br/>                      in (expmod a (n-1) n) = 1<br/>                         andalso trial n (t-1)<br/>                      end<br/>  in trial n mr_iterations end; <br/>\u00a0<br/>fun trylist label lst = (label, ListPair.zip (lst, map miller_rabin lst));<br/>\u00a0<br/>trylist \"test the first six Carmichael numbers\"<br/>        [561, 1105, 1729, 2465, 2821, 6601];<br/>\u00a0<br/>trylist \"test some known primes\"<br/>        [7369, 7393, 7411, 27367, 27397, 27407];<br/>\u00a0<br/>(* find ten random 30 digit primes (according to Miller-Rabin) *)<br/>let fun findPrime trials = let val t = trials+1;<br/>                               val n = 2*rand(500000000000000000000000000000)+1<br/>                           in if miller_rabin n<br/>                              then (n,t)<br/>                              else findPrime t end<br/>in List.tabulate (10, fn e =&gt; findPrime 0) end;</pre>"}, {"lang": "Tcl", "loc": 34, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> miller_rabin <span class=\"br0\">{</span>n k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> true<span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># write n - 1 as 2^s\u00b7d with d odd by factoring powers of 2 from n \u2212 1</span><br/>    <span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> s <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">incr</span> s<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> k -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> + int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> - <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">**</span> <span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> == <span class=\"nu0\">1</span> || <span class=\"re0\">$x</span> == <span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> r <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> r<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> == <span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>miller_rabin <span class=\"re0\">$i</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">zkl: var BN=Import(\"zklBigNum\");<br/>zkl: BN(\"4547337172376300111955330758342147474062293202868155909489\").probablyPrime()<br/>True<br/>zkl: BN(\"4547337172376300111955330758342147474062293202868155909393\").probablyPrime()<br/>False</pre>"}]}