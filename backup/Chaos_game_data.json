{"task": "Chaos_game", "blocks": [{"lang": "BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">10 SCREEN 1<br/>20 X = INT(RND(0) * 200)<br/>30 Y = INT(RND(0) * 173)<br/>40 FOR I=1 TO 20000<br/>50 V = INT(RND(0) * 3) + 1<br/>60 ON V GOTO 70,100,130<br/>70 X = X/2<br/>80 Y = Y/2<br/>90 GOTO 150<br/>100 X = 100 + (100-X)/2<br/>110 Y = 173 - (173-Y)/2<br/>120 GOTO 150<br/>130 X = 200 - (200-X)/2<br/>140 Y = Y/2<br/>150 PSET X,Y,V<br/>160 NEXT I</pre>"}, {"lang": "C", "loc": 53, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;graphics.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/><span class=\"co2\">#include&lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define pi M_PI</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\ttime_t t<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> side<span class=\"sy0\">,</span> vertices<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>seedX<span class=\"sy0\">,</span>seedY<span class=\"sy0\">,</span>windowSide<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>iter<span class=\"sy0\">,</span>choice<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter triangle side length\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,&amp;</span>side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of iterations\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>iter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\twindowSide <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>side<span class=\"sy0\">;</span><br/>\u00a0<br/>\tinitwindow<span class=\"br0\">(</span>windowSide<span class=\"sy0\">,</span>windowSide<span class=\"sy0\">,</span><span class=\"st0\">\"Sierpinski Chaos\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tvertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> windowSide<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> side<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tvertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> windowSide<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> side<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>pi<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tputpixel<span class=\"br0\">(</span>vertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>vertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tseedX <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>vertices<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>vertices<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> vertices<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tseedY <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>vertices<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>vertices<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> vertices<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tputpixel<span class=\"br0\">(</span>seedX<span class=\"sy0\">,</span>seedY<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>iter<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tchoice <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tseedX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seedX <span class=\"sy0\">+</span> vertices<span class=\"br0\">[</span>choice<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\tseedY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>seedY <span class=\"sy0\">+</span> vertices<span class=\"br0\">[</span>choice<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tputpixel<span class=\"br0\">(</span>seedX<span class=\"sy0\">,</span>seedY<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getch.html\"><span class=\"kw3\">getch</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tclosegraph<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 150, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> BMP_SIZE <span class=\"sy1\">=</span> <span class=\"nu0\">600</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> myBitmap <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, brush<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span>, clr<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, wid<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span> DeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BITMAPINFO bi<span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>        <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>    <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>      <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>       <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>        bi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>      <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>        HDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        hdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        width <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span> BYTE clr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">memset</span><span class=\"br0\">(</span> pBits, clr, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setBrushColor<span class=\"br0\">(</span> DWORD bClr <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> brush <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        brush <span class=\"sy1\">=</span> CreateSolidBrush<span class=\"br0\">(</span> bClr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, brush <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD c <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        clr <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setPenWidth<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        wid <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> path <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        BITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>        BITMAPINFO       infoheader<span class=\"sy4\">;</span><br/>        BITMAP           bitmap<span class=\"sy4\">;</span><br/>        DWORD            wb<span class=\"sy4\">;</span><br/>\u00a0<br/>        GetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        DWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        ZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        ZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>        infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        fileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        fileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        GetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        HANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        WriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        CloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> createPen<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        pen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, wid, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        SelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span> HDC    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span> HBRUSH brush<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>    <span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span> <span class=\"kw4\">int</span>    width, height, wid<span class=\"sy4\">;</span><br/>    DWORD    clr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> chaos <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> start<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        POINT org<span class=\"sy4\">;</span><br/>        fillPts<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> initialPoint<span class=\"br0\">(</span> org <span class=\"br0\">)</span><span class=\"sy4\">;</span> initColors<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> cnt <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, i<span class=\"sy4\">;</span><br/>        bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> BMP_SIZE, BMP_SIZE <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        bmp.<span class=\"me1\">clear</span><span class=\"br0\">(</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> cnt<span class=\"sy2\">++</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span><span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">6</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span> <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy4\">:</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span> <span class=\"kw1\">case</span> <span class=\"nu0\">5</span><span class=\"sy4\">:</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy4\">:</span> <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy4\">:</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            setPoint<span class=\"br0\">(</span> org, myPoints<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, i <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// --- edit this path --- //</span><br/>        bmp.<span class=\"me1\">saveBitmap</span><span class=\"br0\">(</span> <span class=\"st0\">\"F:/st.bmp\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> setPoint<span class=\"br0\">(</span> POINT <span class=\"sy3\">&amp;</span>o, POINT v, <span class=\"kw4\">int</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        POINT z<span class=\"sy4\">;</span><br/>        o.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> o.<span class=\"me1\">x</span> <span class=\"sy2\">+</span> v.<span class=\"me1\">x</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> o.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> o.<span class=\"me1\">y</span> <span class=\"sy2\">+</span> v.<span class=\"me1\">y</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        SetPixel<span class=\"br0\">(</span> bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, o.<span class=\"me1\">x</span>, o.<span class=\"me1\">y</span>, colors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> fillPts<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> BMP_SIZE <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        myPoints<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> BMP_SIZE <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> myPoints<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        myPoints<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> myPoints<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> myPoints<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> myPoints<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> initialPoint<span class=\"br0\">(</span> POINT<span class=\"sy3\">&amp;</span> p <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        p.<span class=\"me1\">x</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> BMP_SIZE <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">2</span> <span class=\"sy4\">?</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">30</span> <span class=\"sy2\">+</span> <span class=\"nu0\">10</span> <span class=\"sy4\">:</span> <span class=\"sy2\">-</span><span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">30</span> <span class=\"sy2\">+</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        p.<span class=\"me1\">y</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> BMP_SIZE <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">2</span> <span class=\"sy4\">?</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">30</span> <span class=\"sy2\">+</span> <span class=\"nu0\">10</span> <span class=\"sy4\">:</span> <span class=\"sy2\">-</span><span class=\"br0\">(</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">30</span> <span class=\"sy2\">+</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> initColors<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        colors<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        colors<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        colors<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    myBitmap bmp<span class=\"sy4\">;</span><br/>    POINT myPoints<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    COLORREF colors<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw4\">unsigned</span> <span class=\"br0\">)</span><span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    chaos c<span class=\"sy4\">;</span> c.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 31, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaChaosGame<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> bm <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> referencePoints <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">600</span><span class=\"br0\">)</span>,<br/>                <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"nu0\">300</span>, <span class=\"nu0\">81</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>r<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">600</span><span class=\"br0\">)</span>, r<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> count<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                bm<span class=\"sy0\">.</span><span class=\"me1\">SetPixel</span><span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span>, p<span class=\"sy0\">.</span><span class=\"me1\">Y</span>, Color<span class=\"sy0\">.</span><span class=\"me1\">Magenta</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> r<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> referencePoints<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">+</span> referencePoints<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> filename <span class=\"sy0\">=</span> <span class=\"st0\">\"Chaos Game.png\"</span><span class=\"sy0\">;</span><br/>            bm<span class=\"sy0\">.</span><span class=\"me1\">Save</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Process<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defpackage #<span class=\"sy0\">:</span><span class=\"me1\">chaos</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> #<span class=\"sy0\">:</span><span class=\"me1\">cl</span><br/>        #<span class=\"sy0\">:</span><span class=\"me1\">opticl</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package #<span class=\"sy0\">:</span><span class=\"me1\">chaos</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *image-size* <span class=\"nu0\">600</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *margin* <span class=\"nu0\">50</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *edge-size* <span class=\"br0\">(</span>- *image-size* *margin* *margin*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defparameter *iterations* <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> chaos <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>image <span class=\"br0\">(</span>make-<span class=\"nu0\">8</span>-bit-rgb-image *image-size* *image-size* <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>- *image-size* *margin*<span class=\"br0\">)</span> *margin*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>- *image-size* *margin*<span class=\"br0\">)</span> <span class=\"br0\">(</span>- *image-size* *margin*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>c <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>- *image-size* *margin* <span class=\"br0\">(</span>round <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">tan</span> <span class=\"br0\">(</span>/ pi <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> *edge-size*<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>round *image-size* <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>point <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">random</span> *edge-size*<span class=\"br0\">)</span> *margin*<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">random</span> *edge-size*<span class=\"br0\">)</span> *margin*<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i *iterations*<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ref <span class=\"br0\">(</span>ecase <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span> a<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">1</span> b<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">2</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> point <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>round <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first  point<span class=\"br0\">)</span> <span class=\"br0\">(</span>first  ref<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>round <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>second point<span class=\"br0\">)</span> <span class=\"br0\">(</span>second ref<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>pixel image <span class=\"br0\">(</span>first point<span class=\"br0\">)</span> <span class=\"br0\">(</span>second point<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>values <span class=\"nu0\">255</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>write-png-file <span class=\"st0\">\"chaos.png\"</span> image<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 105, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"image\"</span><br/>\t<span class=\"st0\">\"image/color\"</span><br/>\t<span class=\"st0\">\"image/draw\"</span><br/>\t<span class=\"st0\">\"image/gif\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"math\"</span><br/>\t<span class=\"st0\">\"math/rand\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/>\t<span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> bwPalette <span class=\"sy2\">=</span> color<span class=\"sy3\">.</span>Palette<span class=\"sy1\">{</span><br/>\tcolor<span class=\"sy3\">.</span>Transparent<span class=\"sy1\">,</span><br/>\tcolor<span class=\"sy3\">.</span>White<span class=\"sy1\">,</span><br/>\tcolor<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span>R<span class=\"sy1\">:</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">,</span> A<span class=\"sy1\">:</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">},</span><br/>\tcolor<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span>G<span class=\"sy1\">:</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">,</span> A<span class=\"sy1\">:</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">},</span><br/>\tcolor<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span>B<span class=\"sy1\">:</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">,</span> A<span class=\"sy1\">:</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\t\twidth          <span class=\"sy2\">=</span> <span class=\"nu0\">160</span><br/>\t\tframes         <span class=\"sy2\">=</span> <span class=\"nu0\">100</span><br/>\t\tpointsPerFrame <span class=\"sy2\">=</span> <span class=\"nu0\">50</span><br/>\t\tdelay          <span class=\"sy2\">=</span> <span class=\"nu0\">100</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Millisecond<br/>\t\tfilename       <span class=\"sy2\">=</span> <span class=\"st0\">\"chaos_anim.gif\"</span><br/>\t<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> tan60 <span class=\"sy2\">=</span> math<span class=\"sy3\">.</span>Sin<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pi <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/>\theight <span class=\"sy2\">:=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Round<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>width<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> tan60<span class=\"sy1\">))</span><br/>\tb <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> width<span class=\"sy1\">,</span> height<span class=\"sy1\">)</span><br/>\tvertices <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span>image<span class=\"sy3\">.</span>Point<span class=\"sy1\">{</span><br/>\t\t<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> height<span class=\"sy1\">},</span> <span class=\"sy1\">{</span>width<span class=\"sy1\">,</span> height<span class=\"sy1\">},</span> <span class=\"sy1\">{</span>width <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Make a filled triangle.</span><br/>\tm <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewPaletted<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> bwPalette<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> b<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>Y<span class=\"sy1\">;</span> y &lt; b<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>Y<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tbg <span class=\"sy2\">:=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Round<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>Y<span class=\"sy3\">-</span>y<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span> <span class=\"sy3\">/</span> tan60<span class=\"sy1\">))</span><br/>\t\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> b<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>X <span class=\"sy3\">+</span> bg<span class=\"sy1\">;</span> x &lt; b<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>X<span class=\"sy3\">-</span>bg<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tm<span class=\"sy3\">.</span>SetColorIndex<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Pick starting point</span><br/>\t<span class=\"kw1\">var</span> p image<span class=\"sy3\">.</span>Point<br/>\trand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>\tp<span class=\"sy3\">.</span>Y <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>height<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> b<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>Y<br/>\tp<span class=\"sy3\">.</span>X <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>width<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> b<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>X <span class=\"co1\">// TODO: make within triangle</span><br/>\u00a0<br/>\tanim <span class=\"sy2\">:=</span> newAnim<span class=\"sy1\">(</span>frames<span class=\"sy1\">,</span> delay<span class=\"sy1\">)</span><br/>\taddFrame<span class=\"sy1\">(</span>anim<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; frames<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; pointsPerFrame<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"co1\">// Pick a random vertex</span><br/>\t\t\tvi <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>vertices<span class=\"sy1\">))</span><br/>\t\t\tv <span class=\"sy2\">:=</span> vertices<span class=\"sy1\">[</span>vi<span class=\"sy1\">]</span><br/>\t\t\t<span class=\"co1\">// Move p halfway there</span><br/>\t\t\tp<span class=\"sy3\">.</span>X <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>X <span class=\"sy3\">+</span> v<span class=\"sy3\">.</span>X<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\t\t\tp<span class=\"sy3\">.</span>Y <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>Y <span class=\"sy3\">+</span> v<span class=\"sy3\">.</span>Y<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\t\t\tm<span class=\"sy3\">.</span>SetColorIndex<span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> p<span class=\"sy3\">.</span>Y<span class=\"sy1\">,</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span>vi<span class=\"sy1\">))</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\taddFrame<span class=\"sy1\">(</span>anim<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> writeAnim<span class=\"sy1\">(</span>anim<span class=\"sy1\">,</span> filename<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"wrote to\u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> filename<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Stuff for making a simple GIF animation.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newAnim<span class=\"sy1\">(</span>frames <span class=\"kw4\">int</span><span class=\"sy1\">,</span> delay time<span class=\"sy3\">.</span>Duration<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>gif<span class=\"sy3\">.</span>GIF <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> gifDelayScale <span class=\"sy2\">=</span> <span class=\"nu0\">10</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Millisecond<br/>\tg <span class=\"sy2\">:=</span> &amp;gif<span class=\"sy3\">.</span>GIF<span class=\"sy1\">{</span><br/>\t\tImage<span class=\"sy1\">:</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=image.Paletted\"><span class=\"kw5\">image.<span class=\"me1\">Paletted</span></span></a><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> frames<span class=\"sy1\">),</span><br/>\t\tDelay<span class=\"sy1\">:</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> frames<span class=\"sy1\">),</span><br/>\t<span class=\"sy1\">}</span><br/>\tg<span class=\"sy3\">.</span>Delay<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>delay <span class=\"sy3\">/</span> gifDelayScale<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> g<br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> addFrame<span class=\"sy1\">(</span>anim <span class=\"sy3\">*</span>gif<span class=\"sy3\">.</span>GIF<span class=\"sy1\">,</span> m <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=image.Paletted\"><span class=\"kw5\">image.<span class=\"me1\">Paletted</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tb <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>Bounds<span class=\"sy1\">()</span><br/>\tdst <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewPaletted<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>Palette<span class=\"sy1\">)</span><br/>\tdraw<span class=\"sy3\">.</span>Draw<span class=\"sy1\">(</span>dst<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> image<span class=\"sy3\">.</span>ZP<span class=\"sy1\">,</span> draw<span class=\"sy3\">.</span>Src<span class=\"sy1\">)</span><br/>\tanim<span class=\"sy3\">.</span>Image <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>anim<span class=\"sy3\">.</span>Image<span class=\"sy1\">,</span> dst<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>anim<span class=\"sy3\">.</span>Delay<span class=\"sy1\">)</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>anim<span class=\"sy3\">.</span>Image<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\tanim<span class=\"sy3\">.</span>Delay <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>anim<span class=\"sy3\">.</span>Delay<span class=\"sy1\">,</span> anim<span class=\"sy3\">.</span>Delay<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> writeAnim<span class=\"sy1\">(</span>anim <span class=\"sy3\">*</span>gif<span class=\"sy3\">.</span>GIF<span class=\"sy1\">,</span> filename <span class=\"kw4\">string</span><span class=\"sy1\">)</span> error <span class=\"sy1\">{</span><br/>\tf<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span>filename<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> err<br/>\t<span class=\"sy1\">}</span><br/>\terr <span class=\"sy2\">=</span> gif<span class=\"sy3\">.</span>EncodeAll<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> anim<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> cerr <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\terr <span class=\"sy2\">=</span> cerr<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> err<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Gnuplot", "loc": 29, "block": "<pre class=\"gnuplot highlighted_source\">\u00a0<br/><span class=\"co1\">## Chaos Game  (Sierpinski triangle) 2/16/17 aev</span><br/><span class=\"kw1\">reset</span><br/><span class=\"re0\">fn=</span><span class=\"st0\">\"ChGS3Gnu1\"</span>; <span class=\"re0\">clr=</span><span class=\"st0\">'\"red\"'</span>;<br/><span class=\"re0\">ttl=</span><span class=\"st0\">\"Chaos Game  (Sierpinski triangle)\"</span><br/><span class=\"re0\">sz=</span><span class=\"nu0\">600</span>; <span class=\"re0\">sz1=</span>sz<span class=\"sy0\">/</span><span class=\"nu0\">2</span>; <span class=\"re0\">sz2=</span>sz1<span class=\"sy0\">*</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"kw5\">x</span><span class=\"sy0\">=</span><span class=\"kw5\">y</span><span class=\"sy0\">=</span><span class=\"re0\">xf=</span><span class=\"re0\">yf=</span><span class=\"re0\">v=</span><span class=\"nu0\">0</span>;<br/><span class=\"re0\">dfn=</span>fn<span class=\"sy0\">.</span><span class=\"st0\">\".dat\"</span>; <span class=\"re0\">ofn=</span>fn<span class=\"sy0\">.</span><span class=\"st0\">\".png\"</span>;<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+terminal%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">terminal</span></a> <span class=\"kw5\">png</span> <span class=\"kw5\">font</span> arial <span class=\"nu0\">12</span> <a href=\"http://www.google.com/search?q=%22set+size%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">size</span></a> <span class=\"nu0\">640</span><span class=\"sy0\">,</span><span class=\"nu0\">640</span><br/><span class=\"kw1\">set</span> <span class=\"kw1\">print</span> dfn append<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+output%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">output</span></a> ofn<br/><span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+border%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">border</span></a>; <span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+xtics%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">xtics</span></a>; <span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+ytics%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">ytics</span></a>; <span class=\"kw1\">unset</span> <a href=\"http://www.google.com/search?q=%22set+key%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">key</span></a>;<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+size%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">size</span></a> square <br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+title%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">title</span></a> ttl <span class=\"kw5\">font</span> <span class=\"st0\">\"Arial:Bold,12\"</span><br/><span class=\"re0\">lim=</span><span class=\"nu0\">30000</span>; <span class=\"re0\">max=</span><span class=\"nu0\">100</span>; <span class=\"kw5\">x</span><span class=\"sy0\">=</span><span class=\"kw5\">y</span><span class=\"sy0\">=</span><span class=\"re0\">xw=</span><span class=\"re0\">yw=</span><span class=\"re0\">p=</span><span class=\"nu0\">0</span>;<br/>randgp<span class=\"br0\">(</span><span class=\"kw5\">top</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw5\">top</span><span class=\"br0\">)</span><br/><span class=\"kw5\">x</span><span class=\"sy0\">=</span>randgp<span class=\"br0\">(</span>sz<span class=\"br0\">)</span>; <span class=\"kw5\">y</span><span class=\"sy0\">=</span>randgp<span class=\"br0\">(</span>sz2<span class=\"br0\">)</span>;<br/>do for <span class=\"br0\">[</span><span class=\"re0\">i=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>lim<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">v=</span>randgp<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">v=</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw5\">x</span><span class=\"sy0\">=</span><span class=\"kw5\">x</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>; <span class=\"kw5\">y</span><span class=\"sy0\">=</span><span class=\"kw5\">y</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">v=</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw5\">x</span><span class=\"sy0\">=</span>sz1<span class=\"sy0\">+</span><span class=\"br0\">(</span>sz1<span class=\"sy0\">-</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>; <span class=\"kw5\">y</span><span class=\"sy0\">=</span>sz2<span class=\"sy0\">-</span><span class=\"br0\">(</span>sz2<span class=\"sy0\">-</span><span class=\"kw5\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">v=</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw5\">x</span><span class=\"sy0\">=</span>sz<span class=\"sy0\">-</span><span class=\"br0\">(</span>sz<span class=\"sy0\">-</span><span class=\"kw5\">x</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>; <span class=\"kw5\">y</span><span class=\"sy0\">=</span><span class=\"kw5\">y</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>  <span class=\"re0\">xf=</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span><span class=\"kw5\">x</span><span class=\"br0\">)</span>; <span class=\"re0\">yf=</span><span class=\"kw4\">floor</span><span class=\"br0\">(</span><span class=\"kw5\">y</span><span class=\"br0\">)</span>; <br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>xf<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy0\">||</span>xf<span class=\"sy0\">&gt;</span>sz<span class=\"sy0\">||</span>yf<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span><span class=\"sy0\">||</span>yf<span class=\"sy0\">&gt;</span>sz<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">print</span> xf<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>yf<span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">plot</span> dfn <span class=\"kw5\">using</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">2</span> <span class=\"kw5\">with</span> <span class=\"kw5\">points</span>  pt <span class=\"nu0\">7</span> ps <span class=\"nu0\">0.5</span> lc @clr<br/><span class=\"kw1\">set</span> <a href=\"http://www.google.com/search?q=%22set+output%22+site%3Ahttp%3A%2F%2Fwww.gnuplot.info%2Fdocs%2F&amp;btnI=lucky\"><span class=\"kw2\">output</span></a><br/><span class=\"kw1\">unset</span> <span class=\"kw1\">print</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>replicateM<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>fromList<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Point <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> Transformations <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>Point <span class=\"sy0\">-&gt;</span> Point<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">-- weighted transformations</span><br/>\u00a0<br/><span class=\"co1\">-- realization of the game for given transformations</span><br/>gameOfChaos <span class=\"sy0\">::</span> MonadRandom m <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> Transformations <span class=\"sy0\">-&gt;</span> Point <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">[</span>Point<span class=\"br0\">]</span><br/>gameOfChaos n transformations x <span class=\"sy0\">=</span> iterateA <span class=\"br0\">(</span>fromList transformations<span class=\"br0\">)</span> x<br/>  <span class=\"kw1\">where</span> iterateA f x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanr\"><span class=\"kw3\">scanr</span></a> <span class=\"br0\">(</span><span class=\"sy0\">$</span><span class=\"br0\">)</span> x <span class=\"sy0\">&lt;$&gt;</span> replicateM n f</pre>"}, {"lang": "J", "loc": 35, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>Note<span class=\"co2\"> 'plan, Working in complex plane'<br/>  Make an equilateral triangle.<br/>  Make a list of N targets<br/>  Starting with a random point near the triangle,<br/>    iteratively generate new points.<br/>  plot the new points.<br/>\u00a0<br/>  j has a particularly rich notation for numbers.<br/>\u00a0<br/>    1ad_90 specifies a complex number with radius 1<br/>    at an angle of negative 90 degrees.<br/>\u00a0<br/>    2p1 is 2 times (pi raised to the first power).<br/>)</span><br/>\u00a0<br/>N=: <span class=\"nu0\">3000</span><br/>\u00a0<br/>require<span class=\"st_h\">'plot'</span><br/>TAU=: <span class=\"nu0\">2p1</span> <span class=\"co1\">NB. tauday.com</span><br/>mean=: +/\u00a0% #<br/>\u00a0<br/><span class=\"co1\">NB. equilateral triangle with vertices on unit circle</span><br/><span class=\"co1\">NB. rotated for fun.</span><br/>TRIANGLE=: *<span class=\"sy0\">(</span>j./<span class=\"nu0\">2</span> <span class=\"nu0\">1</span> o.<span class=\"sy0\">(</span>TAU%<span class=\"nu0\">6</span><span class=\"sy0\">)</span>*?<span class=\"nu0\">0</span><span class=\"sy0\">)</span>*1ad_90 1ad150 1ad30<br/>\u00a0<br/>TARGETS=: <span class=\"sy0\">(</span>N\u00a0<a class=\"__cf_email__\" data-cfemail=\"f7c8b7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:# <span class=\"nu0\">3</span><span class=\"sy0\">)</span> { TRIANGLE<br/>\u00a0<br/><span class=\"co1\">NB. start on unit circle</span><br/>START=: j./<span class=\"nu0\">2</span> <span class=\"nu0\">1</span> o.TAU*?<span class=\"nu0\">0</span><br/>\u00a0<br/>NEW_POINTS=: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"543931353a14\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span>, {.<span class=\"sy0\">)</span> , ]<span class=\"sy0\">)</span>/ TARGETS , START<br/>\u00a0<br/><span class=\"st_h\">'marker'</span>plot NEW_POINTS<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 89, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.Timer</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ChaosGame <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">class</span> ColoredPoint <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> colorIndex<span class=\"sy0\">;</span><br/>\u00a0<br/>        ColoredPoint<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> idx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">super</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            colorIndex <span class=\"sy0\">=</span> idx<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Stack<span class=\"sy0\">&lt;</span>ColoredPoint<span class=\"sy0\">&gt;</span> stack <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> points <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> colors <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">red</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">green</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">blue</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ChaosGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a> dim <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setPreferredSize<span class=\"br0\">(</span>dim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> margin <span class=\"sy0\">=</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> dim.<span class=\"me1\">width</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<span class=\"sy0\">;</span><br/>\u00a0<br/>        points<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>dim.<span class=\"me1\">width</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, margin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        points<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>margin, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        points<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span>margin <span class=\"sy0\">+</span> size, size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> ColoredPoint<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Atimer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Timer</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aactionevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ActionEvent</span></a> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stack.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">50</span>_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    addPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> addPoint<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> colorIndex <span class=\"sy0\">=</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p1 <span class=\"sy0\">=</span> stack.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p2 <span class=\"sy0\">=</span> points<span class=\"br0\">[</span>colorIndex<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            stack.<span class=\"me1\">add</span><span class=\"br0\">(</span>halfwayPoint<span class=\"br0\">(</span>p1, p2, colorIndex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aemptystackexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">EmptyStackException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawPoints<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ColoredPoint p <span class=\"sy0\">:</span> stack<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>colors<span class=\"br0\">[</span>p.<span class=\"me1\">colorIndex</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">fillOval</span><span class=\"br0\">(</span>p.<span class=\"me1\">x</span>, p.<span class=\"me1\">y</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ColoredPoint halfwayPoint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> a, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> b, <span class=\"kw4\">int</span> idx<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> ColoredPoint<span class=\"br0\">(</span><span class=\"br0\">(</span>a.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawPoints<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Chaos Game\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> ChaosGame<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 53, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>meta charset<span class=\"sy0\">=</span><span class=\"st0\">\"UTF-8\"</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>title<span class=\"sy0\">&gt;</span>Chaos Game<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>head<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>p<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>canvas id<span class=\"sy0\">=</span><span class=\"st0\">\"sierpinski\"</span> width<span class=\"sy0\">=</span><span class=\"nu0\">400</span> height<span class=\"sy0\">=</span><span class=\"nu0\">346</span><span class=\"sy0\">&gt;&lt;/</span>canvas<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>p<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>p<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>button onclick<span class=\"sy0\">=</span><span class=\"st0\">\"chaosGame()\"</span><span class=\"sy0\">&gt;</span>Click here to see a Sierpi\u0144ski triangle<span class=\"sy0\">&lt;/</span>button<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>p<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;</span>script<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> chaosGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> canv <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'sierpinski'</span><span class=\"br0\">)</span>.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">400</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">346</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">30000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> vertex <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span>vertex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                x <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                y <span class=\"sy0\">=</span> y <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                canv.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">'green'</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                x <span class=\"sy0\">=</span> <span class=\"nu0\">200</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">200</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>                y <span class=\"sy0\">=</span> <span class=\"nu0\">346</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">346</span> <span class=\"sy0\">-</span> y<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>                canv.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">'red'</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                x <span class=\"sy0\">=</span> <span class=\"nu0\">400</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">400</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>                y <span class=\"sy0\">=</span> y <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                canv.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">'blue'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        canv.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>body<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Julia", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Luxor<br/>width  = 1000;<br/>height = 1000;<br/>Drawing(width, height, \"./chaos.png\");<br/>t = Turtle(0, 0, true, 0, (0., 0., 0.)); <br/>\u00a0<br/>x = rand(1:width);<br/>y = rand(1:height);<br/>\u00a0<br/>for l in 1:30_000<br/>    v = rand(1:3);<br/>    if v == 1<br/>        x /= 2;<br/>        y /= 2;<br/>    elseif v == 2<br/>        x = width/2 + (width/2 - x)/2;<br/>        y = height - (height - y)/2;<br/>    else<br/>        x = width - (width - x)/2;<br/>        y = y / 2;<br/>    end<br/>    Reposition(t, x, height-y);<br/>    Circle(t, 3);<br/>end<br/>\u00a0<br/>finish();<br/>preview();<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 80, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">//Version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Stack</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JPanel</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JFrame</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">Timer</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">SwingUtilities</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ChaosGame <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ColoredPoint<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colorIndex<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> stack <span class=\"sy0\">=</span> Stack<span class=\"sy0\">&lt;</span>ColoredPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> points<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Point<span class=\"sy0\">&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colors <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Color.<span class=\"me1\">red</span>, Color.<span class=\"me1\">green</span>, Color.<span class=\"me1\">blue</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dim <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><br/>        preferredSize <span class=\"sy0\">=</span> dim<br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> margin <span class=\"sy0\">=</span> <span class=\"nu0\">60</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> dim.<span class=\"me1\">width</span> - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<br/>        points <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>            Point<span class=\"br0\">(</span>dim.<span class=\"me1\">width</span> / <span class=\"nu0\">2</span>, margin<span class=\"br0\">)</span>,<br/>            Point<span class=\"br0\">(</span>margin, size<span class=\"br0\">)</span>,<br/>            Point<span class=\"br0\">(</span>margin + size, size<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>ColoredPoint<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        Timer<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>stack.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">50</span><span class=\"sy0\">_</span>000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <span class=\"nu0\">1000</span><span class=\"br0\">)</span> addPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun addPoint<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colorIndex <span class=\"sy0\">=</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p1 <span class=\"sy0\">=</span> stack.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p2 <span class=\"sy0\">=</span> points<span class=\"br0\">[</span>colorIndex<span class=\"br0\">]</span><br/>        stack.<span class=\"me1\">add</span><span class=\"br0\">(</span>halfwayPoint<span class=\"br0\">(</span>p1, p2, colorIndex<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun drawPoints<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>cp in stack<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> colors<span class=\"br0\">[</span>cp.<span class=\"me1\">colorIndex</span><span class=\"br0\">]</span><br/>            g.<span class=\"me1\">fillOval</span><span class=\"br0\">(</span>cp.<span class=\"me1\">x</span>, cp.<span class=\"me1\">y</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun halfwayPoint<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Point, b<span class=\"sy0\">:</span> Point, idx<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        ColoredPoint<span class=\"br0\">(</span><span class=\"br0\">(</span>a.<span class=\"me1\">x</span> + b.<span class=\"me1\">x</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span>, <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> + b.<span class=\"me1\">y</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span>, idx<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                            RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        drawPoints<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            defaultCloseOperation <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>            title <span class=\"sy0\">=</span> <span class=\"st0\">\"Chaos Game\"</span><br/>            isResizable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            add<span class=\"br0\">(</span>ChaosGame<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>            pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>            isVisible <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logo", "loc": 29, "block": "<pre class=\"text highlighted_source\">to chaosgame\u00a0:sidelength\u00a0:iterations<br/>    make \"width\u00a0:sidelength<br/>    make \"height (:sidelength/2 * sqrt 3)<br/>    make \"x (random\u00a0:width)<br/>    make \"y (random\u00a0:height)<br/>    repeat\u00a0:iterations [<br/>        make \"vertex (random 3)<br/>        if\u00a0:vertex = 0 [<br/>            make \"x (:x / 2)<br/>            make \"y (:y / 2)<br/>            setpencolor \"green<br/>        ]<br/>        if\u00a0:vertex = 1 [<br/>            make \"x (:width / 2 + ((:width / 2 -\u00a0:x) / 2))<br/>            make \"y (:height - ((:height -\u00a0:y) / 2))<br/>            setpencolor \"red<br/>        ]<br/>        if\u00a0:vertex = 2 [<br/>            make \"x (:width - ((:width -\u00a0:x) / 2))<br/>            make \"y (:y / 2)<br/>            setpencolor \"blue<br/>        ]<br/>        penup<br/>        setxy (:x -\u00a0:width / 2) (:y -\u00a0:height / 2)<br/>        pendown<br/>        forward 1<br/>    ]<br/>    hideturtle<br/>end</pre>"}, {"lang": "Lua", "loc": 42, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span> <span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>colors<span class=\"sy0\">,</span> orig <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>load<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    wid<span class=\"sy0\">,</span> hei <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    orig<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> wid <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/>    orig<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> hei <span class=\"sy0\">-</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/>    orig<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> wid <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> hei <span class=\"sy0\">-</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> w<span class=\"sy0\">,</span> h <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">.5</span> <span class=\"kw1\">then</span> w <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>w <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">.5</span> <span class=\"kw1\">then</span> h <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>h <span class=\"kw1\">end</span><br/>    orig<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> wid <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> w<span class=\"sy0\">,</span> hei <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> h <span class=\"br0\">}</span><br/>\u00a0<br/>    canvas <span class=\"sy0\">=</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>newCanvas<span class=\"br0\">(</span> wid<span class=\"sy0\">,</span> hei <span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><span class=\"sy0\">;</span> love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setColor<span class=\"br0\">(</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> orig <span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> love<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> iter <span class=\"sy0\">=</span> <span class=\"nu0\">100</span> <span class=\"co1\">--&gt; make this number bigger to speed up rendering</span><br/>    <span class=\"kw1\">for</span> rp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> iter <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> r<span class=\"sy0\">,</span> pts <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span> <span class=\"nu0\">6</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span><br/>            pt <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">elseif</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw2\">or</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">5</span> <span class=\"kw1\">then</span><br/>            pt <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">else</span> <br/>            pt <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">local</span> x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span> orig<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> orig<span class=\"br0\">[</span>pt<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> orig<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> orig<span class=\"br0\">[</span>pt<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>        orig<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> orig<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y<br/>        pts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> colors<span class=\"br0\">[</span>pt<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> colors<span class=\"br0\">[</span>pt<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> colors<span class=\"br0\">[</span>pt<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span> <span class=\"br0\">}</span><br/>        love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/>        love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>points<span class=\"br0\">(</span> pts <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>setCanvas<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    love<span class=\"sy0\">.</span>graphics<span class=\"sy0\">.</span>draw<span class=\"br0\">(</span> canvas <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 18, "block": "<pre class=\"text highlighted_source\">chaosGame\u00a0:= proc(numPoints)<br/>\tlocal points, i;<br/>\trandomize();<br/>\tuse geometry in<br/>\tRegularPolygon(triSideways, 3, point(cent, [0, 0]), 1);<br/>\trotation(tri, triSideways, Pi/2, counterclockwise);<br/>\trandpoint(currentP, -1/2*sqrt(3)..1/2*sqrt(3), -1/2..1/2);<br/>\tpoints\u00a0:= [coordinates(currentP)];<br/>\tfor i to numPoints do<br/>\t\tmidpoint(mid, currentP, parse(cat(\"rotate_triSideways_\", rand(1..3)(), \"_tri\")));<br/>\t\tpoints\u00a0:= [op(points), coordinates(mid)];<br/>\t\tpoint(currentP, coordinates(mid));<br/>\tend do:<br/>\tend use;<br/>\tuse plottools in<br/>\t\tplots:-display( seq([plots:-display([seq(point(points[i]), i = 1..j)])], j = 1..numelems(points) ), insequence=true);<br/>\tend use;<br/>end proc:</pre>"}, {"lang": "PARI/GP", "loc": 17, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Chaos Game  (Sierpinski triangle) 2/15/17 aev</span><br/>pChaosGameS3<span class=\"br0\">(</span>size<span class=\"sy0\">,</span>lim<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>sz1<span class=\"sy0\">=</span>size<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>sz2<span class=\"sy0\">=</span>sz1<span class=\"sy0\">*</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>size<span class=\"sy0\">,</span>size<span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>xf<span class=\"sy0\">,</span>yf<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>x<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> y<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>sz2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>lim<span class=\"sy0\">,</span> v<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">/=</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span> y<span class=\"sy0\">/=</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> x<span class=\"sy0\">=</span>sz1<span class=\"sy0\">+</span><span class=\"br0\">(</span>sz1<span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span> y<span class=\"sy0\">=</span>sz2<span class=\"sy0\">-</span><span class=\"br0\">(</span>sz2<span class=\"sy0\">-</span>y<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> x<span class=\"sy0\">=</span>size<span class=\"sy0\">-</span><span class=\"br0\">(</span>size<span class=\"sy0\">-</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span> y<span class=\"sy0\">/=</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  xf<span class=\"sy0\">=</span><span class=\"kw1\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> yf<span class=\"sy0\">=</span><span class=\"kw1\">floor</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>xf<span class=\"sy0\">&lt;</span><span class=\"nu1\">1</span><span class=\"sy0\">||</span>xf<span class=\"sy0\">&gt;</span>size<span class=\"sy0\">||</span>yf<span class=\"sy0\">&lt;</span><span class=\"nu1\">1</span><span class=\"sy0\">||</span>yf<span class=\"sy0\">&gt;</span>size<span class=\"sy0\">,</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  M<span class=\"br0\">[</span>xf<span class=\"sy0\">,</span>yf<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\fend</span><br/>plotmat<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ Test:</span><br/>pChaosGameS3<span class=\"br0\">(</span><span class=\"nu1\">600</span><span class=\"sy0\">,</span><span class=\"nu1\">30000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ SierpTri1.png</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 79, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> ChaosGame<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// FPC 3.0.2</span><br/><span class=\"kw1\">uses</span><br/>  Graph<span class=\"sy1\">,</span> windows<span class=\"sy1\">,</span> math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Return a point on a circle defined by angle and the circles radius</span><br/><span class=\"co1\">// Angle 0 = Radius points to the left</span><br/><span class=\"co1\">// Angle 90 = Radius points upwards</span><br/><span class=\"kw1\">Function</span> PointOfCircle<span class=\"br0\">(</span>Angle<span class=\"sy1\">:</span> <span class=\"kw4\">SmallInt</span><span class=\"sy1\">;</span> Radius<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> TPoint<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> Ia<span class=\"sy1\">:</span> Double<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Ia<span class=\"sy1\">:</span><span class=\"sy3\">=</span>DegToRad<span class=\"br0\">(</span><span class=\"sy3\">-</span>Angle<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>round<span class=\"br0\">(</span><span class=\"kw3\">cos</span><span class=\"br0\">(</span>Ia<span class=\"br0\">)</span><span class=\"sy3\">*</span>Radius<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>round<span class=\"br0\">(</span><span class=\"kw3\">sin</span><span class=\"br0\">(</span>Ia<span class=\"br0\">)</span><span class=\"sy3\">*</span>Radius<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Main }</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  GraphDev<span class=\"sy1\">,</span>GraphMode<span class=\"sy1\">:</span> <span class=\"kw4\">smallint</span><span class=\"sy1\">;</span><br/>  Triangle<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> Tpoint<span class=\"sy1\">;</span> <span class=\"co1\">// Corners of the triangle</span><br/>  TriPnt<span class=\"sy1\">:</span> <span class=\"kw4\">Byte</span><span class=\"sy1\">;</span>                    <span class=\"co1\">// Point in ^^^^</span><br/>  Origin<span class=\"sy1\">:</span> TPoint<span class=\"sy1\">;</span>                  <span class=\"co1\">// Defines center of triangle</span><br/>  Itterations<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span>            <span class=\"co1\">// Number of Itterations</span><br/>  Radius<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  View<span class=\"sy1\">:</span> viewPorttype<span class=\"sy1\">;</span><br/>  CurPnt<span class=\"sy1\">:</span> TPoint<span class=\"sy1\">;</span><br/>  Rect<span class=\"sy1\">:</span> TRect<span class=\"sy1\">;</span><br/>  Counter<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>  <span class=\"kw1\">Repeat</span> <span class=\"coMULTI\">{forever}</span><br/>\u00a0<br/>    <span class=\"co1\">// Get the Itteration count 0=exit</span><br/>    <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'Itterations: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>Itterations<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> Itterations<span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> halt<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Set Up Graphics screen (everythings Auto detect)</span><br/>    GraphDev<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Detect<span class=\"sy1\">;</span><br/>    GraphMode<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    InitGraph<span class=\"br0\">(</span>GraphDev<span class=\"sy1\">,</span>GraphMode<span class=\"sy1\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> GraphResult&lt;&gt;grok <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Graphics doesn'</span><span class=\"st0\">'t work'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Halt<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// set Origin to center of the _Triangle_ (Not the creen)</span><br/>    GetViewSettings<span class=\"br0\">(</span>View<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Rect<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>View<span class=\"sy1\">.</span><span class=\"me1\">x1</span><span class=\"sy1\">,</span>View<span class=\"sy1\">.</span><span class=\"me1\">y1</span><span class=\"sy3\">+</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>View<span class=\"sy1\">.</span><span class=\"me1\">x2</span><span class=\"sy1\">,</span>View<span class=\"sy1\">.</span><span class=\"me1\">y2</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Origin<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Rect<span class=\"sy1\">.</span><span class=\"me1\">CenterPoint</span><span class=\"sy1\">;</span><br/>    Origin<span class=\"sy1\">.</span><span class=\"me1\">Offset</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>Rect<span class=\"sy1\">.</span><span class=\"me1\">Height</span> <span class=\"kw1\">div</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"co1\">//  Center Triangle on screen</span><br/>\u00a0<br/>    <span class=\"co1\">// Define Equilateral triangle,</span><br/>    Radius<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Origin<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"sy1\">;</span>         <span class=\"co1\">// Radius of Circumscribed circle</span><br/>    <span class=\"kw1\">for</span> Counter<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>      Triangle<span class=\"br0\">[</span>Counter<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span>PointOfCircle<span class=\"br0\">(</span><span class=\"br0\">(</span>Counter<span class=\"sy3\">*</span><span class=\"nu0\">120</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">90</span><span class=\"sy1\">,</span>Radius<span class=\"br0\">)</span><span class=\"sy3\">+</span>Origin<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Choose random starting point, in the incsribed circle of the triangle</span><br/>    Radius<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Radius <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span>     <span class=\"co1\">// Radius of inscribed circle</span><br/>    CurPnt<span class=\"sy1\">:</span><span class=\"sy3\">=</span>PointOfCircle<span class=\"br0\">(</span>random<span class=\"br0\">(</span><span class=\"nu0\">360</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>random<span class=\"br0\">(</span>Radius <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>Origin<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Play the Chaos Game</span><br/>    <span class=\"kw1\">for</span> Counter<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Itterations <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      TriPnt<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Random<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                      <span class=\"co1\">// Select Triangle Point</span><br/>      Rect<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>Triangle<span class=\"br0\">[</span>TriPnt<span class=\"br0\">]</span><span class=\"sy1\">,</span>CurPnt<span class=\"br0\">)</span><span class=\"sy1\">;;</span>  <span class=\"co1\">// Def. rect. between TriPnt and CurPnt</span><br/>      CurPnt<span class=\"sy1\">:</span><span class=\"sy3\">=</span>Rect<span class=\"sy1\">.</span><span class=\"me1\">CenterPoint</span><span class=\"sy1\">;</span>               <span class=\"co1\">// New CurPnt is center of rectangle</span><br/>      putPixel<span class=\"br0\">(</span>CurPnt<span class=\"sy1\">.</span><span class=\"me1\">x</span><span class=\"sy1\">,</span>CurPnt<span class=\"sy1\">.</span><span class=\"me1\">y</span><span class=\"sy1\">,</span>cyan<span class=\"br0\">)</span><span class=\"sy1\">;</span>       <span class=\"co1\">// Plot the new CurPnt</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 38, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Imager<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$width</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@points</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span> <span class=\"re0\">$width</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>         <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span>        <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re0\">$height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$img</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><br/>                      xsize    <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$width</span><span class=\"sy0\">,</span><br/>                      ysize    <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$height</span><span class=\"sy0\">,</span><br/>                      channels <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>                     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$color</span> <span class=\"sy0\">=</span> Imager<span class=\"sy0\">::</span><span class=\"me2\">Color</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'#ff0000'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$height</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"re0\">$points</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">@points</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setpixel</span><span class=\"br0\">(</span><br/>        x     <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a>     <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        color <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$color</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$img</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/write.html\"><span class=\"kw3\">write</span></a><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'chaos_game_triangle.png'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 16, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">640</span><span class=\"sy0\">,</span> <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$png</span> <span class=\"sy0\">=</span> Image<span class=\"sy0\">::</span><span class=\"me2\">PNG</span><span class=\"sy0\">::</span><span class=\"me2\">Portable</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>width<span class=\"br0\">(</span><span class=\"re0\">$w</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>height<span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@vertex</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$w</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span>1e5 <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"kw1\">given</span> <span class=\"re0\">@vertex</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@v</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"re0\">@v</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">/</span>\u00bb <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">set</span><span class=\"sy0\">:</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$png</span><span class=\"sy0\">.</span><span class=\"me1\">write</span><span class=\"sy0\">:</span> <span class=\"st_h\">'Chaos-game-perl6.png'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 94, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Chaos_game.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>enum TRI,SQ1,SQ2,SQ3,PENT<br/>\u00a0<br/>sequence descs = {\"Sierpinsky Triangle\",<br/>                  \"Square 1\",<br/>                  \"Square 2\",<br/>                  \"Square 3\",<br/>                  \"Pentagon\"}<br/>\u00a0<br/>integer mode = TRI<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>    atom {w,h} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    atom {x,y} = {w*0.05,h*0.05}<br/>    {w,h} = {w*0.9,h*0.9}<br/>    sequence points = iff(mode&lt;SQ1?{{x,y},{x+w/2,y+h},{x+w,y}}:<br/>                      iff(mode&lt;PENT?{{x,y},{x,y+h},{x+w,y+h},{x+w,y}}<br/>                                  \u00a0:{{x+w/6,y},{x,y+h*2/3},{x+w/2,y+h},{x+w,y+h*2/3},{x+w*5/6,y}}))<br/>    cdCanvasActivate(cddbuffer)<br/>    integer last = 0<br/>    for i=1 to 1000 do<br/>        integer r = rand(length(points))<br/>        if mode=TRI or r!=last then<br/>            atom {nx,ny} = points[r]<br/>            {x,y} = {(x+nx)/2,(y+ny)/2}<br/>            cdCanvasPixel(cddbuffer, x, y, CD_GREY)<br/>            if mode=SQ2<br/>            or mode=SQ3 then<br/>                r = mod(r,length(points))+1<br/>                if mode=SQ3 then<br/>                    r = mod(r,length(points))+1<br/>                end if<br/>            end if<br/>            last = r<br/>        end if<br/>    end for<br/>    cdCanvasFlush(cddbuffer)<br/>    IupSetStrAttribute(dlg, \"TITLE\", \"Chaos Game (%s)\", {descs[mode]})<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function timer_cb(Ihandle /*ih*/)<br/>    IupUpdate(canvas)<br/>    return IUP_IGNORE<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    cdCanvasSetBackground(cddbuffer, CD_WHITE)<br/>    cdCanvasSetForeground(cddbuffer, CD_GRAY)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    if c=' ' then<br/>        mode += 1<br/>        if mode&gt;PENT then<br/>            mode = TRI<br/>        end if<br/>        cdCanvasClear(cddbuffer)<br/>        IupRedraw(canvas)<br/>    end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"640x640\")<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", \"Chaos Game\")<br/>    IupSetCallback(dlg, \"K_ANY\", Icallback(\"esc_close\"))<br/>\u00a0<br/>    IupShow(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL)<br/>    Ihandle timer = IupTimer(Icallback(\"timer_cb\"), 40)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "Processing", "loc": 29, "block": "<pre class=\"java highlighted_source\">size<span class=\"br0\">(</span><span class=\"nu0\">300</span>, <span class=\"nu0\">260</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>background<span class=\"br0\">(</span>#ffffff<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// white</span><br/>\u00a0<br/><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> floor<span class=\"br0\">(</span>random<span class=\"br0\">(</span>width<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> floor<span class=\"br0\">(</span>random<span class=\"br0\">(</span>height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> colour <span class=\"sy0\">=</span> #ffffff<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">30000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> v <span class=\"sy0\">=</span> floor<span class=\"br0\">(</span>random<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    y <span class=\"sy0\">=</span> y <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    colour <span class=\"sy0\">=</span> #00ff00<span class=\"sy0\">;</span> <span class=\"co1\">// green</span><br/>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>    x <span class=\"sy0\">=</span> width<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>width<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    y <span class=\"sy0\">=</span> height <span class=\"sy0\">-</span> <span class=\"br0\">(</span>height <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    colour <span class=\"sy0\">=</span> #ff0000<span class=\"sy0\">;</span> <span class=\"co1\">// red</span><br/>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>    x <span class=\"sy0\">=</span> width <span class=\"sy0\">-</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    y <span class=\"sy0\">=</span> y <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    colour <span class=\"sy0\">=</span> #0000ff<span class=\"sy0\">;</span> <span class=\"co1\">// blue</span><br/>  <span class=\"br0\">}</span><br/>  set<span class=\"br0\">(</span>x, height<span class=\"sy0\">-</span>y, colour<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 118, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> argparse<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"kw1\">import</span> shapely.<span class=\"me1\">geometry</span> <span class=\"kw1\">as</span> geometry<br/><span class=\"kw1\">import</span> numpy <span class=\"kw1\">as</span> np<br/><span class=\"kw1\">import</span> matplotlib.<span class=\"me1\">pyplot</span> <span class=\"kw1\">as</span> plt<br/><span class=\"kw1\">import</span> matplotlib.<span class=\"me1\">animation</span> <span class=\"kw1\">as</span> animation<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span>args<span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># Styles</span><br/>    plt.<span class=\"me1\">style</span>.<span class=\"me1\">use</span><span class=\"br0\">(</span><span class=\"st0\">\"ggplot\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Creating figure</span><br/>    fig <span class=\"sy0\">=</span> plt.<span class=\"me1\">figure</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    line<span class=\"sy0\">,</span> <span class=\"sy0\">=</span> plt.<span class=\"me1\">plot</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Limit axes</span><br/>    plt.<span class=\"me1\">xlim</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    plt.<span class=\"me1\">ylim</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Titles</span><br/>    title <span class=\"sy0\">=</span> <span class=\"st0\">\"Chaos Game\"</span><br/>    plt.<span class=\"me1\">title</span><span class=\"br0\">(</span>title<span class=\"br0\">)</span><br/>    fig.<span class=\"me1\">canvas</span>.<span class=\"me1\">set_window_title</span><span class=\"br0\">(</span>title<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Getting data</span><br/>    data <span class=\"sy0\">=</span> get_data<span class=\"br0\">(</span>args.<span class=\"me1\">frames</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Creating animation</span><br/>    line_ani <span class=\"sy0\">=</span> animation.<span class=\"me1\">FuncAnimation</span><span class=\"br0\">(</span><br/>        fig<span class=\"sy0\">=</span>fig<span class=\"sy0\">,</span><br/>        func<span class=\"sy0\">=</span>update_line<span class=\"sy0\">,</span><br/>        frames<span class=\"sy0\">=</span>args.<span class=\"me1\">frames</span><span class=\"sy0\">,</span><br/>        fargs<span class=\"sy0\">=</span><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        interval<span class=\"sy0\">=</span>args.<span class=\"me1\">interval</span><span class=\"sy0\">,</span><br/>        repeat<span class=\"sy0\">=</span><span class=\"kw2\">False</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># To save the animation install ffmpeg and uncomment</span><br/>    <span class=\"co1\"># line_ani.save(\"chaos_game.gif\")</span><br/>\u00a0<br/>    plt.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> get_data<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Get data to plot<br/>    \"\"\"</span><br/>    leg <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    triangle <span class=\"sy0\">=</span> get_triangle<span class=\"br0\">(</span>leg<span class=\"br0\">)</span><br/>    cur_point <span class=\"sy0\">=</span> gen_point_within_poly<span class=\"br0\">(</span>triangle<span class=\"br0\">)</span><br/>    data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        data.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>cur_point.<span class=\"me1\">x</span><span class=\"sy0\">,</span> cur_point.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        cur_point <span class=\"sy0\">=</span> next_point<span class=\"br0\">(</span>triangle<span class=\"sy0\">,</span> cur_point<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> data<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> get_triangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Create right triangle<br/>    \"\"\"</span><br/>    ax <span class=\"sy0\">=</span> ay <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    a <span class=\"sy0\">=</span> ax<span class=\"sy0\">,</span> ay<br/>\u00a0<br/>    bx <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span>  *  n<br/>    by <span class=\"sy0\">=</span> <span class=\"nu0\">0.75</span> * <span class=\"br0\">(</span>n ** <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    b <span class=\"sy0\">=</span> bx<span class=\"sy0\">,</span> by<br/>\u00a0<br/>    cx <span class=\"sy0\">=</span> n<br/>    cy <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    c <span class=\"sy0\">=</span> cx<span class=\"sy0\">,</span> cy<br/>\u00a0<br/>    triangle <span class=\"sy0\">=</span> geometry.<span class=\"me1\">Polygon</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> triangle<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> gen_point_within_poly<span class=\"br0\">(</span>poly<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Generate random point inside given polygon<br/>    \"\"\"</span><br/>    minx<span class=\"sy0\">,</span> miny<span class=\"sy0\">,</span> maxx<span class=\"sy0\">,</span> maxy <span class=\"sy0\">=</span> poly.<span class=\"me1\">bounds</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        x <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">uniform</span><span class=\"br0\">(</span>minx<span class=\"sy0\">,</span> maxx<span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">uniform</span><span class=\"br0\">(</span>miny<span class=\"sy0\">,</span> maxy<span class=\"br0\">)</span><br/>        point <span class=\"sy0\">=</span> geometry.<span class=\"me1\">Point</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> point.<span class=\"me1\">within</span><span class=\"br0\">(</span>poly<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> point<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> next_point<span class=\"br0\">(</span>poly<span class=\"sy0\">,</span> point<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Generate next point according to chaos game rules<br/>    \"\"\"</span><br/>    vertices <span class=\"sy0\">=</span> poly.<span class=\"me1\">boundary</span>.<span class=\"me1\">coords</span><span class=\"br0\">[</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"co1\"># Last point is the same as the first one</span><br/>    random_vertex <span class=\"sy0\">=</span> geometry.<span class=\"me1\">Point</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">choice</span><span class=\"br0\">(</span>vertices<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    line <span class=\"sy0\">=</span> geometry.<span class=\"me1\">linestring</span>.<span class=\"me1\">LineString</span><span class=\"br0\">(</span><span class=\"br0\">[</span>point<span class=\"sy0\">,</span> random_vertex<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> line.<span class=\"me1\">centroid</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> update_line<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> data<span class=\"sy0\">,</span> line<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Update line with new points<br/>    \"\"\"</span><br/>    new_data <span class=\"sy0\">=</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*data<span class=\"br0\">[</span>:num<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    line.<span class=\"me1\">set_data</span><span class=\"br0\">(</span>new_data<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> line<span class=\"sy0\">,</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    arg_parser <span class=\"sy0\">=</span> argparse.<span class=\"me1\">ArgumentParser</span><span class=\"br0\">(</span>description<span class=\"sy0\">=</span><span class=\"st0\">\"Chaos Game by Suenweek (c) 2017\"</span><span class=\"br0\">)</span><br/>    arg_parser.<span class=\"me1\">add_argument</span><span class=\"br0\">(</span><span class=\"st0\">\"-f\"</span><span class=\"sy0\">,</span> dest<span class=\"sy0\">=</span><span class=\"st0\">\"frames\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">type</span><span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"sy0\">,</span> default<span class=\"sy0\">=</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    arg_parser.<span class=\"me1\">add_argument</span><span class=\"br0\">(</span><span class=\"st0\">\"-i\"</span><span class=\"sy0\">,</span> dest<span class=\"sy0\">=</span><span class=\"st0\">\"interval\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">type</span><span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"sy0\">,</span> default<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>    main<span class=\"br0\">(</span>arg_parser.<span class=\"me1\">parse_args</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "R", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Chaos Game  (Sierpinski triangle) 2/15/17 aev<br/># pChaosGameS3(size, lim, clr, fn, ttl)<br/># Where: size - defines matrix and picture size; lim - limit of the dots; <br/>#   fn - file name (.ext will be added); ttl - plot title;<br/>pChaosGameS3 &lt;- function(size, lim, clr, fn, ttl)<br/>{<br/>  cat(\" *** START:\", date(), \"size=\",size, \"lim=\",lim, \"clr=\",clr, \"\\n\");<br/>  sz1=floor(size/2); sz2=floor(sz1*sqrt(3)); xf=yf=v=0;<br/>  M &lt;- matrix(c(0), ncol=size, nrow=size, byrow=TRUE);<br/>  x &lt;- sample(1:size, 1, replace=FALSE);<br/>  y &lt;- sample(1:sz2, 1, replace=FALSE);<br/>  pf=paste0(fn, \".png\");<br/>  for (i in 1:lim) { v &lt;- sample(0:3, 1, replace=FALSE);<br/>    if(v==0) {x=x/2; y=y/2;}<br/>    if(v==1) {x=sz1+(sz1-x)/2; y=sz2-(sz2-y)/2;}<br/>    if(v==2) {x=size-(size-x)/2; y=y/2;}<br/>    xf=floor(x); yf=floor(y); if(xf&lt;1||xf&gt;size||yf&lt;1||yf&gt;size) {next};<br/>    M[xf,yf]=1;<br/>  }<br/>  plotmat(M, fn, clr, ttl, 0, size);<br/>  cat(\" *** END:\",date(),\"\\n\");<br/>}  <br/>pChaosGameS3(600, 30000, \"red\", \"SierpTriR1\", \"Sierpinski triangle\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm draws a Sierpinski triangle by running the  chaos game  with a million points*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> scrsize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">with</span> sd sw <span class=\"sy0\">.</span>               <span class=\"coMULTI\">/*obtain the depth and width of screen.*/</span><br/>sw=sw-<span class=\"nu0\">2</span>                                          <span class=\"coMULTI\">/*adjust the screen width down by two. */</span><br/>sd=sd-<span class=\"nu0\">4</span>                                          <span class=\"coMULTI\">/*   \"    \"     \"   depth   \"   \" four.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> pts chr seed <span class=\"sy0\">.</span>                         <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> pts==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> pts==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> pts=<span class=\"nu0\">1000000</span>          <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> chr==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> chr==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> chr=<span class=\"st0\">'\u2219'</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed   <span class=\"coMULTI\">/*Is  specified?    \"   \"  RANDOM seed.*/</span><br/>x=sw;   hx=x%2;  y=sd                            <span class=\"coMULTI\">/*define the initial starting position.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"st0\">' '</span>                                           <span class=\"coMULTI\">/*   \"   all screen points as a blank. */</span><br/>        <span class=\"kw1\">do</span> pts; \u00a0?=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/* [\u2193]  draw a # of (million?)  points.*/</span><br/>                     <span class=\"kw1\">select</span>                      <span class=\"coMULTI\">/*?:  will be a random number: 1 \u2500\u2500\u25ba 3.*/</span><br/>                     <span class=\"kw3\">when</span>\u00a0?==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>          x%2          y%2   <span class=\"kw2\">with</span>  x y<br/>                     <span class=\"kw3\">when</span>\u00a0?==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  hx+<span class=\"br0\">(</span>hx-x<span class=\"br0\">)</span>%2  sd-<span class=\"br0\">(</span>sd-y<span class=\"br0\">)</span>%2   <span class=\"kw2\">with</span>  x y<br/>                     <span class=\"kw3\">otherwise</span>       <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  sw-<span class=\"br0\">(</span>sw-x<span class=\"br0\">)</span>%2          y%2   <span class=\"kw2\">with</span>  x y<br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>        @<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y=chr                                <span class=\"coMULTI\">/*set the    X, Y    point to a bullet.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*pts*/</span>                            <span class=\"coMULTI\">/* [\u2191]  one million points \u2261 overkill? */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display the points to the term.*/</span><br/>        <span class=\"kw1\">do</span>      row=sd   <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;   _=       <span class=\"coMULTI\">/*display the points, one row at a time*/</span><br/>             <span class=\"kw1\">do</span> col=<span class=\"nu0\">0</span>   <span class=\"kw2\">for</span> sw+<span class=\"nu0\">2</span>                 <span class=\"coMULTI\">/*   \"     a  row (one line) of image. */</span><br/>             _=_ <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row                    <span class=\"coMULTI\">/*construct a  \"    \"    \"    \"   \"    */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>                       <span class=\"coMULTI\">/*Note: display image from top\u2500\u2500\u25babottom*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  strip trailing blanks (output).*/</span><br/>        <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>_, <span class=\"st0\">'T'</span><span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*display one row (line) of the image. */</span><br/>        <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*row*/</span>                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 61, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Chaos game<br/>\u00a0<br/>load \"guilib.ring\"<br/>\u00a0<br/>paint = null<br/>\u00a0<br/>new qapp <br/>       {<br/>       win1 = new qwidget() {<br/>                  setwindowtitle(\"Archimedean spiral\")<br/>                  setgeometry(100,100,500,600)<br/>                  label1 = new qlabel(win1) {<br/>                               setgeometry(10,10,400,400)<br/>                               settext(\"\")<br/>                  }<br/>                 new qpushbutton(win1) {<br/>                        setgeometry(150,500,100,30)<br/>                        settext(\"draw\")<br/>                        setclickevent(\"draw()\")<br/>                    }<br/>               show()<br/>       }<br/>       exec()<br/>       }<br/>\u00a0<br/>func draw<br/>       p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>       }<br/>       pen = new qpen() {<br/>                setcolor(color)<br/>                setwidth(1)<br/>       }<br/>       paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>\u00a0<br/>       x = floor(random(10)/10 * 200)<br/>       y = floor(random(10/10) * 173)<br/>       for i = 1 to 20000<br/>           v = floor(random(10)/10 * 3) + 1<br/>\t   if v = 1 <br/>\t      x = x/2<br/>\t      y = y/2<br/>\t   ok<br/>\t   if v = 2 <br/>\t      x = 100 + (100-x)/2<br/>\t      y = 173 - (173-y)/2<br/>\t   ok<br/>\t   if v = 3 <br/>\t      x = 200 - (200-x)/2<br/>\t      y = y/2<br/>\t   ok<br/>\t   drawpoint(x,y)<br/>       next<br/>       endpaint()<br/>       }<br/>       label1 {setpicture(p1) show()}<br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">x\t= int(rnd(0) * 200)<br/>y\t= int(rnd(0) * 173)<br/>graphic #g, 200,200<br/>#g color(\"green\")<br/>for i =1 TO 20000<br/>\tv = int(rnd(0) * 3) + 1<br/>\tif v = 1 then<br/>\t\tx = x/2<br/>\t\ty = y/2<br/>\tend if<br/>\tif v = 2 then<br/>\t\tx = 100 + (100-x)/2<br/>\t\ty = 173 - (173-y)/2<br/>\tend if<br/>\tif v = 3 then<br/>\t\tx = 200 - (200-x)/2<br/>\t\ty = y/2<br/>\tend if<br/>\t#g set(x,y)<br/>next<br/>render #g</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">extern crate image;<br/>extern crate rand;<br/>\u00a0<br/>use std::fs::File;<br/>use rand::Rng;<br/>use std::f32;<br/>\u00a0<br/>fn main() {<br/>    let max_iterations = 50_000u32;<br/>    let img_side = 800u32;<br/>    let tri_size = 400f32;<br/>\u00a0<br/>    // Create a new ImgBuf<br/>    let mut imgbuf = image::ImageBuffer::new(img_side, img_side);<br/>\u00a0<br/>    // Create triangle vertices<br/>    let mut vertices: [[f32; 2]; 3] = [[0f32, 0f32]; 3];<br/>    for i in 0..vertices.len() {<br/>        vertices[i][0] =<br/>            (img_side as f32 / 2.) + (tri_size / 2.) * (f32::consts::PI * i as f32 * 2. / 3.).cos();<br/>        vertices[i][1] =<br/>            (img_side as f32 / 2.) + (tri_size / 2.) * (f32::consts::PI * i as f32 * 2. / 3.).sin();<br/>    }<br/>    for v in &amp;vertices {<br/>        imgbuf.put_pixel(v[0] as u32, v[1] as u32, image::Luma([255u8]));<br/>    }<br/>\u00a0<br/>    // Iterate chaos game<br/>    let mut rng = rand::weak_rng();<br/>    let mut x = img_side as f32 / 2.;<br/>    let mut y = img_side as f32 / 2.;<br/>    for _ in 0..max_iterations {<br/>        let choice = rng.gen_range(0, vertices.len());<br/>        x = (x + vertices[choice][0]) / 2.;<br/>        y = (y + vertices[choice][1]) / 2.;<br/>\u00a0<br/>        imgbuf.put_pixel(x as u32, y as u32, image::Luma([255u8]));<br/>    }<br/>\u00a0<br/>    // Save image<br/>    let fout = &amp;mut File::create(\"fractal.png\").unwrap();<br/>    image::ImageLuma8(imgbuf).save(fout, image::PNG).unwrap();<br/>}</pre>"}, {"lang": "Scala", "loc": 69, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">ActionEvent</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ChaosGame <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Chaos Game\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ChaosGame <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dim, margin<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span>, <span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sizez<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> dim.<span class=\"me1\">width</span> - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> margin<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>stack, r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> mutable.<span class=\"me1\">Stack</span><span class=\"br0\">[</span>ColoredPoint<span class=\"br0\">]</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Random<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> points <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Point<span class=\"br0\">(</span>dim.<span class=\"me1\">width</span> / <span class=\"nu0\">2</span>, margin<span class=\"br0\">)</span>,<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Point<span class=\"br0\">(</span>margin, sizez<span class=\"br0\">)</span>,<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Point<span class=\"br0\">(</span>margin + sizez, sizez<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colors <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span>Color.<span class=\"me1\">red</span>, Color.<span class=\"me1\">green</span>, Color.<span class=\"me1\">blue</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawPoints<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span>- stack<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>colors<span class=\"br0\">(</span>p.<span class=\"me1\">colorIndex</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              g.<span class=\"me1\">fillOval</span><span class=\"br0\">(</span>p.<span class=\"me1\">x</span>, p.<span class=\"me1\">y</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>          g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>          drawPoints<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> addPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colorIndex <span class=\"sy0\">=</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> halfwayPoint<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Point, b<span class=\"sy0\">:</span> Point, idx<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ColoredPoint<span class=\"br0\">(</span><span class=\"br0\">(</span>a.<span class=\"me1\">x</span> + b.<span class=\"me1\">x</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span>, <span class=\"br0\">(</span>a.<span class=\"me1\">y</span> + b.<span class=\"me1\">y</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span>, idx<span class=\"br0\">)</span><br/>\u00a0<br/>          stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>halfwayPoint<span class=\"br0\">(</span>stack.<span class=\"me1\">top</span>, points<span class=\"br0\">(</span>colorIndex<span class=\"br0\">)</span>, colorIndex<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ColoredPoint<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colorIndex<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>\u00a0<br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ColoredPoint<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Timer<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"br0\">(</span><span class=\"sy0\">_:</span> ActionEvent<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>stack.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">50000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until <span class=\"nu0\">1000</span><span class=\"br0\">)</span> addPoint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        setBackground<span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>        setPreferredSize<span class=\"br0\">(</span>dim<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      add<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ChaosGame, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      setDefaultCloseOperation<span class=\"br0\">(</span>WindowConstants.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>      setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      setResizable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>      setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 45, "block": "<pre class=\"text highlighted_source\">//Input<br/>n_sides = 3;<br/>side_length = 1;<br/>ratio = 0.5;<br/>n_steps = 1.0d5;<br/>first_step = 0;<br/>\u00a0<br/>if n_sides&lt;3 then<br/>    error(\"n_sides should be at least 3.\");<br/>end<br/>\u00a0<br/>//Calculating vertices' positions<br/>theta = (2 *\u00a0%pi) / n_sides;<br/>alpha = (180 - (360/n_sides)) / 2 * (%pi/180);<br/>radius = (sin(theta) / side_length) / sin(alpha);<br/>vertices = zeros(1,n_sides);<br/>for i=1:n_sides<br/>    vertices(i) = radius * exp(\u00a0%i * theta * (i-1) ); //equally spaced vertices over a circumference<br/>                                                      //centered on 0 + 0i, or (0,0)<br/>end<br/>clear theta alpha radius i<br/>\u00a0<br/>\u00a0<br/>//Iterations<br/>tic();<br/>points = zeros(1,n_steps);<br/>points(1) = first_step;<br/>i = 2;<br/>while i &lt;= n_steps<br/>    random=grand(1,'prm',[1:n_sides]'); //sort vertices randomly<br/>    random=random(1);                   //choose the first random vertices<br/>\u00a0<br/>    points(i) = ( vertices(random) - points(i-1) ) * (1-ratio) + points(i-1);<br/>\u00a0<br/>    i = i + 1;  <br/>end<br/>time=toc();<br/>disp('Time: '+string(time)+'s.');<br/>\u00a0<br/>//Ploting<br/>scf(0); clf();<br/>xname('Chaos game: '+string(n_sides)+'-sides polygon');<br/>plot2d(real(points),imag(points),0)<br/>plot2d(real(vertices),imag(vertices),-3);<br/>set(gca(),'isoview','on');</pre>"}, {"lang": "Sidef", "loc": 35, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Imager'</span><span class=\"br0\">)</span><br/>\u00a0<br/>var width  = <span class=\"nu0\">600</span><br/>var height = <span class=\"nu0\">600</span><br/>\u00a0<br/>var points = <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span>width<span class=\"sy0\">//</span><span class=\"nu0\">2</span>,        <span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span>       <span class=\"nu0\">0</span>, height<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>    <span class=\"br0\">[</span>height<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, height<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>var img = <span class=\"sy0\">%</span>O<span class=\"sy0\">|</span>Imager<span class=\"sy0\">|</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>                      xsize <span class=\"sy0\">=&gt;</span> width,<br/>                      ysize <span class=\"sy0\">=&gt;</span> height,<br/>                     <span class=\"br0\">)</span><br/>\u00a0<br/>var color = <span class=\"sy0\">%</span>O<span class=\"sy0\">|</span><span class=\"re2\">Imager::Color</span><span class=\"sy0\">|</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'#ff0000'</span><span class=\"br0\">)</span><br/>var r = <span class=\"br0\">[</span><span class=\"br0\">(</span>width<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">irand</span>, <span class=\"br0\">(</span>height<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">irand</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"nu0\">30000</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>    var <span class=\"kw3\">p</span> = points.<span class=\"kw3\">rand</span><br/>\u00a0<br/>    r<span class=\"br0\">[</span><span class=\"br0\">]</span> = <span class=\"br0\">(</span><br/>        <span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span>,<br/>        <span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span>,<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    img.<span class=\"me1\">setpixel</span><span class=\"br0\">(</span><br/>        x     <span class=\"sy0\">=&gt;</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,<br/>        y     <span class=\"sy0\">=&gt;</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,<br/>        color <span class=\"sy0\">=&gt;</span> color,<br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>img.<span class=\"me1\">write</span><span class=\"br0\">(</span>file <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'chaos_game.png'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Simula", "loc": 40, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>    INTEGER U, COLUMNS, LINES;<br/>    COLUMNS\u00a0:= 40;<br/>    LINES\u00a0:= 80;<br/>    U\u00a0:= ININT;<br/>    BEGIN<br/>        CHARACTER ARRAY SCREEN(0:LINES, 0:COLUMNS);<br/>        INTEGER X, Y, I, VERTEX;<br/>\u00a0<br/>        FOR X\u00a0:= 0 STEP 1 UNTIL LINES-1 DO<br/>            FOR Y\u00a0:= 0 STEP 1 UNTIL COLUMNS-1 DO<br/>                SCREEN(X, Y)\u00a0:= ' ';<br/>\u00a0<br/>        X\u00a0:= RANDINT(0, LINES - 1, U);<br/>        Y\u00a0:= RANDINT(0, COLUMNS - 1, U);<br/>\u00a0<br/>        FOR I\u00a0:= 1 STEP 1 UNTIL 5000 DO<br/>        BEGIN<br/>            VERTEX\u00a0:= RANDINT(1, 3, U);<br/>            IF VERTEX = 1 THEN BEGIN X\u00a0:= X // 2;<br/>                                     Y\u00a0:= Y // 2;<br/>                               END ELSE<br/>            IF VERTEX = 2 THEN BEGIN X\u00a0:= LINES // 2 + (LINES // 2 - X) // 2;<br/>                                     Y\u00a0:= COLUMNS - (COLUMNS - Y) // 2;<br/>                               END ELSE<br/>            IF VERTEX = 3 THEN BEGIN X\u00a0:= LINES - (LINES - X) // 2;<br/>                                     Y\u00a0:= Y // 2;<br/>                               END ELSE ERROR(\"VERTEX OUT OF BOUNDS\");<br/>            SCREEN(X, Y)\u00a0:= 'X';<br/>        END;<br/>\u00a0<br/>        FOR Y\u00a0:= 0 STEP 1 UNTIL COLUMNS-1 DO<br/>        BEGIN<br/>            FOR X\u00a0:= 0 STEP 1 UNTIL LINES-1 DO<br/>                OUTCHAR(SCREEN(X, Y));<br/>            OUTIMAGE;<br/>        END;<br/>    END;<br/>END<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 28, "block": "<pre class=\"text highlighted_source\">w,h:=640,640;<br/>bitmap:=PPM(w,h,0xFF|FF|FF);  // White background<br/>colors:=T(0xFF|00|00,0x00|FF|00,0x00|00|FF);   // red,green,blue<br/>\u00a0<br/>margin,size:=60, w - 2*margin;<br/>points:=T(T(w/2, margin), T(margin,size), T(margin + size,size) );<br/>N,done:=Atomic.Int(0),Atomic.Bool(False);<br/>\u00a0<br/>Thread.HeartBeat('wrap(hb){  // a thread<br/>   var a=List(-1,-1);<br/>\u00a0<br/>   if(N.inc()&lt;50){<br/>      do(500){ <br/>\t colorIndex:=(0).random(3);  // (0..2)<br/>\t b,p:=points[colorIndex], halfwayPoint(a,b);<br/>\t x,y:=p;<br/>\t bitmap[x,y]=colors[colorIndex];<br/>\t a=p;<br/>      }<br/>      bitmap.writeJPGFile(\"chaosGame.jpg\",True);<br/>   }<br/>   else{ hb.cancel(); done.set(); }  // stop thread and signal done<br/>},2).go();     // run every 2 seconds, starting now<br/>\u00a0<br/>fcn halfwayPoint([(ax,ay)], [(bx,by)]){ T((ax + bx)/2, (ay + by)/2) }<br/>\u00a0<br/>done.wait();  // don't exit until thread is done<br/>println(\"Done\");</pre>"}]}