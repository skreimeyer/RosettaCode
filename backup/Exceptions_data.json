{"task": "Exceptions", "blocks": [{"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\">Foo_Error\u00a0: <span class=\"kw1\">exception</span>;</pre>"}, {"lang": "Aikido", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>try {<br/>    var lines = readfile (\"input.txt\")<br/>    process (lines)<br/>} catch (e) {<br/>   do_somthing(e)<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 25, "block": "<pre class=\"text highlighted_source\">void<br/>throwing(void)<br/>{<br/>    o_text(\"throwing...\\n\");<br/>    error(\"now!\");<br/>}<br/>\u00a0<br/>void<br/>catching(void)<br/>{<br/>    o_text(\"ready to catch\\n\");<br/>    if (trap(throwing)) {<br/>\to_text(\"caught!\\n\");<br/>    } else {<br/>\t# nothing was thrown<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    catching();<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 119, "block": "<pre class=\"algol68 highlighted_source\">COMMENT<br/>  Define an general event handling mechanism on <span class=\"kw4\">MODE</span> OBJ<span class=\"sy1\">:</span> <br/>  <span class=\"sy1\">*</span> try to parallel pythons exception handling flexibility<br/><span class=\"kw2\">END</span> COMMENT<br/>\u00a0<br/>COMMENT<br/>  REQUIRES<span class=\"sy1\">:</span><br/>    <span class=\"kw4\">MODE</span> OBJ <span class=\"coMULTI\"># These can be a UNION of REF types #</span><br/>    <span class=\"kw4\">OP</span> OBJIS<br/>  PROVIDES<span class=\"sy1\">:</span><br/>    <span class=\"kw4\">OP</span> ON<span class=\"sy1\">,</span> RAISE<span class=\"sy1\">,</span> RESET<br/>    <span class=\"kw4\">PROC</span> obj on<span class=\"sy1\">,</span> obj raise<span class=\"sy1\">,</span> obj reset<br/><span class=\"kw2\">END</span> COMMENT<br/>\u00a0<br/><span class=\"coMULTI\"># define object related to OBJ EVENTS #</span><br/><span class=\"kw4\">MODE</span><br/>  RAISEOBJ <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>OBJ<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">,</span> RAWMENDOBJ <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>OBJ<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">,</span><br/>  MENDOBJ <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>RAWMENDOBJ<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># Generalise: Allow PROC VOID (a GOTO) as a short hand #</span><br/>  NEWSCOPEOBJ <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> NEWSCOPEOBJ up<span class=\"sy1\">,</span> FLEXOBJ obj flex<span class=\"sy1\">,</span> FLEXEVENTOBJ event flex<span class=\"sy1\">,</span> MENDOBJ mended<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  SCOPEOBJ <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> NEWSCOPEOBJ<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> FLEXOBJ<span class=\"sy1\">=</span><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span>OBJ<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Provide an INIT to convert a GO TO to a MEND ... useful for direct aborts #</span><br/><span class=\"kw4\">OP</span> INITMENDOBJ <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> go to<span class=\"br0\">)</span>MENDOBJ<span class=\"sy1\">:</span> <span class=\"br0\">(</span>go to<span class=\"sy1\">;</span> <span class=\"kw7\">SKIP</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>SCOPEOBJ obj scope end <span class=\"sy1\">=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>SCOPEOBJ obj scope begin <span class=\"sy1\">:=</span> obj scope end<span class=\"sy1\">;</span> <span class=\"coMULTI\"># INITialise stack #</span><br/>OBJ obj any <span class=\"sy1\">=</span> <span class=\"kw7\">EMPTY</span><span class=\"sy1\">;</span><br/>EVENTOBJ obj event any <span class=\"sy1\">=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Some crude Singly Linked-List manipulations of the scopes, aka stack ... #</span><br/><span class=\"coMULTI\"># An event/mended can be shared for all OBJ of the same type: #</span><br/><span class=\"kw4\">PRIO</span> INITAB <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> <span class=\"sy1\">+=:</span> <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> INITAB <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCOPEOBJ lhs<span class=\"sy1\">,</span> MENDOBJ obj mend<span class=\"br0\">)</span>SCOPEOBJ<span class=\"sy1\">:</span><br/>  lhs <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>obj scope end<span class=\"sy1\">,</span> obj any<span class=\"sy1\">,</span> obj event any<span class=\"sy1\">,</span> obj mend<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> INITSCOPE <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MENDOBJ obj mend<span class=\"br0\">)</span>SCOPEOBJ<span class=\"sy1\">:</span> <span class=\"kw4\">HEAP</span> NEWSCOPEOBJ INITAB obj mend<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+=:</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCOPEOBJ item<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> SCOPEOBJ rhs<span class=\"br0\">)</span>SCOPEOBJ<span class=\"sy1\">:</span> <span class=\"br0\">(</span> up <span class=\"kw6\">OF</span> item <span class=\"sy1\">:=</span> rhs<span class=\"sy1\">;</span> rhs <span class=\"sy1\">:=</span> item <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+=:</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MENDOBJ mend<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> SCOPEOBJ rhs<span class=\"br0\">)</span>SCOPEOBJ<span class=\"sy1\">:</span> INITSCOPE mend <span class=\"sy1\">+=:</span> rhs<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">#OP -=: = (REF SCOPEOBJ scope)SCOPEOBJ: scope\u00a0:= up OF scope;#</span><br/>\u00a0<br/><span class=\"co1\">COMMENT Restore the prio event scope: ~ END COMMENT</span><br/><span class=\"kw4\">PROC</span> obj reset <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCOPEOBJ up scope<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> obj scope begin <span class=\"sy1\">:=</span> up scope<span class=\"sy1\">;</span><br/>MENDOBJ obj unmendable <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ obj<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> NEWEVENTOBJ <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"coMULTI\"># the is simple a typed place holder #</span><br/>  SCOPEOBJ scope<span class=\"sy1\">,</span><br/>  <span class=\"kw3\">STRING</span> description<span class=\"sy1\">,</span><br/>  <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>OBJ <span class=\"coMULTI\">#obj#</span><span class=\"sy1\">,</span> MENDOBJ <span class=\"coMULTI\">#obj mend#</span><span class=\"br0\">)</span>SCOPEOBJ on<span class=\"sy1\">,</span><br/>  <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>OBJ <span class=\"coMULTI\">#obj#</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> <span class=\"coMULTI\">#msg#</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> raise<br/><span class=\"br0\">)</span><span class=\"sy1\">,</span> EVENTOBJ <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> NEWEVENTOBJ<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> FLEXEVENTOBJ <span class=\"sy1\">=</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span>EVENTOBJ<span class=\"sy1\">;</span><br/>\u00a0<br/>COMMENT Define how to catch an event<span class=\"sy1\">:</span><br/>    obj <span class=\"sy1\">-</span> <span class=\"kw2\">IF</span> obj <span class=\"kw7\">IS</span> <span class=\"kw7\">NIL</span> then mend event on all OBJects<br/>    obj mend <span class=\"sy1\">-</span> <span class=\"kw4\">PROC</span> to call to repair the object<br/>    return the prior event scope<br/><span class=\"kw2\">END</span> COMMENT<br/><span class=\"kw4\">PROC</span> obj on <span class=\"sy1\">=</span> <span class=\"br0\">(</span>FLEXOBJ obj flex<span class=\"sy1\">,</span> FLEXEVENTOBJ event flex<span class=\"sy1\">,</span> MENDOBJ mend<span class=\"br0\">)</span>SCOPEOBJ<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  mend <span class=\"sy1\">+=:</span> obj scope begin<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> obj any ISNTIN obj flex <span class=\"kw2\">THEN</span> obj flex <span class=\"kw6\">OF</span> obj scope begin <span class=\"sy1\">:=</span> obj flex <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> obj event any ISNTIN event flex <span class=\"kw2\">THEN</span> event flex <span class=\"kw6\">OF</span> obj scope begin <span class=\"sy1\">:=</span> event flex <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>  up <span class=\"kw6\">OF</span> obj scope begin<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PRIO</span> OBJIS <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> OBJISNT <span class=\"sy1\">=</span> 4<span class=\"sy1\">;</span> <span class=\"coMULTI\"># pick the same PRIOrity as EQ and NE #</span><br/><span class=\"kw4\">OP</span> OBJISNT <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw8\">NOT</span><span class=\"br0\">(</span>a OBJIS b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PRIO</span> ISIN <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> ISNTIN <span class=\"sy1\">=</span> 4<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ISNTIN <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ obj<span class=\"sy1\">,</span> FLEXOBJ obj flex<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">BOOL</span> isnt in <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> obj flex <span class=\"kw2\">WHILE</span> isnt in <span class=\"sy1\">:=</span> obj OBJISNT obj flex<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  isnt in<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ISIN <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ obj<span class=\"sy1\">,</span> FLEXOBJ obj flex<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw8\">NOT</span><span class=\"br0\">(</span>obj ISNTIN obj flex<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> ISNTIN <span class=\"sy1\">=</span> <span class=\"br0\">(</span>EVENTOBJ event<span class=\"sy1\">,</span> FLEXEVENTOBJ event flex<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">BOOL</span> isnt in <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> event flex <span class=\"kw2\">WHILE</span> isnt in <span class=\"sy1\">:=</span> event <span class=\"kw7\">ISNT</span> event flex<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  isnt in<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ISIN <span class=\"sy1\">=</span> <span class=\"br0\">(</span>EVENTOBJ event<span class=\"sy1\">,</span> FLEXEVENTOBJ event flex<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw8\">NOT</span><span class=\"br0\">(</span>event ISNTIN event flex<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>COMMENT Define how to raise an event<span class=\"sy1\">,</span> once it is raised try and mend it<span class=\"sy1\">:</span><br/>  if all else fails produce an error message and stop<br/><span class=\"kw2\">END</span> COMMENT<br/><span class=\"kw4\">PROC</span> obj raise <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ obj<span class=\"sy1\">,</span> EVENTOBJ event<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> msg<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  SCOPEOBJ this scope <span class=\"sy1\">:=</span> obj scope begin<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># until mended this event should cascade through scope event handlers/members #</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">WHILE</span> this scope <span class=\"kw7\">ISNT</span> SCOPEOBJ<span class=\"br0\">(</span>obj scope end<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> <span class=\"br0\">(</span>obj any ISIN obj flex <span class=\"kw6\">OF</span> this scope <span class=\"kw16\">OR</span> obj ISIN obj flex <span class=\"kw6\">OF</span> this scope <span class=\"br0\">)</span> <span class=\"kw16\">AND</span><br/>       <span class=\"br0\">(</span>obj event any ISIN event flex <span class=\"kw6\">OF</span> this scope <span class=\"kw16\">OR</span> event ISIN event flex <span class=\"kw6\">OF</span> this scope<span class=\"br0\">)</span><br/>    <span class=\"kw2\">THEN</span><br/>      <span class=\"kw2\">CASE</span> mended <span class=\"kw6\">OF</span> this scope <span class=\"kw2\">IN</span><br/>        <span class=\"br0\">(</span>RAWMENDOBJ mend<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw2\">IF</span> mend<span class=\"br0\">(</span>obj<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> break mended <span class=\"kw2\">FI</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> go to<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>go to<span class=\"sy1\">;</span> stop<span class=\"br0\">)</span><br/>      <span class=\"kw2\">OUT</span> put<span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> <span class=\"st0\">\"undefined: raise stop\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> stop<br/>      <span class=\"kw2\">ESAC</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    this scope <span class=\"sy1\">:=</span> up <span class=\"kw6\">OF</span> this scope<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  put<span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"OBJ event: \"</span><span class=\"sy1\">,</span>msg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> stop<span class=\"sy1\">;</span> <span class=\"kw7\">FALSE</span><br/><span class=\"kw2\">EXIT</span><br/>  break mended<span class=\"sy1\">:</span> <span class=\"kw7\">TRUE</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">CO define ON and some useful(?) RAISE OPs CO</span><br/><span class=\"kw4\">PRIO</span> ON <span class=\"sy1\">=</span> 1<span class=\"sy1\">,</span> RAISE <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ON <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MENDOBJ mend<span class=\"sy1\">,</span> EVENTOBJ event<span class=\"br0\">)</span>SCOPEOBJ<span class=\"sy1\">:</span> obj on<span class=\"br0\">(</span>obj any<span class=\"sy1\">,</span> event<span class=\"sy1\">,</span> mend<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   RAISE <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ obj<span class=\"sy1\">,</span> EVENTOBJ event<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> obj raise<span class=\"br0\">(</span>obj<span class=\"sy1\">,</span> event<span class=\"sy1\">,</span> <span class=\"st0\">\"unnamed event\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   RAISE <span class=\"sy1\">=</span> <span class=\"br0\">(</span>OBJ obj<span class=\"sy1\">,</span> MENDOBJ mend<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> mend ON obj event any<span class=\"sy1\">;</span> obj RAISE obj event any<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   RAISE <span class=\"sy1\">=</span> <span class=\"br0\">(</span>EVENTOBJ event<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> obj raise<span class=\"br0\">(</span>obj any<span class=\"sy1\">,</span> event<span class=\"sy1\">,</span> <span class=\"st0\">\"unnamed event\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   RAISE <span class=\"sy1\">=</span> <span class=\"br0\">(</span>MENDOBJ mend<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> mend ON obj event any<span class=\"sy1\">;</span> RAISE obj event any<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   RAISE <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> msg<span class=\"sy1\">,</span> EVENTOBJ event<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> obj raise<span class=\"br0\">(</span>obj any<span class=\"sy1\">,</span> event<span class=\"sy1\">,</span> msg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"br0\">(</span>SCOPEOBJ <span class=\"coMULTI\">#up scope#</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> RESET <span class=\"sy1\">=</span> obj reset<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "AppleScript", "loc": 4, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">try</span><br/>    <span class=\"kw3\">set</span> num <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><br/>    <span class=\"co1\">--do something that might throw an error</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">try</span></pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"ahk highlighted_source\">try<br/>    BadlyCodedFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>catch e<br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"Error in \"</span> e<span class=\"sy0\">.</span>What <span class=\"st0\">\", which was called at line \"</span> e<span class=\"sy0\">.</span>Line <br/>\u00a0<br/>BadlyCodedFunc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    throw Exception<span class=\"br0\">(</span><span class=\"st0\">\"Fail\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">      ON ERROR PROCerror(ERR, REPORT$)\u00a0: END<br/>\u00a0<br/>      ERROR 100, \"User-generated exception\"<br/>      END<br/>\u00a0<br/>      DEF PROCerror(er%, rpt$)<br/>      PRINT \"Exception occurred\"<br/>      PRINT \"Error number was \"\u00a0; er%<br/>      PRINT \"Error string was \" rpt$<br/>      ENDPROC</pre>"}, {"lang": "blz", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>try<br/>    1 / 0 # Throw an exception<br/>    print(\"unreachable code\")<br/>catch<br/>    print(\"An error occured!\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 17, "block": "<pre class=\"text highlighted_source\">( ( MyFunction<br/>  =   someText XMLstuff<br/>    .   (   get$!arg:?someText<br/>          &amp; get$(\"CorporateData.xml\",X,ML):?XMLstuff<br/>        |     out<br/>            $ ( str<br/>              $ ( \"Something went wrong when reading your file \\\"\"<br/>                 \u00a0!arg<br/>                  \"\\\". Or was it the Corporate Data? Hard to say. Anyhow, now I throw you out.\"<br/>                )<br/>              )<br/>          &amp; ~<br/>        )<br/>      &amp; contemplate$(!someText,!XMLstuff)<br/>  )<br/>&amp; MyFunction$\"Tralula.txt\"<br/>);</pre>"}, {"lang": "C", "loc": 27, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;setjmp.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> <span class=\"br0\">{</span> MY_EXCEPTION <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* any non-zero number */</span><br/>\u00a0<br/>jmp_buf env<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/longjmp.html\"><span class=\"kw3\">longjmp</span></a><span class=\"br0\">(</span>env<span class=\"sy0\">,</span> MY_EXCEPTION<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* throw MY_EXCEPTION */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> call_foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setjmp.html\"><span class=\"kw3\">setjmp</span></a><span class=\"br0\">(</span>env<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span>                     <span class=\"coMULTI\">/* try */</span><br/>    foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">case</span> MY_EXCEPTION<span class=\"sy0\">:</span>          <span class=\"coMULTI\">/* catch MY_EXCEPTION */</span><br/>    <span class=\"coMULTI\">/* handle exceptions of type MY_EXCEPTION */</span><br/>    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>    <span class=\"coMULTI\">/* handle any type of exception not handled by above catches */</span><br/>    <span class=\"coMULTI\">/* note: if this \"default\" section is not included, that would be equivalent to a blank \"default\" section */</span><br/>    <span class=\"coMULTI\">/* i.e. any exception not caught above would be caught and ignored */</span><br/>    <span class=\"coMULTI\">/* there is no way to \"let the exception through\" */</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 4, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">struct</span> MyException<br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// data with info about exception</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 4, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> MyException <span class=\"sy0\">:</span> Exception<br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// data with info about exception</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">try</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>rand<span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>RuntimeException<span class=\"sy0\">.</span> <span class=\"st0\">\"oops!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"see this half the time\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">catch</span> RuntimeException e<br/>    <span class=\"br0\">(</span>println e<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">finally</span><br/>    <span class=\"br0\">(</span>println <span class=\"st0\">\"always see this\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ColdFusion", "loc": 5, "block": "<pre class=\"cfm highlighted_source\">try {<br/>  foo();<br/>} catch (Any e) {<br/>  // handle exception e<br/>}</pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define-condition unexpected-odd-number <span class=\"br0\">(</span><span class=\"kw1\">error</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>number <span class=\"sy0\">:</span><span class=\"me1\">reader</span> number <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">number</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">report</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>condition stream<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>format stream <span class=\"st0\">\"Unexpected odd number: ~w.\"</span><br/>                     <span class=\"br0\">(</span>number condition<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-number <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> n<br/>    <span class=\"br0\">(</span><span class=\"kw1\">error</span> 'unexpected-odd-number <span class=\"sy0\">:</span><span class=\"me1\">number</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-even-number <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>handler-<span class=\"kw1\">case</span> <span class=\"br0\">(</span>get-number<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unexpected-odd-number <span class=\"br0\">(</span>condition<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>number condition<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 35, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Throw Exceptions</span><br/><span class=\"co2\">/// Stack traces are generated compiling with the -g switch.</span><br/><span class=\"kw4\">void</span> test1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Sample Exception\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Catch Exceptions</span><br/><span class=\"kw4\">void</span> test2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>        test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw3\">Exception</span> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span>ex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">throw</span> ex<span class=\"sy0\">;</span> <span class=\"co1\">// rethrow</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Ways to implement finally</span><br/><span class=\"kw4\">void</span> test3<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">try</span> test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">finally</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"test3 finally\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Or also with scope guards</span><br/><span class=\"kw4\">void</span> test4<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>exit<span class=\"br0\">)</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"Test4 done\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>failure<span class=\"br0\">)</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"Test4 exited by exception\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">scope</span><span class=\"br0\">(</span>success<span class=\"br0\">)</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"Test4 exited by return or function end\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    test4<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 4, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> test<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">raise</span> Exception<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'Sample Exception'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 7, "block": "<pre class=\"text highlighted_source\">stuff-going-wrong:<br/>\traise\u00a0:value-error<br/>\u00a0<br/>try:<br/>\tstuff-going-wrong<br/>catch value-error:<br/>\t!print \"Whoops!\"</pre>"}, {"lang": "DWScript", "loc": 4, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> Test<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">raise</span> Exception<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"st0\">'Sample Exception'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 15, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> nameOf<span class=\"br0\">(</span>arg <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>arg <span class=\"sy0\">==</span> <span class=\"nu0\">43</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        return <span class=\"st0\">\"Bob\"</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/throw\"><span class=\"kw6\">throw</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Who?\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> catching<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/try\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        return <span class=\"br0\">[</span><span class=\"st0\">\"ok\"</span><span class=\"sy0\">,</span> nameOf<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/catch\"><span class=\"kw2\">catch</span></a> exceptionObj <span class=\"br0\">{</span><br/>        return <span class=\"br0\">[</span><span class=\"st0\">\"notok\"</span><span class=\"sy0\">,</span> exceptionObj<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 5, "block": "<pre class=\"text highlighted_source\">class MyException\u00a0:: Exception<br/>{<br/>    constructor new<br/>        &lt;= new literal:\"MyException raised\".<br/>}</pre>"}, {"lang": "Erlang", "loc": 14, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> exceptions <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">try</span>    <br/>    <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">throw</span><span class=\"br0\">(</span> new_exception <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">catch</span><br/>    <span class=\"re5\">_</span>:<span class=\"me2\">Exception</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Catched ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Exception</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"Install Linux, Problem Solved\" throw<br/>\u00a0<br/>TUPLE: velociraptor\u00a0;<br/>\\ velociraptor new throw</pre>"}, {"lang": "Fancy", "loc": 20, "block": "<pre class=\"text highlighted_source\"># define custom exception class<br/># StandardError is base class for all exception classes<br/>class MyError\u00a0: StandardError {<br/>  def initialize: message {<br/>    # forward to StdError's initialize method<br/>    super initialize: message<br/>  }<br/>}<br/>\u00a0<br/>try {<br/>  # raises/throws a new MyError exception within try-block<br/>  MyError new: \"my message\" . raise!<br/>} catch MyError =&gt; e {<br/>  # catch exception<br/>  # this will print \"my message\"<br/>  e message println<br/>} finally {<br/>  # this will always be executed (as in e.g. Java)<br/>  \"This is how exception handling in Fancy works\u00a0:)\" println<br/>}</pre>"}, {"lang": "Fantom", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// Create a new error class by subclassing sys::Err<br/>const class SpecialErr\u00a0: Err <br/>{<br/>  // you must provide some message about the error <br/>  // to the parent class, for reporting<br/>  new make ()\u00a0: super (\"special error\") {}<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  static Void fn ()<br/>  {<br/>    throw SpecialErr ()<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    try<br/>      fn()<br/>    catch (SpecialErr e)<br/>      echo (\"Caught \" + e)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: f ( -- )  1 throw .\" f \"\u00a0;  \\ will throw a \"1\"<br/>: g ( -- )  0 throw .\" g \"\u00a0;  \\ does not throw</pre>"}, {"lang": "FreeBASIC", "loc": 30, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Enum</span> ErrorType<br/>  myError = <span class=\"nu0\">1000</span> <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Enum</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Err</span> = <span class=\"nu0\">1000</span> <span class=\"co1\">' raise a user-defined error</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> callFoo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> errNo = <span class=\"kw1\">Err</span> <span class=\"co1\">' cache Err in case it's reset by a different function</span><br/>  Select <span class=\"kw1\">Case</span> errNo<br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">0</span><br/>      <span class=\"co1\">' No error (system defined)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">17</span><br/>      <span class=\"co1\">' System defined runtime errors</span><br/>    <span class=\"kw1\">Case</span> myError:   <span class=\"co1\">' catch myError </span><br/>      <span class=\"kw1\">Print</span> <span class=\"st0\">\"Caught myError\u00a0: Error number\"</span>; errNo<br/>    <span class=\"kw1\">Case</span> <span class=\"kw1\">Else</span><br/>      <span class=\"co1\">' catch any other type of errors here</span><br/>  <span class=\"kw1\">End</span> Select<br/>  <span class=\"co1\">' add any clean-up code here</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>callfoo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 30, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iInteger <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/>\u00a0<br/>MakeError<br/>DivError<br/>\u00a0<br/>iInteger <span class=\"sy0\">=</span> <span class=\"st0\">\"2.54\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/catch\"><span class=\"kw1\">Catch</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a>.<span class=\"me1\">Text</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/><span class=\"co1\">'______________________</span><br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> DivError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/catch\"><span class=\"kw1\">Catch</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a>.<span class=\"me1\">Text</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/><span class=\"co1\">'______________________</span><br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> MakeError<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a>.<a href=\"http://gambasdoc.org/help/lang/raise\"><span class=\"kw1\">Raise</span></a><span class=\"br0\">(</span><span class=\"st0\">\"My Error\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/catch\"><span class=\"kw1\">Catch</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a>.<span class=\"me1\">Text</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 22, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> foo<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"let's foo...\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> e <span class=\"sy2\">:=</span> <span class=\"kw3\">recover</span><span class=\"sy1\">();</span> e <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Recovered from\"</span><span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}()</span><br/>\t<span class=\"kw1\">var</span> a <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>\ta<span class=\"sy1\">[</span><span class=\"nu0\">12</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"there's no point in going on.\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"never reached\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw3\">panic</span><span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span>Scan<span class=\"sy1\">)</span> <span class=\"co1\">// Can use any value, here a function!</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfoo<span class=\"sy1\">()</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"glad that's over.\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">do</span> <span class=\"coMULTI\">{- ... -}</span><br/>   throwIO SomeException</pre>"}, {"lang": "HolyC", "loc": 8, "block": "<pre class=\"text highlighted_source\">try {<br/>  U8 *err = 'Error';<br/>  throw(err); // throw exception<br/>} catch {<br/>  if (err == 'Error')<br/>    Print(\"Raised 'Error'\");<br/>  PutExcept; // print the exception and stack trace<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">import</span> Exceptions<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>A <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> Try<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">call</span><span class=\"br0\">{</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>g<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>            Try<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">catch</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">:=</span> Try<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getException</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"kw4\">write</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span><span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\":<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">.</span><span class=\"me1\">getLocation</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> g<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span> Exception<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">throw</span><span class=\"br0\">(</span><span class=\"st0\">\"bad value of \"</span><span class=\"sy0\">||</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> i<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 18, "block": "<pre class=\"j highlighted_source\">   pickyPicky =: verb define<br/>     <span class=\"kw1\">if.</span> <span class=\"kw2\">y</span>-:<span class=\"st_h\">'bad argument'</span> <span class=\"kw1\">do.</span><br/>        <span class=\"kw1\">throw.</span><br/>     <span class=\"kw1\">else.</span><br/>        <span class=\"st_h\">'thanks!'</span><br/>     <span class=\"kw1\">end.</span><br/>   <span class=\"sy0\">)</span><br/>\u00a0<br/>   tryThis  =: verb define<br/>     <span class=\"kw1\">try.</span><br/>        pickyPicky <span class=\"kw2\">y</span><br/>     <span class=\"kw1\">catcht.</span><br/>        <span class=\"st_h\">'Uh oh!'</span><br/>     <span class=\"kw1\">end.</span><br/>   <span class=\"sy0\">)</span><br/>\u00a0<br/>   tryThis <span class=\"st_h\">'bad argument'</span><br/>Uh oh!</pre>"}, {"lang": "Java", "loc": 7, "block": "<pre class=\"java highlighted_source\"><span class=\"co1\">//Checked exception</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MyException <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>   <span class=\"co1\">//Put specific info in here</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//Unchecked exception</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MyRuntimeException <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aruntimeexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RuntimeException</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> doStuff<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> Error<span class=\"br0\">(</span><span class=\"st0\">'Not implemented!'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">try FILTER catch CATCHER</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"text highlighted_source\">function extendedsqrt(x)<br/>    try sqrt(x)<br/>    catch<br/>        if x isa Number<br/>            sqrt(complex(x, 0))<br/>        else<br/>            throw(DomainError())<br/>        end<br/>    end<br/>end<br/>\u00a0<br/>@show extendedsqrt(1)   # 1<br/>@show extendedsqrt(-1)  # 0.0 + 1.0im<br/>@show extendedsqrt('x') # ERROR: DomainError</pre>"}, {"lang": "Kotlin", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"co1\">// In Kotlin all Exception classes derive from Throwable and, by convention, end with the word 'Exception'</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyException <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> message<span class=\"sy0\">:</span> String<span class=\"sy0\">?</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Throwable<span class=\"br0\">(</span>message<span class=\"br0\">)</span> <br/>\u00a0<br/>fun foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> MyException<span class=\"br0\">(</span><span class=\"st0\">\"Bad foo!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun goo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>me<span class=\"sy0\">:</span> MyException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Caught MyException due to '${me.message}'\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The stack trace is:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        me.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    goo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 6, "block": "<pre class=\"text highlighted_source\">protect =&gt; {<br/>   handle_error =&gt; {<br/>        // do something else<br/>   }<br/>   fail(-1,'Oops')<br/>}</pre>"}, {"lang": "Lingo", "loc": 19, "block": "<pre class=\"text highlighted_source\">-- parent script \"ErrorHandler\"<br/>\u00a0<br/>on alertHook (me, errorType, errorMessage, alertType)<br/>  if alertType=#alert then return 0 -- ignore programmatic alerts<br/>\u00a0<br/>  -- log error in file \"error.log\"<br/>  fn = _movie.path&amp;\"error.log\"<br/>  fp = xtra(\"fileIO\").new()<br/>  fp.openFile(fn, 2)<br/>  if fp.status() = -37 then<br/>    fp.createFile(fn)<br/>    fp.openFile(fn, 2)<br/>  end if<br/>  fp.setPosition(fp.getLength())<br/>  fp.writeString(_system.date() &amp;&amp; _system.time() &amp;&amp; errorType &amp; \": \" &amp; errorMessage &amp; RETURN)<br/>  fp.closeFile()<br/>\u00a0<br/>  return 1 -- continues movie playback, no error dialog<br/>end</pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">to div.checked\u00a0:a\u00a0:b<br/>  if\u00a0:b = 0 [(throw \"divzero 0)]<br/>  output\u00a0:a /\u00a0:b<br/>end<br/>to div.safely\u00a0:a\u00a0:b<br/>  output catch \"divzero [div.checked\u00a0:a\u00a0:b]<br/>end</pre>"}, {"lang": "Logtalk", "loc": 25, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(exceptions).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(double<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>    double(<span class=\"re0\">X</span>, <span class=\"re0\">Y</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">catch</span>(double_it(<span class=\"re0\">X</span>,<span class=\"re0\">Y</span>), <span class=\"re0\">Error</span>, handler(<span class=\"re0\">Error</span>, <span class=\"re0\">Y</span>)).<br/>\u00a0<br/>    handler(error(not_a_number(<span class=\"re0\">X</span>), logtalk(<span class=\"re0\">This</span><span class=\"sy1\">::</span>double(<span class=\"re0\">X</span>,<span class=\"re0\">Y</span>), <span class=\"re0\">Sender</span>)), <span class=\"re0\">Y</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% try to fix the error and resume computation;</span><br/>        <span class=\"co1\">% if not possible, rethrow the exception</span><br/>        (   <span class=\"kw4\">catch</span>(<span class=\"kw4\">number_codes</span>(<span class=\"re0\">Nx</span>, <span class=\"re0\">X</span>), <span class=\"re0\">_</span>, <span class=\"kw5\">fail</span>) <span class=\"sy1\">-&gt;</span><br/>            double_it(<span class=\"re0\">Nx</span>, <span class=\"re0\">Y</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"kw4\">throw</span>(error(not_a_number(<span class=\"re0\">X</span>), logtalk(<span class=\"re0\">This</span><span class=\"sy1\">::</span>double(<span class=\"re0\">X</span>,<span class=\"re0\">Y</span>), <span class=\"re0\">Sender</span>)))<br/>        ).<br/>\u00a0<br/>    double_it(<span class=\"re0\">X</span>, <span class=\"re0\">Y</span>) <span class=\"sy2\">:-</span><br/>        (   <span class=\"kw4\">number</span>(<span class=\"re0\">X</span>) <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re0\">Y</span> <span class=\"kw5\">is</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"re0\">X</span><br/>        <span class=\"sy1\">;</span>   <span class=\"kw4\">this</span>(<span class=\"re0\">This</span>),<br/>            <span class=\"kw4\">sender</span>(<span class=\"re0\">Sender</span>),<br/>            <span class=\"kw4\">throw</span>(error(not_a_number(<span class=\"re0\">X</span>), logtalk(<span class=\"re0\">This</span><span class=\"sy1\">::</span>double(<span class=\"re0\">X</span>,<span class=\"re0\">Y</span>), <span class=\"re0\">Sender</span>)))<br/>        ).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Something bad happened!\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Errors {<br/>      Module Check {<br/>            Module Error1 {<br/>                  A=1/0<br/>            }<br/>\u00a0<br/>            Try ok {<br/>                  Error1<br/>            }<br/>            ' we get an Error, and Error$ print division by zero in module Error1<br/>            If Error or not ok then Print Error$ <br/>            Error \"New Error\"<br/>      }<br/>      Try {<br/>            Check<br/>      }<br/>      Print Error=0  ' no Error return<br/>      Print Error$  ' but Error message isn't clear<br/>      ' Error$ used one time, then cleared automatic<br/>}<br/>Errors<br/>Print Error$=\"\"<br/>\u00a0</pre>"}, {"lang": "Make", "loc": 2, "block": "<pre class=\"make highlighted_source\">all<span class=\"sy0\">:</span><br/>     false</pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>errorproc:=proc(n)<br/>local a;<br/>try<br/>a:=1/n;<br/>catch \"numeric exception: division by zero\":<br/>error \"Something went wrong when dividing.\"<br/>end try;<br/>end proc;<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">f[x_]\u00a0:= If[x &gt; 10, Throw[overflow], x!]<br/>\u00a0<br/>Example usage\u00a0: <br/>Catch[f[2] + f[11]]<br/>-&gt; overflow<br/>\u00a0<br/>Catch[f[2] + f[3]]<br/>-&gt; 8</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a> <span class=\"co2\">'Help'</span><br/>??? <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/help.html\"><span class=\"kw2\">Help</span></a></pre>"}, {"lang": "Modula-3", "loc": 2, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">EXCEPTION</span> EndOfFile;<br/><span class=\"kw1\">EXCEPTION</span> Error<span class=\"br0\">(</span><span class=\"kw4\">TEXT</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "MOO", "loc": 1, "block": "<pre class=\"text highlighted_source\">raise(E_PERM);</pre>"}, {"lang": "Nemerle", "loc": 23, "block": "<pre class=\"text highlighted_source\">// define a new exception<br/>class MyException\u00a0: Exception<br/>{<br/>    ...<br/>}<br/>\u00a0<br/>// throw an exception<br/>Foo()\u00a0: void<br/>{<br/>    throw MyException();<br/>}<br/>\u00a0<br/>// catching exceptions<br/>try {<br/>    Foo();<br/>}<br/>catch { // catch block uses pattern matching syntax<br/>    |e is MyException =&gt; ... // handle exception<br/>    |_ =&gt; throw e // rethrow unhandled exception<br/>}<br/>finally {<br/>    ... // code executes whether or not exception was thrown<br/>}</pre>"}, {"lang": "NetRexx", "loc": 29, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RExceptions <span class=\"kw2\">public</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method test<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">signals</span> RExceptions.<span class=\"me0\">TakeException</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> RExceptions.<span class=\"me0\">TakeException</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    <span class=\"kw1\">do</span><br/>      RExceptions<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">catch</span> ex = Exception<br/>      <span class=\"kw1\">say</span> ex.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span>;<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RExceptions.<span class=\"me0\">TakeException</span> <span class=\"kw2\">public</span> <span class=\"kw2\">extends</span> Exception<br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method TakeException<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    <span class=\"kw4\">super</span><span class=\"br0\">(</span><span class=\"st0\">'I resent that!'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 1, "block": "<pre class=\"text highlighted_source\">type SillyError = object of Exception</pre>"}, {"lang": "Objective-C", "loc": 4, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> MyException <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSException_Class/\"><span class=\"kw5\">NSException</span></a> <span class=\"br0\">{</span><br/>  <span class=\"co2\">//Put specific info in here</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">exception</span> My_Exception<span class=\"sy0\">;;</span><br/><span class=\"kw1\">exception</span> Another_Exception <span class=\"kw1\">of</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: iwillThrowAnException  \"A new exception\" Exception throw\u00a0;<br/>\u00a0<br/>: iwillCatch<br/>| e |<br/>   try: e [ iwillThrowAnException ] when: [ \"Exception catched\u00a0:\" . e .cr ]<br/>   try: e [ 1 2 over last ] when: [ \"Exception catched\u00a0:\" . e .cr ]<br/>   \"Done\" println\u00a0;</pre>"}, {"lang": "Oz", "loc": 2, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">raise</span> sillyError <span class=\"kw1\">end</span><br/><span class=\"kw1\">raise</span> slightlyLessSilly<span class=\"br0\">(</span>data:42 reason:outOfMemory<span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">trap</span><span class=\"br0\">(</span><span class=\"coMULTI\">/* specific error can be given here, or leave blank to catch all */</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"caught\"</span><br/><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"bad stuff\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># throw an exception</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Danger, danger, Will Robinson!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># catch an exception and show it</span><br/><a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"this could go wrong mightily\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"a185e1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span> <span class=\"kw1\">if</span> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"1c385c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># rethrow</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"785c38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># throw an exception</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Danger, danger, Will Robinson!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># catch an exception and show it</span><br/><a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"this could go wrong mightily\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"a185e1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span> <span class=\"kw1\">if</span> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"1c385c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># rethrow</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"785c38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 17, "block": "<pre class=\"perl6 highlighted_source\">try <span class=\"br0\">{</span><br/>    <span class=\"kw1\">die</span> <span class=\"st0\">\"Help I'm dieing!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">CATCH</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"kw1\">X</span><span class=\"sy0\">::</span><span class=\"me2\">AdHoc</span> <span class=\"br0\">{</span> note <span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">.</span><span class=\"kw3\">uc</span><span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"Cough, Cough, Aiee!!\"</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span> <span class=\"br0\">{</span> note <span class=\"st0\">\"Unexpected exception, $_!\"</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Yay. I'm alive.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">die</span> <span class=\"st0\">\"I'm dead.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Arrgh.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">CATCH</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">default</span> <span class=\"br0\">{</span> note <span class=\"st0\">\"No you're not.\"</span><span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">throw(\"oh no\")<br/>throw(1)<br/>throw(501,{\"she\",made[me],Do(it)})</pre>"}, {"lang": "PHL", "loc": 23, "block": "<pre class=\"text highlighted_source\">module exceptions;<br/>\u00a0<br/>extern printf;<br/>\u00a0<br/>struct @MyException\u00a0: @Exception {<br/>\u00a0<br/>};<br/>\u00a0<br/>@Void func throws ex [<br/>\tthrow new @MyException;<br/>]<br/>\u00a0<br/>@Integer main [<br/>\ttry func();<br/>\tcatch (e) {<br/>\t\tif (e::getType == \"MyException\") {<br/>\t\t\tprintf(\"MyException thrown!\\n\");<br/>\t\t} else {<br/>\t\t\tprintf(\"Unhandled exception!\\n\");<br/>\t\t}<br/>\t}<br/>\treturn 0;<br/>]</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> MyException <span class=\"kw2\">extends</span> Exception<br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">//  Custom exception attributes &amp; methods</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(catch 'thisLabel          # Catch this label<br/>   (println 1)             # Do some processing (print '1')<br/>   (throw 'thisLabel 2)    # Abort processing and return '2'<br/>   (println 3) )           # This is never reached</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Define a new exception, called \"my_condition\". */<br/>on condition (my_condition) snap begin;<br/>   put skip list ('My condition raised.');<br/>end;<br/>\u00a0<br/>/* Raise that exception */<br/>signal condition (my_condition);<br/>\u00a0<br/>/* Raising that exception causes the message \"My condition raised\" */<br/>/* to be printed, and execution then resumes at the statement      */<br/>/* following the SIGNAL statement.                                 */<br/>\u00a0</pre>"}, {"lang": "PL/pgSQL", "loc": 6, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   raise exception <span class=\"st0\">'this is a generic user exception'</span>;<br/>   raise exception division_by_zero;<br/><span class=\"kw1\">END</span>;<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 3, "block": "<pre class=\"text highlighted_source\">define throw_exception();<br/>   throw([my_exception my_data]);<br/>enddefine;</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">throw</span> <span class=\"st0\">\"Any error message.\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 9, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> ErrorHandler<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Exception test\"</span>, <span class=\"st0\">\"The following error happened: \"</span> <span class=\"sy0\">+</span> ErrorMessage<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Exception test\"</span>, <span class=\"st0\">\"Test start\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>OnErrorCall<span class=\"br0\">(</span>@ErrorHandler<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>RaiseError<span class=\"br0\">(</span>#PB_OnError_InvalidMemory<span class=\"br0\">)</span> <span class=\"co1\">;a custom error# can also be used here depending on the OS being compiled for</span></pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">exceptions</span><br/><span class=\"kw1\">class</span> SillyError<span class=\"br0\">(</span><span class=\"kw3\">exceptions</span>.<span class=\"kw2\">Exception</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span>args<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"br0\">)</span>:<br/>         <span class=\"kw2\">self</span>.<span class=\"me1\">args</span><span class=\"sy0\">=</span>args</pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>e &lt;- simpleError(\"This is a simpleError\")<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; define a new exception type<br/>(struct exn:my-exception exn ())<br/>\u00a0<br/>;; handler that prints the message (\"Hi!\")<br/>(define (handler exn)<br/>  (displayln (exn-message exn)))<br/>\u00a0<br/>;; install exception handlers<br/>(with-handlers ([exn:my-exception? handler])<br/> \u00a0;; raise the exception<br/>  (raise (exn:my-exception \"Hi!\" (current-continuation-marks))))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 10, "block": "<pre class=\"text highlighted_source\">42 as custom_error<br/>\u00a0<br/>define foo<br/>    custom_error throw<br/>\u00a0<br/>try<br/>    foo<br/>catch<br/>    custom_error =<br/>    if  'oops' print</pre>"}, {"lang": "REXX", "loc": 13, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates handling an exception (negative #); catching is via a label.*/</span><br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">9</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">5</span><br/>          <span class=\"kw1\">say</span>  <span class=\"st0\">'the square root of '</span>       j       <span class=\"st0\">\" is \"</span>       sqrt<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;        d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;    h=d+<span class=\"nu0\">6</span>;   m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>;           <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>;                 <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> <span class=\"sy0\">.</span>sqrtNeg<br/>      <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, , <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;             g=g <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h%2 + <span class=\"nu0\">1</span>;          <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>         <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5;     <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;          <span class=\"kw1\">return</span>  g<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"sy0\">.</span>sqrtNeg: <span class=\"kw1\">say</span>  <span class=\"st0\">'illegal SQRT argument (argument is negative):'</span>   x;       <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Try<br/>   see 1/0<br/>Catch<br/>   raise(\"Sorry we can't divide 1/0 + nl)<br/>Done<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># define an exception</span><br/><span class=\"kw1\">class</span> SillyError <span class=\"sy0\">&lt;</span> <span class=\"kw4\">Exception</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 62, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">//Defining exceptions</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> AccountBlockException <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Exception<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> InsufficientFundsException<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> amount<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Exception<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> CheckingAccount<span class=\"br0\">(</span>number<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> blocked<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> balance<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> deposit<span class=\"br0\">(</span>amount<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Throwing an exception 1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>blocked<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> AccountBlockException<br/>    balance +<span class=\"sy0\">=</span> amount<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> withdraw<span class=\"br0\">(</span>amount<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Throwing an exception 2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>blocked<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> AccountBlockException<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>amount <span class=\"sy0\">&lt;=</span> balance<span class=\"br0\">)</span> balance -<span class=\"sy0\">=</span> amount<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> InsufficientFundsException<span class=\"br0\">(</span>amount - balance<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CheckingAccount <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ExampleException1 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Exception<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> CheckingAccount<span class=\"br0\">(</span><span class=\"nu0\">101</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Depositing $500...\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>    c.<span class=\"me1\">deposit</span><span class=\"br0\">(</span><span class=\"nu0\">500.00</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Withdrawing $100...\"</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">withdraw</span><span class=\"br0\">(</span><span class=\"nu0\">100.00</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Withdrawing $600...\"</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">withdraw</span><span class=\"br0\">(</span><span class=\"nu0\">600.00</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span> <span class=\"co1\">// Exception handler</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ac<span class=\"sy0\">:</span> InsufficientFundsException <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"Sorry, but you are short ${'$'} ${ac.amount}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ac<span class=\"sy0\">:</span> AccountBlockException      <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Account blocked.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">///////////////////////////// An example of multiple exception handler ////////////////////////</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">_:</span> ExampleException1 |<br/>      <span class=\"sy0\">_:</span> InterruptedException<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"Out of memory or something else.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> Exception <span class=\"sy0\">=&gt;</span> e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_:</span> Throwable <span class=\"sy0\">=&gt;</span> <span class=\"co1\">// Exception cached without any action</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">finally</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Have a nice day\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CheckingBlockingAccount <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> CheckingAccount<span class=\"br0\">(</span><span class=\"nu0\">102</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Depositing $500...\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>    c.<span class=\"me1\">deposit</span><span class=\"br0\">(</span><span class=\"nu0\">500.00</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Withdrawing $100...\"</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">withdraw</span><span class=\"br0\">(</span><span class=\"nu0\">100.00</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Withdrawing $600...\"</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">withdraw</span><span class=\"br0\">(</span><span class=\"nu0\">600.00</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span> <span class=\"co1\">// Exception handler</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ac<span class=\"sy0\">:</span> InsufficientFundsException <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"Sorry, but you are short ${'$'} ${ac.amount}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ac<span class=\"sy0\">:</span> AccountBlockException      <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Account blocked.\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> e<span class=\"sy0\">:</span> Exception                   <span class=\"sy0\">=&gt;</span> e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_:</span> Throwable                   <span class=\"sy0\">=&gt;</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">finally</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Have a nice day\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> NotImplementedErrorTest <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <span class=\"sy0\">???</span> <span class=\"co1\">// Throws  scala.NotImplementedError: an implementation is missing</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 22, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>me<span class=\"sy0\">-</span>errors xx exception<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">even?</span> xx<span class=\"br0\">)</span><br/>      xx<br/>      <span class=\"br0\">(</span>exception<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;example that does nothing special on exception</span><br/><span class=\"br0\">(</span><span class=\"kw1\">call/cc</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>exception<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>me<span class=\"sy0\">-</span>errors <span class=\"nu0\">222</span> exception<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"I guess everything is alright\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;example that laments oddness on exception</span><br/><span class=\"br0\">(</span><span class=\"kw1\">call/cc</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>all<span class=\"sy0\">-</span>ok<span class=\"br0\">)</span> <span class=\"co1\">;used to \"jump\" over exception handling</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">call/cc</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>exception<span class=\"sy0\">-</span>handle<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>me<span class=\"sy0\">-</span>errors <span class=\"nu0\">333</span> exception<span class=\"sy0\">-</span>handle<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"I guess everything is alright\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>all<span class=\"sy0\">-</span>ok<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"oh my god it is ODD!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 4, "block": "<pre class=\"text highlighted_source\">const proc: foo is func<br/>  begin<br/>    raise RANGE_ERROR;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">try  <span class=\"br0\">{</span><br/>    die <span class=\"st0\">\"I'm dead!\"</span>;        <span class=\"co1\"># throws an exception of type 'error'</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">catch</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>type, msg<span class=\"sy0\">|</span><br/>    say <span class=\"st0\">\"type: #{type}\"</span>;    <span class=\"co1\"># type: error</span><br/>    say <span class=\"st0\">\"msg: #{msg}\"</span>;      <span class=\"co1\"># msg: I'm dead! at test.sf line 2.</span><br/><span class=\"br0\">}</span>;<br/>\u00a0<br/>say <span class=\"st0\">\"I'm alive...\"</span>;<br/>die <span class=\"st0\">\"Now I'm dead!\"</span>;        <span class=\"co1\"># this line terminates the program</span><br/>say <span class=\"st0\">\"Or am I?\"</span>;             <span class=\"co1\"># Yes, you are!</span></pre>"}, {"lang": "Slate", "loc": 4, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"2b584e6b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(SceneElement traits) doWithRestart: block<br/>[<br/>  block handlingCases: {Abort -&gt; [|\u00a0:_ | ^ Nil]}<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"coMULTI\">\"exec\"</span> <span class=\"coMULTI\">\"gst\"</span> <span class=\"coMULTI\">\"-f\"</span> <span class=\"coMULTI\">\"$0\"</span> <span class=\"coMULTI\">\"$0\"</span> <span class=\"coMULTI\">\"$*\"</span><br/><span class=\"coMULTI\">\"exit\"</span><br/>\u00a0<br/><span class=\"re0\">Transcript</span> show: <span class=\"st0\">'Throwing yawp'</span>; cr.<br/><span class=\"kw1\">self</span> error: <span class=\"st0\">'Yawp!'</span>.</pre>"}, {"lang": "SQL PL", "loc": 16, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">DECLARE</span> numerator <span class=\"kw1\">INTEGER</span> <span class=\"kw1\">DEFAULT</span> <span class=\"nu0\">12</span>;<br/> <span class=\"kw1\">DECLARE</span> denominator <span class=\"kw1\">INTEGER</span> <span class=\"kw1\">DEFAULT</span> <span class=\"nu0\">0</span>;<br/> <span class=\"kw1\">DECLARE</span> <span class=\"kw1\">RESULT</span> <span class=\"kw1\">INTEGER</span>;<br/> <span class=\"kw1\">DECLARE</span> overflow CONDITION <span class=\"kw1\">FOR</span> SQLSTATE <span class=\"st0\">'22003'</span>\u00a0;<br/> <span class=\"kw1\">DECLARE</span> CONTINUE HANDLER <span class=\"kw1\">FOR</span> overflow<br/>   RESIGNAL SQLSTATE <span class=\"st0\">'22375'</span><br/>   <span class=\"kw1\">SET</span> MESSAGE_TEXT <span class=\"sy0\">=</span> <span class=\"st0\">'Zero division'</span>;<br/> <span class=\"kw1\">IF</span> denominator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>  SIGNAL overflow;<br/> <span class=\"kw1\">ELSE</span><br/>  <span class=\"kw1\">SET</span> <span class=\"kw1\">RESULT</span> <span class=\"sy0\">=</span> numerator <span class=\"sy0\">/</span> denominator;<br/> <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>;<br/><span class=\"kw1\">END</span> @<br/>\u00a0</pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">exception MyException;<br/>exception MyDataException of int; (* can be any first-class type, not just int *)</pre>"}, {"lang": "Stata", "loc": 10, "block": "<pre class=\"text highlighted_source\">capture confirm file titanium.dta<br/>if _rc {<br/>\tif _rc==601 {<br/>\t\tdisplay \"the file does not exist\"<br/>\t}<br/>\telse {<br/>\t\t* all other cases<br/>\t\tdisplay \"there was an error with return code \" _rc<br/>\t}<br/>}</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">enum MyException\u00a0: ErrorType {<br/>  case TerribleException<br/>}</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Throw</span><br/><span class=\"kw1\">proc</span> e <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">error</span> <span class=\"st0\">\"error message\"</span> <span class=\"st0\">\"error message for stack trace\"</span> <span class=\"br0\">{</span>errorCode <span class=\"kw2\">list</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Catch and rethrow</span><br/><span class=\"kw1\">proc</span> f <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span>e <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> errMsg options<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> -options <span class=\"re0\">$options</span> <span class=\"re0\">$errMsg</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>f</pre>"}, {"lang": "TXR", "loc": 1, "block": "<pre>{monkey | gorilla | human} &lt;name&gt;</pre>"}, {"lang": "Ursa", "loc": 6, "block": "<pre class=\"text highlighted_source\">try<br/>\tinvalid \"this statement will fail\"<br/>catch syntaxerror<br/>\t# console.err is optional here<br/>\tout \"caught an exception\" endl console.err<br/>end try</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>thrower = ~&amp;?/'success'! -[epic fail]-!%<br/>\u00a0<br/>catcher = guard(thrower,---[someone failed]-)</pre>"}, {"lang": "V", "loc": 4, "block": "<pre class=\"text highlighted_source\">[myproc<br/>  ['new error' 1 2 3] throw<br/>  'should not come here' puts<br/>].</pre>"}, {"lang": "Visual Basic .NET", "loc": 4, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Class</span> MyException <br/>  <span class=\"kw1\">Inherits</span> Exception<br/>  <span class=\"co1\">'data with info about exception</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span></pre>"}, {"lang": "VBA", "loc": 8, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> foo1()<br/>    err.raise(vbObjectError + 1050)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> foo2()<br/>    <span class=\"kw4\">Error</span> vbObjectError + 1051<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">try{ throw(Exception.BadDay) }<br/>catch { println(__exception,\" was thrown\") }<br/>fallthrough {  println(\"No exception was thrown\") }<br/>println(\"OK\");</pre>"}]}