{"task": "Permutations", "blocks": [{"lang": "360 Assembly", "loc": 61, "block": "<pre class=\"text highlighted_source\">*        Permutations              26/10/2015<br/>PERMUTE  CSECT<br/>         USING  PERMUTE,R15        set base register<br/>         LA     R9,TMP-A           n=hbound(a)<br/>         SR     R10,R10            nn=0<br/>LOOP     LA     R10,1(R10)         nn=nn+1<br/>         LA     R11,PG             <a class=\"__cf_email__\" data-cfemail=\"413126287c013126\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R6,1               i=1<br/>LOOPI1   CR     R6,R9              do i=1 to n<br/>         BH     ELOOPI1<br/>         LA     R2,A-1(R6)         @a(i)<br/>         MVC    0(1,R11),0(R2)     output a(i)<br/>         LA     R11,1(R11)         pgi=pgi+1<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI1<br/>ELOOPI1  XPRNT  PG,80<br/>         LR     R6,R9              i=n<br/>LOOPUIM  BCTR   R6,0               i=i-1<br/>         LTR    R6,R6              until i=0<br/>         BE     ELOOPUIM<br/>         LA     R2,A-1(R6)         @a(i)<br/>         LA     R3,A(R6)           @a(i+1)<br/>         CLC    0(1,R2),0(R3)      or until a(i)&lt;a(i+1)<br/>         BNL    LOOPUIM<br/>ELOOPUIM LR     R7,R6              j=i<br/>         LA     R7,1(R7)           j=i+1<br/>         LR     R8,R9              k=n<br/>LOOPWJ   CR     R7,R8              do while j&lt;k<br/>         BNL    ELOOPWJ<br/>         LA     R2,A-1(R7)         <a class=\"__cf_email__\" data-cfemail=\"addf9f90edcc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)<br/>         LA     R3,A-1(R8)         <a class=\"__cf_email__\" data-cfemail=\"0d7f3e304d6c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(k)<br/>         MVC    TMP,0(R2)          tmp=a(j)<br/>         MVC    0(1,R2),0(R3)      a(j)=a(k)<br/>         MVC    0(1,R3),TMP        a(k)=tmp<br/>         LA     R7,1(R7)           j=j+1<br/>         BCTR   R8,0               k=k-1<br/>         B      LOOPWJ<br/>ELOOPWJ  LTR    R6,R6              if i&gt;0<br/>         BNP    ILE0<br/>         LR     R7,R6              j=i<br/>         LA     R7,1(R7)           j=i+1<br/>LOOPWA   LA     R2,A-1(R7)         @a(j)<br/>         LA     R3,A-1(R6)         @a(i)<br/>         CLC    0(1,R2),0(R3)      do while a(j)&lt;a(i)<br/>         BNL    AJGEAI<br/>         LA     R7,1(R7)           j=j+1<br/>         B      LOOPWA<br/>AJGEAI   LA     R2,A-1(R7)         <a class=\"__cf_email__\" data-cfemail=\"0e7c3c334e6f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)<br/>         LA     R3,A-1(R6)         <a class=\"__cf_email__\" data-cfemail=\"5a2869671a3b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(i)<br/>         MVC    TMP,0(R2)          tmp=a(j)<br/>         MVC    0(1,R2),0(R3)      a(j)=a(i)<br/>         MVC    0(1,R3),TMP        a(i)=tmp<br/>ILE0     LTR    R6,R6              until i&lt;&gt;0<br/>         BNE    LOOP<br/>         XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>A        DC     C'ABCD'            &lt;== input<br/>TMP      DS     C                  temp for swap<br/>PG       DC     CL80' '            buffer<br/>         YREGS<br/>         END    PERMUTE</pre>"}, {"lang": "ABAP", "loc": 100, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_flag <span class=\"kw4\">type</span> c<span class=\"sy0\">,</span><br/>      lv_number <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>      lt_numbers <span class=\"kw4\">type</span> <span class=\"kw9\"><span class=\"kw4\">table</span> of</span> i<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a> <span class=\"nu0\">1</span> <span class=\"kw4\">to</span> lt_numbers<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a> <span class=\"nu0\">2</span> <span class=\"kw4\">to</span> lt_numbers<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPAPPEND.htm\"><span class=\"kw3\">append</span></a> <span class=\"nu0\">3</span> <span class=\"kw4\">to</span> lt_numbers<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPPERFORM.htm\"><span class=\"kw3\">perform</span></a> permute <span class=\"kw4\">using</span> lt_numbers <span class=\"kw4\">changing</span> lv_flag<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_flag <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPEXIT.htm\"><span class=\"kw1\">exit</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>  <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">loop</span></a> at</span> lt_numbers <span class=\"kw4\">into</span> lv_number<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> lv_number <span class=\"kw4\">no-gap</span> <span class=\"kw4\">left-justified</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> sy<span class=\"sy0\">-</span>tabix <span class=\"sy1\">&lt;&gt;</span> <span class=\"st0\">'3'</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"st0\">', '</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">endloop</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPSKIP.htm\"><span class=\"kw3\">skip</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">\" Permutation function - this is used to permute:</span><br/><span class=\"co1\">\" Can be used for an unbounded size set.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> permute <span class=\"kw4\">using</span> iv_set <span class=\"kw4\">like</span> lt_numbers<br/>             <span class=\"kw4\">changing</span> ev_last <span class=\"kw4\">type</span> c<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_len     <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_first   <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_third   <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_count   <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_temp    <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_temp_2  <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_second  <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_changed <span class=\"kw4\">type</span> c<span class=\"sy0\">,</span><br/>        lv_perm    <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/>  <span class=\"kw8\">describe table</span> iv_set <span class=\"kw4\">lines</span> lv_len<span class=\"sy0\">.</span><br/>\u00a0<br/>  lv_perm <span class=\"sy1\">=</span> lv_len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  lv_changed <span class=\"sy1\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">.</span><br/>  <span class=\"co1\">\" Loop backwards through the table, attempting to find elements which</span><br/>  <span class=\"co1\">\" can be permuted. If we find one, break out of the table and set the</span><br/>  <span class=\"co1\">\" flag indicating a switch.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_perm <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPEXIT.htm\"><span class=\"kw1\">exit</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>    <span class=\"co1\">\" Read the elements.</span><br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_perm <span class=\"kw4\">into</span> lv_first<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPADD.htm\"><span class=\"kw3\">add</span></a> <span class=\"nu0\">1</span> <span class=\"kw4\">to</span> lv_perm<span class=\"sy0\">.</span><br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_perm <span class=\"kw4\">into</span> lv_second<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPSUBTRACT.htm\"><span class=\"kw3\">subtract</span></a> <span class=\"nu0\">1</span> <span class=\"kw4\">from</span> lv_perm<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_first <span class=\"sy1\">&lt;</span> lv_second<span class=\"sy0\">.</span><br/>      lv_changed <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPEXIT.htm\"><span class=\"kw1\">exit</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPSUBTRACT.htm\"><span class=\"kw3\">subtract</span></a> <span class=\"nu0\">1</span> <span class=\"kw4\">from</span> lv_perm<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"co1\">\" Last permutation.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_changed <span class=\"sy1\">&lt;&gt;</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>    ev_last <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPEXIT.htm\"><span class=\"kw1\">exit</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"co1\">\" Swap tail decresing to get a tail increasing.</span><br/>  lv_count <span class=\"sy1\">=</span> lv_perm <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a><span class=\"sy0\">.</span><br/>    lv_first <span class=\"sy1\">=</span> lv_len <span class=\"sy0\">+</span> lv_perm <span class=\"sy0\">-</span> lv_count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_count <span class=\"sy1\">&gt;=</span> lv_first<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPEXIT.htm\"><span class=\"kw1\">exit</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_count <span class=\"kw4\">into</span> lv_temp<span class=\"sy0\">.</span><br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_first <span class=\"kw4\">into</span> lv_temp_2<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPMODIFY.htm\"><span class=\"kw3\">modify</span></a> iv_set <span class=\"kw4\">index</span> lv_count <span class=\"kw4\">from</span> lv_temp_2<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPMODIFY.htm\"><span class=\"kw3\">modify</span></a> iv_set <span class=\"kw4\">index</span> lv_first <span class=\"kw4\">from</span> lv_temp<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPADD.htm\"><span class=\"kw3\">add</span></a> <span class=\"nu0\">1</span> <span class=\"kw4\">to</span> lv_count<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  lv_count <span class=\"sy1\">=</span> lv_len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">do</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> lv_count <span class=\"sy1\">&lt;=</span> lv_perm<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPEXIT.htm\"><span class=\"kw1\">exit</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_count <span class=\"kw4\">into</span> lv_first<span class=\"sy0\">.</span><br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_perm <span class=\"kw4\">into</span> lv_second<span class=\"sy0\">.</span><br/>    <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_len <span class=\"kw4\">into</span> lv_third<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span> lv_first <span class=\"sy1\">&lt;</span> lv_third <span class=\"br0\">)</span> <span class=\"kw4\">and</span> <span class=\"br0\">(</span> lv_first <span class=\"sy1\">&gt;</span> lv_second <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      lv_len <span class=\"sy1\">=</span> lv_count<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPSUBTRACT.htm\"><span class=\"kw3\">subtract</span></a> <span class=\"nu0\">1</span> <span class=\"kw4\">from</span> lv_count<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_perm <span class=\"kw4\">into</span> lv_temp<span class=\"sy0\">.</span><br/>  <span class=\"kw8\">read table</span> iv_set <span class=\"kw4\">index</span> lv_len <span class=\"kw4\">into</span> lv_temp_2<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMODIFY.htm\"><span class=\"kw3\">modify</span></a> iv_set <span class=\"kw4\">index</span> lv_perm <span class=\"kw4\">from</span> lv_temp_2<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMODIFY.htm\"><span class=\"kw3\">modify</span></a> iv_set <span class=\"kw4\">index</span> lv_len <span class=\"kw4\">from</span> lv_temp<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   N: positive;<br/><span class=\"kw3\">package</span> Generic_Perm <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Element <span class=\"kw1\">is</span> Positive <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">N</span>;<br/>   <span class=\"kw3\">type</span> Permutation <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Element<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Element;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Set_To_First<span class=\"br0\">(</span>P: <span class=\"kw3\">out</span> Permutation; Is_Last: <span class=\"kw3\">out</span> Boolean<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> Go_To_Next<span class=\"br0\">(</span>P: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Permutation; Is_Last: <span class=\"kw3\">out</span> Boolean<span class=\"br0\">)</span>; <br/><span class=\"kw1\">end</span> Generic_Perm;</pre>"}, {"lang": "ALGOL 68", "loc": 33, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># -*- coding: utf-8 -*- #</span><br/>\u00a0<br/>COMMENT REQUIRED <span class=\"kw2\">BY</span> <span class=\"st0\">\"prelude_permutations.a68\"</span><br/>  <span class=\"kw4\">MODE</span> PERMDATA <span class=\"sy1\">=</span> <span class=\"sy1\">~;</span><br/>PROVIDES<span class=\"sy1\">:</span><br/><span class=\"coMULTI\"># PERMDATA*=~* #</span><br/><span class=\"coMULTI\"># perm*=~ list* #</span><br/><span class=\"kw2\">END</span> COMMENT<br/>\u00a0<br/><span class=\"kw4\">MODE</span> PERMDATALIST <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>PERMDATA<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> PERMDATALISTYIELD <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>PERMDATALIST<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Generate permutations of the input data list of data list #</span><br/><span class=\"kw4\">PROC</span> perm gen permutations <span class=\"sy1\">=</span> <span class=\"br0\">(</span>PERMDATALIST data list<span class=\"sy1\">,</span> PERMDATALISTYIELD yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/><span class=\"coMULTI\"># Warning: this routine does not correctly handle duplicate elements #</span><br/>  <span class=\"kw2\">IF</span> <span class=\"kw8\">LWB</span> data list <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> data list <span class=\"kw2\">THEN</span><br/>    yield<span class=\"br0\">(</span>data list<span class=\"br0\">)</span><br/>  <span class=\"kw2\">ELSE</span><br/>    <span class=\"kw2\">FOR</span> elem <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> data list <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> data list <span class=\"kw2\">DO</span><br/>      PERMDATA first <span class=\"sy1\">=</span> data list<span class=\"br0\">[</span>elem<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      data list<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> data list<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span>elem<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> data list<span class=\"br0\">[</span><span class=\"sy1\">:</span>elem<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      data list<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> data list<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> first<span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># FOR PERMDATALIST next data list IN #</span> perm gen permutations<span class=\"br0\">(</span>data list<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> data list<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span><span class=\"br0\">]</span> <span class=\"coMULTI\"># ) DO #</span><span class=\"sy1\">,</span><br/>    <span class=\"coMULTI\">##</span>   <span class=\"br0\">(</span>PERMDATALIST next<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        yield<span class=\"br0\">(</span>data list<span class=\"br0\">)</span><br/>    <span class=\"coMULTI\"># OD #</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      data list<span class=\"br0\">[</span><span class=\"sy1\">:</span>elem<span class=\"sy1\">-</span>1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> data list<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> data list<span class=\"sy1\">+</span>1<span class=\"sy1\">:</span>elem<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      data list<span class=\"br0\">[</span>elem<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> first<br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "AppleScript", "loc": 92, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- PERMUTATIONS --------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- permutations\u00a0:: [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> permutations<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> firstElement<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> tailElements<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>ys<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> ys<span class=\"br0\">}</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            concatMap<span class=\"br0\">(</span>tailElements, permutations<span class=\"br0\">(</span>|<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        concatMap<span class=\"br0\">(</span>firstElement, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> permutations<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    permutations<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"aardvarks\"</span>, <span class=\"st0\">\"eat\"</span>, <span class=\"st0\">\"ants\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">(</span>lst <span class=\"sy0\">&amp;</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- delete\u00a0:: a -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> |<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>h, t<span class=\"br0\">}</span> <span class=\"kw3\">to</span> uncons<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> x <span class=\"sy0\">=</span> h <span class=\"kw3\">then</span><br/>            t<br/>        <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span>h<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> |<span class=\"kw1\">delete</span>|<span class=\"br0\">(</span>x, t<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |<span class=\"kw1\">delete</span>|<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- uncons\u00a0:: [a] -&gt; Maybe (a, [a])</span><br/><span class=\"kw3\">on</span> uncons<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs, rest <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> uncons</pre>"}, {"lang": "AutoHotkey", "loc": 49, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/StringCaseSense.htm\"><span class=\"kw3\">StringCaseSense</span></a> On<br/>\u00a0<br/>o <span class=\"sy0\">:=</span> str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/><span class=\"br0\">{</span><br/>   str <span class=\"sy0\">:=</span> perm_next<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>   <span class=\"kw1\">If</span>\u00a0!str<br/>   <span class=\"br0\">{</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> o<br/>      <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>   <span class=\"br0\">}</span><br/>   o<span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <span class=\"sy0\">.</span> str<br/><span class=\"br0\">}</span><br/>\u00a0<br/>perm_Next<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   p <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> sLen <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% sLen<br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>      t <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> sLen<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      n <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> sLen<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span> t <span class=\"sy0\">&lt;</span> n <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>         p <span class=\"sy0\">:=</span> sLen<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> pC <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">If</span>\u00a0!p<br/>      <span class=\"kw1\">return</span> false<br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>   <span class=\"br0\">{</span><br/>      t <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> sLen<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span> t <span class=\"sy0\">&gt;</span> pC <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>         n <span class=\"sy0\">:=</span> sLen<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> nC <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> nC <span class=\"sy0\">.</span> Reverse<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> pC <span class=\"sy0\">.</span>  <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> s<br/>      o <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> o<br/>   <span class=\"kw1\">return</span> o<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>setlocal enabledelayedexpansion  <br/>set arr=ABCD<br/>set /a n=4<br/>:: echo\u00a0!arr!<br/>call\u00a0:permu \u00a0%n% arr<br/>goto:eof<br/>\u00a0<br/>:permu num  &amp;arr<br/>setlocal<br/>if\u00a0%1 equ 1 call echo(!%2! &amp; exit /b<br/>set /a \"num=%1-1,n2=num-1\"<br/>set arr=!%2!<br/>for /L\u00a0%%c in (0,1,!n2!) do (<br/>   call:permu\u00a0!num! arr <br/>   set /a  n1=\"num&amp;1\"<br/>   if\u00a0!n1! equ 0 (call:swapit\u00a0!num! 0 arr) else (call:swapit\u00a0!num!\u00a0%%c arr)<br/>   )<br/>   call:permu\u00a0!num! arr<br/>endlocal &amp; set\u00a0%2=%arr%<br/>exit /b<br/>\u00a0<br/>:swapit  from  to  &amp;arr<br/>setlocal<br/>set arr=!%3!<br/>set temp1=!arr:~%~1,1!<br/>set temp2=!arr:~%~2,1!<br/>set arr=!arr:%temp1%<a class=\"__cf_email__\" data-cfemail=\"e7daa7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>!<br/>set arr=!arr:%temp2%=%temp1%!<br/>set arr=!arr:@=%temp2%!<br/>:: echo\u00a0%1\u00a0%2\u00a0!%~3!\u00a0!arr!<br/>endlocal &amp; set\u00a0%3=%arr%<br/>exit /b<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">      DIM List%(3)<br/>      List%() = 1, 2, 3, 4<br/>      FOR perm% = 1 TO 24<br/>        FOR i% = 0 TO DIM(List%(),1)<br/>          PRINT List%(i%);<br/>        NEXT<br/>        PRINT<br/>        PROC_NextPermutation(List%())<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF PROC_NextPermutation(A%())<br/>      LOCAL first, last, elementcount, pos<br/>      elementcount = DIM(A%(),1)<br/>      IF elementcount &lt; 1 THEN ENDPROC<br/>      pos = elementcount-1<br/>      WHILE A%(pos) &gt;= A%(pos+1)<br/>        pos -= 1<br/>        IF pos &lt; 0 THEN<br/>          PROC_Permutation_Reverse(A%(), 0, elementcount)<br/>          ENDPROC<br/>        ENDIF<br/>      ENDWHILE<br/>      last = elementcount<br/>      WHILE A%(last) &lt;= A%(pos)<br/>        last -= 1<br/>      ENDWHILE<br/>      SWAP A%(pos), A%(last)<br/>      PROC_Permutation_Reverse(A%(), pos+1, elementcount)<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROC_Permutation_Reverse(A%(), first, last)<br/>      WHILE first &lt; last<br/>        SWAP A%(first), A%(last)<br/>        first += 1<br/>        last -= 1<br/>      ENDWHILE<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 13, "block": "<pre class=\"text highlighted_source\">  ( perm<br/>  =   prefix List result original A Z<br/>    .  \u00a0!arg:(?.)<br/>      |  \u00a0!arg:(?prefix.?List:?original)<br/>        &amp;\u00a0:?result<br/>        &amp;   whl<br/>          ' (\u00a0!List:%?A\u00a0?Z<br/>            &amp;\u00a0!result perm$(!prefix\u00a0!A.!Z):?result<br/>            &amp;\u00a0!Z\u00a0!A:~!original:?List<br/>            )<br/>        &amp;\u00a0!result<br/>  )<br/>&amp; out$(perm$(.a 2 \"]\" u+z);</pre>"}, {"lang": "C", "loc": 56, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">//here we check arguments</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter an argument. Example 1234 or dcba:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"co1\">//it calculates an array's length</span><br/>        <span class=\"kw4\">int</span> x<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//buble sort the array</span><br/>\t<span class=\"kw4\">int</span> f<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> m<span class=\"sy0\">;</span><br/>\t <span class=\"kw1\">for</span><span class=\"br0\">(</span>f<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> f <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">;</span> f<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    \t <span class=\"kw1\">for</span><span class=\"br0\">(</span>v <span class=\"sy0\">=</span> x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> v <span class=\"sy0\">&gt;</span> f<span class=\"sy0\">;</span> v<span class=\"sy0\">--</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     \t <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tm<span class=\"sy0\">=</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\targv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\targv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">=</span>m<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//it calculates a factorial to stop the algorithm</span><br/>    <span class=\"kw4\">char</span> a<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> fact<span class=\"sy0\">=</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">while</span> <span class=\"br0\">(</span>k<span class=\"sy0\">!=</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                   a<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>               \t   k<span class=\"sy0\">++;</span><br/>\t\t  fact <span class=\"sy0\">=</span> k<span class=\"sy0\">*</span>fact<span class=\"sy0\">;</span><br/>                   <span class=\"br0\">}</span><br/>                   a<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//Main part: here we permutate</span><br/>           <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>           <span class=\"kw4\">int</span> y<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>           <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">while</span> <span class=\"br0\">(</span>y <span class=\"sy0\">!=</span> fact<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          i<span class=\"sy0\">=</span>x<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">while</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> a<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> i<span class=\"sy0\">--;</span><br/>          j<span class=\"sy0\">=</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">while</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span> j<span class=\"sy0\">--;</span><br/>      c<span class=\"sy0\">=</span>a<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      a<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>c<span class=\"sy0\">;</span><br/>i<span class=\"sy0\">++;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  c <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>y<span class=\"sy0\">++;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 40, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span>vec<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">typename</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> i <span class=\"sy1\">=</span> vec.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> vec.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>i<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> vec.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">//Permutations for strings</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> example<span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>example.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, example.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> example <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">next_permutation</span><span class=\"br0\">(</span>example.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, example.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// And for vectors</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> another<span class=\"sy4\">;</span><br/>    another.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    another.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">4321</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    another.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    another.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>another.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, another.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span>another<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">next_permutation</span><span class=\"br0\">(</span>another.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, another.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> Permutations<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>values<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>values<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">return</span> values<span class=\"sy0\">.</span><span class=\"me1\">SelectMany</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> Permutations<span class=\"br0\">(</span>values<span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>x<span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">!=</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span>v, p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">Prepend</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>require 'clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>combinatorics<span class=\"br0\">)</span><br/>nil<br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>combinatorics<span class=\"sy0\">/</span>permutations <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 18, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Returns a copy of an array with the element at a specific position</span><br/><span class=\"co1\"># removed from it.</span><br/>arrayExcept = <span class=\"br0\">(</span>arr<span class=\"sy0\">,</span> idx<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\tres = arr<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"br0\">]</span><br/>\tres.<span class=\"me1\">splice</span> idx<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\tres<br/>\u00a0<br/><span class=\"co1\"># The actual function which returns the permutations of an array-like</span><br/><span class=\"co1\"># object (or a proper array).</span><br/>permute = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\tarr = Array<span class=\"sy0\">::</span>slice.<span class=\"me1\">call</span> arr<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> arr.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><br/>\u00a0<br/>\tpermutations = <span class=\"br0\">(</span><span class=\"kw1\">for</span> value<span class=\"sy0\">,</span>idx <span class=\"kw1\">in</span> arr<br/>\t\t<span class=\"br0\">[</span>value<span class=\"br0\">]</span>.<span class=\"me1\">concat</span> perm <span class=\"kw1\">for</span> perm <span class=\"kw1\">in</span> permute arrayExcept arr<span class=\"sy0\">,</span> idx<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\"># Flatten the array before returning it.</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span> permutations...</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> permute <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"kw1\">list</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">mapcan</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>permute <span class=\"br0\">(</span><span class=\"kw1\">remove</span> x <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; else</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>permute '<span class=\"br0\">(</span>A B Z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\">T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> permutations<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> perms<span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"sy0\">,</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> prefix<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> s<span class=\"br0\">)</span><br/>               perms<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">i</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> s<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> prefix <span class=\"sy0\">~</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            result <span class=\"sy0\">~=</span> prefix<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    perms<span class=\"br0\">(</span>items<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">version</span> <span class=\"br0\">(</span>permutations1_main<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">permutations</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 58, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> TestPermutations<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TItem <span class=\"sy3\">=</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span>                <span class=\"co1\">// declare ordinal type for array item</span><br/>  TArray <span class=\"sy3\">=</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> TItem<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  Source<span class=\"sy1\">:</span> TArray <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Permutation<span class=\"br0\">(</span>K<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> <span class=\"kw1\">var</span> A<span class=\"sy1\">:</span> TArray<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  I<span class=\"sy1\">,</span> J<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  Tmp<span class=\"sy1\">:</span> TItem<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> I<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    J<span class=\"sy1\">:</span><span class=\"sy3\">=</span> K <span class=\"kw1\">mod</span> I<span class=\"sy1\">;</span><br/>    Tmp<span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>J<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    A<span class=\"br0\">[</span>J<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>I <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    A<span class=\"br0\">[</span>I <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> Tmp<span class=\"sy1\">;</span><br/>    K<span class=\"sy1\">:</span><span class=\"sy3\">=</span> K <span class=\"kw1\">div</span> I<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  A<span class=\"sy1\">:</span> TArray<span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">,</span> K<span class=\"sy1\">,</span> Count<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  S<span class=\"sy1\">,</span> S1<span class=\"sy1\">,</span> S2<span class=\"sy1\">:</span> <span class=\"kw4\">ShortString</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Count<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> I &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    Count<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Count <span class=\"sy3\">*</span> I<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Dec</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  S<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> K<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> Count <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    A<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Source<span class=\"sy1\">;</span><br/>    Permutation<span class=\"br0\">(</span>K<span class=\"sy1\">,</span> A<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    S1<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> I<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Str</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> S2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      S1<span class=\"sy1\">:</span><span class=\"sy3\">=</span> S1 <span class=\"sy3\">+</span> S2<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    S<span class=\"sy1\">:</span><span class=\"sy3\">=</span> S <span class=\"sy3\">+</span> <span class=\"st0\">'  '</span> <span class=\"sy3\">+</span> S1<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> &gt; <span class=\"nu0\">40</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      S<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Eiffel", "loc": 50, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\ttest <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"sy0\">&gt;&gt;</span><br/>\t\t\tpermute <span class=\"br0\">(</span>test, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\ttest<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\tpermute <span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span>; k<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- All permutations of 'a'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tcount_positive<span class=\"sy0\">:</span> a.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tk_valid_index<span class=\"sy0\">:</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tt<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> k <span class=\"sy0\">=</span> a.<span class=\"me1\">count</span> <span class=\"kw2\">then</span><br/>\t\t\t\tacross<br/>\t\t\t\t\ta <span class=\"kw2\">as</span> ar<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>ar.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\tacross<br/>\t\t\t\t\tk <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> a.<span class=\"me1\">count</span> <span class=\"kw2\">as</span> c<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tt <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t\t\tpermute <span class=\"br0\">(</span>a, k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\tt <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def permute([]), do: [[]]<br/>  def permute(list) do<br/>    for x &lt;- list, y &lt;- permute(list -- [x]), do: [x|y]<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect RC.permute([1, 2, 3])</pre>"}, {"lang": "Erlang", "loc": 5, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>permute<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>permute<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">permute</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">permute</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|Y<span class=\"br0\">]</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span><span class=\"sy3\">&lt;-</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy3\">&lt;-</span><span class=\"re2\">permute</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy3\">--</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 48, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> reverse<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> first<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> last<span class=\"br0\">)</span><br/>    <span class=\"kw2\">object</span> x<br/>    <span class=\"kw1\">while</span> first &lt; last <span class=\"kw1\">do</span><br/>        x <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>first<span class=\"br0\">]</span><br/>        s<span class=\"br0\">[</span>first<span class=\"br0\">]</span> <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>last<span class=\"br0\">]</span><br/>        s<span class=\"br0\">[</span>last<span class=\"br0\">]</span> <span class=\"sy1\">=</span> x<br/>        first <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>        last <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> nextPermutation<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> pos<span class=\"sy2\">,</span> last<br/>    <span class=\"kw2\">object</span> x<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    pos <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">compare</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy2\">,</span> s<span class=\"br0\">[</span>pos<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> &gt;<span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        pos <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> pos &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    last <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">compare</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>last<span class=\"br0\">]</span><span class=\"sy2\">,</span> s<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"br0\">)</span> &lt;<span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        last <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    x <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><br/>    s<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy1\">=</span> s<span class=\"br0\">[</span>last<span class=\"br0\">]</span><br/>    s<span class=\"br0\">[</span>last<span class=\"br0\">]</span> <span class=\"sy1\">=</span> x<br/>\u00a0<br/>    <span class=\"kw1\">return</span> reverse<span class=\"br0\">(</span>s<span class=\"sy2\">,</span> pos<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">object</span> s<br/>s <span class=\"sy1\">=</span> <span class=\"st0\">\"abcd\"</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> s <span class=\"sy1\">&amp;</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    s <span class=\"sy1\">=</span> nextPermutation<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> s <span class=\"sy1\">&amp;</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "F#", "loc": 22, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> insert left x right <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">match</span> right <span class=\"kw1\">with</span><br/>    | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield</span> left @ <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>    | head\u00a0:: tail <span class=\"sy0\">-&gt;</span> <br/>        <span class=\"kw1\">yield</span> left @ <span class=\"br0\">[</span>x<span class=\"br0\">]</span> @ right<br/>        <span class=\"kw1\">yield!</span> insert <span class=\"br0\">(</span>left @ <span class=\"br0\">[</span>head<span class=\"br0\">]</span><span class=\"br0\">)</span> x tail<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> perms permute <span class=\"sy0\">=</span><br/>    <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">match</span> permute <span class=\"kw1\">with</span><br/>        | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        | head\u00a0:: tail <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield!</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span>insert <span class=\"br0\">[</span><span class=\"br0\">]</span> head<span class=\"br0\">)</span> <span class=\"br0\">(</span>perms tail<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span> <br/>    perms <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span> argv<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> printf <span class=\"st0\">\"%A<span class=\"es0\">\\n</span>\"</span> x<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 33, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> permutations<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">value_min</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">value_max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">position_min</span> <span class=\"sy0\">=</span> value_min<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">position_max</span> <span class=\"sy0\">=</span> value_max<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span>position_min <span class=\"sy0\">:</span> position_max<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">permutation</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> generate <span class=\"br0\">(</span>position_min<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> generate <span class=\"br0\">(</span><span class=\"kw1\">position</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">position</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">value</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">position</span> &gt; position_max<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span> permutation<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">do</span> value <span class=\"sy0\">=</span> value_min, value_max<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">any</span> <span class=\"br0\">(</span>permutation <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"kw1\">position</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          permutation <span class=\"br0\">(</span><span class=\"kw1\">position</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> value<br/>          <span class=\"kw1\">call</span> generate <span class=\"br0\">(</span><span class=\"kw1\">position</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> generate<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> permutations</pre>"}, {"lang": "Fortran", "loc": 33, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> permutations<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">value_min</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">value_max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">position_min</span> <span class=\"sy0\">=</span> value_min<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">position_max</span> <span class=\"sy0\">=</span> value_max<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span>position_min <span class=\"sy0\">:</span> position_max<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">permutation</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> generate <span class=\"br0\">(</span>position_min<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> generate <span class=\"br0\">(</span><span class=\"kw1\">position</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">position</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">value</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">position</span> &gt; position_max<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span> permutation<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">do</span> value <span class=\"sy0\">=</span> value_min, value_max<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">any</span> <span class=\"br0\">(</span>permutation <span class=\"br0\">(</span><span class=\"sy0\">:</span> <span class=\"kw1\">position</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          permutation <span class=\"br0\">(</span><span class=\"kw1\">position</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> value<br/>          <span class=\"kw1\">call</span> generate <span class=\"br0\">(</span><span class=\"kw1\">position</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> generate<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> permutations</pre>"}, {"lang": "FreeBASIC", "loc": 52, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 07-04-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' Heap's algorithm non-recursive</span><br/><span class=\"kw1\">Sub</span> perms<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong i, j, count = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><span class=\"br0\">)</span>, c<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>        a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = j +<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" \"</span>;<br/>\u00a0<br/>    i = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">While</span> i &lt; n<br/>        <span class=\"kw1\">If</span> c<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt; i <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Swap</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Else</span><br/>                <span class=\"kw1\">Swap</span> a<span class=\"br0\">(</span>c<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>                <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">Next</span><br/>            count += <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> count = <span class=\"nu0\">12</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Print</span> <br/>                count = <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">Else</span> <br/>                <span class=\"kw1\">Print</span> <span class=\"st0\">\" \"</span>;<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            c<span class=\"br0\">(</span>i<span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>            i = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">Else</span><br/>            c<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>            i += <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>perms<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "GAP", "loc": 6, "block": "<pre class=\"text highlighted_source\">gap&gt;List(SymmetricGroup(4), p -&gt; Permuted([1 .. 4], p));<br/>perms(4);<br/>[ [ 1, 2, 3, 4 ], [ 4, 2, 3, 1 ], [ 2, 4, 3, 1 ], [ 3, 2, 4, 1 ], [ 1, 4, 3, 2 ], [ 4, 1, 3, 2 ], [ 2, 1, 3, 4 ],<br/>  [ 3, 1, 4, 2 ], [ 1, 3, 4, 2 ], [ 4, 3, 1, 2 ], [ 2, 3, 1, 4 ], [ 3, 4, 1, 2 ], [ 1, 2, 4, 3 ], [ 4, 2, 1, 3 ],<br/>  [ 2, 4, 1, 3 ], [ 3, 2, 1, 4 ], [ 1, 4, 2, 3 ], [ 4, 1, 2, 3 ], [ 2, 1, 4, 3 ], [ 3, 1, 2, 4 ], [ 1, 3, 2, 4 ],<br/>  [ 4, 3, 2, 1 ], [ 2, 3, 4, 1 ], [ 3, 4, 2, 1 ] ]</pre>"}, {"lang": "Glee", "loc": 7, "block": "<pre class=\"text highlighted_source\">$$ n\u00a0!! k    dyadic: Permutations for k out of n elements (in this case k = n)<br/>$$ #s        monadic: number of elements in s<br/>$$ ,,        monadic: expose with space-lf separators<br/>$$ s[n]      index n of s<br/>\u00a0<br/>'Hello' 123 7.9 '\u2022'=&gt;s;<br/>s[s#\u00a0!! (s#)],,</pre>"}, {"lang": "Go", "loc": 52, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    demoPerm<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> demoPerm<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// create a set to permute.  for demo, use the integers 1..n.</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>        s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// permute them, calling a function for each permutation.</span><br/>    <span class=\"co1\">// for demo, function just prints the permutation.</span><br/>    permute<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>p <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy1\">})</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// permute function.  takes a set to permute and a function</span><br/><span class=\"co1\">// to call for each generated permutation.</span><br/><span class=\"kw4\">func</span> permute<span class=\"sy1\">(</span>s <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> emit <span class=\"kw4\">func</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        emit<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// Steinhaus, implemented with a recursive closure.</span><br/>    <span class=\"co1\">// arg is number of positions left to permute.</span><br/>    <span class=\"co1\">// pass in len(s) to start generation.</span><br/>    <span class=\"co1\">// on each call, weave element at pp through the elements 0..np-2,</span><br/>    <span class=\"co1\">// then restore array to the way it was.</span><br/>    <span class=\"kw1\">var</span> rc <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    rc <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>np <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> np <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            emit<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        np1 <span class=\"sy2\">:=</span> np <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        pp <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> np1<br/>        <span class=\"co1\">// weave</span><br/>        rc<span class=\"sy1\">(</span>np1<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> pp<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            rc<span class=\"sy1\">(</span>np1<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// restore</span><br/>        w <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span>pp<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>        s<span class=\"sy1\">[</span>pp<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> w<br/>    <span class=\"sy1\">}</span><br/>    rc<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> makePermutations <span class=\"sy0\">=</span> <span class=\"br0\">{</span> l <span class=\"sy0\">-&gt;</span> l.<span class=\"me1\">permutations</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>permutations<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>permutations <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 8, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> p <span class=\"sy0\">:=</span> permute<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"sy0\">||</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> permute<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>A <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> A<br/>    <span class=\"kw1\">suspend</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;-&gt;</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">|||</span> permute<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">perms=: A.&amp;i.~\u00a0!</pre>"}, {"lang": "Java", "loc": 83, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PermutationGenerator <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> firstNum<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> firstReady <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> PermutationGenerator<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> firstNum_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The n must be min. 1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        firstNum <span class=\"sy0\">=</span> firstNum_<span class=\"sy0\">;</span><br/>        array <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        reset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> array.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> firstNum<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        firstReady <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasMore<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span> end <span class=\"sy0\">=</span> firstReady<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> array.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            end <span class=\"sy0\">=</span> end <span class=\"sy0\">&amp;&amp;</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> array<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>end<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> getNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>firstReady<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            firstReady <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> array<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> temp<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> array.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> array.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Find largest index j with a[j] &lt; a[j+1]</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span>array<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> array<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Find index k such that a[k] is smallest integer</span><br/>        <span class=\"co1\">// greater than a[j] to the right of a[j]</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span>array<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> array<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span> k<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Interchange a[j] and a[k]</span><br/>\u00a0<br/>        temp <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        array<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        array<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Put tail end of permutation after jth position in increasing order</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> array.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            temp <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            array<span class=\"br0\">[</span>s<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> array<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            array<span class=\"br0\">[</span>r<span class=\"sy0\">--</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> array<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"co1\">// getNext()</span><br/>\u00a0<br/>    <span class=\"co1\">// For testing of the PermutationGenerator class</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        PermutationGenerator pg <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> PermutationGenerator<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pg.<span class=\"me1\">hasMore</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> temp <span class=\"sy0\">=</span>  pg.<span class=\"me1\">getNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> temp.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span> <span class=\"co1\">// class</span></pre>"}, {"lang": "JavaScript", "loc": 23, "block": "<pre class=\"javascript highlighted_source\">&lt;html&gt;&lt;head&gt;&lt;title&gt;Permutations&lt;/title&gt;&lt;/head&gt;<br/>&lt;body&gt;&lt;pre id=\"result\"&gt;&lt;/pre&gt;<br/><span class=\"sy0\">&lt;</span>script type<span class=\"sy0\">=</span><span class=\"st0\">\"text/javascript\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'result'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> perm<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> ret<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>list.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> row <span class=\"sy0\">=</span> document.<span class=\"me1\">createTextNode</span><span class=\"br0\">(</span>ret.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        d.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> list.<span class=\"me1\">splice</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ret.<span class=\"me1\">push</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        perm<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> ret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ret.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        list.<span class=\"me1\">splice</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>perm<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span>&lt;/body&gt;&lt;/html&gt;</pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\">def permutations:<br/>  if length == 0 then []<br/>  else<br/>    range(0;length) as $i<br/>    | [.[$i]] + (del(.[$i])|permutations)<br/>  end\u00a0;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Combinatorics<br/>\u00a0<br/>term = \"RCode\"<br/>i = 0<br/>pcnt = factorial(length(term))<br/>print(\"All the permutations of \", term, \" (\", pcnt, \"):\\n    \")<br/>for p in permutations(split(term, \"\"))<br/>    print(join(p), \" \")<br/>    i += 1<br/>    i\u00a0%= 12<br/>    i\u00a0!= 0 || print(\"\\n    \")<br/>end<br/>println()<br/>\u00a0</pre>"}, {"lang": "K", "loc": 12, "block": "<pre class=\"text highlighted_source\">   perm:{:[1&lt;x;,/(&gt;:'(x,x)#1,x#0)[;0,'1+_f x-1];,!x]}<br/>   perm 2<br/>(0 1<br/> 1 0)<br/>\u00a0<br/>   `0:{1_,/\" \",/:x}'<a class=\"__cf_email__\" data-cfemail=\"e89aa8988d9a85\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@#r:(\"some\";\"random\";\"text\")<br/>some random text<br/>some text random<br/>random some text<br/>random text some<br/>text some random<br/>text random some</pre>"}, {"lang": "Kotlin", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> permute<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>input.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> listOf<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> toInsert <span class=\"sy0\">=</span> input<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>perm in permute<span class=\"br0\">(</span>input.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">perm</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newPerm <span class=\"sy0\">=</span> perm.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            newPerm.<span class=\"me1\">add</span><span class=\"br0\">(</span>i, toInsert<span class=\"br0\">)</span><br/>            perms.<span class=\"me1\">add</span><span class=\"br0\">(</span>newPerm<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> perms<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span>, <span class=\"st0\">'c'</span>, <span class=\"st0\">'d'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> perms <span class=\"sy0\">=</span> permute<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"There are ${perms.size} permutations of $input, namely:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>perm in perms<span class=\"br0\">)</span> println<span class=\"br0\">(</span>perm<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> permute<br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>'<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lc <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- x <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>- y <span class=\"br0\">(</span>permute <span class=\"br0\">(</span>-- <span class=\"kw1\">l</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 30, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>n<span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/><span class=\"kw1\">dim</span> a<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">'+1 needed due to bug in LB that checks loop condition</span><br/>    <span class=\"co1\">'   until (i=0) or (a(i)&lt;a(i+1))</span><br/>    <span class=\"co1\">'before executing i=i-1 in loop body.</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">:</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>i<span class=\"sy0\">:</span> <span class=\"kw1\">next</span><br/><span class=\"kw1\">do</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">:</span> <span class=\"kw1\">print</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<span class=\"sy0\">:</span> <span class=\"kw1\">next</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span><br/>  i<span class=\"sy0\">=</span>n<br/>  <span class=\"kw1\">do</span><br/>    i<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  k<span class=\"sy0\">=</span>n<br/>  <span class=\"kw1\">while</span> j<span class=\"sy0\">&lt;</span>k<br/>    <span class=\"co1\">'swap a(j),a(k)</span><br/>    tmp<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">:</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>a<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">:</span> a<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">=</span>tmp<br/>    j<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    k<span class=\"sy0\">=</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">wend</span><br/>  <span class=\"kw1\">if</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      j<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">wend</span><br/>    <span class=\"co1\">'swap a(i),a(j)</span><br/>    tmp<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">:</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">:</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>tmp<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Logtalk", "loc": 22, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(list).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(permutation<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>\u00a0<br/>    permutation(<span class=\"re0\">List</span>, <span class=\"re0\">Permutation</span>) <span class=\"sy2\">:-</span><br/>        same_length(<span class=\"re0\">List</span>, <span class=\"re0\">Permutation</span>),<br/>        permutation2(<span class=\"re0\">List</span>, <span class=\"re0\">Permutation</span>).<br/>\u00a0<br/>    permutation2([], []).<br/>    permutation2(<span class=\"re0\">List</span>, [<span class=\"re0\">Head</span>| <span class=\"re0\">Tail</span>]) <span class=\"sy2\">:-</span><br/>        select(<span class=\"re0\">Head</span>, <span class=\"re0\">List</span>, <span class=\"re0\">Remaining</span>),<br/>        permutation2(<span class=\"re0\">Remaining</span>, <span class=\"re0\">Tail</span>).<br/>\u00a0<br/>    same_length([], []).<br/>    same_length([<span class=\"re0\">_</span>| <span class=\"re0\">Tail1</span>], [<span class=\"re0\">_</span>| <span class=\"re0\">Tail2</span>]) <span class=\"sy2\">:-</span><br/>        same_length(<span class=\"re0\">Tail1</span>, <span class=\"re0\">Tail2</span>).<br/>\u00a0<br/>    select(<span class=\"re0\">Head</span>, [<span class=\"re0\">Head</span>| <span class=\"re0\">Tail</span>], <span class=\"re0\">Tail</span>).<br/>    select(<span class=\"re0\">Head</span>, [<span class=\"re0\">Head2</span>| <span class=\"re0\">Tail</span>], [<span class=\"re0\">Head2</span>| <span class=\"re0\">Tail2</span>]) <span class=\"sy2\">:-</span><br/>        select(<span class=\"re0\">Head</span>, <span class=\"re0\">Tail</span>, <span class=\"re0\">Tail2</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> permutation<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> cb<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\tcb<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>\t\t\ta<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\tpermutation<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cb<span class=\"br0\">)</span><br/>\t\t\ta<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--Usage</span><br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> callback<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">'{'</span><span class=\"sy0\">..</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">..</span><span class=\"st0\">'}'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>permutation<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> callback<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; combinat:-permute( 3 );<br/>   [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]<br/>\u00a0<br/>&gt; combinat:-permute( [a,b,c] );<br/>   [[a, b, c], [a, c, b], [b, a, c], [b, c, a], [c, a, b], [c, b, a]]<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Permutations[{1,2,3,4}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/perms.html\"><span class=\"kw2\">perms</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 24, "block": "<pre class=\"text highlighted_source\">next_permutation(v)\u00a0:= block([n, i, j, k, t],<br/>   n: length(v), i: 0,<br/>   for k: n - 1 thru 1 step -1 do (if v[k] &lt; v[k + 1] then (i: k, return())),<br/>   j: i + 1, k: n,<br/>   while j &lt; k do (t: v[j], v[j]: v[k], v[k]: t, j: j + 1, k: k - 1),<br/>   if i = 0 then return(false),<br/>   j: i + 1,<br/>   while v[j] &lt; v[i] do j: j + 1,<br/>   t: v[j], v[j]: v[i], v[i]: t,<br/>   true<br/>)$<br/>\u00a0<br/>print_perm(n)\u00a0:= block([v: makelist(i, i, 1, n)],<br/>   disp(v),<br/>   while next_permutation(v) do disp(v)<br/>)$<br/>\u00a0<br/>print_perm(3);<br/>/* [1, 2, 3]<br/>   [1, 3, 2]<br/>   [2, 1, 3]<br/>   [2, 3, 1]<br/>   [3, 1, 2]<br/>   [3, 2, 1] */</pre>"}, {"lang": "Microsoft Small Basic", "loc": 45, "block": "<pre class=\"text highlighted_source\">'Permutations - sb<br/>  n=4<br/>  printem = \"True\"<br/>  For i = 1 To n<br/>    p[i] = i<br/>  EndFor<br/>  count = 0<br/>  Last = \"False\"<br/>  While Last = \"False\"<br/>    If printem Then<br/>      For t = 1 To n<br/>        TextWindow.Write(p[t])<br/>      EndFor<br/>      TextWindow.WriteLine(\"\")<br/>    EndIf<br/>    count = count + 1<br/>    Last = \"True\"<br/>    i = n - 1<br/>    While i &gt; 0<br/>      If p[i] &lt; p[i + 1] Then<br/>        Last = \"False\"<br/>        Goto exitwhile<br/>      EndIf<br/>      i = i - 1<br/>    EndWhile<br/>    exitwhile:<br/>    j = i + 1<br/>    k = n<br/>    While j &lt; k<br/>      t = p[j]<br/>      p[j] = p[k]<br/>      p[k] = t<br/>      j = j + 1<br/>      k = k - 1<br/>    EndWhile<br/>    j = n<br/>    While p[j] &gt; p[i]<br/>      j = j - 1<br/>    EndWhile<br/>    j = j + 1<br/>    t = p[i]<br/>    p[i] = p[j]<br/>    p[j] = t<br/>  EndWhile<br/>  TextWindow.WriteLine(\"Number of permutations: \"+count) </pre>"}, {"lang": "Modula-2", "loc": 60, "block": "<pre class=\"text highlighted_source\">MODULE \tPermute;<br/>\u00a0<br/>FROM\tTerminal<br/>IMPORT\tRead, Write, WriteLn;<br/>\u00a0<br/>FROM\tTerminal2<br/>IMPORT\tWriteString;<br/>\u00a0<br/>CONST\tMAXIDX = 6;<br/>\tMINIDX = 1;<br/>\u00a0<br/>TYPE\tTInpCh = ['a'..'z'];<br/>\tTChr   = SET OF TInpCh;<br/>\u00a0<br/>VAR\tn,<br/>\tnl:\tINTEGER;<br/>\tch:\tCHAR;<br/>\ta:\tARRAY[MINIDX..MAXIDX] OF CHAR;<br/>\tkt:     TChr = TChr{'a'..'f'};<br/>\u00a0<br/>PROCEDURE output;<br/>VAR\ti:\tINTEGER;<br/>BEGIN<br/>\tFOR i\u00a0:= MINIDX TO n DO Write(a[i]) END;<br/>\tWriteString(\" | \");<br/>END output;<br/>\u00a0<br/>PROCEDURE exchange(VAR x, y\u00a0: CHAR);<br/>VAR\tz:\tCHAR;<br/>BEGIN z\u00a0:= x; x\u00a0:= y; y\u00a0:= z<br/>END exchange;<br/>\u00a0<br/>PROCEDURE permute(k: INTEGER);<br/>VAR\ti:\tINTEGER;<br/>BEGIN<br/>\tIF k = 1 THEN<br/>\t\toutput;<br/>\t\tINC(nl);<br/>\t\tIF (nl MOD 8 = 1) THEN WriteLn END;<br/>\tELSE<br/>\t\tpermute(k-1);<br/>\t\tFOR i\u00a0:= MINIDX TO k-1 DO<br/>\t\t\texchange(a[i], a[k]);<br/>\t\t\tpermute(k-1);<br/>\t\t\texchange(a[i], a[k]);<br/>\t\tEND<br/>\tEND<br/>END permute;<br/>\u00a0<br/>BEGIN<br/>\tn\u00a0:= 0;\tnl\u00a0:= 1; WriteString(\"Input {a,b,c,d,e,f} &gt;\");<br/>\tREPEAT<br/>\t\tRead(ch);<br/>\t\tIF ch IN kt THEN INC(n); a[n]\u00a0:= ch; Write(ch) END<br/>\tUNTIL (ch &lt;= \" \") OR (n &gt; MAXIDX);<br/>\u00a0<br/>\tWriteLn;<br/>\tIF n &gt; 0 THEN permute(n) END;<br/>\t(*Wait*)<br/>END Permute.</pre>"}, {"lang": "NetRexx", "loc": 149, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/><span class=\"kw1\">import</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">ArrayList</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"coMULTI\">/**<br/> * Permutation Iterator<br/> * &lt;br /&gt;<br/> * &lt;br /&gt;<br/> * Algorithm by E. W. Dijkstra, \"A Discipline of Programming\", Prentice-Hall, 1976, p.71<br/> */</span><br/><span class=\"kw1\">class</span> RPermutationIterator <span class=\"kw2\">implements</span> Iterator<br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  <span class=\"kw1\">properties</span> indirect<br/>    perms = List<br/>    permOrders = int<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    maxN<br/>    currentN<br/>    first = boolean<br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  <span class=\"kw1\">properties</span> <span class=\"kw2\">constant</span><br/>    isTrue  = boolean <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    isFalse = boolean <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">\\</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method RPermutationIterator<span class=\"br0\">(</span>initial = List<span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    setUp<span class=\"br0\">(</span>initial<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method RPermutationIterator<span class=\"br0\">(</span>initial = Object<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    init = ArrayList<span class=\"br0\">(</span>initial.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> elmt over initial<br/>      init.<span class=\"me0\">add</span><span class=\"br0\">(</span>elmt<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> elmt<br/>    setUp<span class=\"br0\">(</span>init<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method RPermutationIterator<span class=\"br0\">(</span>initial = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    init = ArrayList<span class=\"br0\">(</span>initial.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> elmt over initial<br/>      init.<span class=\"me0\">add</span><span class=\"br0\">(</span>elmt<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> elmt<br/>    setUp<span class=\"br0\">(</span>init<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method setUp<span class=\"br0\">(</span>initial = List<span class=\"br0\">)</span> <span class=\"kw2\">private</span><br/>    setFirst<span class=\"br0\">(</span>isTrue<span class=\"br0\">)</span><br/>    setPerms<span class=\"br0\">(</span>initial<span class=\"br0\">)</span><br/>    setPermOrders<span class=\"br0\">(</span>int<span class=\"br0\">[</span>getPerms<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    setMaxN<span class=\"br0\">(</span>getPermOrders<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span><span class=\"br0\">)</span><br/>    setCurrentN<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    po = getPermOrders<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">0</span> while i_ <span class=\"sy0\">&lt;</span> po.<span class=\"me0\">length</span><br/>      po<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> = i_<br/>      <span class=\"kw3\">end</span> i_<br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> boolean<br/>    status = isTrue<br/>    <span class=\"kw1\">if</span> getCurrentN<span class=\"br0\">(</span><span class=\"br0\">)</span> == factorial<span class=\"br0\">(</span>getMaxN<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> status = isFalse<br/>    setCurrentN<span class=\"br0\">(</span>getCurrentN<span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>    <br/>    <span class=\"kw1\">return</span> status<br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> Object<br/>    <span class=\"kw1\">if</span> isFirst<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> setFirst<span class=\"br0\">(</span>isFalse<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>      po = getPermOrders<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      i_ = getMaxN<span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">loop</span> while po<span class=\"br0\">[</span>i_ - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= po<span class=\"br0\">[</span>i_<span class=\"br0\">]</span><br/>        i_ = i_ - <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">end</span><br/>\u00a0<br/>      j_ = getMaxN<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">loop</span> while po<span class=\"br0\">[</span>j_ - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= po<span class=\"br0\">[</span>i_ - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        j_ = j_ - <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">end</span><br/>\u00a0<br/>      swap<span class=\"br0\">(</span>i_ - <span class=\"nu0\">1</span>, j_ - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>      i_ = i_ + <span class=\"nu0\">1</span><br/>      j_ = getMaxN<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">loop</span> while i_ <span class=\"sy0\">&lt;</span> j_<br/>        swap<span class=\"br0\">(</span>i_ - <span class=\"nu0\">1</span>, j_ - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        i_ = i_ + <span class=\"nu0\">1</span><br/>        j_ = j_ - <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw1\">return</span> reorder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method remove<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">signals</span> UnsupportedOperationException<br/>    <span class=\"kw1\">signal</span> UnsupportedOperationException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method swap<span class=\"br0\">(</span>i_, j_<span class=\"br0\">)</span> <span class=\"kw2\">private</span><br/>    po = getPermOrders<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    save   = po<span class=\"br0\">[</span>i_<span class=\"br0\">]</span><br/>    po<span class=\"br0\">[</span>i_<span class=\"br0\">]</span> = po<span class=\"br0\">[</span>j_<span class=\"br0\">]</span><br/>    po<span class=\"br0\">[</span>j_<span class=\"br0\">]</span> = save<br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method reorder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">returns</span> List<br/>    <span class=\"kw4\">result</span> = ArrayList<span class=\"br0\">(</span>getPerms<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> ix over getPermOrders<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw4\">result</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>getPerms<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">get</span><span class=\"br0\">(</span>ix<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> ix<br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">result</span><br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  <span class=\"coMULTI\">/**<br/>   * Calculate n factorial: {@code n! = 1 * 2 * 3 .. * n}<br/>   * @param n<br/>   * @return n!<br/>   */</span><br/>  method factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    fact = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> while i <span class=\"sy0\">&lt;</span>= n<br/>      fact = fact <span class=\"sy0\">*</span> i<br/>      <span class=\"kw3\">end</span> i<br/>    <span class=\"kw1\">return</span> fact<br/>\u00a0<br/>  <span class=\"co1\">-- ---------------------------------------------------------------------------</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    thing02 = RPermutationIterator<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'alpha'</span>, <span class=\"st0\">'omega'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    thing03 = RPermutationIterator<span class=\"br0\">(</span><span class=\"br0\">[</span>String <span class=\"st0\">'one'</span>, <span class=\"st0\">'two'</span>, <span class=\"st0\">'three'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    thing04 = RPermutationIterator<span class=\"br0\">(</span>Arrays.<span class=\"me0\">asList</span><span class=\"br0\">(</span><span class=\"br0\">[</span>Integer<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Integer<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Integer<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, Integer<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    things = <span class=\"br0\">[</span>thing02, thing03, thing04<span class=\"br0\">]</span><br/>    <span class=\"kw1\">loop</span> thing over things<br/>      N = thing.<span class=\"me0\">getMaxN</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'Permutations:'</span> N<span class=\"st0\">'! ='</span> factorial<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>      <span class=\"kw1\">loop</span> lineCount = <span class=\"nu0\">1</span> while thing.<span class=\"me0\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        prm = thing.<span class=\"me0\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">say</span> lineCount.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> prm.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> lineCount<br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'Permutations:'</span> N<span class=\"st0\">'! ='</span> factorial<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>      <span class=\"kw1\">say</span><br/>      <span class=\"kw3\">end</span> thing<br/>    <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 28, "block": "<pre class=\"text highlighted_source\"># iterative Boothroyd method<br/>iterator permutations[T](ys: openarray[T]): seq[T] =<br/>  var<br/>    d = 1<br/>    c = newSeq[int](ys.len)<br/>    xs = newSeq[T](ys.len)<br/>\u00a0<br/>  for i, y in ys: xs[i] = y<br/>  yield xs<br/>\u00a0<br/>  block outer:<br/>    while true:<br/>      while d &gt; 1:<br/>        dec d<br/>        c[d] = 0<br/>      while c[d] &gt;= d:<br/>        inc d<br/>        if d &gt;= ys.len: break outer<br/>\u00a0<br/>      let i = if (d and 1) == 1: c[d] else: 0<br/>      swap xs[i], xs[d]<br/>      yield xs<br/>      inc c[d]<br/>\u00a0<br/>var x = @[1,2,3]<br/>\u00a0<br/>for i in permutations(x):<br/>  echo i</pre>"}, {"lang": "OCaml", "loc": 45, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* Iterative, though loops are implemented as auxiliary recursive functions.<br/>   Translation of Ada version. *)</span><br/><span class=\"kw1\">let</span> next_perm p <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length p <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">let</span> i <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i <span class=\"sy0\">=</span> <br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>p<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> i<br/>\t\t<span class=\"kw1\">else</span> aux <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> aux <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux j k <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> j <span class=\"sy0\">&lt;</span> k <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\t\t\tp<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tp<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> t<span class=\"sy0\">;</span><br/>\t\t\taux <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> aux <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux j <span class=\"sy0\">=</span><br/>\t\t\t<span class=\"kw1\">if</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> j<br/>\t\t\t<span class=\"kw1\">else</span> aux <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> aux <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\t\t<span class=\"kw1\">let</span> t <span class=\"sy0\">=</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\t\t\tp<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tp<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> t<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">true</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print_perm p <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length p <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>\t\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_int\"><span class=\"kw3\">print_int</span></a> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\" \"</span><br/>\t<span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_int\"><span class=\"kw3\">print_int</span></a> p<span class=\"sy0\">.</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print_all_perm n <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init n <span class=\"br0\">(</span><span class=\"kw1\">function</span> i <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\tprint_perm p<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> next_perm p <span class=\"kw1\">do</span><br/>\t\tprint_perm p<br/>\t<span class=\"kw1\">done</span><span class=\"sy0\">;;</span><br/>\u00a0<br/>print_all_perm <span class=\"nu0\">3</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(* 1 2 3<br/>   1 3 2<br/>   2 1 3<br/>   2 3 1<br/>   3 1 2<br/>   3 2 1 *)</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n<span class=\"sy0\">!,</span>k<span class=\"sy0\">,</span><span class=\"kw1\">numtoperm</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 71, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> perm<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>\tp<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy1\">..</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\tis_last<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>\tn<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> next<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> t<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>is_last <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">while</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">begin</span><br/>\t<span class=\"kw1\">if</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt; p<span class=\"br0\">[</span>i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">begin</span><br/>\t\tis_last <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\ti <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw1\">not</span> is_last <span class=\"kw1\">then</span><br/>\t<span class=\"kw1\">begin</span><br/>\tj <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\tk <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">while</span> j &lt; k <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">begin</span><br/>\t\tt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t\tp<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t\tp<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> t<span class=\"sy1\">;</span><br/>\t\tj <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\t\tk <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\tj <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">while</span> p<span class=\"br0\">[</span>j<span class=\"br0\">]</span> &gt; p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\tj <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\tt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\tp<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\tp<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> t<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> print<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> init<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">begin</span><br/>\t<span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Enter n (1 &lt;= n &lt;= 10): '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">readln</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>init<span class=\"sy1\">;</span><br/><span class=\"kw1\">repeat</span><br/>\tprint<span class=\"sy1\">;</span><br/>\tnext<span class=\"sy1\">;</span><br/><span class=\"kw1\">until</span> is_last<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre>- 1.7s <a class=\"external text\" href=\"https://metacpan.org/pod/Algorithm::FastPermute\" rel=\"nofollow\">Algorithm::FastPermute</a> permute iterator\n- 1.7s <a class=\"external text\" href=\"https://metacpan.org/pod/Algorithm::Permute\" rel=\"nofollow\">Algorithm::Permute</a> permute iterator\n- 2.0s <a class=\"external text\" href=\"https://metacpan.org/pod/ntheory\" rel=\"nofollow\">ntheory</a>  forperm iterator\n- 6.3s <a class=\"external text\" href=\"https://metacpan.org/pod/Algorithm::Combinatorics\" rel=\"nofollow\">Algorithm::Combinatorics</a> permutations iterator\n- 9.1s the recursive sub below\n- 21.1s <a class=\"external text\" href=\"https://metacpan.org/pod/Math::Combinatorics\" rel=\"nofollow\">Math::Combinatorics</a> permutations iterator\n</pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span>a b c<span class=\"sy0\">&gt;.</span><span class=\"me1\">permutations</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">global function permute(integer n, sequence set)<br/>--<br/>-- return the nth permute of the given set.<br/>-- n should be an integer in the range 1 to factorial(length(set))<br/>--<br/>sequence res<br/>integer w<br/>    n -= 1<br/>    res = set<br/>    for i=length(set) to 1 by -1 do <br/>        w = remainder(n,i)+1<br/>        res[i] = set[w]<br/>        set[w] = set[i]<br/>        n = floor(n/i)<br/>    end for<br/>    return res<br/>end function</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(permute (1 2 3))</pre>"}, {"lang": "PowerBASIC", "loc": 36, "block": "<pre class=\"ada highlighted_source\">  #COMPILE EXE<br/>  #DIM <span class=\"kw3\">ALL</span><br/>  GLOBAL a, i, j, k, n  AS INTEGER<br/>  GLOBAL d, ns, s AS STRING 'dynamic string<br/>  <span class=\"kw3\">FUNCTION</span> PBMAIN <span class=\"br0\">(</span><span class=\"br0\">)</span> AS LONG<br/>  ns = INPUTBOX$<span class=\"br0\">(</span><span class=\"st0\">\"   n =\"</span>,, <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span> 'input n<br/>  n = VAL<span class=\"br0\">(</span>ns<span class=\"br0\">)</span><br/>  DIM a<span class=\"br0\">(</span><span class=\"nu0\">1</span> TO n<span class=\"br0\">)</span> AS INTEGER<br/>  <span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> TO n: a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>= i: NEXT<br/>  <span class=\"kw1\">DO</span><br/>    s = <span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> TO n<br/>      d = STR$<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      s = BUILD$<span class=\"br0\">(</span>s, d<span class=\"br0\">)</span> '  s &amp; d concatenate<br/>    NEXT<br/>   \u00a0? s  'print <span class=\"kw2\">and</span> pause<br/>    i = n<br/>    <span class=\"kw1\">DO</span><br/>     DECR i<br/>    <span class=\"kw1\">LOOP</span> <span class=\"kw1\">UNTIL</span> i = <span class=\"nu0\">0</span> <span class=\"kw2\">OR</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt; a<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    j = i+<span class=\"nu0\">1</span><br/>    k = n<br/>    <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> j &lt; k<br/>      SWAP a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, a<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>      INCR j<br/>      DECR k<br/>    <span class=\"kw1\">LOOP</span><br/>    <span class=\"kw1\">IF</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>      j = i+<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> &lt; a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        INCR j<br/>      <span class=\"kw1\">LOOP</span><br/>      SWAP a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>  <span class=\"kw1\">LOOP</span> <span class=\"kw1\">UNTIL</span> i = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw3\">FUNCTION</span></pre>"}, {"lang": "PowerShell", "loc": 28, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> permutation <span class=\"br0\">(</span><span class=\"re0\">$array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> generate<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$array</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$A</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>join <span class=\"st0\">' '</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>            <span class=\"kw3\">for</span><span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                generate <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$array</span> <span class=\"re0\">$A</span><br/>                <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>                    <span class=\"re0\">$i1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i1</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            generate <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"re0\">$array</span> <span class=\"re0\">$A</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$array</span>.Count<br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span>generate <span class=\"re0\">$n</span> <span class=\"re0\">$array</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$array</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>permutation <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"sy0\">,</span><span class=\"st0\">'C'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>permut_clpfd<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    length<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    L ins <span class=\"nu0\">1</span><span class=\"sy4\">..</span>N<span class=\"sy4\">,</span><br/>    all_different<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    label<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 57, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Macro</span> reverse<span class=\"br0\">(</span>firstIndex, lastIndex<span class=\"br0\">)</span><br/>  first <span class=\"sy0\">=</span> firstIndex<br/>  last <span class=\"sy0\">=</span> lastIndex<br/>  <span class=\"kw1\">While</span> first <span class=\"sy0\">&lt;</span> last<br/>    <span class=\"kw1\">Swap</span> cur<span class=\"br0\">(</span>first<span class=\"br0\">)</span>, cur<span class=\"br0\">(</span>last<span class=\"br0\">)</span><br/>    first <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    last <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span> <br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> nextPermutation<span class=\"br0\">(</span>Array cur<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> first, last, elementCount <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>cur<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> elementCount <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #False <span class=\"co1\">;nothing to permute</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"co1\">;Find the lowest position pos such that [pos] &lt; [pos+1]</span><br/>  <span class=\"kw1\">Protected</span> pos <span class=\"sy0\">=</span> elementCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span> cur<span class=\"br0\">(</span>pos<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> cur<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    pos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> pos <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>      reverse<span class=\"br0\">(</span><span class=\"nu0\">0</span>, elementCount<span class=\"br0\">)</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #False <span class=\"co1\">;no higher lexicographic permutations left, return lowest one instead</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"co1\">;Swap [pos] with the highest positional value that is larger than [pos]</span><br/>  last <span class=\"sy0\">=</span> elementCount<br/>  <span class=\"kw1\">While</span> cur<span class=\"br0\">(</span>last<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> cur<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><br/>    last <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Swap</span> cur<span class=\"br0\">(</span>pos<span class=\"br0\">)</span>, cur<span class=\"br0\">(</span>last<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;Reverse the order of the elements in the higher positions</span><br/>  reverse<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, elementCount<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True <span class=\"co1\">;next lexicographic permutation found</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> display<span class=\"br0\">(</span>Array a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, fin <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> fin<br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> i <span class=\"sy0\">=</span> fin: <span class=\"kw1\">Continue</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>: a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>: a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>  <span class=\"nu0\">3</span><br/>  display<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> nextPermutation<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: display<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span><br/><span class=\"kw1\">for</span> values <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">permutations</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span>values<span class=\"br0\">)</span></pre>"}, {"lang": "Qi", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define insert<br/>  L      0 E -&gt; [E|L]<br/>  [L|Ls] N E -&gt; [L|(insert Ls (- N 1) E)])<br/>\u00a0<br/>(define seq<br/>  Start Start -&gt; [Start]<br/>  Start End   -&gt; [Start|(seq (+ Start 1) End)])<br/>\u00a0<br/>(define append-lists<br/>  []    -&gt; []<br/>  [A|B] -&gt; (append A (append-lists B)))<br/>\u00a0<br/>(define permutate<br/>  []    -&gt; [[]]<br/>  [H|T] -&gt; (append-lists (map (/. P<br/>                                  (map (/. N<br/>                                           (insert P N H))<br/>                                       (seq 0 (length P))))<br/>                              (permute T))))</pre>"}, {"lang": "R", "loc": 48, "block": "<pre class=\"text highlighted_source\">next.perm &lt;- function(p) {<br/>  n &lt;- length(p)<br/>  i &lt;- n - 1<br/>  r = T<br/>  for (i in seq(n - 1, 1)) {<br/>    if (p[i] &lt; p[i + 1]) {<br/>      r = F<br/>      break<br/>    }<br/>  }<br/>\u00a0<br/>  j &lt;- i + 1<br/>  k &lt;- n<br/>  while (j &lt; k) {<br/>    x &lt;- p[j]<br/>    p[j] &lt;- p[k]<br/>    p[k] &lt;- x<br/>    j &lt;- j + 1<br/>    k &lt;- k - 1<br/>  }<br/>\u00a0<br/>  if(r) return(NULL)<br/>\u00a0<br/>  j &lt;- n<br/>  while (p[j] &gt; p[i]) j &lt;- j - 1<br/>  j &lt;- j + 1<br/>\u00a0<br/>  x &lt;- p[i]<br/>  p[i] &lt;- p[j]<br/>  p[j] &lt;- x<br/>  return(p)<br/>}<br/>\u00a0<br/>print.perms &lt;- function(n) {<br/>  p &lt;- 1:n<br/>  while (!is.null(p)) {<br/>    cat(p, \"\\n\")<br/>    p &lt;- next.perm(p)<br/>  }<br/>}<br/>\u00a0<br/>print.perms(3)<br/># 1 2 3 <br/># 1 3 2 <br/># 2 1 3 <br/># 2 3 1 <br/># 3 1 2 <br/># 3 2 1</pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; using a builtin<br/>(permutations '(A B C))<br/>;; -&gt; '((A B C) (B A C) (A C B) (C A B) (B C A) (C B A))<br/>\u00a0<br/>;; a random simple version (which is actually pretty good for a simple version)<br/>(define (perms l)<br/>  (let loop ([l l] [tail '()])<br/>    (if (null? l) (list tail)<br/>        (append-map (\u03bb(x) (loop (remq x l) (cons x tail))) l))))<br/>(perms '(A B C))<br/>;; -&gt; '((C B A) (B C A) (C A B) (A C B) (B A C) (A B C))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates and displays  all  permutations  of    N    different objects. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> things bunch inbetweenChars names<br/>\u00a0<br/>                       <span class=\"coMULTI\">/* inbetweenChars  (optional)   defaults to a  [null].           */</span><br/>                       <span class=\"coMULTI\">/*          names  (optional)   defaults to digits (and letters).*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> permSets things, bunch, inbetweenChars, names<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>p:  <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*P  function (Pick first arg of many).*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>permSets: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y,between,uSyms <span class=\"coMULTI\">/*X    things taken    Y    at a time. */</span><br/>          @<span class=\"sy0\">.</span>=;   sep=                            <span class=\"coMULTI\">/*X  can't be  &gt;  length(@0abcs).      */</span><br/>          @abc  = <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span>;     @<a class=\"__cf_email__\" data-cfemail=\"65040706305825040706\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;         <span class=\"kw2\">upper</span> @abcU<br/>          @abcS = @abcU <span class=\"sy0\">||</span> @abc;                    @0abcS=<span class=\"nu0\">123456789</span> <span class=\"sy0\">||</span> @abcS<br/>\u00a0<br/>            <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> x                        <span class=\"coMULTI\">/*build a list of permutation symbols. */</span><br/>            _=p<span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>uSyms,k<span class=\"br0\">)</span>  p<span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>@0abcS,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/*get or generate a symbol.*/</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> sep=<span class=\"st0\">'_'</span>       <span class=\"coMULTI\">/*if not 1st character,  then use sep. */</span><br/>            $<span class=\"sy0\">.</span>k=_                                <span class=\"coMULTI\">/*append the character to symbol list. */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>\u00a0<br/>          <span class=\"kw1\">if</span> between==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> between=sep       <span class=\"coMULTI\">/*use the appropriate separator chars. */</span><br/>          <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>permset <span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/*start with the  first  permuation.   */</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"sy0\">.</span>permset: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> $<span class=\"sy0\">.</span> @<span class=\"sy0\">.</span> between x y;     <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?<br/>          <span class=\"kw1\">if</span>\u00a0?<span class=\"sy0\">&gt;</span>y <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; <a class=\"__cf_email__\" data-cfemail=\"da85e79a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>1;   <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> y;  _=_ <span class=\"sy0\">||</span> between <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>j; <span class=\"kw3\">end</span>;  <span class=\"kw1\">say</span> _;  <span class=\"kw3\">end</span><br/>                 <span class=\"kw3\">else</span> <span class=\"kw1\">do</span> q=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> x              <span class=\"coMULTI\">/*build the permutation recursively.   */</span><br/>                          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>\u00a0?-<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>k==$<span class=\"sy0\">.</span>q  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> q;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>                      @<span class=\"sy0\">.</span>?=$<span class=\"sy0\">.</span>q;              <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>permset\u00a0?+<span class=\"nu0\">1</span><br/>                      <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*q*/</span><br/>          <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>list = [1, 2, 3, 4]<br/>for perm = 1 to 24<br/>    for i = 1 to len(list)<br/>        see list[i] + \" \"<br/>    next<br/>    see nl<br/>    nextPermutation(list)<br/>next<br/>\u00a0<br/>func nextPermutation a<br/>     elementcount = len(a)<br/>     if elementcount &lt; 1 then return ok<br/>     pos = elementcount-1<br/>     while a[pos] &gt;= a[pos+1] <br/>           pos -= 1<br/>           if pos &lt;= 0 permutationReverse(a, 1, elementcount)<br/>              return ok<br/>     end<br/>     last = elementcount<br/>     while a[last] &lt;= a[pos]<br/>           last -= 1<br/>     end<br/>     temp = a[pos]<br/>     a[pos] = a[last]<br/>     a[last] = temp<br/>     permutationReverse(a, pos+1, elementcount)<br/>\u00a0<br/> func permutationReverse a, first, last<br/>      while first &lt; last<br/>            temp = a[first]<br/>            a[first] = a[last]<br/>            a[last] = temp<br/>            first += 1<br/>            last -= 1<br/>      end<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span>.<span class=\"me1\">to_a</span></pre>"}, {"lang": "Run BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">list$ = \"h,e,l,l,o\"\t\t' supply list seperated with comma's<br/>\u00a0<br/>while word$(list$,d+1,\",\") &lt;&gt; \"\"  'Count how many in the list<br/>d = d + 1<br/>wend<br/>\u00a0<br/>dim theList$(d)\t\t\t' place list in array<br/>for i = 1 to d<br/>  theList$(i) = word$(list$,i,\",\")<br/>next i<br/>\u00a0<br/>for i = 1 to d\t\t\t' print the Permutations<br/> for j = 2 to d<br/>   perm$ = \"\"<br/>   for k = 1 to d<br/>    perm$ = perm$ + theList$(k)<br/>   next k<br/>   if instr(perm2$,perm$+\",\") = 0 then print perm$ ' only list 1 time<br/>   perm2$ \t = perm2$ + perm$ + \",\"<br/>   h$\t\t = theList$(j)<br/>   theList$(j)\t = theList$(j - 1)<br/>   theList$(j - 1) = h$<br/>  next j<br/>next i<br/>end</pre>"}, {"lang": "Rust", "loc": 40, "block": "<pre class=\"text highlighted_source\">pub fn permutations(size: usize) -&gt; Permutations {<br/>    Permutations { idxs: (0..size).collect(), swaps: vec![0; size], i: 0 }<br/>}<br/>\u00a0<br/>pub struct Permutations {<br/>    idxs: Vec&lt;usize&gt;,<br/>    swaps: Vec&lt;usize&gt;,<br/>    i: usize,<br/>}<br/>\u00a0<br/>impl Iterator for Permutations {<br/>    type Item = Vec&lt;usize&gt;;<br/>\u00a0<br/>    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {<br/>        if self.i &gt; 0 {<br/>            loop {<br/>                if self.i &gt;= self.swaps.len() { return None; }<br/>                if self.swaps[self.i] &lt; self.i { break; }<br/>                self.swaps[self.i] = 0;<br/>                self.i += 1;<br/>            }<br/>            self.idxs.swap(self.i, (self.i &amp; 1) * self.swaps[self.i]);<br/>            self.swaps[self.i] += 1;<br/>        }<br/>        self.i = 1;<br/>        Some(self.idxs.clone())<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let perms = permutations(3).collect::&lt;Vec&lt;_&gt;&gt;();<br/>    assert_eq!(perms, vec![<br/>        vec![0, 1, 2],<br/>        vec![1, 0, 2],<br/>        vec![2, 0, 1],<br/>        vec![0, 2, 1],<br/>        vec![1, 2, 0],<br/>        vec![2, 1, 0],<br/>    ]);<br/>}</pre>"}, {"lang": "SAS", "loc": 42, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* Store permutations in a SAS dataset. Translation of Fortran 77 */</span><br/><span class=\"kw6\">data</span> perm;<br/>  <span class=\"kw3\">n</span>=<span class=\"nu0\">6</span>;<br/>  <span class=\"kw4\">array</span> a<span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"br0\">}</span> p1-p6;<br/>  <span class=\"kw5\">do</span> i=<span class=\"nu0\">1</span> to <span class=\"kw3\">n</span>;<br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=i;<br/>  <span class=\"kw5\">end</span>;<br/>L1:<br/>  <span class=\"kw4\">output</span>;<br/>  <span class=\"kw4\">link</span> L2;<br/>  <span class=\"kw5\">if</span> next <span class=\"kw5\">then</span> <span class=\"kw4\">goto</span> L1;<br/>  <span class=\"kw4\">stop</span>;<br/>L2:<br/>  next=<span class=\"nu0\">0</span>;<br/>  i=n-<span class=\"nu0\">1</span>;<br/>L10:<br/>  <span class=\"kw5\">if</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&lt;a<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw5\">then</span> <span class=\"kw4\">goto</span> L20;<br/>  i=i-<span class=\"nu0\">1</span>;<br/>  <span class=\"kw5\">if</span> i=<span class=\"nu0\">0</span> <span class=\"kw5\">then</span> <span class=\"kw4\">goto</span> L20;<br/>  <span class=\"kw4\">goto</span> L10;<br/>  L20:<br/>  j=i+<span class=\"nu0\">1</span>;<br/>  k=<span class=\"kw3\">n</span>;<br/>L30:<br/>  t=a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>  a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=a<span class=\"br0\">(</span>k<span class=\"br0\">)</span>;<br/>  a<span class=\"br0\">(</span>k<span class=\"br0\">)</span>=t;<br/>  j=j+<span class=\"nu0\">1</span>;<br/>  k=k-<span class=\"nu0\">1</span>;<br/>  <span class=\"kw5\">if</span> j&lt;k <span class=\"kw5\">then</span> <span class=\"kw4\">goto</span> L30;<br/>  j=i;<br/>  <span class=\"kw5\">if</span> j=<span class=\"nu0\">0</span> <span class=\"kw5\">then</span> <span class=\"kw4\">return</span>;<br/>L40:<br/>  j=j+<span class=\"nu0\">1</span>;<br/>  <span class=\"kw5\">if</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>&lt;a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw5\">then</span> <span class=\"kw4\">goto</span> L40;<br/>  t=a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>  a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>  a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=t;<br/>  next=<span class=\"nu0\">1</span>;<br/>  <span class=\"kw4\">return</span>;<br/>  <span class=\"kw4\">keep</span> p1-p6;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">List<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">permutations</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>println<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 19, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>insert <span class=\"kw1\">l</span> n <span class=\"kw1\">e</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"kw1\">e</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <br/>            <span class=\"br0\">(</span>insert <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>seq start end<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> start end<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> end<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> start <span class=\"br0\">(</span>seq <span class=\"br0\">(</span><span class=\"sy0\">+</span> start <span class=\"nu0\">1</span><span class=\"br0\">)</span> end<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>permute <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>apply <span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                                  <span class=\"br0\">(</span>insert p n <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span>seq <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>permute <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: permutations is array array integer;<br/>\u00a0<br/>const func permutations: permutations (in array integer: items) is func<br/>  result<br/>    var permutations: permsList is 0 times 0 times 0;<br/>  local<br/>    const proc: perms (in array integer: sequence, in array integer: prefix) is func<br/>      local<br/>        var integer: element is 0;<br/>        var integer: index is 0;<br/>      begin<br/>        if length(sequence) &lt;&gt; 0 then<br/>          for element key index range sequence do<br/>            perms(sequence[.. pred(index)] &amp; sequence[succ(index) ..], prefix &amp; [] (element));<br/>          end for;<br/>        else<br/>          permsList &amp;:= prefix;<br/>        end if;<br/>      end func;<br/>  begin<br/>    perms(items, 0 times 0);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array integer: perm is 0 times 0;<br/>    var integer: element is 0;<br/>  begin<br/>    for perm range permutations([] (1, 2, 3)) do<br/>      for element range perm do<br/>        write(element &lt;&amp; \" \");<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">permutations</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span><br/>    say <span class=\"kw3\">p</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span><span class=\"re5\">1</span> to: <span class=\"re5\">4</span><span class=\"br0\">)</span> permutationsDo: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | <br/>\t<span class=\"re0\">Transcript</span> show: <span class=\"re5\">x</span> printString; cr <span class=\"br0\">]</span>.</pre>"}, {"lang": "Stata", "loc": 1, "block": "<pre class=\"text highlighted_source\">perm 4</pre>"}, {"lang": "Swift", "loc": 15, "block": "<pre class=\"text highlighted_source\">func perms&lt;T&gt;(var ar: [T]) -&gt; [[T]] {<br/>  return heaps(&amp;ar, ar.count)<br/>}<br/>\u00a0<br/>func heaps&lt;T&gt;(inout ar: [T], n: Int) -&gt; [[T]] {<br/>  return n == 1\u00a0? [ar]\u00a0:<br/>    Swift.reduce(0..&lt;n, [[T]]()) {<br/>      (var shuffles, i) in<br/>      shuffles.extend(heaps(&amp;ar, n - 1))<br/>      swap(&amp;ar[n\u00a0% 2 == 0\u00a0? i\u00a0: 0], &amp;ar[n - 1])<br/>      return shuffles<br/>  }<br/>}<br/>\u00a0<br/>perms([1, 2, 3]) // [[1, 2, 3], [2, 1, 3], [3, 1, 2], [1, 3, 2], [2, 3, 1], [3, 2, 1]]</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"co1\"># Make the sequence of digits to be permuted</span><br/><span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"kw2\"><span class=\"re0\">$argv</span></span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> sequence <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Iterate over the permutations, printing as we go</span><br/>struct::<span class=\"kw2\">list</span> foreachperm p <span class=\"re0\">$sequence</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$p</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 9, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>permutations = <br/>\u00a0<br/>~&amp;itB^?a(                     # are both the input argument list and its tail non-empty?<br/>   @ahPfatPRD *= refer ^C(      # yes, recursively generate all permutations of the tail, and for each one<br/>      ~&amp;a,                        # insert the head at the first position<br/>      ~&amp;ar&amp;&amp; ~&amp;arh2falrtPXPRD),   # if the rest is non-empty, recursively insert at all subsequent positions<br/>   ~&amp;aNC)                       # no, return the singleton list of the argument</pre>"}, {"lang": "VBA", "loc": 82, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Permute(n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, <span class=\"kw4\">Optional</span> printem <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span> = <span class=\"kw5\">True</span>)<br/><span class=\"co1\">'Generate, count and print (if printem is not false) all permutations of first n integers<br/></span> <br/><span class=\"kw4\">Dim</span> P() <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw4\">Dim</span> t <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, k <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw4\">Dim</span> count <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> Last <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/><span class=\"kw3\">If</span> n &lt;= 1 <span class=\"kw3\">Then</span><br/>\u00a0<br/>  Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Please give a number greater than 1\"</span><br/>  <span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">'Initialize<br/></span><span class=\"kw4\">ReDim</span> P(n)<br/>\u00a0<br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>  P(i) = i<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/>count = 0<br/>Last = <span class=\"kw5\">False</span><br/>\u00a0<br/><span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> <span class=\"kw3\">Not</span> Last<br/>   <span class=\"co1\">'print?<br/></span>   <span class=\"kw3\">If</span> printem <span class=\"kw3\">Then</span><br/>\u00a0<br/>      <span class=\"kw3\">For</span> t = 1 <span class=\"kw3\">To</span> n<br/>        Debug.<span class=\"kw4\">Print</span> P(t);<br/>      <span class=\"kw3\">Next</span><br/>\u00a0<br/>      Debug.<span class=\"kw4\">Print</span><br/>\u00a0<br/>   <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>count = count + 1<br/>\u00a0<br/>Last = <span class=\"kw5\">True</span><br/>i = n - 1<br/>\u00a0<br/>   <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> i &gt; 0<br/>\u00a0<br/>     <span class=\"kw3\">If</span> P(i) &lt; P(i + 1) <span class=\"kw3\">Then</span><br/>\u00a0<br/>       Last = <span class=\"kw5\">False</span><br/>       <span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>\u00a0<br/>     <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>     i = i - 1<br/>   <span class=\"kw3\">Loop</span><br/>\u00a0<br/>  j = i + 1<br/>  k = n<br/>\u00a0<br/>  <span class=\"kw3\">While</span> j &lt; k<br/>    <span class=\"co1\">' Swap p(j) and p(k)<br/></span>    t = P(j)<br/>    P(j) = P(k)<br/>    P(k) = t<br/>    j = j + 1<br/>    k = k - 1<br/>  Wend<br/>\u00a0<br/>  j = n<br/>\u00a0<br/>  <span class=\"kw3\">While</span> P(j) &gt; P(i)<br/>    j = j - 1<br/>  Wend<br/>\u00a0<br/>  j = j + 1<br/>  <span class=\"co1\">'Swap p(i) and p(j)<br/></span>  t = P(i)<br/>  P(i) = P(j)<br/>  P(j) = t<br/><span class=\"kw3\">Loop</span> <span class=\"co1\">'While not last<br/></span> <br/>Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Number of permutations: \"</span>; count<br/>\u00a0<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XPL0", "loc": 25, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9;<br/>def  N=4;                       \\number of objects (letters)<br/>char S0, S1(N);<br/>\u00a0<br/>proc Permute(D);                \\Display all permutations of letters in S0<br/>int D;                          \\depth of recursion<br/>int I, J;<br/>[if D=N then<br/>        [for I:= 0 to N-1 do ChOut(0, S1(I));<br/>        CrLf(0);<br/>        return;<br/>        ];<br/>for I:= 0 to N-1 do<br/>        [for J:= 0 to D-1 do    \\check if object (letter) already used<br/>                if S1(J) = S0(I) then J:=100;<br/>        if J&lt;100 then<br/>                [S1(D):= S0(I); \\object (letter) not used so append it<br/>                Permute(D+1);   \\recurse next level deeper<br/>                ];<br/>        ];<br/>];<br/>\u00a0<br/>[S0:= \"rose \";                  \\N different objects (letters)<br/>Permute(0);                     \\(space char avoids MSb termination)<br/>]</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">zkl: Utils.Helpers.permute(\"rose\").apply(\"concat\")<br/>L(\"rose\",\"roes\",\"reos\",\"eros\",\"erso\",\"reso\",\"rseo\",\"rsoe\",\"sroe\",\"sreo\",...)<br/>\u00a0<br/>zkl: Utils.Helpers.permute(\"rose\").len()<br/>24<br/>\u00a0<br/>zkl: Utils.Helpers.permute(T(1,2,3,4))<br/>L(L(1,2,3,4),L(1,2,4,3),L(1,4,2,3),L(4,1,2,3),L(4,1,3,2),L(1,4,3,2),L(1,3,4,2),L(1,3,2,4),...)</pre>"}]}