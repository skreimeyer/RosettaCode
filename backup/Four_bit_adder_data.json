{"task": "Four_bit_adder", "blocks": [{"lang": "Ada", "loc": 25, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">type</span> Four_Bits <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Half_Adder <span class=\"br0\">(</span>Input_1, Input_2\u00a0: Boolean; Output, Carry\u00a0: <span class=\"kw3\">out</span> Boolean<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Output\u00a0:= Input_1 <span class=\"kw2\">xor</span> Input_2;<br/>   Carry \u00a0:= Input_1 <span class=\"kw2\">and</span> Input_2;<br/><span class=\"kw1\">end</span> Half_Adder;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Full_Adder <span class=\"br0\">(</span>Input_1, Input_2\u00a0: Boolean; Output\u00a0: <span class=\"kw3\">out</span> Boolean; Carry\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Boolean<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   T_1, T_2, T_3\u00a0: Boolean;<br/><span class=\"kw1\">begin</span><br/>   Half_Adder <span class=\"br0\">(</span>Input_1, Input_2, T_1, T_2<span class=\"br0\">)</span>;<br/>   Half_Adder <span class=\"br0\">(</span>Carry, T_1, Output, T_3<span class=\"br0\">)</span>;<br/>   Carry\u00a0:= T_2 <span class=\"kw2\">or</span> T_3;<br/><span class=\"kw1\">end</span> Full_Adder;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Four_Bits_Adder <span class=\"br0\">(</span>A, B\u00a0: Four_Bits; C\u00a0: <span class=\"kw3\">out</span> Four_Bits; Carry\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Boolean<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Full_Adder <span class=\"br0\">(</span>A <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, B <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, C <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, Carry<span class=\"br0\">)</span>;<br/>   Full_Adder <span class=\"br0\">(</span>A <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, B <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, C <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, Carry<span class=\"br0\">)</span>;<br/>   Full_Adder <span class=\"br0\">(</span>A <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, B <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, C <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, Carry<span class=\"br0\">)</span>;<br/>   Full_Adder <span class=\"br0\">(</span>A <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, B <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, C <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Carry<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Four_Bits_Adder;<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 42, "block": "<pre class=\"autohotkey highlighted_source\">A <span class=\"sy0\">:=</span> <span class=\"nu0\">13</span><br/>B <span class=\"sy0\">:=</span> <span class=\"nu0\">9</span><br/>N <span class=\"sy0\">:=</span> FourBitAdd<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% A <span class=\"st0\">\" + \"</span> B <span class=\"st0\">\":`n\"</span><br/>\t<span class=\"sy0\">.</span> GetBin4<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"st0\">\" + \"</span> GetBin4<span class=\"br0\">(</span>B<span class=\"br0\">)</span> <span class=\"st0\">\" = \"</span> N<span class=\"sy0\">.</span>S <span class=\"st0\">\" (Carry = \"</span> N<span class=\"sy0\">.</span>C <span class=\"st0\">\")\"</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>Xor<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>~A <span class=\"sy0\">&amp;</span> B<span class=\"br0\">)</span> | <span class=\"br0\">(</span>A <span class=\"sy0\">&amp;</span> ~B<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>HalfAdd<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"st0\">\"S\"</span>: Xor<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span>: A <span class=\"sy0\">&amp;</span> B<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>FullAdd<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tX <span class=\"sy0\">:=</span> HalfAdd<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> C<span class=\"br0\">)</span><br/>\tY <span class=\"sy0\">:=</span> HalfAdd<span class=\"br0\">(</span>B<span class=\"sy0\">,</span> X<span class=\"sy0\">.</span>S<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"st0\">\"S\"</span>: Y<span class=\"sy0\">.</span>S<span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span>: X<span class=\"sy0\">.</span>C | Y<span class=\"sy0\">.</span>C<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>FourBitAdd<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tA <span class=\"sy0\">:=</span> GetFourBits<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>\tB <span class=\"sy0\">:=</span> GetFourBits<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>\tX <span class=\"sy0\">:=</span> FullAdd<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> C<span class=\"br0\">)</span><br/>\tY <span class=\"sy0\">:=</span> FullAdd<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> X<span class=\"sy0\">.</span>C<span class=\"br0\">)</span><br/>\tW <span class=\"sy0\">:=</span> FullAdd<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Y<span class=\"sy0\">.</span>C<span class=\"br0\">)</span><br/>\tZ <span class=\"sy0\">:=</span> FullAdd<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> W<span class=\"sy0\">.</span>C<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"st0\">\"S\"</span>: Z<span class=\"sy0\">.</span>S W<span class=\"sy0\">.</span>S Y<span class=\"sy0\">.</span>S X<span class=\"sy0\">.</span>S<span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span>: Z<span class=\"sy0\">.</span>C<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>GetFourBits<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>N <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || N <span class=\"sy0\">&gt;</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> StrSplit<span class=\"br0\">(</span>GetBin4<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>GetBin4<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">4</span><br/>\t\tRes <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>N<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> Res<span class=\"sy0\">,</span> N <span class=\"sy0\">:=</span> N <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> Res<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 42, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _NOT<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <span class=\"re0\">$_A</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_NOT</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _AND<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/BitAND.htm\"><span class=\"kw3\">BitAND</span></a><span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_AND</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _OR<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/BitOR.htm\"><span class=\"kw3\">BitOR</span></a><span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_OR</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _XOR<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> _OR<span class=\"br0\">(</span> _<br/>\t\t_AND<span class=\"br0\">(</span> <span class=\"re0\">$_A</span><span class=\"sy0\">,</span> _NOT<span class=\"br0\">(</span><span class=\"re0\">$_B</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> _<br/>\t\t_AND<span class=\"br0\">(</span> _NOT<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_XOR</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _HalfAdder<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ByRef</span></a> <span class=\"re0\">$_CO</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$_CO</span> <span class=\"sy0\">=</span> _AND<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> _XOR<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_HalfAdder</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _FullAdder<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"sy0\">,</span> <span class=\"re0\">$_CI</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ByRef</span></a> <span class=\"re0\">$_CO</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$CO1</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO2</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q1</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q2</span><br/>\t<span class=\"re0\">$Q1</span> <span class=\"sy0\">=</span> _HalfAdder<span class=\"br0\">(</span><span class=\"re0\">$_A</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO1</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$Q2</span> <span class=\"sy0\">=</span> _HalfAdder<span class=\"br0\">(</span><span class=\"re0\">$Q1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_CI</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO2</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$_CO</span> <span class=\"sy0\">=</span> _OR<span class=\"br0\">(</span><span class=\"re0\">$CO2</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$Q2</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_FullAdder</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _4BitAdder<span class=\"br0\">(</span><span class=\"re0\">$_A1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_A2</span><span class=\"sy0\">,</span> <span class=\"re0\">$_A3</span><span class=\"sy0\">,</span> <span class=\"re0\">$_A4</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B2</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B3</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B4</span><span class=\"sy0\">,</span> <span class=\"re0\">$_CI</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ByRef</span></a> <span class=\"re0\">$_CO</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$CO1</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO2</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO3</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO4</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q1</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q2</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q3</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q4</span><br/>\t<span class=\"re0\">$Q1</span> <span class=\"sy0\">=</span> _FullAdder<span class=\"br0\">(</span><span class=\"re0\">$_A4</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B4</span><span class=\"sy0\">,</span> <span class=\"re0\">$_CI</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO1</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$Q2</span> <span class=\"sy0\">=</span> _FullAdder<span class=\"br0\">(</span><span class=\"re0\">$_A3</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B3</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO1</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO2</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$Q3</span> <span class=\"sy0\">=</span> _FullAdder<span class=\"br0\">(</span><span class=\"re0\">$_A2</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B2</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO2</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO3</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$Q4</span> <span class=\"sy0\">=</span> _FullAdder<span class=\"br0\">(</span><span class=\"re0\">$_A1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_B1</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO3</span><span class=\"sy0\">,</span> <span class=\"re0\">$CO4</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$_CO</span> <span class=\"sy0\">=</span> <span class=\"re0\">$CO4</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$Q4</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$Q3</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$Q2</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$Q1</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_4BitAdder</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 138, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>:: \":main\" is where all the non-logic-gate stuff happens</span><br/>:<span class=\"re0\">main</span><br/><span class=\"co2\">:: User input two 4-digit binary numbers</span><br/><span class=\"co2\">:: There is no error checking for these numbers, however if the first 4 digits of both inputs are in binary...</span><br/><span class=\"co2\">:: The program will use them. All non-binary numbers are treated as 0s, but having less than 4 digits will crash it</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p \"input1=First 4-Bit Binary Number: \"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p \"input2=Second 4-Bit Binary Number: \"<br/><span class=\"co2\"><br/>:: Put the first 4 digits of the binary numbers and separate them into \"A[]\" for input A and \"B[]\" for input B</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,3<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> A<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=<span class=\"sy0\">!</span><span class=\"re2\">input1:~%%<span class=\"re3\">i</span>,1</span><span class=\"sy0\">!</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> B<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=<span class=\"sy0\">!</span><span class=\"re2\">input2:~%%<span class=\"re3\">i</span>,1</span><span class=\"sy0\">!</span><br/><span class=\"sy0\">)</span><br/><span class=\"co2\"><br/>:: Run the 4-bit Adder with \"A[]\" and \"B[]\" as parameters. The program supports a 9th parameter for a Carry input</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_4bitAdder <span class=\"sy0\">%</span><span class=\"re3\">A3</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">A2</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">A1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">A0</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">B3</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">B2</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">B1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">B0</span><span class=\"sy0\">%</span> 0<br/><span class=\"co2\"><br/>:: Display the answer and exit</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">input1</span><span class=\"sy0\">%</span> + <span class=\"sy0\">%</span><span class=\"re3\">input2</span><span class=\"sy0\">%</span> = <span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%%</span><span class=\"re3\">outputS4</span><span class=\"sy0\">%%</span><span class=\"re3\">outputS3</span><span class=\"sy0\">%%</span><span class=\"re3\">outputS2</span><span class=\"sy0\">%%</span><span class=\"re3\">outputS1</span><span class=\"sy0\">%</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:: Function for the 4-bit Adder following the logic given</span><br/>:<span class=\"re0\">_4bitAdder</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA1=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA2=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA3=<span class=\"sy0\">%</span><span class=\"re3\">3</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA4=<span class=\"sy0\">%</span><span class=\"re3\">4</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB1=<span class=\"sy0\">%</span><span class=\"re3\">5</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB2=<span class=\"sy0\">%</span><span class=\"re3\">6</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB3=<span class=\"sy0\">%</span><span class=\"re3\">7</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB4=<span class=\"sy0\">%</span><span class=\"re3\">8</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC=<span class=\"sy0\">%</span><span class=\"re3\">9</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_FullAdder <span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputC</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputS1=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_FullAdder <span class=\"sy0\">%</span><span class=\"re3\">inputA2</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB2</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputC</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputS2=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_FullAdder <span class=\"sy0\">%</span><span class=\"re3\">inputA3</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB3</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputC</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputS3=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_FullAdder <span class=\"sy0\">%</span><span class=\"re3\">inputA4</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB4</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputC</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputS4=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span><br/><span class=\"co2\"><br/>:: In order return more than one number (of which is usually done via 'exit /b') we declare them while ending the local environment</span><br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputS1=<span class=\"sy0\">%</span><span class=\"re3\">outputS1</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputS2=<span class=\"sy0\">%</span><span class=\"re3\">outputS2</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputS3=<span class=\"sy0\">%</span><span class=\"re3\">outputS3</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputS4=<span class=\"sy0\">%</span><span class=\"re3\">outputS4</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputC=<span class=\"sy0\">%</span><span class=\"re3\">inputC</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:: Function for the 1-bit Adder following the logic given</span><br/>:<span class=\"re0\">_FullAdder</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC1=<span class=\"sy0\">%</span><span class=\"re3\">3</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_halfAdder <span class=\"sy0\">%</span><span class=\"re3\">inputA</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA1=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA2=<span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC2=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_HalfAdder <span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputC1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputS=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputC1=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_Or <span class=\"sy0\">%</span><span class=\"re3\">inputC1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputC2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputC=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputS=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputC=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:: Function for the half-bit adder following the logic given</span><br/>:<span class=\"re0\">_halfAdder</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA1=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA2=<span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB1=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB2=<span class=\"sy0\">%</span><span class=\"re3\">inputB1</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_XOr <span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputS=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_And <span class=\"sy0\">%</span><span class=\"re3\">inputA2</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputC=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputS=<span class=\"sy0\">%</span><span class=\"re3\">outputS</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"outputC=<span class=\"sy0\">%</span><span class=\"re3\">outputC</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:: Function for the XOR-gate following the logic given</span><br/>:<span class=\"re0\">_XOr</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA1=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB1=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_Not <span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA2=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_Not <span class=\"sy0\">%</span><span class=\"re3\">inputB1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB2=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_And <span class=\"sy0\">%</span><span class=\"re3\">inputA1</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputA=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_And <span class=\"sy0\">%</span><span class=\"re3\">inputA2</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB1</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> inputB=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_Or <span class=\"sy0\">%</span><span class=\"re3\">inputA</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">inputB</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> outputA=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><span class=\"co2\"><br/>:: As there is only one output, we can use 'exit /b {errorlevel}' to return a specified errorlevel</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">outputA</span><span class=\"sy0\">%</span><br/><span class=\"co2\"><br/>:: The basic 3 logic gates that every other funtion is composed of</span><br/>:<span class=\"re0\">_Not</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span>==0 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>:<span class=\"re0\">_Or</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span>==1 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>==1 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>:<span class=\"re0\">_And</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span>==1 <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>==1 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 60, "block": "<pre class=\"text highlighted_source\">100 S$ = \"1100 + 1100 = \"\u00a0: GOSUB 400<br/>110 S$ = \"1100 + 1101 = \"\u00a0: GOSUB 400<br/>120 S$ = \"1100 + 1110 = \"\u00a0: GOSUB 400<br/>130 S$ = \"1100 + 1111 = \"\u00a0: GOSUB 400<br/>140 S$ = \"1101 + 0000 = \"\u00a0: GOSUB 400<br/>150 S$ = \"1101 + 0001 = \"\u00a0: GOSUB 400<br/>160 S$ = \"1101 + 0010 = \"\u00a0: GOSUB 400<br/>170 S$ = \"1101 + 0011 = \"\u00a0: GOSUB 400<br/>180 END<br/>\u00a0<br/>400 A0 = VAL(MID$(S$, 4, 1))<br/>410 A1 = VAL(MID$(S$, 3, 1))<br/>420 A2 = VAL(MID$(S$, 2, 1))<br/>430 A3 = VAL(MID$(S$, 1, 1))<br/>440 B0 = VAL(MID$(S$, 11, 1))<br/>450 B1 = VAL(MID$(S$, 10, 1))<br/>460 B2 = VAL(MID$(S$, 9, 1))<br/>470 B3 = VAL(MID$(S$, 8, 1))<br/>480 GOSUB 600<br/>490 PRINT S$;<br/>\u00a0<br/>REM 4 BIT PRINT<br/>500 PRINT C;S3;S2;S1;S0<br/>510 RETURN<br/>\u00a0<br/>REM 4 BIT ADD<br/>REM  ADD A3 A2 A1 A0 TO B3 B2 B1 B0<br/>REM  RESULT IN S3 S2 S1 S0<br/>REM  CARRY IN C<br/>600 C = 0<br/>610 A = A0\u00a0: B = B0\u00a0: GOSUB 700\u00a0: S0 = S<br/>620 A = A1\u00a0: B = B1\u00a0: GOSUB 700\u00a0: S1 = S<br/>630 A = A2\u00a0: B = B2\u00a0: GOSUB 700\u00a0: S2 = S<br/>640 A = A3\u00a0: B = B3\u00a0: GOSUB 700\u00a0: S3 = S<br/>650 RETURN<br/>\u00a0<br/>REM FULL ADDER<br/>REM  ADD A + B + C<br/>REM  RESULT IN S<br/>REM  CARRY IN C<br/>700 BH = B\u00a0: B = C\u00a0: GOSUB 800\u00a0: C1 = C<br/>710 A = S\u00a0: B = BH\u00a0: GOSUB 800\u00a0: C2 = C<br/>720 C = C1 OR C2<br/>730 RETURN<br/>\u00a0<br/>REM HALF ADDER<br/>REM  ADD A + B<br/>REM  RESULT IN S<br/>REM  CARRY IN C<br/>800 GOSUB 900\u00a0: S = C<br/>810 C = A AND B<br/>820 RETURN<br/>\u00a0<br/>REM XOR GATE<br/>REM  A XOR B<br/>REM  RESULT IN C<br/>900 C = A AND NOT B<br/>910 D = B AND NOT A<br/>920 C = C OR D<br/>930 RETURN</pre>"}, {"lang": "C", "loc": 70, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">char</span> pin_t<span class=\"sy0\">;</span><br/><span class=\"co2\">#define IN const pin_t *</span><br/><span class=\"co2\">#define OUT pin_t *</span><br/><span class=\"co2\">#define PIN(X) pin_t _##X; pin_t *X = &amp; _##X;</span><br/><span class=\"co2\">#define V(X) (*(X))</span><br/>\u00a0<br/><span class=\"coMULTI\">/* a NOT that does not soil the rest of the host of the single bit */</span><br/><span class=\"co2\">#define NOT(X) (~(X)&amp;1)</span><br/>\u00a0<br/><span class=\"coMULTI\">/* a shortcut to \"implement\" a XOR using only NOT, AND and OR gates, as<br/>   task requirements constrain */</span><br/><span class=\"co2\">#define XOR(X,Y) ((NOT(X)&amp;(Y)) | ((X)&amp;NOT(Y)))</span><br/>\u00a0<br/><span class=\"kw4\">void</span> halfadder<span class=\"br0\">(</span>IN a<span class=\"sy0\">,</span> IN b<span class=\"sy0\">,</span> OUT s<span class=\"sy0\">,</span> OUT c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  V<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> XOR<span class=\"br0\">(</span>V<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  V<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> V<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> V<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fulladder<span class=\"br0\">(</span>IN a<span class=\"sy0\">,</span> IN b<span class=\"sy0\">,</span> IN ic<span class=\"sy0\">,</span> OUT s<span class=\"sy0\">,</span> OUT oc<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  PIN<span class=\"br0\">(</span>ps<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>pc<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>tc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  halfadder<span class=\"br0\">(</span><span class=\"coMULTI\">/*INPUT*/</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*OUTPUT*/</span>ps<span class=\"sy0\">,</span> pc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  halfadder<span class=\"br0\">(</span><span class=\"coMULTI\">/*INPUT*/</span>ps<span class=\"sy0\">,</span> ic<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*OUTPUT*/</span>s<span class=\"sy0\">,</span> tc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  V<span class=\"br0\">(</span>oc<span class=\"br0\">)</span> <span class=\"sy0\">=</span> V<span class=\"br0\">(</span>tc<span class=\"br0\">)</span> <span class=\"sy0\">|</span> V<span class=\"br0\">(</span>pc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fourbitsadder<span class=\"br0\">(</span>IN a0<span class=\"sy0\">,</span> IN a1<span class=\"sy0\">,</span> IN a2<span class=\"sy0\">,</span> IN a3<span class=\"sy0\">,</span><br/>\t\t   IN b0<span class=\"sy0\">,</span> IN b1<span class=\"sy0\">,</span> IN b2<span class=\"sy0\">,</span> IN b3<span class=\"sy0\">,</span><br/>\t\t   OUT o0<span class=\"sy0\">,</span> OUT o1<span class=\"sy0\">,</span> OUT o2<span class=\"sy0\">,</span> OUT o3<span class=\"sy0\">,</span><br/>\t\t   OUT overflow<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  PIN<span class=\"br0\">(</span>zero<span class=\"br0\">)</span><span class=\"sy0\">;</span> V<span class=\"br0\">(</span>zero<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  PIN<span class=\"br0\">(</span>tc0<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>tc1<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>tc2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  fulladder<span class=\"br0\">(</span><span class=\"coMULTI\">/*INPUT*/</span>a0<span class=\"sy0\">,</span> b0<span class=\"sy0\">,</span> zero<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*OUTPUT*/</span>o0<span class=\"sy0\">,</span> tc0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  fulladder<span class=\"br0\">(</span><span class=\"coMULTI\">/*INPUT*/</span>a1<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> tc0<span class=\"sy0\">,</span>  <span class=\"coMULTI\">/*OUTPUT*/</span>o1<span class=\"sy0\">,</span> tc1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  fulladder<span class=\"br0\">(</span><span class=\"coMULTI\">/*INPUT*/</span>a2<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> tc1<span class=\"sy0\">,</span>  <span class=\"coMULTI\">/*OUTPUT*/</span>o2<span class=\"sy0\">,</span> tc2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  fulladder<span class=\"br0\">(</span><span class=\"coMULTI\">/*INPUT*/</span>a3<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span> tc2<span class=\"sy0\">,</span>  <span class=\"coMULTI\">/*OUTPUT*/</span>o3<span class=\"sy0\">,</span> overflow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  PIN<span class=\"br0\">(</span>a0<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>a1<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>a2<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>a3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  PIN<span class=\"br0\">(</span>b0<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>b1<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>b2<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>b3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  PIN<span class=\"br0\">(</span>s0<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span> PIN<span class=\"br0\">(</span>s3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  PIN<span class=\"br0\">(</span>overflow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  V<span class=\"br0\">(</span>a3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> V<span class=\"br0\">(</span>b3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  V<span class=\"br0\">(</span>a2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> V<span class=\"br0\">(</span>b2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  V<span class=\"br0\">(</span>a1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> V<span class=\"br0\">(</span>b1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  V<span class=\"br0\">(</span>a0<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> V<span class=\"br0\">(</span>b0<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  fourbitsadder<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> a3<span class=\"sy0\">,</span> <span class=\"coMULTI\">/* INPUT */</span><br/>\t\tb0<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span><br/>\t\ts0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3<span class=\"sy0\">,</span> <span class=\"coMULTI\">/* OUTPUT */</span><br/>\t\toverflow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d%d%d%d +\u00a0%d%d%d%d =\u00a0%d%d%d%d, overflow =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t V<span class=\"br0\">(</span>a3<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>a2<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>a1<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>a0<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t V<span class=\"br0\">(</span>b3<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>b2<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>b1<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>b0<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t V<span class=\"br0\">(</span>s3<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">,</span> V<span class=\"br0\">(</span>s0<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t V<span class=\"br0\">(</span>overflow<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 130, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCodeTasks<span class=\"sy0\">.</span><span class=\"me1\">FourBitAdder</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> BitAdderOutput<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> S <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> C <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> S <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"C\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> C <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> Nibble<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _1 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _2 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _3 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _4 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span> _4 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">+</span> <span class=\"br0\">(</span> _3 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">+</span> <span class=\"br0\">(</span> _2 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">+</span> <span class=\"br0\">(</span> _1 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> FourBitAdderOutput<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> Nibble N <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> C <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> N<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"c\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> C <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> LogicGates<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// Basic Gates</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Not <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>A<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> And <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> A <span class=\"sy0\">&amp;&amp;</span> B<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Or <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> A <span class=\"sy0\">||</span> B<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Composite Gates</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Xor <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span> <span class=\"br0\">{</span>\t<span class=\"kw1\">return</span> Or <span class=\"br0\">(</span> And <span class=\"br0\">(</span> A, Not <span class=\"br0\">(</span> B <span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"br0\">(</span> And <span class=\"br0\">(</span> Not <span class=\"br0\">(</span> A <span class=\"br0\">)</span>, B <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> ConstructiveBlocks<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BitAdderOutput HalfAdder <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitAdderOutput <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> S <span class=\"sy0\">=</span> LogicGates<span class=\"sy0\">.</span><span class=\"me1\">Xor</span> <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span>, C <span class=\"sy0\">=</span> LogicGates<span class=\"sy0\">.</span><span class=\"me1\">And</span> <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BitAdderOutput FullAdder <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B, <span class=\"kw4\">bool</span> CI <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tBitAdderOutput HA1 <span class=\"sy0\">=</span> HalfAdder <span class=\"br0\">(</span> CI, A <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput HA2 <span class=\"sy0\">=</span> HalfAdder <span class=\"br0\">(</span> HA1<span class=\"sy0\">.</span><span class=\"me1\">S</span>, B <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitAdderOutput <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> S <span class=\"sy0\">=</span> HA2<span class=\"sy0\">.</span><span class=\"me1\">S</span>, C <span class=\"sy0\">=</span> LogicGates<span class=\"sy0\">.</span><span class=\"me1\">Or</span> <span class=\"br0\">(</span> HA1<span class=\"sy0\">.</span><span class=\"me1\">C</span>, HA2<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> FourBitAdderOutput FourBitAdder <span class=\"br0\">(</span> Nibble A, Nibble B, <span class=\"kw4\">bool</span> CI <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\tBitAdderOutput FA1 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_1, B<span class=\"sy0\">.</span>_1, CI <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput FA2 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_2, B<span class=\"sy0\">.</span>_2, FA1<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput FA3 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_3, B<span class=\"sy0\">.</span>_3, FA2<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput FA4 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_4, B<span class=\"sy0\">.</span>_4, FA3<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> FourBitAdderOutput <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> N <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Nibble <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> _1 <span class=\"sy0\">=</span> FA1<span class=\"sy0\">.</span><span class=\"me1\">S</span>, _2 <span class=\"sy0\">=</span> FA2<span class=\"sy0\">.</span><span class=\"me1\">S</span>, _3 <span class=\"sy0\">=</span> FA3<span class=\"sy0\">.</span><span class=\"me1\">S</span>, _4 <span class=\"sy0\">=</span> FA4<span class=\"sy0\">.</span><span class=\"me1\">S</span> <span class=\"br0\">}</span>, C <span class=\"sy0\">=</span> FA4<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Test <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Four Bit Adder\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tNibble A <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Nibble <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> _1 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _2 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _3 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _4 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\tNibble B <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Nibble <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> _1 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _2 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _3 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _4 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_1 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_2 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_3 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_4 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_1 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">32</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_2 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">64</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">64</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_3 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">128</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">128</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_4 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"{0} + {1} = {2}\"</span>, A<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>, B<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>, FourBitAdder<span class=\"br0\">(</span> A, B, <span class=\"kw1\">false</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 130, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCodeTasks<span class=\"sy0\">.</span><span class=\"me1\">FourBitAdder</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> BitAdderOutput<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> S <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> C <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> S <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"C\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> C <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> Nibble<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _1 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _2 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _3 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> _4 <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span> _4 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">+</span> <span class=\"br0\">(</span> _3 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">+</span> <span class=\"br0\">(</span> _2 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">+</span> <span class=\"br0\">(</span> _1 <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> FourBitAdderOutput<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> Nibble N <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> C <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> N<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"c\"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> C <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> LogicGates<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// Basic Gates</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Not <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>A<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> And <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> A <span class=\"sy0\">&amp;&amp;</span> B<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Or <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> A <span class=\"sy0\">||</span> B<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Composite Gates</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> Xor <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span> <span class=\"br0\">{</span>\t<span class=\"kw1\">return</span> Or <span class=\"br0\">(</span> And <span class=\"br0\">(</span> A, Not <span class=\"br0\">(</span> B <span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"br0\">(</span> And <span class=\"br0\">(</span> Not <span class=\"br0\">(</span> A <span class=\"br0\">)</span>, B <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> ConstructiveBlocks<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BitAdderOutput HalfAdder <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitAdderOutput <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> S <span class=\"sy0\">=</span> LogicGates<span class=\"sy0\">.</span><span class=\"me1\">Xor</span> <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span>, C <span class=\"sy0\">=</span> LogicGates<span class=\"sy0\">.</span><span class=\"me1\">And</span> <span class=\"br0\">(</span> A, B <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BitAdderOutput FullAdder <span class=\"br0\">(</span> <span class=\"kw4\">bool</span> A, <span class=\"kw4\">bool</span> B, <span class=\"kw4\">bool</span> CI <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tBitAdderOutput HA1 <span class=\"sy0\">=</span> HalfAdder <span class=\"br0\">(</span> CI, A <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput HA2 <span class=\"sy0\">=</span> HalfAdder <span class=\"br0\">(</span> HA1<span class=\"sy0\">.</span><span class=\"me1\">S</span>, B <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitAdderOutput <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> S <span class=\"sy0\">=</span> HA2<span class=\"sy0\">.</span><span class=\"me1\">S</span>, C <span class=\"sy0\">=</span> LogicGates<span class=\"sy0\">.</span><span class=\"me1\">Or</span> <span class=\"br0\">(</span> HA1<span class=\"sy0\">.</span><span class=\"me1\">C</span>, HA2<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> FourBitAdderOutput FourBitAdder <span class=\"br0\">(</span> Nibble A, Nibble B, <span class=\"kw4\">bool</span> CI <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\tBitAdderOutput FA1 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_1, B<span class=\"sy0\">.</span>_1, CI <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput FA2 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_2, B<span class=\"sy0\">.</span>_2, FA1<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput FA3 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_3, B<span class=\"sy0\">.</span>_3, FA2<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tBitAdderOutput FA4 <span class=\"sy0\">=</span> FullAdder <span class=\"br0\">(</span> A<span class=\"sy0\">.</span>_4, B<span class=\"sy0\">.</span>_4, FA3<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> FourBitAdderOutput <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> N <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Nibble <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> _1 <span class=\"sy0\">=</span> FA1<span class=\"sy0\">.</span><span class=\"me1\">S</span>, _2 <span class=\"sy0\">=</span> FA2<span class=\"sy0\">.</span><span class=\"me1\">S</span>, _3 <span class=\"sy0\">=</span> FA3<span class=\"sy0\">.</span><span class=\"me1\">S</span>, _4 <span class=\"sy0\">=</span> FA4<span class=\"sy0\">.</span><span class=\"me1\">S</span> <span class=\"br0\">}</span>, C <span class=\"sy0\">=</span> FA4<span class=\"sy0\">.</span><span class=\"me1\">C</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Test <span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Four Bit Adder\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tNibble A <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Nibble <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> _1 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _2 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _3 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _4 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\tNibble B <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Nibble <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> _1 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _2 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _3 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>, _4 <span class=\"sy0\">=</span> <span class=\"kw1\">false</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_1 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_2 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_3 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tA<span class=\"sy0\">.</span>_4 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">16</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_1 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">32</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_2 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">64</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">64</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_3 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&amp;</span> <span class=\"nu0\">128</span> <span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">128</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tB<span class=\"sy0\">.</span>_4 <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"st0\">\"{0} + {1} = {2}\"</span>, A<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>, B<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>, FourBitAdder<span class=\"br0\">(</span> A, B, <span class=\"kw1\">false</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 36, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>adder<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> clojure<span class=\"sy0\">.</span>test<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> xor<span class=\"sy0\">-</span>gate <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> a <span class=\"br0\">(</span><span class=\"kw1\">not</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> b <span class=\"br0\">(</span><span class=\"kw1\">not</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> half<span class=\"sy0\">-</span>adder <span class=\"br0\">[</span>a b<span class=\"br0\">]</span><br/>  <span class=\"st0\">\"output: (S C)\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>xor<span class=\"sy0\">-</span>gate a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>list <span class=\"br0\">(</span><span class=\"kw1\">and</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> full<span class=\"sy0\">-</span>adder <span class=\"br0\">[</span>a b c<span class=\"br0\">]</span><br/>  <span class=\"st0\">\"output: (C S)\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>HA<span class=\"sy0\">-</span>ca <span class=\"br0\">(</span>half<span class=\"sy0\">-</span>adder c a<span class=\"br0\">)</span><br/>        HA<span class=\"sy0\">-</span>ca<span class=\"sy0\">-&gt;</span>sb <span class=\"br0\">(</span>half<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">first</span> HA<span class=\"sy0\">-</span>ca<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>second HA<span class=\"sy0\">-</span>ca<span class=\"br0\">)</span> <span class=\"br0\">(</span>second HA<span class=\"sy0\">-</span>ca<span class=\"sy0\">-&gt;</span>sb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>list <span class=\"br0\">(</span><span class=\"kw1\">first</span> HA<span class=\"sy0\">-</span>ca<span class=\"sy0\">-&gt;</span>sb<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> n<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder<br/>  <span class=\"st0\">\"first bits on the list are low order bits<br/>1 = true<br/>2 = false true<br/>3 = true true<br/>4 = false false true...\"</span><br/>  can add numbers of different bit<span class=\"sy0\">-</span>length<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">-</span>bits b<span class=\"sy0\">-</span>bits<span class=\"br0\">]</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder a<span class=\"sy0\">-</span>bits b<span class=\"sy0\">-</span>bits false<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">-</span>bits b<span class=\"sy0\">-</span>bits carry<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>added <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">first</span> a<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> b<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span> carry<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> a<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> b<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> carry <span class=\"br0\">(</span>list carry<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>second added<span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span>next a<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span> <span class=\"br0\">(</span>next b<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> added<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;use:</span><br/><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder <span class=\"br0\">[</span>true true true true true true<span class=\"br0\">]</span> <span class=\"br0\">[</span>true true true true true true<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>false true true true true true true<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 110, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> test-<span class=\"kw2\">add</span><span class=\"sy0\">.</span><br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">special-names</span><span class=\"sy0\">.</span><br/>           <span class=\"kw3\">class</span> bin <span class=\"kw3\">is</span> <span class=\"st0\">\"0\"</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> parms<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> a-<span class=\"kw3\">in</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> b-<span class=\"kw3\">in</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> r-out <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> c-out <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Enter 'A' value (4-bits binary): \"</span><br/>               <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           <span class=\"kw2\">accept</span> a-<span class=\"kw3\">in</span><br/>           <span class=\"kw1\">if</span> a-<span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"br0\">)</span> <span class=\"kw3\">not</span> bin<br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"A is not binary\"</span><br/>               <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Enter 'B' value (4-bits binary): \"</span><br/>               <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           <span class=\"kw2\">accept</span> b-<span class=\"kw3\">in</span><br/>           <span class=\"kw1\">if</span> b-<span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"br0\">)</span> <span class=\"kw3\">not</span> bin<br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"B is not binary\"</span><br/>               <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw2\">call</span> <span class=\"st0\">\"add-4b\"</span> <span class=\"kw3\">using</span> parms<br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Carry \"</span> c-out <span class=\"st0\">\" result \"</span> r-out<br/>           <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> test-<span class=\"kw2\">add</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> add-4b<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> wk <span class=\"kw3\">binary</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> i <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">3</span> a-reg <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">3</span> b-reg <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">3</span> c-reg <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">3</span> r-reg <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> a <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> b <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> c <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> a-<span class=\"kw3\">not</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> b-<span class=\"kw3\">not</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> c-<span class=\"kw3\">not</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> ha-1s <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> ha-1c <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> ha-1s-<span class=\"kw3\">not</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> ha-1c-<span class=\"kw3\">not</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> ha-2s <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> ha-2c <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> fa-s <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> fa-c <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> parms<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> a-<span class=\"kw3\">in</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> b-<span class=\"kw3\">in</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> r-out <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> c-out <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> parms<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">initialize</span> wk<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw2\">until</span> i &gt; <span class=\"nu0\">4</span><br/>               <span class=\"kw2\">move</span> a-<span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\"> - </span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> a-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>               <span class=\"kw2\">move</span> b-<span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\"> - </span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> b-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw2\">perform</span> simulate-adder <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>               <span class=\"kw2\">until</span> i &gt; <span class=\"nu0\">4</span><br/>           <span class=\"kw2\">move</span> c-reg <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> c-out<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw2\">until</span> i &gt; <span class=\"nu0\">4</span><br/>               <span class=\"kw2\">move</span> r-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">to</span> r-out <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\"> - </span>i:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw2\">exit</span> <span class=\"kw3\">program</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       simulate-adder <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">move</span> a-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">to</span> a<br/>           <span class=\"kw2\">move</span> b-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">to</span> b<br/>           <span class=\"kw2\">move</span> c-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">to</span> c<br/>           <span class=\"kw2\">add</span> a -<span class=\"nu0\">1</span> <span class=\"kw2\">giving</span> a-<span class=\"kw3\">not</span><br/>           <span class=\"kw2\">add</span> b -<span class=\"nu0\">1</span> <span class=\"kw2\">giving</span> b-<span class=\"kw3\">not</span><br/>           <span class=\"kw2\">add</span> c -<span class=\"nu0\">1</span> <span class=\"kw2\">giving</span> c-<span class=\"kw3\">not</span><br/>\u00a0<br/>           <span class=\"kw2\">compute</span> ha-1s <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">max</span> <span class=\"br0\">(</span><br/>               <span class=\"kw3\">function</span> <span class=\"kw4\">min</span> <span class=\"br0\">(</span> a b-<span class=\"kw3\">not</span> <span class=\"br0\">)</span><br/>               <span class=\"kw3\">function</span> <span class=\"kw4\">min</span> <span class=\"br0\">(</span> b a-<span class=\"kw3\">not</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"kw2\">compute</span> ha-1c <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">min</span> <span class=\"br0\">(</span> a b <span class=\"br0\">)</span><br/>           <span class=\"kw2\">add</span> ha-1s -<span class=\"nu0\">1</span> <span class=\"kw2\">giving</span> ha-1s-<span class=\"kw3\">not</span><br/>           <span class=\"kw2\">add</span> ha-1c -<span class=\"nu0\">1</span> <span class=\"kw2\">giving</span> ha-1c-<span class=\"kw3\">not</span><br/>\u00a0<br/>           <span class=\"kw2\">compute</span> ha-2s <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">max</span> <span class=\"br0\">(</span><br/>               <span class=\"kw3\">function</span> <span class=\"kw4\">min</span> <span class=\"br0\">(</span> c ha-1s-<span class=\"kw3\">not</span> <span class=\"br0\">)</span><br/>               <span class=\"kw3\">function</span> <span class=\"kw4\">min</span> <span class=\"br0\">(</span> ha-1s c-<span class=\"kw3\">not</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>           <span class=\"kw2\">compute</span> ha-2c <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">min</span> <span class=\"br0\">(</span> c ha-1c <span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"kw2\">compute</span> fa-s <span class=\"sy0\">=</span> ha-2s<br/>           <span class=\"kw2\">compute</span> fa-c <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">max</span> <span class=\"br0\">(</span> ha-1c ha-2c <span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"kw2\">move</span> fa-s <span class=\"kw2\">to</span> r-reg <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> fa-c <span class=\"kw2\">to</span> c-reg <span class=\"br0\">(</span>i<span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> add-4b<span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 41, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># ATOMIC GATES</span><br/>not_gate = <span class=\"br0\">(</span>bit<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>bit<span class=\"br0\">]</span><br/>\u00a0<br/>and_gate = <span class=\"br0\">(</span>bit1<span class=\"sy0\">,</span> bit2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  bit1 <span class=\"kw2\">and</span> bit2<br/>\u00a0<br/>or_gate = <span class=\"br0\">(</span>bit1<span class=\"sy0\">,</span> bit2<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  bit1 <span class=\"kw2\">or</span> bit2<br/>\u00a0<br/><span class=\"co1\"># COMPOSED GATES</span><br/>xor_gate = <span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  X = and_gate A<span class=\"sy0\">,</span> not_gate<span class=\"br0\">(</span>B<span class=\"br0\">)</span><br/>  Y = and_gate not_gate<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">,</span> B<br/>  or_gate X<span class=\"sy0\">,</span> Y<br/>\u00a0<br/>half_adder = <span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  S = xor_gate A<span class=\"sy0\">,</span> B<br/>  C = and_gate A<span class=\"sy0\">,</span> B<br/>  <span class=\"br0\">[</span>S<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><br/>\u00a0<br/>full_adder = <span class=\"br0\">(</span>C0<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> B<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">[</span>SA<span class=\"sy0\">,</span> CA<span class=\"br0\">]</span> = half_adder C0<span class=\"sy0\">,</span> A<br/>  <span class=\"br0\">[</span>SB<span class=\"sy0\">,</span> CB<span class=\"br0\">]</span> = half_adder SA<span class=\"sy0\">,</span> B<br/>  S = SB<br/>  C = or_gate CA<span class=\"sy0\">,</span> CB<br/>  <span class=\"br0\">[</span>S<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><br/>\u00a0<br/>n_bit_adder = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"br0\">(</span>A_bits<span class=\"sy0\">,</span> B_bits<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    s = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    C = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>S<span class=\"sy0\">,</span> C<span class=\"br0\">]</span> = full_adder C<span class=\"sy0\">,</span> A_bits<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> B_bits<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      s.<span class=\"me1\">push</span> S<br/>    <span class=\"br0\">[</span>s<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><br/>\u00a0<br/>adder = n_bit_adder<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>  <br/>console.<span class=\"me1\">log</span> adder <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 33, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; returns a list of bits: '(sum carry)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> half-adder <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">logxor</span> a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; returns a list of bits: '(sum, carry)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> full-adder <span class=\"br0\">(</span>a b c-in<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>*<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>h1 <span class=\"br0\">(</span>half-adder c-in a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>h2 <span class=\"br0\">(</span>half-adder <span class=\"br0\">(</span>first h1<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first h2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">logior</span> <span class=\"br0\">(</span>second h1<span class=\"br0\">)</span> <span class=\"br0\">(</span>second h2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; a and b are lists of 4 bits each</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>*<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>add-<span class=\"nu0\">1</span> <span class=\"br0\">(</span>full-adder <span class=\"br0\">(</span>fourth a<span class=\"br0\">)</span> <span class=\"br0\">(</span>fourth b<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>add-<span class=\"nu0\">2</span> <span class=\"br0\">(</span>full-adder <span class=\"br0\">(</span>third a<span class=\"br0\">)</span> <span class=\"br0\">(</span>third b<span class=\"br0\">)</span> <span class=\"br0\">(</span>second add-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>add-<span class=\"nu0\">3</span> <span class=\"br0\">(</span>full-adder <span class=\"br0\">(</span>second a<span class=\"br0\">)</span> <span class=\"br0\">(</span>second b<span class=\"br0\">)</span> <span class=\"br0\">(</span>second add-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>add-<span class=\"nu0\">4</span> <span class=\"br0\">(</span>full-adder <span class=\"br0\">(</span>first a<span class=\"br0\">)</span> <span class=\"br0\">(</span>first b<span class=\"br0\">)</span> <span class=\"br0\">(</span>second add-<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first add-<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>first add-<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>first add-<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>first add-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>second add-<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; '(0 0 0 0) and 0</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; '(1 1 1 1) and 0</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; '(1 1 1 1) and 0</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; '(0 0 0 1) and 1</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; '(1 1 1 0) and 1</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span>-bit-adder <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;; '(1 1 1 1) and 0</span><br/> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>main<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 67, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fourBitsAdder<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T a0<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T a1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T a2<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T a3<span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">in</span> T b0<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T b1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T b2<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T b3<span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">out</span> T o0<span class=\"sy0\">,</span> <span class=\"kw2\">out</span> T o1<span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">out</span> T o2<span class=\"sy0\">,</span> <span class=\"kw2\">out</span> T o3<span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">out</span> T overflow<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// A XOR using only NOT, AND and OR, as task requires.</span><br/>    <span class=\"kw4\">static</span> T xor<span class=\"br0\">(</span><span class=\"kw2\">in</span> T x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T y<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span>x <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"sy0\">~</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> halfAdder<span class=\"br0\">(</span><span class=\"kw2\">in</span> T a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T b<span class=\"sy0\">,</span><br/>                          <span class=\"kw2\">out</span> T s<span class=\"sy0\">,</span> <span class=\"kw2\">out</span> T c<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">=</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// s = a ^ b; // The built-in D xor.</span><br/>        c <span class=\"sy0\">=</span> a <span class=\"sy0\">&amp;</span> b<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> fullAdder<span class=\"br0\">(</span><span class=\"kw2\">in</span> T a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T b<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T ic<span class=\"sy0\">,</span><br/>                          <span class=\"kw2\">out</span> T s<span class=\"sy0\">,</span> <span class=\"kw2\">out</span> T oc<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        T ps<span class=\"sy0\">,</span> pc<span class=\"sy0\">,</span> tc<span class=\"sy0\">;</span><br/>\u00a0<br/>        halfAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span>   <span class=\"coMULTI\">/*out*/</span>ps<span class=\"sy0\">,</span> pc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        halfAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span>ps<span class=\"sy0\">,</span> ic<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*out*/</span>s<span class=\"sy0\">,</span> tc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        oc <span class=\"sy0\">=</span> tc <span class=\"sy0\">|</span> pc<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    T zero<span class=\"sy0\">,</span> tc0<span class=\"sy0\">,</span> tc1<span class=\"sy0\">,</span> tc2<span class=\"sy0\">;</span><br/>\u00a0<br/>    fullAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span>a0<span class=\"sy0\">,</span> b0<span class=\"sy0\">,</span> zero<span class=\"sy0\">,</span> <span class=\"coMULTI\">/*out*/</span>o0<span class=\"sy0\">,</span> tc0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fullAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span>a1<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> tc0<span class=\"sy0\">,</span>  <span class=\"coMULTI\">/*out*/</span>o1<span class=\"sy0\">,</span> tc1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fullAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span>a2<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> tc1<span class=\"sy0\">,</span>  <span class=\"coMULTI\">/*out*/</span>o2<span class=\"sy0\">,</span> tc2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fullAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span>a3<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span> tc2<span class=\"sy0\">,</span>  <span class=\"coMULTI\">/*out*/</span>o3<span class=\"sy0\">,</span> overflow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> T <span class=\"sy0\">=</span> <span class=\"kw4\">size_t</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isUnsigned<span class=\"sy0\">!</span>T<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> T one <span class=\"sy0\">=</span> T.<span class=\"me1\">max</span><span class=\"sy0\">,</span><br/>           zero <span class=\"sy0\">=</span> T.<span class=\"me1\">min</span><span class=\"sy0\">,</span><br/>           a0 <span class=\"sy0\">=</span> zero<span class=\"sy0\">,</span> a1 <span class=\"sy0\">=</span> one<span class=\"sy0\">,</span> a2 <span class=\"sy0\">=</span> zero<span class=\"sy0\">,</span> a3 <span class=\"sy0\">=</span> zero<span class=\"sy0\">,</span><br/>           b0 <span class=\"sy0\">=</span> zero<span class=\"sy0\">,</span> b1 <span class=\"sy0\">=</span> one<span class=\"sy0\">,</span> b2 <span class=\"sy0\">=</span> one<span class=\"sy0\">,</span>  b3 <span class=\"sy0\">=</span> one<span class=\"sy0\">;</span><br/>    T s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3<span class=\"sy0\">,</span> overflow<span class=\"sy0\">;</span><br/>\u00a0<br/>    fourBitsAdder<span class=\"br0\">(</span><span class=\"coMULTI\">/*in*/</span> a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> a3<span class=\"sy0\">,</span><br/>                  <span class=\"coMULTI\">/*in*/</span> b0<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span><br/>                  <span class=\"coMULTI\">/*out*/</span>s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3<span class=\"sy0\">,</span> overflow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      a3\u00a0%032b\"</span><span class=\"sy0\">,</span> a3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      a2\u00a0%032b\"</span><span class=\"sy0\">,</span> a2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      a1\u00a0%032b\"</span><span class=\"sy0\">,</span> a1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      a0\u00a0%032b\"</span><span class=\"sy0\">,</span> a0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      +\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      b3\u00a0%032b\"</span><span class=\"sy0\">,</span> b3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      b2\u00a0%032b\"</span><span class=\"sy0\">,</span> b2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      b1\u00a0%032b\"</span><span class=\"sy0\">,</span> b1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      b0\u00a0%032b\"</span><span class=\"sy0\">,</span> b0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      =\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      s3\u00a0%032b\"</span><span class=\"sy0\">,</span> s3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      s2\u00a0%032b\"</span><span class=\"sy0\">,</span> s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      s1\u00a0%032b\"</span><span class=\"sy0\">,</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"      s0\u00a0%032b\"</span><span class=\"sy0\">,</span> s0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"overflow\u00a0%032b\"</span><span class=\"sy0\">,</span> overflow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 47, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  use Bitwise<br/>  @bit_size 4<br/>\u00a0<br/>  def four_bit_adder(a, b) do           # returns pair {sum, carry}<br/>    a_bits = binary_string_to_bits(a)<br/>    b_bits = binary_string_to_bits(b)<br/>    Enum.zip(a_bits, b_bits)<br/>    |&gt; List.foldr({[], 0}, fn {a_bit, b_bit}, {acc, carry} -&gt;<br/>         {s, c} = full_adder(a_bit, b_bit, carry)<br/>         {[s | acc], c}<br/>       end)<br/>  end<br/>\u00a0<br/>  defp full_adder(a, b, c0) do<br/>    {s, c} = half_adder(c0, a)<br/>    {s, c1} = half_adder(s, b)<br/>    {s, bor(c, c1)}                     # returns pair {sum, carry}<br/>  end<br/>\u00a0<br/>  defp half_adder(a, b) do<br/>    {bxor(a, b), band(a, b)}            # returns pair {sum, carry}<br/>  end<br/>\u00a0<br/>  def int_to_binary_string(n) do<br/>    Integer.to_string(n,2) |&gt; String.rjust(@bit_size,\u00a0?0)<br/>  end<br/>\u00a0<br/>  defp binary_string_to_bits(s) do<br/>    String.codepoints(s) |&gt; Enum.map(fn bit -&gt; String.to_integer(bit) end)<br/>  end<br/>\u00a0<br/>  def task do<br/>    IO.puts \" A    B      A      B   C    S  sum\" <br/>    Enum.each(0..15, fn a -&gt;<br/>      bin_a = int_to_binary_string(a)<br/>      Enum.each(0..15, fn b -&gt;<br/>        bin_b = int_to_binary_string(b)<br/>        {sum, carry} = four_bit_adder(bin_a, bin_b)<br/>       \u00a0:io.format \"~2w + ~2w = ~s + ~s = ~w ~s = ~2w~n\",<br/>            [a, b, bin_a, bin_b, carry, Enum.join(sum), Integer.undigits([carry | sum], 2)]<br/>      end)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>RC.task</pre>"}, {"lang": "Erlang", "loc": 72, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> four_bit_adder <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>add_bits<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> create<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">add_bits</span><span class=\"br0\">(</span> <span class=\"re5\">Adder</span><span class=\"sy1\">,</span> <span class=\"re5\">A_bits</span><span class=\"sy1\">,</span> <span class=\"re5\">B_bits</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Adder</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">A_bits</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">B_bits</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Adder</span><span class=\"sy1\">,</span> <span class=\"re5\">Sum</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Sum</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create</span><span class=\"br0\">(</span> <span class=\"re5\">How_many_bits</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Full_adders</span> <span class=\"sy3\">=</span> <span class=\"re3\">connect_full_adders</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">full_adder_create</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">How_many_bits</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn_link</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">bit_adder_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Full_adders</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Adder</span> <span class=\"sy3\">=</span> <span class=\"re3\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">add_bits</span><span class=\"br0\">(</span> <span class=\"re5\">Adder</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">bit_adder_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Full_adders</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">As</span><span class=\"sy1\">,</span> <span class=\"re5\">Bs</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<span class=\"re5\">Sum</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">full_adder_sum</span><span class=\"br0\">(</span><span class=\"re5\">Adder</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Adder</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip3</span><span class=\"br0\">(</span><span class=\"re5\">Full_adders</span><span class=\"sy1\">,</span> <span class=\"re5\">As</span><span class=\"sy1\">,</span> <span class=\"re5\">Bs</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re5\">Carry</span> <span class=\"sy3\">=</span> <span class=\"kw1\">receive</span><br/>\t\t\t<span class=\"br0\">{</span>carry<span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">C</span><br/>\t\t\t<span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Sum</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re3\">bit_adder_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Full_adders</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">connect_full_adders</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Full_adder</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">Full_adders</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> connect_full_adders<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Full_adder</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Full_adders</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">connect_full_adders</span><span class=\"br0\">(</span> <span class=\"re5\">Full_adder</span><span class=\"sy1\">,</span> <span class=\"re5\">Previous_full_adder</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Previous_full_adder</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>carry_to<span class=\"sy1\">,</span> <span class=\"re5\">Full_adder</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Full_adder</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">half_adder</span><span class=\"br0\">(</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re3\">z_xor</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"kw2\">band</span> <span class=\"re5\">B</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">full_adder</span><span class=\"br0\">(</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Sum1</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry1</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">half_adder</span><span class=\"br0\">(</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Sum</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry2</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">half_adder</span><span class=\"br0\">(</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">Sum1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Sum</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry1</span> <span class=\"kw2\">bor</span> <span class=\"re5\">Carry2</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">full_adder_create</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">full_adder_loop</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> no_carry_pid<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">full_adder_loop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Carry</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry_to</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span>carry<span class=\"sy1\">,</span> <span class=\"re5\">New_carry</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">full_adder_loop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">New_carry</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry_to</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span>carry_to<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">full_adder_loop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Carry</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span>add<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<span class=\"br0\">{</span><span class=\"re5\">Sum</span><span class=\"sy1\">,</span> <span class=\"re5\">New_carry</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">full_adder</span><span class=\"br0\">(</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>sum<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Sum</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re3\">full_adder_loop_carry_pid</span><span class=\"br0\">(</span> <span class=\"re5\">Carry_to</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>carry<span class=\"sy1\">,</span> <span class=\"re5\">New_carry</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re3\">full_adder_loop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">New_carry</span><span class=\"sy1\">,</span> <span class=\"re5\">Carry_to</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">full_adder_loop_carry_pid</span><span class=\"br0\">(</span> no_carry_pid<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span><span class=\"sy1\">;</span><br/><span class=\"re3\">full_adder_loop_carry_pid</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">_Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">full_adder_sum</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>add<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span>sum<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">S</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">%% xor exists, this is another implementation.</span><br/><span class=\"re3\">z_xor</span><span class=\"br0\">(</span> <span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">A</span> <span class=\"kw2\">band</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span><span class=\"kw2\">bnot</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">bor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span><span class=\"kw2\">bnot</span> <span class=\"re5\">A</span><span class=\"br0\">)</span> <span class=\"kw2\">band</span> <span class=\"re5\">B</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">: \"NOT\" invert 1 and\u00a0;<br/>: \"XOR\" over over \"NOT\" and &gt;r swap \"NOT\" and r&gt; or\u00a0;<br/>: halfadder over over and &gt;r \"XOR\" r&gt;\u00a0;<br/>: fulladder halfadder &gt;r swap halfadder r&gt; or\u00a0;<br/>\u00a0<br/>: 4bitadder                            ( a3 a2 a1 a0 b3 b2 b1 b0 -- r3 r2 r1 r0 c)<br/>  4 roll 0  fulladder swap &gt;r &gt;r<br/>  3 roll r&gt; fulladder swap &gt;r &gt;r<br/>  2 roll r&gt; fulladder swap &gt;r fulladder r&gt; r&gt; r&gt; 3 roll<br/>;<br/>\u00a0<br/>: .add4 4bitadder 0 .r 4 0 do i 3 - abs roll 0 .r loop cr\u00a0;</pre>"}, {"lang": "Fortran", "loc": 77, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> logic<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> xor<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">xor</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>\u00a0<br/>  xor <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> b<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"br0\">(</span>b <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> a<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> xor<br/>\u00a0<br/><span class=\"kw1\">function</span> halfadder<span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">halfadder</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span><br/>\u00a0<br/>  halfadder <span class=\"sy0\">=</span> xor<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  c <span class=\"sy0\">=</span> a <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> b<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> halfadder<br/>\u00a0<br/><span class=\"kw1\">function</span> fulladder<span class=\"br0\">(</span>a, b, c0, c1<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">fulladder</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b, c0<br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c1</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">c2</span>, c3<br/>\u00a0<br/>  fulladder <span class=\"sy0\">=</span> halfadder<span class=\"br0\">(</span>halfadder<span class=\"br0\">(</span>c0, a, c2<span class=\"br0\">)</span>, b, c3<span class=\"br0\">)</span><br/>  c1 <span class=\"sy0\">=</span> c2 <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> c3<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> fulladder<br/>\u00a0<br/><span class=\"kw1\">subroutine</span> fourbitadder<span class=\"br0\">(</span>a, b, s<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">c0</span>, c1, c2<br/>\u00a0<br/>  s<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">.<span class=\"me1\">false</span>.</span>, c0<span class=\"br0\">)</span>  <br/>  s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, c0, c1<span class=\"br0\">)</span><br/>  s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, c1, c2<span class=\"br0\">)</span><br/>  s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, c2, s<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> fourbitadder<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> Four_bit_adder<br/>  <span class=\"kw3\">use</span> logic<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ai</span>, bi<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">si</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">15</span><br/>    a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span>; a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>; a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span>; a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>i, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>      ai <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">where</span><br/>      ai <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">where</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">15</span><br/>      b<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>j, <span class=\"nu0\">0</span><span class=\"br0\">)</span>; b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>; b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>j, <span class=\"nu0\">2</span><span class=\"br0\">)</span>; b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">btest</span><span class=\"br0\">(</span>j, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">where</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>        bi <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">where</span><br/>        bi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">where</span><br/>      <span class=\"kw1\">call</span> fourbitadder<span class=\"br0\">(</span>a, b, s<span class=\"br0\">)</span><br/>      <span class=\"kw1\">where</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        si <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">elsewhere</span><br/>        si <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">where</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(4i1,a,4i1,a,5i1)\"</span><span class=\"br0\">)</span> ai<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">\" + \"</span>, bi<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">\" = \"</span>, si<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span>  <br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> xor<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"kw4\">byte</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> a&amp;<span class=\"sy1\">(</span><span class=\"sy3\">^</span>b<span class=\"sy1\">)</span> <span class=\"sy3\">|</span> b&amp;<span class=\"sy1\">(</span><span class=\"sy3\">^</span>a<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ha<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> c <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> xor<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">),</span> a &amp; b<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> fa<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> c0 <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> c1 <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    sa<span class=\"sy1\">,</span> ca <span class=\"sy2\">:=</span> ha<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> c0<span class=\"sy1\">)</span><br/>    s<span class=\"sy1\">,</span> cb <span class=\"sy2\">:=</span> ha<span class=\"sy1\">(</span>sa<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/>    c1 <span class=\"sy2\">=</span> ca <span class=\"sy3\">|</span> cb<br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> add4<span class=\"sy1\">(</span>a3<span class=\"sy1\">,</span> a2<span class=\"sy1\">,</span> a1<span class=\"sy1\">,</span> a0<span class=\"sy1\">,</span> b3<span class=\"sy1\">,</span> b2<span class=\"sy1\">,</span> b1<span class=\"sy1\">,</span> b0 <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>v<span class=\"sy1\">,</span> s3<span class=\"sy1\">,</span> s2<span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> s0 <span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    s0<span class=\"sy1\">,</span> c0 <span class=\"sy2\">:=</span> fa<span class=\"sy1\">(</span>a0<span class=\"sy1\">,</span> b0<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    s1<span class=\"sy1\">,</span> c1 <span class=\"sy2\">:=</span> fa<span class=\"sy1\">(</span>a1<span class=\"sy1\">,</span> b1<span class=\"sy1\">,</span> c0<span class=\"sy1\">)</span><br/>    s2<span class=\"sy1\">,</span> c2 <span class=\"sy2\">:=</span> fa<span class=\"sy1\">(</span>a2<span class=\"sy1\">,</span> b2<span class=\"sy1\">,</span> c1<span class=\"sy1\">)</span><br/>    s3<span class=\"sy1\">,</span> v <span class=\"sy2\">=</span> fa<span class=\"sy1\">(</span>a3<span class=\"sy1\">,</span> b3<span class=\"sy1\">,</span> c2<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// add 10+9  result should be 1 0 0 1 1</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>add4<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>mapAccumR<span class=\"br0\">)</span><br/>\u00a0<br/>bor<span class=\"sy0\">,</span> band <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>bor <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a><br/>band <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a><br/>bnot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>bnot <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 103, "block": "<pre class=\"unicon highlighted_source\"><span class=\"co1\">#</span><br/><span class=\"co1\"># 4bitadder.icn, emulate a 4 bit adder. Using only and, or, not</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">record</span> carry<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># excercise the adder, either \"test\" or 2 numbers</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>argv<span class=\"br0\">)</span><br/>    c <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># cli test</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"test\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># Unicon allows explicit radix literals</span><br/>        <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>2r0000  <span class=\"sy0\">|</span> 2r1001 <span class=\"sy0\">|</span> 2r1111<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">write</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">\"+0,3,9,15\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">every</span> j <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">|</span> <span class=\"nu0\">3</span> <span class=\"sy0\">|</span> <span class=\"nu0\">9</span> <span class=\"sy0\">|</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                ans <span class=\"sy0\">:=</span> fourbitadder<span class=\"br0\">(</span>t1 <span class=\"sy0\">:=</span> fourbits<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> t2 <span class=\"sy0\">:=</span> fourbits<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>                <span class=\"kw4\">write</span><span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> <span class=\"st0\">\" + \"</span><span class=\"sy0\">,</span> t2<span class=\"sy0\">,</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"sy0\">,</span> ans<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># command line, two values, if given, first try four bit binaries</span><br/>    cli <span class=\"sy0\">:=</span> fourbitadder<span class=\"br0\">(</span>t1 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"sy0\">*\\</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;</span> fourbits<span class=\"br0\">(</span><span class=\"st0\">\"2r\"</span> <span class=\"sy0\">||</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        t2 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"sy0\">*\\</span>argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;</span> fourbits<span class=\"br0\">(</span><span class=\"st0\">\"2r\"</span> <span class=\"sy0\">||</span> argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> <span class=\"st0\">\" + \"</span><span class=\"sy0\">,</span> t2<span class=\"sy0\">,</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">\\</span>cli<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">return</span><br/>\u00a0<br/>    <span class=\"co1\"># if no result for that, try decimal values</span><br/>    cli <span class=\"sy0\">:=</span> fourbitadder<span class=\"br0\">(</span>t1 <span class=\"sy0\">:=</span> fourbits<span class=\"br0\">(</span><span class=\"sy0\">\\</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        t2 <span class=\"sy0\">:=</span> fourbits<span class=\"br0\">(</span><span class=\"sy0\">\\</span>argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> <span class=\"st0\">\" + \"</span><span class=\"sy0\">,</span> t2<span class=\"sy0\">,</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">\\</span>cli<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">return</span><br/>\u00a0<br/>    <span class=\"co1\"># or display the help</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: 4bitadder [<span class=\"es0\">\\\"</span>test<span class=\"es0\">\\\"</span>] | [bbbb bbbb] | [n n], range 0-15\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># integer to fourbits as string</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> fourbits<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> s<span class=\"sy0\">,</span> t<br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"out of range: \"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">fail</span><br/>    <span class=\"br0\">}</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">every</span> t <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">|</span> <span class=\"nu0\">4</span> <span class=\"sy0\">|</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">||:=</span> <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> t<span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"0\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># low level xor emulation with or, and, not</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">ior</span><span class=\"br0\">(</span><span class=\"kw4\">iand</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">icom</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"kw4\">icom</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># half adder, and into carry, xor for result bit</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> halfadder<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> carry<span class=\"br0\">)</span><br/>    carry<span class=\"sy0\">.</span><span class=\"me1\">c</span> <span class=\"sy0\">:=</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># full adder, two half adders, or for carry</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> fulladder<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c0<span class=\"sy0\">,</span> c1<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> c2<span class=\"sy0\">,</span> c3<span class=\"sy0\">,</span> r<br/>    c2 <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    c3 <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># connect two half adders with carry</span><br/>    r <span class=\"sy0\">:=</span> halfadder<span class=\"br0\">(</span>halfadder<span class=\"br0\">(</span>c0<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> c2<span class=\"br0\">)</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c3<span class=\"br0\">)</span><br/>    c1<span class=\"sy0\">.</span><span class=\"me1\">c</span> <span class=\"sy0\">:=</span> <span class=\"kw4\">ior</span><span class=\"br0\">(</span>c2<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">,</span> c3<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#</span><br/><span class=\"co1\"># fourbit adder, as bit string</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> fourbitadder<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> cr<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> cs<span class=\"sy0\">,</span> c0<span class=\"sy0\">,</span> c1<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> s<br/>    cs <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    c0 <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    c1 <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    c2 <span class=\"sy0\">:=</span> carry<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># create a string for subscripting. strings are immutable, new strings created</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"st0\">\"0000\"</span><br/>    <span class=\"co1\"># bit 0 is string position 4</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> cs<span class=\"sy0\">,</span> c0<span class=\"br0\">)</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c0<span class=\"sy0\">,</span> c1<span class=\"br0\">)</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c1<span class=\"sy0\">,</span> c2<span class=\"br0\">)</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> fulladder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">+:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> cr<span class=\"br0\">)</span><br/>    <span class=\"co1\"># cr.c is the overflow carry</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">and=: *.<br/>or=: +.<br/>not=: -.<br/>xor=: <span class=\"sy0\">(</span>and not<span class=\"sy0\">)</span> or <span class=\"sy0\">(</span>and not<span class=\"sy0\">)</span>~<br/>hadd=: and ,\"<span class=\"nu0\">0</span> xor<br/>add=: <span class=\"sy0\">(((</span>{.,0:<span class=\"sy0\">)</span>@[ or {:@[ hadd {<a class=\"__cf_email__\" data-cfemail=\"765836\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<span class=\"sy0\">)</span>, }<a class=\"__cf_email__\" data-cfemail=\"c7e987\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<span class=\"sy0\">)</span>/@hadd</pre>"}, {"lang": "Java", "loc": 147, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> GateLogic<br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// Basic gate interfaces</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> OneInputGate<br/>  <span class=\"br0\">{</span>  <span class=\"kw4\">boolean</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> input<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> TwoInputGate<br/>  <span class=\"br0\">{</span>  <span class=\"kw4\">boolean</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> input1, <span class=\"kw4\">boolean</span> input2<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> MultiGate<br/>  <span class=\"br0\">{</span>  <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span>... <span class=\"me1\">inputs</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// Create NOT</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> OneInputGate NOT <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> OneInputGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> input<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>input<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Create AND</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> TwoInputGate AND <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TwoInputGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> input1, <span class=\"kw4\">boolean</span> input2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> input1 <span class=\"sy0\">&amp;&amp;</span> input2<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Create OR</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> TwoInputGate OR <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TwoInputGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> input1, <span class=\"kw4\">boolean</span> input2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> input1 <span class=\"sy0\">||</span> input2<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Create XOR</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> TwoInputGate XOR <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TwoInputGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> input1, <span class=\"kw4\">boolean</span> input2<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> OR.<span class=\"me1\">eval</span><span class=\"br0\">(</span><br/>               AND.<span class=\"me1\">eval</span><span class=\"br0\">(</span>input1, NOT.<span class=\"me1\">eval</span><span class=\"br0\">(</span>input2<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>               AND.<span class=\"me1\">eval</span><span class=\"br0\">(</span>NOT.<span class=\"me1\">eval</span><span class=\"br0\">(</span>input1<span class=\"br0\">)</span>, input2<span class=\"br0\">)</span><br/>             <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Create HALF_ADDER</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> MultiGate HALF_ADDER <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MultiGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span>... <span class=\"me1\">inputs</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inputs.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        XOR.<span class=\"me1\">eval</span><span class=\"br0\">(</span>inputs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, inputs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,  <span class=\"co1\">// Output bit</span><br/>        AND.<span class=\"me1\">eval</span><span class=\"br0\">(</span>inputs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, inputs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>   <span class=\"co1\">// Carry bit</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Create FULL_ADDER</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> MultiGate FULL_ADDER <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MultiGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span>... <span class=\"me1\">inputs</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inputs.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"co1\">// Inputs: CarryIn, A, B</span><br/>      <span class=\"co1\">// Outputs: S, CarryOut</span><br/>      <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> haOutputs1 <span class=\"sy0\">=</span> HALF_ADDER.<span class=\"me1\">eval</span><span class=\"br0\">(</span>inputs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, inputs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> haOutputs2 <span class=\"sy0\">=</span> HALF_ADDER.<span class=\"me1\">eval</span><span class=\"br0\">(</span>haOutputs1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, inputs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        haOutputs2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,                         <span class=\"co1\">// Output bit</span><br/>        OR.<span class=\"me1\">eval</span><span class=\"br0\">(</span>haOutputs1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, haOutputs2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"co1\">// Carry bit</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> MultiGate buildAdder<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> numBits<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> MultiGate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> eval<span class=\"br0\">(</span><span class=\"kw4\">boolean</span>... <span class=\"me1\">inputs</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Inputs: A0, A1, A2..., B0, B1, B2...</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>inputs.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span>numBits <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> outputs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>numBits <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> faInputs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> faOutputs <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numBits<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>          faInputs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>faOutputs <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw2\">false</span> <span class=\"sy0\">:</span> faOutputs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">// CarryIn</span><br/>          faInputs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>                                   <span class=\"co1\">// Ai</span><br/>          faInputs<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> inputs<span class=\"br0\">[</span>numBits <span class=\"sy0\">+</span> i<span class=\"br0\">]</span><span class=\"sy0\">;</span>                         <span class=\"co1\">// Bi</span><br/>          faOutputs <span class=\"sy0\">=</span> FULL_ADDER.<span class=\"me1\">eval</span><span class=\"br0\">(</span>faInputs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          outputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> faOutputs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>                                 <span class=\"co1\">// Si</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>faOutputs <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>          outputs<span class=\"br0\">[</span>numBits<span class=\"br0\">]</span> <span class=\"sy0\">=</span> faOutputs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>                           <span class=\"co1\">// CarryOut</span><br/>        <span class=\"kw1\">return</span> outputs<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> numBits <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> firstNum <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> secondNum <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> maxNum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> numBits<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>firstNum <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>firstNum <span class=\"sy0\">&gt;=</span> maxNum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"First number is out of range\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>secondNum <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>secondNum <span class=\"sy0\">&gt;=</span> maxNum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Second number is out of range\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    MultiGate multiBitAdder <span class=\"sy0\">=</span> buildAdder<span class=\"br0\">(</span>numBits<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Convert input numbers into array of bits</span><br/>    <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inputs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>numBits <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> firstNumDisplay <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> secondNumDisplay <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numBits<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">boolean</span> firstBit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>firstNum <span class=\"sy0\">&gt;&gt;&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">boolean</span> secondBit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>secondNum <span class=\"sy0\">&gt;&gt;&gt;</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> firstBit<span class=\"sy0\">;</span><br/>      inputs<span class=\"br0\">[</span>numBits <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> secondBit<span class=\"sy0\">;</span><br/>      firstNumDisplay <span class=\"sy0\">=</span> <span class=\"br0\">(</span>firstBit <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> firstNumDisplay<span class=\"sy0\">;</span><br/>      secondNumDisplay <span class=\"sy0\">=</span> <span class=\"br0\">(</span>secondBit <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> secondNumDisplay<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> outputs <span class=\"sy0\">=</span> multiBitAdder.<span class=\"me1\">eval</span><span class=\"br0\">(</span>inputs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> outputNum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> outputNumDisplay <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> outputCarryDisplay <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> numBits<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      outputNum <span class=\"sy0\">=</span> <span class=\"br0\">(</span>outputNum <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>outputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> numBits<span class=\"br0\">)</span><br/>        outputCarryDisplay <span class=\"sy0\">=</span> outputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>        outputNumDisplay <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>outputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"numBits=\"</span> <span class=\"sy0\">+</span> numBits<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"A=\"</span> <span class=\"sy0\">+</span> firstNumDisplay <span class=\"sy0\">+</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">+</span> firstNum <span class=\"sy0\">+</span> <span class=\"st0\">\"), B=\"</span> <span class=\"sy0\">+</span> secondNumDisplay <span class=\"sy0\">+</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">+</span> secondNum <span class=\"sy0\">+</span> <span class=\"st0\">\"), S=\"</span> <span class=\"sy0\">+</span> outputCarryDisplay <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> outputNumDisplay <span class=\"sy0\">+</span> <span class=\"st0\">\" (\"</span> <span class=\"sy0\">+</span> outputNum <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 16, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> acceptedBinFormat<span class=\"br0\">(</span>bin<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bin <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> bin <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> bin <span class=\"sy0\">===</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> bin<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> arePseudoBin<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> args <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">slice</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span>arguments<span class=\"br0\">)</span><span class=\"sy0\">,</span> len <span class=\"sy0\">=</span> args.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    while<span class=\"br0\">(</span>len<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>acceptedBinFormat<span class=\"br0\">(</span>args<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> Error<span class=\"br0\">(</span><span class=\"st0\">'argument must be 0, <span class=\"es0\">\\'</span>0<span class=\"es0\">\\'</span>, 1, or <span class=\"es0\">\\'</span>1<span class=\"es0\">\\'</span>, argument '</span> <span class=\"sy0\">+</span> len <span class=\"sy0\">+</span> <span class=\"st0\">' was '</span> <span class=\"sy0\">+</span> args<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 42, "block": "<pre class=\"text highlighted_source\"># Start with the 'not' and 'and' building blocks.<br/># These allow us to construct 'nand', 'or', and 'xor',<br/># and so on.<br/>\u00a0<br/>def bit_not: if . == 1 then 0 else 1 end;<br/>\u00a0<br/>def bit_and(a; b): if a == 1 and b == 1 then 1 else 0 end;<br/>\u00a0<br/>def bit_nand(a; b): bit_and(a; b) | bit_not;<br/>\u00a0<br/>def bit_or(a; b): bit_nand(bit_nand(a;a); bit_nand(b;b));<br/>\u00a0<br/>def bit_xor(a; b):<br/>  bit_nand(bit_nand(bit_nand(a;b); a); <br/>           bit_nand(bit_nand(a;b); b));<br/>\u00a0<br/>def halfAdder(a; b): <br/>  { \"carry\": bit_and(a; b), \"sum\": bit_xor(a; b) };<br/>\u00a0<br/>def fullAdder(a; b; c):<br/>  halfAdder(a; b) as $h0 <br/>  | halfAdder($h0.sum; c) as $h1<br/>  | {\"carry\": bit_or($h0.carry; $h1.carry), \"sum\": $h1.sum };<br/>\u00a0<br/># a and b should be strings of 0s and 1s, of length no greater than 4<br/>def fourBitAdder(a; b):<br/>\u00a0<br/>  # pad on the left with 0s, and convert the string<br/>  # representation (\"101\") to an array of integers ([1,0,1]).<br/>  def pad: (4-length) * \"0\" + . | explode | map(. - 48);<br/>\u00a0<br/>  (a|pad) as $inA | (b|pad) as $inB<br/>  | [][3] = null                                # an array for storing the four results<br/>  | halfAdder($inA[3]; $inB[3]) as $pass<br/>  | .[3] = $pass.sum                            # store the lsb<br/>  | fullAdder($inA[2]; $inB[2]; $pass.carry) as $pass<br/>  | .[2] = $pass.sum<br/>  | fullAdder($inA[1]; $inB[1]; $pass.carry) as $pass<br/>  | .[1] = $pass.sum<br/>  | fullAdder($inA[0]; $inB[0]; $pass.carry) as $pass <br/>  | .[0] = $pass.sum<br/>  | map(tostring) | join(\"\")\u00a0;</pre>"}, {"lang": "Julia", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>xor{T&lt;:Bool}(a::T, b::T) = (a&amp;~b)|(~a&amp;b)<br/>\u00a0<br/>halfadder{T&lt;:Bool}(a::T, b::T) = (xor(a,b), a&amp;b)<br/>\u00a0<br/>function fulladder{T&lt;:Bool}(a::T, b::T, c::T=false)<br/>    (s, ca) = halfadder(c, a)<br/>    (s, cb) = halfadder(s, b)<br/>    (s, ca|cb)<br/>end<br/>\u00a0<br/>function adder(a::BitArray{1}, b::BitArray{1}, c0::Bool=false)<br/>    len = length(a)<br/>    length(b) == len || error(\"Addend width mismatch.\")<br/>    c = c0<br/>    s = falses(len)<br/>    for i in 1:len<br/>        (s[i], c) = fulladder(a[i], b[i], c)<br/>    end<br/>    (s, c)<br/>end<br/>\u00a0<br/>function adder{T&lt;:Integer}(m::T, n::T, wid::T=4, c0::Bool=false)<br/>    a = bitpack(digits(m, 2, wid))[1:wid]<br/>    b = bitpack(digits(n, 2, wid))[1:wid]<br/>    adder(a, b, c0)<br/>end<br/>\u00a0<br/>Base.bits(n::BitArray{1}) = join(reverse(int(n)), \"\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 52, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Boolean.<span class=\"me1\">I</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Int.<span class=\"me1\">B</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Nybble<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n3<span class=\"sy0\">:</span> Boolean, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n2<span class=\"sy0\">:</span> Boolean, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n1<span class=\"sy0\">:</span> Boolean, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n0<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun toInt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n0.<span class=\"me1\">I</span> + n1.<span class=\"me1\">I</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> + n2.<span class=\"me1\">I</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> + n3.<span class=\"me1\">I</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"${n3.I}${n2.I}${n1.I}${n0.I}\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Int.<span class=\"me1\">toNybble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Nybble <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span> n<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> shr k<span class=\"br0\">)</span> and <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">B</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Nybble<span class=\"br0\">(</span>n<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, n<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, n<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun xorGate<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Boolean, b<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>b<span class=\"br0\">)</span> || <span class=\"br0\">(</span><span class=\"sy0\">!</span>a <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">)</span><br/>\u00a0<br/>fun halfAdder<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Boolean, b<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair<span class=\"br0\">(</span>xorGate<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>, a <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">)</span><br/>\u00a0<br/>fun fullAdder<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Boolean, b<span class=\"sy0\">:</span> Boolean, c<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Boolean, Boolean<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s1, c1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>c, a<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s2, c2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>s1, b<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s2 to <span class=\"br0\">(</span>c1 || c2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun fourBitAdder<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Nybble, b<span class=\"sy0\">:</span> Nybble<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Nybble, Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s0, c0<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a.<span class=\"me1\">n0</span>, b.<span class=\"me1\">n0</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s1, c1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a.<span class=\"me1\">n1</span>, b.<span class=\"me1\">n1</span>, c0<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s2, c2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a.<span class=\"me1\">n2</span>, b.<span class=\"me1\">n2</span>, c1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s3, c3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a.<span class=\"me1\">n3</span>, b.<span class=\"me1\">n3</span>, c2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Nybble<span class=\"br0\">(</span>s3, s2, s1, s0<span class=\"br0\">)</span> to c3.<span class=\"me1\">I</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <span class=\"st0\">\"%s +\u00a0%s =\u00a0%d\u00a0%s (%2d +\u00a0%2d =\u00a0%2d)\"</span><br/>\u00a0<br/>fun test<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, j<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> i.<span class=\"me1\">toNybble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> j.<span class=\"me1\">toNybble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>r, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fourBitAdder<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"nu0\">16</span> + r.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>f.<span class=\"me1\">format</span><span class=\"br0\">(</span>a, b, c, r, i, j, s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" A      B     C  R     I    J    S\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i..<span class=\"me1\">minOf</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span> test<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 57, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Build XOR from AND, OR and NOT</span><br/><span class=\"kw1\">function</span> xor <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> b<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>b <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> a<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Can make half adder now XOR exists</span><br/><span class=\"kw1\">function</span> halfAdder <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> a <span class=\"kw2\">and</span> b <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Full adder is two half adders with carry outputs OR'd</span><br/><span class=\"kw1\">function</span> fullAdder <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> cIn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ha0s<span class=\"sy0\">,</span> ha0c <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>cIn<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ha1s<span class=\"sy0\">,</span> ha1c <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>ha0s<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> cOut<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> ha0c <span class=\"kw2\">or</span> ha1c<span class=\"sy0\">,</span> ha1s<br/>    <span class=\"kw1\">return</span> cOut<span class=\"sy0\">,</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Carry bits 'ripple' through adders, first returned value is overflow</span><br/><span class=\"kw1\">function</span> fourBitAdder <span class=\"br0\">(</span>a3<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> a0<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b0<span class=\"br0\">)</span> <span class=\"co1\">-- LSB-first</span><br/>    <span class=\"kw1\">local</span> fa0c<span class=\"sy0\">,</span> fa0s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> b0<span class=\"sy0\">,</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fa1c<span class=\"sy0\">,</span> fa1s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> fa0c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fa2c<span class=\"sy0\">,</span> fa2s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a2<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> fa1c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fa3c<span class=\"sy0\">,</span> fa3s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a3<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span> fa2c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> fa3c<span class=\"sy0\">,</span> fa3s<span class=\"sy0\">,</span> fa2s<span class=\"sy0\">,</span> fa1s<span class=\"sy0\">,</span> fa0s <span class=\"co1\">-- Return as MSB-first</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Take string of noughts and ones, convert to native boolean type</span><br/><span class=\"kw1\">function</span> toBool <span class=\"br0\">(</span>bitString<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> boolList<span class=\"sy0\">,</span> bit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"kw1\">do</span><br/>        bit <span class=\"sy0\">=</span> <span class=\"kw3\">string.sub</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"%04d\"</span><span class=\"sy0\">,</span> bitString<span class=\"br0\">)</span><span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> digit<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> bit <span class=\"sy0\">==</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>boolList<span class=\"sy0\">,</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> bit <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>boolList<span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> boolList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Take list of booleans, convert to string of binary digits (variadic)</span><br/><span class=\"kw1\">function</span> toBits <span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> bStr <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> bool <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">{</span><span class=\"sy0\">...</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> bool <span class=\"kw1\">then</span> bStr <span class=\"sy0\">=</span> bStr <span class=\"sy0\">..</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">else</span> bStr <span class=\"sy0\">=</span> bStr <span class=\"sy0\">..</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> bStr<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Little driver function to neaten use of the adder</span><br/><span class=\"kw1\">function</span> add <span class=\"br0\">(</span>n1<span class=\"sy0\">,</span> n2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> A<span class=\"sy0\">,</span> B <span class=\"sy0\">=</span> toBool<span class=\"br0\">(</span>n1<span class=\"br0\">)</span><span class=\"sy0\">,</span> toBool<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> v<span class=\"sy0\">,</span> s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3 <span class=\"sy0\">=</span> fourBitAdder<span class=\"br0\">(</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                            B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> toBits<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3<span class=\"br0\">)</span><span class=\"sy0\">,</span> v<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure (usage examples)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"SUM\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"OVERFLOW<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0001</span><span class=\"sy0\">,</span> <span class=\"nu0\">0001</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 1 + 1 = 2</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0101</span><span class=\"sy0\">,</span> <span class=\"nu0\">1010</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 5 + 10 = 15</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1111</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 0 + 15 = 15</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0001</span><span class=\"sy0\">,</span> <span class=\"nu0\">1111</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 1 + 15 = 16 (causes overflow)</span></pre>"}, {"lang": "Lua", "loc": 57, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Build XOR from AND, OR and NOT</span><br/><span class=\"kw1\">function</span> xor <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> b<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>b <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> a<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Can make half adder now XOR exists</span><br/><span class=\"kw1\">function</span> halfAdder <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> a <span class=\"kw2\">and</span> b <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Full adder is two half adders with carry outputs OR'd</span><br/><span class=\"kw1\">function</span> fullAdder <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> cIn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ha0s<span class=\"sy0\">,</span> ha0c <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>cIn<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ha1s<span class=\"sy0\">,</span> ha1c <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>ha0s<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> cOut<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> ha0c <span class=\"kw2\">or</span> ha1c<span class=\"sy0\">,</span> ha1s<br/>    <span class=\"kw1\">return</span> cOut<span class=\"sy0\">,</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Carry bits 'ripple' through adders, first returned value is overflow</span><br/><span class=\"kw1\">function</span> fourBitAdder <span class=\"br0\">(</span>a3<span class=\"sy0\">,</span> a2<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> a0<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> b0<span class=\"br0\">)</span> <span class=\"co1\">-- LSB-first</span><br/>    <span class=\"kw1\">local</span> fa0c<span class=\"sy0\">,</span> fa0s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> b0<span class=\"sy0\">,</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fa1c<span class=\"sy0\">,</span> fa1s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> fa0c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fa2c<span class=\"sy0\">,</span> fa2s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a2<span class=\"sy0\">,</span> b2<span class=\"sy0\">,</span> fa1c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fa3c<span class=\"sy0\">,</span> fa3s <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>a3<span class=\"sy0\">,</span> b3<span class=\"sy0\">,</span> fa2c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> fa3c<span class=\"sy0\">,</span> fa3s<span class=\"sy0\">,</span> fa2s<span class=\"sy0\">,</span> fa1s<span class=\"sy0\">,</span> fa0s <span class=\"co1\">-- Return as MSB-first</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Take string of noughts and ones, convert to native boolean type</span><br/><span class=\"kw1\">function</span> toBool <span class=\"br0\">(</span>bitString<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> boolList<span class=\"sy0\">,</span> bit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"kw1\">do</span><br/>        bit <span class=\"sy0\">=</span> <span class=\"kw3\">string.sub</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"%04d\"</span><span class=\"sy0\">,</span> bitString<span class=\"br0\">)</span><span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> digit<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> bit <span class=\"sy0\">==</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>boolList<span class=\"sy0\">,</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> bit <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>boolList<span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> boolList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Take list of booleans, convert to string of binary digits (variadic)</span><br/><span class=\"kw1\">function</span> toBits <span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> bStr <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> bool <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">{</span><span class=\"sy0\">...</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> bool <span class=\"kw1\">then</span> bStr <span class=\"sy0\">=</span> bStr <span class=\"sy0\">..</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">else</span> bStr <span class=\"sy0\">=</span> bStr <span class=\"sy0\">..</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> bStr<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Little driver function to neaten use of the adder</span><br/><span class=\"kw1\">function</span> add <span class=\"br0\">(</span>n1<span class=\"sy0\">,</span> n2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> A<span class=\"sy0\">,</span> B <span class=\"sy0\">=</span> toBool<span class=\"br0\">(</span>n1<span class=\"br0\">)</span><span class=\"sy0\">,</span> toBool<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> v<span class=\"sy0\">,</span> s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3 <span class=\"sy0\">=</span> fourBitAdder<span class=\"br0\">(</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                            B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> B<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> toBits<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3<span class=\"br0\">)</span><span class=\"sy0\">,</span> v<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure (usage examples)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"SUM\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"OVERFLOW<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0001</span><span class=\"sy0\">,</span> <span class=\"nu0\">0001</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 1 + 1 = 2</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0101</span><span class=\"sy0\">,</span> <span class=\"nu0\">1010</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 5 + 10 = 15</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1111</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 0 + 15 = 15</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span><span class=\"nu0\">0001</span><span class=\"sy0\">,</span> <span class=\"nu0\">1111</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- 1 + 15 = 16 (causes overflow)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 16, "block": "<pre class=\"text highlighted_source\">and[a_, b_]\u00a0:= Max[a, b];<br/>or[a_, b_]\u00a0:= Min[a, b];<br/>not[a_]\u00a0:= 1 - a;<br/>xor[a_, b_]\u00a0:= or[and[a, not[b]], and[b, not[a]]];<br/>halfadder[a_, b_]\u00a0:= {xor[a, b], and[a, b]};<br/>fulladder[a_, b_, c0_]\u00a0:= Module[{s, c, c1},<br/>   {s, c} = halfadder[c0, a];<br/>   {s, c1} = halfadder[s, b];<br/>   {s, or[c, c1]}];<br/>fourbitadder[{a3_, a2_, a1_, a0_}, {b3_, b2_, b1_, b0_}]\u00a0:= <br/>  Module[{s0, s1, s2, s3, c0, c1, c2, c3},<br/>   {s0, c0} = fulladder[a0, b0, 0];<br/>   {s1, c1} = fulladder[a1, b1, c0];<br/>   {s2, c2} = fulladder[a2, b2, c1];<br/>   {s3, c3} = fulladder[a3, b3, c2];<br/>   {{s3, s2, s1, s0}, c3}];</pre>"}, {"lang": "MATLAB / Octave", "loc": 64, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>S,v<span class=\"br0\">]</span> = fourBitAdder<span class=\"br0\">(</span>input1,input2<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%Make sure that only 4-Bit numbers are being added. This assumes that</span><br/>    <span class=\"co1\">%if input1 and input2 are a vector of multiple decimal numbers, then</span><br/>    <span class=\"co1\">%the binary form of these vectors are an n by 4 matrix.</span><br/>    assert<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>input1,<span class=\"nu0\">2</span><span class=\"br0\">)</span> == <span class=\"nu0\">4</span><span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>input2,<span class=\"nu0\">2</span><span class=\"br0\">)</span> == <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<span class=\"co2\">'This will only work on 4-Bit Numbers'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">%Converts MATLAB binary strings to matricies of 1 and 0</span><br/>    <span class=\"kw1\">function</span> mat = binStr2Mat<span class=\"br0\">(</span>binStr<span class=\"br0\">)</span><br/>        mat = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>binStr<span class=\"br0\">)</span><span class=\"br0\">)</span>;      <br/>        <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>binStr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            mat<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2double.html\"><span class=\"kw2\">str2double</span></a><span class=\"br0\">(</span>binStr<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%XOR decleration</span><br/>    <span class=\"kw1\">function</span> AxorB = xor<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>        <br/>        AxorB = or<span class=\"br0\">(</span>and<span class=\"br0\">(</span>A,not<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span>,and<span class=\"br0\">(</span>B,not<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;    <br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%Half-Adder decleration</span><br/>    <span class=\"kw1\">function</span> <span class=\"br0\">[</span>S,C<span class=\"br0\">]</span> = halfAdder<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span><br/>        S = xor<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>;<br/>        C = and<span class=\"br0\">(</span>A,B<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%Full-Adder decleration</span><br/>    <span class=\"kw1\">function</span> <span class=\"br0\">[</span>S,Co<span class=\"br0\">]</span> = fullAdder<span class=\"br0\">(</span>A,B,Ci<span class=\"br0\">)</span><br/>       <span class=\"br0\">[</span>SAdder1,CAdder1<span class=\"br0\">]</span> = halfAdder<span class=\"br0\">(</span>Ci,A<span class=\"br0\">)</span>;<br/>       <span class=\"br0\">[</span>S,CAdder2<span class=\"br0\">]</span> = halfAdder<span class=\"br0\">(</span>SAdder1,B<span class=\"br0\">)</span>;<br/>       Co = or<span class=\"br0\">(</span>CAdder1,CAdder2<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%The rest of this code is the 4-bit adder</span><br/>\u00a0<br/>    binStrFlag = false; <span class=\"co1\">%A flag to determine if the original input was a binary string</span><br/>\u00a0<br/>    <span class=\"co1\">%If either of the inputs was a binary string, convert it to a matrix of</span><br/>    <span class=\"co1\">%1's and 0's.</span><br/>    <span class=\"kw1\">if</span> ischar<span class=\"br0\">(</span>input1<span class=\"br0\">)</span><br/>       input1 = binStr2Mat<span class=\"br0\">(</span>input1<span class=\"br0\">)</span>;<br/>       binStrFlag = true;<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> ischar<span class=\"br0\">(</span>input2<span class=\"br0\">)</span><br/>       input2 = binStr2Mat<span class=\"br0\">(</span>input2<span class=\"br0\">)</span>;<br/>       binStrFlag = true;<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%This does the addition</span><br/>    S = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>input1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"br0\">[</span>S<span class=\"br0\">(</span>:,<span class=\"nu0\">4</span><span class=\"br0\">)</span>,Co<span class=\"br0\">]</span> = fullAdder<span class=\"br0\">(</span>input1<span class=\"br0\">(</span>:,<span class=\"nu0\">4</span><span class=\"br0\">)</span>,input2<span class=\"br0\">(</span>:,<span class=\"nu0\">4</span><span class=\"br0\">)</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>S<span class=\"br0\">(</span>:,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,Co<span class=\"br0\">]</span> = fullAdder<span class=\"br0\">(</span>input1<span class=\"br0\">(</span>:,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,input2<span class=\"br0\">(</span>:,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,Co<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>S<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,Co<span class=\"br0\">]</span> = fullAdder<span class=\"br0\">(</span>input1<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,input2<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,Co<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>S<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,v<span class=\"br0\">]</span> = fullAdder<span class=\"br0\">(</span>input1<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,input2<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,Co<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"co1\">%If the original inputs were binary strings, convert the output of the</span><br/>    <span class=\"co1\">%4-bit adder to a binary string with the same formatting as the</span><br/>    <span class=\"co1\">%original binary strings.</span><br/>    <span class=\"kw1\">if</span> binStrFlag<br/>        S = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/>        v = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span> <span class=\"co1\">%fourBitAdder</span></pre>"}, {"lang": "MUMPS", "loc": 14, "block": "<pre class=\"text highlighted_source\">XOR(Y,Z)\u00a0;Uses logicals - i.e., 0 is false, anything else is true (1 is used if setting a value)<br/> QUIT (Y&amp;'Z)!('Y&amp;Z)<br/>HALF(W,X)<br/> QUIT $$XOR(W,X)_\"^\"_(W&amp;X)<br/>FULL(U,V,CF)<br/> NEW F1,F2<br/> S F1=$$HALF(U,V)<br/> S F2=$$HALF($P(F1,\"^\",1),CF)<br/> QUIT $P(F2,\"^\",1)_\"^\"_($P(F1,\"^\",2)!($P(F2,\"^\",2)))<br/>FOUR(Y,Z,C4)<br/> NEW S,I,T<br/> FOR I=4:-1:1 SET T=$$FULL($E(Y,I),$E(Z,I),C4),$E(S,I)=$P(T,\"^\",1),C4=$P(T,\"^\",2)<br/> K I,T<br/> QUIT S_\"^\"_C4</pre>"}, {"lang": "MyHDL", "loc": 114, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python</span><br/>\u00a0<br/><span class=\"st0\">\"\"\"     http://rosettacode.org/wiki/Four_bit_adder<br/>        Demonstrate theoretical four bit adder simulation<br/>        using And, Or &amp; Invert primitives<br/>\u00a0<br/>        2011-05-10  jc<br/>\"\"\"</span><br/>\u00a0<br/><span class=\"kw1\">from</span> myhdl <span class=\"kw1\">import</span> always_comb<span class=\"sy0\">,</span> ConcatSignal<span class=\"sy0\">,</span> delay<span class=\"sy0\">,</span> intbv<span class=\"sy0\">,</span> Signal<span class=\"sy0\">,</span> \\<br/>                  Simulation<span class=\"sy0\">,</span> toVerilog<span class=\"sy0\">,</span> toVHDL<br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randrange <br/>\u00a0<br/>\u00a0<br/><span class=\"st0\">\"\"\"   define set of primitives<br/>      ------------------------   \"\"\"</span><br/><span class=\"kw1\">def</span> inverter<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> a<span class=\"br0\">)</span>:   <span class=\"co1\"># define component name &amp; interface</span><br/>   <span class=\"st0\">\"\"\" z &lt;- not(a) \"\"\"</span><br/>   <span class=\"sy0\">@</span>always_comb   <span class=\"co1\"># define asynchronous logic</span><br/>   <span class=\"kw1\">def</span> logic<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      z.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> a<br/>   <span class=\"kw1\">return</span> logic   <span class=\"co1\"># return defined logic, named 'inverter'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> and2<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\" z &lt;- a and b \"\"\"</span><br/>   <span class=\"sy0\">@</span>always_comb <br/>   <span class=\"kw1\">def</span> logic<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      z.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> a <span class=\"kw1\">and</span> b<br/>   <span class=\"kw1\">return</span> logic<br/>\u00a0<br/><span class=\"kw1\">def</span> or2<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\" z &lt;- a or b \"\"\"</span>   <br/>   <span class=\"sy0\">@</span>always_comb  <br/>   <span class=\"kw1\">def</span> logic<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      z.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> a <span class=\"kw1\">or</span> b<br/>   <span class=\"kw1\">return</span> logic<br/>\u00a0<br/>\u00a0<br/><span class=\"st0\">\"\"\"   build components using defined primitive set<br/>      --------------------------------------------   \"\"\"</span><br/><span class=\"kw1\">def</span> xor2 <span class=\"br0\">(</span>z<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\" z &lt;- a xor b \"\"\"</span>   <br/>   <span class=\"co1\"># define interconnect signals</span><br/>   nota<span class=\"sy0\">,</span> notb<span class=\"sy0\">,</span> annotb<span class=\"sy0\">,</span> bnnota <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Signal<span class=\"br0\">(</span><span class=\"kw2\">bool</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>   <span class=\"co1\"># name sub-components, and their interconnect </span><br/>   inv0 <span class=\"sy0\">=</span> inverter<span class=\"br0\">(</span>nota<span class=\"sy0\">,</span>  a<span class=\"br0\">)</span><br/>   inv1 <span class=\"sy0\">=</span> inverter<span class=\"br0\">(</span>notb<span class=\"sy0\">,</span>  b<span class=\"br0\">)</span><br/>   and2a <span class=\"sy0\">=</span> and2<span class=\"br0\">(</span>annotb<span class=\"sy0\">,</span>  a<span class=\"sy0\">,</span> notb<span class=\"br0\">)</span><br/>   and2b <span class=\"sy0\">=</span> and2<span class=\"br0\">(</span>bnnota<span class=\"sy0\">,</span>  b<span class=\"sy0\">,</span> nota<span class=\"br0\">)</span><br/>   or2a <span class=\"sy0\">=</span> or2<span class=\"br0\">(</span>z<span class=\"sy0\">,</span>  annotb<span class=\"sy0\">,</span> bnnota<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> inv0<span class=\"sy0\">,</span> inv1<span class=\"sy0\">,</span> and2a<span class=\"sy0\">,</span> and2b<span class=\"sy0\">,</span> or2a<br/>\u00a0<br/><span class=\"kw1\">def</span> halfAdder<span class=\"br0\">(</span>carry<span class=\"sy0\">,</span> summ<span class=\"sy0\">,</span>  in_a<span class=\"sy0\">,</span> in_b<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\" carry,sum is the sum of in_a, in_b \"\"\"</span> <br/>   and2a <span class=\"sy0\">=</span> and2<span class=\"br0\">(</span>carry<span class=\"sy0\">,</span>  in_a<span class=\"sy0\">,</span> in_b<span class=\"br0\">)</span><br/>   xor2a  <span class=\"sy0\">=</span>  xor2<span class=\"br0\">(</span>summ<span class=\"sy0\">,</span>   in_a<span class=\"sy0\">,</span> in_b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> and2a<span class=\"sy0\">,</span> xor2a<br/>\u00a0<br/><span class=\"kw1\">def</span> fullAdder<span class=\"br0\">(</span>fa_c1<span class=\"sy0\">,</span> fa_s<span class=\"sy0\">,</span>  fa_c0<span class=\"sy0\">,</span> fa_a<span class=\"sy0\">,</span> fa_b<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\" fa_c0,fa_s is the sum of fa_c0, fa_a, fa_b \"\"\"</span><br/>   ha1_s<span class=\"sy0\">,</span> ha1_c1<span class=\"sy0\">,</span> ha2_c1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Signal<span class=\"br0\">(</span><span class=\"kw2\">bool</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>   halfAdder01 <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>ha1_c1<span class=\"sy0\">,</span> ha1_s<span class=\"sy0\">,</span> fa_c0<span class=\"sy0\">,</span> fa_a<span class=\"br0\">)</span><br/>   halfAdder02 <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>ha2_c1<span class=\"sy0\">,</span> fa_s<span class=\"sy0\">,</span> ha1_s<span class=\"sy0\">,</span> fa_b<span class=\"br0\">)</span><br/>   or2a <span class=\"sy0\">=</span> or2<span class=\"br0\">(</span>fa_c1<span class=\"sy0\">,</span> ha1_c1<span class=\"sy0\">,</span> ha2_c1<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> halfAdder01<span class=\"sy0\">,</span> halfAdder02<span class=\"sy0\">,</span> or2a<br/>\u00a0<br/><span class=\"kw1\">def</span> Adder4b_ST<span class=\"br0\">(</span>co<span class=\"sy0\">,</span>sum4<span class=\"sy0\">,</span> ina<span class=\"sy0\">,</span>inb<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">''' assemble 4 full adders '''</span> <br/>   c <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Signal<span class=\"br0\">(</span><span class=\"kw2\">bool</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>   sl <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Signal<span class=\"br0\">(</span><span class=\"kw2\">bool</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span>  <span class=\"co1\"># sum list</span><br/>   halfAdder_0 <span class=\"sy0\">=</span> halfAdder<span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>sl<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>      ina<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>inb<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   fullAdder_1 <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>sl<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>ina<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>inb<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   fullAdder_2 <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>c<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>sl<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>ina<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>inb<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   fullAdder_3 <span class=\"sy0\">=</span> fullAdder<span class=\"br0\">(</span>co<span class=\"sy0\">,</span>  sl<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>ina<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>inb<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   <span class=\"co1\"># create an internal bus for the output list</span><br/>   sc <span class=\"sy0\">=</span> ConcatSignal<span class=\"br0\">(</span>*<span class=\"kw2\">reversed</span><span class=\"br0\">(</span>sl<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># create internal bus for output list</span><br/>   <span class=\"sy0\">@</span>always_comb<br/>   <span class=\"kw1\">def</span> list2intbv<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      sum4.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> sc  <span class=\"co1\"># assign internal bus to actual output</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> halfAdder_0<span class=\"sy0\">,</span> fullAdder_1<span class=\"sy0\">,</span> fullAdder_2<span class=\"sy0\">,</span> fullAdder_3<span class=\"sy0\">,</span> list2intbv<br/>\u00a0<br/>\u00a0<br/><span class=\"st0\">\"\"\"   define signals and code for testing<br/>      -----------------------------------   \"\"\"</span><br/>t_co<span class=\"sy0\">,</span> t_s<span class=\"sy0\">,</span> t_a<span class=\"sy0\">,</span> t_b<span class=\"sy0\">,</span> dbug <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Signal<span class=\"br0\">(</span><span class=\"kw2\">bool</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>ina4<span class=\"sy0\">,</span> inb4<span class=\"sy0\">,</span> sum4 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Signal<span class=\"br0\">(</span>intbv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">4</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>      b   a   |  c1    s   <span class=\"es0\">\\n</span>     -------------------\"</span><br/>   <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span>:<br/>      ina4.<span class=\"me1\">next</span><span class=\"sy0\">,</span> inb4.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> randrange<span class=\"br0\">(</span><span class=\"nu0\">2</span>**<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> randrange<span class=\"br0\">(</span><span class=\"nu0\">2</span>**<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">yield</span> delay<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">print</span> <span class=\"st0\">\"    \u00a0%2d \u00a0%2d   | \u00a0%2d  \u00a0%2d     \"</span> \\<br/>            \u00a0% <span class=\"br0\">(</span>ina4<span class=\"sy0\">,</span>inb4<span class=\"sy0\">,</span> t_co<span class=\"sy0\">,</span>sum4<span class=\"br0\">)</span><br/>      <span class=\"kw1\">assert</span> t_co * <span class=\"nu0\">16</span> + sum4 <span class=\"sy0\">==</span> ina4 + inb4 <br/>   <span class=\"kw1\">print</span><br/>\u00a0<br/>\u00a0<br/><span class=\"st0\">\"\"\"   instantiate components and run test<br/>      -----------------------------------   \"\"\"</span><br/>Adder4b_01 <span class=\"sy0\">=</span> Adder4b_ST<span class=\"br0\">(</span>t_co<span class=\"sy0\">,</span>sum4<span class=\"sy0\">,</span> ina4<span class=\"sy0\">,</span>inb4<span class=\"br0\">)</span><br/>test_1 <span class=\"sy0\">=</span> <span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>   sim <span class=\"sy0\">=</span> Simulation<span class=\"br0\">(</span>Adder4b_01<span class=\"sy0\">,</span> test_1<span class=\"br0\">)</span><br/>   sim.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>   toVHDL<span class=\"br0\">(</span>Adder4b_ST<span class=\"sy0\">,</span> t_co<span class=\"sy0\">,</span>sum4<span class=\"sy0\">,</span> ina4<span class=\"sy0\">,</span>inb4<span class=\"br0\">)</span><br/>   toVerilog<span class=\"br0\">(</span>Adder4b_ST<span class=\"sy0\">,</span> t_co<span class=\"sy0\">,</span>sum4<span class=\"sy0\">,</span> ina4<span class=\"sy0\">,</span>inb4<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>   main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 29, "block": "<pre class=\"text highlighted_source\">proc ha(a, b): auto = [a xor b, a and b] # sum, carry<br/>\u00a0<br/>proc fa(a, b, ci): auto =<br/>  let a = ha(ci, a)<br/>  let b = ha(a[0], b)<br/>  [b[0], a[1] or b[1]] # sum, carry<br/>\u00a0<br/>proc fa4(a,b): array[5, bool] =<br/>  var co,s: array[4, bool]<br/>  for i in 0..3:<br/>    let r = fa(a[i], b[i], if i &gt; 0: co[i-1] else: false)<br/>    s[i] = r[0]<br/>    co[i] = r[1]<br/>  result[0..3] = s<br/>  result[4] = co[3]<br/>\u00a0<br/>proc int2bus(n): array[4, bool] =<br/>  var n = n<br/>  for i in 0..result.high:<br/>    result[i] = (n and 1) == 1<br/>    n = n shr 1<br/>\u00a0<br/>proc bus2int(b): int =<br/>  for i,x in b:<br/>    result += (if x: 1 else: 0) shl i<br/>\u00a0<br/>for a in 0..7:<br/>  for b in 0..7:<br/>    assert a + b == bus2int fa4(int2bus(a), int2bus(b))</pre>"}, {"lang": "OCaml", "loc": 204, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"co1\">(* File blocks.ml<br/>\u00a0<br/>A block is just a black box with nin input lines and nout output lines,<br/>numbered from 0 to nin-1 and 0 to nout-1 respectively. It will be stored<br/>in a caml record, with the operation stored as a function. A value on<br/>a line is represented by a boolean value. *)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> block <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><span class=\"sy0\">;</span> nout<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><span class=\"sy0\">;</span> apply<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* First we need function for boolean conversion to and from integer values,<br/>mainly for pretty printing of results *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> int_of_bits nbits v <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> nbits <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"bad args\"</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> 0L <span class=\"kw1\">in</span><br/>\t\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span>nbits<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>\t\t\tr <span class=\"sy0\">:=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>add <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>shift_left <span class=\"sy0\">!</span>r <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> v<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> 1L <span class=\"kw1\">else</span> 0L<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">!</span>r<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bits_of_int nbits n <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make nbits <span class=\"kw1\">false</span><br/>\t<span class=\"kw1\">and</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> n <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> nbits<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\tv<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>logand <span class=\"sy0\">!</span>r 1L<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>zero<span class=\"sy0\">;</span><br/>\t\tr <span class=\"sy0\">:=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>shift_right_logical <span class=\"sy0\">!</span>r <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\tv<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput\"><span class=\"kw3\">input</span></a> nbits v <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">let</span> w <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>nbits<span class=\"br0\">)</span> <span class=\"kw1\">false</span> <span class=\"kw1\">in</span><br/>\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iteri <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i x <span class=\"sy0\">-&gt;</span><br/>\t\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>blit <span class=\"br0\">(</span>bits_of_int nbits x<span class=\"br0\">)</span> <span class=\"nu0\">0</span> w <span class=\"br0\">(</span>i<span class=\"sy0\">*</span>nbits<span class=\"br0\">)</span> nbits<br/>\t<span class=\"br0\">)</span> v<span class=\"sy0\">;</span><br/>\tw<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput\"><span class=\"kw3\">output</span></a> nbits v <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> nv <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> nv <span class=\"kw1\">mod</span> nbits <span class=\"kw1\">and</span> n <span class=\"sy0\">=</span> nv<span class=\"sy0\">/</span>nbits <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">if</span> r <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"bad output size\"</span> <span class=\"kw1\">else</span><br/>\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init n <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span><br/>\t\tint_of_bits nbits <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sub v <span class=\"br0\">(</span>i<span class=\"sy0\">*</span>nbits<span class=\"br0\">)</span> nbits<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* We have a type for blocks, so we need operations on blocks.<br/>\u00a0<br/>assoc:        make one block from two blocks, side by side (they are not connected)<br/>serial:       connect input from one block to output of another block<br/>parallel:     make two outputs from one input passing through two blocks<br/>block_array:  an array of blocks linked by the same connector (assoc, serial, parallel) *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> assoc a b <span class=\"sy0\">=</span><br/>\t<span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>a<span class=\"sy0\">.</span>nin<span class=\"sy0\">+</span>b<span class=\"sy0\">.</span>nin<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>a<span class=\"sy0\">.</span>nout<span class=\"sy0\">+</span>b<span class=\"sy0\">.</span>nout<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\t\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>append<br/>\t\t\t<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>apply <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sub bits <span class=\"nu0\">0</span> a<span class=\"sy0\">.</span>nin<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>b<span class=\"sy0\">.</span>apply <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sub bits a<span class=\"sy0\">.</span>nin b<span class=\"sy0\">.</span>nin<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> serial a b <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">if</span> a<span class=\"sy0\">.</span>nout <span class=\"sy0\">&lt;&gt;</span> b<span class=\"sy0\">.</span>nin <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">failwith</span> <span class=\"st0\">\"[serial] bad block\"</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>a<span class=\"sy0\">.</span>nin<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>b<span class=\"sy0\">.</span>nout<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\t\tbits <span class=\"sy0\">-&gt;</span> b<span class=\"sy0\">.</span>apply <span class=\"br0\">(</span>a<span class=\"sy0\">.</span>apply bits<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> parallel a b <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">if</span> a<span class=\"sy0\">.</span>nin <span class=\"sy0\">&lt;&gt;</span> b<span class=\"sy0\">.</span>nin <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">failwith</span> <span class=\"st0\">\"[parallel] bad blocks\"</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>a<span class=\"sy0\">.</span>nin<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>a<span class=\"sy0\">.</span>nout<span class=\"sy0\">+</span>b<span class=\"sy0\">.</span>nout<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\t\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>append <span class=\"br0\">(</span>a<span class=\"sy0\">.</span>apply bits<span class=\"br0\">)</span> <span class=\"br0\">(</span>b<span class=\"sy0\">.</span>apply bits<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> block_array comb v <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v<br/>\t<span class=\"kw1\">and</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> v<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\tr <span class=\"sy0\">:=</span> comb <span class=\"sy0\">!</span>r v<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">!</span>r<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* wires<br/>\u00a0<br/>map:     map n input lines on length(v) output lines, using the links out(k)=v(in(k))<br/>pass:    n wires not connected (out(k) = in(k))<br/>fork:    a wire is developed into n wires having the same value<br/>perm:    permutation of wires<br/>forget:  n wires going nowhere<br/>sub:     subset of wires, other ones going nowhere *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> map n v <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">function</span> k <span class=\"sy0\">-&gt;</span> bits<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> v <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> pass n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> bits <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> fork n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make n bits<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> perm v <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v <span class=\"kw1\">in</span><br/>\t<span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\t\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init n <span class=\"br0\">(</span><span class=\"kw1\">function</span> k <span class=\"sy0\">-&gt;</span> bits<span class=\"sy0\">.</span><span class=\"br0\">(</span>v<span class=\"sy0\">.</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> forget n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sub nin nout where <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span>nin<span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>nout<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>sub bits where nout <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> transpose n p v <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">if</span> n<span class=\"sy0\">*</span>p <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length v<br/>\t\t<span class=\"kw1\">then</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"bad dim\"</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">let</span> w <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>copy v <span class=\"kw1\">in</span><br/>\t\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> p<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t\t\t<span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> i<span class=\"sy0\">*</span>p<span class=\"sy0\">+</span>j <span class=\"kw1\">and</span> s <span class=\"sy0\">=</span> j<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span>i <span class=\"kw1\">in</span><br/>\t\t\t\tw<span class=\"sy0\">.</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> v<span class=\"sy0\">.</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">done</span><br/>\t\t<span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>\t\tw<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* line mixing (a special permutation)<br/>mix 4 2\u00a0: 0,1,2,3, 4,5,6,7 -&gt; 0,4, 1,5, 2,6, 3,7<br/>unmix: inverse operation *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> mix n p <span class=\"sy0\">=</span> perm <span class=\"br0\">(</span>transpose n p <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span> x <span class=\"sy0\">-&gt;</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> unmix n p <span class=\"sy0\">=</span> perm <span class=\"br0\">(</span>transpose p n <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span> x <span class=\"sy0\">-&gt;</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* basic blocks<br/>\u00a0<br/>dummy:   no input, no output, usually not useful<br/>const:   n wires with constant value (true or false)<br/>encode:  translates an Int64 into boolean values, keeping only n lower bits<br/>bnand:   NAND gate, the basic building block for all the other basic gates (or, and, not...) *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> dummy <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> bits <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> const b n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make n b <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> encode nbits x <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span>nbits<span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\tbits <span class=\"sy0\">-&gt;</span> bits_of_int nbits x <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bnand <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nin<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> nout<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> apply<span class=\"sy0\">=</span><span class=\"kw1\">function</span><br/>\t<span class=\"br0\">[</span><span class=\"sy0\">|</span> a<span class=\"sy0\">;</span> b <span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"bad args\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* block evaluation\u00a0: returns the value of the output, given an input and a block. *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> eval block nbits_in nbits_out v <span class=\"sy0\">=</span><br/>\t<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput\"><span class=\"kw3\">output</span></a> nbits_out <span class=\"br0\">(</span>block<span class=\"sy0\">.</span>apply <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput\"><span class=\"kw3\">input</span></a> nbits_in v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* building a 4-bit adder *)</span><br/>\u00a0<br/><span class=\"co1\">(* first we build the usual gates *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bnot <span class=\"sy0\">=</span> serial <span class=\"br0\">(</span>fork <span class=\"nu0\">2</span><span class=\"br0\">)</span> bnand<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> band <span class=\"sy0\">=</span> serial bnand bnot<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* a or b =\u00a0!a nand\u00a0!b *)</span><br/><span class=\"kw1\">let</span> bor <span class=\"sy0\">=</span> serial <span class=\"br0\">(</span>assoc bnot bnot<span class=\"br0\">)</span> bnand<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* line \"a\" -&gt; two lines, \"a\" and \"not a\" *)</span><br/><span class=\"kw1\">let</span> a_not_a <span class=\"sy0\">=</span> parallel <span class=\"br0\">(</span>pass <span class=\"nu0\">1</span><span class=\"br0\">)</span> bnot<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bxor <span class=\"sy0\">=</span> block_array serial <span class=\"br0\">[</span><span class=\"sy0\">|</span><br/>\tassoc a_not_a a_not_a<span class=\"sy0\">;</span><br/>\tperm <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tassoc band band<span class=\"sy0\">;</span><br/>\tbor <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> half_adder <span class=\"sy0\">=</span> parallel bxor band<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* bits C0,A,B -&gt; S,C1 *)</span><br/><span class=\"kw1\">let</span> full_adder <span class=\"sy0\">=</span> block_array serial <span class=\"br0\">[</span><span class=\"sy0\">|</span><br/>\tassoc half_adder <span class=\"br0\">(</span>pass <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tperm <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tassoc <span class=\"br0\">(</span>pass <span class=\"nu0\">1</span><span class=\"br0\">)</span> half_adder<span class=\"sy0\">;</span><br/>\tperm <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tassoc <span class=\"br0\">(</span>pass <span class=\"nu0\">1</span><span class=\"br0\">)</span> bor <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* 4-bit adder *)</span><br/><span class=\"kw1\">let</span> add4 <span class=\"sy0\">=</span> block_array serial <span class=\"br0\">[</span><span class=\"sy0\">|</span><br/>\tmix <span class=\"nu0\">4</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\tassoc half_adder <span class=\"br0\">(</span>pass <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tassoc <span class=\"br0\">(</span>assoc <span class=\"br0\">(</span>pass <span class=\"nu0\">1</span><span class=\"br0\">)</span> full_adder<span class=\"br0\">)</span> <span class=\"br0\">(</span>pass <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tassoc <span class=\"br0\">(</span>assoc <span class=\"br0\">(</span>pass <span class=\"nu0\">2</span><span class=\"br0\">)</span> full_adder<span class=\"br0\">)</span> <span class=\"br0\">(</span>pass <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tassoc <span class=\"br0\">(</span>pass <span class=\"nu0\">3</span><span class=\"br0\">)</span> full_adder <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* 4-bit adder and three supplementary lines to make a multiple of 4 (to translate back to 4-bit integers) *)</span><br/><span class=\"kw1\">let</span> add4_io <span class=\"sy0\">=</span> assoc add4 <span class=\"br0\">(</span>const <span class=\"kw1\">false</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"co1\">(* wrapping the 4-bit to input and output integers instead of booleans<br/>plus a b -&gt; (sum,carry)<br/>*)</span><br/><span class=\"kw1\">let</span> plus a b <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>map <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>to_int<br/>\t\t<span class=\"br0\">(</span>eval add4_io <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>map <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Int64.html\"><span class=\"kw2\">Int64</span></a><span class=\"sy0\">.</span>of_int <span class=\"br0\">[</span><span class=\"sy0\">|</span> a<span class=\"sy0\">;</span> b <span class=\"sy0\">|</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\tv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, v<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 12, "block": "<pre class=\"parigp highlighted_source\">xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>a<span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"br0\">(</span>a<span class=\"sy0\">&amp;!</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>halfadd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">[</span>a<span class=\"sy0\">&amp;&amp;</span>b<span class=\"sy0\">,</span>xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>fulladd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>t<span class=\"sy0\">=</span>halfadd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">,</span>s<span class=\"sy0\">=</span>halfadd<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">[</span>t<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">||</span>s<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>s<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>add4<span class=\"br0\">(</span>a3<span class=\"sy0\">,</span>a2<span class=\"sy0\">,</span>a1<span class=\"sy0\">,</span>a0<span class=\"sy0\">,</span>b3<span class=\"sy0\">,</span>b2<span class=\"sy0\">,</span>b1<span class=\"sy0\">,</span>b0<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span>s1<span class=\"sy0\">,</span>s2<span class=\"sy0\">,</span>s3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts0<span class=\"sy0\">=</span>fulladd<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span>b0<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts1<span class=\"sy0\">=</span>fulladd<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span>b1<span class=\"sy0\">,</span>s0<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts2<span class=\"sy0\">=</span>fulladd<span class=\"br0\">(</span>a2<span class=\"sy0\">,</span>b2<span class=\"sy0\">,</span>s1<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts3<span class=\"sy0\">=</span>fulladd<span class=\"br0\">(</span>a3<span class=\"sy0\">,</span>b3<span class=\"sy0\">,</span>s2<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">[</span>s3<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>s3<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>s2<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>s1<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>s0<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>add4<span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 43, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> dec2bin <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%04b\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> bin2dec <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/oct.html\"><span class=\"kw3\">oct</span></a> <span class=\"st0\">\"0b\"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> bin2bits <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> bits2bin <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">+</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"co5\">@_</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> bxor <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> half_adder <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span> bxor<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> full_adder <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$c1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> half_adder<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s2</span><span class=\"sy0\">,</span> <span class=\"re0\">$c2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> half_adder<span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"re0\">$s2</span><span class=\"sy0\">,</span> <span class=\"re0\">$c1</span> <span class=\"sy0\">|</span> <span class=\"re0\">$c2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> four_bit_adder <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@abits</span> <span class=\"sy0\">=</span> bin2bits<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@bbits</span> <span class=\"sy0\">=</span> bin2bits<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s0</span><span class=\"sy0\">,</span><span class=\"re0\">$c0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full_adder<span class=\"br0\">(</span><span class=\"re0\">$abits</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbits</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s1</span><span class=\"sy0\">,</span><span class=\"re0\">$c1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full_adder<span class=\"br0\">(</span><span class=\"re0\">$abits</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbits</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$c0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s2</span><span class=\"sy0\">,</span><span class=\"re0\">$c2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full_adder<span class=\"br0\">(</span><span class=\"re0\">$abits</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbits</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$c1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s3</span><span class=\"sy0\">,</span><span class=\"re0\">$c3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full_adder<span class=\"br0\">(</span><span class=\"re0\">$abits</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbits</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$c2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>bits2bin<span class=\"br0\">(</span><span class=\"re0\">$s0</span><span class=\"sy0\">,</span> <span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"re0\">$s2</span><span class=\"sy0\">,</span> <span class=\"re0\">$s3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$c3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\" A    B      A      B   C    S  sum<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$abin</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbin</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> dec2bin<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span><span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> four_bit_adder<span class=\"br0\">(</span> <span class=\"re0\">$abin</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbin</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%2d +\u00a0%2d =\u00a0%s +\u00a0%s =\u00a0%s\u00a0%s =\u00a0%2d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>           <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$abin</span><span class=\"sy0\">,</span> <span class=\"re0\">$bbin</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">,</span> bin2dec<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">.</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> <span class=\"kw1\">xor</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"re0\">$a</span> <span class=\"kw1\">and</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">??</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> half<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">xor</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw1\">and</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> full<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ha0_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$ha0_c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> half<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"re0\">$c0</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ha1_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$ha1_c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> half<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"re0\">$ha0_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$ha1_s</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$ha0_c</span> <span class=\"kw1\">or</span> <span class=\"re0\">$ha1_c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> four<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"re0\">$a0</span><span class=\"sy0\">,</span> <span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$a2</span><span class=\"sy0\">,</span> <span class=\"re0\">$a3</span><span class=\"sy0\">,</span> <span class=\"re0\">$b0</span><span class=\"sy0\">,</span> <span class=\"re0\">$b1</span><span class=\"sy0\">,</span> <span class=\"re0\">$b2</span><span class=\"sy0\">,</span> <span class=\"re0\">$b3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$fa0_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa0_c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"re0\">$a0</span><span class=\"sy0\">,</span> <span class=\"re0\">$b0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$fa1_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa1_c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"re0\">$a1</span><span class=\"sy0\">,</span> <span class=\"re0\">$b1</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa0_c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$fa2_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa2_c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"re0\">$a2</span><span class=\"sy0\">,</span> <span class=\"re0\">$b2</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa1_c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$fa3_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa3_c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> full<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"re0\">$a3</span><span class=\"sy0\">,</span> <span class=\"re0\">$b3</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa2_c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$fa0_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa1_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa2_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa3_s</span><span class=\"sy0\">,</span> <span class=\"re0\">$fa3_c</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">is</span> four<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'1 + 1 == 2'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">is</span> four<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'5 + 5 == 10'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">is</span> four<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'7 + 9 == overflow'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 47, "block": "<pre class=\"text highlighted_source\">function xor_gate(bool a, bool b)<br/>    return (a and not b) or (not a and b)<br/>end function<br/>\u00a0<br/>function half_adder(bool a, bool b)<br/>    bool s = xor_gate(a,b)<br/>    bool c = a and b<br/>    return {s,c}<br/>end function<br/>\u00a0<br/>function full_adder(bool a, bool b, bool c)<br/>    bool {s1,c1} = half_adder(c,a)<br/>    bool {s2,c2} = half_adder(s1,b)<br/>    c = c1 or c2<br/>    return {s2,c}<br/>end function<br/>\u00a0<br/>function four_bit_adder(bool a0, a1, a2, a3, b0, b1, b2, b3)<br/>bool s0,s1,s2,s3,c  <br/>    {s0,c} = full_adder(a0,b0,0)<br/>    {s1,c} = full_adder(a1,b1,c)<br/>    {s2,c} = full_adder(a2,b2,c)<br/>    {s3,c} = full_adder(a3,b3,c)<br/>    return {s3,s2,s1,s0,c}<br/>end function<br/>\u00a0<br/>procedure test(integer a, integer b)<br/>    bool {a0,a1,a2,a3} = int_to_bits(a,4)<br/>    bool {b0,b1,b2,b3} = int_to_bits(b,4)<br/>    bool {r3,r2,r1,r0,c} = four_bit_adder(a0,a1,a2,a3,b0,b1,b2,b3)<br/>    integer r = bits_to_int({r0,r1,r2,r3})<br/>    printf(1,\"%04b +\u00a0%04b =\u00a0%04b\u00a0%b (%d+%d=%d)\\n\",{a,b,r,c,a,b,c*16+r})<br/>end procedure<br/>\u00a0<br/>test(0,0)<br/>test(0,1)<br/>test(0b1111,0b1111)<br/>test(3,7)<br/>test(11,8)<br/>test(0b1100,0b1100)<br/>test(0b1100,0b1101)<br/>test(0b1100,0b1110)<br/>test(0b1100,0b1111)<br/>test(0b1101,0b0000)<br/>test(0b1101,0b0001)<br/>test(0b1101,0b0010)<br/>test(0b1101,0b0011)</pre>"}, {"lang": "PicoLisp", "loc": 23, "block": "<pre class=\"text highlighted_source\">(de halfAdder (A B)  #&gt; (Carry . Sum)<br/>   (cons<br/>      (and A B)<br/>      (xor A B) ) )<br/>\u00a0<br/>(de fullAdder (A B C)  #&gt; (Carry . Sum)<br/>   (let (Ha1 (halfAdder C A)  Ha2 (halfAdder (cdr Ha1) B))<br/>      (cons<br/>         (or (car Ha1) (car Ha2))<br/>         (cdr Ha2) ) ) )<br/>\u00a0<br/>(de 4bitsAdder (A4 A3 A2 A1  B4 B3 B2 B1)  #&gt; (V S4 S3 S2 S1)<br/>   (let<br/>      (Fa1 (fullAdder A1 B1)<br/>         Fa2 (fullAdder A2 B2 (car Fa1))<br/>         Fa3 (fullAdder A3 B3 (car Fa2))<br/>         Fa4 (fullAdder A4 B4 (car Fa3)) )<br/>      (list<br/>         (car Fa4)<br/>         (cdr Fa4)<br/>         (cdr Fa3)<br/>         (cdr Fa2)<br/>         (cdr Fa1) ) ) )</pre>"}, {"lang": "PL/I", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* 4-BIT ADDER */<br/>\u00a0<br/>TEST: PROCEDURE OPTIONS (MAIN);<br/>   DECLARE CARRY_IN BIT (1) STATIC INITIAL ('0'B) ALIGNED;<br/>   declare (m, n, sum)(4) bit(1) aligned;<br/>   declare i fixed binary;<br/>\u00a0<br/>   get edit (m, n) (b(1));<br/>   put edit (m, ' + ', n, ' = ') (4 b, a);<br/>\u00a0<br/>   do i = 4 to 1 by -1;<br/>      call full_adder ((carry_in), m(i), n(i), sum(i), carry_in);<br/>   end;<br/>   put edit (sum) (b);<br/>\u00a0<br/>HALF_ADDER: PROCEDURE (IN1, IN2, SUM, CARRY);<br/>   DECLARE (IN1, IN2, SUM, CARRY) BIT (1) ALIGNED;<br/>\u00a0<br/>   SUM = ( ^IN1 &amp; IN2) | ( IN1 &amp; ^IN2);<br/>         /* Exclusive OR using only AND, NOT, OR. */<br/>   CARRY = IN1 &amp; IN2;<br/>\u00a0<br/>END HALF_ADDER;<br/>\u00a0<br/>FULL_ADDER: PROCEDURE (CARRY_IN, IN1, IN2, SUM, CARRY);<br/>   DECLARE (CARRY_IN, IN1, IN2, SUM, CARRY) BIT (1) ALIGNED;<br/>   DECLARE (SUM2, CARRY2) BIT (1) ALIGNED;<br/>\u00a0<br/>   CALL HALF_ADDER (CARRY_IN, IN1, SUM, CARRY);<br/>   CALL HALF_ADDER (SUM, IN2, SUM2, CARRY2);<br/>   SUM = SUM2;<br/>   CARRY = CARRY | CARRY2;<br/>END FULL_ADDER;<br/>\u00a0<br/>END TEST;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 52, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> bxor2 <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$out1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"kw4\">-band</span> <span class=\"br0\">(</span> <span class=\"kw4\">-bnot</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><br/>    <span class=\"re0\">$out2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">-bnot</span> <span class=\"re0\">$a</span> <span class=\"br0\">)</span> <span class=\"kw4\">-band</span> <span class=\"re0\">$b</span><br/>    <span class=\"re0\">$out1</span> <span class=\"kw4\">-bor</span> <span class=\"re0\">$out2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> hadder <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        <span class=\"st0\">\"S\"</span><span class=\"sy0\">=</span>bxor2 <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><br/>        <span class=\"st0\">\"C\"</span><span class=\"sy0\">=</span><span class=\"re0\">$a</span> <span class=\"kw4\">-band</span> <span class=\"re0\">$b</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> fadder <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$cd</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$out1</span> <span class=\"sy0\">=</span> hadder <span class=\"re0\">$cd</span> <span class=\"re0\">$a</span><br/>    <span class=\"re0\">$out2</span> <span class=\"sy0\">=</span> hadder <span class=\"re0\">$out1</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span><br/>    <span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        <span class=\"st0\">\"S\"</span><span class=\"sy0\">=</span><span class=\"re0\">$out2</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><br/>        <span class=\"st0\">\"C\"</span><span class=\"sy0\">=</span><span class=\"re0\">$out1</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span> <span class=\"kw4\">-bor</span> <span class=\"re0\">$out2</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> FourBitAdder <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">byte</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$a0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$a1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"re0\">$a2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><br/>    <span class=\"re0\">$a3</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span><br/>    <span class=\"re0\">$b0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$b1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"re0\">$b2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><br/>    <span class=\"re0\">$b3</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"kw4\">-band</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span><br/>    <span class=\"re0\">$out1</span> <span class=\"sy0\">=</span> fadder <span class=\"re0\">$a0</span> <span class=\"re0\">$b0</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$out2</span> <span class=\"sy0\">=</span> fadder <span class=\"re0\">$a1</span> <span class=\"re0\">$b1</span> <span class=\"re0\">$out1</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$out3</span> <span class=\"sy0\">=</span> fadder <span class=\"re0\">$a2</span> <span class=\"re0\">$b2</span> <span class=\"re0\">$out2</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$out4</span> <span class=\"sy0\">=</span> fadder <span class=\"re0\">$a3</span> <span class=\"re0\">$b3</span> <span class=\"re0\">$out3</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        <span class=\"st0\">\"S\"</span><span class=\"sy0\">=</span><span class=\"st0\">\"{3}{2}{1}{0}\"</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$out1</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$out2</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$out3</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$out4</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><br/>        <span class=\"st0\">\"V\"</span><span class=\"sy0\">=</span><span class=\"re0\">$out4</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>FourBitAdder <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><br/>\u00a0<br/>FourBitAdder 0xA <span class=\"nu0\">5</span><br/>\u00a0<br/>FourBitAdder 0xC 0xB<br/>\u00a0<br/><span class=\"br0\">[</span>Convert<span class=\"br0\">]</span>::ToByte<span class=\"br0\">(</span><span class=\"br0\">(</span>FourBitAdder 0xC 0xB<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"st0\">\"S\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "PureBasic", "loc": 54, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;Because no representation for a solitary bit is present, bits are stored as bytes.</span><br/><span class=\"co1\">;Output values from the constructive building blocks is done using pointers (i.e. '*').</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b notGate<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">~</span>x<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b xorGate<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span>  <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> notGate<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>notGate<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> y<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> halfadder<span class=\"br0\">(</span>a, b, <span class=\"sy0\">*</span>sum.Byte, <span class=\"sy0\">*</span>carry.Byte<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>sum<span class=\"sy0\">\\</span>b <span class=\"sy0\">=</span> xorGate<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>carry<span class=\"sy0\">\\</span>b <span class=\"sy0\">=</span> a <span class=\"sy0\">&amp;</span> b<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> fulladder<span class=\"br0\">(</span>a, b, c0, <span class=\"sy0\">*</span>sum.Byte, <span class=\"sy0\">*</span>c1.Byte<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> sum_ac.b, carry_ac.b, carry_sb.b<br/>\u00a0<br/>  halfadder<span class=\"br0\">(</span>c0, a, @sum_ac, @carry_ac<span class=\"br0\">)</span><br/>  halfadder<span class=\"br0\">(</span>sum_ac, b, <span class=\"sy0\">*</span>sum, @carry_sb<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>c1<span class=\"sy0\">\\</span>b <span class=\"sy0\">=</span> carry_ac <span class=\"sy0\">|</span> carry_sb<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> fourbitsadder<span class=\"br0\">(</span>a0, a1, a2, a3, b0, b1, b2, b3 , <span class=\"sy0\">*</span>s0.Byte, <span class=\"sy0\">*</span>s1.Byte, <span class=\"sy0\">*</span>s2.Byte, <span class=\"sy0\">*</span>s3.Byte, <span class=\"sy0\">*</span>v.Byte<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.b c1, c2, c3<br/>\u00a0<br/>  fulladder<span class=\"br0\">(</span>a0, b0, <span class=\"nu0\">0</span>,   <span class=\"sy0\">*</span>s0, @c1<span class=\"br0\">)</span><br/>  fulladder<span class=\"br0\">(</span>a1, b1, c1,  <span class=\"sy0\">*</span>s1, @c2<span class=\"br0\">)</span><br/>  fulladder<span class=\"br0\">(</span>a2, b2, c2,  <span class=\"sy0\">*</span>s2, @c3<span class=\"br0\">)</span><br/>  fulladder<span class=\"br0\">(</span>a3, b3, c3,  <span class=\"sy0\">*</span>s3, <span class=\"sy0\">*</span>v<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;// Test implementation, map two 4-character strings to the inputs of the fourbitsadder() and display results</span><br/><span class=\"kw1\">Procedure</span>.s test_4_bit_adder<span class=\"br0\">(</span>a.s,b.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.b s0, s1, s2, s3,  v, i<br/>  <span class=\"kw1\">Dim</span> a.b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> b.b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>a, <span class=\"nu0\">4</span> <span class=\"sy0\">-</span> i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    b<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>b, <span class=\"nu0\">4</span> <span class=\"sy0\">-</span> i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  fourbitsadder<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, @s0, @s1, @s2, @s3, @v<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> a <span class=\"sy0\">+</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">+</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>s3<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>s0<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" overflow \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>test_4_bit_adder<span class=\"br0\">(</span><span class=\"st0\">\"0110\"</span>,<span class=\"st0\">\"1110\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 35, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> b<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>b <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ha<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> xor<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> a <span class=\"kw1\">and</span> b     <span class=\"co1\"># sum, carry</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fa<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> ci<span class=\"br0\">)</span>:<br/>    s0<span class=\"sy0\">,</span> c0 <span class=\"sy0\">=</span> ha<span class=\"br0\">(</span>ci<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>    s1<span class=\"sy0\">,</span> c1 <span class=\"sy0\">=</span> ha<span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s1<span class=\"sy0\">,</span> c0 <span class=\"kw1\">or</span> c1     <span class=\"co1\"># sum, carry</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fa4<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    width <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    ci <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"br0\">]</span> * width<br/>    co <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"br0\">]</span> * width<br/>    s  <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"br0\">]</span> * width<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span>:<br/>        s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> co<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> fa<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> co<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> i <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">,</span> co<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> int2bus<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> width<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"st0\">\"{0:0{1}b}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> width<span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> bus2int<span class=\"br0\">(</span>b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> i <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> bit <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">if</span> bit<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> test_fa4<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    width <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    tot <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"br0\">]</span> * <span class=\"br0\">(</span>width + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>**width<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>**width<span class=\"br0\">)</span>:<br/>            tot<span class=\"br0\">[</span>:width<span class=\"br0\">]</span><span class=\"sy0\">,</span> tot<span class=\"br0\">[</span>width<span class=\"br0\">]</span> <span class=\"sy0\">=</span> fa4<span class=\"br0\">(</span>int2bus<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> int2bus<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">assert</span> a + b <span class=\"sy0\">==</span> bus2int<span class=\"br0\">(</span>tot<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"totals don't match:\u00a0%i +\u00a0%i\u00a0!=\u00a0%s\"</span>\u00a0% <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> tot<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>   test_fa4<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 46, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (adder-and a b)<br/>  (if (= 2 (+ a b)) 1 0))   \u00a0; Defining the basic and function<br/>\u00a0<br/>(define (adder-not a)<br/>  (if (zero? a) 1 0))       \u00a0; Defining the basic not function<br/>\u00a0<br/>(define (adder-or a b)<br/>  (if (&gt; (+ a b) 0) 1 0))   \u00a0; Defining the basic or function<br/>\u00a0<br/>(define (adder-xor a b)<br/>  (adder-or<br/>   (adder-and<br/>    (adder-not a)<br/>    b)<br/>   (adder-and<br/>    a<br/>    (adder-not b))))        \u00a0; Defines the xor function based on the basic functions<br/>\u00a0<br/>(define (half-adder a b)<br/>  (list (adder-xor a b) (adder-and a b)))\u00a0; Creates the half adder, returning '(sum carry)<br/>\u00a0<br/>(define (adder a b c0)<br/>  (define half-a (half-adder c0 a))<br/>  (define half-b (half-adder (car half-a) b))<br/>  (list<br/>   (car half-b)<br/>   (adder-or (cadr half-a) (cadr half-b)))) \u00a0; Creates the full adder, returns '(sum carry)<br/>\u00a0<br/>(define (n-bit-adder 4a 4b)  \u00a0; Creates the n-bit adder, it receives 2 lists of same length<br/>  (let-values                \u00a0; Lists of the form '([01]+)<br/>      (((4s v)               \u00a0; for/fold form will return 2 values, receiving this here<br/>        (for/fold ((S null) (c 0))\u00a0;initializes the full sum and carry<br/>          ((a (in-list (reverse 4a))) (b (in-list (reverse 4b))))<br/>         \u00a0;here it prepares variables for summing each element, starting from the least important bits<br/>          (define added<br/>            (adder a b c))<br/>          (values<br/>           (cons (car added) S)\u00a0; changes S and c to it's new values in the next iteration<br/>           (cadr added)))))<br/>    (if (zero? v)<br/>        4s<br/>        (cons v 4s))))<br/>\u00a0<br/>(n-bit-adder '(1 0 1 0) '(0 1 1 1))\u00a0;-&gt; '(1 0 0 0 1)</pre>"}, {"lang": "REXX", "loc": 30, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays (all) the  sums  of a  full  4\u2500bit adder  (with carry).         */</span><br/><span class=\"kw1\">call</span> hdr1;  <span class=\"kw1\">call</span> hdr2                            <span class=\"coMULTI\">/*note the order of headers &amp; trailers.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  traipse thru all possibilities.*/</span><br/>   <span class=\"kw1\">do</span>    j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">16</span><br/>                            <span class=\"kw1\">do</span> m=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">4</span>;   a<span class=\"sy0\">.</span>m=bit<span class=\"br0\">(</span>j, m<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*m*/</span><br/>      <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">16</span><br/>                            <span class=\"kw1\">do</span> m=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">4</span>;   b<span class=\"sy0\">.</span>m=bit<span class=\"br0\">(</span>k, m<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*m*/</span><br/>      sc=4bitAdder<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>, b<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/>      z=a<span class=\"sy0\">.</span>3 a<span class=\"sy0\">.</span>2 a<span class=\"sy0\">.</span>1 a<span class=\"sy0\">.</span>0   <span class=\"st0\">'_+_'</span>   b<span class=\"sy0\">.</span>3 b<span class=\"sy0\">.</span>2 b<span class=\"sy0\">.</span>1 b<span class=\"sy0\">.</span>0    <span class=\"st0\">\"_=_\"</span>    sc    <span class=\"st0\">','</span>    s<span class=\"sy0\">.</span>3 s<span class=\"sy0\">.</span>2 s<span class=\"sy0\">.</span>1 s<span class=\"sy0\">.</span>0<br/>      <span class=\"kw1\">say</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">space</span><span class=\"br0\">(</span>z, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, , <span class=\"st0\">'_'</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*remove all the underbars (_) from Z. */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>   <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> hdr2;  <span class=\"kw1\">call</span> hdr1                            <span class=\"coMULTI\">/*display two trailers (note the order)*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>bit:       <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;    <span class=\"kw1\">return</span>  <span class=\"kw6\">substr</span><span class=\"br0\">(</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span> <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>, y+<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>halfAdder: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> c;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;      c=x <span class=\"sy0\">&amp;</span> y;     <span class=\"kw1\">return</span> x <span class=\"sy0\">&amp;&amp;</span> y<br/>hdr1:      <span class=\"kw1\">say</span> <span class=\"st0\">'aaaa + bbbb = c, sum     [c=carry]'</span>;              <span class=\"kw1\">return</span><br/>hdr2:      <span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550   \u2550\u2550\u2550\u2550   \u2550\u2550\u2550\u2550\u2550\u2550'</span>             \u00a0;              <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fullAdder: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> c;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y,fc<br/>           _1=halfAdder<span class=\"br0\">(</span>fc, x<span class=\"br0\">)</span>;        c1=c<br/>           _2=halfAdder<span class=\"br0\">(</span>_1, y<span class=\"br0\">)</span>;        c=c <span class=\"sy0\">|</span> c1;                  <span class=\"kw1\">return</span> _2<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>4bitAdder: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> s<span class=\"sy0\">.</span> a<span class=\"sy0\">.</span> b<span class=\"sy0\">.</span>;  carry<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>                                <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">4</span>;                n=j-<span class=\"nu0\">1</span><br/>                                s<span class=\"sy0\">.</span>j=fullAdder<span class=\"br0\">(</span>a<span class=\"sy0\">.</span>j, b<span class=\"sy0\">.</span>j, carry<span class=\"sy0\">.</span>n<span class=\"br0\">)</span>;      carry<span class=\"sy0\">.</span>j=c<br/>                                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>           <span class=\"kw1\">return</span> c</pre>"}, {"lang": "Ring", "loc": 73, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>###---------------------------<br/># Program: 4 Bit Adder - Ring<br/># Author:  Bert Mariani<br/># Date:    2018-02-28<br/># <br/># Bit Adder: Input  A B Cin<br/>#            Output S   Cout<br/>#<br/># A ^ B =&gt; axb                XOR gate<br/>#          axb ^ C =&gt; Sout    XOR gate<br/>#          axb &amp; C =&gt; d       AND gate<br/>#<br/># A &amp; B =&gt; anb                AND gate<br/>#          anb | d =&gt; Cout     OR gate<br/># <br/># Call Adder for number of bit in input fields<br/>###-------------------------------------------<br/>### 4 Bits<br/>\u00a0<br/>Cout     = \"0\" <br/>OutputS  = \"0000\"<br/>InputA   = \"0101\"<br/>InputB   = \"1101\"<br/>\u00a0<br/>   See \"InputA:.. \"+ InputA +nl<br/>   See \"InputB:.. \"+ InputB +nl<br/>BitsAdd(InputA, InputB)<br/>   See \"Sum...: \"+ Cout +\" \"+ OutputS +nl+nl<br/>\u00a0<br/>###-------------------------------------------<br/>### 32 Bits<br/>\u00a0<br/>Cout     = \"0\" <br/>OutputS  = \"00000000000000000000000000000000\"<br/>InputA   = \"01010101010101010101010101010101\"<br/>InputB   = \"11011101110111011101110111011101\"<br/>\u00a0<br/>   See \"InputA:.. \"+ InputA +nl<br/>   See \"InputB:.. \"+ InputB +nl<br/>BitsAdd(InputA, InputB)<br/>   See \"Sum...: \"+ Cout +\" \"+ OutputS +nl+nl<br/>\u00a0<br/>###-------------------------------<br/>\u00a0<br/>Func BitsAdd(InputA, InputB)<br/>\tnbrBits = len(InputA)<br/>\u00a0<br/>\tfor i = nbrBits to 1 step -1<br/>\t      A = InputA[i]<br/>\t      B = InputB[i]<br/>\t      C = Cout<br/>\u00a0<br/>              S = Adder(A,B,C)<br/>\t      OutputS[i] = \"\" + S<br/>\tnext<br/>return<br/>\u00a0<br/>###------------------------<br/>Func Adder(A,B,C)<br/>\u00a0<br/>    axb  =   A ^ B<br/>    Sout = axb ^ C<br/>    d    = axb &amp; C<br/>\u00a0<br/>    anb  =   A &amp; B<br/>    Cout = anb | d    ### Cout is global<br/>\u00a0<br/>return(Sout)<br/>###------------------------<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 56, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># returns pair [sum, carry]</span><br/><span class=\"kw1\">def</span> four_bit_adder<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  a_bits = binary_string_to_bits<span class=\"br0\">(</span>a,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  b_bits = binary_string_to_bits<span class=\"br0\">(</span>b,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>  s0, c0 = full_adder<span class=\"br0\">(</span>a_bits<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, b_bits<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  s1, c1 = full_adder<span class=\"br0\">(</span>a_bits<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, b_bits<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, c0<span class=\"br0\">)</span><br/>  s2, c2 = full_adder<span class=\"br0\">(</span>a_bits<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, b_bits<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, c1<span class=\"br0\">)</span><br/>  s3, c3 = full_adder<span class=\"br0\">(</span>a_bits<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, b_bits<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, c2<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>bits_to_binary_string<span class=\"br0\">(</span><span class=\"br0\">[</span>s0, s1, s2, s3<span class=\"br0\">]</span><span class=\"br0\">)</span>, c3.<span class=\"me1\">to_s</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># returns pair [sum, carry]</span><br/><span class=\"kw1\">def</span> full_adder<span class=\"br0\">(</span>a, b, c0<span class=\"br0\">)</span><br/>  s, c = half_adder<span class=\"br0\">(</span>c0, a<span class=\"br0\">)</span><br/>  s, c1 = half_adder<span class=\"br0\">(</span>s, b<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span>s, _or<span class=\"br0\">(</span>c,c1<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># returns pair [sum, carry]</span><br/><span class=\"kw1\">def</span> half_adder<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span>xor<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>, _and<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> xor<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>  _or<span class=\"br0\">(</span>_and<span class=\"br0\">(</span>a, _not<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>, _and<span class=\"br0\">(</span>_not<span class=\"br0\">(</span>a<span class=\"br0\">)</span>, b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># \"and\", \"or\" and \"not\" are Ruby keywords</span><br/><span class=\"kw1\">def</span> _and<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>  a <span class=\"sy0\">&amp;</span> b  <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> _or<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>   a <span class=\"sy0\">|</span> b  <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> _not<span class=\"br0\">(</span>a<span class=\"br0\">)</span>    ~a <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> int_to_binary_string<span class=\"br0\">(</span>n, length<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"%0#{length}b\"</span> <span class=\"sy0\">%</span> n<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> binary_string_to_bits<span class=\"br0\">(</span>s, length<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"%#{length}s\"</span> <span class=\"sy0\">%</span> s<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> bits_to_binary_string<span class=\"br0\">(</span>bits<span class=\"br0\">)</span><br/>  bits.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_s<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">join</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\" A    B      A      B   C    S  sum\"</span> <br/><span class=\"nu0\">0</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a<span class=\"sy0\">|</span><br/>  <span class=\"nu0\">0</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>    bin_a = int_to_binary_string<span class=\"br0\">(</span>a, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    bin_b = int_to_binary_string<span class=\"br0\">(</span>b, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    sum, carry = four_bit_adder<span class=\"br0\">(</span>bin_a, bin_b<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"%2d +\u00a0%2d =\u00a0%s +\u00a0%s =\u00a0%s\u00a0%s =\u00a0%2d\"</span> <span class=\"sy0\">%</span><br/>         <span class=\"br0\">[</span>a, b, bin_a, bin_b, carry, sum, <span class=\"br0\">(</span>carry <span class=\"sy0\">+</span> sum<span class=\"br0\">)</span>.<span class=\"me1\">to_i</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Sather", "loc": 138, "block": "<pre class=\"text highlighted_source\">-- a \"pin\" can be connected only to one component<br/>-- that \"sets\" it to 0 or 1, while it can be \"read\"<br/>-- ad libitum. (Tristate logic is not taken into account)<br/>-- This class does the proper checking, assuring the \"circuit\"<br/>-- and the connections are described correctly. Currently can make<br/>-- hard the implementation of a latch<br/>class PIN is<br/>  private attr v:INT;<br/>  readonly attr name:STR;<br/>  private attr connected:BOOL;<br/>\u00a0<br/>  create(n:STR):SAME is -- n = conventional name for this \"pin\"<br/>    res\u00a0::= new;<br/>    res.name\u00a0:= n;<br/>    res.connected\u00a0:= false;<br/>    return res;<br/>  end;<br/>\u00a0<br/>  val:INT is<br/>    if self.connected.not then<br/>       #ERR + \"pin \" + self.name + \" is undefined\\n\";<br/>       return 0; -- could return a random bit to \"simulate\" undefined<br/>                 -- behaviour<br/>    else<br/>       return self.v;<br/>    end;<br/>  end;<br/>\u00a0<br/>  -- connect ...<br/>  val(v:INT) is<br/>    if self.connected then<br/>       #ERR + \"pin \" + self.name + \" is already 'assigned'\\n\";<br/>    else<br/>       self.connected\u00a0:= true;<br/>       self.v\u00a0:= v.band(1);<br/>    end;<br/>  end;<br/>\u00a0<br/>  -- connect to existing pin<br/>  val(v:PIN) is<br/>     self.val(v.val);<br/>  end;<br/>end;<br/>\u00a0<br/>-- XOR \"block\"<br/>class XOR is<br/>  readonly attr xor\u00a0:PIN;<br/>\u00a0<br/>  create(a, b:PIN):SAME is<br/>    res\u00a0::= new;<br/>    res.xor\u00a0:= #PIN(\"xor output\");<br/>    l  \u00a0::= a.val.bnot.band(1).band(b.val);<br/>    r  \u00a0::= a.val.band(b.val.bnot.band(1));<br/>    res.xor.val\u00a0:= r.bor(l);<br/>    return res;<br/>  end;<br/>end;<br/>\u00a0<br/>-- HALF ADDER \"block\"<br/>class HALFADDER is<br/>  readonly attr s, c:PIN;<br/>\u00a0<br/>  create(a, b:PIN):SAME is<br/>    res\u00a0::= new;<br/>    res.s\u00a0:= #PIN(\"halfadder sum output\");<br/>    res.c\u00a0:= #PIN(\"halfadder carry output\");<br/>    res.s.val\u00a0:= #XOR(a, b).xor.val;<br/>    res.c.val\u00a0:= a.val.band(b.val);<br/>    return res;<br/>  end;<br/>end;<br/>\u00a0<br/>-- FULL ADDER \"block\"<br/>class FULLADDER is<br/>  readonly attr s, c:PIN;<br/>\u00a0<br/>  create(a, b, ic:PIN):SAME is<br/>    res\u00a0::= new;<br/>    res.s\u00a0:= #PIN(\"fulladder sum output\");<br/>    res.c\u00a0:= #PIN(\"fulladder carry output\");<br/>    halfadder1\u00a0::= #HALFADDER(a, b);<br/>    halfadder2\u00a0::= #HALFADDER(halfadder1.s, ic);<br/>    res.s.val\u00a0:= halfadder2.s;<br/>    res.c.val\u00a0:= halfadder2.c.val.bor(halfadder1.c.val);<br/>    return res;<br/>  end;<br/>end;<br/>\u00a0<br/>-- FOUR BITS ADDER \"block\"<br/>class FOURBITSADDER is<br/>  readonly attr s0, s1, s2, s3, v\u00a0:PIN;<br/>\u00a0<br/>  create(a0, a1, a2, a3, b0, b1, b2, b3:PIN):SAME is<br/>    res\u00a0::= new;<br/>    res.s0 \u00a0:= #PIN(\"4-bits-adder sum outbut line 0\");<br/>    res.s1 \u00a0:= #PIN(\"4-bits-adder sum outbut line 1\");<br/>    res.s2 \u00a0:= #PIN(\"4-bits-adder sum outbut line 2\");<br/>    res.s3 \u00a0:= #PIN(\"4-bits-adder sum outbut line 3\");<br/>    res.v  \u00a0:= #PIN(\"4-bits-adder overflow output\");<br/>    zero\u00a0::= #PIN(\"zero/mass pin\");<br/>    zero.val\u00a0:= 0;<br/>    fa0\u00a0::= #FULLADDER(a0, b0, zero);<br/>    fa1\u00a0::= #FULLADDER(a1, b1, fa0.c);<br/>    fa2\u00a0::= #FULLADDER(a2, b2, fa1.c);<br/>    fa3\u00a0::= #FULLADDER(a3, b3, fa2.c);<br/>    res.v.val \u00a0:= fa3.c;<br/>    res.s0.val\u00a0:= fa0.s;<br/>    res.s1.val\u00a0:= fa1.s;<br/>    res.s2.val\u00a0:= fa2.s;<br/>    res.s3.val\u00a0:= fa3.s;<br/>    return res;<br/>  end;<br/>end;<br/>\u00a0<br/>-- testing --<br/>\u00a0<br/>class MAIN is<br/>  main is<br/>    a0\u00a0::= #PIN(\"a0 in\"); b0\u00a0::= #PIN(\"b0 in\");<br/>    a1\u00a0::= #PIN(\"a1 in\"); b1\u00a0::= #PIN(\"b1 in\");<br/>    a2\u00a0::= #PIN(\"a2 in\"); b2\u00a0::= #PIN(\"b2 in\");<br/>    a3\u00a0::= #PIN(\"a3 in\"); b3\u00a0::= #PIN(\"b3 in\");<br/>    ov\u00a0::= #PIN(\"overflow\");<br/>\u00a0<br/>    a0.val\u00a0:= 1; b0.val\u00a0:= 1;<br/>    a1.val\u00a0:= 1; b1.val\u00a0:= 1;<br/>    a2.val\u00a0:= 0; b2.val\u00a0:= 0;<br/>    a3.val\u00a0:= 0; b3.val\u00a0:= 1;<br/>\u00a0<br/>    fba\u00a0::= #FOURBITSADDER(a0,a1,a2,a3,b0,b1,b2,b3);<br/>    #OUT + #FMT(\"%d%d%d%d\", a3.val, a2.val, a1.val, a0.val) +<br/>    \t   \" + \" + <br/>           #FMT(\"%d%d%d%d\", b3.val, b2.val, b1.val, b0.val) +<br/>           \" = \" +<br/>           #FMT(\"%d%d%d%d\", fba.s3.val, fba.s2.val, fba.s1.val, fba.s0.val) + <br/>           \", overflow = \" + fba.v.val + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Sed", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#!/bin/sed -f<br/># (C) 2005,2014 by Mariusz Woloszyn\u00a0:)<br/># https://en.wikipedia.org/wiki/Adder_(electronics)<br/>\u00a0<br/>##############################<br/># PURE SED BINARY FULL ADDER #<br/>##############################<br/>\u00a0<br/>\u00a0<br/># Input two lines, sanitize input<br/>N<br/>s/ //g<br/>/^[01\t ]\\+\\n[01\t ]\\+$/! {<br/>\ti\\<br/>\tERROR: WRONG INPUT DATA<br/>\td<br/>\tq<br/>}<br/>s/[ \t]//g<br/>\u00a0<br/># Add place for Sum and Cary bit<br/>s/$/\\n\\n0/<br/>\u00a0<br/>:LOOP<br/># Pick A,B and C bits and put that to hold<br/>s/^\\(.*\\)\\(.\\)\\n\\(.*\\)\\(.\\)\\n\\(.*\\)\\n\\(.\\)$/0\\1\\n0\\3\\n\\5\\n\\6\\2\\4/<br/>h<br/>\u00a0<br/># Grab just A,B,C<br/>s/^.*\\n.*\\n.*\\n\\(...\\)$/\\1/<br/>\u00a0<br/># binary full adder module<br/># INPUT:  3bits (A,B,Carry in), for example 101<br/># OUTPUT: 2bits (Carry, Sum), for wxample   10<br/>s/$/;000=00001=01010=01011=10100=01101=10110=10111=11/<br/>s/^\\(...\\)[^;]*;[^;]*\\1=\\(..\\).*/\\2/<br/>\u00a0<br/># Append the sum to hold<br/>H<br/>\u00a0<br/># Rewrite the output, append the sum bit to final sum<br/>g<br/>s/^\\(.*\\)\\n\\(.*\\)\\n\\(.*\\)\\n...\\n\\(.\\)\\(.\\)$/\\1\\n\\2\\n\\5\\3\\n\\4/<br/>\u00a0<br/># Output result and exit if no more bits to process..<br/>/^\\([0]*\\)\\n\\([0]*\\)\\n/ {<br/>\ts/^.*\\n.*\\n\\(.*\\)\\n\\(.\\)/\\2\\1/<br/>\ts/^0\\(.*\\)/\\1/<br/>\tq<br/>}<br/>\u00a0<br/>b LOOP</pre>"}, {"lang": "Scala", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> FourBitAdder <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> Nibble<span class=\"sy0\">=</span><span class=\"br0\">(</span>Boolean, Boolean, Boolean, Boolean<span class=\"br0\">)</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> xor<span class=\"br0\">(</span>a<span class=\"sy0\">:</span>Boolean, b<span class=\"sy0\">:</span>Boolean<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>a<span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span>b || a<span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> halfAdder<span class=\"br0\">(</span>a<span class=\"sy0\">:</span>Boolean, b<span class=\"sy0\">:</span>Boolean<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s<span class=\"sy0\">=</span>xor<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c<span class=\"sy0\">=</span>a <span class=\"sy0\">&amp;&amp;</span> b<br/>      <span class=\"br0\">(</span>s, c<span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fullAdder<span class=\"br0\">(</span>a<span class=\"sy0\">:</span>Boolean, b<span class=\"sy0\">:</span>Boolean, cIn<span class=\"sy0\">:</span>Boolean<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s1, c1<span class=\"br0\">)</span><span class=\"sy0\">=</span>halfAdder<span class=\"br0\">(</span>a, cIn<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s, c2<span class=\"br0\">)</span><span class=\"sy0\">=</span>halfAdder<span class=\"br0\">(</span>s1, b<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cOut<span class=\"sy0\">=</span>c1 || c2<br/>      <span class=\"br0\">(</span>s, cOut<span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fourBitAdder<span class=\"br0\">(</span>a<span class=\"sy0\">:</span>Nibble, b<span class=\"sy0\">:</span>Nibble<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s0, c0<span class=\"br0\">)</span><span class=\"sy0\">=</span>fullAdder<span class=\"br0\">(</span>a.<span class=\"sy0\">_</span>4, b.<span class=\"sy0\">_</span>4, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s1, c1<span class=\"br0\">)</span><span class=\"sy0\">=</span>fullAdder<span class=\"br0\">(</span>a.<span class=\"sy0\">_</span>3, b.<span class=\"sy0\">_</span>3, c0<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s2, c2<span class=\"br0\">)</span><span class=\"sy0\">=</span>fullAdder<span class=\"br0\">(</span>a.<span class=\"sy0\">_</span>2, b.<span class=\"sy0\">_</span>2, c1<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s3, cOut<span class=\"br0\">)</span><span class=\"sy0\">=</span>fullAdder<span class=\"br0\">(</span>a.<span class=\"sy0\">_</span>1, b.<span class=\"sy0\">_</span>1, c2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>s3, s2, s1, s0<span class=\"br0\">)</span>, cOut<span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 35, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">60</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">;; for logical bits</span><br/>\u00a0<br/><span class=\"co1\">;; Returns a list of bits: '(sum carry)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>half<span class=\"sy0\">-</span>adder a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span>xor a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span><span class=\"kw1\">and</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Returns a list of bits: '(sum carry)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>adder a b c<span class=\"sy0\">-</span>in<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>h1 <span class=\"br0\">(</span>half<span class=\"sy0\">-</span>adder c<span class=\"sy0\">-</span>in a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>h2 <span class=\"br0\">(</span>half<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">car</span> h1<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> h2<span class=\"br0\">)</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span>ior <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> h1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> h2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; a and b are lists of 4 bits each</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>four<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>add<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> a <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> b <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>add<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> a <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> b <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> add<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>add<span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> a <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> b <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> add<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>add<span class=\"sy0\">-</span><span class=\"nu0\">4</span> <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>adder <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> a <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> b <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> add<span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> add<span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> add<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> add<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> add<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> add<span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg a b<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" + \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" = \"</span><span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>four<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>adder a b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>show<span class=\"sy0\">-</span>eg <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 31, "block": "<pre class=\"ruby highlighted_source\">func bxor<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span>~a <span class=\"sy0\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> ~b<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func half_adder<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">(</span>bxor<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>, a <span class=\"sy0\">&amp;</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func full_adder<span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var <span class=\"br0\">(</span>s1, c1<span class=\"br0\">)</span> = half_adder<span class=\"br0\">(</span>a, c<span class=\"br0\">)</span><br/>  var <span class=\"br0\">(</span>s2, c2<span class=\"br0\">)</span> = half_adder<span class=\"br0\">(</span>s1, b<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">(</span>s2, c1 <span class=\"sy0\">|</span> c2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func four_bit_adder<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var <span class=\"br0\">(</span>s0, c0<span class=\"br0\">)</span> = full_adder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  var <span class=\"br0\">(</span>s1, c1<span class=\"br0\">)</span> = full_adder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, c0<span class=\"br0\">)</span><br/>  var <span class=\"br0\">(</span>s2, c2<span class=\"br0\">)</span> = full_adder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, c1<span class=\"br0\">)</span><br/>  var <span class=\"br0\">(</span>s3, c3<span class=\"br0\">)</span> = full_adder<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, b<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, c2<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>s3,s2,s1,s0<span class=\"br0\">]</span>.<span class=\"me1\">join</span>, c3.<span class=\"me1\">to_s</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\" A    B      A      B   C    S  sum\"</span><br/><span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> ^<span class=\"nu0\">16</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> ^<span class=\"nu0\">16</span> <span class=\"br0\">{</span><br/>    var<span class=\"br0\">(</span>abin, bbin<span class=\"br0\">)</span> = <span class=\"br0\">[</span>a,b<span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"st0\">\"%04b\"</span><span class=\"sy0\">%</span>n<span class=\"sy0\">-&gt;</span>chars.<span class=\"me1\">reverse</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span> <span class=\"br0\">}</span>...<br/>    <span class=\"me1\">var</span><span class=\"br0\">(</span>s, c<span class=\"br0\">)</span> = four_bit_adder<span class=\"br0\">(</span>abin, bbin<span class=\"br0\">)</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d +\u00a0%2d =\u00a0%s +\u00a0%s =\u00a0%s\u00a0%s =\u00a0%2d<span class=\"es0\">\\n</span>\"</span>,<br/>        a, b, abin.<span class=\"me1\">join</span>, bbin.<span class=\"me1\">join</span>, c, s, <span class=\"st0\">\"#{c}#{s}\"</span>.<span class=\"me1\">bin</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SystemVerilog", "loc": 35, "block": "<pre class=\"systemverilog highlighted_source\">\u00a0<br/><span class=\"kw4\">module</span> Half_Adder<span class=\"br0\">(</span> <span class=\"kw5\">input</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"kw5\">output</span> <span class=\"kw3\">s</span><span class=\"sy0\">,</span> c <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">assign</span> <span class=\"kw3\">s</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">^</span> b<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">assign</span> c <span class=\"sy0\">=</span> a <span class=\"sy0\">&amp;</span> b<span class=\"sy0\">;</span><br/><span class=\"kw4\">endmodule</span><br/>\u00a0<br/><span class=\"kw4\">module</span> Full_Adder<span class=\"br0\">(</span> <span class=\"kw5\">input</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c_in<span class=\"sy0\">,</span> <span class=\"kw5\">output</span> <span class=\"kw3\">s</span><span class=\"sy0\">,</span> c_out <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw5\">wire</span> s_ha1<span class=\"sy0\">,</span> c_ha1<span class=\"sy0\">,</span> c_ha2<span class=\"sy0\">;</span><br/>\u00a0<br/>  Half_Adder ha1<span class=\"br0\">(</span> .a<span class=\"br0\">(</span>c_in<span class=\"br0\">)</span><span class=\"sy0\">,</span> .b<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> .<span class=\"kw3\">s</span><span class=\"br0\">(</span>s_ha1<span class=\"br0\">)</span><span class=\"sy0\">,</span> .c<span class=\"br0\">(</span>c_ha1<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Half_Adder ha2<span class=\"br0\">(</span> .a<span class=\"br0\">(</span>s_ha1<span class=\"br0\">)</span><span class=\"sy0\">,</span> .b<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> .<span class=\"kw3\">s</span><span class=\"br0\">(</span><span class=\"kw3\">s</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> .c<span class=\"br0\">(</span>c_ha2<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">assign</span> c_out <span class=\"sy0\">=</span> c_ha1 <span class=\"sy0\">|</span> c_ha2<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">endmodule</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">module</span> Multibit_Adder<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span><span class=\"kw3\">s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw5\">parameter</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>  <span class=\"kw5\">input</span> <span class=\"br0\">[</span>N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> a<span class=\"sy0\">;</span><br/>  <span class=\"kw5\">input</span> <span class=\"br0\">[</span>N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> b<span class=\"sy0\">;</span><br/>  <span class=\"kw5\">output</span> <span class=\"br0\">[</span>N<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw3\">s</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw5\">wire</span> <span class=\"br0\">[</span>N<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">assign</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">assign</span> <span class=\"kw3\">s</span><span class=\"br0\">[</span>N<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">generate</span><br/>    <span class=\"kw3\">genvar</span> I<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span>I<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> I<span class=\"sy0\">&lt;</span>N<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>I<span class=\"br0\">)</span> Full_Adder add<span class=\"br0\">(</span> .a<span class=\"br0\">(</span>a<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> .b<span class=\"br0\">(</span>b<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> .<span class=\"kw3\">s</span><span class=\"br0\">(</span><span class=\"kw3\">s</span><span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> .c_in<span class=\"br0\">(</span>c<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> .c_out<span class=\"br0\">(</span>c<span class=\"br0\">[</span>I<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">endgenerate</span><br/>\u00a0<br/><span class=\"kw4\">endmodule</span><br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 65, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Create our little language</span><br/><span class=\"kw1\">proc</span> pins args <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Just declaration...</span><br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$args</span> <span class=\"br0\">{</span><span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$p</span> v<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> gate <span class=\"br0\">{</span>name pins body<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$pins</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> args _<span class=\"re0\">$p</span><br/>\t<span class=\"kw2\">append</span> v <span class=\"st0\">\" <span class=\"es0\">\\$</span>_$p $p\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> <span class=\"re0\">$name</span> <span class=\"re0\">$args</span> <span class=\"st0\">\"upvar 1 $v;$body\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Fundamental gates; these are the only ones that use Tcl math ops</span><br/>gate not <span class=\"br0\">{</span>x out<span class=\"br0\">}</span>   <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> out <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> ~<span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>gate and <span class=\"br0\">{</span>x y out<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> out <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>gate or  <span class=\"br0\">{</span>x y out<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> out <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> | <span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>gate GND pin <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> pin <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Composite gates: XOR</span><br/>gate xor <span class=\"br0\">{</span>x y out<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    pins nx ny x_ny nx_y<br/>\u00a0<br/>    not x          nx<br/>    not y          ny<br/>    and x ny       x_ny<br/>    and nx y       nx_y<br/>    or  x_ny nx_y  out<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Composite gates: half adder</span><br/>gate halfadd <span class=\"br0\">{</span>a b sum carry<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    xor a b  sum<br/>    and a b  carry<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Composite gates: full adder</span><br/>gate fulladd <span class=\"br0\">{</span>a b c0 sum c1<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    pins sum_ac carry_ac carry_sb<br/>\u00a0<br/>    halfadd c0 a          sum_ac carry_ac<br/>    halfadd sum_ac b      sum carry_sb<br/>    or carry_ac carry_sb  c1<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Composite gates: 4-bit adder</span><br/>gate 4add <span class=\"br0\">{</span>a0 a1 a2 a3  b0 b1 b2 b3  s0 s1 s2 s3  v<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    pins c0 c1 c2 c3<br/>\u00a0<br/>    GND c0<br/>    fulladd a0 b0 c0  s0 c1<br/>    fulladd a1 b1 c1  s1 c2<br/>    fulladd a2 b2 c2  s2 c3<br/>    fulladd a3 b3 c3  s3 v<br/><span class=\"br0\">}</span></pre>"}, {"lang": "TorqueScript", "loc": 29, "block": "<pre class=\"text highlighted_source\">function XOR(%a,\u00a0%b)<br/>{<br/>\treturn (!%a &amp;&amp;\u00a0%b) || (%a &amp;&amp;\u00a0!%b);<br/>}<br/>\u00a0<br/>//Seperated by space<br/>function HalfAdd(%a,\u00a0%b)<br/>{<br/>\treturn XOR(%a,\u00a0%b) SPC\u00a0%a &amp;&amp;\u00a0%b;<br/>}<br/>\u00a0<br/>//First word is the carry bit<br/>function FullAdd(%a,\u00a0%b,\u00a0%c0)<br/>{<br/>\t%r1 = HalfAdd(%a,\u00a0%c0);<br/>\t%r2 = HalfAdd(getWord(%r1, 0),\u00a0%b);<br/>\t%r3 = getWord(%r1, 1) || getWord(%r2, 1);<br/>\treturn\u00a0%r3 SPC getWord(%r2, 0);<br/>}<br/>\u00a0<br/>//Outputs each bit seperated by a space.<br/>function FourBitFullAdd(%a0,\u00a0%a1,\u00a0%a2,\u00a0%a3,\u00a0%b0,\u00a0%b1,\u00a0%b2,\u00a0%b3)<br/>{<br/>\t%r0 = FullAdd(%a0,\u00a0%b0, 0);<br/>\t%r1 = FullAdd(%a1,\u00a0%b1, getWord(%r0, 0));<br/>\t%r2 = FullAdd(%a2,\u00a0%b2, getWord(%r1, 0));<br/>\t%r3 = FullAdd(%a3,\u00a0%b3, getWord(%r2, 0));<br/>\treturn getWord(%r0,1) SPC getWord(%r1,1) SPC getWord(%r2,1) SPC getWord(%r3,1) SPC getWord(%r3,0);<br/>}</pre>"}, {"lang": "Verilog", "loc": 50, "block": "<pre class=\"verilog highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> Half_Adder<span class=\"br0\">(</span> <span class=\"kw1\">output</span> c<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"kw1\">input</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">xor</span> xor01 <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">and</span> and01 <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">endmodule</span> <span class=\"co1\">// Half_Adder</span><br/>\u00a0<br/><span class=\"kw1\">module</span> Full_Adder<span class=\"br0\">(</span> <span class=\"kw1\">output</span> c_out<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"kw1\">input</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c_in <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">wire</span> s_ha1<span class=\"sy0\">,</span> c_ha1<span class=\"sy0\">,</span> c_ha2<span class=\"sy0\">;</span><br/>\u00a0<br/>  Half_Adder ha01<span class=\"br0\">(</span> c_ha1<span class=\"sy0\">,</span> s_ha1<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Half_Adder ha02<span class=\"br0\">(</span> c_ha2<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> s_ha1<span class=\"sy0\">,</span> c_in <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">or</span> or01 <span class=\"br0\">(</span> c_out<span class=\"sy0\">,</span> c_ha1<span class=\"sy0\">,</span> c_ha2 <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">endmodule</span> <span class=\"co1\">// Full_Adder</span><br/>\u00a0<br/><span class=\"kw1\">module</span> Full_Adder4<span class=\"br0\">(</span> <span class=\"kw1\">output</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> s<span class=\"sy0\">,</span> <span class=\"kw1\">input</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">input</span> c_in <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">wire</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>  Full_Adder adder00 <span class=\"br0\">(</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c_in <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Full_Adder adder01 <span class=\"br0\">(</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Full_Adder adder02 <span class=\"br0\">(</span> c<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  Full_Adder adder03 <span class=\"br0\">(</span> c<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">assign</span> s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">endmodule</span> <span class=\"co1\">// Full_Adder4</span><br/>\u00a0<br/><span class=\"kw1\">module</span> test_Full_Adder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">reg</span>  <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> a<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span>  <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> b<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">wire</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>  Full_Adder4 FA4 <span class=\"br0\">(</span> s<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">initial</span> <span class=\"kw1\">begin</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span> <span class=\"st0\">\"   a +    b =     s\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">$monitor</span><span class=\"br0\">(</span> <span class=\"st0\">\"%4d +\u00a0%4d =\u00a0%5d\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> s <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     a<span class=\"sy0\">=</span><span class=\"re0\">4'b0000</span><span class=\"sy0\">;</span> b<span class=\"sy0\">=</span><span class=\"re0\">4'b0000</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">#</span><span class=\"nu0\">1</span> a<span class=\"sy0\">=</span><span class=\"re0\">4'b0000</span><span class=\"sy0\">;</span> b<span class=\"sy0\">=</span><span class=\"re0\">4'b0001</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">#</span><span class=\"nu0\">1</span> a<span class=\"sy0\">=</span><span class=\"re0\">4'b0001</span><span class=\"sy0\">;</span> b<span class=\"sy0\">=</span><span class=\"re0\">4'b0001</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">#</span><span class=\"nu0\">1</span> a<span class=\"sy0\">=</span><span class=\"re0\">4'b0011</span><span class=\"sy0\">;</span> b<span class=\"sy0\">=</span><span class=\"re0\">4'b0001</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">#</span><span class=\"nu0\">1</span> a<span class=\"sy0\">=</span><span class=\"re0\">4'b0111</span><span class=\"sy0\">;</span> b<span class=\"sy0\">=</span><span class=\"re0\">4'b0001</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">#</span><span class=\"nu0\">1</span> a<span class=\"sy0\">=</span><span class=\"re0\">4'b1111</span><span class=\"sy0\">;</span> b<span class=\"sy0\">=</span><span class=\"re0\">4'b0001</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">endmodule</span> <span class=\"co1\">// test_Full_Adder</span><br/>\u00a0</pre>"}, {"lang": "VHDL", "loc": 161, "block": "<pre class=\"vhdl highlighted_source\"><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">entity</span> four_bit_adder <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">port</span><span class=\"br0\">(</span> <br/>      a <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic_vector</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      b <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic_vector</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic_vector</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      v <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> four_bit_adder <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">entity</span> fa <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">port</span><span class=\"br0\">(</span> <br/>      a  <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      b  <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      ci <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      co <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      s  <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> fa <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">entity</span> ha <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">port</span><span class=\"br0\">(</span> <br/>      a <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      b <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> ha <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">LIBRARY</span> <span class=\"kw2\">ieee</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">USE</span> <span class=\"kw2\">ieee</span>.<span class=\"kw2\">std_logic_1164</span>.<span class=\"kw1\">all</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">entity</span> xor_gate <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">port</span><span class=\"br0\">(</span> <br/>      a <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      b <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      x <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> xor_gate <span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">architecture</span> struct <span class=\"kw1\">of</span> four_bit_adder <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">signal</span> ci0 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">signal</span> co0 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">signal</span> co1 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">signal</span> co2 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">component</span> fa<br/>   <span class=\"kw1\">port</span> <span class=\"br0\">(</span><br/>      a  <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      b  <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      ci <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      co <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      s  <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span> <br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">component</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">begin</span><br/>   ci0 <span class=\"sy0\">&lt;=</span> '<span class=\"nu0\">0</span>'<span class=\"sy0\">;</span><br/>\u00a0<br/>   i_fa0 <span class=\"sy0\">:</span> fa<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a  <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>         b  <span class=\"sy0\">=&gt;</span> b<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>         ci <span class=\"sy0\">=&gt;</span> ci0,<br/>         co <span class=\"sy0\">=&gt;</span> co0,<br/>         s  <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   i_fa1 <span class=\"sy0\">:</span> fa<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a  <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>         b  <span class=\"sy0\">=&gt;</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>         ci <span class=\"sy0\">=&gt;</span> co0,<br/>         co <span class=\"sy0\">=&gt;</span> co1,<br/>         s  <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   i_fa2 <span class=\"sy0\">:</span> fa<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a  <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>         b  <span class=\"sy0\">=&gt;</span> b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>         ci <span class=\"sy0\">=&gt;</span> co1,<br/>         co <span class=\"sy0\">=&gt;</span> co2,<br/>         s  <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   i_fa3 <span class=\"sy0\">:</span> fa<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a  <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>         b  <span class=\"sy0\">=&gt;</span> b<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>         ci <span class=\"sy0\">=&gt;</span> co2,<br/>         co <span class=\"sy0\">=&gt;</span> v,<br/>         s  <span class=\"sy0\">=&gt;</span> s<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> struct<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">architecture</span> struct <span class=\"kw1\">of</span> fa <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">signal</span> c1 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">signal</span> c2 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">signal</span> s1 <span class=\"sy0\">:</span> <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">component</span> ha<br/>   <span class=\"kw1\">port</span> <span class=\"br0\">(</span><br/>      a <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      b <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span> <span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span> <br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">component</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">begin</span><br/>   co <span class=\"sy0\">&lt;=</span> c1 <span class=\"kw3\">or</span> c2<span class=\"sy0\">;</span><br/>\u00a0<br/>   i_ha0 <span class=\"sy0\">:</span> ha<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a <span class=\"sy0\">=&gt;</span> ci,<br/>         b <span class=\"sy0\">=&gt;</span> a,<br/>         c <span class=\"sy0\">=&gt;</span> c1,<br/>         s <span class=\"sy0\">=&gt;</span> s1<br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   i_ha1 <span class=\"sy0\">:</span> ha<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a <span class=\"sy0\">=&gt;</span> s1,<br/>         b <span class=\"sy0\">=&gt;</span> b,<br/>         c <span class=\"sy0\">=&gt;</span> c2,<br/>         s <span class=\"sy0\">=&gt;</span> s<br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> struct<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">architecture</span> struct <span class=\"kw1\">of</span> ha <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">component</span> xor_gate<br/>   <span class=\"kw1\">port</span> <span class=\"br0\">(</span><br/>      a <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      b <span class=\"sy0\">:</span> <span class=\"kw1\">in</span>     <span class=\"kw2\">std_logic</span><span class=\"sy0\">;</span><br/>      x <span class=\"sy0\">:</span> <span class=\"kw1\">out</span>    <span class=\"kw2\">std_logic</span><br/>   <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">component</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">begin</span><br/>   c <span class=\"sy0\">&lt;=</span> a <span class=\"kw3\">and</span> b<span class=\"sy0\">;</span><br/>\u00a0<br/>   i_xor_gate <span class=\"sy0\">:</span> xor_gate<br/>      <span class=\"kw1\">port</span> <span class=\"kw1\">map</span> <span class=\"br0\">(</span><br/>         a <span class=\"sy0\">=&gt;</span> a,<br/>         b <span class=\"sy0\">=&gt;</span> b,<br/>         x <span class=\"sy0\">=&gt;</span> s<br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> struct<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">architecture</span> rtl <span class=\"kw1\">of</span> xor_gate <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>  x <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>a <span class=\"kw3\">and</span> <span class=\"kw3\">not</span> b<span class=\"br0\">)</span> <span class=\"kw3\">or</span> <span class=\"br0\">(</span>b <span class=\"kw3\">and</span> <span class=\"kw3\">not</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">architecture</span> rtl<span class=\"sy0\">;</span></pre>"}, {"lang": "XPL0", "loc": 59, "block": "<pre class=\"text highlighted_source\">code CrLf=9, IntOut=11;<br/>\u00a0<br/>func Not(A);<br/>int A;<br/>return not A;<br/>\u00a0<br/>func And(A, B);<br/>int A, B;<br/>return A and B;<br/>\u00a0<br/>func Or(A, B);<br/>int A, B;<br/>return A or B;<br/>\u00a0<br/>func Xor(A, B);<br/>int A, B;<br/>return Or(And(A, Not(B)), And(Not(A), B));<br/>\u00a0<br/>proc HalfAdd(A, B, S, C);<br/>int A, B, S, C;<br/>[S(0):= Xor(A, B);<br/> C(0):= And(A, B);<br/>];<br/>\u00a0<br/>proc FullAdd(A, B, Ci, S, Co);<br/>int A, B, Ci, S, Co;            \\(Ci and Co are reversed from drawing)<br/>int S0, S1, C0, C1;<br/>[HalfAdd(Ci, A, @S0, @C0);<br/> HalfAdd(S0, B, @S1, @C1);<br/> S(0):= S1;<br/> Co(0):= Or(C0, C1);<br/>];<br/>\u00a0<br/>proc Add4Bits(A0, A1, A2, A3, B0, B1, B2, B3, S0, S1, S2, S3, Co);<br/>int A0, A1, A2, A3, B0, B1, B2, B3, S0, S1, S2, S3, Co;<br/>int Co0, Co1, Co2;<br/>[FullAdd(A0, B0, 0,   S0, @Co0);<br/> FullAdd(A1, B1, Co0, S1, @Co1);<br/> FullAdd(A2, B2, Co1, S2, @Co2);<br/> FullAdd(A3, B3, Co2, S3, Co);<br/>];<br/>\u00a0<br/>proc BinOut(D, A0, A1, A2, A3, C);<br/>int D, A0, A1, A2, A3, C;<br/>[IntOut(D, C&amp;1);<br/>IntOut(D, A3&amp;1);<br/>IntOut(D, A2&amp;1);<br/>IntOut(D, A1&amp;1);<br/>IntOut(D, A0&amp;1);<br/>];<br/>\u00a0<br/>int S0, S1, S2, S3, C;<br/>[Add4Bits(1, 0, 0, 0, 0, 0, 1, 0, @S0, @S1, @S2, @S3, @C);  \\0001 + 0100 = 00101<br/> BinOut(0, S0, S1, S2, S3, C);  CrLf(0);<br/> Add4Bits(1, 0, 1, 0, 0, 1, 1, 1, @S0, @S1, @S2, @S3, @C);  \\0101 + 1110 = 10011<br/> BinOut(0, S0, S1, S2, S3, C);  CrLf(0);<br/> Add4Bits(1, 1, 1, 1, 1, 1, 1, 1, @S0, @S1, @S2, @S3, @C);  \\1111 + 1111 = 11110<br/> BinOut(0, S0, S1, S2, S3, C);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 24, "block": "<pre class=\"text highlighted_source\">fcn xor(a,b) // a,b are 1|0 --&gt;a^b(1|0)<br/>   { a.bitAnd(b.bitNot()).bitOr(b.bitAnd(a.bitNot())) }<br/>\u00a0<br/>fcn halfAdder(a,b) // --&gt;(carry, a+b) (1|0)<br/>   { return(a.bitAnd(b), xor(a,b)) }<br/>\u00a0<br/>fcn fullBitAdder(c, a,b){ //--&gt;(carry, a+b+c), a,b,c are 1|0<br/>   c1,s\u00a0:= halfAdder(a,c);<br/>   c2,s\u00a0:= halfAdder(s,b);<br/>   c3  \u00a0:= c1.bitOr(c2);<br/>   return(c3,s);<br/>}<br/>\u00a0<br/>   // big endian<br/>fcn fourBitAdder(a3,a2,a1,a0, b3,b2,b1,b0){ //--&gt;(carry, s3,s2,s1,s0)<br/>   c,s0\u00a0:= fullBitAdder(0, a0,b0);<br/>   c,s1\u00a0:= fullBitAdder(c, a1,b1);<br/>   c,s2\u00a0:= fullBitAdder(c, a2,b2);<br/>   c,s3\u00a0:= fullBitAdder(c, a3,b3);<br/>   return(c, s3,s2,s1,s0);<br/>}<br/>\u00a0<br/>// add(10,9)  result should be 1 0 0 1 1 (0x13, 3 carry 1)<br/>println(fourBitAdder(1,0,1,0, 1,0,0,1));</pre>"}]}