{"task": "Four_is_the_number_of_letters_in_the_...", "blocks": [{"lang": "Go", "loc": 94, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/>\t<span class=\"st0\">\"unicode\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tf <span class=\"sy2\">:=</span> NewFourIsSeq<span class=\"sy1\">()</span><br/>\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"The lengths of the first 201 words are:\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">201</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">25</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%3d: \"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t_<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span><span class=\"me1\">WordLen</span><span class=\"sy1\">(</span>i<span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"\u00a0%2d\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Length of sentence so far:\"</span><span class=\"sy1\">,</span> f<span class=\"sy3\">.</span><span class=\"me1\">TotalLength</span><span class=\"sy1\">())</span><br/>\t<span class=\"coMULTI\">/* For debugging:<br/>\tlog.Println(\"sentence:\", strings.Join(f.words, \" \"))<br/>\tfor i, w\u00a0:= range f.words {<br/>\t\tlog.Printf(\"%3d:\u00a0%2d\u00a0%q\\n\", i, countLetters(w), w)<br/>\t}<br/>\tlog.Println(f.WordLen(2202))<br/>\tlog.Println(\"len(f.words):\", len(f.words))<br/>\tlog.Println(\"sentence:\", strings.Join(f.words, \" \"))<br/>\t*/</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu1\">1e7</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>\t\tw<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>WordLen<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Word\u00a0%8d is\u00a0%q, with\u00a0%d letters.\"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  Length of sentence so far:\"</span><span class=\"sy1\">,</span> f<span class=\"sy3\">.</span>TotalLength<span class=\"sy1\">())</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> FourIsSeq <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\t<span class=\"nu2\">i</span>     <span class=\"kw4\">int</span>      <span class=\"co1\">// index of last word processed</span><br/>\twords <span class=\"sy1\">[]</span><span class=\"kw4\">string</span> <span class=\"co1\">// strings.Join(words,\" \") gives the sentence so far</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> NewFourIsSeq<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>FourIsSeq <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> &amp;FourIsSeq<span class=\"sy1\">{</span><br/>\t\t<span class=\"co1\">//words: strings.Fields(\"Four is the number of letters in the first word of this sentence,\"),</span><br/>\t\twords<span class=\"sy1\">:</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>\t\t\t<span class=\"st0\">\"Four\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"is\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"the\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"number\"</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"st0\">\"of\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"letters\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"in\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"the\"</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"st0\">\"first\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"word\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"of\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"this\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"sentence,\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// WordLen returns the w'th word and its length (only counting letters).</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>f <span class=\"sy3\">*</span>FourIsSeq<span class=\"sy1\">)</span> WordLen<span class=\"sy1\">(</span>w <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>f<span class=\"sy3\">.</span>words<span class=\"sy1\">)</span> &lt; w <span class=\"sy1\">{</span><br/>\t\tf<span class=\"sy3\">.</span><span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>\t\tn <span class=\"sy2\">:=</span> countLetters<span class=\"sy1\">(</span>f<span class=\"sy3\">.</span>words<span class=\"sy1\">[</span>f<span class=\"sy3\">.</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>\t\tns <span class=\"sy2\">:=</span> say<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>\t\tos <span class=\"sy2\">:=</span> sayOrdinal<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>f<span class=\"sy3\">.</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span> <span class=\"sy3\">+</span> <span class=\"st0\">\",\"</span><br/>\t\t<span class=\"co1\">// append something like: \"two in the second,\"</span><br/>\t\tf<span class=\"sy3\">.</span><span class=\"me1\">words</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>f<span class=\"sy3\">.</span><span class=\"me1\">words</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Fields</span><span class=\"sy1\">(</span>ns<span class=\"sy1\">)</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>\t\tf<span class=\"sy3\">.</span><span class=\"me1\">words</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>f<span class=\"sy3\">.</span><span class=\"me1\">words</span><span class=\"sy1\">,</span> <span class=\"st0\">\"in\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"the\"</span><span class=\"sy1\">)</span><br/>\t\tf<span class=\"sy3\">.</span>words <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>f<span class=\"sy3\">.</span>words<span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>os<span class=\"sy1\">)</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tword <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>words<span class=\"sy1\">[</span>w<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\t<span class=\"kw1\">return</span> word<span class=\"sy1\">,</span> countLetters<span class=\"sy1\">(</span>word<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// TotalLength returns the total number of characters (including blanks,</span><br/><span class=\"co1\">// commas, and punctuation) of the sentence so far constructed.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>f FourIsSeq<span class=\"sy1\">)</span> TotalLength<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tcnt <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> w <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> f<span class=\"sy3\">.</span>words <span class=\"sy1\">{</span><br/>\t\tcnt <span class=\"sy2\">+=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>w<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> cnt <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> countLetters<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tcnt <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> unicode<span class=\"sy3\">.</span>IsLetter<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tcnt<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> cnt<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// ...</span><br/><span class=\"co1\">// the contents of</span><br/><span class=\"co1\">// https://rosettacode.org/wiki/Spelling_of_ordinal_numbers#Go</span><br/><span class=\"co1\">// omitted from this listing</span><br/><span class=\"co1\">// ...</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 176, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names <span class=\"sy0\">=</span> mapOf<span class=\"br0\">(</span><br/>    <span class=\"nu0\">1</span> to <span class=\"st0\">\"one\"</span>,<br/>    <span class=\"nu0\">2</span> to <span class=\"st0\">\"two\"</span>,<br/>    <span class=\"nu0\">3</span> to <span class=\"st0\">\"three\"</span>,<br/>    <span class=\"nu0\">4</span> to <span class=\"st0\">\"four\"</span>,<br/>    <span class=\"nu0\">5</span> to <span class=\"st0\">\"five\"</span>,<br/>    <span class=\"nu0\">6</span> to <span class=\"st0\">\"six\"</span>,<br/>    <span class=\"nu0\">7</span> to <span class=\"st0\">\"seven\"</span>,<br/>    <span class=\"nu0\">8</span> to <span class=\"st0\">\"eight\"</span>,<br/>    <span class=\"nu0\">9</span> to <span class=\"st0\">\"nine\"</span>,<br/>    <span class=\"nu0\">10</span> to <span class=\"st0\">\"ten\"</span>,<br/>    <span class=\"nu0\">11</span> to <span class=\"st0\">\"eleven\"</span>,<br/>    <span class=\"nu0\">12</span> to <span class=\"st0\">\"twelve\"</span>,<br/>    <span class=\"nu0\">13</span> to <span class=\"st0\">\"thirteen\"</span>,<br/>    <span class=\"nu0\">14</span> to <span class=\"st0\">\"fourteen\"</span>,<br/>    <span class=\"nu0\">15</span> to <span class=\"st0\">\"fifteen\"</span>,<br/>    <span class=\"nu0\">16</span> to <span class=\"st0\">\"sixteen\"</span>,<br/>    <span class=\"nu0\">17</span> to <span class=\"st0\">\"seventeen\"</span>,<br/>    <span class=\"nu0\">18</span> to <span class=\"st0\">\"eighteen\"</span>,<br/>    <span class=\"nu0\">19</span> to <span class=\"st0\">\"nineteen\"</span>,<br/>    <span class=\"nu0\">20</span> to <span class=\"st0\">\"twenty\"</span>,<br/>    <span class=\"nu0\">30</span> to <span class=\"st0\">\"thirty\"</span>,<br/>    <span class=\"nu0\">40</span> to <span class=\"st0\">\"forty\"</span>,<br/>    <span class=\"nu0\">50</span> to <span class=\"st0\">\"fifty\"</span>,<br/>    <span class=\"nu0\">60</span> to <span class=\"st0\">\"sixty\"</span>,<br/>    <span class=\"nu0\">70</span> to <span class=\"st0\">\"seventy\"</span>,<br/>    <span class=\"nu0\">80</span> to <span class=\"st0\">\"eighty\"</span>,<br/>    <span class=\"nu0\">90</span> to <span class=\"st0\">\"ninety\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigNames <span class=\"sy0\">=</span> mapOf<span class=\"br0\">(</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000L to <span class=\"st0\">\"thousand\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"million\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"billion\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"trillion\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"quadrillion\"</span>,<br/>    <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000L to <span class=\"st0\">\"quintillion\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> irregOrdinals <span class=\"sy0\">=</span> mapOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"one\"</span> to <span class=\"st0\">\"first\"</span>,<br/>    <span class=\"st0\">\"two\"</span> to <span class=\"st0\">\"second\"</span>,<br/>    <span class=\"st0\">\"three\"</span> to <span class=\"st0\">\"third\"</span>,<br/>    <span class=\"st0\">\"five\"</span> to <span class=\"st0\">\"fifth\"</span>,<br/>    <span class=\"st0\">\"eight\"</span> to <span class=\"st0\">\"eighth\"</span>,<br/>    <span class=\"st0\">\"nine\"</span> to <span class=\"st0\">\"ninth\"</span>,<br/>    <span class=\"st0\">\"twelve\"</span> to <span class=\"st0\">\"twelfth\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>fun String.<span class=\"me1\">toOrdinal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">==</span> <span class=\"st0\">\"zero\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"zeroth\"</span>  <span class=\"co1\">// or alternatively 'zeroeth'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splits <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> last <span class=\"sy0\">=</span> splits<span class=\"br0\">[</span>splits.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>irregOrdinals.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span>last.<span class=\"me1\">length</span><span class=\"br0\">)</span> + irregOrdinals<span class=\"br0\">[</span>last<span class=\"br0\">]</span><span class=\"sy0\">!!</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>last.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"y\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"st0\">\"ieth\"</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + <span class=\"st0\">\"th\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun numToText<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long, uk<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> 0L<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"zero\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> neg <span class=\"sy0\">=</span> n <span class=\"sy0\">&lt;</span> 0L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxNeg <span class=\"sy0\">=</span> n <span class=\"sy0\">==</span> Long.<span class=\"me1\">MIN_VALUE</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maxNeg<span class=\"br0\">)</span> -<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>neg<span class=\"br0\">)</span> -n <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digits3 <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// split number into groups of 3 digits from the right</span><br/>        digits3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        nn /<span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun threeDigitsToText<span class=\"br0\">(</span>number<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>number <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hundreds <span class=\"sy0\">=</span> number / <span class=\"nu0\">100</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> remainder <span class=\"sy0\">=</span> number <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hundreds <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>hundreds<span class=\"br0\">]</span>, <span class=\"st0\">\" hundred\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>remainder <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>uk<span class=\"br0\">)</span> <span class=\"st0\">\" and \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>remainder <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tens <span class=\"sy0\">=</span> remainder / <span class=\"nu0\">10</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> units <span class=\"sy0\">=</span> remainder <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>tens <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>tens <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>units <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, names<span class=\"br0\">[</span>units<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>remainder<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strings <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> threeDigitsToText<span class=\"br0\">(</span>digits3<span class=\"br0\">[</span>it<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> text <span class=\"sy0\">=</span> strings<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> andNeeded <span class=\"sy0\">=</span> uk <span class=\"sy0\">&amp;&amp;</span> digits3<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> in <span class=\"nu0\">1</span>..<span class=\"nu0\">99</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> big <span class=\"sy0\">=</span> 1000L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>digits3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> text2 <span class=\"sy0\">=</span> strings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> + <span class=\"st0\">\" \"</span> + bigNames<span class=\"br0\">[</span>big<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>text.<span class=\"me1\">isNotEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                text2 +<span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>andNeeded<span class=\"br0\">)</span> <span class=\"st0\">\" and \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span>  <span class=\"co1\">// no commas inserted in this version</span><br/>                andNeeded <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> andNeeded <span class=\"sy0\">=</span> uk <span class=\"sy0\">&amp;&amp;</span> digits3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> in <span class=\"nu0\">1</span>..<span class=\"nu0\">99</span><br/>            text <span class=\"sy0\">=</span> text2 + text<br/>        <span class=\"br0\">}</span><br/>        big <span class=\"sy0\">*=</span> <span class=\"nu0\">1000</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>maxNeg<span class=\"br0\">)</span> text <span class=\"sy0\">=</span> text.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> + <span class=\"st0\">\"eight\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>neg<span class=\"br0\">)</span> text <span class=\"sy0\">=</span> <span class=\"st0\">\"minus \"</span> + text<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> text<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> opening <span class=\"sy0\">=</span> <span class=\"st0\">\"Four is the number of letters in the first word of this sentence,\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> String.<span class=\"me1\">adjustedLength</span> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span>  <span class=\"co1\">// no ',' or '-'</span><br/>\u00a0<br/>fun getWords<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    words.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>opening<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> opening.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> words<span class=\"br0\">[</span>k - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">adjustedLength</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text <span class=\"sy0\">=</span> numToText<span class=\"br0\">(</span>len.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splits <span class=\"sy0\">=</span> text.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>            words.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>splits<span class=\"br0\">)</span><br/>            words.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"in\"</span><span class=\"br0\">)</span><br/>            words.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"the\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text2 <span class=\"sy0\">=</span> numToText<span class=\"br0\">(</span>k.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toOrdinal</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\",\"</span>  <span class=\"co1\">// add trailing comma</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splits2 <span class=\"sy0\">=</span> text2.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>            words.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>splits2<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>words.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;=</span> n<span class=\"br0\">)</span> break<br/>            k++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> words<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun getLengths<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span>, Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> getWords<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lengths <span class=\"sy0\">=</span> words.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">adjustedLength</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sentenceLength <span class=\"sy0\">=</span> words.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">length</span> <span class=\"br0\">}</span> + words.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span>  <span class=\"co1\">// includes hyphens, commas &amp; spaces</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Pair<span class=\"br0\">(</span>lengths, sentenceLength<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun getLastWord<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Triple<span class=\"sy0\">&lt;</span>String, Int, Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> getWords<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nthWord <span class=\"sy0\">=</span> words<span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nthWordLength <span class=\"sy0\">=</span> nthWord.<span class=\"me1\">adjustedLength</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sentenceLength <span class=\"sy0\">=</span> words.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">length</span> <span class=\"br0\">}</span> + words.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span>  <span class=\"co1\">// includes hyphens, commas &amp; spaces</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Triple<span class=\"br0\">(</span>nthWord, nthWordLength, sentenceLength<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">201</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The lengths of the first $n words are:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>list, sentenceLength<span class=\"br0\">)</span> <span class=\"sy0\">=</span> getLengths<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">25</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>3d<span class=\"st0\">\".format(i + 1)}: \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Length of sentence = $sentenceLength<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>word, wLen, sLen<span class=\"br0\">)</span> <span class=\"sy0\">=</span> getLastWord<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>word.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> word <span class=\"sy0\">=</span> word.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">// strip off any trailing comma</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"The length of word $n [$word] is $wLen\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Length of sentence = $sLen<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        n <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 17, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Lingua<span class=\"sy0\">::</span><span class=\"me2\">EN</span><span class=\"sy0\">::</span><span class=\"me2\">Numbers</span><span class=\"sy0\">::</span><span class=\"me2\">Cardinal</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$index</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@sentence</span> <span class=\"sy0\">=</span> flat <span class=\"st_h\">'Four is the number of letters in the first word of this sentence, '</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span> <span class=\"re0\">@sentence</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;alpha</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;cardinal</span><span class=\"sy0\">,</span> <span class=\"st_h\">'in'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'the'</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">$index</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;ordinal</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;no</span><span class=\"sy0\">-</span>commas<span class=\"sy0\">~</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> alpha <span class=\"br0\">(</span> <span class=\"re0\">$str</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"co2\">/\\W/</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> no<span class=\"sy0\">-</span>commas <span class=\"br0\">(</span> <span class=\"re0\">$str</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> count <span class=\"br0\">(</span> <span class=\"re0\">$index</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@sentence</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$index</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">~</span> <span class=\"st0\">\" characters in the sentence, up to and including this word.<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'First 201 word lengths in the sequence:'</span><span class=\"sy0\">;</span><br/>put <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">@sentence</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;alpha</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\"</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"nu0\">201</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">201</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;count</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> 1e3<span class=\"sy0\">,</span> 1e4<span class=\"sy0\">,</span> 1e5<span class=\"sy0\">,</span> 1e6<span class=\"sy0\">,</span> 1e7 <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"{.&amp;ordinal.tc} word, '{@sentence[$_ - 1]}', has {@sentence[$_ - 1].&amp;alpha} characters. \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;count</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 98, "block": "<pre class=\"text highlighted_source\">include demo\\rosetta\\number_names.exw<br/>\u00a0<br/>-- as per Spelling_of_ordinal_numbers#Phix:<br/>constant {irregs,ordinals} = columnize({{\"one\",\"first\"},<br/>                                        {\"two\",\"second\"},<br/>                                        {\"three\",\"third\"},<br/>                                        {\"five\",\"fifth\"},<br/>                                        {\"eight\",\"eighth\"},<br/>                                        {\"nine\",\"ninth\"},<br/>                                        {\"twelve\",\"twelfth\"}})<br/>\u00a0<br/>function ordinal(string s)<br/>    integer i<br/>    for i=length(s) to 1 by -1 do<br/>        integer ch = s[i]<br/>        if ch=' ' or ch='-' then exit end if<br/>    end for<br/>    integer k = find(s[i+1..$],irregs)<br/>    if k then<br/>        s = s[1..i]&amp;ordinals[k]<br/>    elsif s[$]='y' then<br/>        s[$..$] = \"ieth\"<br/>    else<br/>        s &amp;= \"th\"<br/>    end if<br/>    return s<br/>end function<br/>--/copy of Spelling_of_ordinal_numers#Phix<br/>\u00a0<br/>function countLetters(string s)<br/>    integer res = 0<br/>    for i=1 to length(s) do<br/>        integer ch = s[i]<br/>        if (ch&gt;='A' and ch&lt;='Z')<br/>        or (ch&gt;='a' and ch&lt;='z') then<br/>            res += 1<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>sequence words = split(\"Four is the number of letters in the first word of this sentence,\")<br/>integer fi = 1<br/>\u00a0<br/>function kill_and(sequence s)<br/>--grr...<br/>    for i=length(s) to 1 by -1 do<br/>        if s[i] = \"and\" then<br/>            s[i..i] = {}<br/>        end if<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>function WordLen(integer w)<br/>-- Returns the w'th word and its length (only counting letters).<br/>    while length(words)&lt;w do<br/>        fi += 1<br/>        integer n = countLetters(words[fi])<br/>        sequence ns = kill_and(split(spell(n)))<br/>        sequence os = kill_and(split(ordinal(spell(fi)) &amp; \",\"))<br/>        -- append eg {\"two\",\"in\",\"the\",\"second,\"}<br/>        words &amp;= ns&amp;{\"in\",\"the\"}&amp;os<br/>    end while<br/>    string word = words[w]<br/>    return {word, countLetters(word)}<br/>end function<br/>\u00a0<br/>function TotalLength()<br/>-- Returns the total number of characters (including blanks,<br/>-- commas, and punctuation) of the sentence so far constructed.<br/>    integer res = 0<br/>    for i=1 to length(words) do<br/>        res += length(words[i])+1<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>procedure main()<br/>integer i,n<br/>string w<br/>    printf(1,\"The lengths of the first 201 words are:\\n\")<br/>    for i=1 to 201 do<br/>        if mod(i,25)==1 then<br/>            printf(1,\"\\n%3d: \", i)<br/>        end if<br/>        {?,n} = WordLen(i)<br/>        printf(1,\"\u00a0%2d\", n)<br/>    end for<br/>    printf(1,\"\\nLength of sentence so far:%d\\n\", TotalLength())<br/>    for p=3 to 7 do<br/>        i = power(10,p)<br/>        {w, n} = WordLen(i)<br/>        printf(1,\"Word\u00a0%8d is \\\"%s\\\", with\u00a0%d letters.\", {i, w, n})<br/>        printf(1,\"  Length of sentence so far:%d\\n\", TotalLength())<br/>    end for<br/>end procedure<br/>main()</pre>"}, {"lang": "REXX", "loc": 43, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm finds/shows the number of letters in the  Nth  word in a constructed sentence*/</span><br/>@= <span class=\"st0\">'Four is the number of letters in the first word of this sentence,'</span>             <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]   the start of a long sentence. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N M                                    <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> N=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N=<span class=\"st0\">\",\"</span> <span class=\"kw3\">then</span> N= <span class=\"nu0\">201</span>                      <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> M=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> M=<span class=\"st0\">\",\"</span> <span class=\"kw3\">then</span> M=<span class=\"nu0\">1000</span> <span class=\"nu0\">10000</span> <span class=\"nu0\">100000</span> <span class=\"nu0\">1000000</span> <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>@abcU= <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>              <span class=\"coMULTI\">/*define the uppercase Latin alphabet. */</span><br/>!<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;     #<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;      q=<span class=\"nu0\">1</span>;       w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>      <span class=\"coMULTI\">/* [\u2193]  define some helpful low values.*/</span><br/><span class=\"kw1\">call</span> tell N<br/><span class=\"kw1\">if</span> N<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> y     <span class=\"st0\">' is the length of word '</span>         a          <span class=\"st0\">\"  [\"</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@, a<span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2191]  N negative?  Just show 1 number*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'length of sentence= '</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*display the length of the @ sentence.*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> M<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span>  <span class=\"kw2\">while</span> M<span class=\"sy0\">\\</span>=<span class=\"nu0\">0</span> <span class=\"coMULTI\">/*maybe handle counts  (if specified). */</span><br/>                x=<span class=\"kw6\">word</span><span class=\"br0\">(</span>M, k<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*obtain the  Kth  word of the M list. */</span><br/>                <span class=\"kw1\">call</span> tell  -x                    <span class=\"coMULTI\">/*invoke subroutine (with negative arg)*/</span><br/>                <span class=\"kw1\">say</span><br/>                <span class=\"kw1\">say</span> y     <span class=\"st0\">' is the length of word '</span>      x       <span class=\"st0\">\"  [\"</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@, x<span class=\"br0\">)</span><span class=\"st0\">\"]\"</span><br/>                <span class=\"kw1\">say</span> <span class=\"st0\">'length of sentence= '</span>  <span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*display length of @ sentence.*/</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>wordLen: <span class=\"kw1\">arg</span>\u00a0?;         <span class=\"kw1\">return</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>?<span class=\"br0\">)</span> - <span class=\"kw6\">length</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>?, , @abcU<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z,,$;   idx=<span class=\"nu0\">1</span>;    a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>;     group=<span class=\"nu0\">25</span>     <span class=\"coMULTI\">/*show 25 numbers per line.*/</span><br/>                                                 <span class=\"coMULTI\">/*Q is the last number spelt by $SPELL#*/</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> a                            <span class=\"coMULTI\">/*traipse through all the numbers to N.*/</span><br/>          <span class=\"kw1\">do</span> <span class=\"nu0\">2</span>                                   <span class=\"coMULTI\">/*perform loop twice  (well \u00b7\u00b7\u00b7 maybe).*/</span><br/>          y=wordLen<span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>@, j<span class=\"br0\">)</span> <span class=\"br0\">)</span>                <span class=\"coMULTI\">/*get the  Jth  word from the sentence.*/</span><br/>          <span class=\"kw1\">if</span> y<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                   <span class=\"coMULTI\">/*Is the word spelt?   Then we're done.*/</span><br/>          q=q + <span class=\"nu0\">1</span>                                <span class=\"coMULTI\">/*bump the on\u2500going (moving) # counter.*/</span><br/>          <span class=\"kw1\">if</span> #<span class=\"sy0\">.</span>q==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> #<span class=\"sy0\">.</span>q=$spell#<span class=\"br0\">(</span>q <span class=\"st0\">'Q ORD'</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*need to spell A as an ordinal number?*/</span><br/>               _=wordLen<span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>@, q<span class=\"br0\">)</span> <span class=\"br0\">)</span>           <span class=\"coMULTI\">/*use the length of the ordinal number.*/</span><br/>          <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>_==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span>\u00a0!<span class=\"sy0\">.</span>_=$spell#<span class=\"br0\">(</span>_ <span class=\"st0\">'Q'</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*Not spelled?   Then go and spell it. */</span><br/>          @<a class=\"__cf_email__\" data-cfemail=\"a598e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> \u00a0!<span class=\"sy0\">.</span>_   <span class=\"st0\">'in the'</span>    #<span class=\"sy0\">.</span>q<span class=\"st0\">\",\"</span>          <span class=\"coMULTI\">/*append words to never\u2500ending sentence*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*2*/</span>                            <span class=\"coMULTI\">/* [\u2191]   Q \u2261 Quiet      ORD \u2261 ORDinal  */</span><br/>\u00a0<br/>        $=$ <span class=\"sy0\">||</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">3</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/* [\u2193]  append a justified # to a line.*/</span><br/>        <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>group==<span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> z<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>idx, w<span class=\"br0\">)</span><span class=\"st0\">'\u25ba'</span>$;   idx=idx+group;   $=;   <span class=\"kw3\">end</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                              <span class=\"coMULTI\">/* [\u2191]  show line if there's enough #s.*/</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">&amp;</span> z<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>idx, w<span class=\"br0\">)</span><span class=\"st0\">'\u25ba'</span>$ <span class=\"coMULTI\">/*display if there are residual numbers*/</span><br/>      <span class=\"kw1\">return</span></pre>"}, {"lang": "zkl", "loc": 28, "block": "<pre class=\"text highlighted_source\">   // Built the sentence in little chucks but only save the last one<br/>   // Save the word counts<br/>fcn fourIsThe(text,numWords){<br/>   const rmc=\"-,\";<br/>   seq:=(text - rmc).split().apply(\"len\").copy();  // (4,2,3,6...)<br/>   szs:=Data(numWords + 100,Int).howza(0).extend(seq);\t// bytes<br/>   cnt,lastWords\u00a0:= seq.len(),\"\";<br/>   total:=seed.len() - 1;  // don't count trailing space<br/>\u00a0<br/>   foreach idx in ([1..]){<br/>      sz:=szs[idx];<br/>      a,b\u00a0:= nth(sz,False),nth(idx+1);  // \"two\",\"three hundred sixty-seventh\"<br/>      lastWords=\"%s in the\u00a0%s, \".fmt(a,b);<br/>      ws:=lastWords.counts(\" \")[1];  // \"five in the forty-ninth \" --&gt; 4<br/>      cnt+=ws; total+=lastWords.len();<br/>      lastWords.split().pump(szs.append,'-(rmc),\"len\");<br/>      if(cnt&gt;=numWords){<br/>\t if(cnt&gt;numWords){<br/>\t    z,n:=lastWords.len(),z-2;<br/>\t    do(cnt - numWords){ n=lastWords.rfind(\" \",n) - 1; }<br/>\t    lastWords=lastWords[0,n+1]; total-=(z - n);<br/>\t }<br/>\t break;<br/>      }<br/>   }<br/>   return(lastWords.strip(),szs,total);<br/>}<br/>fcn lastWord(sentence){ sentence[sentence.rfind(\" \")+1,*] }</pre>"}]}