{"task": "Truncate_a_file", "blocks": [{"lang": "Ada", "loc": 55, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>, Ada.<span class=\"me1\">Sequential_IO</span>, Ada.<span class=\"me1\">Directories</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Truncate_File <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Byte <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">256</span>;<br/>   <span class=\"kw1\">for</span> Byte'Size <span class=\"kw3\">use</span> <span class=\"nu0\">8</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Byte_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Sequential_IO</span><span class=\"br0\">(</span>Byte<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Arg<span class=\"br0\">(</span>N: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span>;<br/>   <span class=\"kw3\">function</span> Args <span class=\"kw1\">return</span> Natural <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- give help output if neccessary</span><br/>   <span class=\"kw1\">if</span> Args &lt; <span class=\"nu0\">2</span> <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Args &gt; <span class=\"nu0\">3</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">raise</span> Program_Error<br/>        <span class=\"kw3\">with</span> <span class=\"st0\">\"usage: truncate_file &lt;filename&gt; &lt;length&gt; [&lt;temp_file&gt;]\"</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- now do the real work</span><br/>   <span class=\"kw1\">declare</span><br/>      File_Name: String\u00a0:= Arg<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      Temp_Name: String\u00a0:= <span class=\"br0\">(</span><span class=\"kw1\">if</span> Args = <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> Arg<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\".tmp\"</span> <span class=\"kw1\">else</span> Arg<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>                             <span class=\"co1\">-- an Ada 2012 conditional expression</span><br/>      File, Temp: Byte_IO.<span class=\"me1\">File_Type</span>;<br/>      Count: Natural\u00a0:= Natural'Value<span class=\"br0\">(</span>Arg<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Value: Byte;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- open files</span><br/>      Byte_IO.<span class=\"me1\">Open</span>  <span class=\"br0\">(</span>File =&gt; File, Mode =&gt; Byte_IO.<span class=\"me1\">In_File</span>,  Name =&gt; File_Name<span class=\"br0\">)</span>;<br/>      Byte_IO.<span class=\"me1\">Create</span><span class=\"br0\">(</span>File =&gt; Temp, Mode =&gt; Byte_IO.<span class=\"me1\">Out_File</span>, Name =&gt; Temp_Name<span class=\"br0\">)</span>;<br/>\u00a0<br/>      <span class=\"co1\">-- copy the required bytes (but at most as much as File has) from File to Temp</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> Byte_IO.<span class=\"me1\">End_Of_File</span><span class=\"br0\">(</span>File<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> Count &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         Byte_IO.<span class=\"me1\">Read</span> <span class=\"br0\">(</span>File, Value<span class=\"br0\">)</span>;<br/>         Byte_IO.<span class=\"me1\">Write</span><span class=\"br0\">(</span>Temp, Value<span class=\"br0\">)</span>;<br/>         Count\u00a0:= Count - <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>      <span class=\"co1\">-- close files</span><br/>      Byte_IO.<span class=\"me1\">Close</span><span class=\"br0\">(</span>Temp<span class=\"br0\">)</span>;<br/>      Byte_IO.<span class=\"me1\">Close</span><span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>\u00a0<br/>      <span class=\"kw1\">if</span> Count = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"co1\">-- File was at least Count bytes long</span><br/>         <span class=\"co1\">-- remove File and rename Temp to File</span><br/>         Ada.<span class=\"me1\">Directories</span>.<span class=\"me1\">Delete_File</span><span class=\"br0\">(</span>Name =&gt; File_Name<span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Directories</span>.<span class=\"me1\">Rename</span><span class=\"br0\">(</span>Old_Name =&gt; Temp_Name, New_Name =&gt; File_Name<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span> <span class=\"co1\">-- File was too short</span><br/>         <span class=\"co1\">-- remove Temp and leave File as it is, output error</span><br/>         Ada.<span class=\"me1\">Directories</span>.<span class=\"me1\">Delete_File</span><span class=\"br0\">(</span>Name =&gt; Temp_Name<span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">raise</span> Program_Error<br/>           <span class=\"kw3\">with</span> <span class=\"st0\">\"Size of \"</span><span class=\"st0\">\"\"</span> &amp; File_Name &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\" less than \"</span> &amp; Arg<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Truncate_File;</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\">truncFile<span class=\"br0\">(</span><span class=\"st0\">\"S:\\Portables\\AutoHotkey\\My Scripts\\Other_Codes\\motion2.ahk\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1200</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>truncFile<span class=\"br0\">(</span>file<span class=\"sy0\">,</span> length_bytes<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">FileExist</span></a><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> File doesn't exists<span class=\"sy0\">.</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileGetSize.htm\"><span class=\"kw3\">FileGetSize</span></a><span class=\"sy0\">,</span> fsize<span class=\"sy0\">,</span>\u00a0% file<span class=\"sy0\">,</span> B<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>length_bytes<span class=\"sy0\">&gt;</span>fsize<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> New truncated size more than current file size<br/>\tf <span class=\"sy0\">:=</span> FileOpen<span class=\"br0\">(</span>file<span class=\"sy0\">,</span> <span class=\"st0\">\"rw\"</span><span class=\"br0\">)</span><br/>\tf<span class=\"sy0\">.</span>length <span class=\"sy0\">:=</span> length_bytes<br/>\tf<span class=\"sy0\">.</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 47, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f TRUNCATE_A_FILE.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"NOTHERE\"</span>,<span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"FILENAME.TMP\"</span>,<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"FILENAME.TMP\"</span>,<span class=\"nu0\">500</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span><span class=\"kw3\">filename</span>,size,  ret<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ret = truncate_file<span class=\"br0\">(</span><span class=\"kw3\">filename</span>,size<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ret <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"error: FILENAME=%s,\u00a0%s<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">filename</span>,ret<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> truncate_file<span class=\"br0\">(</span><span class=\"kw3\">filename</span>,size,  cmd,<span class=\"kw3\">fnr</span>,msg,old_BINMODE,old_RS,rec<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cmd = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"ls --full-time -o\u00a0%s\"</span>,<span class=\"kw3\">filename</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>size <span class=\"sy2\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"st0\">\"size cannot be negative\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    old_BINMODE = BINMODE<br/>    old_RS = <span class=\"kw3\">RS</span><br/>    BINMODE = <span class=\"nu0\">3</span><br/>    <span class=\"kw3\">RS</span> = <span class=\"st0\">\"[^<span class=\"es0\">\\x</span>00-<span class=\"es0\">\\x</span>FF]\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw5\">getline</span> rec <span class=\"sy2\">&lt;</span><span class=\"kw3\">filename</span> <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw3\">fnr</span><span class=\"sy3\">++</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">close</span><span class=\"br0\">(</span><span class=\"kw3\">filename</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">fnr</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      msg = <span class=\"st0\">\"file not found\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">fnr</span> <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      msg = <span class=\"st0\">\"choose a different RecordSeparator\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>msg <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># no errors</span><br/>      <span class=\"kw5\">system</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span> <span class=\"co1\"># optional: show filesize before truncation</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>rec<span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rec = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>rec,<span class=\"nu0\">1</span>,size<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>,rec<span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span><span class=\"kw3\">filename</span><br/>      <span class=\"kw5\">close</span><span class=\"br0\">(</span><span class=\"kw3\">filename</span><span class=\"br0\">)</span><br/>      <span class=\"kw5\">system</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span> <span class=\"co1\"># optional: show filesize after truncation</span><br/>    <span class=\"br0\">}</span><br/>    BINMODE = old_BINMODE<br/>    <span class=\"kw3\">RS</span> = old_RS<br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>msg<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 20, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">SUB</span> truncateFile <span class=\"br0\">(</span>file <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><span class=\"sy0\">,</span> length <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>DIR$<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> f <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/>        f <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckfreefile.shtml\"><span class=\"kw3\">FREEFILE</span></a><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> file <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckbinary.shtml\"><span class=\"kw3\">BINARY</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> f<br/>        <span class=\"kw1\">IF</span> length <span class=\"sy0\">&gt;</span> <a href=\"http://www.qbasicnews.com/qboho/qcklof.shtml\"><span class=\"kw3\">LOF</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a> f<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckerror.shtml\"><span class=\"kw3\">ERROR</span></a> <span class=\"nu0\">62</span> <span class=\"co1\">'Input past end of file</span><br/>        <span class=\"kw1\">ELSE</span><br/>            c <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckspace%24.shtml\"><span class=\"kw3\">SPACE$</span></a><span class=\"br0\">(</span>length<span class=\"br0\">)</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckget.shtml\"><span class=\"kw3\">GET</span></a> #f<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> c<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a> f<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckopen.shtml\"><span class=\"kw3\">OPEN</span></a> file <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckoutput.shtml\"><span class=\"kw3\">OUTPUT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> f<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> #f<span class=\"sy0\">,</span> c;<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckclose.shtml\"><span class=\"kw3\">CLOSE</span></a> f<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">ELSE</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckerror.shtml\"><span class=\"kw3\">ERROR</span></a> <span class=\"nu0\">53</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "BBC BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">      DEF PROCtruncate(file$, size%)<br/>      LOCAL file%<br/>      file% = OPENUP(file$)<br/>      IF file%=0 ERROR 100, \"Could not open file\"<br/>      EXT#file% = size%<br/>      CLOSE #file%<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 23, "block": "<pre class=\"text highlighted_source\">( ( trunc<br/>  =   name length elif file c<br/>    .  \u00a0!arg:(?name,?length)<br/>      &amp; fil$(!name,rb)<br/>      &amp; fil$(,DEC,1)<br/>      &amp;\u00a0:?elif<br/>      &amp;   whl<br/>        ' (\u00a0!length+-1:?length:~&lt;0<br/>          &amp; fil$()\u00a0!elif:?elif<br/>          )<br/>      &amp; (fil$(,SET,-1)|)<br/>      &amp; whl'(!elif:%?c\u00a0?elif&amp;!c\u00a0!file:?file)<br/>      &amp; fil$(!name,wb)<br/>      &amp; fil$(,DEC,1)<br/>      &amp; whl'(!file:%?c\u00a0?file&amp;fil$(,,1,!c))<br/>      &amp; (fil$(,SET,-1)|)<br/>      &amp;\u00a0!length:&lt;0<br/>  )<br/>&amp; put$(\"I have a secret to tell you. Listen:\",\"test.txt\",NEW)<br/>&amp; ( trunc$(\"test.txt\",20)&amp;out$(get$(\"test.txt\",STR))<br/>  | out$\"File too short\"<br/>  )<br/>);</pre>"}, {"lang": "C", "loc": 81, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;wchar.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Print \"message: last Win32 error\" to stderr. */</span><br/><span class=\"kw4\">void</span><br/>oops<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>message<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span><br/>\tDWORD error<span class=\"sy0\">;</span><br/>\u00a0<br/>\tbuf <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\terror <span class=\"sy0\">=</span> GetLastError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tFormatMessageW<span class=\"br0\">(</span>FORMAT_MESSAGE_ALLOCATE_BUFFER <span class=\"sy0\">|</span><br/>\t    FORMAT_MESSAGE_FROM_SYSTEM <span class=\"sy0\">|</span> FORMAT_MESSAGE_IGNORE_INSERTS<span class=\"sy0\">,</span><br/>\t    NULL<span class=\"sy0\">,</span> error<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>buf<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwprintf.html\"><span class=\"kw3\">fwprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> L<span class=\"st0\">\"%ls:\u00a0%ls\"</span><span class=\"sy0\">,</span> message<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tLocalFree<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* FormatMessageW failed. */</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwprintf.html\"><span class=\"kw3\">fwprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> L<span class=\"st0\">\"%ls: unknown error 0x%x<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\t    message<span class=\"sy0\">,</span> error<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>dotruncate<span class=\"br0\">(</span><span class=\"kw4\">wchar_t</span> <span class=\"sy0\">*</span>fn<span class=\"sy0\">,</span> LARGE_INTEGER fp<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tHANDLE fh<span class=\"sy0\">;</span><br/>\u00a0<br/>\tfh <span class=\"sy0\">=</span> CreateFileW<span class=\"br0\">(</span>fn<span class=\"sy0\">,</span> GENERIC_WRITE<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> OPEN_EXISTING<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fh <span class=\"sy0\">==</span> INVALID_HANDLE_VALUE<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\toops<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>SetFilePointerEx<span class=\"br0\">(</span>fh<span class=\"sy0\">,</span> fp<span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> FILE_BEGIN<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span><br/>\t    SetEndOfFile<span class=\"br0\">(</span>fh<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\toops<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tCloseHandle<span class=\"br0\">(</span>fh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tCloseHandle<span class=\"br0\">(</span>fh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Truncate or extend a file to the given length.<br/> */</span><br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tLARGE_INTEGER fp<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> argc<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">wchar_t</span> <span class=\"sy0\">**</span>argv<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>fn<span class=\"sy0\">,</span> junk<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* MinGW never provides wmain(argc, argv). */</span><br/>\targv <span class=\"sy0\">=</span> CommandLineToArgvW<span class=\"br0\">(</span>GetCommandLineW<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>argc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>argv <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\toops<span class=\"br0\">(</span>L<span class=\"st0\">\"CommandLineToArgvW\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">!=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwprintf.html\"><span class=\"kw3\">fwprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> L<span class=\"st0\">\"usage:\u00a0%ls filename length<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tfn <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* fp = argv[2] converted to a LARGE_INTEGER. */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/swscanf.html\"><span class=\"kw3\">swscanf</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> L<span class=\"st0\">\"%lld%1ls\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>fp.<span class=\"me1\">QuadPart</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>junk<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwprintf.html\"><span class=\"kw3\">fwprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> L<span class=\"st0\">\"%ls: not a number<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> dotruncate<span class=\"br0\">(</span>fn<span class=\"sy0\">,</span> fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 21, "block": "<pre class=\"text highlighted_source\">#include &lt;string&gt;<br/>#include &lt;fstream&gt;<br/>\u00a0<br/>using namespace std;<br/>\u00a0<br/>void truncateFile(string filename, int max_size) {<br/>  std::ifstream input( filename, std::ios::binary );<br/>  char buffer;<br/>  string outfile = filename + \".trunc\";<br/>  ofstream appendFile(outfile, ios_base::out);<br/>  for(int i=0; i&lt;max_size; i++) {<br/>    input.read( &amp;buffer, sizeof(buffer) );<br/>    appendFile.write(&amp;buffer,1);<br/>  }<br/>  appendFile.close();                                                                                                                                                                }<br/>\u00a0<br/>int main () {<br/>  truncateFile(\"test.txt\", 5);<br/>  return 0;<br/>}<br/>\u00a0</pre>"}, {"lang": "C#", "loc": 28, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace TruncateFile<br/><span class=\"br0\">{</span><br/>    internal class Program<br/>    <span class=\"br0\">{</span><br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            TruncateFile<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">long</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> TruncateFile<span class=\"br0\">(</span>string path<span class=\"sy0\">,</span> <span class=\"kw4\">long</span> length<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>File.<span class=\"me1\">Exists</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                throw new ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"No file found at specified path.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"path\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            using <span class=\"br0\">(</span>var fileStream <span class=\"sy0\">=</span> new FileStream<span class=\"br0\">(</span>path<span class=\"sy0\">,</span> FileMode.<span class=\"me1\">Open</span><span class=\"sy0\">,</span> FileAccess.<span class=\"me1\">Write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fileStream.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> length<span class=\"br0\">)</span><br/>                    throw new ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"length\"</span><span class=\"sy0\">,</span><br/>                                                          <span class=\"st0\">\"The specified length is greater than that of the file.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                fileStream.<span class=\"me1\">SetLength</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> truncate <span class=\"br0\">[</span>file size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>chan <span class=\"br0\">(</span><span class=\"sy0\">.</span>getChannel <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>io<span class=\"sy0\">.</span>FileOutputStream<span class=\"sy0\">.</span> file true<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">.</span>truncate chan size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>truncate <span class=\"st0\">\"truncate_test.txt\"</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> truncateFile<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> name<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> newSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>exists<span class=\"br0\">(</span>name<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>isFile<span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"File not found.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> size <span class=\"sy0\">=</span> getSize<span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>size <span class=\"sy0\">&lt;=</span> newSize<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><br/>            <span class=\"st0\">\"New size must be smaller than original size.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> content <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>read<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> newSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>content.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> newSize<span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Reading file failed.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> content<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    enforce<span class=\"br0\">(</span>getSize<span class=\"br0\">(</span>name<span class=\"br0\">)</span> <span class=\"sy0\">==</span> newSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    truncateFile<span class=\"br0\">(</span><span class=\"st0\">\"truncate_test.txt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 13, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> TruncateFile<span class=\"br0\">(</span>FileName <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> NewSize <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  aFile<span class=\"sy1\">:</span>   <span class=\"kw1\">file</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Assign<span class=\"br0\">(</span>aFile<span class=\"sy1\">,</span> FileName<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Reset</span><span class=\"br0\">(</span>aFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">Seek</span><span class=\"br0\">(</span>afile<span class=\"sy1\">,</span> NewSize<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Truncate</span><span class=\"br0\">(</span>aFile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    <span class=\"kw3\">Close</span><span class=\"br0\">(</span>afile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Elena", "loc": 28, "block": "<pre class=\"text highlighted_source\">import system'io.<br/>import extensions.<br/>\u00a0<br/>file_info extension fileOp<br/>{<br/>    set length:length<br/>    [<br/>        stream stream\u00a0:= FileStream openForEdit:self.<br/>\u00a0<br/>        stream set length:length.<br/>\u00a0<br/>        stream close.<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    if ('program'arguments length\u00a0!= 3)<br/>        [  console printLine:\"Please provide the path to the file and a new length\". AbortException new; raise ].<br/>\u00a0<br/>    file_info file\u00a0:= File new('program'arguments[1]).<br/>    var length\u00a0:= 'program'arguments[2] toInt.<br/>\u00a0<br/>    ifnot (file isAvailable)<br/>        [ console printLine(\"File \",file,\" does not exist\"). AbortException new; raise ].<br/>\u00a0<br/>    file set length:length.<br/>].</pre>"}, {"lang": "Erlang", "loc": 13, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> <span class=\"kw3\">trunc</span>ate <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>file<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">file</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Size</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span>file_exists<span class=\"sy1\">,</span> true<span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span>file_exists<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/filelib.html\"><span class=\"kw5\">filelib</span></a>:<span class=\"re3\">is_file</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">IO</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">open</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>read<span class=\"sy1\">,</span> write<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">position</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> eof <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>correct_size<span class=\"sy1\">,</span> true<span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span>correct_size<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"re5\">Size</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">Max</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Size</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">position</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>bof<span class=\"sy1\">,</span> <span class=\"re5\">Size</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\tok <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"kw3\">trunc</span><span class=\"re3\">ate</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"kw1\">let</span> truncateFile path length <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>File.<span class=\"me1\">Exists</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw5\">failwith</span> <span class=\"br0\">(</span><span class=\"st0\">\"File not found: \"</span> <span class=\"sy0\">+</span> path<span class=\"br0\">)</span><br/>    <span class=\"kw1\">use</span> fileStream <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> FileStream<span class=\"br0\">(</span>path, FileMode.<span class=\"me1\">Open</span>, FileAccess.<span class=\"me1\">Write</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fileStream.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> length<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"The specified length is greater than the current file length.\"</span><br/>    fileStream.<span class=\"me1\">SetLength</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    truncateFile args.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>Int64.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>args.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Go", "loc": 8, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Truncate<span class=\"sy1\">(</span><span class=\"st0\">\"filename\"</span><span class=\"sy1\">,</span> newSize<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Fortran", "loc": 46, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> CROAK<span class=\"br0\">(</span>GASP<span class=\"br0\">)</span>\t<span class=\"co1\">!Something bad has happened.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> GASP\t<span class=\"co1\">!As noted.</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Oh dear. \"</span>,GASP\t<span class=\"co1\">!So, gasp away.</span><br/>        <span class=\"kw1\">STOP</span> <span class=\"st0\">\"++ungood.\"</span>\t<span class=\"co1\">!Farewell, cruel world.</span><br/>      <span class=\"kw1\">END</span>\t\t\t<span class=\"co1\">!No return from this.</span><br/>\u00a0<br/>      <span class=\"kw1\">SUBROUTINE</span> FILEHACK<span class=\"br0\">(</span>FNAME,NB<span class=\"br0\">)</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> FNAME\t<span class=\"co1\">!Name for the file.</span><br/>       <span class=\"kw3\">INTEGER</span> NB\t\t<span class=\"co1\">!Number of bytes to survive.</span><br/>       <span class=\"kw3\">INTEGER</span> L\t\t<span class=\"co1\">!A counter for te length of the file.</span><br/>       <span class=\"kw3\">INTEGER</span> F,T\t\t<span class=\"co1\">!Mnemonics for file unit numbers.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>F<span class=\"sy0\">=</span><span class=\"nu0\">66</span>,T<span class=\"sy0\">=</span><span class=\"nu0\">67</span><span class=\"br0\">)</span>\t<span class=\"co1\">!These should do.</span><br/>       <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">EXIST</span>\t\t<span class=\"co1\">!Same as the mnemonic so left/right can be forgotten.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> B\t\t<span class=\"co1\">!The worker!</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FNAME.<span class=\"me1\">EQ</span>.<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> CROAK<span class=\"br0\">(</span><span class=\"st0\">\"Blank file name!\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NB.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span>     <span class=\"kw1\">CALL</span> CROAK<span class=\"br0\">(</span><span class=\"st0\">\"Chop must be positive!\"</span><span class=\"br0\">)</span><br/>        INQUIRE<span class=\"br0\">(</span><span class=\"kw1\">FILE</span> <span class=\"sy0\">=</span> FNAME, <span class=\"kw1\">EXIST</span> <span class=\"sy0\">=</span> <span class=\"kw1\">EXIST</span><span class=\"br0\">)</span>\t<span class=\"co1\">!This mishap is frequent, so attend to it.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">NOT</span>.</span><span class=\"kw1\">EXIST</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> CROAK<span class=\"br0\">(</span><span class=\"st0\">\"Can't find a file called \"</span><span class=\"sy0\">//</span>FNAME<span class=\"br0\">)</span>\t<span class=\"co1\">!Tough love.</span><br/>        OPEN <span class=\"br0\">(</span>F,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span>FNAME,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"OLD\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"READWRITE\"</span>,\t<span class=\"co1\">!Grab the source file.</span><br/>     <span class=\"nu0\">1</span>   <span class=\"kw1\">FORM</span><span class=\"sy0\">=</span><span class=\"st0\">\"UNFORMATTED\"</span>,<span class=\"kw1\">RECL</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw1\">ACCESS</span><span class=\"sy0\">=</span><span class=\"st0\">\"DIRECT\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Oh dear.</span><br/>        OPEN <span class=\"br0\">(</span>T,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"SCRATCH\"</span>,<span class=\"kw1\">FORM</span><span class=\"sy0\">=</span><span class=\"st0\">\"UNFORMATTED\"</span>,<span class=\"kw1\">RECL</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Request a temporary file.</span><br/>\u00a0<br/><span class=\"co1\">Copy the desired \"records\" to the temporary file.</span><br/>   <span class=\"nu0\">10</span>   <span class=\"kw1\">DO</span> L <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,NB\t<span class=\"co1\">!Only up to a point.</span><br/>          READ  <span class=\"br0\">(</span>F,REC <span class=\"sy0\">=</span> L,<span class=\"kw1\">ERR</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> B\t<span class=\"co1\">!One whole byte!</span><br/>          WRITE <span class=\"br0\">(</span>T<span class=\"br0\">)</span> B\t\t\t<span class=\"co1\">!And, write it too!</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!Again.</span><br/>   <span class=\"nu0\">20</span>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LE</span>.<span class=\"me1\">NB</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> CROAK<span class=\"br0\">(</span><span class=\"st0\">\"Short file!\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Should end the loop with L = NB + 1.</span><br/><span class=\"co1\">Convert from input to output...</span><br/>        REWIND T\t\t<span class=\"co1\">!Not CLOSE! That would discard the file!</span><br/>        CLOSE<span class=\"br0\">(</span>F<span class=\"br0\">)</span>\t\t<span class=\"co1\">!The source file still exists.</span><br/>        OPEN <span class=\"br0\">(</span>F,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span>FNAME,<span class=\"kw1\">FORM</span><span class=\"sy0\">=</span><span class=\"st0\">\"FORMATTED\"</span>,\t<span class=\"co1\">!But,</span><br/>     <span class=\"nu0\">1</span>   <span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"WRITE\"</span>,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"REPLACE\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!This dooms it!</span><br/><span class=\"co1\">Copy from the temporary file.</span><br/>        <span class=\"kw1\">DO</span> L <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,NB\t<span class=\"co1\">!A certain number only.</span><br/>          READ  <span class=\"br0\">(</span>T<span class=\"br0\">)</span> B\t\t<span class=\"co1\">!One at at timne.</span><br/>          WRITE <span class=\"br0\">(</span>F,<span class=\"st0\">\"(A1,$)\"</span><span class=\"br0\">)</span> B\t<span class=\"co1\">!The $, obviously, means no end-of-record appendage.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!And again.</span><br/><span class=\"co1\">Completed.</span><br/>   <span class=\"nu0\">30</span>   CLOSE<span class=\"br0\">(</span>T<span class=\"br0\">)</span>\t<span class=\"co1\">!Abandon the temporary file.</span><br/>        CLOSE<span class=\"br0\">(</span>F<span class=\"br0\">)</span>\t<span class=\"co1\">!Finished with the source file.</span><br/>      <span class=\"kw1\">END</span>\t\t<span class=\"co1\">!Done.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> CHOPPER<br/>       <span class=\"kw1\">CALL</span> FILEHACK<span class=\"br0\">(</span><span class=\"st0\">\"foobar.txt\"</span>,<span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\">setFileSize <span class=\"sy0\">::</span> FilePath <span class=\"sy0\">-&gt;</span> FileOffset <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">-- Truncates the file down to the specified length. </span><br/><span class=\"co1\">-- If the file was larger than the given length</span><br/><span class=\"co1\">-- before this operation was performed the extra is lost.</span><br/><span class=\"co1\">-- Note: calls truncate.</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw4\">truncate</span><span class=\"br0\">(</span>f <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">\"bu\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> newsizeinbytes<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw4\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'files'</span>                         <span class=\"co1\">NB. needed for versions prior to J7</span><br/>ftruncate=: ] fwrite~ ] <a class=\"__cf_email__\" data-cfemail=\"fb9d899e9a9fbb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; <span class=\"nu0\">0</span> , [</pre>"}, {"lang": "Java", "loc": 17, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.FileOutputStream</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.channels.FileChannel</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TruncFile <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: java TruncFile fileName newSize\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\">//turn on \"append\" so it doesn't clear the file</span><br/>\t\tFileChannel outChan <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afileoutputstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileOutputStream</span></a><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span>.<span class=\"me1\">getChannel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">long</span> newSize <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\toutChan.<span class=\"me1\">truncate</span><span class=\"br0\">(</span>newSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\toutChan.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">function truncate_file(fname, size):<br/>    open(fname, \"r+\") do f<br/>        truncate(f, size)<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 25, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">FileOutputStream</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">nio</span>.<span class=\"me1\">channels</span>.<span class=\"me1\">FileChannel</span><br/>\u00a0<br/>fun truncateFile<span class=\"br0\">(</span>fileName<span class=\"sy0\">:</span> String, newSize<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> fc<span class=\"sy0\">:</span> FileChannel<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        fc <span class=\"sy0\">=</span> FileOutputStream<span class=\"br0\">(</span>fileName, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>.<span class=\"me1\">channel</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>newSize <span class=\"sy0\">&gt;=</span> fc.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Requested file size isn't less than existing size\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            fc.<span class=\"me1\">truncate</span><span class=\"br0\">(</span>newSize<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>ex<span class=\"sy0\">:</span> Exception<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>ex.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">finally</span></a> <span class=\"br0\">{</span><br/>        fc<span class=\"sy0\">!!</span>.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    truncateFile<span class=\"br0\">(</span><span class=\"st0\">\"test.txt\"</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 19, "block": "<pre class=\"text highlighted_source\">define file_truncate(path::string, size::integer) =&gt; {<br/>\u00a0<br/>\tlocal(file = file(#path))<br/>\u00a0<br/>\tfail_if(not(#file -&gt; exists), -1, 'There is no file at the given path')<br/>\tfail_if(#file -&gt; size &lt; #size, -1, 'No point in truncating a file to a larger size than it already is')<br/>\u00a0<br/>\t#file -&gt; setSize(#size)<br/>\u00a0<br/>}<br/>local(filepath = '//Library/WebServer/Documents/Lasso9cli/trunk/testing/lorem_ipsum_long.txt')<br/>\u00a0<br/>stdoutnl(file(#filepath) -&gt; readbytes)<br/>stdoutnl('Original size: ' + file(#filepath) -&gt; size)<br/>\u00a0<br/>file_truncate(#filepath, 300)<br/>\u00a0<br/>stdoutnl(file(#filepath) -&gt; readbytes)<br/>stdout(file('Truncated size: ' + #filepath) -&gt; size)</pre>"}, {"lang": "Liberty BASIC", "loc": 32, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">dim</span> info$<span class=\"br0\">(</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">)</span>    <span class=\"co1\">'   NB pre-dimension before calling file-exists</span><br/>                      <span class=\"co1\">'        needed for file-exists function</span><br/><span class=\"kw1\">open</span> <span class=\"st0\">\"test.dat\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">output</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span>    <span class=\"co1\">'create file</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10000</span><br/>        <span class=\"sy0\">#</span><span class=\"nu0\">1</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">call</span> truncateFile<span class=\"sy0\">,</span> <span class=\"st0\">\"test.dat\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000</span><br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> truncateFile fn$<span class=\"sy0\">,</span> length<br/>    <span class=\"kw1\">if</span> fileExists<span class=\"br0\">(</span> <span class=\"kw3\">DefaultDir$</span><span class=\"sy0\">,</span> fn$<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">notice</span> <span class=\"st0\">\"No such file\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>    <span class=\"kw1\">open</span> fn$ <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>i<br/>        file$ <span class=\"sy0\">=</span><span class=\"kw1\">input</span>$<span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">lof</span><span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> file$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>length <span class=\"kw1\">then</span> <span class=\"kw1\">notice</span> <span class=\"st0\">\"Too short\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>i<span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>        file$ <span class=\"sy0\">=</span><span class=\"kw2\">left$</span><span class=\"br0\">(</span> file$<span class=\"sy0\">,</span> length<span class=\"br0\">)</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>i<br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"test.dat\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">output</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>o<br/>        <span class=\"sy0\">#</span>o file$<br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>o<br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> fileExists<span class=\"br0\">(</span> path$<span class=\"sy0\">,</span> filename$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">files</span> path$<span class=\"sy0\">,</span> filename$<span class=\"sy0\">,</span> info$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  fileExists <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> info$<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">'non zero is true</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 28, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- Truncates file<br/>-- @param {string} filename<br/>-- @param {integer} length<br/>-- @return {bool} success<br/>----------------------------------------<br/>on truncate (filename, length)<br/>  fp = xtra(\"fileIO\").new()<br/>  fp.openFile(filename, 0)<br/>  if fp.status() then return false<br/>  if fp.getLength()=length then<br/>    -- nothing to do<br/>    fp.closeFile()<br/>    return true<br/>  end if<br/>  data = fp.readByteArray(length)<br/>  if data.length&lt;&gt;length then<br/>    fp.closeFile()<br/>    return false<br/>  end if<br/>  fp.delete()<br/>  fp.createFile(filename)<br/>  fp.openFile(filename, 2)<br/>  fp.writeByteArray(data)<br/>  ok = fp.status()=0<br/>  fp.closeFile()<br/>  return ok<br/>end</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> truncate <span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> length<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> inFile <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">'r'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> inFile <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Specified filename does not exist\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> wholeFile <span class=\"sy0\">=</span> inFile<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"st0\">\"*all\"</span><span class=\"br0\">)</span><br/>    inFile<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> length <span class=\"sy0\">&gt;=</span> wholeFile<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Provided length is not less than current file length\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> outFile <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"st0\">'w'</span><span class=\"br0\">)</span><br/>    outFile<span class=\"sy0\">:</span><span class=\"kw3\">write</span><span class=\"br0\">(</span>wholeFile<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> length<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    outFile<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">Truncate[file_, n_]\u00a0:= Module[{filename = file, nbbytes = n, temp},<br/>  temp = $TemporaryPrefix &lt;&gt; filename;<br/>  BinaryWrite[temp, BinaryReadList[filename, \"Byte\", nbbytes]];<br/>  Close[temp]; DeleteFile[filename]; RenameFile[temp, filename];<br/>  ]</pre>"}, {"lang": "MATLAB / Octave", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> truncate_a_file<span class=\"br0\">(</span>fn,count<span class=\"br0\">)</span>; <br/>\u00a0<br/>fid=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>fn,<span class=\"co2\">'r'</span><span class=\"br0\">)</span>;<br/>s = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fread.html\"><span class=\"kw2\">fread</span></a><span class=\"br0\">(</span>fid,count,<span class=\"co2\">'uint8'</span><span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>; <br/>\u00a0<br/>fid=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>fn,<span class=\"co2\">'w'</span><span class=\"br0\">)</span>;<br/>s = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fwrite.html\"><span class=\"kw2\">fwrite</span></a><span class=\"br0\">(</span>fid,s,<span class=\"co2\">'uint8'</span><span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>; </pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import posix<br/>\u00a0<br/>discard truncate(\"filename\", 1024)</pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">val</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALtruncate\"><span class=\"kw3\">truncate</span></a> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a><br/><span class=\"co1\">(** Truncates the named file to the given size. *)</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">install</span><span class=\"br0\">(</span><span class=\"st0\">\"truncate\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"isL\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"trunc\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>trunc<span class=\"br0\">(</span><span class=\"st0\">\"/tmp/test.file\"</span><span class=\"sy0\">,</span> <span class=\"nu1\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 38, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">Program</span> FileTruncate<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  myfile<span class=\"sy1\">:</span>   <span class=\"kw4\">file</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span><span class=\"sy1\">;</span><br/>  filename<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  position<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'File for truncation: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> FileExists<span class=\"br0\">(</span>filename<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Error: File does not exist.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Truncate position: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>position<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Assign<span class=\"br0\">(</span>myfile<span class=\"sy1\">,</span> filename<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Reset<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> FileSize<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span> &lt; position <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Warning: The file \"'</span><span class=\"sy1\">,</span> filename<span class=\"sy1\">,</span> <span class=\"st0\">'\" is too short. No need to truncate at position '</span><span class=\"sy1\">,</span> position<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Close<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Seek<span class=\"br0\">(</span>myfile<span class=\"sy1\">,</span> position<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Truncate<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'File \"'</span><span class=\"sy1\">,</span> filename<span class=\"sy1\">,</span> <span class=\"st0\">'\" truncated at position '</span><span class=\"sy1\">,</span> position<span class=\"sy1\">,</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># Open a file for writing, and truncate it to 1234 bytes.</span><br/><a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> FOO<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;&gt;file\"</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/truncate.html\"><span class=\"kw3\">truncate</span></a><span class=\"br0\">(</span>FOO<span class=\"sy0\">,</span> <span class=\"nu0\">1234</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> FOO<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Truncate a file to 567 bytes.</span><br/><a href=\"http://perldoc.perl.org/functions/truncate.html\"><span class=\"kw3\">truncate</span></a><span class=\"br0\">(</span><span class=\"st0\">\"file\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">567</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> NativeCall<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw3\">truncate</span><span class=\"br0\">(</span>Str<span class=\"sy0\">,</span> int32 <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span>Str <span class=\"re0\">$file</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$to</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">given</span> <span class=\"re0\">$file</span><span class=\"sy0\">.</span><span class=\"me1\">IO</span> <span class=\"br0\">{</span> <br/>        <span class=\"sy0\">.</span><span class=\"me1\">e</span>        <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"$file doesn't exist\"</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">.</span><span class=\"me1\">w</span>        <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"$file isn't writable\"</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">.</span><span class=\"me1\">s</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$to</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"$file is not big enough to truncate\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">truncate</span><span class=\"br0\">(</span><span class=\"re0\">$file</span><span class=\"sy0\">,</span> <span class=\"re0\">$to</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Truncation was unsuccessful\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de truncate (File Len)<br/>   (native \"@\" \"truncate\" 'I File Len) )</pre>"}, {"lang": "PL/I", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Parameters to be read in by the program are:   */<br/>/* 1. the name of the file to be truncated, and   */<br/>/* 2. the size of file after truncation.          */<br/>\u00a0<br/>truncate_file: procedure options (main); /* 12 July 2012 */<br/>   declare (i, n) fixed binary (31);<br/>   declare filename character(50) varying;<br/>   declare in file record input, out file record output;<br/>\u00a0<br/>   put ('What is the name of the file to be truncated?');<br/>   get edit (filename) (L);<br/>   put ('What is the length of file to be retained?');<br/>   get (n);<br/>\u00a0<br/>   begin;<br/>      declare c(n) character (1), ch character (1);<br/>\u00a0<br/>      open file (in) title ('/' || filename || ',type(fixed),recsize(1)' )<br/>         input;<br/>      do i = 1 to n; read file (in) into (ch); c(i) = ch; end;<br/>      close file (in);<br/>\u00a0<br/>      open file (out) title ('/' || filename || ',append(n),type(fixed),<br/>         recsize(' || trim(n) || ')' );<br/>      write file (out) from (c);<br/>      close file (out);<br/>   end;<br/>end truncate_file;<br/>\u00a0</pre>"}, {"lang": "PowerBASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">SUB truncateFile (file AS STRING, length AS DWORD)<br/>    IF LEN(DIR$(file)) THEN<br/>        DIM f AS LONG<br/>        f = FREEFILE<br/>        OPEN file FOR BINARY AS f<br/>        IF length &gt; LOF(f) THEN<br/>            CLOSE f<br/>            ERROR 62 'Input past end<br/>        ELSE<br/>            SEEK f, length + 1<br/>            SETEOF f<br/>            CLOSE f<br/>        END IF<br/>    ELSE<br/>        ERROR 53 'File not found<br/>    END IF<br/>END SUB</pre>"}, {"lang": "PureBasic", "loc": 13, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> SetFileSize<span class=\"br0\">(</span>File$, length.q<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> fh, pos, i<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FileSize</span><span class=\"br0\">(</span>File$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> length<br/>    <span class=\"kw1\">Debug</span> <span class=\"st0\">\"File to small, is a directory or does not exist.\"</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #False<br/>  <span class=\"kw1\">Else</span> <br/>    fh <span class=\"sy0\">=</span> <span class=\"kw2\">OpenFile</span><span class=\"br0\">(</span>#PB_Any, File$<span class=\"br0\">)</span><br/>    <span class=\"kw2\">FileSeek</span><span class=\"br0\">(</span>fh, length<span class=\"br0\">)</span><br/>    <span class=\"kw2\">TruncateFile</span><span class=\"br0\">(</span>fh<span class=\"br0\">)</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span>fh<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Powershell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">Function</span> Truncate<span class=\"kw4\">-File</span><span class=\"br0\">(</span>fname<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re0\">$null</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Set-Content</span> <span class=\"kw5\">-Path</span> <span class=\"st0\">\"$fname\"</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> truncate_file<span class=\"br0\">(</span>name<span class=\"sy0\">,</span> length<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw3\">os</span>.<span class=\"me1\">path</span>.<span class=\"me1\">isfile</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">if</span> length <span class=\"sy0\">&gt;=</span> <span class=\"kw3\">os</span>.<span class=\"me1\">path</span>.<span class=\"me1\">getsize</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span>name<span class=\"sy0\">,</span> <span class=\"st0\">'ab'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>        f.<span class=\"me1\">truncate</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (truncate file size)<br/>  (unless (file-exists? file) (error 'truncat \"missing file: ~a\" file))<br/>  (when (&gt; size (file-size file)) (printf \"Warning: extending file size.\\n\"))<br/>  (call-with-output-file* file #:exists 'update<br/>    (\u03bb(o) (file-truncate o size))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 20, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  truncates  a file  to a  specified  (and smaller)  number of bytes.     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> siz FID                                <span class=\"coMULTI\">/*obtain required arguments from the CL*/</span><br/>FID=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>FID<span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*elide  FID  leading/trailing blanks. */</span><br/><span class=\"kw1\">if</span> siz==<span class=\"st0\">''</span>             <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">\"No truncation size was specified  (1st argument).\"</span><br/><span class=\"kw1\">if</span> FID==<span class=\"st0\">''</span>             <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">\"No fileID was specified  (2nd argument).\"</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>siz,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">\"trunc size isn't an integer: \"</span>          siz<br/><span class=\"kw1\">if</span> siz<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">\"trunc size isn't a positive integer: \"</span>  siz<br/>_=<span class=\"kw6\">charin</span><span class=\"br0\">(</span>FID,<span class=\"nu0\">1</span>,siz+<span class=\"nu0\">1</span><span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*position file and read a wee bit more*/</span><br/>#=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>                                      <span class=\"coMULTI\">/*get the length of the part just read.*/</span><br/><span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>                <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">\"the specified file doesn't exist: \"</span>     FID<br/><span class=\"kw1\">if</span> #<span class=\"sy0\">&lt;</span>siz               <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">\"the file is smaller than trunc size: \"</span>   #<br/><span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> FID                                 <span class=\"coMULTI\">/*close the file used, just to be safe.*/</span><br/><span class=\"st0\">'ERASE'</span>      FID                                 <span class=\"coMULTI\">/*invoke a command to delete the file  */</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> FID                                 <span class=\"coMULTI\">/*close the file, maybe for REXX's use.*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">charout</span> FID, <span class=\"kw6\">left</span><span class=\"br0\">(</span>_,siz<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*write a truncated version of the file*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> FID                                 <span class=\"coMULTI\">/*close the file used, just to be safe.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'file '</span>  FID <span class=\"st0\">\" truncated to \"</span>  siz  <span class=\"st0\">'bytes.'</span> <span class=\"coMULTI\">/*display some information to terminal.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ser:  <span class=\"kw1\">say</span> <span class=\"st0\">'***error***'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;      <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>    <span class=\"coMULTI\">/*display an error message  and  exit. */</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>file = \"C:\\Ring\\ReadMe.txt\"<br/>fp = read(file)<br/>fpstr = left(fp, 100)<br/>see fpstr + nl<br/>write(file, fpstr)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Open a file for writing, and truncate it to 1234 bytes.</span><br/><span class=\"kw4\">File</span>.<span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"file\"</span>, <span class=\"st0\">\"ab\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span><br/>  f.<span class=\"me1\">truncate</span><span class=\"br0\">(</span><span class=\"nu0\">1234</span><span class=\"br0\">)</span><br/>  f <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"Killroy was here\"</span> <span class=\"co1\"># write to file</span><br/><span class=\"kw1\">end</span>  <span class=\"co1\"># file is closed now.</span><br/>\u00a0<br/><span class=\"co1\"># Just truncate a file to 567 bytes.</span><br/><span class=\"kw4\">File</span>.<span class=\"me1\">truncate</span><span class=\"br0\">(</span><span class=\"st0\">\"file\"</span>, <span class=\"nu0\">567</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">FileOutputStream</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TruncFile <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Usage: java TruncFile fileName newSize\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <span class=\"co1\">//turn on \"append\" so it doesn't clear the file</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> outChan <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> FileOutputStream<span class=\"br0\">(</span>args<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>.<span class=\"me1\">getChannel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> newSize <span class=\"sy0\">=</span> args<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><br/>    outChan.<span class=\"me1\">truncate</span><span class=\"br0\">(</span>newSize<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func truncate<span class=\"br0\">(</span>filename, len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var file = <span class=\"kw4\">File</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span>;<br/>    len <span class=\"sy0\">&gt;</span> file.<span class=\"me1\">size</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"sy0\">&amp;&amp;</span> die <span class=\"st0\">\"The provided length is greater than the length of the file\"</span>;<br/>    file.<span class=\"me1\">truncate</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># truncate \"file.ext\" to 1234 bytes</span><br/>truncate<span class=\"br0\">(</span><span class=\"st0\">\"file.ext\"</span>, <span class=\"nu0\">1234</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Tcl", "loc": 5, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"st0\">\"file\"</span> r+<span class=\"br0\">]</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># Truncation is done on channels</span><br/>chan truncate <span class=\"re0\">$f</span> <span class=\"nu0\">1234</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\"># Truncate at a particular length (in bytes)</span><br/><span class=\"kw2\">close</span> <span class=\"re0\">$f</span></pre>"}, {"lang": "UNIX Shell", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\"># Truncate a file named \"myfile\" to 1440 kilobytes.</span><br/><span class=\"kw2\">ls</span> myfile <span class=\"sy0\">&gt;/</span>dev<span class=\"sy0\">/</span>null <span class=\"sy0\">&amp;&amp;</span><br/>  <span class=\"kw2\">dd</span> <span class=\"re2\">if</span>=<span class=\"sy0\">/</span>dev<span class=\"sy0\">/</span>null <span class=\"re2\">of</span>=myfile <span class=\"re2\">bs</span>=<span class=\"nu0\">1</span> <span class=\"re2\">seek</span>=1440k</pre>"}, {"lang": "VBScript", "loc": 41, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> truncate(fpath,n)<br/>\t<span class=\"co1\">'Check if file exist<br/></span>\t<span class=\"kw4\">Set</span> objfso = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/>\t<span class=\"kw3\">If</span> objfso.FileExists(fpath) = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>\t\tWScript.Echo fpath &amp; <span class=\"st0\">\" does not exist\"</span><br/>\t\t<span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\tcontent = <span class=\"st0\">\"\"</span><br/>\t<span class=\"co1\">'stream the input file<br/></span>\t<span class=\"kw4\">Set</span> objinstream = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Adodb.Stream\"</span>)<br/>\t<span class=\"kw3\">With</span> objinstream<br/>\t\t.<span class=\"kw4\">Type</span> = 1<br/>\t\t.<span class=\"kw4\">Open</span><br/>\t\t.LoadFromFile(fpath)<br/>\t\t<span class=\"co1\">'check if the specified size is larger than the file content<br/></span>\t\t<span class=\"kw3\">If</span> n &lt;= .Size <span class=\"kw3\">Then</span><br/>\t\t\tcontent = .Read(n)<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tWScript.Echo <span class=\"st0\">\"The specified size is larger than the file content\"</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t.<span class=\"kw3\">Close</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">With</span><br/>\t<span class=\"co1\">'write the truncated version<br/></span>\t<span class=\"kw4\">Set</span> objoutstream = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Adodb.Stream\"</span>)<br/>\t<span class=\"kw3\">With</span> objoutstream<br/>\t\t.<span class=\"kw4\">Type</span> = 1<br/>\t\t.<span class=\"kw4\">Open</span><br/>\t\t.Write content<br/>\t\t.SaveToFile fpath,2<br/>\t\t.<span class=\"kw3\">Close</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">With</span><br/>\t<span class=\"kw4\">Set</span> objinstream = <span class=\"kw5\">Nothing</span><br/>\t<span class=\"kw4\">Set</span> objoutstream = <span class=\"kw5\">Nothing</span><br/>\t<span class=\"kw4\">Set</span> objfso = <span class=\"kw5\">Nothing</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'testing<br/></span><span class=\"kw2\">Call</span> truncate(<span class=\"st0\">\"C:\\temp\\test.txt\"</span>,30)<br/>\u00a0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 8, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> CLEAR <span class=\"nu0\">29999</span><br/><span class=\"nu0\">20</span> INPUT <span class=\"st0\">\"Which file do you want to truncate?\"</span>;f$<br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Start tape to load file to truncate.\"</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LOAD</span> f$ <span class=\"kw3\">CODE</span> <span class=\"nu0\">30000</span><br/><span class=\"nu0\">50</span> <span class=\"st0\">\"Input how many bytes do you want to keep?\"</span>;n<br/><span class=\"nu0\">60</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Please rewind the tape and press record.\"</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">SAVE</span> f$ <span class=\"kw3\">CODE</span> <span class=\"nu0\">30000</span>,n<br/><span class=\"nu0\">80</span> STOP</pre>"}]}