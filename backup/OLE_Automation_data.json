{"task": "OLE_Automation", "blocks": [{"lang": "M2000 Interpreter", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckAutomation {<br/>      ExitNow=false<br/>      Declare WithEvents Alfa \"WORD.APPLICATION\"<br/>      \\\\ minimize console<br/>      Title \"Minimized- Waiting\", 0<br/>      Wait 300<br/>      Print \"ok\"<br/>      With Alfa, \"Visible\", True<br/>      Function ALFA_QUIT {<br/>                  Print \"Why you close Word?\"<br/>                  ExitNow=True<br/>      }<br/>      M=0<br/>      Every 20 {<br/>            If ExitNow then exit<br/>            M++<br/>            If M&gt;500 then exit<br/>      }<br/>      Try {<br/>            Method Alfa, \"QUIT\"<br/>      }<br/>      Declare Alfa Nothing<br/>      if ExitNow then {<br/>            Print format$(\"Finish  {0:2} sec\", M/1000)<br/>      } Else {<br/>            Print \"Close Word manually\"<br/>      }<br/>      \\\\ show again console<br/>      Title \"ok\"<br/>}<br/>CheckAutomation<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 56, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python</span><br/><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/><span class=\"kw1\">import</span> win32com.<span class=\"me1\">client</span><br/><span class=\"kw1\">from</span> win32com.<span class=\"me1\">server</span>.<span class=\"me1\">util</span> <span class=\"kw1\">import</span> wrap<span class=\"sy0\">,</span> unwrap<br/><span class=\"kw1\">from</span> win32com.<span class=\"me1\">server</span>.<span class=\"me1\">dispatcher</span> <span class=\"kw1\">import</span> DefaultDebugDispatcher<br/><span class=\"kw1\">from</span> ctypes <span class=\"kw1\">import</span> *<br/><span class=\"kw1\">import</span> <span class=\"kw3\">commands</span><br/><span class=\"kw1\">import</span> pythoncom<br/><span class=\"kw1\">import</span> winerror<br/><span class=\"kw1\">from</span> win32com.<span class=\"me1\">server</span>.<span class=\"me1\">exception</span> <span class=\"kw1\">import</span> <span class=\"kw2\">Exception</span><br/>\u00a0<br/>clsid <span class=\"sy0\">=</span> <span class=\"st0\">\"{55C2F76F-5136-4614-A397-12214CC011E5}\"</span><br/>iid <span class=\"sy0\">=</span> pythoncom.<span class=\"me1\">MakeIID</span><span class=\"br0\">(</span>clsid<span class=\"br0\">)</span><br/>appid <span class=\"sy0\">=</span> <span class=\"st0\">\"python.server\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span> VeryPermissive:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">handle</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">dobjects</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>        <br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__del__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        pythoncom.<span class=\"me1\">RevokeActiveObject</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">handle</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">def</span> _dynamic_<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> lcid<span class=\"sy0\">,</span> wFlags<span class=\"sy0\">,</span> args<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> wFlags &amp; pythoncom.<span class=\"me1\">DISPATCH_METHOD</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">getattr</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span>name<span class=\"br0\">)</span><span class=\"br0\">(</span>*args<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> wFlags &amp; pythoncom.<span class=\"me1\">DISPATCH_PROPERTYGET</span>:<br/>            <span class=\"kw1\">try</span>:<br/>                <span class=\"co1\"># to avoid problems with byref param handling, tuple results are converted to lists.</span><br/>                ret <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"kw4\">__dict__</span><span class=\"br0\">[</span>name<span class=\"br0\">]</span><br/>                <span class=\"kw1\">if</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"kw2\">type</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>                    ret <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> ret<br/>            <span class=\"kw1\">except</span> <span class=\"kw2\">KeyError</span>: <span class=\"co1\"># Probably a method request.</span><br/>                <span class=\"kw1\">raise</span> <span class=\"kw2\">Exception</span><span class=\"br0\">(</span>scode<span class=\"sy0\">=</span>winerror.<span class=\"me1\">DISP_E_MEMBERNOTFOUND</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> wFlags &amp; <span class=\"br0\">(</span>pythoncom.<span class=\"me1\">DISPATCH_PROPERTYPUT</span> | pythoncom.<span class=\"me1\">DISPATCH_PROPERTYPUTREF</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw2\">setattr</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">raise</span> <span class=\"kw2\">Exception</span><span class=\"br0\">(</span>scode<span class=\"sy0\">=</span>winerror.<span class=\"me1\">E_INVALIDARG</span><span class=\"sy0\">,</span> desc<span class=\"sy0\">=</span><span class=\"st0\">\"invalid wFlags\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">def</span> write<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> x<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">import</span> win32com.<span class=\"me1\">server</span>.<span class=\"me1\">util</span><span class=\"sy0\">,</span> win32com.<span class=\"me1\">server</span>.<span class=\"me1\">policy</span><br/>child <span class=\"sy0\">=</span> VeryPermissive<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ob <span class=\"sy0\">=</span> win32com.<span class=\"me1\">server</span>.<span class=\"me1\">util</span>.<span class=\"me1\">wrap</span><span class=\"br0\">(</span>child<span class=\"sy0\">,</span> usePolicy<span class=\"sy0\">=</span>win32com.<span class=\"me1\">server</span>.<span class=\"me1\">policy</span>.<span class=\"me1\">DynamicPolicy</span><span class=\"br0\">)</span><br/><span class=\"kw1\">try</span>:<br/>    handle <span class=\"sy0\">=</span> pythoncom.<span class=\"me1\">RegisterActiveObject</span><span class=\"br0\">(</span>ob<span class=\"sy0\">,</span> iid<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">except</span> pythoncom.<span class=\"me1\">com_error</span><span class=\"sy0\">,</span> details:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Warning - could not register the object in the ROT:\"</span><span class=\"sy0\">,</span> details<br/>    handle <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>    <br/>child.<span class=\"me1\">handle</span> <span class=\"sy0\">=</span> handle  <br/>\u00a0<br/>ahk <span class=\"sy0\">=</span> win32com.<span class=\"me1\">client</span>.<span class=\"me1\">Dispatch</span><span class=\"br0\">(</span><span class=\"st0\">\"ahkdemo.ahk\"</span><span class=\"br0\">)</span><br/>ahk.<span class=\"me1\">aRegisterIDs</span><span class=\"br0\">(</span>clsid<span class=\"sy0\">,</span> appid<span class=\"br0\">)</span><br/><span class=\"co1\"># autohotkey.exe ahkside.ahk</span><br/><span class=\"co1\"># python /c/Python26/Scripts/ipython.py -wthread -i pythonside.py</span><br/><span class=\"co1\"># must use -wthread otherwise calling com client hangs</span></pre>"}]}