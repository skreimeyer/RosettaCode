{"task": "Character_codes", "blocks": [{"lang": "360 Assembly", "loc": 34, "block": "<pre class=\"text highlighted_source\">*        Character codes EBCDIC    15/02/2017<br/>CHARCODE CSECT<br/>         USING  CHARCODE,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \" &lt;-<br/>         ST     R15,8(R13)         \" -&gt;<br/>         LR     R13,R15            \" addressability<br/>* Character to Decimal<br/>         SR     R1,R1              r1=0<br/>         IC     R1,=C'a'           insert character 'a'<br/>         XDECO  R1,PG<br/>         XPRNT  PG,L'PG            print -&gt; 129<br/>* Hexadecimal to character<br/>         SR     R1,R1              r1=0<br/>         IC     R1,=X'81'          insert character X'81'<br/>         STC    R1,CHAR            store character r1<br/>         XPRNT  CHAR,L'CHAR        print -&gt; 'a'<br/>* Decimal to character<br/>         LH     R1,=H'129'         r1=129<br/>         STC    R1,CHAR            store character r1<br/>         XPRNT  CHAR,L'CHAR        print -&gt; 'a'<br/>*<br/>         XDUMP  CHAR,L'CHAR        dump -&gt; X'81'<br/>*<br/>RETURN   L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \" restore<br/>         XR     R15,R15            \" rc=0<br/>         BR     R14                exit<br/>PG       DS     CL12<br/>CHAR     DS     CL1 <br/>         YREGS<br/>         END    CHARCODE</pre>"}, {"lang": "ABAP", "loc": 7, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">report</span></a> zcharcode<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> c <span class=\"kw4\">value</span> <span class=\"st0\">'A'</span><span class=\"sy0\">,</span> n <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPFIELD-SYMBOLS.htm\"><span class=\"kw2\">field-symbols</span></a> <span class=\"sy1\">&lt;</span>n<span class=\"sy1\">&gt;</span> <span class=\"kw4\">type</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPASSIGN.htm\"><span class=\"kw3\">assign</span></a> c <span class=\"kw4\">to</span> <span class=\"sy1\">&lt;</span>n<span class=\"sy1\">&gt;</span> <span class=\"kw4\">casting</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPMOVE.htm\"><span class=\"kw3\">move</span></a> <span class=\"sy1\">&lt;</span>n<span class=\"sy1\">&gt;</span> <span class=\"kw4\">to</span> n<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a><span class=\"sy0\">:</span> c<span class=\"sy0\">,</span> <span class=\"st0\">'='</span><span class=\"sy0\">,</span> n <span class=\"kw4\">left-justified</span><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>cw <span class=\"st0\">\"~x0\"</span> <span class=\"br0\">(</span>char-code #\\a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>cw <span class=\"st0\">\"~x0\"</span> <span class=\"br0\">(</span>code-char <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 2, "block": "<pre class=\"text highlighted_source\">trace(String.fromCharCode(97)); //prints 'a' <br/>trace(\"a\".charCodeAt(0));//prints '97'</pre>"}, {"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Char_Code <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>Character'Val <span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" =\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Character'Pos <span class=\"br0\">(</span>'a'<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Char_Code;</pre>"}, {"lang": "Aime", "loc": 6, "block": "<pre class=\"text highlighted_source\"># prints \"97\"<br/>o_integer('a');<br/>o_byte('\\n');<br/># prints \"a\"<br/>o_byte(97);<br/>o_byte('\\n');</pre>"}, {"lang": "ALGOL 68", "loc": 4, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># for ASCII this prints \"+97\" EBCDIC prints \"+129\" #</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span> <span class=\"kw8\">REPR</span> 97<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\"># for ASCII this prints \"a\"; EBCDIC prints \"/\" #</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 6, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% display the character code of \"a\" (97 in ASCII)                       \u00a0%<br/>    write( decode( \"a\" ) );<br/>   \u00a0% display the character corresponding to 97 (\"a\" in ASCII)              \u00a0%<br/>    write( code( 97 ) );<br/>end.</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      \u2395UCS 97<br/>a</pre>"}, {"lang": "AppleScript", "loc": 2, "block": "<pre class=\"applescript highlighted_source\">log<span class=\"br0\">(</span><span class=\"kw1\">id</span> <span class=\"kw3\">of</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/>log<span class=\"br0\">(</span><span class=\"kw1\">id</span> <span class=\"kw3\">of</span> <span class=\"st0\">\"aA\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 2, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> ord<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw6\">return</span> chmap<span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">256</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    chmap<span class=\"br0\">[</span><span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span>, i<span class=\"br0\">)</span><span class=\"br0\">]</span> = i<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw5\">print</span> ord<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>, ord<span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw5\">printf</span> <span class=\"st0\">\"%c\u00a0%c<span class=\"es0\">\\n</span>\"</span>, <span class=\"nu0\">97</span>, <span class=\"nu0\">98</span><br/>  s = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c%c\"</span>, <span class=\"nu0\">97</span>, <span class=\"nu0\">98</span><span class=\"br0\">)</span><br/>  <span class=\"kw5\">print</span> s<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 2, "block": "<pre class=\"text highlighted_source\">Disp 'a'\u25b6Dec,i<br/>Disp 97\u25b6Char,i</pre>"}, {"lang": "Babel", "loc": 2, "block": "<pre class=\"text highlighted_source\">'abcdefg' str2ar<br/>{%d nl &lt;&lt;} eachar</pre>"}, {"lang": "BASIC", "loc": 4, "block": "<pre class=\"qbasic highlighted_source\">charCode <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><br/>char <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckchr%24.shtml\"><span class=\"kw3\">CHR$</span></a><span class=\"br0\">(</span>charCode<span class=\"br0\">)</span> <span class=\"co1\">'prints a</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckasc.shtml\"><span class=\"kw3\">ASC</span></a><span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"co1\">'prints 97</span></pre>"}, {"lang": "Batch File", "loc": 35, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><span class=\"co2\"><br/>:: Supports all ASCII characters and codes from 34-126 with the exceptions of:</span><br/><span class=\"co2\">:: 38  &amp;</span><br/><span class=\"co2\">:: 60  &lt;</span><br/><span class=\"co2\">:: 62  &gt;</span><br/><span class=\"co2\">:: 94  ^</span><br/><span class=\"co2\">:: 124 |</span><br/>\u00a0<br/>:<span class=\"re0\">_main</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_toCode a<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:_toChar 97<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">_toCode</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> codecount=32<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>33,1,126<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a codecount+=1<br/>  cmd /c <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span>==<span class=\"sy0\">!</span><span class=\"re2\">=exitcodeAscii</span><span class=\"sy0\">!</span> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">codecount</span><span class=\"sy0\">!</span><br/>    <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>:<span class=\"re0\">_toChar</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a><br/>cmd /c <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">=exitcodeAscii</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">      charCode = 97<br/>      char$ = \"a\"<br/>      PRINT CHR$(charCode)\u00a0: REM prints a<br/>      PRINT ASC(char$)\u00a0: REM prints 97</pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"a\". 99*44*+, @</pre>"}, {"lang": "Bracmat", "loc": 21, "block": "<pre class=\"text highlighted_source\">( put<br/>$ ( str<br/>  $ ( \"\\nLatin a<br/>        ISO-9959-1: \"<br/>      asc$a<br/>      \" = \"<br/>      chr$97<br/>      \"<br/>             UTF-8: \"<br/>      utf$a<br/>      \" = \"<br/>      chu$97<br/>      \\n<br/>      \"Cyrillic \u0430 (UTF-8): \"<br/>      utf$\u0430<br/>      \" = \"<br/>      chu$1072<br/>      \\n<br/>    )<br/>  )<br/>)</pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* prints \"97\" */</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* prints \"a\"; we don't have to cast because printf is type agnostic */</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 7, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"st0\">'a'</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span> <span class=\"co1\">// prints \"97\"</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"nu0\">97</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span> <span class=\"co1\">// prints \"a\"</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">CharacterCode</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">//Prints \"97\"</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">//Prints \"a\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 10, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>int \\a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \"97\"</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>char <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \\a</span><br/>\u00a0<br/><span class=\"co1\">; Unicode is also available, as Clojure uses the underlying java Strings &amp; chars</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>int \\\u03c0<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; prints 960</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>char <span class=\"nu0\">960</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \\\u03c0</span><br/>\u00a0<br/><span class=\"co1\">; use String because char in Java can't represent characters outside Basic Multilingual Plane</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>codePointAt <span class=\"st0\">\"\ud834\udd58\ud834\udd65\ud834\udd6e\"</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints 119136</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>String<span class=\"sy0\">.</span> <span class=\"br0\">(</span>int<span class=\"sy0\">-</span>array <span class=\"nu0\">1</span> <span class=\"nu0\">119136</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \ud834\udd58\ud834\udd65\ud834\udd6e</span></pre>"}, {"lang": "COBOL", "loc": 9, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> character-codes<span class=\"sy0\">.</span><br/>       remarks<span class=\"sy0\">.</span> <span class=\"kw2\">COBOL</span> <span class=\"kw3\">is</span> an ordinal language<span class=\"sy0\">,</span> <span class=\"kw3\">first</span> <span class=\"kw3\">is</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>       remarks<span class=\"sy0\">.</span> 42nd ASCII <span class=\"kw1\">code</span> <span class=\"kw3\">is</span> <span class=\"st0\">\")\"</span> <span class=\"kw3\">not</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>       <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> <span class=\"kw4\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> character-codes<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 2, "block": "<pre class=\"coffeescript highlighted_source\">console.<span class=\"me1\">log</span> <span class=\"st0\">'a'</span>.<span class=\"me1\">charCodeAt</span> <span class=\"nu0\">0</span> <span class=\"co1\"># 97</span><br/>console.<span class=\"me1\">log</span> String.<span class=\"me1\">fromCharCode</span> <span class=\"nu0\">97</span> <span class=\"co1\"># a</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>char-code #\\a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \"97\"</span><br/><span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>code-char <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \"a\"</span></pre>"}, {"lang": "Component Pascal", "loc": 9, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> CharCodes<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tc <span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tc <span class=\"sy0\">:=</span> <span class=\"st_h\">'A'</span>;<br/>\tStdLog.<span class=\"me1\">Char</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tc <span class=\"sy0\">:=</span> <span class=\"kw3\">CHR</span><span class=\"br0\">(</span>3A9H<span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Char</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> CharCodes;</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">utf</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span> test <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Get four-byte utf32 value for index 0.</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> test.<span class=\"me1\">decode</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// 'index' has moved to next character input position.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>index <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 19, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Project1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  aChar<span class=\"sy1\">:</span><span class=\"kw4\">Char</span><span class=\"sy1\">;</span><br/>  aCode<span class=\"sy1\">:</span><span class=\"kw4\">Byte</span><span class=\"sy1\">;</span><br/>  uChar<span class=\"sy1\">:</span><span class=\"kw4\">WideChar</span><span class=\"sy1\">;</span><br/>  uCode<span class=\"sy1\">:</span><span class=\"kw4\">Word</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  aChar <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>       <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>aChar<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  aCode <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Ord</span><span class=\"br0\">(</span>aChar<span class=\"br0\">)</span><span class=\"sy1\">;</span>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>aCode<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  uChar <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">WideChar</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>uChar<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  uCode <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Ord</span><span class=\"br0\">(</span>uChar<span class=\"br0\">)</span><span class=\"sy1\">;</span>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>uCode<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 2, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PrintLn<span class=\"br0\">(</span><span class=\"kw3\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 5, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <span class=\"st0\">'a'</span>.<span class=\"me1\">asInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 97</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">makeCharacter</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">asChar</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 'a'</span></pre>"}, {"lang": "Eiffel", "loc": 30, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tc8<span class=\"sy0\">:</span> CHARACTER_8<br/>\t\t\tc32<span class=\"sy0\">:</span> CHARACTER_32<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tc8 <span class=\"sy0\">:=</span> <span class=\"st0\">'<span class=\"es0\">%/</span>97/'</span>\t\t\t<span class=\"co1\">-- using code value notation</span><br/>\t\t\tc8 <span class=\"sy0\">:=</span> <span class=\"st0\">'<span class=\"es0\">%/</span>0x61/'</span>\t\t\t<span class=\"co1\">-- same as above, but using hexadecimal literal</span><br/>\t\t\tprint<span class=\"br0\">(</span>c8.<span class=\"me1\">natural_32_code</span><span class=\"br0\">)</span>\t<span class=\"co1\">-- prints \"97\"</span><br/>\t\t\tprint<span class=\"br0\">(</span>c8<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">-- prints the character \"a\"</span><br/>\u00a0<br/>\t\t\tc32 <span class=\"sy0\">:=</span> <span class=\"st0\">'a'</span>\t\t\t<span class=\"co1\">-- using character literal</span><br/>\t\t\tprint<span class=\"br0\">(</span>c32.<span class=\"me1\">natural_32_code</span><span class=\"br0\">)</span>\t<span class=\"co1\">-- prints \"97\"</span><br/>\t\t\tprint<span class=\"br0\">(</span>c32<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">-- prints \"U+00000061\"</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">--c8\u00a0:= '\u03c0'\t\t\t-- compile-time error (c8 does not have enough range)</span><br/>\t\t\tc32 <span class=\"sy0\">:=</span> <span class=\"st0\">'\u03c0'</span>\t\t\t<span class=\"co1\">-- assigns Unicode value 960</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 9, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>public program =<br/>[<br/>    var ch\u00a0:= $97.<br/>\u00a0<br/>    console writeLine:ch.<br/>    console writeLine(ch toInt).<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; code =\u00a0?a<br/>97<br/>iex(2)&gt; to_string([code])<br/>\"a\"</pre>"}, {"lang": "Emacs Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>string-to-char <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>message <span class=\"st0\">\"%c\"</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 4, "block": "<pre class=\"erlang highlighted_source\"><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">F</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span> <br/>#Fun<span class=\"sy3\">&lt;</span>erl_eval<span class=\"sy1\">.</span>6<span class=\"sy1\">.</span>13229925<span class=\"sy3\">&gt;</span><br/><span class=\"nu0\">2</span><span class=\"sy3\">&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"nu0\">97</span></pre>"}, {"lang": "Euphoria", "loc": 2, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"97\"</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"a\"</span></pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <span class=\"st0\">'A'</span><br/><span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">65</span><br/>printfn <span class=\"st0\">\"%d\"</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"%c\"</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> n<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">CHAR: katakana-letter-a .<br/>\"\u30a2\" first .<br/>\u00a0<br/>12450 1string print</pre>"}, {"lang": "FALSE", "loc": 2, "block": "<pre class=\"text highlighted_source\">'A.\"<br/>\"65,</pre>"}, {"lang": "Fantom", "loc": 4, "block": "<pre class=\"text highlighted_source\">fansh&gt; 97.toChar<br/>a<br/>fansh&gt; 'a'.toInt<br/>97</pre>"}, {"lang": "Forth", "loc": 3, "block": "<pre class=\"text highlighted_source\">char a<br/>dup .    \\ 97<br/>emit     \\ a</pre>"}, {"lang": "Fortran", "loc": 2, "block": "<pre class=\"fortran highlighted_source\">WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw4\">ACHAR</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span>, <span class=\"kw4\">IACHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>   <br/>WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span>, <span class=\"kw4\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">' FreeBASIC v1.05.0 win64</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"a - &gt; \"</span>; <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"98 -&gt; \"</span>; <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">98</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to exit the program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span><br/>\u00a0</pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">println[char[\"a\"]]              // prints 97<br/>println[chars[\"a\"]]             // prints [97] (an array)<br/>println[char[97]]               // prints a<br/>println[char[\"Frink rules!\"]]   // prints [70, 114, 105, 110, 107, 32, 114, 117, 108, 101, 115, 33]<br/>println[[70, 114, 105, 110, 107, 32, 114, 117, 108, 101, 115, 33]]  // prints \"Frink rules!\"</pre>"}, {"lang": "Gambas", "loc": 10, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sChar <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <br/>\u00a0<br/>sChar <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=inputbox+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter a character\"</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Character \"</span> <span class=\"sy0\">&amp;</span> sChar <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" = ASCII \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/asc\"><span class=\"kw2\">Asc</span></a><span class=\"br0\">(</span>sChar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>sChar <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=inputbox+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter a ASCII code\"</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"ASCII code \"</span> <span class=\"sy0\">&amp;</span> sChar <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" represents \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://gambasdoc.org/help/lang/chr\"><span class=\"kw2\">Chr</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/val\"><span class=\"kw2\">Val</span></a><span class=\"br0\">(</span>sChar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 5, "block": "<pre class=\"text highlighted_source\"># Code must be in 0 .. 255.<br/>CharInt(65);<br/># 'A'<br/>IntChar('Z');<br/># 90</pre>"}, {"lang": "Go", "loc": 2, "block": "<pre class=\"go highlighted_source\">fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">'a'</span><span class=\"sy1\">)</span> <span class=\"co1\">// prints \"97\"</span><br/>fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">'\u03c0'</span><span class=\"sy1\">)</span> <span class=\"co1\">// prints \"960\"</span></pre>"}, {"lang": "Golfscript", "loc": 1, "block": "<pre class=\"text highlighted_source\">97[]+''+p</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\">printf <span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">(</span><span class=\"st0\">'a'</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20char\"><span class=\"kw4\">char</span></a><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a><span class=\"br0\">)</span><br/>printf <span class=\"br0\">(</span><span class=\"st0\">\"%c<span class=\"es0\">\\n</span>\"</span>, <span class=\"nu0\">97</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>ord <span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"97\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>chr <span class=\"nu0\">97</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"'a'\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>ord <span class=\"st0\">'\u03c0'</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"960\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>chr <span class=\"nu0\">960</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"'\\960'\"</span></pre>"}, {"lang": "HicEst", "loc": 1, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> <span class=\"kw1\">ICHAR</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span></pre>"}, {"lang": "i", "loc": 4, "block": "<pre class=\"text highlighted_source\">software {<br/>\tprint(number('a'))<br/>\tprint(text([97]))<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">*</span>arglist <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> L <span class=\"sy1\">:=</span> arglist <span class=\"kw1\">else</span> L <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">97</span><span class=\"sy1\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>L <span class=\"kw1\">do</span> <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> <span class=\"st0\">\" ==&gt; \"</span><span class=\"sy1\">,</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">ord</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span>  <span class=\"co1\"># char produces a character, ord produces a number</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "HolyC", "loc": 2, "block": "<pre class=\"text highlighted_source\">Print(\"%d\\n\", 'a'); /* prints \"97\" */<br/>Print(\"%c\\n\", 97);  /* prints \"a\" */</pre>"}, {"lang": "Io", "loc": 5, "block": "<pre class=\"io highlighted_source\"><span class=\"st0\">\"a\"</span> at<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> println       <span class=\"co1\">// --&gt; 97</span><br/><span class=\"nu0\">97</span> asCharacter println  <span class=\"co1\">// --&gt; a</span><br/>\u00a0<br/><span class=\"st0\">\"\u03c0\"</span> at<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> println       <span class=\"co1\">// --&gt; 960</span><br/><span class=\"nu0\">960</span> asCharacter println <span class=\"co1\">// --&gt; \u03c0</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">4</span> u: <span class=\"nu0\">97</span> <span class=\"nu0\">98</span> <span class=\"nu0\">99</span> <span class=\"nu0\">9786</span><br/>abc\u263a<br/>\u00a0<br/>   <span class=\"nu0\">3</span> u: <span class=\"nu0\">7</span> u: <span class=\"st_h\">'abc\u263a'</span><br/><span class=\"nu0\">97</span> <span class=\"nu0\">98</span> <span class=\"nu0\">99</span> <span class=\"nu0\">9786</span></pre>"}, {"lang": "Java", "loc": 6, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Foo <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"97\"</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"a\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\">console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span>.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"97\"</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"a\"</span></pre>"}, {"lang": "Joy", "loc": 2, "block": "<pre class=\"text highlighted_source\">'a ord.<br/>97 chr.</pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"a\" | explode  # =&gt; [ 97 ]<br/>[97] | implode # =&gt; \"a\"</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">println(Int('a'))<br/>println(Char(97))</pre>"}, {"lang": "K", "loc": 5, "block": "<pre class=\"text highlighted_source\">  _ic \"abcABC\"<br/>97 98 99 65 66 67<br/>\u00a0<br/>  _ci 97 98 99 65 66 67<br/>\"abcABC\"</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$c  &lt;-&gt; $i\"</span><span class=\"br0\">)</span><br/>    i +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    c <span class=\"sy0\">=</span> i.<span class=\"me1\">toChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$i &lt;-&gt; $c\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 9, "block": "<pre class=\"text highlighted_source\">: CHAR  \"!\\\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;<a class=\"__cf_email__\" data-cfemail=\"023d42434041464744454a4b48494e4f4c4d52535051565754555a5b58\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\" comb<br/>        '\\\\ comb -1 remove append \"]^_`abcdefghijklmnopqrstuvwxyz{|}~\" comb append\u00a0;<br/>: CODE  95 iota 33 +\u00a0;               \u00a0: comb  \"\" split\u00a0;<br/>: extract'  rot 1 compress index subscript expand drop\u00a0;<br/>: chr  CHAR CODE extract'\u00a0;<br/>: ord  CODE CHAR extract'\u00a0;<br/>\u00a0<br/>'a ord .    # 97<br/>97 chr .    # a</pre>"}, {"lang": "Lang5", "loc": 9, "block": "<pre class=\"text highlighted_source\">: CHAR  \"!\\\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;<a class=\"__cf_email__\" data-cfemail=\"023d42434041464744454a4b48494e4f4c4d52535051565754555a5b58\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[\" comb<br/>        '\\\\ comb -1 remove append \"]^_`abcdefghijklmnopqrstuvwxyz{|}~\" comb append\u00a0;<br/>: CODE  95 iota 33 +\u00a0;               \u00a0: comb  \"\" split\u00a0;<br/>: extract'  rot 1 compress index subscript expand drop\u00a0;<br/>: chr  CHAR CODE extract'\u00a0;<br/>: ord  CODE CHAR extract'\u00a0;<br/>\u00a0<br/>'a ord .    # 97<br/>97 chr .    # a</pre>"}, {"lang": "Lasso", "loc": 4, "block": "<pre class=\"text highlighted_source\">'a'-&gt;integer<br/>'A'-&gt;integer<br/>97-&gt;bytes<br/>65-&gt;bytes</pre>"}, {"lang": "LFE", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">68</span> <span class=\"nu0\">111</span> <span class=\"nu0\">110</span> <span class=\"nu0\">39</span> <span class=\"nu0\">116</span> <span class=\"nu0\">32</span> <span class=\"nu0\">80</span> <span class=\"nu0\">97</span> <span class=\"nu0\">110</span> <span class=\"nu0\">105</span> <span class=\"nu0\">99</span> <span class=\"nu0\">46</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"Don't Panic.\"</span></pre>"}, {"lang": "Liberty BASIC", "loc": 4, "block": "<pre class=\"lb highlighted_source\">charCode <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><br/>char$ <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span>charCode<span class=\"br0\">)</span> <span class=\"co1\">'prints a</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span>char$<span class=\"br0\">)</span> <span class=\"co1\">'prints 97</span></pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">-- returns Unicode code point (=ASCII code for ASCII characters) for character<br/>put chartonum(\"a\")<br/>-- 97<br/>\u00a0<br/>-- returns character for Unicode code point (=ASCII code for ASCII characters)<br/>put numtochar(934)<br/>-- \u03a6</pre>"}, {"lang": "Little", "loc": 3, "block": "<pre class=\"c highlighted_source\"><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Unicode value of \u00f1 is ${scan(\"</span>\u00f1<span class=\"st0\">\", \"</span><span class=\"sy0\">%</span>c<span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The code 241 in Unicode is the letter:\u00a0%c.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">241</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0</pre>"}, {"lang": "LiveCode", "loc": 2, "block": "<pre class=\"text highlighted_source\">Since 7.0.x works with unicode<br/>put charToNum(\"\uf8ff\") &amp;&amp; numToChar(240)</pre>"}, {"lang": "Logo", "loc": 2, "block": "<pre class=\"text highlighted_source\">print ascii \"a   \u00a0; 97<br/>print char 97    \u00a0; a</pre>"}, {"lang": "Logtalk", "loc": 4, "block": "<pre class=\"logtalk highlighted_source\">|<span class=\"sy1\">?-</span> <span class=\"kw4\">char_code</span>(<span class=\"re0\">Char</span>, <span class=\"nu0\">97</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Char</span>).<br/>a<br/><span class=\"re0\">Char</span> <span class=\"sy1\">=</span> a<br/>yes</pre>"}, {"lang": "Lua", "loc": 2, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.byte</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"97\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.char</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"a\"</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\\\ ANSI<br/>Print Asc(\"a\")<br/>Print Chr$(Asc(\"a\"))<br/>\\\\ Utf16-Le<br/>Print ChrCode(\"a\")<br/>Print ChrCode$(ChrCode(\"a\"))<br/>\u00a0<br/>\\\\ (,) is an empty array.<br/>\u00a0<br/>Function Codes(a$) {<br/>      If Len(A$)=0 then =(,)\u00a0: Exit          <br/>      Buffer Mem as byte*Len(a$)<br/>      \\\\ Str$(string) return one byte character<br/>      Return Mem, 0:=Str$(a$)<br/>           Inventory Codes<br/>      For i=0 to len(Mem)-1<br/>      Append Codes, i:=Eval(Mem, i)<br/>      Next i<br/>      =Codes<br/>}<br/>Print Codes(\"abcd\")<br/>\\\\ 97 98 99 100<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt; use StringTools in Ord( \"A\" ); Char( 65 ) end;<br/>                                   65<br/>\u00a0<br/>                                  \"A\"<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">ToCharacterCode[\"abcd\"]<br/>FromCharacterCode[{97}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">character = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span>asciiNumber<span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">ascii(65);<br/>\"A\"<br/>\u00a0<br/>cint(\"A\");<br/>65</pre>"}, {"lang": "Metafont", "loc": 14, "block": "<pre class=\"text highlighted_source\">message \"enter a letter: \";<br/>string a;<br/>a\u00a0:= readstring;<br/>message decimal (ASCII a);\u00a0% writes the decimal number of the first character<br/>                          \u00a0% of the string a<br/>message \"enter a number: \";<br/>num\u00a0:= scantokens readstring;<br/>message char num;  \u00a0% num can be anything between 0 and 255; what will be seen<br/>                   \u00a0% on output depends on the encoding used by the \"terminal\"; e.g.<br/>                   \u00a0% any code beyond 127 when UTF-8 encoding is in use will give<br/>                   \u00a0% a bad encoding; e.g. to see correctly an \"\u00e8\", we should write<br/>message char10; \u00a0% (this add a newline...)<br/>message char hex\"c3\" &amp; char hex\"a8\"; \u00a0% since C3 A8 is the UTF-8 encoding for \"\u00e8\"<br/>end</pre>"}, {"lang": "Microsoft Small Basic", "loc": 2, "block": "<pre class=\"vb highlighted_source\">TextWindow.WriteLine(<span class=\"st0\">\"The ascii code for 'A' is: \"</span> + Text.GetCharacterCode(<span class=\"st0\">\"A\"</span>) + <span class=\"st0\">\".\"</span>) <br/>TextWindow.WriteLine(<span class=\"st0\">\"The character for '65' is: \"</span> + Text.GetCharacter(65) + <span class=\"st0\">\".\"</span>)</pre>"}, {"lang": "Modula-2", "loc": 18, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> asc;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span>  InOut;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>     letter          <span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>        ascii           <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  letter <span class=\"sy0\">:=</span> <span class=\"st_h\">'a'</span>;<br/>  InOut.Write <span class=\"br0\">(</span>letter<span class=\"br0\">)</span>;<br/>  ascii <span class=\"sy0\">:=</span> <span class=\"kw3\">ORD</span> <span class=\"br0\">(</span>letter<span class=\"br0\">)</span>;<br/>  InOut.Write <span class=\"br0\">(</span>11C<span class=\"br0\">)</span>;            <span class=\"coMULTI\">(*  ASCII TAB   *)</span><br/>  InOut.WriteCard <span class=\"br0\">(</span>ascii<span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>;<br/>  ascii <span class=\"sy0\">:=</span> ascii <span class=\"sy0\">-</span> <span class=\"kw3\">ORD</span> <span class=\"br0\">(</span><span class=\"st_h\">'0'</span><span class=\"br0\">)</span>;<br/>  InOut.Write <span class=\"br0\">(</span>11C<span class=\"br0\">)</span>;            <span class=\"coMULTI\">(*  ASCII TAB   *)</span><br/>  InOut.Write <span class=\"br0\">(</span><span class=\"kw3\">CHR</span> <span class=\"br0\">(</span>ascii<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  InOut.WriteLn<br/><span class=\"kw1\">END</span> asc.</pre>"}, {"lang": "Modula-3", "loc": 2, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span> <span class=\"coMULTI\">(* Returns 97 *)</span><br/><span class=\"kw3\">VAL</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"sy0\">,</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>; <span class=\"coMULTI\">(* Returns 'a' *)</span></pre>"}, {"lang": "MUMPS", "loc": 2, "block": "<pre class=\"text highlighted_source\">WRITE $ASCII(\"M\")<br/>WRITE $CHAR(77)</pre>"}, {"lang": "NESL", "loc": 3, "block": "<pre class=\"text highlighted_source\">char_code(`a);<br/>\u00a0<br/>it = 97\u00a0: int</pre>"}, {"lang": "NetRexx", "loc": 23, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"co1\">-- create some sample data: character, hex and unicode</span><br/>  samp = <span class=\"st0\">' '</span> <span class=\"sy0\">||</span> <span class=\"st0\">'a'</span>.<span class=\"kw6\">sequence</span><span class=\"br0\">(</span><span class=\"st0\">'e'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'$'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'\\xa2'</span>.<span class=\"kw6\">sequence</span><span class=\"br0\">(</span><span class=\"st0\">'\\xa5'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'\\u20a0'</span>.<span class=\"kw6\">sequence</span><span class=\"br0\">(</span><span class=\"st0\">'\\u20b5'</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">-- use the C2D C2X D2C and X2C built-in functions</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"'\"</span>samp<span class=\"st0\">\"'\"</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'   | Chr    C2D  C2X D2C X2C'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'---+ --- ------ ---- --- ---'</span><br/>  <span class=\"kw1\">loop</span> ci = <span class=\"nu0\">1</span> to samp.<span class=\"me0\">length</span><br/>    cc = samp.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>ci, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    cd = cc.<span class=\"kw6\">c2d</span> <span class=\"co1\">-- char to decimal</span><br/>    cx = cc.<span class=\"kw6\">c2x</span> <span class=\"co1\">-- char to hexadecimal</span><br/>    dc = cd.<span class=\"kw6\">d2c</span> <span class=\"co1\">-- decimal to char</span><br/>    xc = cx.<span class=\"kw6\">x2c</span> <span class=\"co1\">-- hexadecimal to char</span><br/>    <span class=\"kw1\">say</span> ci.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">\"| '\"</span>cc<span class=\"st0\">\"'\"</span> cd.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> cx.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"'\"</span>dc<span class=\"st0\">\"' '\"</span>xc<span class=\"st0\">\"'\"</span><br/>    <span class=\"kw3\">end</span> ci<br/>  <span class=\"kw1\">return</span></pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">echo ord('a') # echoes 97<br/>echo chr(97) # echoes a<br/>\u00a0<br/>import unicode<br/>\u00a0<br/>echo int(\"\u03c0\".runeAt(0)) # echoes 960<br/>echo Rune(960) # echoes \u03c0</pre>"}, {"lang": "Oberon-2", "loc": 11, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">MODULE</span> Ascii;<br/><span class=\"kw1\">IMPORT</span> Out;<br/><span class=\"kw1\">VAR</span><br/>\tc<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\td<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tc <span class=\"sy0\">:=</span> <span class=\"kw3\">CHR</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span>;<br/>\td <span class=\"sy0\">:=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>;<br/>\tOut.<span class=\"me1\">Int</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\tOut.<span class=\"me1\">Char</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Ascii.</pre>"}, {"lang": "Objeck", "loc": 2, "block": "<pre class=\"objeck highlighted_source\">'a'<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">97</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Char</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\\n\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"sy0\">'</span>a<span class=\"sy0\">'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">(* prints \"97\" *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%c\\n\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int\"><span class=\"kw3\">char_of_int</span></a> <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">(* prints \"a\" *)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">'a' println</pre>"}, {"lang": "OpenEdge/Progress", "loc": 4, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">MESSAGE</span><br/>   <span class=\"kw3\">CHR</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span> <span class=\"kw1\">SKIP</span><br/>   <span class=\"kw3\">ASC</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 2, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>show <span class=\"re3\">&amp;a</span><span class=\"br0\">}</span>  <span class=\"co1\">%% prints \"97\"</span><br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">[</span>97<span class=\"br0\">]</span><span class=\"br0\">}</span>  <span class=\"co1\">%% prints \"a\"</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw1\">Strchr</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">72</span><span class=\"sy0\">,</span> <span class=\"nu1\">101</span><span class=\"sy0\">,</span> <span class=\"nu1\">108</span><span class=\"sy0\">,</span> <span class=\"nu1\">108</span><span class=\"sy0\">,</span> <span class=\"nu1\">111</span><span class=\"sy0\">,</span> <span class=\"nu1\">44</span><span class=\"sy0\">,</span> <span class=\"nu1\">32</span><span class=\"sy0\">,</span> <span class=\"nu1\">119</span><span class=\"sy0\">,</span> <span class=\"nu1\">111</span><span class=\"sy0\">,</span> <span class=\"nu1\">114</span><span class=\"sy0\">,</span> <span class=\"nu1\">108</span><span class=\"sy0\">,</span> <span class=\"nu1\">100</span><span class=\"sy0\">,</span> <span class=\"nu1\">33</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 2, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"97\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># prints \"a\"</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> ord<span class=\"br0\">(</span><span class=\"st_h\">'\ud869\udea5'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'0x%04x'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> chr<span class=\"br0\">(</span>0x2a6a5<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">?'A'<br/>puts(1,65)</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"97\"</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"a\"</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">: (char \"a\")<br/>-&gt; 97<br/>: (char \"\u5b57\")<br/>-&gt; 23383<br/>: (char 23383)<br/>-&gt; \"\u5b57\"<br/>: (chop \"\u6587\u5b57\")<br/>-&gt; (\"\u6587\" \"\u5b57\")<br/>: (mapcar char @)<br/>-&gt; (25991 23383)</pre>"}, {"lang": "PL/I", "loc": 5, "block": "<pre class=\"text highlighted_source\">declare 1 u union,<br/>          2 c character (1),<br/>          2 i fixed binary (8) unsigned;<br/>c = 'a'; put skip list (i); /* prints 97  */<br/>i = 97;  put skip list (c); /* prints 'a' */</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$char</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span> <span class=\"st0\">'a'</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre>?- char_code(a, X).\nX = 97.\n\n?- char_code(X, 97).\nX = a.</pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;Results are the same when compiled for Ascii or Unicode</span><br/>  charCode.c <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><br/>  Char.s <span class=\"sy0\">=</span> <span class=\"st0\">\"a\"</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>charCode<span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">;prints a</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">Asc</span><span class=\"br0\">(</span>Char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;prints 97</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">print</span> <span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span> <span class=\"co1\"># prints \"97\"</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span>  <span class=\"co1\"># prints \"a\"</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">ascii &lt;- as.integer(charToRaw(\"hello world\")); ascii<br/>text &lt;- rawToChar(as.raw(ascii)); text</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (code ch)<br/>  (printf \"The unicode number for ~s is ~a\\n\" ch (char-&gt;integer ch)))<br/>(code #\\a)<br/>(code #\\\u03bb)<br/>\u00a0<br/>(define (char n)<br/>  (printf \"The unicode number ~a is the character ~s\\n\" n (integer-&gt;char n)))<br/>(char 97)<br/>(char 955)</pre>"}, {"lang": "RapidQ", "loc": 4, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Print</span> Chr$(97)<br/><span class=\"kw4\">Print</span> Asc(<span class=\"st0\">\"a\"</span>)<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 6, "block": "<pre class=\"text highlighted_source\">Red []<br/>print to-integer first \"a\"\u00a0;; -&gt; 97<br/>print to-integer #\"a\"     \u00a0;; -&gt; 97<br/>print to-binary \"a\"       \u00a0;; -&gt; #{61} <br/>print to-char 97          \u00a0;; -&gt; a <br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">'c putc</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays a char's ASCII code/value (or EBCDIC if run on an EBCDIC system)*/</span><br/>yyy= <span class=\"st0\">'c'</span>                               <span class=\"coMULTI\">/*assign a lowercase       c        to   YYY.    */</span><br/>yyy= <span class=\"st0\">\"c\"</span>                               <span class=\"coMULTI\">/* (same as above)                               */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'from char, yyy code='</span> yyy<br/>\u00a0<br/>yyy= <span class=\"st0\">'63'</span>x                             <span class=\"coMULTI\">/*assign hexadecimal      63        to   YYY.    */</span><br/>yyy= <span class=\"st0\">'63'</span>X                             <span class=\"coMULTI\">/* (same as above)                               */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'from  hex, yyy code='</span> yyy<br/>\u00a0<br/>yyy= <span class=\"kw6\">x2c</span><span class=\"br0\">(</span><span class=\"nu0\">63</span><span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*assign hexadecimal      63        to   YYY.    */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'from  hex, yyy code='</span> yyy<br/>\u00a0<br/>yyy= <span class=\"st0\">'01100011'</span>b                       <span class=\"coMULTI\">/*assign a binary      0011 0100    to   YYY.    */</span><br/>yyy= <span class=\"st0\">'0110 0011'</span>b                      <span class=\"coMULTI\">/* (same as above)                               */</span><br/>yyy= <span class=\"st0\">'0110 0011'</span>B                      <span class=\"coMULTI\">/*   \"   \"    \"                                  */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'from  bin, yyy code='</span> yyy<br/>\u00a0<br/>yyy= <span class=\"kw6\">d2c</span><span class=\"br0\">(</span><span class=\"nu0\">99</span><span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*assign decimal code     99        to   YYY.    */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'from  dec, yyy code='</span> yyy<br/>\u00a0<br/><span class=\"kw1\">say</span>                                    <span class=\"coMULTI\">/*     [\u2193]    displays the value of  YYY  in \u00b7\u00b7\u00b7 */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'char code: '</span>   yyy               <span class=\"coMULTI\">/* character code  (as an 8-bit ASCII character).*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">' hex code: '</span>   <span class=\"kw6\">c2x</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*    hexadecimal                                */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">' dec code: '</span>   <span class=\"kw6\">c2d</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span>          <span class=\"coMULTI\">/*        decimal                                */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">' bin code: '</span>   <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">c2x</span><span class=\"br0\">(</span>yyy<span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*         binary  (as a bit string)             */</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're all done with display*/</span></pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see ascii(\"a\") + nl<br/>see char(97) + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\"><span class=\"sy0\">&gt;</span>\u00a0?a<br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">97</span><br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"nu0\">97</span><br/><span class=\"sy0\">&gt;</span> <span class=\"nu0\">97</span>.<span class=\"me1\">chr</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"a\"</span></pre>"}, {"lang": "Run BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">print chr$(97) 'prints a<br/>print asc(\"a\") 'prints 97</pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">use std::char::from_u32;<br/>\u00a0<br/>fn main() {<br/>    //ascii char<br/>    println!(\"{}\", 'a' as u8);<br/>    println!(\"{}\", 97 as char);<br/>\u00a0<br/>    //unicode char<br/>    println!(\"{}\", '\u03c0' as u32);<br/>    println!(\"{}\", from_u32(960).unwrap());<br/>}</pre>"}, {"lang": "Sather", "loc": 7, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    #OUT + 'a'.int + \"\\n\"; -- or<br/>    #OUT + 'a'.ascii_int + \"\\n\";<br/>    #OUT + CHAR::from_ascii_int(97) + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> <span class=\"st0\">'a'</span> toInt<br/>res2<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">97</span><br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <span class=\"nu0\">97</span> toChar<br/>res3<span class=\"sy0\">:</span> Char <span class=\"sy0\">=</span> a<br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <span class=\"st0\">'<span class=\"es3\">\\u0061</span>'</span><br/>res4<span class=\"sy0\">:</span> Char <span class=\"sy0\">=</span> a<br/>\u00a0<br/>scala<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"<span class=\"es3\">\\uD869</span><span class=\"es3\">\\uDEA5</span>\"</span><br/>res5<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> \ud869\udea5</pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>char<span class=\"sy0\">-&gt;</span>integer #\\a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \"97\"</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>integer<span class=\"sy0\">-&gt;</span>char <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span> <span class=\"co1\">; prints \"a\"</span></pre>"}, {"lang": "Seed7", "loc": 2, "block": "<pre class=\"text highlighted_source\">writeln(ord('a'));<br/>writeln(chr(97));</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"st0\">'a'</span>.<span class=\"me1\">ord</span>;    <span class=\"co1\"># =&gt; 97</span><br/>say <span class=\"nu0\">97</span>.<span class=\"me1\">chr</span>;     <span class=\"co1\"># =&gt; 'a'</span></pre>"}, {"lang": "SequenceL", "loc": 4, "block": "<pre class=\"text highlighted_source\">cmd:&gt;asciiToInt('a')<br/>97<br/>cmd:&gt;intToAscii(97)<br/>'a'</pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">$a code.<br/>97 as: String Character.</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span>$a asInteger<span class=\"br0\">)</span> displayNl. <span class=\"coMULTI\">\"output 97\"</span><br/><span class=\"br0\">(</span><span class=\"re0\">Character</span> value: <span class=\"re5\">97</span><span class=\"br0\">)</span> displayNl. <span class=\"coMULTI\">\"output a\"</span></pre>"}, {"lang": "SNOBOL4", "loc": 14, "block": "<pre class=\"text highlighted_source\">        define('chr(n)')\u00a0:(chr_end)<br/>chr     &amp;alphabet tab(n) len(1) . chr\u00a0:s(return)f(freturn)<br/>chr_end<br/>\u00a0<br/>        define('asc(str)c')\u00a0:(asc_end)<br/>asc     str len(1) . c<br/>        &amp;alphabet break(c) @asc\u00a0:s(return)f(freturn)<br/>asc_end<br/>\u00a0<br/>*       # Test and display<br/>        output = char(65)\u00a0;* Built-in<br/>        output = chr(65)<br/>        output = asc('A')<br/>end</pre>"}, {"lang": "SPL", "loc": 4, "block": "<pre class=\"text highlighted_source\">x = #.array(\"a\")<br/>#.output(\"a -&gt; \",x[1],\" \",x[2])<br/>x = [98,0]<br/>#.output(\"98 0 -&gt; \",#.str(x))</pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">print (Int.toString (ord #\"a\") ^ \"\\n\"); (* prints \"97\" *)<br/>print (Char.toString (chr 97) ^ \"\\n\"); (* prints \"a\" *)</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">: ascii(\"\u03b1\")<br/>         1     2<br/>    +-------------+<br/>  1 |  206   177  |<br/>    +-------------+</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">let c1: UnicodeScalar = \"a\"<br/>println(c1.value) // prints \"97\"<br/>let c2: UnicodeScalar = \"\u03c0\"<br/>println(c2.value) // prints \"960\"</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># ASCII</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"st0\">\"a\"</span> <span class=\"sy0\">%</span>c<span class=\"br0\">]</span>   <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 97</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"nu0\">97</span><span class=\"br0\">]</span>  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; a</span><br/><span class=\"co1\"># Unicode is the same</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"st0\">\"\u03c0\"</span> <span class=\"sy0\">%</span>c<span class=\"br0\">]</span>   <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 960</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"nu0\">960</span><span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; \u03c0</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u2192Str1<br/>Disp inString(Str1,\"A<br/>Input \"CODE? \",A<br/>Disp sub(Str1,A,1</pre>"}, {"lang": "TI-89 BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">Prgm<br/>  Local k, s<br/>  ClrIO<br/>  Loop<br/>    Disp \"Press a key, or ON to exit.\"<br/>    getKey() \u00a9 clear buffer<br/>    0 \u2192 k\u00a0: While k = 0\u00a0: getKey() \u2192 k\u00a0: EndWhile<br/>    ClrIO<br/>    If k \u2265 256 Then<br/>      Disp \"Not a character.\"<br/>      Disp \"Code: \" &amp; string(k)<br/>    Else<br/>\u00a0<br/>      char(k) \u2192 s                           \u00a9<br/>      \u00a9 char() and ord() are inverses.      \u00a9<br/>      Disp \"Character: \" &amp; s                \u00a9<br/>      Disp \"Code: \" &amp; string(ord(s))        \u00a9<br/>\u00a0<br/>    EndIf<br/>  EndLoop<br/>EndPrgm</pre>"}, {"lang": "Trith", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"a\" ord print<br/>97 chr print</pre>"}, {"lang": "TUSCRIPT", "loc": 3, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>SET character =\"a\", code=DECODE (character,byte)<br/>PRINT character,\"=\",code</pre>"}, {"lang": "uBasic/4tH", "loc": 1, "block": "<pre class=\"text highlighted_source\">z = ORD(\"a\")\u00a0: PRINT CHR(z)    ' Prints \"a\"</pre>"}, {"lang": "Ursa", "loc": 4, "block": "<pre class=\"text highlighted_source\"># outputs the character value for 'a'<br/>out (ord \"a\") endl console<br/># outputs the character 'a' given its value<br/>out (chr 97) endl console</pre>"}, {"lang": "Ursala", "loc": 9, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>chr = -: num characters<br/>asc = -:@rlXS num characters<br/>\u00a0<br/>#cast\u00a0%cnX<br/>\u00a0<br/>test = (chr97,asc`a)</pre>"}, {"lang": "VBA", "loc": 2, "block": "<pre class=\"text highlighted_source\">Debug.Print Chr(97) 'Prints a<br/>Debug.Print [Code(\"a\")] ' Prints 97</pre>"}, {"lang": "VBScript", "loc": 7, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'prints a<br/></span>WScript.StdOut.WriteLine Chr(97)<br/>\u00a0<br/><span class=\"co1\">'prints 97<br/></span>WScript.StdOut.WriteLine Asc(<span class=\"st0\">\"a\"</span>)<br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 6, "block": "<pre class=\"vim highlighted_source\"><span class=\"co1\">\"encoding is set to utf-8</span><br/><span class=\"kw1\">echo</span> <span class=\"kw3\">char2nr</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"co1\"><br/>\"Prints 97</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"kw3\">nr2char</span><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"co1\"><br/>\"Prints a</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 2, "block": "<pre class=\"vbnet highlighted_source\">Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=CHR+site:msdn.microsoft.com\"><span class=\"kw7\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">'Prints a</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=ASC+site:msdn.microsoft.com\"><span class=\"kw7\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">'Prints 97</span></pre>"}, {"lang": "XLISP", "loc": 6, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>INTEGER<span class=\"sy0\">-&gt;</span>CHAR <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/>\u00a0<br/>#\\a<br/><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>CHAR<span class=\"sy0\">-&gt;</span>INTEGER #\\a<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">97</span></pre>"}, {"lang": "XPL0", "loc": 2, "block": "<pre class=\"text highlighted_source\">IntOut(0, ^a);  \\(Integer Out)  displays \"97\" on the console (device 0)<br/>ChOut(0, 97);   \\(Character Out) displays \"a\" on the console (device 0)</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\"> \"a\".toAsc()  //--&gt;97<br/>(97).toChar() //--&gt;\"a\"</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 2, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">CHR</span>$ <span class=\"nu0\">97</span>: <span class=\"co3\">REM prints a</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">CODE</span> <span class=\"st0\">\"a\"</span>: <span class=\"co3\">REM prints 97</span></pre>"}]}