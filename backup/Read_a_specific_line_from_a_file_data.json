{"task": "Read_a_specific_line_from_a_file", "blocks": [{"lang": "Ada", "loc": 29, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Rosetta_Read <span class=\"kw1\">is</span><br/>   File\u00a0: File_Type;<br/><span class=\"kw1\">begin</span><br/>   Open <span class=\"br0\">(</span>File =&gt; File,<br/>         Mode =&gt; In_File,<br/>         Name =&gt; <span class=\"st0\">\"rosetta_read.adb\"</span><span class=\"br0\">)</span>;<br/>   Set_Line <span class=\"br0\">(</span>File, To =&gt; <span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw1\">declare</span><br/>      Line_7\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= Get_Line <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Line_7'Length = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Line 7 is empty.\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Put_Line <span class=\"br0\">(</span>Line_7<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span>;<br/>\u00a0<br/>   Close <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/><span class=\"kw1\">exception</span><br/>   <span class=\"kw3\">when</span> End_Error =&gt;<br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"The file contains fewer than 7 lines.\"</span><span class=\"br0\">)</span>;<br/>      Close <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">when</span> Storage_Error =&gt;<br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Line 7 is too long to load.\"</span><span class=\"br0\">)</span>;<br/>      Close <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Rosetta_Read;</pre>"}, {"lang": "Aime", "loc": 26, "block": "<pre class=\"text highlighted_source\">void<br/>read_line(text &amp;line, text path, integer n)<br/>{<br/>    file f;<br/>\u00a0<br/>    f.affix(path);<br/>\u00a0<br/>    call_n(n, f_slip, f);<br/>\u00a0<br/>    f.line(line);<br/>}<br/>\u00a0<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    if (1 &lt; argc()) {<br/>        text line;<br/>\u00a0<br/>        read_line(line, argv(1), 6);<br/>\u00a0<br/>        o_(\"7th line is:\\n\", line, \"\\n\");<br/>    }<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 91, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># reads the line with number \"number\" (counting from 1)       #</span><br/><span class=\"coMULTI\"># from the file named \"file name\" and returns the text of the #</span><br/><span class=\"coMULTI\"># in \"line\". If an error occurs, the result is FALSE and a    #</span><br/><span class=\"coMULTI\"># message is returned in \"err\". If no error occurs, TRUE is   #</span><br/><span class=\"coMULTI\"># returned                                                    #</span><br/><span class=\"kw4\">PROC</span> read specific line <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span>     file name<br/>                          <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>        number        <span class=\"coMULTI\"># line 7 #</span><br/>                          <span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> line<br/>                          <span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> err<br/>                          <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"kw6\">FILE</span>    input file<span class=\"sy1\">;</span><br/>\u00a0<br/>    line <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>    err  <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">IF</span>  <span class=\"kw22\">open</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> file name<span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span> <span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 0<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># failed to open the file #</span><br/>        err <span class=\"sy1\">:=</span> <span class=\"st0\">\"Unable to open \"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> file name <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>        <span class=\"kw7\">FALSE</span><br/>\u00a0<br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># file opened OK #</span><br/>\u00a0<br/>        <span class=\"kw3\">BOOL</span> at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># set the EOF handler for the file #</span><br/>        <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span> input file<br/>                           <span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>                             <span class=\"kw2\">BEGIN</span><br/>                                 <span class=\"coMULTI\"># note that we reached EOF on the #</span><br/>                                 <span class=\"coMULTI\"># latest read #</span><br/>                                 at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>\u00a0<br/>                                 <span class=\"coMULTI\"># return TRUE so processing can continue #</span><br/>                                 <span class=\"kw7\">TRUE</span><br/>                             <span class=\"kw2\">END</span><br/>                           <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>         <span class=\"kw3\">INT</span>    line number <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">STRING</span> text<span class=\"sy1\">;</span><br/>\u00a0<br/>         <span class=\"kw2\">WHILE</span> line number <span class=\"sy1\">&lt;</span> number<br/>           <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> at eof<br/>         <span class=\"kw2\">DO</span><br/>\u00a0<br/>             get<span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> text<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             line number <span class=\"sy1\">+:=</span> 1<br/>\u00a0<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>         <span class=\"coMULTI\"># close the file #</span><br/>         <span class=\"kw22\">close</span><span class=\"br0\">(</span> input file <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>         <span class=\"coMULTI\"># return the line or an error message depending on whether #</span><br/>         <span class=\"coMULTI\"># we got a line with the required number or not            #</span><br/>         <span class=\"kw2\">IF</span> line number <span class=\"sy1\">=</span> number<br/>         <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># got the required line #</span><br/>             line <span class=\"sy1\">:=</span> text<span class=\"sy1\">;</span><br/>             <span class=\"kw7\">TRUE</span><br/>         <span class=\"kw2\">ELSE</span><br/>             <span class=\"coMULTI\"># not enough lines in the file #</span><br/>             err  <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> file name <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\" is too short\"</span><span class=\"sy1\">;</span><br/>             <span class=\"kw7\">FALSE</span><br/>         <span class=\"kw2\">FI</span><br/>\u00a0<br/>    <span class=\"kw2\">FI</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># read specific line #</span><br/>\u00a0<br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"coMULTI\"># read the seventh line of this source and print it #</span><br/>    <span class=\"coMULTI\"># (or an error message if we can't)                 #</span><br/>\u00a0<br/>    <span class=\"kw3\">STRING</span> line<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> err<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">IF</span> read specific line<span class=\"br0\">(</span> <span class=\"st0\">\"read-specific-line.a68\"</span><span class=\"sy1\">,</span> 7<span class=\"sy1\">,</span> line<span class=\"sy1\">,</span> err <span class=\"br0\">)</span><br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># got the line #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"line seven is: \"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> line <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># got an error #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"unable to read line: \"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> err <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/FileReadLine.htm\"><span class=\"kw3\">FileReadLine</span></a><span class=\"sy0\">,</span> OutputVar<span class=\"sy0\">,</span> filename<span class=\"sy0\">.</span>txt<span class=\"sy0\">,</span> <span class=\"nu0\">7</span><br/><span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><br/>   <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> There was an error reading the 7th line of the file</pre>"}, {"lang": "AWK", "loc": 4, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"co1\">#usage: readnthline.awk -v lineno=6 filename</span><br/><span class=\"kw3\">FNR</span><span class=\"sy2\">==</span>lineno <span class=\"br0\">{</span> storedline=<span class=\"re0\">$0</span>; found<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>found<span class=\"sy2\">&lt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> <span class=\"st0\">\"ERROR: Line\"</span>,lineno,<span class=\"st0\">\"not found\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 11, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"skip=6 tokens=*\" <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>file.txt<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> line7=<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>  <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> break<br/><span class=\"sy0\">)</span><br/>:<span class=\"re0\">break</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Line 7 is: <span class=\"sy0\">%</span><span class=\"re3\">line7</span><span class=\"sy0\">%</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      filepath$ = @lib$ + \"..\\licence.txt\"<br/>      requiredline% = 7<br/>\u00a0<br/>      file% = OPENIN(filepath$)<br/>      IF file%=0 ERROR 100, \"File could not be opened\"<br/>      FOR i% = 1 TO requiredline%<br/>        IF EOF#file% ERROR 100, \"File contains too few lines\"<br/>        INPUT #file%, text$<br/>      NEXT<br/>      CLOSE #file%<br/>\u00a0<br/>      IF ASCtext$=10 text$ = MID$(text$,2)<br/>      PRINT text$</pre>"}, {"lang": "C", "loc": 66, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/mman.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/stat.h&gt;</span><br/><span class=\"co2\">#include &lt;fcntl.h&gt;</span><br/><span class=\"co2\">#include &lt;err.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* following code assumes all file operations succeed. In practice,<br/> * return codes from open, close, fstat, mmap, munmap all need to be<br/> * checked for error.<br/>*/</span><br/><span class=\"kw4\">int</span> read_file_line<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>path<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> line_no<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> stat s<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">off_t</span> start <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> end <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> ln<span class=\"sy0\">,</span> fd<span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>line_no <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> start <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line_no <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\twarn<span class=\"br0\">(</span><span class=\"st0\">\"line_no too small\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* line_no starts at 1; less is error */</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tline_no<span class=\"sy0\">--;</span> <span class=\"coMULTI\">/* back to zero based, easier */</span><br/>\u00a0<br/>\tfd <span class=\"sy0\">=</span> open<span class=\"br0\">(</span>path<span class=\"sy0\">,</span> O_RDONLY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfstat<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Map the whole file.  If the file is huge (up to GBs), OS will swap<br/>\t * pages in and out, and because search for lines goes sequentially<br/>\t * and never accesses more than one page at a time, penalty is low.<br/>\t * If the file is HUGE, such that OS can't find an address space to map<br/>\t * it, we got a real problem.  In practice one would repeatedly map small<br/>\t * chunks, say 1MB at a time, and find the offsets of the line along the<br/>\t * way.  Although, if file is really so huge, the line itself can't be<br/>\t * guaranteed small enough to be \"stored in memory\", so there.<br/>\t */</span><br/>\tbuf <span class=\"sy0\">=</span> mmap<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> s.<span class=\"me1\">st_size</span><span class=\"sy0\">,</span> PROT_READ<span class=\"sy0\">,</span> MAP_PRIVATE<span class=\"sy0\">,</span> fd<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* optional; if the file is large, tell OS to read ahead */</span><br/>\tmadvise<span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> s.<span class=\"me1\">st_size</span><span class=\"sy0\">,</span> MADV_SEQUENTIAL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> ln <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s.<span class=\"me1\">st_size</span> <span class=\"sy0\">&amp;&amp;</span> ln <span class=\"sy0\">&lt;=</span> line_no<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>ln <span class=\"sy0\">==</span> line_no<span class=\"br0\">)</span> start <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ln <span class=\"sy0\">==</span> line_no <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> end <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&gt;=</span> s.<span class=\"me1\">st_size</span> <span class=\"sy0\">||</span> start <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\twarn<span class=\"br0\">(</span><span class=\"st0\">\"file does not have line\u00a0%d\"</span><span class=\"sy0\">,</span> line_no <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* \tdo something with the line here, like<br/>\t\twrite(STDOUT_FILENO, buf + start, end - start);<br/>\t\t\tor copy it out, or something<br/>\t\t*/</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tmunmap<span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> s.<span class=\"me1\">st_size</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tclose<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 34, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Which file do you want to look at\u00a0?<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> input <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span> , input <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> infile<span class=\"br0\">(</span> input.<span class=\"me1\">c_str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , std<span class=\"sy4\">::</span><span class=\"me2\">ios</span><span class=\"sy4\">::</span><span class=\"me2\">in</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> file<span class=\"br0\">(</span> input <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Which file line do you want to see\u00a0? ( Give a number &gt; 0 )\u00a0?<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span> , input <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> linenumber <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">stoi</span><span class=\"br0\">(</span> input <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> lines_read <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> line <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> infile.<span class=\"me1\">is_open</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span> infile <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t getline<span class=\"br0\">(</span> infile , line <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t lines_read<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span> lines_read <span class=\"sy1\">==</span> linenumber <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> line <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">break</span> <span class=\"sy4\">;</span> <br/>\t <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      infile.<span class=\"me1\">close</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> lines_read <span class=\"sy1\">&lt;</span> linenumber <span class=\"br0\">)</span> <br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"No \"</span> <span class=\"sy1\">&lt;&lt;</span> linenumber <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" lines in \"</span> <span class=\"sy1\">&lt;&lt;</span> file <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Could not find file \"</span> <span class=\"sy1\">&lt;&lt;</span> file <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> read<span class=\"sy0\">-</span>nth<span class=\"sy0\">-</span>line<br/>  <span class=\"st0\">\"Read line-number from the given text file. The first line has the number 1.\"</span><br/>  <span class=\"br0\">[</span>file line<span class=\"sy0\">-</span>number<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>rdr <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io<span class=\"sy0\">/</span>reader file<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>nth <span class=\"br0\">(</span><span class=\"kw1\">line-seq</span> rdr<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> line<span class=\"sy0\">-</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-nth-line <span class=\"br0\">(</span>file n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>line-number <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Read the nth line from a text file. The first line has the number 1\"</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>stream file<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line stream <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> line<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> line-number n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"file ~a is too short, just ~a, not ~a lines long\"</span><br/>                      file line-number n<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span>incf line-number<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> line <span class=\"br0\">(</span><span class=\"sy0\">=</span> line-number n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 44, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace GetLine<br/><span class=\"br0\">{</span><br/>    internal class Program<br/>    <span class=\"br0\">{</span><br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>GetLine<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> uint.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> string GetLine<span class=\"br0\">(</span>string path<span class=\"sy0\">,</span> uint line<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            using <span class=\"br0\">(</span>var reader <span class=\"sy0\">=</span> new StreamReader<span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                try<br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> line<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>reader.<span class=\"me1\">EndOfStream</span><span class=\"br0\">)</span><br/>                            <span class=\"kw1\">return</span> string.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"There {1} less than {0} line{2} in the file.\"</span><span class=\"sy0\">,</span> line<span class=\"sy0\">,</span><br/>                                                 <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"are\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"s\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> line<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">return</span> reader.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        reader.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                catch <span class=\"br0\">(</span>IOException ex<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> ex.<span class=\"me1\">Message</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                catch <span class=\"br0\">(</span>OutOfMemoryException ex<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> ex.<span class=\"me1\">Message</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            throw new Exception<span class=\"br0\">(</span><span class=\"st0\">\"Something bad happened.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> file_lines <span class=\"sy0\">=</span> readText<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">splitLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"co1\">//file_lines becomes an array of strings, each line is one element</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">(</span>file_lines.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> file_lines<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"line not found\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 32, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> read_a_specific_line <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>from_file<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">from_file</span><span class=\"br0\">(</span> <span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">line_nr</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> read_a_file_line_by_line:<span class=\"re3\">into_list</span><span class=\"br0\">(</span><span class=\"re5\">File</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"re5\">Lines</span> <span class=\"sy3\">=</span> read_a_file_line_by_line:<span class=\"re3\">into_list</span><span class=\"br0\">(</span> <span class=\"st0\">\"read_a_specific_line.erl\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Line_7</span> <span class=\"sy3\">=</span> <span class=\"re3\">line_nr</span><span class=\"br0\">(</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"re5\">Lines</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re5\">Line_7</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">line_nr</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Lines</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>         <span class=\"kw1\">try</span><br/>         <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Lines</span> <span class=\"br0\">)</span><br/>         <span class=\"kw1\">of</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">exit</span><span class=\"br0\">(</span> empty_line <span class=\"br0\">)</span><br/>         <span class=\"sy1\">;</span> <span class=\"re5\">Line</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Line</span><br/>         <span class=\"kw1\">end</span><br/>\u00a0<br/>         <span class=\"kw1\">catch</span><br/>         <span class=\"re5\">_Type</span>:<span class=\"me2\">Error0</span> <span class=\"sy1\">-&gt;</span><br/>                <span class=\"re5\">Error</span> <span class=\"sy3\">=</span> <span class=\"re3\">line_nr_error</span><span class=\"br0\">(</span> <span class=\"re5\">Error0</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Error: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Error</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">exit</span><span class=\"br0\">(</span> <span class=\"re5\">Error</span> <span class=\"br0\">)</span><br/>\u00a0<br/>         <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">line_nr_error</span><span class=\"br0\">(</span> function_clause <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">too_few_lines_in_file</span><span class=\"sy1\">;</span><br/><span class=\"re3\">line_nr_error</span><span class=\"br0\">(</span> <span class=\"re5\">Error</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Error</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> SAMPLER    <span class=\"co1\">!To sample a record from a file.                SAM00100</span><br/>       <span class=\"kw1\">CONTAINS</span>                                                         SAM00200<br/>        <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">20</span> <span class=\"kw1\">FUNCTION</span> GETREC<span class=\"br0\">(</span>N,F,IS<span class=\"br0\">)</span>    <span class=\"co1\">!Returns a status.      SAM00300</span><br/><span class=\"co1\">Careful. Some compilers get confused over the function name's usage.    SAM00400</span><br/>         <span class=\"kw3\">INTEGER</span> N              <span class=\"co1\">!The desired record number.             SAM00500</span><br/>         <span class=\"kw3\">INTEGER</span> F              <span class=\"co1\">!Of this file.                          SAM00600</span><br/>         <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> IS       <span class=\"co1\">!Stashed here.                          SAM00700</span><br/>         <span class=\"kw3\">INTEGER</span> I,L            <span class=\"co1\">!Assistants.                            SAM00800</span><br/>          IS <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>               <span class=\"co1\">!Clear previous content, even if null...SAM00900</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>      <span class=\"co1\">!Start on errors.                       SAM01000</span><br/>            WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"!No record\"</span>,N     <span class=\"co1\">!Could never be found.  SAM01100</span><br/>    <span class=\"nu0\">1</span>       FORMAT <span class=\"br0\">(</span>A,1X,I0<span class=\"br0\">)</span>                    <span class=\"co1\">!Message, number.       SAM01200</span><br/>          <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>F.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>                 <span class=\"co1\">!Obviously wrong?       SAM01300</span><br/>            WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"!No unit number\"</span>,F<span class=\"co1\">!Positive is valid.     SAM01400</span><br/>          <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">LEN</span><span class=\"br0\">(</span>IS<span class=\"br0\">)</span>.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>           <span class=\"co1\">!Space awaits?          SAM01500</span><br/>            WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"!String size\"</span>,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>IS<span class=\"br0\">)</span>     <span class=\"co1\">!Nope.          SAM01600</span><br/>          <span class=\"kw1\">ELSE</span>                  <span class=\"co1\">!Otherwise, there is hope.              SAM01700</span><br/>            REWIND <span class=\"br0\">(</span>F<span class=\"br0\">)</span>          <span class=\"co1\">!Clarify the file position.             SAM01800</span><br/>            <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>      <span class=\"co1\">!Grind up to the desired record.        SAM01900</span><br/>              READ <span class=\"br0\">(</span>F,<span class=\"nu0\">2</span>,<span class=\"kw1\">END</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"co1\">!Ignoring any content.                  SAM02000</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>              <span class=\"co1\">!Are we there yet?                      SAM02100</span><br/>            READ <span class=\"br0\">(</span>F,<span class=\"nu0\">2</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> L,IS<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">MIN</span><span class=\"br0\">(</span>L,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>IS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">!At last.      SAM02200</span><br/>    <span class=\"nu0\">2</span>       FORMAT <span class=\"br0\">(</span>Q,A<span class=\"br0\">)</span>        <span class=\"co1\">!Q = characters yet unread.             SAM02300</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>IS<span class=\"br0\">)</span><span class=\"br0\">)</span> IS<span class=\"br0\">(</span>L <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>   <span class=\"co1\">!Clear the tail.        SAM02400</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">GT</span>.<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>IS<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>              <span class=\"co1\">!Now for more silliness.SAM02500</span><br/>              WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"+Length\"</span>,L      <span class=\"co1\">!Too long to fit in IS. SAM02600</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>L.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>               <span class=\"co1\">!A zero-length record   SAM02700</span><br/>              WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"+Null\"</span>          <span class=\"co1\">!Is not the same        SAM02800</span><br/>            <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IS.<span class=\"me1\">EQ</span>.<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>             <span class=\"co1\">!As a record            SAM02900</span><br/>              WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"+Blank\"</span>,L       <span class=\"co1\">!Containing spaces.     SAM03000</span><br/>            <span class=\"kw1\">ELSE</span>                                <span class=\"co1\">!But otherwise,         SAM03100</span><br/>              WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\" Length\"</span>,L      <span class=\"co1\">!Note the leading space.SAM03200</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>              <span class=\"co1\">!Righto, we've decided.                 SAM03300</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>                <span class=\"co1\">!And, no more options.                  SAM03400</span><br/>          <span class=\"kw1\">RETURN</span>                <span class=\"co1\">!So, done.                              SAM03500</span><br/>    <span class=\"nu0\">3</span>     WRITE <span class=\"br0\">(</span>GETREC,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"!End on read\"</span>,I     <span class=\"co1\">!An alternative ending. SAM03600</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> GETREC     <span class=\"co1\">!That was interesting.                  SAM03700</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> SAMPLER        <span class=\"co1\">!Just a sample of possibility.          SAM03800</span><br/>                                                                        SAM03900<br/>      <span class=\"kw1\">PROGRAM</span> POKE                                                      POK00100<br/>      <span class=\"kw3\">USE</span> SAMPLER                                                       POK00200<br/>      <span class=\"kw3\">INTEGER</span> ENUFF     <span class=\"co1\">!Some sizes.                                    POK00300</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>ENUFF <span class=\"sy0\">=</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span>   <span class=\"co1\">!Sufficient?                            POK00400</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>ENUFF<span class=\"br0\">)</span> STUFF   <span class=\"co1\">!Lots of memory these days.             POK00500</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">20</span> <span class=\"kw3\">RESULT</span>                                               POK00600<br/>      <span class=\"kw3\">INTEGER</span> MSG,F     <span class=\"co1\">!I/O unit numbers.                              POK00700</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>           <span class=\"co1\">!Standard output.                               POK00800</span><br/>      F <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>            <span class=\"co1\">!Chooose a unit number.                         POK00900</span><br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"      To select record 7 from a disc file.\"</span>        POK01000<br/>                                                                        POK01100<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"As a FORMATTED file.\"</span>                              POK01200<br/>      OPEN <span class=\"br0\">(</span>F,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span><span class=\"st0\">\"FileSlurpN.for\"</span>,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"OLD\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"READ\"</span><span class=\"br0\">)</span>         POK01300<br/>      <span class=\"kw3\">RESULT</span> <span class=\"sy0\">=</span> GETREC<span class=\"br0\">(</span><span class=\"nu0\">7</span>,F,STUFF<span class=\"br0\">)</span>                                        POK01400<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"Result\"</span>,<span class=\"kw3\">RESULT</span>                                     POK01500<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"Record\"</span>,STUFF                                      POK01600<br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span>A,<span class=\"st0\">\":\"</span>,A<span class=\"br0\">)</span>                                                  POK01700<br/>                                                                        POK01800<br/>      CLOSE <span class=\"br0\">(</span>F<span class=\"br0\">)</span>                                                         POK01900<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"As a random-access unformatted file.\"</span>              POK02000<br/>      OPEN <span class=\"br0\">(</span>F,<span class=\"kw1\">FILE</span><span class=\"sy0\">=</span><span class=\"st0\">\"FileSlurpN.for\"</span>,<span class=\"kw1\">STATUS</span><span class=\"sy0\">=</span><span class=\"st0\">\"OLD\"</span>,<span class=\"kw1\">ACTION</span><span class=\"sy0\">=</span><span class=\"st0\">\"READ\"</span>,         POK02100<br/>     <span class=\"nu0\">1</span> <span class=\"kw1\">ACCESS</span><span class=\"sy0\">=</span><span class=\"st0\">\"DIRECT\"</span>,<span class=\"kw1\">FORM</span><span class=\"sy0\">=</span><span class=\"st0\">\"UNFORMATTED\"</span>,<span class=\"kw1\">RECL</span><span class=\"sy0\">=</span><span class=\"nu0\">82</span><span class=\"br0\">)</span>      <span class=\"co1\">!Not 80!        POK02200</span><br/>      STUFF <span class=\"sy0\">=</span> <span class=\"st0\">\"Cleared.\"</span>                                                POK02300<br/>      READ <span class=\"br0\">(</span>F,REC <span class=\"sy0\">=</span> <span class=\"nu0\">7</span>,<span class=\"kw1\">ERR</span> <span class=\"sy0\">=</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span> STUFF<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><span class=\"br0\">)</span>                            POK02400<br/>      WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"Record\"</span>,STUFF<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><span class=\"br0\">)</span>                                POK02500<br/>      <span class=\"kw1\">STOP</span>                                                              POK02600<br/>  <span class=\"nu0\">666</span> WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Can't get the record!\"</span>                             POK02700<br/>      <span class=\"kw1\">END</span>       <span class=\"co1\">!That was easy.                                         POK02800</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 25, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"input.txt\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Dim</span> line_ <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#1, line_  '' read each line  </span><br/>  count += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> count = <span class=\"nu0\">7</span> <span class=\"kw1\">Then</span><br/>    line_ = <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>line_, Any\u00a0!<span class=\"st0\">\" <span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span>   <span class=\"co1\">'' remove any leading or trailing spaces or tabs</span><br/>    <span class=\"kw1\">If</span> line_ = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Print</span> <span class=\"st0\">\"The 7th line is empty\"</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw1\">Print</span> <span class=\"st0\">\"The 7th line is\u00a0: \"</span>; line_<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Exit</span> <span class=\"kw1\">While</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Wend</span><br/><span class=\"kw1\">If</span> count &lt; <span class=\"nu0\">7</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"There are only\"</span>; count; <span class=\"st0\">\" lines in the file\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span> </pre>"}, {"lang": "F#", "loc": 15, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> Int32.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>args.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">use</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StreamReader<span class=\"br0\">(</span>args.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> lines <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <span class=\"br0\">(</span><br/>                    <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>reader\u00a0: StreamReader<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>reader.<span class=\"me1\">EndOfStream</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> None <br/>                    <span class=\"kw1\">else</span> Some<span class=\"br0\">(</span>reader.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, reader<span class=\"br0\">)</span><span class=\"br0\">)</span> r<br/>    <span class=\"kw1\">let</span> line <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">nth</span> n lines  <span class=\"co1\">// Seq.nth throws an ArgumentException,</span><br/>                                <span class=\"co1\">// if not not enough lines available</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "FutureBasic", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as long     i\u00a0: i = 1<br/>dim as Str255   s, lineSeven<br/>dim as CFURLRef url<br/>\u00a0<br/>if ( files$( _CFURLRefOpen, \"TEXT\", \"Select text file\", @url ) )<br/>  open \"I\", 2, @url<br/>  while ( not eof(2) )<br/>    line input #2, s<br/>      if ( i == 7 )<br/>        lineSeven = s<br/>      end if<br/>      i++<br/>  wend<br/>  close 2<br/>end if<br/>\u00a0<br/>if ( lineSeven[0] )<br/>  print lineSeven<br/>else<br/>  print \"File did not contain seven lines, or line was empty.\"<br/>end if<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 51, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"bufio\"</span><br/>\t<span class=\"st0\">\"errors\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"io\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> line<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> rsl<span class=\"sy1\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">);</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"7th line:\"</span><span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>line<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"rsl:\"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> rsl<span class=\"sy1\">(</span>fn <span class=\"kw4\">string</span><span class=\"sy1\">,</span> n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span><span class=\"me1\">Errorf</span><span class=\"sy1\">(</span><span class=\"st0\">\"invalid request: line\u00a0%d\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tf<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Open<span class=\"sy1\">(</span>fn<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> err<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">defer</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\tbf <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">var</span> line <span class=\"kw4\">string</span><br/>\t<span class=\"kw1\">for</span> lnum <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> lnum &lt; n<span class=\"sy1\">;</span> lnum<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tline<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> bf<span class=\"sy3\">.</span>ReadString<span class=\"sy1\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> err <span class=\"sy3\">==</span> io<span class=\"sy3\">.</span>EOF <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">switch</span> lnum <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> errors<span class=\"sy3\">.</span><span class=\"me1\">New</span><span class=\"sy1\">(</span><span class=\"st0\">\"no lines in file\"</span><span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> errors<span class=\"sy3\">.</span><span class=\"me1\">New</span><span class=\"sy1\">(</span><span class=\"st0\">\"only 1 line\"</span><span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span><span class=\"me1\">Errorf</span><span class=\"sy1\">(</span><span class=\"st0\">\"only\u00a0%d lines\"</span><span class=\"sy1\">,</span> lnum<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> err<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> line <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span><span class=\"me1\">Errorf</span><span class=\"sy1\">(</span><span class=\"st0\">\"line\u00a0%d empty\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> line<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> line <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"lines.txt\"</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachLine\"><span class=\"kw7\">eachLine</span></a> <span class=\"br0\">{</span> currentLine, lineNumber <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lineNumber <span class=\"sy0\">==</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        line <span class=\"sy0\">=</span> currentLine<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Line 7 = $line\"</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\">main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> contents <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> filename<br/>          <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">6</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> contents <span class=\"kw1\">of</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"File has less than seven lines\"</span><br/>            l:<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> l<br/>  <span class=\"kw1\">where</span> filename <span class=\"sy0\">=</span> <span class=\"st0\">\"testfile\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span>readline<span class=\"br0\">(</span><span class=\"st0\">\"foo.bar.txt\"</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"st0\">\"failed\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> readline<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>n<span class=\"br0\">)</span>                         <span class=\"co1\"># return n'th line of file f</span><br/>f <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>f<span class=\"sy1\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span>                        <span class=\"co1\"># open file</span><br/><span class=\"kw1\">every</span>  i <span class=\"sy1\">:=</span> n <span class=\"sy1\">&amp;</span> line <span class=\"sy1\">:=</span> <span class=\"sy1\">|</span><span class=\"kw4\">read</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy1\">\\</span> n <span class=\"kw1\">do</span> i <span class=\"sy1\">-:=</span> <span class=\"nu0\">1</span>  <span class=\"co1\">#  &lt;== here</span><br/><span class=\"kw4\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> line<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">readLine=: <span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"sy0\">(</span><span class=\"kw2\">x</span>-<span class=\"nu0\">1</span><span class=\"sy0\">)</span> {:: &lt;;.<span class=\"nu0\">2</span> ] <span class=\"nu0\">1</span>!:<span class=\"nu0\">1</span> boxxopen <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">package</span> <span class=\"co2\">linenbr7</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LineNbr7 <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>f.<span class=\"me1\">isFile</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>f.<span class=\"me1\">canRead</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"can't read \"</span> <span class=\"sy0\">+</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> br <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilereader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileReader</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alinenumberreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">LineNumberReader</span></a> lnr <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alinenumberreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">LineNumberReader</span></a><span class=\"br0\">(</span>br<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> lnum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> lnr.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><br/>                    <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>lnum <span class=\"sy0\">=</span> lnr.<span class=\"me1\">getLineNumber</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>lnum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"the file has zero length\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">7</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw4\">boolean</span> empty <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"line 7: \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>empty <span class=\"sy0\">?</span> <span class=\"st0\">\"empty\"</span> <span class=\"sy0\">:</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"the file has only \"</span> <span class=\"sy0\">+</span> lnum <span class=\"sy0\">+</span> <span class=\"st0\">\" line(s)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\"># Input - a line number to read, counting from 1<br/># Output - a stream with 0 or 1 items<br/>def read_line:<br/>  . as $in<br/>  | label $top<br/>  | foreach inputs as $line<br/>      (0; .+1; if . == $in then $line, break $top else empty end)\u00a0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">open(readlines, \"path/to/file\")[7]</pre>"}, {"lang": "Kotlin", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* The following code reads the whole file into memory<br/>       and so should not be used for large files<br/>       which should instead be read line by line until the<br/>       desired line is reached */</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lines <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lines.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"There are only ${lines.size} lines in the file\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line7 <span class=\"sy0\">=</span> lines<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line7.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"The seventh line is empty\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"The seventh line is\u00a0: $line7\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Note that 'input.txt' contains the eight lines:<br/>Line 1<br/>Line 2<br/>Line 3<br/>Line 4<br/>Line 5<br/>Line 6<br/>Line 7<br/>Line 8<br/>*/</span></pre>"}, {"lang": "Lasso", "loc": 10, "block": "<pre class=\"text highlighted_source\">local(f) = file('unixdict.txt')<br/>handle =&gt; { #f-&gt;close }<br/>local(this_line = string,line = 0)<br/>#f-&gt;forEachLine =&gt; {<br/>\t#line++<br/>\t#line == 7\u00a0? #this_line = #1<br/>\t#line == 7\u00a0? loop_abort<br/>}<br/>#this_line // 6th, which is the 7th line in the file<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 8, "block": "<pre class=\"lua highlighted_source\">iter <span class=\"sy0\">=</span> <span class=\"kw3\">io.lines</span> <span class=\"st0\">'test.txt'</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> iter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">error</span> <span class=\"st0\">'Not 7 lines in file'</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>line <span class=\"sy0\">=</span> iter<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Liberty BASIC", "loc": 11, "block": "<pre class=\"lb highlighted_source\">fileName$    <span class=\"sy0\">=</span><span class=\"st0\">\"F:\\sample.txt\"</span><br/>requiredLine <span class=\"sy0\">=</span><span class=\"nu0\">7</span><br/>\u00a0<br/><span class=\"kw1\">open</span> fileName$ <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>i<br/>    f$ <span class=\"sy0\">=</span><span class=\"kw1\">input</span>$<span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">lof</span><span class=\"br0\">(</span> <span class=\"sy0\">#</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span>i<br/>\u00a0<br/>line7$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> f$<span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> line7$ <span class=\"sy0\">=</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> line7$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">notice</span> <span class=\"st0\">\"Empty line! ( or file has fewer lines).\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> line7$</pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">path\u00a0:= \"file.txt\":<br/>specificLine\u00a0:= proc(path, num)<br/>\tlocal i, input:<br/>\tfor i to num do<br/>\t\tinput\u00a0:= readline(path):<br/>\t\tif input = 0 then break; end if:<br/>\tend do:<br/>\tif i = num+1 then printf(\"Line\u00a0%d,\u00a0%s\", num, input):<br/>\telif i &lt;= num then printf (\"Line number\u00a0%d is not reached\",num): end if:<br/>end proc:</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\"> If[#\u00a0!= EndOfFile , Print[#]]&amp; @ ReadList[\"file\",  String, 7] </pre>"}, {"lang": "MATLAB / Octave", "loc": 20, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>  eln = <span class=\"nu0\">7</span>;  <span class=\"co1\">% extract line number 7</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a> = <span class=\"co2\">''</span>;<br/>  fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span><span class=\"co2\">'foobar.txt'</span>,<span class=\"co2\">'r'</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fid &lt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>\tprintf<span class=\"br0\">(</span><span class=\"co2\">'Error:could not open file\\n'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>        n = <span class=\"nu0\">0</span>; <br/>\t<span class=\"kw1\">while</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feof.html\"><span class=\"kw2\">feof</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>,<br/>              n = n + <span class=\"nu0\">1</span>; <br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n ~= eln<span class=\"br0\">)</span>, <br/>                    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>              <span class=\"kw1\">else</span><br/>                    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>              <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span>;<br/>  printf<span class=\"br0\">(</span><span class=\"co2\">'line\u00a0%i:\u00a0%s\\n'</span>,eln,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">)</span>;<br/>\u00a0</pre>"}, {"lang": "MoonScript", "loc": 5, "block": "<pre class=\"text highlighted_source\">iter = io.lines 'test.txt'<br/>for i=0, 5<br/>  error 'Not 7 lines in file' if not iter!<br/>\u00a0<br/>print iter!</pre>"}, {"lang": "NetRexx", "loc": 53, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">parse</span> arg inFileName lineNr .<br/>\u00a0<br/><span class=\"kw1\">if</span> inFileName = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> inFileName = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> inFileName = <span class=\"st0\">'./data/input.txt'</span><br/><span class=\"kw1\">if</span> lineNr     = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> lineNr     = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> lineNr     = <span class=\"nu0\">7</span><br/>\u00a0<br/><span class=\"kw1\">do</span><br/>  lineTxt = readLine<span class=\"br0\">(</span>inFileName, lineNr<span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'&lt;textline number=\"'</span>lineNr.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"st0\">'\"&gt;'</span>lineTxt<span class=\"st0\">'&lt;/textline&gt;'</span><br/><span class=\"kw3\">catch</span> ex = Exception<br/>  ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"co1\">-- NetRexx/Java programs don't have a special mechanism to seek to a specified line number</span><br/><span class=\"co1\">-- the simple solution is to iterate through file. (Costly for very large files)</span><br/>method readLine<span class=\"br0\">(</span>inFileName, lineNr<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">signals</span> IOException, FileNotFoundException<br/>\u00a0<br/>  lineReader = LineNumberReader<span class=\"br0\">(</span>FileReader<span class=\"br0\">(</span>File<span class=\"br0\">(</span>inFileName<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  notFound   = isTrue<br/>  lineTxt    = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> reading forever<br/>    line = lineReader.<span class=\"me0\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">select</span><br/>      <span class=\"kw3\">when</span> lineReader.<span class=\"me0\">getLineNumber</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = lineNr <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        lineTxt  = line<br/>        notFound = isFalse<br/>        <span class=\"kw1\">leave</span> reading <span class=\"co1\">-- terminate I/O loop</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">when</span> line = null <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">leave</span> reading <span class=\"co1\">-- terminate I/O loop</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">otherwise</span> <span class=\"kw1\">nop</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">finally</span><br/>      lineReader.<span class=\"me0\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> reading<br/>\u00a0<br/>  <span class=\"kw1\">if</span> notFound <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> RuntimeException<span class=\"br0\">(</span><span class=\"st0\">'File'</span> inFileName <span class=\"st0\">'does not contain line'</span> lineNr.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> lineTxt<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/>method isTrue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><br/><span class=\"co1\">-- =============================================================================</span><br/>method isFalse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">var<br/>  line: TaintedString<br/>  f = open(\"test.txt\", fmRead)<br/>\u00a0<br/>for x in 0 .. 6:<br/>  try:<br/>    line = readLine f<br/>  except EIO:<br/>    echo \"Not 7 lines in file\"</pre>"}, {"lang": "OCaml", "loc": 21, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> input_line_opt ic <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> Some <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> None<br/>\u00a0<br/><span class=\"kw1\">let</span> nth_line n filename <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> filename <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> input_line_opt ic <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> Some line <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>          <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>          <span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">failwith</span> <span class=\"st0\">\"end of file reached\"</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>nth_line <span class=\"nu0\">7</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 38, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> FileTruncate<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  filename <span class=\"sy3\">=</span> <span class=\"st0\">'test'</span><span class=\"sy1\">;</span><br/>  position <span class=\"sy3\">=</span> <span class=\"nu0\">7</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  myfile<span class=\"sy1\">:</span> text<span class=\"sy1\">;</span><br/>  line<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  counter<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> FileExists<span class=\"br0\">(</span>filename<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Error: File does not exist.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Assign<span class=\"br0\">(</span>myfile<span class=\"sy1\">,</span> filename<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Reset<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  counter <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Repeat</span> <br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">eof</span><span class=\"br0\">(</span>myfile<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Error: The file \"'</span><span class=\"sy1\">,</span> filename<span class=\"sy1\">,</span> <span class=\"st0\">'\" is too short. Cannot read line '</span><span class=\"sy1\">,</span> position<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Close<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>counter<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">readln</span><span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> counter <span class=\"sy3\">=</span> position <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>myfile<span class=\"sy1\">,</span> line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Pascal", "loc": 38, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> FileTruncate<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  filename <span class=\"sy3\">=</span> <span class=\"st0\">'test'</span><span class=\"sy1\">;</span><br/>  position <span class=\"sy3\">=</span> <span class=\"nu0\">7</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  myfile<span class=\"sy1\">:</span> text<span class=\"sy1\">;</span><br/>  line<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  counter<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> FileExists<span class=\"br0\">(</span>filename<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Error: File does not exist.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Assign<span class=\"br0\">(</span>myfile<span class=\"sy1\">,</span> filename<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Reset<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  counter <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Repeat</span> <br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">eof</span><span class=\"br0\">(</span>myfile<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Error: The file \"'</span><span class=\"sy1\">,</span> filename<span class=\"sy1\">,</span> <span class=\"st0\">'\" is too short. Cannot read line '</span><span class=\"sy1\">,</span> position<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Close<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>counter<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">readln</span><span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> counter <span class=\"sy3\">=</span> position <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>myfile<span class=\"sy1\">,</span> line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Close<span class=\"br0\">(</span>myfile<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl -s</span><br/><span class=\"co1\"># invoke as &lt;scriptname&gt; -n=7 [input]</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co5\">$.</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"file too short<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> lines<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Short file\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">integer fn = open(\"TEST.TXT\",\"r\")<br/>sequence lines = get_text(fn,GT_LF_STRIPPED)<br/>close(fn)<br/>if length(lines)&gt;=7 then<br/>   \u00a0?lines[7]<br/>else<br/>   \u00a0?\"no line 7\"<br/>end if</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(in \"file.txt\"<br/>   (do 6 (line))<br/>   (or (line) (quit \"No 7 lines\")) )</pre>"}, {"lang": "PL/I", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare text character (1000) varying, line_no fixed;<br/>\u00a0<br/>get (line_no);<br/>on endfile (f) begin;<br/>  put skip list ('the specified line does not exist');<br/>  go to next;<br/>end;<br/>\u00a0<br/>get file (f) edit ((text do i = 1 to line_no)) (L);<br/>\u00a0<br/>put skip list (text);<br/>next:\u00a0;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$file</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Get-Content</span> c:\\file.txt<br/><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$file</span>.count <span class=\"kw4\">-lt</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><span class=\"kw1\">Write-Warning</span> <span class=\"st0\">\"The file is too short!\"</span><span class=\"br0\">}</span><br/><span class=\"kw3\">else</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$file</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> Readcount <span class=\"kw4\">-eq</span> <span class=\"nu0\">7</span> <span class=\"sy0\">|</span> <span class=\"kw1\">set-variable</span> <span class=\"kw5\">-name</span> Line7<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">'xxx.txt'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> line <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">6</span>:<br/>            <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Not 7 lines in file'</span><span class=\"br0\">)</span><br/>        line <span class=\"sy0\">=</span> <span class=\"kw2\">None</span></pre>"}, {"lang": "PureBasic", "loc": 32, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> lineLastRead<br/>  lineRead.i<br/>  <span class=\"kw2\">line</span>.s<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> readNthLine<span class=\"br0\">(</span>file, n, <span class=\"sy0\">*</span>results.lineLastRead<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>results<span class=\"sy0\">\\</span>lineRead <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">While</span> <span class=\"sy0\">*</span>results<span class=\"sy0\">\\</span>lineRead <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">And</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>    <span class=\"sy0\">*</span>results<span class=\"sy0\">\\</span><span class=\"kw2\">line</span> <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>    <span class=\"sy0\">*</span>results<span class=\"sy0\">\\</span>lineRead <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>results<span class=\"sy0\">\\</span>lineRead <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> filename.s <span class=\"sy0\">=</span> <span class=\"kw2\">OpenFileRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Choose file to read a line from\"</span>, <span class=\"st0\">\"*.*\"</span>, <span class=\"st0\">\"All files (*.*)|*.*\"</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> filename<br/>  <span class=\"kw1\">Define</span> file <span class=\"sy0\">=</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span>#PB_Any, filename<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> file<br/>    <span class=\"kw1\">Define</span> fileReadResults.lineLastRead, lineToRead <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><br/>    <span class=\"kw1\">If</span> readNthLine<span class=\"br0\">(</span>file, lineToRead, fileReadResults<span class=\"br0\">)</span><br/>      <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Results\"</span>, fileReadResults<span class=\"sy0\">\\</span><span class=\"kw2\">line</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Error\"</span>, <span class=\"st0\">\"There are less than \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>lineToRead<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" lines in file.\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Error\"</span>, <span class=\"st0\">\"Couldn't open file \"</span> <span class=\"sy0\">+</span> filename <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndIf</span> </pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt; seven &lt;- scan('hw.txt', '', skip = 6, nlines = 1, sep = '\\n') # too short<br/>Read 0 items<br/>&gt; seven &lt;- scan('Incoming/quotes.txt', '', skip = 6, nlines = 1, sep = '\\n')<br/>Read 1 item<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; simple, but reads the whole file<br/>(define s1 (list-ref (file-&gt;lines \"some-file\") 6))<br/>\u00a0<br/>;; more efficient: read and discard n-1 lines<br/>(define s2<br/>  (call-with-input-file \"some-file\"<br/>    (\u03bb(i) (for/last ([line (in-lines i)] [n 7]) line))))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 4, "block": "<pre class=\"rebol highlighted_source\">\u00a0<br/>x: <span class=\"kw3\">pick</span> <span class=\"kw3\">read</span><span class=\"sy0\">/</span>lines <span class=\"kw3\">request-file</span><span class=\"sy0\">/</span>only <span class=\"nu0\">7</span><br/><span class=\"kw2\">either</span> x <span class=\"br0\">[</span><span class=\"kw3\">print</span> x<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"st0\">\"No seventh line\"</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Red", "loc": 7, "block": "<pre class=\"text highlighted_source\">&gt;&gt; x: pick read/lines\u00a0%file.txt 7<br/>\u00a0<br/>case [  <br/>    x = none  [print \"File has less than seven lines\"]<br/>    (length? x) = 0 [print \"Line 7 is empty\"]<br/>    (length? x) &gt; 0 [print append \"Line seven =  \" x]<br/>]</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program reads a specific line from a file  (and displays the length and content).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> FID n <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> FID==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> FID==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  FID= <span class=\"st0\">'JUNK.TXT'</span>     <span class=\"coMULTI\">/*not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span>   n==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>    n=<span class=\"nu0\">7</span>               <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>FID<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">call</span> ser <span class=\"st0\">\"wasn't found.\"</span> <span class=\"coMULTI\">/*see if the file    exists  (or not). */</span><br/>\u00a0<br/><span class=\"kw1\">call</span> <span class=\"kw2\">linein</span> FID, n-<span class=\"nu0\">1</span>                             <span class=\"coMULTI\">/*read the record previous to  N.      */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>FID<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">call</span> ser <span class=\"st0\">\"doesn't contain\"</span>       N        <span class=\"st0\">'lines.'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  any more lines to read in file?*/</span><br/>\u00a0<br/>$=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>FID<span class=\"br0\">)</span>                                    <span class=\"coMULTI\">/*read the   Nth  record in the file.  */</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'File '</span>  FID  <span class=\"st0\">\" line \"</span>  N  <span class=\"st0\">' has a length of: '</span>         <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'File '</span>  FID  <span class=\"st0\">\" line \"</span>  N  <span class=\"st0\">'contents: '</span>   $  <span class=\"coMULTI\">/*display the contents of the Nth line.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ser:   <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span> <span class=\"st0\">'***error!***  File '</span>     FID     <span class=\"st0\">\" \"</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;      <span class=\"kw1\">say</span>;     <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span></pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fp = fopen(\"C:\\Ring\\ReadMe.txt\",\"r\")<br/>n = 0<br/>\u00a0<br/>r = \"\"<br/>while isstring(r)<br/>      while n &lt; 8<br/>            r = fgetc(fp)<br/>            if r = char(10) n++ see nl<br/>            else see r ok<br/>      end<br/>end<br/>fclose(fp)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"> seventh_line = <span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"/etc/passwd\"</span><span class=\"br0\">)</span>.<span class=\"me1\">each_line</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>.<span class=\"me1\">last</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">fileName$    = \"f:\\sample.txt\"<br/>requiredLine = 7<br/>open fileName$ for input as #f<br/>\u00a0<br/>for i = 1 to requiredLine<br/>  if not(eof(#f)) then line input #f, a$<br/>next i<br/>close #f<br/>print a$<br/>end</pre>"}, {"lang": "Rust", "loc": 19, "block": "<pre class=\"text highlighted_source\">use std::fs::File;<br/>use std::io::BufRead;<br/>use std::io::BufReader;<br/>use std::io::Error;<br/>use std::path::Path;<br/>\u00a0<br/>fn main() {<br/>    let path = Path::new(\"file.txt\");<br/>    let line_num = 7usize;<br/>    let line = get_line_at(&amp;path, line_num - 1);<br/>    println!(\"{}\", line.unwrap());<br/>}<br/>\u00a0<br/>fn get_line_at(path: &amp;Path, line_num: usize) -&gt; Result&lt;String, Error&gt; {<br/>    let file = File::open(path).expect(\"File not found or cannot be opened\");<br/>    let content = BufReader::new(&amp;file);<br/>    let mut lines = content.lines();<br/>    lines.nth(line_num).expect(\"No line found at that position\")<br/>}</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lines <span class=\"sy0\">=</span> io.<span class=\"me1\">Source</span>.<span class=\"me1\">fromFile</span><span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> seventhLine <span class=\"sy0\">=</span> lines drop<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> next</pre>"}, {"lang": "sed", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>sed -n 7p<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 32, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: getLine (inout file: aFile, in var integer: lineNum) is func<br/>  result<br/>    var string: line is \"\";<br/>  begin<br/>    while lineNum &gt; 1 and hasNext(aFile) do<br/>      readln(aFile);<br/>      decr(lineNum);<br/>    end while;<br/>    line\u00a0:= getln(aFile);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: fileName is \"input.txt\";<br/>    var file: aFile is STD_NULL;<br/>    var string: line is \"\";<br/>  begin<br/>    aFile\u00a0:= open(fileName, \"r\");<br/>    if aFile = STD_NULL then<br/>      writeln(\"Cannot open \" &lt;&amp; fileName);<br/>    else<br/>      line\u00a0:= getLine(aFile, 7);<br/>      if eof(aFile) then<br/>        writeln(\"The file does not have 7 lines\");<br/>      else<br/>        writeln(\"The 7th line of the file is:\");<br/>        writeln(line);<br/>      end if;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func getNthLine<span class=\"br0\">(</span>filename, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var file = <span class=\"kw4\">File</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>filename<span class=\"br0\">)</span>;<br/>  file.<span class=\"me1\">open_r</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>    Num<span class=\"br0\">(</span>$.<span class=\"br0\">)</span> == n <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> line;<br/>  <span class=\"br0\">}</span><br/>  warn <span class=\"st0\">\"file #{file} does not have #{n} lines, only #{$.}<span class=\"es0\">\\n</span>\"</span>;<br/>  <span class=\"kw2\">return</span> <span class=\"kw2\">nil</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var line = getNthLine<span class=\"br0\">(</span><span class=\"st0\">\"/etc/passwd\"</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/><span class=\"kw3\">print</span> line <span class=\"kw1\">if</span> <span class=\"kw1\">defined</span> line;</pre>"}, {"lang": "Smalltalk", "loc": 3, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re6\">line</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re0\">StandardFileStream</span> oldFileNamed: <span class=\"st0\">'test.txt'</span><span class=\"br0\">)</span> contents lineNumber: <span class=\"re5\">7</span>.<br/>\u00a0</pre>"}, {"lang": "SPL", "loc": 7, "block": "<pre class=\"text highlighted_source\">lines = #.readlines(\"test.txt\")<br/>#.output(\"Seventh line of text:\")<br/>? #.size(lines,1)&lt;7<br/>  #.output(\"is absent\")<br/>!<br/>  #.output(lines[7])<br/>.</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">* Read rows 20 to 30 from somedata.dta<br/>. use somedata in 20/30, clear<br/>\u00a0<br/>* Read rows for which the variable x is positive<br/>. use somedata if x&gt;0, clear</pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> getNthLineFromFile <span class=\"br0\">{</span><span class=\"kw3\">filename</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> <span class=\"re0\">$f</span> line<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>            <span class=\"kw1\">error</span> <span class=\"st0\">\"no such line\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$line</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>getNthLineFromFile example.txt <span class=\"nu0\">7</span><span class=\"br0\">]</span></pre>"}, {"lang": "TorqueScript", "loc": 1, "block": "<pre>\u00a0%file = new fileObject();\n\u00a0%file.openForRead(\"File/Path.txt\");\n $seventhLine = \"\";\n \n while(!%file.isEOF())\n {\n \t%line++;\n \n \tif(%line == 7)\n \t{\n \t\t$seventhLine =\u00a0%file.readLine();\n \n \t\tif($seventhLine $= \"\")\n \t\t{\n \t\t\terror(\"Line 7 of the file is blank!\");\n \t\t}\n \t}\n }\n \n\u00a0%file.close();\n\u00a0%file.delete();\n \n if(%line &lt; 7)\n {\n \terror(\"The file does not have seven lines!\");\n }\n</pre>"}, {"lang": "TUSCRIPT", "loc": 4, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>file=\"lines.txt\"<br/>ERROR/STOP OPEN (file,READ,-std-)<br/>line2fetch=7</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">@(skip nil 7)<br/>@line</pre>"}, {"lang": "UNIX Shell", "loc": 12, "block": "<pre class=\"bash highlighted_source\">get_nth_line<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    <span class=\"kw3\">local</span> <span class=\"re2\">file</span>=<span class=\"re4\">$1</span> <span class=\"re2\">n</span>=<span class=\"re4\">$2</span> line<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n-- <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">!</span> <span class=\"re2\">IFS</span>= <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> line; <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">echo</span> <span class=\"st0\">\"No such line $2 in <span class=\"es2\">$file</span>\"</span><br/>            <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">fi</span><br/>    <span class=\"kw1\">done</span> <span class=\"sy0\">&lt;</span> <span class=\"st0\">\"<span class=\"es2\">$file</span>\"</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$line</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>get_nth_line filename <span class=\"nu0\">7</span></pre>"}, {"lang": "Ursa", "loc": 13, "block": "<pre class=\"text highlighted_source\">decl string&lt;&gt; lines<br/>decl file f<br/>f.open \"filename.txt\"<br/>set lines (f.readlines)<br/>f.close<br/>\u00a0<br/>if (&lt; (size lines) 7)<br/>        out \"the file has less than seven lines\" endl console<br/>        stop<br/>end if<br/>\u00a0<br/>out \"the seventh line in the file is:\" endl endl console<br/>out lines&lt;6&gt; endl console</pre>"}, {"lang": "VBScript", "loc": 20, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> read_line(filepath,n)<br/>\t<span class=\"kw4\">Set</span> objFSO = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/>\t<span class=\"kw4\">Set</span> objFile = objFSO.OpenTextFile(filepath,1)<br/>\tarrLines = Split(objFile.ReadAll,vbCrLf)<br/>\t<span class=\"kw3\">If</span> <span class=\"kw4\">UBound</span>(arrLines) &gt;= n-1 <span class=\"kw3\">Then</span><br/>\t\t<span class=\"kw3\">If</span> arrLines(n-1) &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span><br/>\t\t\tread_line = arrLines(n-1)<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tread_line = <span class=\"st0\">\"Line \"</span> &amp; n &amp; <span class=\"st0\">\" is null.\"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tread_line = <span class=\"st0\">\"Line \"</span> &amp; n &amp; <span class=\"st0\">\" does not exist.\"</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\tobjFile.<span class=\"kw3\">Close</span><br/>\t<span class=\"kw4\">Set</span> objFSO = <span class=\"kw5\">Nothing</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.Echo read_line(<span class=\"st0\">\"c:\\temp\\input.txt\"</span>,7)<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 11, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"example.txt\"</span><span class=\"sy0\">,</span> BROWSE<span class=\"br0\">)</span><br/>Goto_Line<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>Cur_Line <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Statline_Message<span class=\"br0\">(</span><span class=\"st0\">\"File contains too few lines\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>At_EOL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Statline_Message<span class=\"br0\">(</span><span class=\"st0\">\"Empty line\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    Reg_Copy<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>Buf_Close<span class=\"br0\">(</span>NOMSG<span class=\"br0\">)</span> </pre>"}, {"lang": "XPL0", "loc": 26, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>def MaxLen = 82;        \\maximum length of line that can be stored (incl CR+LF)<br/>\u00a0<br/>func ReadLine(N, L);    \\Read line N from input file and return it in string L<br/>int  N;  char L;<br/>int  I, C;<br/>[for I:= 1 to N-1 do    \\skip to start of specified line<br/>        repeat  C:= ChIn(1);<br/>                if C = $1A\\EOF\\ then<br/>                        [Text(0, \"File only has \");  IntOut(0, I);<br/>                        Text(0, \" lines^M^J\");  return false];<br/>        until   C = $0A\\LF\\;<br/>I:= 0;<br/>repeat  C:= ChIn(1);<br/>        if C = $1A\\EOF\\ then<br/>                [Text(0, \"Line is empty (EOF)^M^L\");  return false];<br/>        L(I):= C;  I:= I+1;<br/>until   C=$0A\\LF\\ or I&gt;=MaxLen;<br/>if I &gt;= MaxLen then Text(0, \"Line might be truncated^M^J\"); <br/>if I = 2 then Text(0, \"Line is empty^M^J\"); <br/>L(I-1):= L(I-1)\u00a0! $80;          \\terminate string<br/>return true;<br/>];<br/>\u00a0<br/>char LineN(MaxLen);<br/>if ReadLine(7, LineN) then Text(0, LineN)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">reg line; do(7){line=File.stdin.readln()} println(\"&gt;&gt;&gt;\",line);</pre>"}]}