{"task": "Fibonacci_sequence", "blocks": [{"lang": "0815", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>%&lt;:0D:&gt;~$&lt;:01:~%&gt;=&lt;:a94fad42221f2702:&gt;~&gt;<br/>}:_s:{x{={~$x+%{=&gt;~&gt;x~-x&lt;:0D:~&gt;~&gt;~^:_s:?<br/>\u00a0</pre>"}, {"lang": "360 Assembly", "loc": 51, "block": "<pre class=\"text highlighted_source\">*        Fibonacci sequence    05/11/2014<br/>*        integer (31 bits) = 10 decimals -&gt; max fibo(46)<br/>FIBONACC CSECT<br/>         USING FIBONACC,R12    base register<br/>SAVEAREA B     STM-SAVEAREA(R15) skip savearea<br/>         DC    17F'0'          savearea<br/>         DC    CL8'FIBONACC'   eyecatcher<br/>STM      STM   R14,R12,12(R13) save previous context<br/>         ST    R13,4(R15)      link backward<br/>         ST    R15,8(R13)      link forward<br/>         LR    R12,R15         set addressability<br/>*        ----<br/>         LA    R1,0            f(n-2)=0<br/>         LA    R2,1            f(n-1)=1<br/>         LA    R4,2            n=2 <br/>         LA    R6,1            step<br/>         LH    R7,NN           limit<br/>LOOP     EQU   *               for n=2 to nn<br/>         LR    R3,R2             f(n)=f(n-1)<br/>         AR    R3,R1             f(n)=f(n-1)+f(n-2)<br/>         CVD   R4,PW             n  convert binary to packed (PL8)<br/>         UNPK  ZW,PW             packed (PL8) to zoned (ZL16)<br/>         MVC   CW,ZW             zoned (ZL16) to  char (CL16)<br/>         OI    CW+L'CW-1,X'F0'   zap sign<br/>         MVC   WTOBUF+5(2),CW+14 output<br/>         CVD   R3,PW             f(n) binary to packed decimal (PL8)<br/>         MVC   ZN,EM             load mask<br/>         ED    ZN,PW             packed dec (PL8) to char (CL20)<br/>         MVC   WTOBUF+9(14),ZN+6 output<br/>         WTO   MF=(E,WTOMSG)     write buffer<br/>         LR    R1,R2             f(n-2)=f(n-1)<br/>         LR    R2,R3             f(n-1)=f(n)<br/>         BXLE  R4,R6,LOOP      endfor n<br/>*        ----<br/>         LM    R14,R12,12(R13) restore previous savearea pointer<br/>         XR    R15,R15         return code set to 0<br/>         BR    R14             return to caller<br/>*        ----  DATA<br/>NN       DC    H'46'           nn max n<br/>PW       DS    PL8             15num<br/>ZW       DS    ZL16<br/>CW       DS    CL16<br/>ZN       DS    CL20<br/>*                  ' b 0 0 0 , 0 0 0 , 0 0 0 , 0 0 0 , 0 0 0'  15num<br/>EM       DC    XL20'402020206B2020206B2020206B2020206B202120'  mask<br/>WTOMSG   DS    0F<br/>         DC    H'80',XL2'0000'<br/>*                   fibo(46)=1836311903         <br/>WTOBUF   DC    CL80'fibo(12)=1234567890'<br/>         REGEQU<br/>         END   FIBONACC</pre>"}, {"lang": "6502 Assembly", "loc": 16, "block": "<pre class=\"text highlighted_source\">       LDA  #0<br/>       STA  $F0    \u00a0; LOWER NUMBER<br/>       LDA  #1<br/>       STA  $F1    \u00a0; HIGHER NUMBER<br/>       LDX  #0<br/>LOOP:  LDA  $F1<br/>       STA  $0F1B,X<br/>       STA  $F2    \u00a0; OLD HIGHER NUMBER<br/>       ADC  $F0<br/>       STA  $F1    \u00a0; NEW HIGHER NUMBER<br/>       LDA  $F2<br/>       STA  $F0    \u00a0; NEW LOWER NUMBER<br/>       INX<br/>       CPX  #$0A   \u00a0; STOP AT FIB(10)<br/>       BMI  LOOP<br/>       RTS         \u00a0; RETURN FROM SUBROUTINE</pre>"}, {"lang": "8080 Assembly", "loc": 10, "block": "<pre class=\"text highlighted_source\">FIBNCI: MOV  C,  A \u00a0; C will store the counter<br/>        DCR  C     \u00a0; decrement, because we know f(1) already<br/>        MVI  A,  1<br/>        MVI  B,  0<br/>LOOP:   MOV  D,  A<br/>        ADD  B     \u00a0; A\u00a0:= A + B<br/>        MOV  B,  D<br/>        DCR  C<br/>        JNZ  LOOP  \u00a0; jump if not zero<br/>        RET        \u00a0; return from subroutine</pre>"}, {"lang": "8th", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: fibon \\ n -- fib(n)<br/>  &gt;r 0 1 <br/>  ( tuck n:+ ) \\ fib(n-2) fib(n-1) -- fib(n-1) fib(n)<br/>  r&gt; n:1- times\u00a0;<br/>\u00a0<br/>: fib \\ n -- fib(n)<br/>  dup 1 n:= if 1\u00a0;; then<br/>  fibon nip\u00a0;<br/>\u00a0</pre>"}, {"lang": "ABAP", "loc": 14, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">FORM</span></a> fibonacci_iter <span class=\"kw4\">USING</span> <span class=\"kw4\">index</span> <span class=\"kw4\">TYPE</span> i<br/>                    <span class=\"kw4\">CHANGING</span> number_fib <span class=\"kw4\">TYPE</span> i<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> lv_old <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_cur <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDO.htm\"><span class=\"kw1\">Do</span></a> <span class=\"kw4\">index</span> <span class=\"kw4\">times</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">If</span></a> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw4\">or</span> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>      lv_cur <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>      lv_old <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">.</span><br/>    number_fib <span class=\"sy1\">=</span> lv_cur <span class=\"sy0\">+</span> lv_old<span class=\"sy0\">.</span><br/>    lv_old <span class=\"sy1\">=</span> lv_cur<span class=\"sy0\">.</span><br/>    lv_cur <span class=\"sy1\">=</span> number_fib<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDDO.htm\"><span class=\"kw1\">enddo</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">ENDFORM</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fast-fib-r <span class=\"br0\">(</span>n a b<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>zp n<span class=\"br0\">)</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       b<br/>       <span class=\"br0\">(</span>fast-fib-r <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> b <span class=\"br0\">(</span>+ a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fast-fib <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>fast-fib-r n <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> first-fibs-r <span class=\"br0\">(</span>n i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>fast-fib i<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>first-fibs-r n <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> first-fibs <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>first-fibs-r n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw3\">public</span> <span class=\"kw2\">function</span> fib<span class=\"br0\">(</span>n:uint<span class=\"br0\">)</span>:uint<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> n;<br/>\u00a0<br/>    <span class=\"kw1\">return</span> fib<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + fib<span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Fib <span class=\"kw1\">is</span><br/>\u00a0<br/>   X: Positive\u00a0:= Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Fib<span class=\"br0\">(</span>P: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> P &lt;= <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> Fib<span class=\"br0\">(</span>P-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + Fib<span class=\"br0\">(</span>P-<span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Fib;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Fibonacci(\"</span> &amp; Integer'Image<span class=\"br0\">(</span>X<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" ) = \"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Fib<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Fib;</pre>"}, {"lang": "AdvPL", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include \"totvs.ch\"<br/>User Function fibb(a,b,n)<br/>return(if(--n&gt;0,fibb(b,a+b,n),a))<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 26, "block": "<pre class=\"text highlighted_source\">integer<br/>fibs(integer n)<br/>{<br/>    integer w;<br/>\u00a0<br/>    if (n == 0) {<br/>        w = 0;<br/>    } elif (n == 1) {<br/>        w = 1;<br/>    } else {<br/>        integer a, b, i;<br/>\u00a0<br/>        i = 1;<br/>        a = 0;<br/>        b = 1;<br/>        while (i &lt; n) {<br/>            w = a + b;<br/>            a = b;<br/>            b = w;<br/>            i += 1;<br/>        }<br/>    }<br/>\u00a0<br/>    return w;<br/>}<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> analytic fibonacci <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> <span class=\"kw24\">sqrt</span> 5 <span class=\"sy1\">=</span> <span class=\"kw24\">long sqrt</span><span class=\"br0\">(</span>5<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> p <span class=\"sy1\">=</span> <span class=\"br0\">(</span>1 <span class=\"sy1\">+</span> <span class=\"kw24\">sqrt</span> 5<span class=\"br0\">)</span> <span class=\"sy1\">/</span> 2<span class=\"sy1\">;</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> q <span class=\"sy1\">=</span> 1<span class=\"sy1\">/</span>p<span class=\"sy1\">;</span><br/>  <span class=\"kw8\">ROUND</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>p<span class=\"sy1\">**</span>n <span class=\"sy1\">+</span> q<span class=\"sy1\">**</span>n<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"kw24\">sqrt</span> 5 <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> 30 <span class=\"kw2\">WHILE</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>analytic fibonacci<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> i <span class=\"sy1\">/=</span> 30 <span class=\"kw2\">DO</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL-M", "loc": 13, "block": "<pre class=\"text highlighted_source\">INTEGER FUNCTION FIBONACCI( X ); INTEGER X;<br/>BEGIN<br/>    INTEGER M, N, A, I;<br/>    M\u00a0:= 0;<br/>    N\u00a0:= 1;<br/>    FOR I\u00a0:= 2 STEP 1 UNTIL X DO<br/>    BEGIN<br/>        A\u00a0:= N;<br/>        N\u00a0:= M + N;<br/>        M\u00a0:= A;<br/>    END;<br/>    FIBONACCI\u00a0:= N;<br/>END;</pre>"}, {"lang": "ALGOL W", "loc": 19, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% return the nth Fibonacci number\u00a0%<br/>    integer procedure Fibonacci( integer value n )\u00a0;<br/>        begin<br/>            integer fn, fn1, fn2;<br/>            fn2\u00a0:= 1;<br/>            fn1\u00a0:= 0;<br/>            fn \u00a0:= 0;<br/>            for i\u00a0:= 1 until n do begin<br/>                fn \u00a0:= fn1 + fn2;<br/>                fn2\u00a0:= fn1;<br/>                fn1\u00a0:= fn<br/>            end\u00a0;<br/>            fn<br/>        end Fibonacci\u00a0;<br/>\u00a0<br/>    for i\u00a0:= 0 until 10 do writeon( i_w\u00a0:= 3, s_w\u00a0:= 0, Fibonacci( i ) )<br/>\u00a0<br/>end.</pre>"}, {"lang": "Alore", "loc": 6, "block": "<pre class=\"text highlighted_source\">def fib(n as Int) as Int<br/>   if n &lt; 2<br/>      return 1<br/>   end<br/>   return fib(n-1) + fib(n-2)<br/>end</pre>"}, {"lang": "AntLang", "loc": 4, "block": "<pre class=\"text highlighted_source\">/Sequence<br/>fib:{&lt;0;1&gt; {x,&lt;x[-1]+x[-2]&gt;}/ range[x]}<br/>/nth<br/>fibn:{fib[x][x]}</pre>"}, {"lang": "Apex", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/*<br/> author: snugsfbay<br/> date: March 3, 2016<br/> description: Create a list of x numbers in the Fibonacci sequence.<br/>     - user may specify the length of the list <br/>     - enforces a minimum of 2 numbers in the sequence because any fewer is not a sequence<br/>     - enforces a maximum of 47 because further values are too large for integer data type <br/>     - Fibonacci sequence always starts with 0 and 1 by definition<br/>*/<br/>public class FibNumbers{<br/>\u00a0<br/>final static Integer MIN = 2; //minimum length of sequence<br/>final static Integer MAX = 47; //maximum length of sequence<br/>\u00a0<br/>/* <br/>  description: method to create a list of numbers in the Fibonacci sequence <br/>  param: user specified integer representing length of sequence should be 2-47, inclusive.<br/>      - Sequence starts with 0 and 1 by definition so the minimum length could be as low as 2.<br/>      - For 48th number in sequence or greater, code would require a Long data type rather than an Integer.<br/>  return: list of integers in sequence.<br/>*/<br/>public static List&lt;Integer&gt; makeSeq(Integer len){<br/>\u00a0<br/>  List&lt;Integer&gt; fib = new List&lt;Integer&gt;{0,1}; // initialize list with first two values<br/>  Integer i;<br/>\u00a0<br/>  if(len&lt;MIN || len==null || len&gt;MAX) {<br/>      if (len&gt;MAX){<br/>          len=MAX; //set length to maximum if user entered too high a value<br/>      }else{<br/>          len=MIN; //set length to minimum if user entered too low a value or none<br/>      }<br/>  } //This could be refactored using teneray operator, but we want code coverage to be reflected for each condition<br/>\u00a0<br/>  //start with initial list size to find previous two values in the sequence, continue incrementing until list reaches user defined length<br/>  for(i=fib.size(); i&lt;len; i++){ <br/>    fib.add(fib[i-1]+fib[i-2]); //create new number based on previous numbers and add that to the list<br/>  }<br/>\u00a0<br/>  return fib; <br/>  }<br/>\u00a0<br/>}<br/>\u00a0</pre>"}, {"lang": "APL", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u2191+.\u00d7/N/\u22822 2\u23741 1 1 0<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 11, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> fibs <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">set</span> x <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"What fibbonaci number do you want?\"</span> <span class=\"kw1\">default answer</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">set</span> x <span class=\"kw3\">to</span> x <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> y <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> x<br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>\t\t<span class=\"kw3\">copy</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> fibs<br/>\t<span class=\"kw3\">else</span><br/>\t\t<span class=\"kw3\">copy</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> fibs<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>y <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> fibs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">to</span> <span class=\"kw2\">the</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> fibs<br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/><span class=\"kw3\">return</span> <span class=\"kw1\">item</span> x <span class=\"kw3\">of</span> fibs</pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre>( fibonacci , 1; 1 )\n\n[ 98 , // 100 numbers of fibonacci\n\n\t( fibonacci[ @fibonacci? ] ,\n\n\t\t@fibonacci[ @fibonacci - 1 ] + @fibonacci[ @fibonacci - 2 ]\n\n\t)\n\n\t\"Index: | @fibonacci? | =&gt; | @fibonacci[ @fibonacci? - 1 ] |\"\n]</pre>"}, {"lang": "ARM Assembly", "loc": 16, "block": "<pre class=\"text highlighted_source\">fibonacci:<br/>        push  {r1-r3}<br/>        mov   r1,  #0<br/>        mov   r2,  #1<br/>\u00a0<br/>fibloop:<br/>        mov   r3,  r2<br/>        add   r2,  r1,  r2<br/>        mov   r1,  r3<br/>        sub   r0,  r0,  #1<br/>        cmp   r0,  #1<br/>        bne   fibloop<br/>\u00a0<br/>        mov   r0,  r2<br/>        pop   {r1-r3}<br/>        mov   pc,  lr</pre>"}, {"lang": "AsciiDots", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>/--#$--\\<br/>|      |<br/>&gt;-*&gt;{+}/<br/>| \\+-/<br/>1  |<br/>#  1<br/>|  #<br/>|  |<br/>.  .<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ATS", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun fib_rec(n: int): int =<br/>  if n &gt;= 2 then fib_rec(n-1) + fib_rec(n-2) else n<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 18, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% fib<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Return</span> n<br/>  i <span class=\"sy0\">:=</span> last <span class=\"sy0\">:=</span> this <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    new <span class=\"sy0\">:=</span> last <span class=\"sy0\">+</span> this<br/>    last <span class=\"sy0\">:=</span> this<br/>    this <span class=\"sy0\">:=</span> new<br/>    i<span class=\"sy0\">++</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">Return</span> this<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 28, "block": "<pre class=\"autoit highlighted_source\">#AutoIt Version: 3<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<br/><span class=\"re0\">$n0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"re0\">$n1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"Iterative Fibonacci \"</span><span class=\"sy0\">,</span> it_febo<span class=\"br0\">(</span><span class=\"re0\">$n0</span><span class=\"sy0\">,</span><span class=\"re0\">$n1</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> it_febo<span class=\"br0\">(</span><span class=\"re0\">$n_0</span><span class=\"sy0\">,</span><span class=\"re0\">$n_1</span><span class=\"sy0\">,</span><span class=\"re0\">$N</span><span class=\"br0\">)</span><br/>   <span class=\"re0\">$first</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n_0</span><br/>   <span class=\"re0\">$second</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n_1</span><br/>   <span class=\"re0\">$next</span> <span class=\"sy0\">=</span> <span class=\"re0\">$first</span> <span class=\"sy0\">+</span> <span class=\"re0\">$second</span><br/>   <span class=\"re0\">$febo</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$N</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><br/>      <span class=\"re0\">$first</span> <span class=\"sy0\">=</span> <span class=\"re0\">$second</span><br/>      <span class=\"re0\">$second</span> <span class=\"sy0\">=</span> <span class=\"re0\">$next</span><br/>      <span class=\"re0\">$next</span> <span class=\"sy0\">=</span> <span class=\"re0\">$first</span> <span class=\"sy0\">+</span> <span class=\"re0\">$second</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">if</span></a> <span class=\"re0\">$n</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>      <span class=\"re0\">$febo</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ElseIf</span></a> <span class=\"re0\">$n</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>      <span class=\"re0\">$febo</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n_0</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ElseIf</span></a> <span class=\"re0\">$n</span><span class=\"sy0\">==</span><span class=\"nu0\">2</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>      <span class=\"re0\">$febo</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n_1</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>      <span class=\"re0\">$febo</span> <span class=\"sy0\">=</span> <span class=\"re0\">$next</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$febo</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 3, "block": "<pre class=\"awk highlighted_source\">$ awk 'func fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw6\">return</span><span class=\"br0\">(</span>n<span class=\"sy2\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy5\">?</span>n<span class=\"sy5\">:</span>fib<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>fib<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> <span class=\"st0\">\"fib(\"</span><span class=\"re0\">$1</span><span class=\"st0\">\")=\"</span>fib<span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">10</span><br/>fib<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>=<span class=\"nu0\">55</span></pre>"}, {"lang": "Axe", "loc": 11, "block": "<pre class=\"text highlighted_source\">Lbl FIB<br/>r\u2081\u2192N<br/>0\u2192I<br/>1\u2192J<br/>For(K,1,N)<br/> I+J\u2192T<br/> J\u2192I<br/> T\u2192J<br/>End<br/>J<br/>Return</pre>"}, {"lang": "bash", "loc": 3, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/>$ <span class=\"re2\">fib</span>=<span class=\"nu0\">1</span>;<span class=\"re2\">j</span>=<span class=\"nu0\">1</span>;<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fib<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"kw1\">do</span> <span class=\"kw3\">echo</span> <span class=\"re1\">$fib</span>;<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">k</span>=fib+j,<span class=\"re2\">fib</span>=j,<span class=\"re2\">j</span>=k<span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"kw1\">done</span><br/>\u00a0</pre>"}, {"lang": "Babel", "loc": 1, "block": "<pre class=\"text highlighted_source\">fib { &lt;- 0 1 { dup &lt;- + -&gt; swap } -&gt; times zap } &lt;</pre>"}, {"lang": "BASIC", "loc": 14, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> itFib <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    n1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    n2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">FOR</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">=</span> n1 <span class=\"sy0\">+</span> n2<br/>        n1 <span class=\"sy0\">=</span> n2<br/>        n2 <span class=\"sy0\">=</span> sum<br/>    <span class=\"kw1\">NEXT</span> k<br/>    <span class=\"kw1\">IF</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        itFib <span class=\"sy0\">=</span> n1 <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ELSE</span><br/>        itFib <span class=\"sy0\">=</span> n1<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 21, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::fibo.cmd</span><br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">1</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">fib</span> <span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">fib</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">1</span> <a href=\"http://www.ss64.com/nt/geq.html\"><span class=\"kw2\">geq</span></a> 2 <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">ge2</span> <br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>\u00a0<br/>:<span class=\"re0\">ge2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a r1 = <span class=\"sy0\">%</span><span class=\"re3\">1</span> - 1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a r2 = <span class=\"sy0\">%</span><span class=\"re3\">1</span> - 2<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">fib</span> <span class=\"sy0\">!</span><span class=\"re2\">r1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r1=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">fib</span> <span class=\"sy0\">!</span><span class=\"re2\">r2</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r2=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a r0 = r1 + r2<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">!</span><span class=\"re2\">r0</span><span class=\"sy0\">!</span></pre>"}, {"lang": "Battlestar", "loc": 45, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co1\">// Fibonacci sequence, recursive version</span><br/>fun fibb<br/>    loop<br/>        a <span class=\"sy0\">=</span> funparam<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">break</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>        a<span class=\"sy0\">--</span><br/>\u00a0<br/>        <span class=\"co1\">// Save \"a\" while calling fibb</span><br/>        a <span class=\"sy0\">-&gt;</span> stack<br/>\u00a0<br/>        <span class=\"co1\">// Set the parameter and call fibb</span><br/>        funparam<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<br/>        call fibb<br/>\u00a0<br/>        <span class=\"co1\">// Handle the return value and restore \"a\"</span><br/>        b <span class=\"sy0\">=</span> funparam<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        stack <span class=\"sy0\">-&gt;</span> a<br/>\u00a0<br/>        <span class=\"co1\">// Save \"b\" while calling fibb again</span><br/>        b <span class=\"sy0\">-&gt;</span> stack<br/>\u00a0<br/>        a<span class=\"sy0\">--</span><br/>\u00a0<br/>        <span class=\"co1\">// Set the parameter and call fibb</span><br/>        funparam<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<br/>        call fibb<br/>\u00a0<br/>        <span class=\"co1\">// Handle the return value and restore \"b\"</span><br/>        c <span class=\"sy0\">=</span> funparam<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        stack <span class=\"sy0\">-&gt;</span> b<br/>\u00a0<br/>        <span class=\"co1\">// Sum the results</span><br/>        b <span class=\"sy0\">+=</span> c<br/>        a <span class=\"sy0\">=</span> b<br/>\u00a0<br/>        funparam<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<br/>\u00a0<br/>        <span class=\"kw2\">break</span><br/>    end<br/>end<br/>\u00a0<br/><span class=\"co1\">// vim: set syntax=c ts=4 sw=4 et:</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">      PRINT FNfibonacci_r(1),  FNfibonacci_i(1)<br/>      PRINT FNfibonacci_r(13), FNfibonacci_i(13)<br/>      PRINT FNfibonacci_r(26), FNfibonacci_i(26)<br/>      END<br/>\u00a0<br/>      DEF FNfibonacci_r(N)<br/>      IF N &lt; 2 THEN = N<br/>      = FNfibonacci_r(N-1) + FNfibonacci_r(N-2)<br/>\u00a0<br/>      DEF FNfibonacci_i(N)<br/>      LOCAL F, I, P, T<br/>      IF N &lt; 2 THEN = N<br/>      P = 1<br/>      FOR I = 1 TO N<br/>        T = F<br/>        F += P<br/>        P = T<br/>      NEXT<br/>      = F<br/>\u00a0</pre>"}, {"lang": "bc", "loc": 15, "block": "<pre class=\"text highlighted_source\">#! /usr/bin/bc -q<br/>\u00a0<br/>define fib(x) {<br/>    if (x &lt;= 0) return 0;<br/>    if (x == 1) return 1;<br/>\u00a0<br/>    a = 0;<br/>    b = 1;<br/>    for (i = 1; i &lt; x; i++) {<br/>        c = a+b; a = b; b = c;<br/>    }<br/>    return c;<br/>}<br/>fib(1000)<br/>quit</pre>"}, {"lang": "beeswax", "loc": 4, "block": "<pre class=\"text highlighted_source\">                        #&gt;'#{;<br/>_`Enter n: `TN`Fib(`{`)=`X~P~K#{;<br/>                         #&gt;~P~L#<a class=\"__cf_email__\" data-cfemail=\"4a07070a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;<a class=\"__cf_email__\" data-cfemail=\"2f046f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>'<a class=\"__cf_email__\" data-cfemail=\"493809\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{;<br/>                                    <a class=\"__cf_email__\" data-cfemail=\"52302c121f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">00:.1:.&gt;:\"@\"8**++\\1+:67+`#@_v<br/>       ^ .:\\/*8\"@\"\\%*8\"@\":\\ &lt;</pre>"}, {"lang": "Brainf***", "loc": 2, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy0\">++++++++++</span><br/><span class=\"sy2\">&gt;&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&lt;&lt;</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&lt;&lt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&lt;</span><span class=\"sy0\">+</span><span class=\"sy2\">&gt;</span><span class=\"sy1\">]</span><span class=\"sy2\">&lt;&lt;&lt;</span><span class=\"sy1\">]</span></pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">fib=.!arg:&lt;2|fib$(!arg+-2)+fib$(!arg+-1)</pre>"}, {"lang": "Brat", "loc": 3, "block": "<pre class=\"text highlighted_source\">fibonacci = { x |<br/>        true? x &lt; 2, x, { fibonacci(x - 1) + fibonacci(x - 2) }<br/>}</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>{0 1}{^^++[+[-^^-]\\/}30.*\\[e!vv<br/>\u00a0</pre>"}, {"lang": "C", "loc": 3, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">long</span> <span class=\"kw4\">long</span> fibb<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"br0\">(</span>fibb<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a<span class=\"sy0\">+</span>b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> target <span class=\"sy1\">=</span> <span class=\"nu0\">48</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> target<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>                <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> fib <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> b<span class=\"sy4\">;</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"F(\"</span><span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\") = \"</span> <span class=\"sy1\">&lt;&lt;</span> fib <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>                a <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span><br/>                b <span class=\"sy1\">=</span> fib<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 5, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">ulong</span> Fib<span class=\"br0\">(</span><span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> Fib<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Fib<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Cat", "loc": 6, "block": "<pre class=\"text highlighted_source\">define fib {<br/>  dup 1 &lt;=<br/>    []<br/>    [dup 1 - fib swap 2 - fib +]<br/>  if<br/>}</pre>"}, {"lang": "Chapel", "loc": 8, "block": "<pre class=\"text highlighted_source\">iter fib() {<br/>        var a = 0, b = 1;<br/>\u00a0<br/>        while true {<br/>                yield a;<br/>                (a, b) = (b, b + a);<br/>        }<br/>}</pre>"}, {"lang": "Chef", "loc": 31, "block": "<pre class=\"text highlighted_source\">Stir-Fried Fibonacci Sequence.<br/>\u00a0<br/>An unobfuscated iterative implementation.<br/>It prints the first N + 1 Fibonacci numbers,<br/>where N is taken from standard input.<br/>\u00a0<br/>Ingredients.<br/>0 g last<br/>1 g this<br/>0 g new<br/>0 g input<br/>\u00a0<br/>Method.<br/>Take input from refrigerator.<br/>Put this into 4th mixing bowl.<br/>Loop the input.<br/>Clean the 3rd mixing bowl.<br/>Put last into 3rd mixing bowl.<br/>Add this into 3rd mixing bowl.<br/>Fold new into 3rd mixing bowl.<br/>Clean the 1st mixing bowl.<br/>Put this into 1st mixing bowl.<br/>Fold last into 1st mixing bowl.<br/>Clean the 2nd mixing bowl.<br/>Put new into 2nd mixing bowl.<br/>Fold this into 2nd mixing bowl.<br/>Put new into 4th mixing bowl.<br/>Endloop input until looped.<br/>Pour contents of the 4th mixing bowl into baking dish.<br/>\u00a0<br/>Serves 1.</pre>"}, {"lang": "CMake", "loc": 28, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set_property\"><span class=\"kw1\">set_property</span></a><span class=\"sy0\">(</span><span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_0 0<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set_property\"><span class=\"kw1\">set_property</span></a><span class=\"sy0\">(</span><span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_1 1<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set_property\"><span class=\"kw1\">set_property</span></a><span class=\"sy0\">(</span><span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_next 2<span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\"># var = nth number in Fibonacci sequence.</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>fibonacci var n<span class=\"sy0\">)</span><br/>  <span class=\"co1\"># If the sequence is too short, compute more Fibonacci numbers.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:get_property\"><span class=\"kw1\">get_property</span></a><span class=\"sy0\">(</span>next <span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_next<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> next <span class=\"kw3\">GREATER</span> <span class=\"re0\">${n}</span><span class=\"sy0\">)</span><br/>    <span class=\"co1\"># a, b = last 2 Fibonacci numbers</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR i <span class=\"st0\">\"<span class=\"es1\">${next}</span> - 2\"</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:get_property\"><span class=\"kw1\">get_property</span></a><span class=\"sy0\">(</span>a <span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_<span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR i <span class=\"st0\">\"<span class=\"es1\">${next}</span> - 1\"</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:get_property\"><span class=\"kw1\">get_property</span></a><span class=\"sy0\">(</span>b <span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_<span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:while\"><span class=\"kw1\">while</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> next <span class=\"kw3\">GREATER</span> <span class=\"re0\">${n}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR i <span class=\"st0\">\"<span class=\"es1\">${a}</span> + <span class=\"es1\">${b}</span>\"</span><span class=\"sy0\">)</span>  <span class=\"co1\"># i = next Fibonacci number</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set_property\"><span class=\"kw1\">set_property</span></a><span class=\"sy0\">(</span><span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_<span class=\"re0\">${next}</span> <span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>a <span class=\"re0\">${b}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>b <span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR next <span class=\"st0\">\"<span class=\"es1\">${next}</span> + 1\"</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endwhile\"><span class=\"kw1\">endwhile</span></a><span class=\"sy0\">()</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set_property\"><span class=\"kw1\">set_property</span></a><span class=\"sy0\">(</span><span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_next <span class=\"re0\">${next}</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>\u00a0<br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:get_property\"><span class=\"kw1\">get_property</span></a><span class=\"sy0\">(</span>answer <span class=\"kw3\">GLOBAL</span> <span class=\"kw3\">PROPERTY</span> fibonacci_<span class=\"re0\">${n}</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> <span class=\"re0\">${answer}</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>fibonacci<span class=\"sy0\">)</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fibs <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a b<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>b <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 40, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">Program-ID</span><span class=\"sy0\">.</span> Fibonacci-<span class=\"kw3\">Sequence</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">Data</span> <span class=\"kw3\">Division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">Working-Storage</span> <span class=\"kw1\">Section</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">01</span>  FIBONACCI-PROCESSING<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  FIBONACCI-<span class=\"kw3\">NUMBER</span>  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span>   <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  FIB-ONE           <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span>   <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  FIB-TWO           <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span>   <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">01</span>  DESIRED-<span class=\"kw3\">COUNT</span>       <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">01</span>  FORMATTING<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  INTERM-RESULT     <span class=\"kw3\">PIC</span> Z<span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  FORMATTED-RESULT  <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  FORMATTED-<span class=\"kw3\">SPACE</span>   <span class=\"kw3\">PIC</span> x<span class=\"br0\">(</span><span class=\"nu0\">35</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">Procedure</span> <span class=\"kw3\">Division</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">000</span>-START-<span class=\"kw3\">PROGRAM</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Display</span> <span class=\"st0\">\"What place of the Fibonacci Sequence would you like (&lt;173)? \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Accept</span> DESIRED-<span class=\"kw3\">COUNT</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">If</span> DESIRED-<span class=\"kw3\">COUNT</span> <span class=\"kw3\">is</span> <span class=\"kw3\">less</span> <span class=\"kw3\">than</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">Stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">If</span> DESIRED-<span class=\"kw3\">COUNT</span> <span class=\"kw3\">is</span> <span class=\"kw3\">less</span> <span class=\"kw3\">than</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw2\">Move</span> FIBONACCI-<span class=\"kw3\">NUMBER</span> <span class=\"kw2\">to</span> INTERM-RESULT<br/>      <span class=\"kw2\">Move</span> INTERM-RESULT <span class=\"kw2\">to</span> FORMATTED-RESULT<br/>      <span class=\"kw3\">Unstring</span> FORMATTED-RESULT <span class=\"kw3\">delimited</span> <span class=\"kw3\">by</span> <span class=\"kw3\">all</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">into</span> FORMATTED-<span class=\"kw3\">SPACE</span><span class=\"sy0\">,</span>FORMATTED-RESULT<br/>      <span class=\"kw2\">Display</span> FORMATTED-RESULT<br/>      <span class=\"kw3\">Stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">Subtract</span> <span class=\"nu0\">1</span> <span class=\"kw3\">from</span> DESIRED-<span class=\"kw3\">COUNT</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> FIBONACCI-<span class=\"kw3\">NUMBER</span> <span class=\"kw2\">to</span> INTERM-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> INTERM-RESULT <span class=\"kw2\">to</span> FORMATTED-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">Unstring</span> FORMATTED-RESULT <span class=\"kw3\">delimited</span> <span class=\"kw3\">by</span> <span class=\"kw3\">all</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">into</span> FORMATTED-<span class=\"kw3\">SPACE</span><span class=\"sy0\">,</span>FORMATTED-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Display</span> FORMATTED-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Perform</span> <span class=\"nu0\">100</span>-COMPUTE-FIBONACCI <span class=\"kw2\">until</span> DESIRED-<span class=\"kw3\">COUNT</span> <span class=\"sy0\">=</span> <span class=\"kw3\">zero</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">Stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">100</span>-COMPUTE-FIBONACCI<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Compute</span> FIBONACCI-<span class=\"kw3\">NUMBER</span> <span class=\"sy0\">=</span> FIB-ONE<span class=\"sy0\"> + </span>FIB-TWO<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> FIB-TWO <span class=\"kw2\">to</span> FIB-ONE<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> FIBONACCI-<span class=\"kw3\">NUMBER</span> <span class=\"kw2\">to</span> FIB-TWO<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">Subtract</span> <span class=\"nu0\">1</span> <span class=\"kw3\">from</span> DESIRED-<span class=\"kw3\">COUNT</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> FIBONACCI-<span class=\"kw3\">NUMBER</span> <span class=\"kw2\">to</span> INTERM-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> INTERM-RESULT <span class=\"kw2\">to</span> FORMATTED-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">Unstring</span> FORMATTED-RESULT <span class=\"kw3\">delimited</span> <span class=\"kw3\">by</span> <span class=\"kw3\">all</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">into</span> FORMATTED-<span class=\"kw3\">SPACE</span><span class=\"sy0\">,</span>FORMATTED-RESULT<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Display</span> FORMATTED-RESULT<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 4, "block": "<pre class=\"coffeescript highlighted_source\">fib_ana = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    sqrt = Math.<span class=\"me1\">sqrt</span><br/>    phi = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> sqrt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    Math.<span class=\"me1\">round</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>phi<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">/</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Comefrom0x10", "loc": 15, "block": "<pre class=\"text highlighted_source\">stop = 6<br/>a = 1<br/>i = 1  # start<br/>a      # print result<br/>\u00a0<br/>fib<br/>  comefrom if i is 1  # start<br/>  b = 1<br/>  comefrom fib        # start of loop<br/>  i = i + 1<br/>  next_b = a + b<br/>  a = b<br/>  b = next_b<br/>\u00a0<br/>  comefrom fib if i &gt; stop</pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fibonacci-iterative <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>f0 <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>f1 <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">case</span> n<br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> f0<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span> f1<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>t <span class=\"br0\">(</span>loop for n from <span class=\"nu0\">2</span> to n<br/>             for a <span class=\"sy0\">=</span> f0 then b <span class=\"kw1\">and</span> b <span class=\"sy0\">=</span> f1 then result<br/>             for result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ a b<span class=\"br0\">)</span><br/>             finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Computer/zero Assembly", "loc": 22, "block": "<pre class=\"text highlighted_source\">loop:   LDA  y     \u00a0; higher No.<br/>        STA  temp<br/>        ADD  x     \u00a0; lower No.<br/>        STA  y<br/>        LDA  temp<br/>        STA  x<br/>\u00a0<br/>        LDA  count<br/>        SUB  one<br/>        BRZ  done<br/>\u00a0<br/>        STA  count<br/>        JMP  loop<br/>\u00a0<br/>done:   LDA  y<br/>        STP<br/>\u00a0<br/>one:         1<br/>count:       8     \u00a0; n = 10<br/>x:           1<br/>y:           1<br/>temp:        0</pre>"}, {"lang": "D", "loc": 89, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">long</span> sgn<span class=\"br0\">(</span><span class=\"kw2\">alias</span> unsignedFib<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// break sign manipulation apart</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> m <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"sy0\">-</span>n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>unsignedFib<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> unsignedFib<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> fibD<span class=\"br0\">(</span><span class=\"kw4\">uint</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Direct Calculation, correct for abs(m) &lt;= 84</span><br/>    <span class=\"kw4\">enum</span> sqrt5r <span class=\"sy0\">=</span>  1.0L <span class=\"sy0\">/</span> sqrt<span class=\"br0\">(</span>5.0L<span class=\"br0\">)</span><span class=\"sy0\">;</span>         <span class=\"co1\">//  1 / sqrt(5)</span><br/>    <span class=\"kw4\">enum</span> golden <span class=\"sy0\">=</span> <span class=\"br0\">(</span>1.0L <span class=\"sy0\">+</span> sqrt<span class=\"br0\">(</span>5.0L<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> 2.0L<span class=\"sy0\">;</span> <span class=\"co1\">// (1 + sqrt(5)) / 2</span><br/>    <span class=\"kw1\">return</span> roundTo<span class=\"sy0\">!</span><span class=\"kw4\">long</span><span class=\"br0\">(</span>pow<span class=\"br0\">(</span>golden<span class=\"sy0\">,</span> m<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sqrt5r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> fibI<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span> <span class=\"co1\">// Iterative</span><br/>    <span class=\"kw4\">long</span> thisFib <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> nextFib <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> tmp <span class=\"sy0\">=</span> nextFib<span class=\"sy0\">;</span><br/>        nextFib <span class=\"sy0\">+=</span> thisFib<span class=\"sy0\">;</span><br/>        thisFib  <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> thisFib<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> fibR<span class=\"br0\">(</span><span class=\"kw4\">uint</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Recursive</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> m <span class=\"sy0\">:</span> fibR<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibR<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> fibM<span class=\"br0\">(</span><span class=\"kw4\">uint</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// memoized Recursive</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">long</span><span class=\"br0\">[</span><span class=\"br0\">]</span> fib <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&gt;=</span> fib.<span class=\"me1\">length</span> <span class=\"br0\">)</span><br/>        fib <span class=\"sy0\">~=</span> fibM<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibM<span class=\"br0\">(</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> fib<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> sgn<span class=\"sy0\">!</span>fibD sfibD<span class=\"sy0\">;</span><br/><span class=\"kw2\">alias</span> sgn<span class=\"sy0\">!</span>fibI sfibI<span class=\"sy0\">;</span><br/><span class=\"kw2\">alias</span> sgn<span class=\"sy0\">!</span>fibR sfibR<span class=\"sy0\">;</span><br/><span class=\"kw2\">alias</span> sgn<span class=\"sy0\">!</span>fibM sfibM<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> fibG<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// generator(?)</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> yield<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> <span class=\"kw4\">class</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">final</span> <span class=\"kw4\">int</span> opApply<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> <span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span> dg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>sign<span class=\"sy0\">;</span> <span class=\"co1\">// prepare for pre-increment</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>f<span class=\"sy0\">;</span> <span class=\"kw2\">this</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dg<span class=\"br0\">(</span>idx <span class=\"sy0\">+=</span> sign<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">final</span> <span class=\"kw4\">int</span> opApply<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span> dg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">long</span> f0<span class=\"sy0\">,</span> f1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>p<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">m</span> <span class=\"sy0\">*</span> sign <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sign <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    yield <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>f0<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    yield <span class=\"sy0\">=</span> f0<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dg<span class=\"br0\">(</span>yield<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">auto</span> temp <span class=\"sy0\">=</span> f1<span class=\"sy0\">;</span><br/>                f1 <span class=\"sy0\">=</span> f0 <span class=\"sy0\">+</span> f1<span class=\"sy0\">;</span><br/>                f0 <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> to<span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Fib(%3d) = \"</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"D\u00a0:\u00a0%20d &lt;-\u00a0%20d +\u00a0%20d\"</span><span class=\"sy0\">,</span><br/>             sfibD<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibD<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibD<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"I\u00a0:\u00a0%20d &lt;-\u00a0%20d +\u00a0%20d\"</span><span class=\"sy0\">,</span><br/>             sfibI<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibI<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibI<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">36</span> <span class=\"sy0\">||</span> args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"co1\">// set a limit for recursive version</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"R\u00a0:\u00a0%20d &lt;-\u00a0%20d +\u00a0%20d\"</span><span class=\"sy0\">,</span><br/>                 sfibR<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibM<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibM<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"O\u00a0:\u00a0%20d &lt;-\u00a0%20d +\u00a0%20d\"</span><span class=\"sy0\">,</span><br/>             sfibM<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibM<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sfibM<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> f<span class=\"sy0\">;</span> fibG<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        writef<span class=\"br0\">(</span><span class=\"st0\">\"%d:%d | \"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 20, "block": "<pre class=\"text highlighted_source\">int fib(int n) {<br/>  if (n==0 || n==1) {<br/>    return n;<br/>  }<br/>  var prev=1;<br/>  var current=1;<br/>  for (var i=2; i&lt;n; i++) {<br/>    var next = prev + current;<br/>    prev = current;<br/>    current = next;    <br/>  }<br/>  return current;<br/>}<br/>\u00a0<br/>int fibRec(int n) =&gt; n==0 || n==1\u00a0? n\u00a0: fibRec(n-1) + fibRec(n-2);<br/>\u00a0<br/>main() {<br/>  print(fib(11));<br/>  print(fibRec(11));<br/>}</pre>"}, {"lang": "Delphi", "loc": 20, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> FibonacciI<span class=\"br0\">(</span>N<span class=\"sy1\">:</span> <span class=\"kw4\">Word</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> UInt64<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  Last<span class=\"sy1\">,</span> New<span class=\"sy1\">:</span> UInt64<span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">:</span> <span class=\"kw4\">Word</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> N &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> N<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>    Last <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> N <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      New <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Last <span class=\"sy3\">+</span> Result<span class=\"sy1\">;</span><br/>      Last <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result<span class=\"sy1\">;</span><br/>      Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> New<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "DWScript", "loc": 5, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>N <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> N &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span> Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> fib<span class=\"br0\">(</span>N<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> fib<span class=\"br0\">(</span>N<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> s <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> _ <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>n <span class=\"br0\">{</span> <br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> s<br/>        s <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> a<span class=\"sy0\">+</span>b<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    return s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fib n<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> n <br/>    <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>fib <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fib <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>remember 'fib #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>fib i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span> <span class=\"nu0\">13</span> <span class=\"nu0\">21</span> <span class=\"nu0\">34</span> <span class=\"nu0\">55</span> <span class=\"nu0\">89</span> <br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 29, "block": "<pre class=\"text highlighted_source\">//Calculates Fibonacci sequence up to n steps using Binet's closed form solution<br/>\u00a0<br/>\u00a0<br/>FibFunction(UNSIGNED2 n)\u00a0:= FUNCTION<br/>\tREAL Sqrt5\u00a0:= Sqrt(5); <br/>\tREAL Phi\u00a0:= (1+Sqrt(5))/2;<br/>\tREAL Phi_Inv\u00a0:= 1/Phi; <br/>\tUNSIGNED FibValue\u00a0:= ROUND( ( POWER(Phi,n)-POWER(Phi_Inv,n) ) /Sqrt5); <br/>\tRETURN FibValue; <br/>\tEND;  <br/>\u00a0<br/> FibSeries(UNSIGNED2 n)\u00a0:= FUNCTION<br/>\u00a0<br/> Fib_Layout\u00a0:= RECORD<br/> UNSIGNED5 FibNum;<br/> UNSIGNED5 FibValue; <br/> END; <br/>\u00a0<br/> FibSeq\u00a0:= DATASET(n+1,<br/>  TRANSFORM <br/> ( Fib_Layout <br/> , SELF.FibNum\u00a0:= COUNTER-1<br/> , SELF.FibValue\u00a0:= IF(SELF.FibNum&lt;2,SELF.FibNum, FibFunction(SELF.FibNum) )<br/> ) <br/> ); <br/>\u00a0<br/> RETURN FibSeq; <br/>\u00a0<br/> END; }</pre>"}, {"lang": "EDSAC order code", "loc": 52, "block": "<pre class=\"text highlighted_source\">[ Fibonacci sequence<br/>  ==================<br/>\u00a0<br/>  A program for the EDSAC<br/>\u00a0<br/>  Calculates the nth Fibonacci<br/>  number and displays it at the<br/>  top of storage tank 3<br/>\u00a0<br/>  The default value of n is 10<br/>\u00a0<br/>  To calculate other Fibonacci<br/>  numbers, set the starting value<br/>  of the count to n-2<br/>\u00a0<br/>  Works with Initial Orders 2 ]<br/>\u00a0<br/>\u00a0<br/>        T56K  [ set load point  ]<br/>        GK    [ set theta       ]<br/>\u00a0<br/>[ Orders ]<br/>\u00a0<br/>[  0 ]  <a class=\"__cf_email__\" data-cfemail=\"ecb8dedcac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a = 0           ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"cc8dfdfb8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a += y          ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"ecb9ddd4ac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ temp = a        ]<br/>        A1<a class=\"__cf_email__\" data-cfemail=\"9aacda\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a += x          ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"0155303641\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ y = a; a = 0    ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"4001717800\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a += temp       ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"db8feaed9b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ x = a; a = 0    ]<br/>\u00a0<br/>        <a class=\"__cf_email__\" data-cfemail=\"6021515920\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a = count       ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"3b680a0e7b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a -= 1          ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"7e2b4f473e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ count = a       ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"f0b5b0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>    [ if a&gt;=0 go to \u03b8 ]<br/>\u00a0<br/>        <a class=\"__cf_email__\" data-cfemail=\"4612747606\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a = 0           ]<br/>        <a class=\"__cf_email__\" data-cfemail=\"ce8ffff98e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ a += y          ]<br/>        T96F  [ C(96) = a; a = 0]<br/>\u00a0<br/>        ZF    [ halt ]<br/>\u00a0<br/>[ Data ]<br/>\u00a0<br/>[ 15 ]  P0D   [ const: 1        ]<br/>[ 16 ]  P0F   [ var: x = 0      ]<br/>[ 17 ]  P0D   [ var: y = 1      ]<br/>[ 18 ]  P0F   [ var: temp = 0   ]<br/>[ 19 ]  P4F   [ var: count = 8  ]<br/>[ 20 ]  P0F   [ used to clear a ]<br/>\u00a0<br/>        EZPF  [ begin execution ]</pre>"}, {"lang": "Eiffel", "loc": 52, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tfibonacci <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tnon_negative<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, n2, n1, tmp<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tn2 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\tn1 <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;=</span> n<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\ttmp <span class=\"sy0\">:=</span> n1<br/>\t\t\t\tn1 <span class=\"sy0\">:=</span> n2 <span class=\"sy0\">+</span> n1<br/>\t\t\t\tn2 <span class=\"sy0\">:=</span> tmp<br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> n1<br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tprint <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 3, "block": "<pre class=\"text highlighted_source\">fib = fib' 0 1           <br/>      where fib' a b 0 = a                 <br/>            fib' a b n = fib' b (a + b) (n - 1)</pre>"}, {"lang": "Elena", "loc": 26, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>fibu = (:i)<br/>[<br/>    var ac\u00a0:= Array new(2); populate(:i)(i).<br/>    if (i &lt; 2) <br/>        [ ^ ac[i] ];<br/>        [<br/>            2 to:i do(:i)<br/>            [<br/>                var t\u00a0:= ac[1].<br/>                ac[1]\u00a0:= ac[0] + ac[1].<br/>                ac[0]\u00a0:= t.<br/>            ].<br/>\u00a0<br/>            ^ ac[1]<br/>        ]        <br/>].<br/>\u00a0<br/>program =<br/>[<br/>    0 to:10 do(:i)<br/>    [<br/>        console printLine(fibu(i)).<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\">defmodule Fibonacci do<br/>    def fib(0), do: 0<br/>    def fib(1), do: 1<br/>    def fib(n), do: fib(0, 1, n-2)<br/>\u00a0<br/>    def fib(_, prv, -1), do: prv<br/>    def fib(prvprv, prv, n) do<br/>        next = prv + prvprv<br/>        fib(prv, next, n-1)<br/>    end<br/>end<br/>\u00a0<br/>IO.inspect Enum.map(0..10, fn i-&gt; Fibonacci.fib(i) end)</pre>"}, {"lang": "Elm", "loc": 5, "block": "<pre class=\"haskell highlighted_source\">fibonacci\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>fibonacci n <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>        n<br/>    <span class=\"kw1\">else</span><br/>        fibonacci<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibonacci<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun fib (n a b c)<br/>  (if (&lt; c n) (fib n b (+ a b) (+ 1 c) )<br/>    (if (= c n) b a) ))<br/>\u00a0<br/>(defun fibonacci (n) (if (&lt; n 2) n (fib n 0 1 1) ))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 8, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>fib<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>fib<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fib</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fib</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fib</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">fib</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"re3\">fib</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 28, "block": "<pre class=\"text highlighted_source\">!-------------------------------------------<br/>! derived from my book \"PROGRAMMARE IN ERRE\"<br/>! iterative solution<br/>!-------------------------------------------<br/>\u00a0<br/>PROGRAM FIBONACCI<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>!VAR F1#,F2#,TEMP#,COUNT%,N%<br/>\u00a0<br/>BEGIN   \u00a0!main<br/>   INPUT(\"Number\",N%)<br/>   F1=0<br/>   F2=1<br/>   REPEAT<br/>      TEMP=F2<br/>      F2=F1+F2<br/>      F1=TEMP<br/>      COUNT%=COUNT%+1<br/>   UNTIL COUNT%=N%<br/>   PRINT(\"FIB(\";N%;\")=\";F2)<br/>\u00a0<br/>  \u00a0! Obviously a FOR loop or a WHILE loop can<br/>  \u00a0! be used to solve this problem<br/>\u00a0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 6, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> fibor<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> n&lt;<span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">return</span> fibor<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">+</span>fibor<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "FALSE", "loc": 3, "block": "<pre class=\"text highlighted_source\">[[$0=~][<a class=\"__cf_email__\" data-cfemail=\"15243855\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@\\<a class=\"__cf_email__\" data-cfemail=\"103450\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@+\\$44,<a class=\"__cf_email__\" data-cfemail=\"bf91ff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]#]f:<br/>20n: {First 20 numbers}<br/>0 1 n;f;!%%44,. {Output: \"0,1,1,2,3,5...\"}</pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">: fib ( n -- m )<br/>    dup 2 &lt; [<br/>        [ 0 1 ] dip [ swap [ + ] keep ] times<br/>        drop<br/>    ] unless\u00a0;</pre>"}, {"lang": "Fancy", "loc": 14, "block": "<pre class=\"text highlighted_source\">class Fixnum {<br/>  def fib {<br/>    match self -&gt; {<br/>      case 0 -&gt; 0<br/>      case 1 -&gt; 1<br/>      case _ -&gt; self - 1 fib + (self - 2 fib)<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>15 times: |x| {<br/>  x fib println<br/>}<br/>\u00a0</pre>"}, {"lang": "Falcon", "loc": 13, "block": "<pre class=\"falcon highlighted_source\"><span class=\"kw1\">function</span> fib_i<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">return</span> n<br/>\u00a0<br/>    fibPrev <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    fib <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span>n<span class=\"br0\">]</span><br/>        tmp <span class=\"sy0\">=</span> fib<br/>        fib <span class=\"sy0\">+=</span> fibPrev<br/>        fibPrev <span class=\"sy0\">=</span> tmp<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> fib<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Fantom", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  static Int fib (Int n) <br/>  {<br/>    if (n &lt; 2) return n<br/>    fibNums\u00a0:= [1, 0]<br/>    while (fibNums.size &lt;= n)<br/>    {<br/>      fibNums.insert (0, fibNums[0] + fibNums[1])<br/>    }<br/>    return fibNums.first<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    20.times |n| <br/>    {<br/>      echo (\"Fib($n) is ${fib(n)}\")<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fexl", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># (fib n) = the nth Fibonacci number<br/>\\fib=<br/>    (<br/>    \\loop==<br/>        (\\x\\y\\n<br/>        le n 0 x;<br/>        \\z=(+ x y)<br/>        \\n=(- n 1)<br/>        loop y z n<br/>        )<br/>    loop 0 1<br/>    )<br/>\u00a0<br/>\u00a0<br/># Now test it:<br/>for 0 20 (\\n say (fib n))<br/>\u00a0</pre>"}, {"lang": "FOCAL", "loc": 11, "block": "<pre class=\"text highlighted_source\">01.10 TYPE \"FIBONACCI NUMBERS\"\u00a0!<br/>01.20 ASK \"N =\", N<br/>01.30 SET A=0<br/>01.40 SET B=1<br/>01.50 FOR I=2,N; DO 2.0<br/>01.60 TYPE \"F(N) \",\u00a0%8, B,\u00a0!<br/>01.70 QUIT<br/>\u00a0<br/>02.10 SET T=B<br/>02.20 SET B=A+B<br/>02.30 SET A=T</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: fib ( n -- fib )<br/>  0 1 rot 0\u00a0?do  over + swap  loop drop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 22, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">C     FIBONACCI SEQUENCE - FORTRAN IV</span><br/>      NN<span class=\"sy0\">=</span><span class=\"nu0\">46</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">1</span> I<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,NN<br/>    <span class=\"nu0\">1</span> WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"nu0\">300</span><span class=\"br0\">)</span> I,IFIBO<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>  <span class=\"nu0\">300</span> FORMAT<span class=\"br0\">(</span>1X,I2,1X,I10<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span><br/><span class=\"co1\">C</span><br/>      <span class=\"kw1\">FUNCTION</span> IFIBO<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"nu0\">9</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><br/>    <span class=\"nu0\">1</span> IFN<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">GOTO</span> <span class=\"nu0\">9</span><br/>    <span class=\"nu0\">2</span> <span class=\"kw1\">IF</span><span class=\"br0\">(</span>N<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">9</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><br/>    <span class=\"nu0\">3</span> IFN<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">GOTO</span> <span class=\"nu0\">9</span><br/>    <span class=\"nu0\">4</span> IFNM1<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      IFN<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">5</span> I<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,N<br/>      IFNM2<span class=\"sy0\">=</span>IFNM1<br/>      IFNM1<span class=\"sy0\">=</span>IFN<br/>    <span class=\"nu0\">5</span> IFN<span class=\"sy0\">=</span>IFNM1<span class=\"sy0\">+</span>IFNM2<br/>    <span class=\"nu0\">9</span> IFIBO<span class=\"sy0\">=</span>IFN<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 83, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">'Fibonacci extended</span><br/><span class=\"co1\">'Freebasic version 24  Windows</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> ADDQmod<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ubyte</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> ADDbool<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ubyte</span><br/>\u00a0<br/><span class=\"kw1\">For</span> z <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">19</span><br/>    ADDQmod<span class=\"br0\">(</span>z<span class=\"br0\">)</span>=<span class=\"br0\">(</span>z <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span>+<span class=\"nu0\">48</span><span class=\"br0\">)</span><br/>    ADDbool<span class=\"br0\">(</span>z<span class=\"br0\">)</span>=<span class=\"br0\">(</span>-<span class=\"br0\">(</span><span class=\"nu0\">10</span>&lt;=z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> z <br/>\u00a0<br/><span class=\"kw1\">Function</span> plusINT<span class=\"br0\">(</span>NUM1 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>,NUM2 <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Byte</span> flag<br/>    <span class=\"co2\">#macro finish()</span><br/>    three=<span class=\"kw1\">Ltrim</span><span class=\"br0\">(</span>three,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> three=<span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"0\"</span><br/>    <span class=\"kw1\">If</span> flag=<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Swap</span> NUM2,NUM1<br/>    <span class=\"kw1\">Return</span> three<br/>    <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    <span class=\"co2\">#endmacro</span><br/>    var lenf=<span class=\"kw1\">Len</span><span class=\"br0\">(</span>NUM1<span class=\"br0\">)</span><br/>    var lens=<span class=\"kw1\">Len</span><span class=\"br0\">(</span>NUM2<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> lens&gt;lenf <span class=\"kw1\">Then</span> <br/>        <span class=\"kw1\">Swap</span> NUM2,NUM1<br/>        <span class=\"kw1\">Swap</span> lens,lenf<br/>        flag=<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    var diff=lenf-lens-<span class=\"kw1\">Sgn</span><span class=\"br0\">(</span>lenf-lens<span class=\"br0\">)</span><br/>    var three=<span class=\"st0\">\"0\"</span>+NUM1<br/>    var two=<span class=\"kw1\">String</span><span class=\"br0\">(</span>lenf-lens,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>+NUM2<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n2<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Ubyte</span> addup,addcarry<br/>\u00a0<br/>    addcarry=<span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> n2=lenf-<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> diff <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span> <br/>        addup=two<span class=\"br0\">[</span>n2<span class=\"br0\">]</span>+NUM1<span class=\"br0\">[</span>n2<span class=\"br0\">]</span>-<span class=\"nu0\">96</span><br/>        three<span class=\"br0\">[</span>n2+<span class=\"nu0\">1</span><span class=\"br0\">]</span>=addQmod<span class=\"br0\">(</span>addup+addcarry<span class=\"br0\">)</span><br/>        addcarry=addbool<span class=\"br0\">(</span>addup+addcarry<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> n2 <br/>    <span class=\"kw1\">If</span> addcarry=<span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <br/>        finish<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> n2=-<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <br/>        three<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=addcarry+<span class=\"nu0\">48</span><br/>        finish<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> n2=n2 <span class=\"kw1\">To</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span> <br/>        addup=two<span class=\"br0\">[</span>n2<span class=\"br0\">]</span>+NUM1<span class=\"br0\">[</span>n2<span class=\"br0\">]</span>-<span class=\"nu0\">96</span><br/>        three<span class=\"br0\">[</span>n2+<span class=\"nu0\">1</span><span class=\"br0\">]</span>=addQmod<span class=\"br0\">(</span>addup+addcarry<span class=\"br0\">)</span><br/>        addcarry=addbool<span class=\"br0\">(</span>addup+addcarry<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> n2<br/>    three<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=addcarry+<span class=\"nu0\">48</span><br/>    finish<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span>  fibonacci<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> sl,l,term<br/>    sl=<span class=\"st0\">\"0\"</span>: l=<span class=\"st0\">\"1\"</span><br/>    <span class=\"kw1\">If</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"0\"</span><br/>    <span class=\"kw1\">If</span> n=<span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"1\"</span><br/>    n=n-<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">For</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        term=plusINT<span class=\"br0\">(</span>l,sl<span class=\"br0\">)</span><br/>        sl=l<br/>        l=term<br/>    <span class=\"kw1\">Next</span> x<br/>    <span class=\"kw1\">Function</span> =term<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">'==============  EXAMPLE ===============</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"THE SEQUENCE TO 10:\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">For</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>=<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"term\"</span>;n;<span class=\"st0\">\": \"</span>; fibonacci<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> n<br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Selected Fibonacci number\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Fibonacci 500\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> fibonacci<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fibonacciN[n]\u00a0:=<br/>{<br/>   a = 0<br/>   b = 1<br/>   count = 0<br/>   while count &lt; n<br/>   {<br/>      [a,b] = [b, a + b]<br/>      count = count + 1<br/>   }<br/>   return a<br/>}<br/>\u00a0</pre>"}, {"lang": "FRISC Assembly", "loc": 23, "block": "<pre class=\"text highlighted_source\">FIBONACCI   PUSH   R1<br/>            PUSH   R2<br/>            PUSH   R3<br/>\u00a0<br/>            MOVE   0,  R1<br/>            MOVE   1,  R2<br/>\u00a0<br/>FIB_LOOP    SUB    R0,  1, R0<br/>            JP_Z   FIB_DONE<br/>\u00a0<br/>            MOVE   R2, R3<br/>            ADD    R1, R2, R2<br/>            MOVE   R3, R1<br/>\u00a0<br/>            JP     FIB_LOOP<br/>\u00a0<br/>FIB_DONE    MOVE   R2, R0<br/>\u00a0<br/>            POP    R3<br/>            POP    R2<br/>            POP    R1<br/>\u00a0<br/>            RET</pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> fibonacci n\u00a0: bigint <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> f a b n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span><br/>    | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> a<br/>    | <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> b<br/>    | n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f b <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  f <span class=\"br0\">(</span>bigint <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>bigint <span class=\"nu0\">1</span><span class=\"br0\">)</span> n<br/><span class=\"sy0\">&gt;</span> fibonacci <span class=\"nu0\">100</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: bigint <span class=\"sy0\">=</span> 354224848179261915075I</pre>"}, {"lang": "FunL", "loc": 4, "block": "<pre class=\"text highlighted_source\">def<br/>  fib( 0 ) = 0<br/>  fib( 1 ) = 1<br/>  fib( n ) = fib( n - 1 ) + fib( n - 2 )</pre>"}, {"lang": "Futhark", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fun main(n: int): int =<br/>  loop((a,b) = (0,1)) = for _i &lt; n do<br/>    (b, a + b)<br/>  in a<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"Tlbx Timer.incl\" <br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn Fibonacci( n as long ) as Long<br/>begin globals<br/>dim as long s1, s2// static<br/>end globals<br/>\u00a0<br/>dim as long temp<br/>\u00a0<br/>if ( n &lt; 2 )<br/>  s1 = n<br/>  exit fn<br/>else<br/>  temp = s1 + s2<br/>  s2 = s1<br/>  s1 = temp<br/>  exit fn<br/>end if<br/>end fn = s1<br/>\u00a0<br/>dim as long i<br/>dim as UnsignedWide  start, finish<br/>\u00a0<br/>Microseconds( @start )<br/>for i = 0 to 40<br/>print i; \". \"; fn Fibonacci(i)<br/>next i<br/>Microseconds( @finish )<br/>print \"Compute time:\"; (finish.lo - start.lo ) / 1000; \" ms\"<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 5, "block": "<pre class=\"text highlighted_source\">fib\u00a0:= function(n)<br/>  local a;<br/>  a\u00a0:= [[0, 1], [1, 1]]^n;<br/>  return a[1][2];<br/>end;</pre>"}, {"lang": "Gecho", "loc": 1, "block": "<pre class=\"text highlighted_source\">0 1 dup wover + dup wover + dup wover + dup wover +</pre>"}, {"lang": "GFA Basic", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'<br/>' Compute nth Fibonacci number<br/>'<br/>' open a window for display<br/>OPENW 1<br/>CLEARW 1<br/>' Display some fibonacci numbers<br/>' Fib(46) is the largest number GFA Basic can reach<br/>' (long integers are 4 bytes)<br/>FOR i%=0 TO 46<br/>  PRINT \"fib(\";i%;\")=\";@fib(i%)<br/>NEXT i%<br/>' wait for a key press and tidy up<br/>~INP(2)<br/>CLOSEW 1<br/>'<br/>' Function to compute nth fibonacci number<br/>' n must be in range 0 to 46, inclusive<br/>'<br/>FUNCTION fib(n%)<br/>  LOCAL n0%,n1%,nn%,i%<br/>  n0%=0<br/>  n1%=1<br/>  SELECT n%<br/>  CASE 0<br/>    RETURN n0%<br/>  CASE 1<br/>    RETURN n1%<br/>  DEFAULT<br/>    FOR i%=2 TO n%<br/>      nn%=n0%+n1%<br/>      n0%=n1%<br/>      n1%=nn%<br/>    NEXT i%<br/>    RETURN nn%<br/>  ENDSELECT<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "GML", "loc": 25, "block": "<pre class=\"gml highlighted_source\"><span class=\"co1\">///fibonacci(n)</span><br/><span class=\"co1\">//Returns the nth fibonacci number</span><br/>\u00a0<br/><span class=\"kw1\">var</span> n<span class=\"sy0\">,</span> numb<span class=\"sy0\">;</span><br/>n <span class=\"sy0\">=</span> argument0<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    numb <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> fm2<span class=\"sy0\">,</span> fm1<span class=\"sy0\">;</span><br/>    fm2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    fm1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    numb <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        numb <span class=\"sy0\">=</span> fm2<span class=\"sy0\">+</span>fm1<span class=\"sy0\">;</span><br/>        fm2 <span class=\"sy0\">=</span> fm1<span class=\"sy0\">;</span><br/>        fm1 <span class=\"sy0\">=</span> numb<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">return</span> numb<span class=\"sy0\">;</span></pre>"}, {"lang": "Go", "loc": 6, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> fib<span class=\"sy1\">(</span>a <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>  <span class=\"kw1\">if</span> a &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> a<br/>  <span class=\"sy1\">}</span><br/>  <span class=\"kw1\">return</span> fib<span class=\"sy1\">(</span>a <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> fib<span class=\"sy1\">(</span>a <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 8, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rFib<br/>rFib <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <br/>    it <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>   <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <br/>   \u00a0: it <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <br/>   \u00a0: it <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>  <span class=\"sy0\">?</span> rFib<span class=\"br0\">(</span>it<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> rFib<span class=\"br0\">(</span>it<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"coMULTI\">/*it &lt; 0*/</span>: rFib<span class=\"br0\">(</span>it<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> rFib<span class=\"br0\">(</span>it<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Harbour", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include \"harbour.ch\"<br/>Function fibb(a,b,n)<br/>return(if(--n&gt;0,fibb(b,a+b,n),a))<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\">main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><br/>    <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0.01</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> p <span class=\"sy0\">**</span> n <span class=\"sy0\">+</span> p <span class=\"sy0\">**</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <br/>    <span class=\"sy0\">,</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">42</span><span class=\"br0\">]</span> <span class=\"br0\">]</span></pre>"}, {"lang": "Haxe", "loc": 15, "block": "<pre class=\"text highlighted_source\">static function fib(steps:Int, handler:Int-&gt;Void)<br/>{<br/>\tvar current = 0;<br/>\tvar next = 1;<br/>\u00a0<br/>\tfor (i in 1...steps)<br/>\t{<br/>\t\thandler(current);<br/>\u00a0<br/>\t\tvar temp = current + next;<br/>\t\tcurrent = next;<br/>\t\tnext = temp;<br/>\t}<br/>\thandler(current);<br/>}</pre>"}, {"lang": "Hope", "loc": 4, "block": "<pre class=\"text highlighted_source\">dec f\u00a0: num -&gt; num;<br/>--- f 0 &lt;= 0;<br/>--- f 1 &lt;= 1;<br/>--- f(n+2) &lt;= f n + f(n+1);</pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> Fibonacci<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>Fibonacci <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"sy1\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> Fibonacci<span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> Fibonacci<span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>ClipBoard<span class=\"br0\">)</span> Fibonacci <span class=\"co1\">! 0 1 1 2 3 5 8 13 21 34</span></pre>"}, {"lang": "Hy", "loc": 4, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fib <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        n<br/>        <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>fib <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fib <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>fib<span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"kw4\">args</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> fCache<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>        fCache <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        fCache<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>        fCache<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"sy1\">/</span>fCache<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> fib<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> fib<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> fCache<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 3, "block": "<pre class=\"idl highlighted_source\">function fib,n<br/>   if n lt <span class=\"nu0\">3</span> then return,1L else return, fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>end</pre>"}, {"lang": "Idris", "loc": 5, "block": "<pre class=\"text highlighted_source\">fibAnalytic\u00a0: Nat -&gt; Double<br/>fibAnalytic n = <br/>    floor $ ((pow goldenRatio n) - (pow (-1.0/goldenRatio) n))  / sqrt(5)<br/>  where goldenRatio\u00a0: Double <br/>        goldenRatio = (1.0 + sqrt(5)) / 2.0</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   fibN=: <span class=\"sy0\">(</span>-&amp;<span class=\"nu0\">2</span> +&amp;$: -&amp;<span class=\"nu0\">1</span><span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;&lt;<span class=\"sy0\">)</span> M.\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 15, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> itFibN<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/> <span class=\"kw4\">long</span> ans <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw4\">long</span> n1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw4\">long</span> n2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">--;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  ans <span class=\"sy0\">=</span> n1 <span class=\"sy0\">+</span> n2<span class=\"sy0\">;</span><br/>  n1 <span class=\"sy0\">=</span> n2<span class=\"sy0\">;</span><br/>  n2 <span class=\"sy0\">=</span> ans<span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/> <span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy0\">?</span>n<span class=\"sy0\">:</span>fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">DEFINE fib == [small] [] [pred dup pred] [+] binrec.</pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">def nth_fib_naive(n):<br/>  if (n &lt; 2) then n<br/>  else nth_fib_naive(n - 1) + nth_fib_naive(n - 2)<br/>  end;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">fib(n) = n &lt; 2\u00a0? n\u00a0: fib(n-1) + fib(n-2)</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">{:[x&lt;3;1;_f[x-1]+_f[x-2]]}</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">fib(n) = n &lt; 2\u00a0? n\u00a0: fib(n-1) + fib(n-2)</pre>"}, {"lang": "Kabap", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// Calculate the $n'th Fibonacci number<br/>\u00a0<br/>// Set this to how many in the sequence to generate<br/>$n = 10;<br/>\u00a0<br/>// These are what hold the current calculation<br/>$a = 0;<br/>$b = 1;<br/>\u00a0<br/>// This holds the complete sequence that is generated<br/>$sequence = \"\";<br/>\u00a0<br/>// Prepare a loop<br/>$i = 0;<br/>:calcnextnumber;<br/>\t$i = $i++;<br/>\u00a0<br/>\t// Do the calculation for this loop iteration<br/>\t$b = $a + $b;<br/>\t$a = $b - $a;<br/>\u00a0<br/>\t// Add the result to the sequence<br/>\t$sequence = $sequence &lt;&lt; $a;<br/>\u00a0<br/>\t// Make the loop run a fixed number of times<br/>\tif $i &lt; $n; {<br/>\t\t$sequence = $sequence &lt;&lt; \", \";<br/>\t\tgoto calcnextnumber;<br/>\t}<br/>\u00a0<br/>// Use the loop counter as the placeholder<br/>$i--;<br/>\u00a0<br/>// Return the sequence<br/>return = \"Fibonacci number \" &lt;&lt; $i &lt;&lt; \" is \" &lt;&lt; $a &lt;&lt; \" (\" &lt;&lt; $sequence &lt;&lt; \")\";<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 31, "block": "<pre class=\"scala highlighted_source\">enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Fibonacci <span class=\"br0\">{</span><br/>    ITERATIVE <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            n<br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n1 <span class=\"sy0\">=</span> 0L<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n2 <span class=\"sy0\">=</span> 1L<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> n<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> n1 + n2<br/>                n1 <span class=\"sy0\">=</span> n2<br/>                n2 <span class=\"sy0\">=</span> sum<br/>            <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i-- <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            n1<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>,<br/>    RECURSIVE <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> n <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> operator fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>..30L<br/>    Fibonacci.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${it.name}: \"</span><span class=\"br0\">)</span><br/>        r.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span> + it<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "L++", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn int fib <span class=\"br0\">(</span>int n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>? <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> n <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>fib <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fib <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>main <span class=\"br0\">(</span>prn <span class=\"br0\">(</span>fib <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "LabVIEW", "loc": 7, "block": "<pre class=\"text highlighted_source\">[] '__A set\u00a0: dip swap __A swap 2 compress collapse '__A set execute<br/>    __A -1 extract nip\u00a0; \u00a0: nip swap drop\u00a0; \u00a0: tuck swap over\u00a0;<br/>: -rot rot rot\u00a0;\u00a0: 0= 0 ==\u00a0;\u00a0: 1+ 1 +\u00a0;\u00a0: 1- 1 -\u00a0;\u00a0: sum '+ reduce\u00a0;<br/>: bi 'keep dip execute\u00a0; \u00a0: keep over 'execute dip\u00a0;<br/>\u00a0<br/>: fib dup 1 &gt; if dup 1- fib swap 2 - fib + then\u00a0;<br/>: fib  dup 1 &gt; if \"1- fib\" \"2 - fib\" bi + then\u00a0;</pre>"}, {"lang": "Lang5", "loc": 7, "block": "<pre class=\"text highlighted_source\">[] '__A set\u00a0: dip swap __A swap 2 compress collapse '__A set execute<br/>    __A -1 extract nip\u00a0; \u00a0: nip swap drop\u00a0; \u00a0: tuck swap over\u00a0;<br/>: -rot rot rot\u00a0;\u00a0: 0= 0 ==\u00a0;\u00a0: 1+ 1 +\u00a0;\u00a0: 1- 1 -\u00a0;\u00a0: sum '+ reduce\u00a0;<br/>: bi 'keep dip execute\u00a0; \u00a0: keep over 'execute dip\u00a0;<br/>\u00a0<br/>: fib dup 1 &gt; if dup 1- fib swap 2 - fib + then\u00a0;<br/>: fib  dup 1 &gt; if \"1- fib\" \"2 - fib\" bi + then\u00a0;</pre>"}, {"lang": "lambdatalk", "loc": 85, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span><span class=\"br0\">)</span> basic version <br/><span class=\"br0\">{</span>def fib1 <br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>\u00a0:n <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>   then <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span>fib1 <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>fib1 <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span>fib1 <span class=\"nu0\">16</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">987</span>   <span class=\"br0\">(</span>CPU ~ 16ms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>fib1 <span class=\"nu0\">30</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">832040</span> <span class=\"br0\">(</span>CPU <span class=\"sy0\">&gt;</span> 12000ms<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">2</span><span class=\"br0\">)</span> tail<span class=\"sy0\">-</span>recursive version<br/><span class=\"br0\">{</span>def fib2<br/> <span class=\"br0\">{</span>def fib2.r <br/>  <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:a\u00a0:b\u00a0:i<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>\u00a0:i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <br/>    then\u00a0:a <br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>fib2.r\u00a0:b <span class=\"br0\">{</span><span class=\"sy0\">+</span>\u00a0:a\u00a0:b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:i <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span> <span class=\"br0\">{</span>fib2.r <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>\u00a0:n<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span>fib2 <span class=\"nu0\">16</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">987</span>    <span class=\"br0\">(</span>CPU ~ 1ms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>fib2 <span class=\"nu0\">30</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">832040</span> <span class=\"br0\">(</span>CPU ~2ms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>fib2 <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> 4.346655768693743e<span class=\"sy0\">+</span>208 <span class=\"br0\">(</span>CPU ~ 22ms<span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"nu0\">3</span><span class=\"br0\">)</span> Dijkstra Algorithm<br/><span class=\"br0\">{</span>def fib3<br/> <span class=\"br0\">{</span>def fib3.r<br/>  <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:a\u00a0:b\u00a0:p\u00a0:q\u00a0:count<span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">=</span>\u00a0:count <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    then\u00a0:b<br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">%</span>\u00a0:count <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    then <span class=\"br0\">{</span>fib3.r\u00a0:a\u00a0:b<br/>                <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:p\u00a0:p<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:q\u00a0:q<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>                <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:q\u00a0:q<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span>\u00a0:p\u00a0:q<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>                <span class=\"br0\">{</span><span class=\"sy0\">/</span>\u00a0:count <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>fib3.r <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:b\u00a0:q<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:a\u00a0:q<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:a\u00a0:p<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>                <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:b\u00a0:p<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span>\u00a0:a\u00a0:q<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>               \u00a0:p\u00a0:q<br/>                <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:count <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>fib3.r <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span>fib3 <span class=\"nu0\">16</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">987</span>    <span class=\"br0\">(</span>CPU ~ 2ms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>fib3 <span class=\"nu0\">30</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">832040</span> <span class=\"br0\">(</span>CPU ~ 2ms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>fib3 <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> 4.346655768693743e<span class=\"sy0\">+</span>208 <span class=\"br0\">(</span>CPU ~ 3ms<span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"nu0\">4</span><span class=\"br0\">)</span> memoization<br/><span class=\"br0\">{</span>def fib4<br/> <span class=\"br0\">{</span>def fib4.m <span class=\"br0\">{</span>array.new<span class=\"br0\">}</span><span class=\"br0\">}</span>    <span class=\"sy0\">//</span> init an empty array<br/> <span class=\"br0\">{</span>def fib4.r <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>\u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>   then <span class=\"br0\">{</span>array.get <span class=\"br0\">{</span>array.<span class=\"kw1\">set!</span> <span class=\"br0\">{</span>fib4.m<span class=\"br0\">}</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span>      <span class=\"sy0\">//</span> init with <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"kw1\">equal?</span> <span class=\"br0\">{</span>array.get <span class=\"br0\">{</span>fib4.m<span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span> undefined<span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> exists<br/>   then <span class=\"br0\">{</span>array.get <span class=\"br0\">{</span>array.<span class=\"kw1\">set!</span> <span class=\"br0\">{</span>fib4.m<span class=\"br0\">}</span>\u00a0:n<br/>                        <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"br0\">{</span>fib4.r <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>                           <span class=\"br0\">{</span>fib4.r <span class=\"br0\">{</span><span class=\"sy0\">-</span>\u00a0:n <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span>   <span class=\"sy0\">//</span> compute it<br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span>array.get <span class=\"br0\">{</span>fib4.m<span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span>                   <span class=\"sy0\">//</span> <span class=\"kw1\">else</span> get it<br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>fib4.r\u00a0:n<span class=\"br0\">}</span> <br/>  <span class=\"br0\">{</span>fib4.m<span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"kw1\">display</span> the number <span class=\"kw1\">AND</span> all its predecessors<br/><span class=\"sy0\">-&gt;</span> fib4<br/><span class=\"br0\">{</span>fib4 <span class=\"nu0\">90</span><span class=\"br0\">}</span>  <br/><span class=\"sy0\">-&gt;</span> <span class=\"nu0\">4660046610375530000</span> <br/><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">13</span>,<span class=\"nu0\">21</span>,<span class=\"nu0\">34</span>,<span class=\"nu0\">55</span>,<span class=\"nu0\">89</span>,<span class=\"nu0\">144</span>,<span class=\"nu0\">233</span>,<span class=\"nu0\">377</span>,<span class=\"nu0\">610</span>,<span class=\"nu0\">987</span>,<span class=\"nu0\">1597</span>,<span class=\"nu0\">2584</span>,<span class=\"nu0\">4181</span>,<span class=\"nu0\">6765</span>,<span class=\"nu0\">10946</span>,<span class=\"nu0\">17711</span>,<span class=\"nu0\">28657</span>,<span class=\"nu0\">46368</span>,<span class=\"nu0\">75025</span>,<span class=\"nu0\">121393</span>,<span class=\"nu0\">196418</span>,<br/><span class=\"nu0\">317811</span>,<span class=\"nu0\">514229</span>,<span class=\"nu0\">832040</span>,<span class=\"nu0\">1346269</span>,<span class=\"nu0\">2178309</span>,<span class=\"nu0\">3524578</span>,<span class=\"nu0\">5702887</span>,<span class=\"nu0\">9227465</span>,<span class=\"nu0\">14930352</span>,<span class=\"nu0\">24157817</span>,<span class=\"nu0\">39088169</span>,<span class=\"nu0\">63245986</span>,<span class=\"nu0\">102334155</span>,<br/><span class=\"nu0\">165580141</span>,<span class=\"nu0\">267914296</span>,<span class=\"nu0\">433494437</span>,<span class=\"nu0\">701408733</span>,<span class=\"nu0\">1134903170</span>,<span class=\"nu0\">1836311903</span>,<span class=\"nu0\">2971215073</span>,<span class=\"nu0\">4807526976</span>,<span class=\"nu0\">7778742049</span>,<span class=\"nu0\">12586269025</span>,<br/><span class=\"nu0\">20365011074</span>,<span class=\"nu0\">32951280099</span>,<span class=\"nu0\">53316291173</span>,<span class=\"nu0\">86267571272</span>,<span class=\"nu0\">139583862445</span>,<span class=\"nu0\">225851433717</span>,<span class=\"nu0\">365435296162</span>,<span class=\"nu0\">591286729879</span>,<span class=\"nu0\">956722026041</span>,<br/><span class=\"nu0\">1548008755920</span>,<span class=\"nu0\">2504730781961</span>,<span class=\"nu0\">4052739537881</span>,<span class=\"nu0\">6557470319842</span>,<span class=\"nu0\">10610209857723</span>,<span class=\"nu0\">17167680177565</span>,<span class=\"nu0\">27777890035288</span>,<span class=\"nu0\">44945570212853</span>,<br/><span class=\"nu0\">72723460248141</span>,<span class=\"nu0\">117669030460994</span>,<span class=\"nu0\">190392490709135</span>,<span class=\"nu0\">308061521170129</span>,<span class=\"nu0\">498454011879264</span>,<span class=\"nu0\">806515533049393</span>,<span class=\"nu0\">1304969544928657</span>,<br/><span class=\"nu0\">2111485077978050</span>,<span class=\"nu0\">3416454622906707</span>,<span class=\"nu0\">5527939700884757</span>,<span class=\"nu0\">8944394323791464</span>,<span class=\"nu0\">14472334024676220</span>,<span class=\"nu0\">23416728348467684</span>,<br/><span class=\"nu0\">37889062373143900</span>,<span class=\"nu0\">61305790721611580</span>,<span class=\"nu0\">99194853094755490</span>,<span class=\"nu0\">160500643816367070</span>,<span class=\"nu0\">259695496911122560</span>,<span class=\"nu0\">420196140727489660</span>,<br/><span class=\"nu0\">679891637638612200</span>,<span class=\"nu0\">1100087778366101900</span>,<span class=\"nu0\">1779979416004714000</span>,<span class=\"nu0\">2880067194370816000</span>,<span class=\"nu0\">4660046610375530000</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"nu0\">5</span><span class=\"br0\">)</span> Binet'<span class=\"kw1\">s</span> formula <span class=\"br0\">(</span>non recursive<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>def fib5 <br/> <span class=\"br0\">{</span><span class=\"kw1\">lambda</span> <span class=\"br0\">{</span>:n<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><span class=\"kw1\">let</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span>:n\u00a0:n<span class=\"br0\">}</span> <span class=\"br0\">{</span>:sqrt5 <span class=\"br0\">{</span><span class=\"kw1\">sqrt</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>round <span class=\"br0\">{</span><span class=\"sy0\">/</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span> <span class=\"br0\">{</span>pow <span class=\"br0\">{</span><span class=\"sy0\">/</span> <span class=\"br0\">{</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\u00a0:sqrt5<span class=\"br0\">}</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span> <br/>                <span class=\"br0\">{</span>pow <span class=\"br0\">{</span><span class=\"sy0\">/</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\u00a0:sqrt5<span class=\"br0\">}</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span>\u00a0:n<span class=\"br0\">}</span><span class=\"br0\">}</span>\u00a0:sqrt5<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span>fib5 <span class=\"nu0\">16</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">987</span>    <span class=\"br0\">(</span>CPU ~ 1ms<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span>fib5 <span class=\"nu0\">30</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">832040</span> <span class=\"br0\">(</span>CPU ~ 1ms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>fib5 <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> 4.346655768693743e<span class=\"sy0\">+</span>208 <span class=\"br0\">(</span>CPU ~ 1ms<span class=\"br0\">)</span>  <br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Lasso", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>define fibonacci(n::integer) =&gt; {<br/>\u00a0<br/>\t#n &lt; 1\u00a0? return false<br/>\u00a0<br/>\tlocal(<br/>\t\tswap\t= 0,<br/>\t\tn1\t\t= 0,<br/>\t\tn2\t\t= 1<br/>\t)<br/>\u00a0<br/>\tloop(#n) =&gt; {<br/>        #swap = #n1 + #n2;<br/>        #n2 = #n1;<br/>        #n1 = #swap;<br/>\t}<br/>\treturn #n1<br/>\u00a0<br/>}<br/>\u00a0<br/>fibonacci(0) //-&gt;output false<br/>fibonacci(1) //-&gt;output 1<br/>fibonacci(2) //-&gt;output 1<br/>fibonacci(3) //-&gt;output 2<br/>\u00a0</pre>"}, {"lang": "LFE", "loc": 8, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fib<br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>fib <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>fib <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 24, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">15</span><br/>    <span class=\"kw1\">print</span> fiboR<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>fiboI<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">function</span> fiboR<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        fiboR <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">else</span><br/>        fiboR <span class=\"sy0\">=</span> fiboR<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fiboR<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> fiboI<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/>        temp <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b<br/>        a <span class=\"sy0\">=</span> b<br/>        b <span class=\"sy0\">=</span> temp<br/>    <span class=\"kw1\">next</span> i<br/>    fiboI <span class=\"sy0\">=</span> a<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 4, "block": "<pre class=\"text highlighted_source\">on fib (n)<br/>  if n&lt;2 then return n<br/>  return fib(n-1)+fib(n-2)<br/>end</pre>"}, {"lang": "Lisaac", "loc": 9, "block": "<pre class=\"text highlighted_source\">- fib(n\u00a0: UINTEGER_32)\u00a0: UINTEGER_64 &lt;- (<br/>  + result\u00a0: UINTEGER_64;<br/>  (n &lt; 2).if {<br/>    result\u00a0:= n;<br/>  } else {<br/>    result\u00a0:= fib(n - 1) + fib(n - 2);<br/>  };<br/>  result<br/>);</pre>"}, {"lang": "LiveCode", "loc": 20, "block": "<pre class=\"text highlighted_source\">-- Iterative, translation of the basic version.<br/>function fibi n<br/>    put 0 into aa<br/>    put 1 into b<br/>    repeat with i = 1 to n<br/>        put aa + b into temp<br/>        put b into aa<br/>        put temp into b<br/>    end repeat<br/>    return aa<br/>end fibi<br/>\u00a0<br/>-- Recursive<br/>function fibr n<br/>     if n &lt;= 1 then<br/>        return n<br/>    else<br/>        return fibr(n-1) + fibr(n-2)<br/>    end if<br/>end fibr</pre>"}, {"lang": "Logo", "loc": 4, "block": "<pre class=\"text highlighted_source\">to fib\u00a0:n [:a 0] [:b 1]<br/>  if\u00a0:n &lt; 1 [output\u00a0:a]<br/>  output (fib\u00a0:n-1\u00a0:b\u00a0:a+:b)<br/>end</pre>"}, {"lang": "LOLCODE", "loc": 18, "block": "<pre class=\"lolcode highlighted_source\">\u00a0<br/><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.2</span><br/>HOW DUZ I fibonacci <span class=\"kw4\">YR</span> N<br/>  <span class=\"kw2\">EITHER</span> <span class=\"kw2\">OF</span> <span class=\"kw2\">BOTH SAEM</span> N <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <span class=\"kw4\">AN</span> <span class=\"kw2\">BOTH SAEM</span> N <span class=\"kw4\">AN</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw2\">O RLY?</span><br/>    YA RLY<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span> <span class=\"nu0\">1</span><br/>    NO WAI<br/>      <span class=\"kw1\">I HAS A</span> N1<br/>      <span class=\"kw1\">I HAS A</span> N2<br/>      N1 <span class=\"kw1\">R</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> N <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/>      N2 <span class=\"kw1\">R</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> N <span class=\"kw4\">AN</span> <span class=\"nu0\">2</span><br/>      N1 <span class=\"kw1\">R</span> fibonacci N1<br/>      N2 <span class=\"kw1\">R</span> fibonacci N2<br/>      <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> N1 <span class=\"kw4\">AN</span> N2<br/>  OIC<br/><span class=\"kw1\">IF U SAY SO</span><br/><span class=\"kw1\">KTHXBYE</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 37, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">--calculates the nth fibonacci number. Breaks for negative or non-integer n.</span><br/><span class=\"kw1\">function</span> fibs<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <br/>  <span class=\"kw1\">return</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw2\">and</span> n <span class=\"kw2\">or</span> fibs<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibs<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--more pedantic version, returns 0 for non-integer n</span><br/><span class=\"kw1\">function</span> pfibs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">~=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">elseif</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> pfibs<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> pfibs<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">elseif</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> pfibs<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> pfibs<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--tail-recursive</span><br/><span class=\"kw1\">function</span> a<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> u<span class=\"sy0\">+</span>s <span class=\"kw1\">end</span> <span class=\"kw1\">return</span> a<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>u<span class=\"sy0\">+</span>s<span class=\"sy0\">,</span>u<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> trfib<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">--table-recursive</span><br/>fib_n <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>__index <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">&lt;=</span><span class=\"nu0\">0</span> <span class=\"kw2\">and</span> <span class=\"nu0\">0</span> <span class=\"kw2\">or</span> z<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> z<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--table-recursive done properly (values are actually saved into table; also the first element</span><br/><span class=\"co1\">-- of Fibonacci sequence is 0, so the initial table should be {0, 1}).</span><br/>fib_n <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>  __index <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>    t<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> t<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> t<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--loop version</span><br/><span class=\"kw1\">function</span> lfibs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> p0<span class=\"sy0\">,</span>p1<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n <span class=\"kw1\">do</span> p0<span class=\"sy0\">,</span>p1 <span class=\"sy0\">=</span> p1<span class=\"sy0\">,</span>p0<span class=\"sy0\">+</span>p1 <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> p0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Luck", "loc": 9, "block": "<pre class=\"text highlighted_source\">function fib(x: int): int = (<br/>   let cache = {} in<br/>   let fibc x = if x&lt;=1 then x else (<br/>      if x not in cache then<br/>      cache[x] = fibc(x-1) + fibc(x-2);<br/>      cache[x]<br/>   ) in fibc(x)<br/>);;<br/>for x in range(10) do print(fib(x))</pre>"}, {"lang": "Lush", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de fib-rec (n)<br/>  (if (&lt; n 2)<br/>      n<br/>     (+ (fib-rec (- n 2)) (fib-rec (- n 1)))))</pre>"}, {"lang": "LSL", "loc": 15, "block": "<pre class=\"text highlighted_source\">integer Fibonacci(integer n) {<br/>\tif(n&lt;2) {<br/>\t\treturn n;<br/>\t} else {<br/>\t\treturn Fibonacci(n-1)+Fibonacci(n-2);<br/>\t}<br/>}<br/>default {<br/>\tstate_entry() {<br/>\t\tinteger x = 0;<br/>\t\tfor(x=0\u00a0; x&lt;35\u00a0; x++) {<br/>\t\t\tllOwnerSay(\"Fibonacci(\"+(string)x+\")=\"+(string)Fibonacci(x));<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "M2000 Interpreter", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Inventory K=0:=0,1:=1<br/>fib=Lambda K (x as decimal)-&gt; {<br/>      If Exist(K, x) Then =Eval(K)\u00a0:Exit<br/>      Def Ret as Decimal<br/>      Ret=If(x&gt;1-&gt;Lambda(x-1)+Lambda(x-2), x)<br/>      Append K, x:=Ret<br/>      =Ret<br/>}<br/>\\\\ maximum 139<br/>For i=1 to 139 {<br/>      Print Fib(i)<br/>}<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 4, "block": "<pre class=\"text highlighted_source\">define(`fibo',`ifelse(0,$1,0,`ifelse(1,$1,1,<br/>`eval(fibo(decr($1)) + fibo(decr(decr($1))))')')')dnl<br/>define(`loop',`ifelse($1,$2,,`$3($1) loop(incr($1),$2,`$3')')')dnl<br/>loop(0,15,`fibo')</pre>"}, {"lang": "Maple", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; f\u00a0:= n -&gt; ifelse(n&lt;3,1,f(n-1)+f(n-2));<br/>&gt; f(2);<br/>  1<br/>&gt; f(3);<br/>  2<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">fib[0] = 0<br/>fib[1] = 1<br/>fib[n_Integer]\u00a0:= fib[n - 1] + fib[n - 2]</pre>"}, {"lang": "MATLAB", "loc": 6, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> f = fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>\tf = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span>\u00a0; <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>^<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\tf = f<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 8, "block": "<pre class=\"text highlighted_source\">/* fib(n) is built-in; here is an implementation */<br/>fib2(n)\u00a0:= (matrix([0, 1], [1, 1])^^n)[1, 2]$<br/>\u00a0<br/>fib2(100)-fib(100);<br/>0<br/>\u00a0<br/>fib2(-10);<br/>-55</pre>"}, {"lang": "MAXScript", "loc": 19, "block": "<pre class=\"text highlighted_source\">fn fibIter n =<br/>(<br/>    if n &lt; 2 then<br/>    (<br/>        n<br/>    )<br/>    else<br/>    (<br/>        fib = 1<br/>        fibPrev = 1<br/>        for num in 3 to n do<br/>        (<br/>            temp = fib<br/>            fib += fibPrev<br/>            fibPrev = temp<br/>        )<br/>        fib<br/>    ) <br/>)</pre>"}, {"lang": "Mercury", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>% The following code is derived from the Mercury Tutorial by Ralph Becket.<br/>% http://www.mercury.csse.unimelb.edu.au/information/papers/book.pdf<br/>:- module fib.<br/>\u00a0<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int.<br/>\u00a0<br/>:- pred fib(int::in, int::out) is det.<br/>fib(N, X)\u00a0:-<br/>    ( if N =&lt; 2<br/>          then X = 1<br/>          else fib(N - 1, A), fib(N - 2, B), X = A + B ).<br/>\u00a0<br/>:- func fib(int) = int is det.<br/>fib(N) = X\u00a0:- fib(N, X).<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    fib(40, X),<br/>    write_string(\"fib(40, \",\u00a0!IO),<br/>    write_int(X,\u00a0!IO),<br/>    write_string(\")\\n\",\u00a0!IO),<br/>\u00a0<br/>    write_string(\"fib(40) = \",\u00a0!IO),<br/>    write_int(fib(40),\u00a0!IO),<br/>    write_string(\"\\n\",\u00a0!IO).<br/>\u00a0</pre>"}, {"lang": "Metafont", "loc": 10, "block": "<pre class=\"text highlighted_source\">vardef fibo(expr n) =<br/>if n=0: 0<br/>elseif n=1: 1<br/>else:<br/>  fibo(n-1) + fibo(n-2)<br/>fi<br/>enddef;<br/>\u00a0<br/>for i=0 upto 10: show fibo(i); endfor<br/>end</pre>"}, {"lang": "Microsoft Small Basic", "loc": 12, "block": "<pre class=\"text highlighted_source\">' Fibonacci sequence - 31/07/2018<br/>  n = 139<br/>  f1 = 0<br/>  f2 = 1<br/>  TextWindow.WriteLine(\"fibo(0)=\"+f1)<br/>  TextWindow.WriteLine(\"fibo(1)=\"+f2)<br/>  For i = 2 To n<br/>    f3 = f1 + f2<br/>    TextWindow.WriteLine(\"fibo(\"+i+\")=\"+f3)<br/>    f1 = f2<br/>    f2 = f3<br/>  EndFor</pre>"}, {"lang": "Mirah", "loc": 20, "block": "<pre class=\"text highlighted_source\">def fibonacci(n:int)<br/>    return n if n &lt; 2<br/>    fibPrev = 1<br/>    fib = 1<br/>    3.upto(Math.abs(n)) do <br/>        oldFib = fib<br/>        fib = fib + fibPrev<br/>        fibPrev = oldFib<br/>    end<br/>    fib * (n&lt;0\u00a0? int(Math.pow(n+1, -1))\u00a0: 1)<br/>end<br/>\u00a0<br/>puts fibonacci 1<br/>puts fibonacci 2<br/>puts fibonacci 3<br/>puts fibonacci 4<br/>puts fibonacci 5<br/>puts fibonacci 6<br/>puts fibonacci 7<br/>\u00a0</pre>"}, {"lang": "MIPS Assembly", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\t.text<br/>main:\tli\t$v0, 5\t\t# read integer from input. The read integer will be stroed in $v0<br/>\tsyscall<br/>\u00a0<br/>\tbeq\t$v0, 0, is1<br/>\tbeq\t$v0, 1,\tis1\t<br/>\u00a0<br/>\tli\t$s4, 1\t\t# the counter which has to equal to $v0\t<br/>\u00a0<br/>\tli\t$s0, 1<br/>\tli\t$s1, 1<br/>\u00a0<br/>loop:\tadd\t$s2, $s0, $s1<br/>\taddi\t$s4, $s4, 1<br/>\tbeq\t$v0, $s4, iss2<br/>\u00a0<br/>\tadd\t$s0, $s1, $s2<br/>\taddi\t$s4, $s4, 1<br/>\tbeq\t$v0, $s4, iss0<br/>\u00a0<br/>\tadd\t$s1, $s2, $s0<br/>\taddi\t$s4, $s4, 1<br/>\tbeq\t$v0, $s4, iss1<br/>\u00a0<br/>\tb \tloop<br/>\u00a0<br/>iss0:\tmove\t$a0, $s0\t<br/>\tb\tprint<br/>\u00a0<br/>iss1:\tmove\t$a0, $s1\t<br/>\tb\tprint<br/>\u00a0<br/>iss2:\tmove\t$a0, $s2\t<br/>\tb\tprint<br/>\u00a0<br/>\u00a0<br/>is1:\tli\t$a0, 1<br/>\tb \tprint<br/>\u00a0<br/>print:\tli\t$v0, 1<br/>\tsyscall<br/>\tli\t$v0, 10<br/>\tsyscall<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u041f0\t1\tlg\t\u0412x\t&lt;-&gt;\t+\tL0\t03\t\u0421/\u041f\t\u0411\u041f<br/>03</pre>"}, {"lang": "ML", "loc": 7, "block": "<pre class=\"text highlighted_source\">fun fib n = <br/>    let<br/>\tfun fib' (0,a,b) = a<br/>\t  | fib' (n,a,b) = fib' (n-1,a+b,a)<br/>    in<br/>\tfib' (n,0,1)<br/>    end</pre>"}, {"lang": "ML/I", "loc": 15, "block": "<pre class=\"text highlighted_source\">MCSKIP \"WITH\" NL<br/>\"\" Fibonacci - recursive<br/>MCSKIP MT,&lt;&gt;<br/>MCINS\u00a0%.<br/>MCDEF FIB WITHS ()<br/>AS &lt;MCSET T1=%A1.<br/>MCGO L1 UNLESS 2 GR T1<br/>%T1.&lt;&gt;MCGO L0<br/>%L1.%FIB(%T1.-1)+FIB(%T1.-2).&gt;<br/>fib(0) is FIB(0)<br/>fib(1) is FIB(1)<br/>fib(2) is FIB(2)<br/>fib(3) is FIB(3)<br/>fib(4) is FIB(4)<br/>fib(5) is FIB(5)</pre>"}, {"lang": "Modula-2", "loc": 37, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Fibonacci;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Fibonacci<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>    a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"nu0\">0</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    a<span class=\"sy0\">:=</span><span class=\"nu0\">1</span>;<br/>    b<span class=\"sy0\">:=</span><span class=\"nu0\">1</span>;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> n&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        c <span class=\"sy0\">:=</span> a <span class=\"sy0\">+</span> b;<br/>        a <span class=\"sy0\">:=</span> b;<br/>        b <span class=\"sy0\">:=</span> c;<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> a<br/><span class=\"kw1\">END</span> Fibonacci;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    r <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span><br/>        r <span class=\"sy0\">:=</span> Fibonacci<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>\u00a0<br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%l<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> r<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Fibonacci.</pre>"}, {"lang": "Modula-3", "loc": 8, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">PROCEDURE</span> Fib<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">RETURN</span> n;<br/>    <span class=\"kw1\">ELSE</span><br/>      <span class=\"kw1\">RETURN</span> Fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> Fib;</pre>"}, {"lang": "Monicelli", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Main<br/>Lei ha clacsonato<br/>voglio un nonnulla, Necchi mi porga un nonnulla<br/>il nonnulla come se fosse brematurata la supercazzola bonaccia con il nonnulla o scherziamo?<br/>un nonnulla a posterdati<br/>\u00a0<br/># Fibonacci function 'bonaccia'<br/>blinda la supercazzola Necchi bonaccia con antani Necchi o scherziamo? che cos'\u00e8 l'antani? <br/>minore di 3: vaffanzum 1! o tarapia tapioco: voglio unchiamo, Necchi come se fosse brematurata <br/>la supercazzola bonaccia con antani meno 1 o scherziamo? voglio duechiamo, <br/>Necchi come se fosse brematurata la supercazzola bonaccia con antani meno 2 o scherziamo? vaffanzum <br/>unchiamo pi\u00f9 duechiamo! e velocit\u00e0 di esecuzione<br/>\u00a0</pre>"}, {"lang": "MontiLang", "loc": 9, "block": "<pre class=\"text highlighted_source\">0 VAR a .<br/>1 VAR b .<br/>INPUT TOINT<br/>FOR\u00a0:<br/>    a b + VAR c .<br/>    a PRINT .<br/>    b VAR a .<br/>    c VAR b .<br/>ENDFOR</pre>"}, {"lang": "MUMPS", "loc": 11, "block": "<pre class=\"text highlighted_source\">FIBOITER(N)<br/>\u00a0;Iterative version to get the Nth Fibonacci number<br/>\u00a0;N must be a positive integer<br/>\u00a0;F is the tree containing the values<br/>\u00a0;I is a loop variable.<br/> QUIT:(N\\1'=N)!(N&lt;0) \"Error: \"_N_\" is not a positive integer.\"<br/> NEW F,I<br/> SET F(0)=0,F(1)=1<br/> QUIT:N&lt;2 F(N)<br/> FOR I=2:1:N SET F(I)=F(I-1)+F(I-2)<br/> QUIT F(N)</pre>"}, {"lang": "Nemerle", "loc": 18, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module Fibonacci<br/>{<br/>    Fibonacci(x\u00a0: long)\u00a0: long<br/>    {<br/>        |x when x &lt; 2 =&gt; x<br/>        |_ =&gt; Fibonacci(x - 1) + Fibonacci(x - 2)<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def num = Int64.Parse(ReadLine());<br/>        foreach (n in $[0 .. num])<br/>            WriteLine(\"{0}: {1}\", n, Fibonacci(n));<br/>    }<br/>}</pre>"}, {"lang": "NESL", "loc": 1, "block": "<pre class=\"text highlighted_source\">function fib(n) = if n &lt; 2 then n else fib(n - 2) + fib(n - 1);</pre>"}, {"lang": "NetRexx", "loc": 38, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">210000</span>                  <span class=\"coMULTI\">/*prepare for some big 'uns.     */</span><br/><span class=\"kw1\">parse</span> arg x y .                        <span class=\"coMULTI\">/*allow a single number or range.*/</span><br/><span class=\"kw1\">if</span> x == <span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                     <span class=\"coMULTI\">/*no input? Then assume -30--&gt;+30*/</span><br/>  x = -<span class=\"nu0\">30</span><br/>  y = -x<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> y == <span class=\"st0\">''</span> <span class=\"kw3\">then</span> y = x             <span class=\"coMULTI\">/*if only one number, show fib(n)*/</span><br/><span class=\"kw1\">loop</span> k = x to y                   <span class=\"coMULTI\">/*process each Fibonacci request.*/</span><br/>  q = fib<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>  w = q.<span class=\"me0\">length</span>                    <span class=\"coMULTI\">/*if wider than 25 bytes, tell it*/</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Fibonacci'</span> k<span class=\"st0\">\"=\"</span>q<br/>  <span class=\"kw1\">if</span> w <span class=\"sy0\">&gt;</span> <span class=\"nu0\">25</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'Fibonacci'</span> k <span class=\"st0\">\"has a length of\"</span> w<br/>  <span class=\"kw3\">end</span> k<br/><span class=\"kw1\">exit</span><br/>\u00a0<br/><span class=\"coMULTI\">/*-------------------------------------FIB subroutine (non-recursive)---*/</span><br/>method fib<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg n<br/>  na = n.<span class=\"kw6\">abs</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> na <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> na             <span class=\"coMULTI\">/*handle special cases.          */</span><br/>  a = <span class=\"nu0\">0</span><br/>  b = <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> to na<br/>    s = a + b<br/>    a = b<br/>    b = s<br/>    <span class=\"kw3\">end</span> j<br/>\u00a0<br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> na <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  s <span class=\"coMULTI\">/*if positive or odd negative... */</span><br/>                          <span class=\"kw3\">else</span> <span class=\"kw1\">return</span> -s <span class=\"coMULTI\">/*return a negative Fib number.  */</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 6, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>fibonacci n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span>L <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dotimes\"><span class=\"kw1\">dotimes</span></a> <span class=\"br0\">(</span>i n<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> L <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#list\"><span class=\"kw1\">list</span></a> <span class=\"br0\">(</span>L <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#apply\"><span class=\"kw1\">apply</span></a> <span class=\"sy1\">+</span> L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>L <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "NGS", "loc": 11, "block": "<pre class=\"text highlighted_source\">F fib(n:Int) {<br/>\tn &lt; 2 returns n<br/>\tlocal a = 1, b = 1<br/>\t# i is automatically local because of for()<br/>\tfor(i=2; i&lt;n; i=i+1) {<br/>\t\tlocal next = a + b<br/>\t\ta = b<br/>\t\tb = next<br/>\t}<br/>\tb<br/>}</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">proc Fibonacci(n: int): int64 =<br/>  var fn = float64(n)<br/>  var p: float64 = (1.0 + sqrt(5.0)) / 2.0<br/>  var q: float64 = 1.0 / p<br/>  return int64((pow(p, fn) + pow(q, fn)) / sqrt(5.0))</pre>"}, {"lang": "Oberon-2", "loc": 62, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Fibonacci;<br/><span class=\"kw1\">IMPORT</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Fibs<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> r<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1.0</span>; r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1.0</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>    r<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> r<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> r<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Fibs;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> FibsR<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">IF</span> n &lt; <span class=\"nu0\">2</span>. <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">RETURN</span> n<br/>  <span class=\"kw1\">ELSE</span><br/>    <span class=\"kw1\">RETURN</span> FibsR<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> FibsR<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> FibsR;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Show<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"First \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" Fibonacci numbers\"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>    Out.<span class=\"me1\">LongRealFix</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Show;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Gen<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>  x<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGREAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>  Fibs<span class=\"br0\">(</span>x^<span class=\"br0\">)</span>;<br/>  Show<span class=\"br0\">(</span>x^<span class=\"br0\">)</span>  <br/><span class=\"kw1\">END</span> Gen;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> GenR<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"First \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" Fibonacci numbers (Recursive)\"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> s <span class=\"kw1\">DO</span>  <br/>    Out.<span class=\"me1\">LongRealFix</span><span class=\"br0\">(</span>FibsR<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">Ln</span>  <br/><span class=\"kw1\">END</span> GenR;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span> <br/>  Gen<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>  Gen<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>;<br/>  GenR<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>  GenR<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Fibonacci.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 17, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Fib <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Fib<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> Fib<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> Fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 10, "block": "<pre class=\"objc highlighted_source\"><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span>fibonacci<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>position<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">long</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>position &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">=</span> position;<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self fibonacci<span class=\"sy0\">:</span><span class=\"br0\">(</span>position <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>self fibonacci<span class=\"sy0\">:</span><span class=\"br0\">(</span>position <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result;    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 11, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> fib_iter n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>    n<br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">let</span> fib_prev <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">and</span> fib <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> temp <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>fib <span class=\"kw1\">in</span><br/>        fib <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>fib <span class=\"sy0\">+</span> <span class=\"sy0\">!</span>fib_prev<span class=\"sy0\">;</span><br/>        fib_prev <span class=\"sy0\">:=</span> temp<br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">!</span>fib</pre>"}, {"lang": "Octave", "loc": 8, "block": "<pre class=\"octave highlighted_source\"><span class=\"co2\">% recursive</span><br/><span class=\"kw4\">function</span> fibo <span class=\"sy3\">=</span> recfibo<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>    fibo <span class=\"sy3\">=</span> n<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    fibo <span class=\"sy3\">=</span> recfibo<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> recfibo<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: fib   0 1 rot #[ tuck + ] times drop\u00a0;</pre>"}, {"lang": "OPL", "loc": 13, "block": "<pre class=\"text highlighted_source\">FIBON:<br/>REM Fibonacci sequence is generated to the Organiser II floating point variable limit.<br/>REM CLEAR/ON key quits.<br/>REM Mikesan - http://forum.psion2.org/<br/>LOCAL A,B,C<br/>A=1\u00a0:B=1\u00a0:C=1<br/>PRINT A,<br/>DO<br/>  C=A+B<br/>  A=B<br/>  B=C<br/>  PRINT A,<br/>UNTIL GET=1</pre>"}, {"lang": "Order", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8fib_rec                     \\<br/>ORDER_PP_FN(8fn(8N,                               \\<br/>                8if(8less(8N, 2),                 \\<br/>                    8N,                           \\<br/>                    8add(8fib_rec(8sub(8N, 1)),   \\<br/>                         8fib_rec(8sub(8N, 2))))))</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span>8fib_rec<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">fun</span><span class=\"br0\">{</span><span class=\"re1\">FibI</span> N<span class=\"br0\">}</span><br/>  Temp = <span class=\"br0\">{</span>NewCell 0<span class=\"br0\">}</span><br/>  A = <span class=\"br0\">{</span>NewCell 0<span class=\"br0\">}</span><br/>  B = <span class=\"br0\">{</span>NewCell 1<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span>    <br/>  <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>N <span class=\"kw1\">do</span><br/>    Temp <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>A <span class=\"sy0\">+</span> <span class=\"sy0\">@</span>B<br/>    A <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>B<br/>    B <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>Temp<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"sy0\">@</span>A<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">fibonocci<span class=\"br0\">(</span>n<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 17, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">function</span> fib<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">longInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  Sqrt5 <span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  C1 <span class=\"sy3\">=</span> <span class=\"kw3\">ln</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Sqrt5<span class=\"sy3\">+</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//ln( 1.618..)</span><br/><span class=\"co1\">//C2 = ln((1.0-Sqrt5)*0.5);//ln(-0.618 )) tsetsetse</span><br/>  C2 <span class=\"sy3\">=</span> <span class=\"kw3\">ln</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Sqrt5<span class=\"sy3\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//ln(+0.618 ))</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw3\">odd</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      fib <span class=\"sy1\">:</span><span class=\"sy3\">=</span> round<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">exp</span><span class=\"br0\">(</span>C1<span class=\"sy3\">*</span>n<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"kw3\">exp</span><span class=\"br0\">(</span>C2<span class=\"sy3\">*</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy3\">/</span>Sqrt5<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      fib <span class=\"sy1\">:</span><span class=\"sy3\">=</span> round<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">exp</span><span class=\"br0\">(</span>C1<span class=\"sy3\">*</span>n<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">exp</span><span class=\"br0\">(</span>C2<span class=\"sy3\">*</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy3\">/</span>Sqrt5<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>    Fibdirekt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> fib_iter <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">use</span> bigint try <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"GMP,Pari\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$v2</span><span class=\"sy0\">,</span><span class=\"re0\">$v1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"re0\">$v2</span><span class=\"sy0\">,</span><span class=\"re0\">$v1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$v1</span><span class=\"sy0\">,</span><span class=\"re0\">$v2</span><span class=\"sy0\">+</span><span class=\"re0\">$v1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$v1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@fib</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">*+*</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">function fibonacci(integer n)     -- iterative, works for -ve numbers<br/>atom a=0, b=1<br/>    if n=0 then return 0 end if<br/>    if abs(n)&gt;=79 then\u00a0?9/0 end if  -- inaccuracies creep in above 78<br/>    for i=1 to abs(n)-1 do<br/>        {a,b} = {b,a+b}<br/>    end for<br/>    if n&lt;0 and remainder(n,2)=0 then return -fcache[absn] end if<br/>    return fcache[absn]<br/>end function<br/>\u00a0<br/>for i=0 to 28 do<br/>    if i then puts(1,\", \") end if<br/>    printf(1,\"%d\", fibonacci(i))<br/>end for<br/>puts(1,\"\\n\")</pre>"}, {"lang": "PHP", "loc": 11, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> fibIter<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$fibPrev</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$fib</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/list\"><span class=\"kw3\">list</span></a><span class=\"br0\">(</span><span class=\"re0\">$fibPrev</span><span class=\"sy0\">,</span> <span class=\"re0\">$fib</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$fib</span><span class=\"sy0\">,</span> <span class=\"re0\">$fib</span> <span class=\"sy0\">+</span> <span class=\"re0\">$fibPrev</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$fib</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(de fibo (N)<br/>   (if (&gt;= 2 N)<br/>      1<br/>      (+ (fibo (dec N)) (fibo (- N 2))) ) )</pre>"}, {"lang": "PIR", "loc": 30, "block": "<pre class=\"text highlighted_source\">.sub fib<br/>  .param int n<br/>  .local int nt<br/>  .local int ft<br/>  if n &lt; 2 goto RETURNN<br/>  nt = n - 1<br/>  ft = fib( nt )<br/>  dec nt<br/>  nt = fib(nt)<br/>  ft = ft + nt<br/>  .return( ft )<br/>RETURNN:<br/>  .return( n )<br/>  end<br/>.end<br/>\u00a0<br/>.sub main\u00a0:main<br/>  .local int counter<br/>  .local int f<br/>  counter=0<br/>LOOP: <br/>  if counter &gt; 20 goto DONE<br/>  f = fib(counter)<br/>  print f<br/>  print \"\\n\"<br/>  inc counter<br/>  goto LOOP<br/>DONE:<br/>  end<br/>.end</pre>"}, {"lang": "Pike", "loc": 15, "block": "<pre class=\"pike highlighted_source\">int     <br/>fibIter<span class=\"br0\">(</span>int n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    int fibPrev, fib, i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    fibPrev <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    fib <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i &lt; n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        int oldFib <span class=\"sy0\">=</span> fib<span class=\"sy0\">;</span><br/>        fib <span class=\"sy0\">+=</span> fibPrev<span class=\"sy0\">;</span><br/>        fibPrev <span class=\"sy0\">=</span> oldFib<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> fib<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 9, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* Form the n-th Fibonacci number, n &gt; 1. */</span><br/><span class=\"kw1\">get</span> <span class=\"kw1\">list</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>f1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> f2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>   f3 <span class=\"sy0\">=</span> f1 <span class=\"sy0\">+</span> f2<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span><span class=\"br0\">(</span><span class=\"st0\">'fibo('</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"st0\">')='</span><span class=\"sy0\">,</span>f3<span class=\"br0\">)</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   f1 <span class=\"sy0\">=</span> f2<span class=\"sy0\">;</span><br/>   f2 <span class=\"sy0\">=</span> f3<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/SQL", "loc": 24, "block": "<pre class=\"text highlighted_source\">Create or replace Function fnu_fibonnaci(p_iNumber integer)<br/>return integer<br/>is<br/>  nuFib  integer;<br/>  nuP  integer;<br/>  nuQ  integer;<br/>Begin<br/>  if p_iNumber is not null then<br/>     if p_iNumber=0 then<br/>        nuFib:=0;<br/>     Elsif p_iNumber=1 then<br/>            nuFib:=1;<br/>     Else<br/>        nuP:=0;<br/>        nuQ:=1;<br/>        For nuI in 2..p_iNumber loop<br/>            nuFib:=nuP+nuQ;<br/>            nuP:=nuQ;<br/>            nuQ:=nuFib;<br/>        End loop;<br/>     End if;<br/>  End if;<br/>  return(nuFib);<br/>End fnu_fibonnaci;</pre>"}, {"lang": "Pop11", "loc": 9, "block": "<pre class=\"text highlighted_source\">define fib(x);<br/>lvars a , b;<br/>    1 -&gt; a;<br/>    1 -&gt; b;<br/>    repeat x - 1 times<br/>         (a + b, b) -&gt; (b, a);<br/>    endrepeat;<br/>    a;<br/>enddefine;</pre>"}, {"lang": "PostScript", "loc": 20, "block": "<pre class=\"text highlighted_source\">%!PS<br/>\u00a0<br/>% We want the 'n'th fibonacci number<br/>/n 13 def<br/>\u00a0<br/>% Prepare output canvas:<br/>/Helvetica findfont 20 scalefont setfont<br/>100 100 moveto<br/>\u00a0<br/>%define the function recursively:<br/>/fib { dup <br/>       3 lt<br/>         { pop 1 }<br/>         { dup 1 sub fib exch 2 sub fib add }<br/>       ifelse<br/>    } def<br/>\u00a0<br/>    (Fib\\() show n (....) cvs show (\\)=) show n fib (.....) cvs show<br/>\u00a0<br/>showpage</pre>"}, {"lang": "Potion", "loc": 5, "block": "<pre class=\"text highlighted_source\">recursive = (n):<br/>  if (n &lt;= 1): 1. else: recursive (n - 1) + recursive (n - 2)..<br/>\u00a0<br/>n = 40<br/>(\"fib(\", n, \")= \", recursive (n), \"\\n\") join print</pre>"}, {"lang": "PowerBASIC", "loc": 1, "block": "<pre>      actual:             displayed:\nF(88) 1100087778366101931 1100087778366101930\nF(89) 1779979416004714189 1779979416004714190\nF(90) 2880067194370816120 2880067194370816120\nF(91) 4660046610375530309 4660046610375530310\nF(92) 7540113804746346429 7540113804746346430\n</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> FibonacciNumber <span class=\"br0\">(</span> <span class=\"re0\">$count</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$answer</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$answer</span>.Length <span class=\"kw4\">-le</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$answer</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$answer</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$answer</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$answer</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 8, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>fib<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>fib<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>fib<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Value<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  A <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> fib<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> A1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> fib<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> B1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  Value <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> A1 <span class=\"sy3\">+</span> B1<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Pure", "loc": 3, "block": "<pre class=\"text highlighted_source\">fib n = loop 0 1 n with<br/>  loop a b n = if n==0 then a else loop b (a+b) (n-1);<br/>end;</pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Macro</span> Fibonacci <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>,n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span></pre>"}, {"lang": "Purity", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>data Fib1 = FoldNat <br/>            &lt;<br/>              const (Cons One (Cons One Empty)),<br/>              (uncurry Cons) . ((uncurry Add) . (Head, Head . Tail), id)<br/>            &gt;<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> fib<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>x<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>: x<span class=\"sy0\">=</span><span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>*<span class=\"kw2\">pow</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">else</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> n <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>-<span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">31</span><span class=\"br0\">)</span>: <span class=\"kw1\">print</span> fib<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span></pre>"}, {"lang": "Qi", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define fib<br/>  0 -&gt; 0<br/>  1 -&gt; 1<br/>  N -&gt; (+ (fib-r (- N 1))<br/>          (fib-r (- N 2))))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"python highlighted_source\">fib<span class=\"sy0\">=</span>function<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>x<span class=\"sy0\">=</span>c<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> seq<span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"sy0\">=</span>c<span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>*<span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>^<span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span>  <br/>\u00a0<br/>sapply<span class=\"br0\">(</span>seq<span class=\"br0\">(</span>-<span class=\"nu0\">31</span><span class=\"sy0\">,</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>fib<span class=\"br0\">)</span></pre>"}, {"lang": "Ra", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class FibonacciSequence<br/>\t**Prints the nth fibonacci number**<br/>\u00a0<br/>\ton start<br/>\u00a0<br/>\t\targs\u00a0:= program arguments<br/>\u00a0<br/>\t\tif args empty<br/>\t\t\tprint .fibonacci(8)<br/>\u00a0<br/>\t\telse<br/>\u00a0<br/>\t\t\ttry<br/>\t\t\t\tprint .fibonacci(integer.parse(args[0]))<br/>\u00a0<br/>\t\t\tcatch FormatException<br/>\t\t\t\tprint to Console.error made\u00a0!, \"Input must be an integer\"<br/>\t\t\t\texit program with error code<br/>\u00a0<br/>\t\t\tcatch OverflowException<br/>\t\t\t\tprint to Console.error made\u00a0!, \"Number too large\"<br/>\t\t\t\texit program with error code<br/>\u00a0<br/>\tdefine fibonacci(n as integer) as integer is shared<br/>\t\t**Returns the nth fibonacci number**<br/>\u00a0<br/>\t\ttest<br/>\t\t\tassert fibonacci(0) = 0<br/>\t\t\tassert fibonacci(1) = 1<br/>\t\t\tassert fibonacci(2) = 1<br/>\t\t\tassert fibonacci(3) = 2<br/>\t\t\tassert fibonacci(4) = 3<br/>\t\t\tassert fibonacci(5) = 5<br/>\t\t\tassert fibonacci(6) = 8<br/>\t\t\tassert fibonacci(7) = 13<br/>\t\t\tassert fibonacci(8) = 21<br/>\u00a0<br/>\u00a0<br/>\t\tbody<br/>\t\t\ta, b\u00a0:= 0, 1<br/>\u00a0<br/>\t\t\tfor n<br/>\t\t\t\ta, b\u00a0:= b, a + b<br/>\u00a0<br/>\t\t\treturn a<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define (fib n)<br/>  (let loop ((cnt 0) (a 0) (b 1))<br/>    (if (= n cnt)<br/>        a<br/>        (loop (+ cnt 1) b (+ a b)))))<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 14, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> fibo(n <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span>) <span class=\"kw4\">As</span> UInt64<br/>\u00a0<br/>  <span class=\"kw4\">dim</span> noOne <span class=\"kw4\">as</span> UInt64 = 1<br/>  <span class=\"kw4\">dim</span> noTwo <span class=\"kw4\">as</span> UInt64 = 1\t<br/>  <span class=\"kw4\">dim</span> sum <span class=\"kw4\">As</span> UInt64<br/>\u00a0<br/>  <span class=\"kw3\">for</span> i <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span> = 3 <span class=\"kw3\">to</span> n<br/>      sum = noOne + noTwo<br/>      noTwo = noOne<br/>      noOne = sum<br/>  <span class=\"kw3\">Next</span><br/>\u00a0<br/>  Return noOne<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">: fib ( n-m ) dup [ 0 = ] [ 1 = ] bi or if; [ 1- fib ] sip [ 2 - fib ] do +\u00a0;</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the  Nth  Fibonacci number,   N   can be  zero  or  negative. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">210000</span>                            <span class=\"coMULTI\">/*be able to handle ginormous numbers. */</span><br/><span class=\"kw1\">parse</span>  <span class=\"kw1\">arg</span>  x y <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*allow a  single number  or  a range. */</span><br/><span class=\"kw1\">if</span> x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> x==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  x=-<span class=\"nu0\">40</span>;  y=+<span class=\"nu0\">40</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*No input?  Then use range -40 \u2500\u2500\u25ba +40*/</span><br/><span class=\"kw1\">if</span> y==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> y==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> y=x                      <span class=\"coMULTI\">/*if only one number, display   fib(X).*/</span><br/>w=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*W:  used for making formatted output.*/</span><br/>fw=<span class=\"nu0\">10</span>                                            <span class=\"coMULTI\">/*Minimum maximum width. Sounds ka\u2500razy*/</span><br/>      <span class=\"kw1\">do</span> j=x  <span class=\"kw2\">to</span> y;         q=fib<span class=\"br0\">(</span>j<span class=\"br0\">)</span>             <span class=\"coMULTI\">/*process all of the Fibonacci requests*/</span><br/>      L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>                                <span class=\"coMULTI\">/*obtain the length (decimal digs) of Q*/</span><br/>      fw=<span class=\"kw6\">max</span><span class=\"br0\">(</span>fw, L<span class=\"br0\">)</span>                              <span class=\"coMULTI\">/*fib number length, or the max so far.*/</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'Fibonacci('</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>j,w<span class=\"br0\">)</span><span class=\"st0\">\") = \"</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>q,fw<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*right justify Q*/</span><br/>      <span class=\"kw1\">if</span> L<span class=\"sy0\">&gt;</span><span class=\"nu0\">10</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span>    <span class=\"st0\">'Fibonacci('</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\") has a length of\"</span>     L<br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                <span class=\"coMULTI\">/* [\u2191]  list a Fib. sequence of  x\u2500\u2500\u25bay */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fib:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;        an=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*use  \u2502n\u2502   (the absolute value of N).*/</span><br/>      a=<span class=\"nu0\">0</span>;  b=<span class=\"nu0\">1</span>;       <span class=\"kw1\">if</span> an<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> an   <span class=\"coMULTI\">/*handle two special cases: zero &amp; one.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]   this method is non\u2500recursive. */</span><br/>         <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> an;   $=a+b;   a=b;   b=$    <span class=\"coMULTI\">/*sum  the numbers  up to   \u2502n\u2502        */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                             <span class=\"coMULTI\">/* [\u2191]  (only positive Fibs nums used).*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  an//2   [same as]   (an//2==1).*/</span><br/>      <span class=\"kw1\">if</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">|</span> an<span class=\"sy0\">//</span><span class=\"nu0\">2</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span>  $           <span class=\"coMULTI\">/*Positive or even?   Then return sum. */</span><br/>                             <span class=\"kw1\">return</span> -$           <span class=\"coMULTI\">/*Negative and odd? Return negative sum*/</span></pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>give n<br/>x = fib(n)<br/>see n + \" Fibonacci is\u00a0: \" + x<br/>\u00a0<br/>func fib nr if nr = 0 return 0 ok<br/>            if nr = 1 return 1 ok <br/>            if nr &gt; 1 return fib(nr-1) + fib(nr-2) ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> fib<span class=\"br0\">(</span>n, sequence=<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    current_number, last_number = sequence.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    sequence <span class=\"sy0\">&lt;&lt;</span> current_number <span class=\"sy0\">+</span> <span class=\"br0\">(</span>last_number <span class=\"kw1\">or</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  sequence.<span class=\"me1\">last</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">for i = 0 to 10<br/> print i;\" \";fibR(i);\" \";fibI(i)<br/>next i<br/>end<br/>\u00a0<br/> function fibR(n)<br/> if n &lt; 2 then fibR = n else fibR = fibR(n-1) + fibR(n-2)<br/> end function<br/>\u00a0<br/> function fibI(n)<br/>   b = 1<br/>   for i = 1 to n<br/>       t = a + b<br/>       a = b<br/>       b = t<br/>   next i<br/>fibI = a<br/>end function</pre>"}, {"lang": "Rust", "loc": 12, "block": "<pre class=\"text highlighted_source\">use std::mem;<br/>fn main() {<br/>    let mut prev = 0;<br/>    // Rust needs this type hint for the checked_add method<br/>    let mut curr = 1usize;<br/>\u00a0<br/>    while let Some(n) = curr.checked_add(prev) {<br/>        prev = curr;<br/>        curr = n;<br/>        println!(\"{}\", n);<br/>    }<br/>}</pre>"}, {"lang": "SAS", "loc": 11, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> fib;<br/>    a=<span class=\"nu0\">0</span>;<br/>    b=<span class=\"nu0\">1</span>;<br/>    <span class=\"kw5\">do</span> <span class=\"kw3\">n</span>=<span class=\"nu0\">0</span> to <span class=\"nu0\">20</span>;<br/>       f=a;<br/>       <span class=\"kw4\">output</span>;<br/>       a=b;<br/>       b=f+a;<br/>    <span class=\"kw5\">end</span>;<br/>    <span class=\"kw4\">keep</span> <span class=\"kw3\">n</span> f;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Sather", "loc": 34, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  -- RECURSIVE --<br/>  fibo(n\u00a0:INTI):INTI<br/>    pre n &gt;= 0<br/>  is<br/>    if n &lt; 2.inti then return n; end;<br/>    return fibo(n - 2.inti) + fibo(n - 1.inti);<br/>  end;<br/>\u00a0<br/>  -- ITERATIVE --<br/>  fibo_iter(n\u00a0:INTI):INTI<br/>    pre n &gt;= 0<br/>  is<br/>    n3w\u00a0:INTI;<br/>\u00a0<br/>    if n &lt; 2.inti then return n; end;<br/>    last\u00a0::= 0.inti; this\u00a0::= 1.inti;<br/>    loop (n - 1.inti).times!;<br/>      n3w\u00a0:= last + this;<br/>      last\u00a0:= this;<br/>      this\u00a0:= n3w;<br/>    end;   <br/>    return this;<br/>  end;<br/>\u00a0<br/>  main is<br/>    loop i\u00a0::= 0.upto!(16);<br/>      #OUT + fibo(i.inti) + \" \";<br/>      #OUT + fibo_iter(i.inti) + \"\\n\";<br/>    end;<br/>  end;<br/>\u00a0<br/>end;</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fib<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Int <span class=\"sy0\">=</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> fib<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + fib<span class=\"br0\">(</span>i-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 5, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fib<span class=\"sy0\">-</span>iter n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>num <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> num <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>fib<span class=\"sy0\">-</span>prev <span class=\"nu0\">1</span> fib<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>fib <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> fib fib<span class=\"sy0\">-</span>prev<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> num n<span class=\"br0\">)</span> fib<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scilab", "loc": 11, "block": "<pre class=\"text highlighted_source\">    clear<br/>    n=46<br/>    f1=0; f2=1<br/>    printf(\"fibo(%d)=%d\\n\",0,f1)<br/>    printf(\"fibo(%d)=%d\\n\",1,f2)<br/>    for i=2:n<br/>        f3=f1+f2<br/>        printf(\"fibo(%d)=%d\\n\",i,f3)<br/>        f1=f2<br/>        f2=f3<br/>    end</pre>"}, {"lang": "sed", "loc": 40, "block": "<pre class=\"text highlighted_source\">#!/bin/sed -f<br/>\u00a0<br/># First we need to convert each number into the right number of ticks <br/># Start by marking digits<br/>s/[0-9]/&lt;&amp;/g<br/>\u00a0<br/># We have to do the digits manually.<br/>s/0//g; s/1/|/g; s/2/||/g; s/3/|||/g; s/4/||||/g; s/5/|||||/g<br/>s/6/||||||/g; s/7/|||||||/g; s/8/||||||||/g; s/9/|||||||||/g<br/>\u00a0<br/># Multiply by ten for each digit from the front.<br/>:tens<br/>s/|&lt;/&lt;||||||||||/g<br/>t tens<br/>\u00a0<br/># Done with digit markers<br/>s/&lt;//g<br/>\u00a0<br/># Now the actual work.<br/>:split<br/># Convert each stretch of n &gt;= 2 ticks into two of n-1, with a mark between<br/>s/|\\(|\\+\\)/\\1-\\1/g<br/># Convert the previous mark and the first tick after it to a different mark<br/># giving us n-1+n-2 marks.<br/>s/-|/+/g<br/># Jump back unless we're done.<br/>t split<br/># Get rid of the pluses, we're done with them.<br/>s/+//g<br/>\u00a0<br/># Convert back to digits<br/>:back<br/>s/||||||||||/&lt;/g<br/>s/&lt;\\([0-9]*\\)$/&lt;0\\1/g<br/>s/|||||||||/9/g;<br/>s/|||||||||/9/g; s/||||||||/8/g; s/|||||||/7/g; s/||||||/6/g;<br/>s/|||||/5/g; s/||||/4/g; s/|||/3/g; s/||/2/g; s/|/1/g;<br/>s/&lt;/|/g<br/>t back<br/>s/^$/0/</pre>"}, {"lang": "Seed7", "loc": 10, "block": "<pre class=\"text highlighted_source\">const func integer: fib (in integer: number) is func<br/>  result<br/>    var integer: result is 1;<br/>  begin<br/>    if number &gt; 2 then<br/>      result\u00a0:= fib(pred(number)) + fib(number - 2);<br/>    elsif number = 0 then<br/>      result\u00a0:= 0;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 4, "block": "<pre class=\"text highlighted_source\">fibonacci(n)\u00a0:= <br/>\t\tn when n &lt; 2<br/>\telse<br/>\t\tfibonacci(n - 1) + fibonacci(n - 2);</pre>"}, {"lang": "SETL", "loc": 15, "block": "<pre class=\"text highlighted_source\">$ Print out the first ten Fibonacci numbers<br/>$ This uses Set Builder Notation, it roughly means<br/>$ 'collect fib(n) forall n in {0,1,2,3,4,5,6,7,8,9,10}'<br/>print({fib(n)\u00a0: n in {0..10}});<br/>\u00a0<br/>$ Iterative Fibonacci function<br/>proc fib(n);<br/>    A\u00a0:= 0; B\u00a0:= 1; C\u00a0:= n;<br/>    for i in {0..n} loop<br/>        C\u00a0:= A + B;<br/>        A\u00a0:= B;<br/>        B\u00a0:= C;<br/>    end loop;<br/>    return C;<br/>end proc;</pre>"}, {"lang": "Shen", "loc": 6, "block": "<pre class=\"text highlighted_source\">(define fib<br/>  0 -&gt; 0<br/>  1 -&gt; 1<br/>  N -&gt; (+ (fib (+ N 1)) (fib (+ N 2))) <br/>       where (&lt; N 0)<br/>  N -&gt; (+ (fib (- N 1)) (fib (- N 2))))</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">func fib_iter<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> = <span class=\"br0\">(</span>b, a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">*</span> n<br/>    <span class=\"kw2\">return</span> a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 14, "block": "<pre class=\"text highlighted_source\">INTEGER PROCEDURE fibonacci(n);<br/>INTEGER n;<br/>BEGIN<br/>    INTEGER lo, hi, temp, i;<br/>    lo\u00a0:= 0;<br/>    hi\u00a0:= 1;<br/>    FOR i\u00a0:= 1 STEP 1 UNTIL n - 1 DO<br/>    BEGIN<br/>        temp\u00a0:= hi;<br/>        hi\u00a0:= hi + lo;<br/>        lo\u00a0:= temp<br/>    END;<br/>    fibonacci\u00a0:= hi<br/>END;</pre>"}, {"lang": "SkookumScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\"><span class=\"nu0\">42</span>.<span class=\"me1\">fibonacci</span></pre>"}, {"lang": "Slate", "loc": 9, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"98f6d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Integer traits) fib<br/>[<br/>  n &lt;= 0 ifTrue: [^ 0].<br/>  n = 1 ifTrue: [^ 1].<br/>  (n - 1) fib + (n - 2) fib<br/>].<br/>\u00a0<br/>slate[15]&gt; 10 fib = 55.<br/>True</pre>"}, {"lang": "Smalltalk", "loc": 20, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">fibo</span>|<br/><span class=\"re6\">fibo</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>   |ac t|<br/>   <span class=\"re6\">ac</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Array</span> new: <span class=\"re5\">2</span>.<br/>   <span class=\"re5\">ac</span> at: <span class=\"re5\">1</span> put: <span class=\"re5\">0</span>\u00a0; at: <span class=\"re5\">2</span> put: <span class=\"re5\">1</span>.<br/>   <span class=\"br0\">(</span> <span class=\"re5\">i</span> &lt; <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>     ifTrue: <span class=\"br0\">[</span> <span class=\"re5\">ac</span> at: <span class=\"br0\">(</span><span class=\"re5\">i</span>+<span class=\"re5\">1</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>     ifFalse: <span class=\"br0\">[</span><br/>        <span class=\"re5\">2</span> to: <span class=\"re5\">i</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">l</span> |<br/>          <span class=\"re6\">t</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">ac</span> at: <span class=\"re5\">2</span><span class=\"br0\">)</span>.<br/>          <span class=\"re5\">ac</span> at: <span class=\"re5\">2</span> put: <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">ac</span> at: <span class=\"re5\">1</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"re5\">ac</span> at: <span class=\"re5\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>.<br/>          <span class=\"re5\">ac</span> at: <span class=\"re5\">1</span> put: <span class=\"re5\">t</span><br/>        <span class=\"br0\">]</span>.<br/>        <span class=\"re5\">ac</span> at: <span class=\"re5\">2</span>.<br/>     <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re5\">0</span> to: <span class=\"re5\">10</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>  <span class=\"br0\">(</span><span class=\"re5\">fibo</span> value: <span class=\"re5\">i</span><span class=\"br0\">)</span> displayNl<br/><span class=\"br0\">]</span></pre>"}, {"lang": "smart BASIC", "loc": 31, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> fibR<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>fibI<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>fibN<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span> i<br/>\u00a0<br/><span class=\"sy0\">/*</span> Recursive Method <span class=\"sy0\">*/</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a> fibR<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        fibR <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">ELSE</span><br/>        fibR <span class=\"sy0\">=</span> fibR<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibR<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    ENDIF<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a><br/>\u00a0<br/><span class=\"sy0\">/*</span> Iterative Method <span class=\"sy0\">*/</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a> fibI<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/>        temp <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b<br/>        a <span class=\"sy0\">=</span> b<br/>        b <span class=\"sy0\">=</span> temp<br/>    <span class=\"kw1\">NEXT</span> i<br/>    fibI <span class=\"sy0\">=</span> a<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a><br/>\u00a0<br/><span class=\"sy0\">/*</span> N<span class=\"sy0\">-</span>th Term Method <span class=\"sy0\">*/</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a> fibN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    uphi <span class=\"sy0\">=</span> <span class=\"nu0\">.5</span> <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    lphi <span class=\"sy0\">=</span> <span class=\"nu0\">.5</span> <span class=\"sy0\">-</span> <a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    fibN <span class=\"sy0\">=</span> <span class=\"br0\">(</span>uphi<span class=\"sy0\">^</span>n<span class=\"sy0\">-</span>lphi<span class=\"sy0\">^</span>n<span class=\"br0\">)</span><span class=\"sy0\">/</span><a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a></pre>"}, {"lang": "SNOBOL4", "loc": 8, "block": "<pre class=\"text highlighted_source\">\tdefine(\"fib(a)\")\t:(fib_end)<br/>fib\tfib = lt(a,2) a\t:s(return)<br/>\tfib = fib(a - 1) + fib(a - 2)\t:(return)<br/>fib_end<br/>\u00a0<br/>while\ta = trim(input)\t:f(end)<br/>\toutput = a \" \" fib(a)\t:(while)<br/>end</pre>"}, {"lang": "SNUSP", "loc": 4, "block": "<pre class=\"text highlighted_source\"> @!\\+++++++++#  /&lt;&lt;+&gt;+&gt;-\\       <br/>fib\\==&gt;&gt;+&lt;&lt;?!/&gt;!\\     \u00a0?/\\      <br/>  #&lt;&lt;/?\\!&gt;/@&gt;\\?-&lt;&lt;&lt;/@&gt;/@&gt;/&gt;+&lt;-\\ <br/>     \\-/  \\      \u00a0!\\\u00a0!\\\u00a0!\\  \u00a0?/#</pre>"}, {"lang": "Softbridge BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Function Fibonacci(n)<br/>   x = 0<br/>   y = 1<br/>   i = 0<br/>   n = ABS(n)<br/>   If n &lt; 2 Then<br/>   Fibonacci = n<br/>   Else<br/>   Do Until (i = n)<br/>      sum = x+y<br/>      x=y<br/>      y=sum<br/>      i=i+1<br/>   Loop<br/>   Fibonacci = x<br/>   End If<br/>\u00a0<br/>End Function<br/>\u00a0</pre>"}, {"lang": "SPL", "loc": 4, "block": "<pre class=\"text highlighted_source\">fibo(n)=<br/>  s5 = #.sqrt(5)<br/>  &lt;= (((1+s5)/2)^n-((1-s5)/2)^n)/s5<br/>.</pre>"}, {"lang": "SQL", "loc": 6, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">SELECT</span> round <span class=\"br0\">(</span> <span class=\"kw1\">EXP</span> <span class=\"br0\">(</span> <span class=\"kw1\">SUM</span> <span class=\"br0\">(</span>ln <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw1\">SQRT</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"kw1\">OVER</span> <span class=\"br0\">(</span> <span class=\"kw1\">ORDER</span> <span class=\"kw1\">BY</span> level <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw1\">SQRT</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> fibo<br/><span class=\"kw1\">FROM</span> dual<br/><span class=\"kw1\">CONNECT</span> <span class=\"kw1\">BY</span> level <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span>;<br/>\u00a0</pre>"}, {"lang": "SSEM", "loc": 26, "block": "<pre class=\"text highlighted_source\">10101000000000100000000000000000    0. -21 to c    acc = -n<br/>01101000000001100000000000000000    1. c   to 22   temp = acc<br/>00101000000001010000000000000000    2. Sub. 20     acc -= m<br/>10101000000001100000000000000000    3. c   to 21   n = acc<br/>10101000000000100000000000000000    4. -21 to c    acc = -n<br/>10101000000001100000000000000000    5. c   to 21   n = acc<br/>01101000000000100000000000000000    6. -22 to c    acc = -temp<br/>00101000000001100000000000000000    7. c   to 20   m = acc<br/>11101000000000100000000000000000    8. -23 to c    acc = -count<br/>00011000000001010000000000000000    9. Sub. 24     acc -= -1<br/>00000000000000110000000000000000   10. Test        skip next if acc&lt;0<br/>10011000000000000000000000000000   11. 25  to CI   goto (15 + 1)<br/>11101000000001100000000000000000   12. c   to 23   count = acc<br/>11101000000000100000000000000000   13. -23 to c    acc = -count<br/>11101000000001100000000000000000   14. c   to 23   count = acc<br/>00011000000000000000000000000000   15. 24  to CI   goto (-1 + 1)<br/>10101000000000100000000000000000   16. -21 to c    acc = -n<br/>10101000000001100000000000000000   17. c   to 21   n = acc<br/>10101000000000100000000000000000   18. -21 to c    acc = -n<br/>00000000000001110000000000000000   19. Stop<br/>00000000000000000000000000000000   20. 0           var m = 0<br/>10000000000000000000000000000000   21. 1           var n = 1<br/>00000000000000000000000000000000   22. 0           var temp = 0<br/>10010000000000000000000000000000   23. 9           var count = 9<br/>11111111111111111111111111111111   24. -1          const -1<br/>11110000000000000000000000000000   25. 15          const 15</pre>"}, {"lang": "Stata", "loc": 7, "block": "<pre class=\"text highlighted_source\">program fib<br/>args n<br/>clear<br/>qui set obs `n'<br/>qui gen a=1<br/>qui replace a=a[_n-1]+a[_n-2] in 3/l<br/>end</pre>"}, {"lang": "StreamIt", "loc": 10, "block": "<pre class=\"text highlighted_source\">void-&gt;int feedbackloop Fib {<br/>    join roundrobin(0,1);<br/>    body in-&gt;int filter {<br/>        work pop 1 push 1 peek 2 { push(peek(0) + peek(1)); pop(); }<br/>    };<br/>    loop Identity&lt;int&gt;;<br/>    split duplicate;<br/>    enqueue(0);<br/>    enqueue(1);<br/>}</pre>"}, {"lang": "SuperCollider", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f = { |n| if(n &lt; 2) { n } { f.(n-1) + f.(n-2) } };<br/>(0..20).collect(f)<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 12, "block": "<pre class=\"text highlighted_source\">import Cocoa<br/>\u00a0<br/>func fibonacci(n: Int) -&gt; Int {<br/>    let square_root_of_5 = sqrt(5.0)<br/>    let p = (1 + square_root_of_5) / 2<br/>    let q = 1 / p<br/>    return Int((pow(p,CDouble(n)) + pow(q,CDouble(n))) / square_root_of_5 + 0.5)<br/>}<br/>\u00a0<br/>for i in 1...30 {<br/>    println(fibonacci(i))<br/>}</pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> fibiter n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> prev <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> fib <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$fib</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> fib <span class=\"re0\">$prev</span><span class=\"br0\">]</span><span class=\"br0\">]</span> prev fib<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$fib</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">{0,1<br/>While 1<br/>Disp Ans(1<br/>{Ans(2),sum(Ans<br/>End</pre>"}, {"lang": "TI-89 BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">fib(n)<br/>when(n&lt;2, n, fib(n-1) + fib(n-2))</pre>"}, {"lang": "TSE SAL", "loc": 48, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>// library: math: get: series: fibonacci &lt;description&gt;&lt;/description&gt; &lt;version control&gt;&lt;/version control&gt; &lt;version&gt;1.0.0.0.3&lt;/version&gt; &lt;version control&gt;&lt;/version control&gt; (filenamemacro=getmasfi.s) [&lt;Program&gt;] [&lt;Research&gt;] [kn, ri, su, 20-01-2013 22:04:02]<br/>INTEGER PROC FNMathGetSeriesFibonacciI( INTEGER  nI )<br/> //<br/> // Method:<br/> //<br/> // 1. Take the sum of the last 2 terms<br/> //<br/> // 2. Let the sum be the last term<br/> //    and goto step 1<br/> //<br/> INTEGER I = 0<br/> INTEGER minI = 1<br/> INTEGER maxI = nI<br/> INTEGER term1I = 0<br/> INTEGER term2I = 1<br/> INTEGER term3I = 0<br/> //<br/> FOR I = minI TO maxI<br/>  //<br/>  // make value 3 equal to sum of two previous values 1 and 2<br/>  //<br/>  term3I = term1I + term2I<br/>  //<br/>  // make value 1 equal to next value 2<br/>  //<br/>  term1I = term2I<br/>  //<br/>  // make value 2 equal to next value 3<br/>  //<br/>  term2I = term3I<br/>  //<br/>  ENDFOR<br/>  //<br/> RETURN( term3I )<br/> //<br/>END<br/>\u00a0<br/>PROC Main()<br/> STRING s1[255] = \"3\"<br/> REPEAT<br/>  IF ( NOT ( Ask( \" = \", s1, _EDIT_HISTORY_ ) ) AND ( Length( s1 ) &gt; 0 ) ) RETURN() ENDIF<br/>  Warn( FNMathGetSeriesFibonacciI( Val( s1 ) ) ) // gives e.g. 3<br/> UNTIL FALSE<br/>END<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "TUSCRIPT", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>ASK \"What fibionacci number do you want?\": searchfib=\"\"<br/>IF (searchfib!='digits') STOP<br/>Loop n=0,{searchfib}<br/> IF (n==0) THEN<br/>   fib=fiba=n<br/> ELSEIF (n==1) THEN<br/>   fib=fibb=n<br/> ELSE<br/>   fib=fiba+fibb, fiba=fibb, fibb=fib<br/> ENDIF<br/> IF (n!=searchfib) CYCLE<br/> PRINT \"fibionacci number \",n,\"=\",fib<br/>ENDLOOP<br/>\u00a0</pre>"}, {"lang": "UnixPipes", "loc": 4, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> <span class=\"nu0\">1</span> <span class=\"sy0\">|</span><span class=\"kw2\">tee</span> <span class=\"kw2\">last</span> fib\u00a0; <span class=\"kw2\">tail</span> <span class=\"re5\">-f</span> fib <span class=\"sy0\">|</span> <span class=\"kw1\">while</span> <span class=\"kw2\">read</span> x<br/><span class=\"kw1\">do</span><br/>   <span class=\"kw2\">cat</span> <span class=\"kw2\">last</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tee</span> <span class=\"re5\">-a</span> fib <span class=\"sy0\">|</span> <span class=\"kw2\">xargs</span> <span class=\"re5\">-n</span> <span class=\"nu0\">1</span> <span class=\"kw2\">expr</span> <span class=\"re1\">$x</span> + <span class=\"sy0\">|</span><span class=\"kw2\">tee</span> <span class=\"kw2\">last</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "UNIX Shell", "loc": 12, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/><span class=\"re2\">a</span>=<span class=\"nu0\">0</span><br/><span class=\"re2\">b</span>=<span class=\"nu0\">1</span><br/><span class=\"re2\">max</span>=<span class=\"re4\">$1</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">n</span>=<span class=\"nu0\">1</span>; <span class=\"st0\">\"<span class=\"es2\">$n</span>\"</span> <span class=\"sy0\">&lt;</span>= <span class=\"st0\">\"<span class=\"es2\">$max</span>\"</span>; $<span class=\"br0\">(</span><span class=\"br0\">(</span>n++<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">do</span><br/>  <span class=\"re2\">a</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re1\">$a</span> + <span class=\"re1\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"F(<span class=\"es2\">$n</span>): <span class=\"es2\">$a</span>\"</span><br/>  <span class=\"re2\">b</span>=$<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re1\">$a</span> - <span class=\"re1\">$b</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "Ursa", "loc": 12, "block": "<pre class=\"text highlighted_source\">def fibIter (int n)<br/>\tif (&lt; n 2)<br/>\t\treturn n<br/>\tend if<br/>\tdecl int fib fibPrev num<br/>\tset fib (set fibPrev 1)<br/>\tfor (set num 2) (&lt; num n) (inc num)<br/>\t\tset fib (+ fib fibPrev)<br/>\t\tset fibPrev (- fib fibPrev)<br/>\tend for<br/>\treturn fib<br/>end</pre>"}, {"lang": "Ursala", "loc": 14, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>iterative_fib = ~&amp;/(0,1); ~&amp;r-&gt;ll ^|\\predecessor ^/~&amp;r sum<br/>\u00a0<br/>recursive_fib = {0,1}^?&lt;a/~&amp;a sum^|W/~&amp; predecessor^~/~&amp; predecessor<br/>\u00a0<br/>analytical_fib =<br/>\u00a0<br/>%np+ -+<br/>   mp..round; ..mp2str; sep`+; ^CNC/~&amp;hh take^\\~&amp;htt\u00a0%<a class=\"__cf_email__\" data-cfemail=\"c4aab484b0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<br/>   (mp..div^|\\~&amp; mp..sub+ ~~ @rlX mp..pow_ui)^lrlPGrrPX/~&amp; -+<br/>      ^\\~&amp; ^(~&amp;,mp..sub/1.E0)+ mp..div\\2.E0+ mp..add/1.E0,<br/>      mp..sqrt+ ..grow/5.E0+-+-</pre>"}, {"lang": "V", "loc": 5, "block": "<pre class=\"text highlighted_source\">[fib<br/>   [small?] []<br/>     [pred dup pred]<br/>     [+]<br/>   binrec].</pre>"}, {"lang": "Vala", "loc": 8, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw4\">int</span> fibRec<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">return</span> fibRec<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fibRec<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VAX Assembly", "loc": 35, "block": "<pre class=\"text highlighted_source\">                               0000  0000     1 .entry\tmain,0<br/>                            7E 7CFD  0002     2 \tclro\t-(sp)\t\t\t;result buffer<br/>                            5E   DD  0005     3 \tpushl\tsp\t\t\t;pointer to buffer<br/>                            10   DD  0007     4 \tpushl\t#16\t\t\t;descriptor: len of buffer<br/>                       5B   5E   D0  0009     5 \tmovl\tsp, r11\t\t\t;-&gt; descriptor<br/>                                     000C     6 <br/>                       7E   01   7D  000C     7 \tmovq\t#1, -(sp)\t\t;init 0,1<br/>                                     000F     8 loop:<br/>               7E   6E   04 AE   C1  000F     9 \taddl3\t4(sp), (sp), -(sp)\t;next element on stack<br/>                            17   1D  0014    10 \tbvs\tret\t\t\t;vs - overflow set, exit<br/>                                     0016    11 <br/>                            5B   DD  0016    12 \tpushl\tr11\t\t\t;-&gt; descriptor by ref<br/>                         04 AE   DF  0018    13 \tpushal\t4(sp)\t\t\t;-&gt; fib on stack by ref<br/>              00000000'GF   02   FB  001B    14 \tcalls\t#2, g^ots$cvt_l_ti\t;convert integer to string<br/>                            5B   DD  0022    15 \tpushl\tr11\t\t\t;<br/>              00000000'GF   01   FB  0024    16 \tcalls\t#1, g^lib$put_output\t;show result<br/>                            E2   11  002B    17 \tbrb\tloop<br/>                                     002D    18 ret:<br/>                                 04  002D    19 \tret<br/>                                     002E    20 .end\tmain<br/>$ run fib<br/>...<br/>        14930352<br/>        24157817<br/>        39088169<br/>        63245986<br/>       102334155<br/>       165580141<br/>       267914296<br/>       433494437<br/>       701408733<br/>      1134903170<br/>      1836311903<br/>$<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Function Fib(n As Integer) As Long<br/>    Dim fib0, fib1, sum As Long<br/>    Dim i As Integer<br/>    fib0 = 0<br/>    fib1 = 1<br/>    For i = 1 To n<br/>        sum = fib0 + fib1<br/>        fib0 = fib1<br/>        fib1 = sum<br/>    Next<br/>    Fib = fib0<br/>End Function<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 44, "block": "<pre class=\"vb highlighted_source\">class generator<br/>\t<span class=\"kw4\">dim</span> t1<br/>\t<span class=\"kw4\">dim</span> t2<br/>\t<span class=\"kw4\">dim</span> tn<br/>\t<span class=\"kw4\">dim</span> cur_overflow<br/>\u00a0<br/>\t<span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> Class_Initialize<br/>\t\tcur_overflow = <span class=\"kw5\">false</span><br/>\t\tt1 = ccur(0)<br/>\t\tt2 = ccur(1)<br/>\t\ttn = ccur(t1 + t2)<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> default <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> generated<br/>\t\t<span class=\"kw4\">on</span> <span class=\"kw4\">error</span> <span class=\"kw4\">resume</span> <span class=\"kw3\">next</span><br/>\u00a0<br/>\t\tgenerated = ccur(tn)<br/>\t\t<span class=\"kw3\">if</span> err.number &lt;&gt; 0 <span class=\"kw3\">then</span> <br/>\t\t\tgenerated = cdbl(tn)<br/>\t\t\tcur_overflow = <span class=\"kw5\">true</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\tt1 = ccur(t2)<br/>\t\t<span class=\"kw3\">if</span> err.number &lt;&gt; 0 <span class=\"kw3\">then</span> <br/>\t\t\tt1 = cdbl(t2)<br/>\t\t\tcur_overflow = <span class=\"kw5\">true</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\tt2 = ccur(tn)<br/>\t\t<span class=\"kw3\">if</span> err.number &lt;&gt; 0 <span class=\"kw3\">then</span> <br/>\t\t\tt2 = cdbl(tn)<br/>\t\t\tcur_overflow = <span class=\"kw5\">true</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\ttn = ccur(t1+ t2)<br/>\t\t<span class=\"kw3\">if</span> err.number &lt;&gt; 0 <span class=\"kw3\">then</span> <br/>\t\t\ttn = cdbl(t1) + cdbl(t2)<br/>\t\t\tcur_overflow = <span class=\"kw5\">true</span><br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw4\">on</span> <span class=\"kw4\">error</span> <span class=\"kw3\">goto</span> 0<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> overflow<br/>\t\toverflow = cur_overflow<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/><span class=\"kw3\">end</span> class</pre>"}, {"lang": "Vedit macro language", "loc": 9, "block": "<pre class=\"vedit highlighted_source\"><span class=\"sy0\">:</span>FIBONACCI<span class=\"sy0\">:</span><br/>#<span class=\"nu0\">11</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>#<span class=\"nu0\">12</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    #<span class=\"nu0\">10</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">11</span> <span class=\"sy0\">+</span> #<span class=\"nu0\">12</span><br/>    #<span class=\"nu0\">11</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">12</span><br/>    #<span class=\"nu0\">12</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">10</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><span class=\"br0\">(</span>#<span class=\"nu0\">11</span><span class=\"br0\">)</span></pre>"}, {"lang": "Visual Basic", "loc": 14, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> fibonacci()<br/>    Const n = 139 <br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw4\">Dim</span> f1 <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, f2 <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, f3 <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span> <span class=\"co1\">'for Decimal<br/></span>    f1 = CDec(0): f2 = CDec(1) <span class=\"co1\">'for Decimal setting<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"fibo(\"</span>; 0; <span class=\"st0\">\")=\"</span>; f1<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"fibo(\"</span>; 1; <span class=\"st0\">\")=\"</span>; f2<br/>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> n<br/>        f3 = f1 + f2<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"fibo(\"</span>; i; <span class=\"st0\">\")=\"</span>; f3<br/>        f1 = f2<br/>        f2 = f3<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> 'fibonacci</pre>"}, {"lang": "Visual Basic .NET", "loc": 12, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Function</span> Fib<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> n <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Decimal</span><br/>    <span class=\"kw1\">Dim</span> fib0, fib1, sum <span class=\"kw1\">As</span> <span class=\"kw2\">Decimal</span><br/>    <span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>    fib0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    fib1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        sum <span class=\"sy0\">=</span> fib0 <span class=\"sy0\">+</span> fib1<br/>        fib0 <span class=\"sy0\">=</span> fib1<br/>        fib1 <span class=\"sy0\">=</span> sum<br/>    <span class=\"kw1\">Next</span><br/>    Fib <span class=\"sy0\">=</span> fib0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Wart", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> <span class=\"br0\">(</span>fib n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    n<br/>    <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>fib n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fib n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "WDTE", "loc": 4, "block": "<pre class=\"text highlighted_source\">let memo fib n =&gt; switch n {<br/>  == 0 =&gt; 0; == 1 =&gt; 1;<br/>  default =&gt; + (fib (- n 1)) (fib (- n 2));<br/>};</pre>"}, {"lang": "Whitespace", "loc": 13, "block": "<pre class=\"whitespace highlighted_source\"><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/>\u00a0<br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><br/><span class=\"re3\">\t</span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re3\">\t</span><br/><span class=\"re3\">\t</span><span class=\"re2\"> </span><span class=\"re2\"> </span><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><br/><span class=\"re2\"> </span><span class=\"re2\"> </span></pre>"}, {"lang": "Wrapl", "loc": 4, "block": "<pre class=\"text highlighted_source\">DEF fib() (<br/>    VAR seq &lt;- [0, 1]; EVERY SUSP seq:values;<br/>    REP SUSP seq:put(seq:pop + seq[1])[-1];<br/>);</pre>"}, {"lang": "x86 Assembly", "loc": 51, "block": "<pre class=\"asm highlighted_source\">TITLE i hate visual studio <span class=\"nu0\">4</span>\t\t\t<span class=\"br0\">(</span>Fibs<span class=\"sy1\">.</span>asm<span class=\"br0\">)</span><br/><span class=\"co1\">;       __         __/--------\\</span><br/><span class=\"co1\">;      &gt;__ \\      /  |        |\\</span><br/><span class=\"co1\">;         \\  \\___/ @  \\      /   \\__________________</span><br/><span class=\"co1\">;           \\____       \\  /                         \\\\\\</span><br/><span class=\"co1\">;                \\____         Coded with love by:    |||</span><br/><span class=\"co1\">;                      \\      Alexander Alvonellos    |||</span><br/><span class=\"co1\">;                       |          9/29/2011         / ||</span><br/><span class=\"co1\">;                       |                           |  MM</span><br/><span class=\"co1\">;                       |      |--------------|     |</span><br/><span class=\"co1\">;                       |&lt;     |              |&lt;    |</span><br/><span class=\"co1\">;                       |      |              |     |</span><br/><span class=\"co1\">;                       |mmmmmm|              |mmmmm|</span><br/><span class=\"co1\">;; Epic Win. </span><br/>\u00a0<br/>INCLUDE Irvine32<span class=\"sy1\">.</span><span class=\"kw1\">inc</span><br/>\u00a0<br/><span class=\"kw5\">.data</span><br/>\tBEERCOUNT = <span class=\"nu0\">48</span><span class=\"co1\">;</span><br/>\tFibs <span class=\"kw5\">dd</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> BEERCOUNT DUP<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"co1\">;</span><br/>\u00a0<br/><span class=\"sy1\">.</span><span class=\"kw5\">code</span><br/>main PROC<br/><span class=\"co1\">; I am not responsible for this code.</span><br/><span class=\"co1\">; They made me write it, against my will.</span><br/>\t<span class=\"co1\">;Here be dragons</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">esi</span><span class=\"sy1\">,</span> offset Fibs<span class=\"co1\">; offset array; \u00a0;;were to start (start)</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">ecx</span><span class=\"sy1\">,</span> BEERCOUNT<span class=\"co1\">; \t\t;;count of items (how many)</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"co1\">; \t\t;;size (in number of bytes)</span><br/>\t<span class=\"kw1\">call</span> DumpMem<span class=\"co1\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">ecx</span><span class=\"sy1\">,</span> BEERCOUNT<span class=\"co1\">; \t;//http://www.wolframalpha.com/input/?i=F ib%5B47%5D+%3E+4294967295</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">esi</span><span class=\"sy1\">,</span> offset Fibs<br/>\tNextPlease<span class=\"sy1\">:</span><span class=\"co1\">;</span><br/>\t\t<span class=\"kw1\">mov</span> <span class=\"kw4\">eax</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">esi</span><span class=\"br0\">]</span><span class=\"co1\">; \t;//Get me the data from location at ESI</span><br/>\t\t<span class=\"kw1\">add</span> <span class=\"kw4\">eax</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">esi</span><span class=\"sy1\">+</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"co1\">;\t;//add into the eax the data at esi + another double (next mem loc)</span><br/>\t\t<span class=\"kw1\">mov</span> <span class=\"br0\">[</span><span class=\"kw4\">esi</span><span class=\"sy1\">+</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw4\">eax</span><span class=\"co1\">;\t;//Move that data into the memory location after the second number</span><br/>\t\t<span class=\"kw1\">add</span> <span class=\"kw4\">esi</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"co1\">;\t\t\t;//Update the pointer</span><br/>\t<span class=\"kw1\">loop</span> NextPlease<span class=\"co1\">;\t;//Thank you sir, may I have another?</span><br/>\u00a0<br/>\u00a0<br/>\t<span class=\"co1\">;Here be dragons</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">esi</span><span class=\"sy1\">,</span> offset Fibs<span class=\"co1\">; offset array; \u00a0;;were to start (start)</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">ecx</span><span class=\"sy1\">,</span> BEERCOUNT<span class=\"co1\">; \t\t;;count of items (how many)</span><br/>\t<span class=\"kw1\">mov</span> <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"co1\">; \t\t;;size (in number of bytes)</span><br/>\t<span class=\"kw1\">call</span> DumpMem<span class=\"co1\">;</span><br/>\u00a0<br/>\texit\t\t<span class=\"co1\">; exit to operating system</span><br/>main ENDP<br/>\u00a0<br/>END main</pre>"}, {"lang": "xEec", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>h#1 h#1 h#1 o# <br/>h#10 o$ p <br/>&gt;f <br/>  o# h#10 o$ p <br/>  ma h? jnext p<br/>  t<br/>jnf<br/>\u00a0</pre>"}, {"lang": "XLISP", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">DEFUN</span> FIBONACCI <span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>FLOOR <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">EXPT</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">SQRT</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> N<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">SQRT</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XQuery", "loc": 5, "block": "<pre class=\"text highlighted_source\">declare function local:fib($n as xs:integer) as xs:integer {<br/>  if($n &lt; 2)<br/>  then $n<br/>  else local:fib($n - 1) + local:fib($n - 2)<br/>};</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">var fibShift=fcn(ab){ab.append(ab.sum()).pop(0)}.fp(L(0,1));</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 9, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"co3\">REM Only positive numbers</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">10</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> n1=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> n2=<span class=\"nu0\">1</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> k=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> sum=n1+n2<br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> n1=n2<br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> n2=sum<br/><span class=\"nu0\">80</span> <span class=\"kw1\">NEXT</span> k<br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> n1</pre>"}]}