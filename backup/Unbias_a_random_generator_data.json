{"task": "Unbias_a_random_generator", "blocks": [{"lang": "Ada", "loc": 51, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Bias_Unbias <span class=\"kw1\">is</span><br/>\u00a0<br/>   Modulus: <span class=\"kw3\">constant</span> Integer\u00a0:= <span class=\"nu0\">60</span>; <span class=\"co1\">-- lcm of {3,4,5,6}</span><br/>   <span class=\"kw3\">type</span> M <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> Modulus;<br/>   <span class=\"kw3\">package</span> Rand <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span>;<br/>   Gen: Rand.<span class=\"me1\">Generator</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Bit <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">1</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Biased_Bit<span class=\"br0\">(</span>Bias_Base: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Bit <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Integer<span class=\"br0\">(</span>Rand.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span><span class=\"br0\">)</span>* Bias_Base<span class=\"br0\">)</span> / Modulus &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Biased_Bit;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Unbiased_Bit<span class=\"br0\">(</span>Bias_Base: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Bit <span class=\"kw1\">is</span><br/>      A, B: Bit\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> A = B <span class=\"kw1\">loop</span><br/>         A\u00a0:= Biased_Bit<span class=\"br0\">(</span>Bias_Base<span class=\"br0\">)</span>;<br/>         B\u00a0:= Biased_Bit<span class=\"br0\">(</span>Bias_Base<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> A;<br/>   <span class=\"kw1\">end</span> Unbiased_Bit;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> FIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Float_IO</span><span class=\"br0\">(</span>Float<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Counter_B, Counter_U: Natural;<br/>   Number_Of_Samples: <span class=\"kw3\">constant</span> Natural\u00a0:= <span class=\"nu0\">10</span>_000;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Rand.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\" I  Biased% UnBiased%\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">3</span> .. <span class=\"nu0\">6</span> <span class=\"kw1\">loop</span><br/>      Counter_B\u00a0:= <span class=\"nu0\">0</span>;<br/>      Counter_U\u00a0:= <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Number_Of_Samples</span> <span class=\"kw1\">loop</span><br/>         Counter_B\u00a0:= Counter_B + Biased_Bit<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>         Counter_U\u00a0:= Counter_U + Unbiased_Bit<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      FIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span> * Float<span class=\"br0\">(</span>Counter_B<span class=\"br0\">)</span> / Float<span class=\"br0\">(</span>Number_Of_Samples<span class=\"br0\">)</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      FIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"nu0\">100.0</span> * Float<span class=\"br0\">(</span>Counter_U<span class=\"br0\">)</span> / Float<span class=\"br0\">(</span>Number_Of_Samples<span class=\"br0\">)</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Bias_Unbias;</pre>"}, {"lang": "Aime", "loc": 39, "block": "<pre class=\"text highlighted_source\">integer<br/>biased(integer bias)<br/>{<br/>    1 ^ min(drand(bias - 1), 1);<br/>}<br/>\u00a0<br/>integer<br/>unbiased(integer bias)<br/>{<br/>    integer a;<br/>\u00a0<br/>    while ((a = biased(bias)) == biased(bias)) {<br/>    }<br/>\u00a0<br/>    a;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    integer b, n, cb, cu, i;<br/>\u00a0<br/>    n = 10000;<br/>    b = 3;<br/>    while (b &lt;= 6) {<br/>        i = cb = cu = 0;<br/>        while ((i += 1) &lt;= n) {<br/>            cb += biased(b);<br/>            cu += unbiased(b);<br/>        }<br/>\u00a0<br/>        o_form(\"bias ~: /d2p2/%% vs /d2p2/%%\\n\", b, 100r * cb / n,<br/>               100r * cu / n);<br/>\u00a0<br/>        b += 1;<br/>    }<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"autohotkey highlighted_source\">Biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>   <span class=\"kw1\">return</span> q<span class=\"sy0\">=</span><span class=\"nu0\">4</span><br/><span class=\"br0\">}</span><br/>Unbiased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">:=</span> Biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0!<span class=\"sy0\">=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> a<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">1000</span><br/>   t <span class=\"sy0\">.=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> t2 <span class=\"sy0\">.=</span> unbiased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> junk<span class=\"sy0\">,</span> t2<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> UseErrorLevel<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"Unbiased probability of a 1 occurring: \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">Errorlevel</span></a><span class=\"sy0\">/</span><span class=\"nu0\">1000</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> junk<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">,</span> UseErrorLevel<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"biased probability of a 1 occurring: \"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">Errorlevel</span></a><span class=\"sy0\">/</span><span class=\"nu0\">1000</span></pre>"}, {"lang": "BBC BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">      FOR N% = 3 TO 6<br/>        biased% = 0<br/>        unbiased% = 0<br/>        FOR I% = 1 TO 10000<br/>          IF FNrandN(N%) biased% += 1<br/>          IF FNunbiased(N%) unbiased% += 1<br/>        NEXT<br/>        PRINT \"N = \";N% \"\u00a0: biased = \"; biased%/100 \"%, unbiased = \"; unbiased%/100 \"%\"<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNunbiased(N%)<br/>      LOCAL A%,B%<br/>      REPEAT<br/>        A% = FNrandN(N%)<br/>        B% = FNrandN(N%)<br/>      UNTIL A%&lt;&gt;B%<br/>      = A%<br/>\u00a0<br/>      DEF FNrandN(N%) = -(RND(N%) = 1)</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> biased<span class=\"br0\">(</span><span class=\"kw4\">int</span> bias<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"coMULTI\">/* balance out the bins, being pedantic */</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> rand_max <span class=\"sy0\">=</span> RAND_MAX <span class=\"sy0\">-</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">%</span> bias<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> rand_max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">&lt;</span> rand_max <span class=\"sy0\">/</span> bias<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> unbiased<span class=\"br0\">(</span><span class=\"kw4\">int</span> bias<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> a<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>bias<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> biased<span class=\"br0\">(</span>bias<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> b<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> cb<span class=\"sy0\">,</span> cu<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> cb <span class=\"sy0\">=</span> cu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tcb <span class=\"sy0\">+=</span> biased<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tcu <span class=\"sy0\">+=</span> unbiased<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"bias\u00a0%d:\u00a0%5.3f%% vs\u00a0%5.3f%%<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"nu0\">100</span>. <span class=\"sy0\">*</span> cb <span class=\"sy0\">/</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">100</span>. <span class=\"sy0\">*</span> cu <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 59, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>\u00a0<br/>namespace Unbias<br/><span class=\"br0\">{</span><br/>    internal class Program<br/>    <span class=\"br0\">{</span><br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Demonstrate.</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> biasedZero <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> biasedOne <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> unbiasedZero <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> unbiasedOne <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        biasedOne<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">else</span><br/>                        biasedZero<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        unbiasedOne<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">else</span><br/>                        unbiasedZero<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"(N = {0}):\"</span>.<span class=\"me1\">PadRight</span><span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"# of 0<span class=\"es1\">\\t</span># of 1<span class=\"es1\">\\t</span>% of 0<span class=\"es1\">\\t</span>% of 1\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Biased:\"</span>.<span class=\"me1\">PadRight</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"{0}<span class=\"es1\">\\t</span>{1}<span class=\"es1\">\\t</span>{2}<span class=\"es1\">\\t</span>{3}\"</span><span class=\"sy0\">,</span><br/>                                  biasedZero<span class=\"sy0\">,</span> biasedOne<span class=\"sy0\">,</span><br/>                                  biasedZero<span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> biasedOne<span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Unbiased:\"</span>.<span class=\"me1\">PadRight</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"{0}<span class=\"es1\">\\t</span>{1}<span class=\"es1\">\\t</span>{2}<span class=\"es1\">\\t</span>{3}\"</span><span class=\"sy0\">,</span><br/>                                  unbiasedZero<span class=\"sy0\">,</span> unbiasedOne<span class=\"sy0\">,</span><br/>                                  unbiasedZero<span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> unbiasedOne<span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> bool Unbiased<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            bool flip1<span class=\"sy0\">,</span> flip2<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"coMULTI\">/* Flip twice, and check if the values are the same.<br/>             * If so, flip again. Otherwise, return the value of the first flip. */</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span><br/>            <span class=\"br0\">{</span><br/>                flip1 <span class=\"sy0\">=</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                flip2 <span class=\"sy0\">=</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>flip1 <span class=\"sy0\">==</span> flip2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> flip1<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> readonly Random random <span class=\"sy0\">=</span> new Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> bool randN<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Has an 1/n chance of returning 1. Otherwise it returns 0.</span><br/>            <span class=\"kw1\">return</span> random.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 17, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> biased <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>rand <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> unbiased <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>a <span class=\"nu0\">0</span> b <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> a b<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>biased n<span class=\"br0\">)</span> <span class=\"br0\">(</span>biased n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">3</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span>n<br/>   <span class=\"br0\">(</span>double <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">50000</span> <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> #<span class=\"br0\">(</span>biased n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">50000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>double <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">50000</span> <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> #<span class=\"br0\">(</span>unbiased n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">50000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">0.83292</span> <span class=\"nu0\">0.50422</span><span class=\"br0\">]</span><br/> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"nu0\">0.87684</span> <span class=\"nu0\">0.5023</span><span class=\"br0\">]</span><br/> <span class=\"br0\">[</span><span class=\"nu0\">5</span> <span class=\"nu0\">0.90122</span> <span class=\"nu0\">0.49728</span><span class=\"br0\">]</span><br/> <span class=\"br0\">[</span><span class=\"nu0\">6</span> <span class=\"nu0\">0.91526</span> <span class=\"nu0\">0.5</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 31, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>biased_rand_function = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># return a function that returns 0/1  with</span><br/>  <span class=\"co1\"># 1 appearing only 1/Nth of the time</span><br/>  cap = <span class=\"nu0\">1</span><span class=\"sy0\">/</span>n<br/>  <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> cap <br/>      <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"nu0\">0</span><br/>\u00a0<br/>unbiased_function = <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">true</span><br/>      <span class=\"br0\">[</span>n1<span class=\"sy0\">,</span> n2<span class=\"br0\">]</span> = <span class=\"br0\">[</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">return</span> n1 <span class=\"kw1\">if</span> n1 <span class=\"sy0\">+</span> n2 == <span class=\"nu0\">1</span><br/>\u00a0<br/>stats = <span class=\"br0\">(</span>label<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  cnt = <span class=\"nu0\">0</span><br/>  sample_size = <span class=\"nu0\">10000000</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>...<span class=\"me1\">sample_size</span><span class=\"br0\">]</span><br/>    cnt <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"ratio of 1s: #{cnt / sample_size} [#{label}]\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span>..<span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>---------- n = #{n}\"</span><br/>  f_biased = biased_rand_function<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  f_unbiased = unbiased_function f_biased<br/>  stats <span class=\"st0\">\"biased\"</span><span class=\"sy0\">,</span> f_biased<br/>  stats <span class=\"st0\">\"unbiased\"</span><span class=\"sy0\">,</span> f_unbiased<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> biased <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> unbiased <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop with x <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> x <span class=\"br0\">(</span>biased n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>biased n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">return</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for n from <span class=\"nu0\">3</span> to <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>u <span class=\"br0\">(</span>loop repeat <span class=\"nu0\">10000</span> collect <span class=\"br0\">(</span>unbiased n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span>b <span class=\"br0\">(</span>loop repeat <span class=\"nu0\">10000</span> collect <span class=\"br0\">(</span>biased n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>format t <span class=\"st0\">\"~a: unbiased ~d biased ~d~%\"</span> n <span class=\"br0\">(</span>count <span class=\"nu0\">0</span> u<span class=\"br0\">)</span> <span class=\"br0\">(</span>count <span class=\"nu0\">0</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 17, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> biased <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> <span class=\"sy0\">=&gt;</span> uniform01 <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> unbiased<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> bias<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> a<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">=</span> bias.<span class=\"me1\">biased</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> bias.<span class=\"me1\">biased</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> M <span class=\"sy0\">=</span> <span class=\"nu0\">500</span>_000<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">..</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%2.3f%% \u00a0%2.3f%%\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span><br/>                 M.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>_<span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">biased</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">*</span> <span class=\"nu16\">100.0</span> <span class=\"sy0\">/</span> M<span class=\"sy0\">,</span><br/>                 M.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>_<span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">unbiased</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">*</span> <span class=\"nu16\">100.0</span> <span class=\"sy0\">/</span> M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 45, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>int extension $op<br/>{<br/>    bool randN<br/>        = randomGenerator nextInt(self) == 0.<br/>\u00a0<br/>    bool unbiased        <br/>    [<br/>        bool flip1\u00a0:= self randN.<br/>        bool flip2\u00a0:= self randN.<br/>\u00a0<br/>        while (flip1 == flip2)<br/>        [<br/>            flip1\u00a0:= self randN.<br/>            flip2\u00a0:= self randN.<br/>        ].<br/>\u00a0<br/>        ^ flip1<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    3 to:6 do(:n)&lt;int&gt;<br/>    [<br/>        int biasedZero\u00a0:= 0.<br/>        int biasedOne\u00a0:= 0.<br/>        int unbiasedZero\u00a0:= 0.<br/>        int unbiasedOne\u00a0:= 0.<br/>\u00a0<br/>        0 till:100000 do(:i)<br/>        [<br/>            if (n randN) [ biasedOne += 1 ]; [ biasedZero += 1 ].<br/>            if (n unbiased) [ unbiasedOne += 1 ]; [ unbiasedZero += 1 ]<br/>        ].<br/>\u00a0<br/>        console <br/>            printLineFormatted(\"(N = {0}):\" padRight(17) + \"# of 0\"$9\"# of 1\"$9\"% of 0\"$9\"% of 1\", n);<br/>            printLineFormatted(\"Biased:\" padRight(15) + \"{0}\"$9\"{1}\"$9\"{2}\"$9\"{3}\", <br/>                                    biasedZero, biasedOne, biasedZero / 1000, biasedOne / 1000);<br/>            printLineFormatted(\"Unbiased:\" padRight(15) + \"{0}\"$9\"{1}\"$9\"{2}\"$9\"{3}\", <br/>                                    unbiasedZero, unbiasedOne, unbiasedZero / 1000, unbiasedOne / 1000).<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 17, "block": "<pre class=\"text highlighted_source\">defmodule Random do<br/>  def randN(n) do<br/>    if\u00a0:rand.uniform(n) == 1, do: 1, else: 0<br/>  end <br/>  def unbiased(n) do<br/>    {x, y} = {randN(n), randN(n)}<br/>    if x\u00a0!= y, do: x, else: unbiased(n)<br/>  end <br/>end<br/>\u00a0<br/>IO.puts \"N  biased  unbiased\"<br/>m = 10000<br/>for n &lt;- 3..6 do<br/>  xs = for _ &lt;- 1..m, do: Random.randN(n)<br/>  ys = for _ &lt;- 1..m, do: Random.unbiased(n)<br/>  IO.puts \"#{n}  #{Enum.sum(xs) / m}  #{Enum.sum(ys) / m}\"<br/>end</pre>"}, {"lang": "ERRE", "loc": 31, "block": "<pre class=\"text highlighted_source\">PROGRAM UNBIAS<br/>\u00a0<br/>FUNCTION RANDN(N)<br/>   RANDN=INT(1+N*RND(1))=1<br/>END FUNCTION<br/>\u00a0<br/>PROCEDURE UNBIASED(N-&gt;RIS)<br/>      LOCAL A,B<br/>      REPEAT<br/>        A=RANDN(N)<br/>        B=RANDN(N)<br/>      UNTIL A&lt;&gt;B<br/>      RIS=A<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)\u00a0! CLS<br/>  RANDOMIZE(TIMER)<br/>\u00a0<br/>  FOR N=3 TO 6 DO<br/>        BIASED=0<br/>        UNBIASED=0<br/>        FOR I=1 TO 10000 DO<br/>          IF RANDN(N) THEN biased+=1<br/>          UNBIASED(N-&gt;RIS)<br/>          IF RIS THEN unbiased+=+1<br/>        END FOR<br/>        PRINT(\"N =\";N;\"\u00a0: biased =\";biased/100;\", unbiased =\";unbiased/100)<br/>  END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 25, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> randN<span class=\"br0\">(</span><span class=\"kw2\">integer</span> N<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> unbiased<span class=\"br0\">(</span><span class=\"kw2\">integer</span> N<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> a<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        a <span class=\"sy1\">=</span> randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> a\u00a0!<span class=\"sy1\">=</span> randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> a<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">10000</span><br/><span class=\"kw2\">integer</span> cb<span class=\"sy2\">,</span> cu<br/><span class=\"kw1\">for</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>    cb <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    cu <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>        cb <span class=\"sy1\">+=</span> randN<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>        cu <span class=\"sy1\">+=</span> unbiased<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%d:\u00a0%5.2f%% \u00a0%5.2f%%<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>b<span class=\"sy2\">,</span> <span class=\"nu0\">100</span> <span class=\"sy1\">*</span> cb <span class=\"sy1\">/</span> n<span class=\"sy2\">,</span> <span class=\"nu0\">100</span> <span class=\"sy1\">*</span> cu <span class=\"sy1\">/</span> n<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 22, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> random <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> randN <span class=\"sy0\">=</span> random.<span class=\"me1\">Next</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span><span class=\"nu0\">0</span> <span class=\"sy0\">&gt;&gt;</span> Convert.<span class=\"me1\">ToInt32</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> unbiased n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> randN n<br/>    <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;&gt;</span> randN n <span class=\"kw1\">then</span> a <span class=\"kw1\">else</span> unbiased n<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> argv.<span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> UInt32.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>argv.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">int</span> <span class=\"kw1\">else</span> <span class=\"nu0\">100000</span><br/>    <span class=\"kw1\">for</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> cb <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">let</span> cu <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>            cb <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>cb <span class=\"sy0\">+</span> randN b<br/>            cu <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>cu <span class=\"sy0\">+</span> unbiased b<br/>        printfn <span class=\"st0\">\"%d:\u00a0%5.2f%% \u00a0%5.2f%%\"</span><br/>            b <span class=\"br0\">(</span><span class=\"nu0\">100</span>. <span class=\"sy0\">*</span> <span class=\"kw4\">float</span> <span class=\"sy0\">!</span>cb <span class=\"sy0\">/</span> <span class=\"kw4\">float</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span>. <span class=\"sy0\">*</span> <span class=\"kw4\">float</span> <span class=\"sy0\">!</span>cu <span class=\"sy0\">/</span> <span class=\"kw4\">float</span> n<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Fortran", "loc": 49, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Bias_Unbias<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">samples</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">c1</span>, c2, rand<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">6</span><br/>    c1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    c2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, samples<br/>      rand <span class=\"sy0\">=</span> bias<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rand <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> c1 <span class=\"sy0\">=</span> c1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      rand <span class=\"sy0\">=</span> unbias<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rand <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> c2 <span class=\"sy0\">=</span> c2 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i2,a,f8.3,a,f8.3,a)\"</span><span class=\"br0\">)</span> i, <span class=\"st0\">\":\"</span>, <span class=\"kw3\">real</span><span class=\"br0\">(</span>c1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span> <span class=\"sy0\">/</span> <span class=\"kw3\">real</span><span class=\"br0\">(</span>samples<span class=\"br0\">)</span>, <span class=\"sy0\">&amp;</span><br/>                                     <span class=\"st0\">\"%\"</span>, <span class=\"kw3\">real</span><span class=\"br0\">(</span>c2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span> <span class=\"sy0\">/</span> <span class=\"kw3\">real</span><span class=\"br0\">(</span>samples<span class=\"br0\">)</span>, <span class=\"st0\">\"%\"</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> bias<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">bias</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r &gt; <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"kw3\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    bias <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">else</span><br/>    bias <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> unbias<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">unbias</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    a <span class=\"sy0\">=</span> bias<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    b <span class=\"sy0\">=</span> bias<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">/=</span> b<span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  unbias <span class=\"sy0\">=</span> a     <br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "GAP", "loc": 38, "block": "<pre class=\"text highlighted_source\">RandNGen\u00a0:= function(n)<br/>\tlocal v, rand;<br/>\tv\u00a0:= [1 .. n - 1]*0;<br/>\tAdd(v, 1);<br/>\trand\u00a0:= function()<br/>\t\treturn Random(v);<br/>\tend;<br/>\treturn rand;<br/>end;<br/>\u00a0<br/>UnbiasedGen\u00a0:= function(rand)<br/>\tlocal unbiased;<br/>\tunbiased\u00a0:= function()<br/>\t\tlocal a, b;<br/>\t\twhile true do<br/>\t\t\ta\u00a0:= rand();<br/>\t\t\tb\u00a0:= rand();<br/>\t\t\tif a &lt;&gt; b then<br/>\t\t\t\tbreak;<br/>\t\t\tfi;<br/>\t\tod;<br/>\t\treturn a;<br/>\tend;<br/>\treturn unbiased;<br/>end;<br/>\u00a0<br/>range\u00a0:= [2 .. 6];<br/>v\u00a0:= List(range, RandNGen);<br/>w\u00a0:= List(v, UnbiasedGen);<br/>apply\u00a0:= gen -&gt; Sum([1 .. 1000000], n -&gt; gen());<br/>\u00a0<br/># Some tests (2 is added as a witness, since in this case RandN is already unbiased)<br/>PrintArray(TransposedMat([range, List(v, apply), List(w, apply)]));<br/># [ [       2,  499991,  499041 ],<br/>#   [       3,  333310,  500044 ],<br/>#   [       4,  249851,  500663 ],<br/>#   [       5,  200532,  500448 ],<br/>#   [       6,  166746,  499859 ] ]</pre>"}, {"lang": "Go", "loc": 40, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> samples <span class=\"sy2\">=</span> <span class=\"nu1\">1e6</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Generator  1 count  0 count \u00a0% 1 count\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">6</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// function randN, per task description</span><br/>        randN <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">var</span> b <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; samples<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            b<span class=\"sy1\">[</span>randN<span class=\"sy1\">()]</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"randN(%d)  \u00a0%7d \u00a0%7d   \u00a0%5.2f%%<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>            n<span class=\"sy1\">,</span> b<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> b<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><span class=\"sy3\">*</span><span class=\"nu0\">100</span><span class=\"sy3\">/</span>samples<span class=\"sy1\">)</span><br/>\u00a0<br/>        <span class=\"co1\">// function unbiased, per task description</span><br/>        unbiased <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">(</span>b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> b <span class=\"sy2\">=</span> randN<span class=\"sy1\">();</span> b <span class=\"sy3\">==</span> randN<span class=\"sy1\">();</span> b <span class=\"sy2\">=</span> randN<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">var</span> u <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; samples<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            u<span class=\"sy1\">[</span>unbiased<span class=\"sy1\">()]</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"unbiased  \u00a0%7d \u00a0%7d   \u00a0%5.2f%%<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>            u<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> u<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>u<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><span class=\"sy3\">*</span><span class=\"nu0\">100</span><span class=\"sy3\">/</span>samples<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>randN <span class=\"sy0\">::</span> MonadRandom m <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> m <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>randN n <span class=\"sy0\">=</span> fromList <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 30, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    iters <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"nu0\">10000</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"ratios of 0 to 1 from \"</span><span class=\"sy0\">,</span>iters<span class=\"sy0\">,</span><span class=\"st0\">\" trials:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        results_randN <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        results_unbiased <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> iters <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            results_randN<span class=\"br0\">[</span>randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            results_unbiased<span class=\"br0\">[</span>unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>        showResults<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"randN\"</span><span class=\"sy0\">,</span> results_randN<span class=\"br0\">)</span><br/>        showResults<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"unbiased\"</span><span class=\"sy0\">,</span> results_unbiased<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showResults<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"kw4\">left</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\":\"</span><span class=\"sy0\">,</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span>t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>        n1 <span class=\"sy0\">:=</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        n2 <span class=\"sy0\">:=</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n1 <span class=\"sy0\">~=</span> n2 <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> n1<br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"kw1\">suspend</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"sy0\">?</span>n <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">randN=: <span class=\"nu0\">0</span> =\u00a0?<br/>unbiased=: <a class=\"__cf_email__\" data-cfemail=\"670e4927\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># {\u00a0::$: <span class=\"nu0\">2</span> | <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> -.~ <span class=\"nu0\">_2</span> #.\\ <span class=\"nu0\">4</span>&amp;* <a class=\"__cf_email__\" data-cfemail=\"9fedfef1fbd1df\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a># ]</pre>"}, {"lang": "Java", "loc": 27, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Bias <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> biased<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> unbiased<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span> a, b<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            a <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> M <span class=\"sy0\">=</span> <span class=\"nu0\">50000</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> c1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, c2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> M<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                c1 <span class=\"sy0\">+=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                c2 <span class=\"sy0\">+=</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%2.2f%% \u00a0%2.2f%%<span class=\"es0\">\\n</span>\"</span>,<br/>                              n, <span class=\"nu0\">100.0</span><span class=\"sy0\">*</span>c1<span class=\"sy0\">/</span>M, <span class=\"nu0\">100.0</span><span class=\"sy0\">*</span>c2<span class=\"sy0\">/</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">randN(N) = () -&gt; rand(1:N) == 1\u00a0? 1\u00a0: 0<br/>function unbiased(biased::Function)<br/>    this, that = biased(), biased()<br/>    while this == that this, that = biased(), biased() end<br/>    return this<br/>end<br/>\u00a0<br/>@printf \"%2s |\u00a0%10s |\u00a0%5s |\u00a0%5s |\u00a0%8s\" \"N\" \"bias./unb.\" \"1s\" \"0s\" \"pct ratio\"<br/>const nrep = 10000<br/>for N in 3:6<br/>    biased = randN(N)<br/>\u00a0<br/>    v = collect(biased() for __ in 1:nrep)<br/>    v1, v0 = count(v .== 1), count(v .== 0)<br/>    @printf(\"%2i |\u00a0%10s |\u00a0%5i |\u00a0%5i |\u00a0%5.2f%%\\n\", N, \"biased\", v1, v0, 100 * v1 / nrep)<br/>\u00a0<br/>    v = collect(unbiased(biased) for __ in 1:nrep)<br/>    v1, v0 = count(v .== 1), count(v .== 0)<br/>    @printf(\"%2i |\u00a0%10s |\u00a0%5i |\u00a0%5i |\u00a0%5.2f%%\\n\", N, \"unbiased\", v1, v0, 100 * v1 / nrep)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun biased<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> / n<br/>\u00a0<br/>fun unbiased<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a<span class=\"sy0\">:</span> Boolean<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b<span class=\"sy0\">:</span> Boolean<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        a <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <br/>        b <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> a<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><span class=\"sy0\">_</span>000<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <span class=\"st0\">\"%d:\u00a0%2.2f%% \u00a0%2.2f%%\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">3</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> c1++<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> c2++<br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span>f.<span class=\"me1\">format</span><span class=\"br0\">(</span>n, <span class=\"nu0\">100.0</span> <span class=\"sy0\">*</span> c1 / m, <span class=\"nu0\">100.0</span> <span class=\"sy0\">*</span> c2 / m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 44, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> biased <span class=\"sy0\">=</span> randN <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> a<span class=\"sy0\">==</span>b <span class=\"kw1\">do</span><br/>      a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> a<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> demonstrate <span class=\"br0\">(</span>samples<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>    biased <span class=\"sy0\">=</span> randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    unbias <span class=\"sy0\">=</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> bcounts <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> ucounts <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> samples <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">local</span> bnum <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">local</span> unum <span class=\"sy0\">=</span> unbias<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      bcounts<span class=\"br0\">[</span>bnum<span class=\"br0\">]</span> <span class=\"sy0\">=</span> bcounts<span class=\"br0\">[</span>bnum<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      ucounts<span class=\"br0\">[</span>unum<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ucounts<span class=\"br0\">[</span>unum<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"N =\u00a0%d\"</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"# 0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"# 1\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"% 0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"% 1\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"biased\"</span><span class=\"sy0\">,</span> bcounts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> bcounts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      bcounts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> samples <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span><br/>      bcounts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> samples <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"unbias\"</span><span class=\"sy0\">,</span> ucounts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ucounts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      ucounts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> samples <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span><br/>      ucounts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> samples <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>demonstrate<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">rand[bias_, n_]\u00a0:= 1 - <a class=\"__cf_email__\" data-cfemail=\"c99ca7a0bda0b3ac899ba8a7ada6a480a7bdacaeacbb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[bias - 1, n]<br/>\u00a0<br/>unbiased[bias_, n_]\u00a0:= <br/> DeleteCases[rand[bias, {n, 2}], {a_, a_}][[All, 1]]</pre>"}, {"lang": "NetRexx", "loc": 36, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method biased<span class=\"br0\">(</span>n = int<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> Math.<span class=\"me0\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> n<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method unbiased<span class=\"br0\">(</span>n = int<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  a = boolean<br/>  b = boolean<br/>  <span class=\"kw1\">loop</span> until a <span class=\"sy0\">\\</span>= b<br/>    a = biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    b = biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> a<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg Mx .<br/>  <span class=\"kw1\">if</span> Mx.<span class=\"me0\">length</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> Mx = <span class=\"nu0\">50000</span><br/>  M = int Mx<br/>  <span class=\"kw1\">loop</span> n = int <span class=\"nu0\">3</span> to <span class=\"nu0\">6</span><br/>    c1 = int <span class=\"nu0\">0</span><br/>    c2 = int <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">loop</span> for M<br/>      <span class=\"kw1\">if</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"kw3\">then</span> c1 = c1 + <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">then</span> c2 = c2 + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> Rexx<span class=\"br0\">(</span><span class=\"nu0\">100.0</span> <span class=\"sy0\">*</span> c1 <span class=\"sy0\">/</span> M<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">'%'</span> Rexx<span class=\"br0\">(</span><span class=\"nu0\">100.0</span> <span class=\"sy0\">*</span> c2 <span class=\"sy0\">/</span> M<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">'%'</span><br/>    <span class=\"kw3\">end</span> n<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 36, "block": "<pre class=\"text highlighted_source\">import math, strutils<br/>randomize()<br/>\u00a0<br/>template newSeqWith(len: int, init: expr): expr =<br/>  var result {.gensym.} = newSeq[type(init)](len)<br/>  for i in 0..&lt;len:<br/>    result[i] = init<br/>\u00a0<br/>proc randN(n): (proc: range[0..1]) =<br/>  proc: range[0..1] = ord(random(n) == 0)<br/>\u00a0<br/>proc unbiased(biased): range[0..1] =<br/>  result = biased()<br/>  var that = biased()<br/>  while result == that:<br/>    result = biased()<br/>    that = biased()<br/>\u00a0<br/>for n in 3..6:<br/>  var biased = randN(n)<br/>  var v = newSeqWith(1_000_000, biased())<br/>  var cnt0, cnt1 = 0<br/>  for x in v:<br/>    if x == 0: inc cnt0<br/>    else:      inc cnt1<br/>  echo \"Biased(\",n,\")  = count1=\",cnt1,\", count0=\",cnt0,\", percent=\",<br/>       formatFloat(100 * float(cnt1)/float(cnt1+cnt0), ffDecimal, 3)<br/>\u00a0<br/>  v = newSeqWith(1_000_000, unbiased(biased))<br/>  cnt0 = 0<br/>  cnt1 = 0<br/>  for x in v:<br/>    if x == 0: inc cnt0<br/>    else:      inc cnt1<br/>  echo \"  Unbiased = count1=\",cnt1,\", count0=\",cnt0,\", percent=\",<br/>       formatFloat(100 * float(cnt1)/float(cnt1+cnt0), ffDecimal, 3)</pre>"}, {"lang": "OCaml", "loc": 20, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> randN n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> unbiased n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> randN n <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;&gt;</span> randN n <span class=\"kw1\">then</span> a <span class=\"kw1\">else</span> unbiased n<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">50</span>_000 <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> cb <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> cu <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      cb <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>cb <span class=\"sy0\">+</span> <span class=\"br0\">(</span>randN b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      cu <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>cu <span class=\"sy0\">+</span> <span class=\"br0\">(</span>unbiased b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d:\u00a0%5.2f%% \u00a0%5.2f%%\\n\"</span><br/>      b <span class=\"br0\">(</span><span class=\"nu0\">100.0</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">!</span>cb <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">100.0</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">!</span>cu <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"parigp highlighted_source\">randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">=!</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>unbiased<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    a<span class=\"sy0\">=</span>randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    b<span class=\"sy0\">=</span>randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">!=</span>b<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu2\">1e5</span><span class=\"sy0\">,</span>unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu2\">1e5</span><span class=\"sy0\">,</span>randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 21, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> randn <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Bias $n: \"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@raw</span><span class=\"sy0\">,</span> <span class=\"re0\">@fixed</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> randn<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$raw</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>                <span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">++</span>    <span class=\"kw1\">if</span> randn<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$x</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@raw, \"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3g+-%.3g%%<span class=\"es0\">\\t</span>fixed: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$raw</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">100</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$raw</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$raw</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$raw</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$raw</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@fixed, \"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3g+-%.3g%%<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"re0\">*$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">100</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$fixed</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> randN <span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">rand</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> unbiased <span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span> <span class=\"re0\">$n1</span> <span class=\"sy0\">=</span> randN<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"kw1\">until</span> <span class=\"re0\">$n1</span> <span class=\"sy0\">!=</span> randN<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$iterations</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">3</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">@raw</span><span class=\"sy0\">,</span> <span class=\"re0\">@fixed</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$iterations</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@raw</span><span class=\"br0\">[</span>      randN<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>        <span class=\"re0\">@fixed</span><span class=\"br0\">[</span> unbiased<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"N=%d   randN:\u00a0%s,\u00a0%4.1f%%   unbiased:\u00a0%s,\u00a0%4.1f%%<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span> <span class=\"sy0\">/</span> <span class=\"re0\">$iterations</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@raw</span><span class=\"sy0\">,</span> <span class=\"re0\">@fixed</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 25, "block": "<pre class=\"text highlighted_source\">function randN(integer N)<br/>    return rand(N) = 1<br/>end function<br/>\u00a0<br/>function unbiased(integer N)<br/>integer a<br/>    while 1 do<br/>        a = randN(N)<br/>        if a!=randN(N) then<br/>            return a<br/>        end if<br/>    end while<br/>end function<br/>\u00a0<br/>constant n = 10000<br/>integer cb, cu<br/>for b=3 to 6 do<br/>    cb = 0<br/>    cu = 0<br/>    for i=1 to n do<br/>        cb += randN(b)<br/>        cu += unbiased(b)<br/>    end for<br/>    printf(1, \"%d:\u00a0%5.2f%% \u00a0%5.2f%%\\n\", {b, 100 * cb / n, 100 * cu / n})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de randN (N)<br/>   (if (= 1 (rand 1 N)) 1 0) )<br/>\u00a0<br/>(de unbiased (N)<br/>   (use (A B)<br/>      (while<br/>         (=<br/>            (setq A (randN N))<br/>            (setq B (randN N)) ) )<br/>      A ) )</pre>"}, {"lang": "PL/I", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>test: procedure options (main); /* 20 Nov. 2012 */<br/>\u00a0<br/>randN: procedure(N) returns (bit (1));<br/>   declare N fixed (1);<br/>   declare random builtin;<br/>   declare r fixed (2) external initial (-1);<br/>   if r &gt;= 0 then do; r = r-1; return ('0'b); end;<br/>   r = random()*2*N;<br/>   return ('1'b);<br/>end randN;<br/>\u00a0<br/>random: procedure returns (bit(1));<br/>   declare (r1, r2) bit (1);<br/>   do until (r1 ^= r2);<br/>      r1 = randN(N); r2 = randN(N);<br/>   end;<br/>   return (r1);<br/>end random;<br/>\u00a0<br/>   declare (biasedrn, unbiasedrn) (100) bit (1);<br/>   declare N fixed (1);<br/>\u00a0<br/>   put ('N     Biased  Unbiased (tally of 100 random numbers)');<br/>   do N = 3 to 6;<br/>      biasedrn = randN(N); unbiasedrn = random;<br/>      put skip edit (N, sum(biasedrn), sum(unbiasedrn)) (F(1), 2 F(10));<br/>   end;<br/>\u00a0<br/>end test;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 17, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> randN <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Maximum</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> unbiased <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw3\">do</span>  <span class=\"br0\">{</span><br/>        <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> randN <span class=\"re0\">$N</span><br/>        <span class=\"re0\">$Y</span> <span class=\"sy0\">=</span> randN <span class=\"re0\">$N</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$X</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Y</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$X</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 35, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> a, b<br/>  <span class=\"kw1\">Repeat</span><br/>    a <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    b <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Until</span> a <span class=\"sy0\">&lt;&gt;</span> b<br/>  <span class=\"kw1\">ProcedureReturn</span> a<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>#count <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> n, m, output.s<br/><span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"nu0\">6</span><br/>  <span class=\"kw1\">Dim</span> b_count<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> u_count<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #count<br/>    x <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    b_count<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    x <span class=\"sy0\">=</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    u_count<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>  output <span class=\"sy0\">+</span> <span class=\"st0\">\"N = \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> #LF$<br/>  output <span class=\"sy0\">+</span> <span class=\"st0\">\"  biased =&gt;\"</span> <span class=\"sy0\">+</span> #tab$ <span class=\"sy0\">+</span> <span class=\"st0\">\"#0=\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>b_count<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> #tab$ <span class=\"sy0\">+</span> <span class=\"st0\">\"#1=\"</span> <span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>b_count<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  output <span class=\"sy0\">+</span> #tab$ <span class=\"sy0\">+</span> <span class=\"st0\">\" ratio=\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrF</span><span class=\"br0\">(</span>b_count<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> #count <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"%\"</span> <span class=\"sy0\">+</span> #LF$<br/>  output <span class=\"sy0\">+</span> <span class=\"st0\">\"  unbiased =&gt;\"</span> <span class=\"sy0\">+</span> #tab$ <span class=\"sy0\">+</span> <span class=\"st0\">\"#0=\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>u_count<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> #tab$ <span class=\"sy0\">+</span> <span class=\"st0\">\"#1=\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>u_count<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  output <span class=\"sy0\">+</span> #tab$ <span class=\"sy0\">+</span> <span class=\"st0\">\" ratio=\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">StrF</span><span class=\"br0\">(</span>u_count<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> #count <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"%\"</span> <span class=\"sy0\">+</span> #LF$<br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Biased and Unbiased random number results\"</span>, output<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 28, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/><span class=\"kw1\">def</span> randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\" 1,0 random generator factory with 1 appearing 1/N'th of the time\"</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">lambda</span>: <span class=\"kw3\">random</span>.<span class=\"me1\">randrange</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">def</span> unbiased<span class=\"br0\">(</span>biased<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'uses a biased() generator of 1 or 0, to create an unbiased one'</span><br/>    this<span class=\"sy0\">,</span> that <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> this <span class=\"sy0\">==</span> that: <span class=\"co1\"># Loop until 10 or 01</span><br/>        this<span class=\"sy0\">,</span> that <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> biased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> this         <span class=\"co1\"># return the first</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> namedtuple<br/>\u00a0<br/>    Stats <span class=\"sy0\">=</span> namedtuple<span class=\"br0\">(</span><span class=\"st0\">'Stats'</span><span class=\"sy0\">,</span> <span class=\"st0\">'count1 count0 percent'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> N <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span>:<br/>        biased <span class=\"sy0\">=</span> randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>        v <span class=\"sy0\">=</span> <span class=\"br0\">[</span>biased<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        v1<span class=\"sy0\">,</span> v0 <span class=\"sy0\">=</span> v.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> v.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Biased(%i)  =\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>N<span class=\"sy0\">,</span> Stats<span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> v0<span class=\"sy0\">,</span> <span class=\"nu0\">100</span>. * v1/<span class=\"br0\">(</span>v1 + v0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>        v <span class=\"sy0\">=</span> <span class=\"br0\">[</span>unbiased<span class=\"br0\">(</span>biased<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        v1<span class=\"sy0\">,</span> v0 <span class=\"sy0\">=</span> v.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> v.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"br0\">(</span> <span class=\"st0\">\"  Unbiased =\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>Stats<span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> v0<span class=\"sy0\">,</span> <span class=\"nu0\">100</span>. * v1/<span class=\"br0\">(</span>v1 + v0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"rsplus highlighted_source\">randN <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sample.int.html\"><span class=\"kw2\">sample.<span class=\"me1\">int</span></span></a><span class=\"br0\">(</span>N, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>unbiased <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/while.html\"><span class=\"kw2\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;-</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    x<span class=\"br0\">}</span><br/>\u00a0<br/>samples <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/print.html\"><span class=\"kw2\">print</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/t.html\"><span class=\"kw2\">t</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/round.html\"><span class=\"kw2\">round</span></a><span class=\"br0\">(</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sapply.html\"><span class=\"kw2\">sapply</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"nu0\">6</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span><br/>    N <span class=\"sy0\">=</span> N,<br/>    biased <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/mean.html\"><span class=\"kw2\">mean</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/replicate.html\"><span class=\"kw2\">replicate</span></a><span class=\"br0\">(</span>samples, randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    unbiased <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/mean.html\"><span class=\"kw2\">mean</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/replicate.html\"><span class=\"kw2\">replicate</span></a><span class=\"br0\">(</span>samples, unbiased<span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>;; Using boolean #t/#f instead of 1/0<br/>(define ((randN n)) (zero? (random n)))<br/>(define ((unbiased biased))<br/>  (let loop () (let ([r (biased)]) (if (eq? r (biased)) (loop) r))))<br/>\u00a0<br/>;; Counts<br/>(define N 1000000)<br/>(for ([n (in-range 3 7)])<br/>  (define (try% R) (round (/ (for/sum ([i N]) (if (R) 1 0)) N 1/100)))<br/>  (define biased (randN n))<br/>  (printf \"Count: ~a =&gt; Biased: ~a%; Unbiased: ~a%.\\n\"<br/>          n (try% biased) (try% (unbiased biased))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 19, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates  unbiased random numbers  and displays the results to terminal.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> # R seed <span class=\"sy0\">.</span>                             <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> #==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  #==<span class=\"st0\">\",\"</span>     <span class=\"kw3\">then</span> #=<span class=\"nu0\">1000</span>              <span class=\"coMULTI\">/*#:  the number of SAMPLES to be used.*/</span><br/><span class=\"kw1\">if</span> R==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  R==<span class=\"st0\">\",\"</span>     <span class=\"kw3\">then</span> R=<span class=\"nu0\">6</span>                 <span class=\"coMULTI\">/*R:  the high number for the  range.  */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed  <span class=\"coMULTI\">/*Specified?  Then use for RANDOM seed.*/</span><br/>dash=<span class=\"st0\">'\u2500'</span>;    @b=<span class=\"st0\">\"biased\"</span>;         @ub=<span class=\"st0\">'un'</span>@b     <span class=\"coMULTI\">/*literals for the SAY column headers. */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>   ctr<span class=\"br0\">(</span><span class=\"st0\">\"N\"</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>   ctr<span class=\"br0\">(</span>@b<span class=\"br0\">)</span>   ctr<span class=\"br0\">(</span>@b<span class=\"st0\">'%'</span><span class=\"br0\">)</span>  ctr<span class=\"br0\">(</span>@ub<span class=\"br0\">)</span>  ctr<span class=\"br0\">(</span>@ub<span class=\"st0\">\"%\"</span><span class=\"br0\">)</span>   ctr<span class=\"br0\">(</span><span class=\"st0\">'samples'</span><span class=\"br0\">)</span><br/>dash=<br/>       <span class=\"kw1\">do</span> N=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> R;      b=<span class=\"nu0\">0</span>;                u=<span class=\"nu0\">0</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;   b=b + randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;     u=u + unbiased<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>       <span class=\"kw1\">say</span>  <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>     ctr<span class=\"br0\">(</span>N, <span class=\"nu0\">5</span><span class=\"br0\">)</span>     ctr<span class=\"br0\">(</span>b<span class=\"br0\">)</span>    pct<span class=\"br0\">(</span>b<span class=\"br0\">)</span>    ctr<span class=\"br0\">(</span>u<span class=\"br0\">)</span>    pct<span class=\"br0\">(</span>u<span class=\"br0\">)</span>    ctr<span class=\"br0\">(</span>#<span class=\"br0\">)</span><br/>       <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*N*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ctr:       <span class=\"kw1\">return</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">12</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw6\">left</span><span class=\"br0\">(</span>dash, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*show hdr\u2502numbers.*/</span><br/>pct:       <span class=\"kw1\">return</span> ctr<span class=\"br0\">(</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> # <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>, , <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">'%'</span> <span class=\"br0\">)</span>            <span class=\"coMULTI\">/*2 decimal digits.*/</span><br/>randN:     <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;            <span class=\"kw1\">return</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, z<span class=\"br0\">)</span>==z            <span class=\"coMULTI\">/*ret 1 if rand==Z.*/</span><br/>unbiased:  <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> x<span class=\"sy0\">\\</span>==randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span>; x=randN<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>;       <span class=\"kw1\">return</span> x  <span class=\"coMULTI\">/* \"  unbiased RAND*/</span></pre>"}, {"lang": "Ring", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for n = 3 to 6<br/>    biased = 0<br/>    unb = 0<br/>    for i = 1 to 10000<br/>        biased += randN(n)<br/>        unb += unbiased(n) <br/>    next<br/>    see \"N = \" + n + \"\u00a0: biased = \" + biased/100  + \"%, unbiased = \" + unb/100 + \"%\" + nl<br/>next<br/>\u00a0<br/>func unbiased nr<br/>     while 1 <br/>           a = randN(nr)<br/>           if a\u00a0!= randN(nr) return a ok<br/>     end<br/>\u00a0<br/>func randN m<br/>     m = (random(m) = 1)<br/>     return m<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> rand_n<span class=\"br0\">(</span>bias<span class=\"br0\">)</span><br/>  <span class=\"kw3\">rand</span><span class=\"br0\">(</span>bias<span class=\"br0\">)</span> == <span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> unbiased<span class=\"br0\">(</span>bias<span class=\"br0\">)</span><br/>  a, b = rand_n<span class=\"br0\">(</span>bias<span class=\"br0\">)</span>, rand_n<span class=\"br0\">(</span>bias<span class=\"br0\">)</span> <span class=\"kw1\">until</span> a\u00a0!= b <span class=\"co1\">#loop until a and b are 0,1 or 1,0</span><br/>  a<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>runs = <span class=\"nu0\">1</span>_000_000<br/>keys = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>bias biased unbiased<span class=\"br0\">)</span> <span class=\"co1\">#use [:bias,:biased,:unbiased] in Ruby &lt; 2.0</span><br/><span class=\"kw3\">puts</span> keys.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">3</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>bias<span class=\"sy0\">|</span><br/>  counter = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\"># counter will respond with 0 when key is not known</span><br/>  runs.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    counter<span class=\"br0\">[</span><span class=\"re3\">:biased</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> rand_n<span class=\"br0\">(</span>bias<span class=\"br0\">)</span> == <span class=\"nu0\">1</span> <span class=\"co1\">#the first time, counter has no key for\u00a0:biased, so it will respond 0</span><br/>    counter<span class=\"br0\">[</span><span class=\"re3\">:unbiased</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> unbiased<span class=\"br0\">(</span>bias<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  counter<span class=\"br0\">[</span><span class=\"re3\">:bias</span><span class=\"br0\">]</span> = bias<br/>  <span class=\"kw3\">puts</span> counter.<span class=\"me1\">values_at</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>keys<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 39, "block": "<pre class=\"text highlighted_source\">#![feature(inclusive_range_syntax)]<br/>\u00a0<br/>extern crate rand;<br/>\u00a0<br/>use rand::Rng;<br/>\u00a0<br/>fn rand_n&lt;R: Rng&gt;(rng: &amp;mut R, n: u32) -&gt; usize {<br/>    rng.gen_weighted_bool(n) as usize // maps `false` to 0 and `true` to 1<br/>}<br/>\u00a0<br/>fn unbiased&lt;R: Rng&gt;(rng: &amp;mut R, n: u32) -&gt; usize {<br/>    let mut bit = rand_n(rng, n);<br/>    while bit == rand_n(rng, n) {<br/>        bit = rand_n(rng, n);<br/>    }<br/>    bit<br/>}<br/>\u00a0<br/>fn main() {<br/>    const SAMPLES: usize = 100_000;<br/>    let mut rng = rand::weak_rng();<br/>\u00a0<br/>    println!(\" Bias    rand_n  unbiased\");<br/>    for n in 3..=6 {<br/>        let mut count_biased = 0;<br/>        let mut count_unbiased = 0;<br/>        for _ in 0..SAMPLES {<br/>            count_biased += rand_n(&amp;mut rng, n);<br/>            count_unbiased += unbiased(&amp;mut rng, n);<br/>        }<br/>\u00a0<br/>        let b_percentage = 100.0 * count_biased as f64 / SAMPLES as f64;<br/>        let ub_percentage = 100.0 * count_unbiased as f64 / SAMPLES as f64;<br/>        println!(<br/>            \"bias {}:  {:0.2}%   {:0.2}%\",<br/>            n, b_percentage, ub_percentage<br/>        );<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> biased<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">=</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextFloat</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> / n<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> unbiased<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> a <span class=\"sy0\">!=</span> biased<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> loop <span class=\"br0\">}</span><span class=\"sy0\">;</span> loop <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">3</span> until <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> println <span class=\"br0\">{</span> <br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> <span class=\"nu0\">50000</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> c1,c2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span> until m<span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> j <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> biased<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> c1 +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> unbiased<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> c2 +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"st0\">\"%d:\u00a0%2.2f%% \u00a0%2.2f%%\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i, <span class=\"nu0\">100.0</span><span class=\"sy0\">*</span>c1/m, <span class=\"nu0\">100.0</span><span class=\"sy0\">*</span>c2/m<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 34, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const func integer: randN (in integer: n) is<br/>  return ord(rand(1, n) = 1);<br/>\u00a0<br/>const func integer: unbiased (in integer: n) is func<br/>  result<br/>    var integer: unbiased is 0;<br/>  begin<br/>    repeat<br/>      unbiased\u00a0:= randN(n);<br/>    until unbiased &lt;&gt; randN(n);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const integer: tests is 50000;<br/>    var integer: n is 0;<br/>    var integer: sumBiased is 0;<br/>    var integer: sumUnbiased is 0;<br/>    var integer: count is 0;<br/>  begin<br/>    for n range 3 to 6 do<br/>      sumBiased\u00a0:= 0;<br/>      sumUnbiased\u00a0:= 0;<br/>      for count range 1 to tests do<br/>        sumBiased +:= randN(n);<br/>        sumUnbiased +:= unbiased(n);<br/>      end for;<br/>      writeln(n &lt;&amp; \": \" &lt;&amp; flt(100 * sumBiased) / flt(tests) digits 3 lpad 6 &lt;&amp;<br/>                   \"  \" &lt;&amp; flt(100 * sumUnbiased) / flt(tests) digits 3 lpad 6);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\">func randN <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n.<span class=\"kw3\">rand</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> int<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var n1 = <span class=\"kw2\">nil</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span> n1 = randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n1 == randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> n1<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var iterations = <span class=\"nu0\">1000</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var raw = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    var fixed = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    iterations.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>          raw<span class=\"br0\">[</span>    randN<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">]</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span><br/>        fixed<span class=\"br0\">[</span> unbiased<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">]</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"N=%d   randN:\u00a0%s,\u00a0%4.1f%%   unbiased:\u00a0%s,\u00a0%4.1f%%<span class=\"es0\">\\n</span>\"</span>,<br/>        n, <span class=\"br0\">[</span>raw, fixed<span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"br0\">(</span>a.<span class=\"me1\">dump</span>, a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span> <span class=\"sy0\">/</span> iterations<span class=\"br0\">)</span> <span class=\"br0\">}</span>...<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 23, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># 1,0 random generator factory with 1 appearing 1/N'th of the time</span><br/><span class=\"kw1\">proc</span> randN n <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># uses a biased generator of 1 or 0, to create an unbiased one</span><br/><span class=\"kw1\">proc</span> unbiased <span class=\"br0\">{</span>biased<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw1\">eval</span> <span class=\"re0\">$biased</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"br0\">[</span><span class=\"kw1\">eval</span> <span class=\"re0\">$biased</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">6</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> biased <span class=\"br0\">[</span><span class=\"kw2\">list</span> randN <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"sy0\">;</span>array <span class=\"kw1\">set</span> c <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> c<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">eval</span> <span class=\"re0\">$biased</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"  biased\u00a0%d =&gt; #0=%d #1=%d ratio=%.2f%%\"</span> <span class=\"re0\">$n</span> <span class=\"re0\">$c</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"re0\">$c</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span>.<span class=\"sy0\">*</span><span class=\"re0\">$c</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"sy0\">;</span>array <span class=\"kw1\">set</span> c <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> c<span class=\"br0\">(</span><span class=\"br0\">[</span>unbiased <span class=\"re0\">$biased</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"unbiased\u00a0%d =&gt; #0=%d #1=%d ratio=%.2f%%\"</span> <span class=\"re0\">$n</span> <span class=\"re0\">$c</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"re0\">$c</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \\<br/>\t      <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">100</span>.<span class=\"sy0\">*</span><span class=\"re0\">$c</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn randN(N){ (not (0).random(N)).toInt() }<br/>fcn unbiased(randN){ while((a:=randN())==randN()){} a }</pre>"}]}