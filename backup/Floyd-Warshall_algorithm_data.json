{"task": "Floyd-Warshall_algorithm", "blocks": [{"lang": "360 Assembly", "loc": 76, "block": "<pre class=\"text highlighted_source\">*        Floyd-Warshall algorithm - 06/06/2018<br/>FLOYDWAR CSECT<br/>         USING  FLOYDWAR,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         SAVE   (14,12)            save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         MVC    A+8,=F'-2'         a(1,3)=-2<br/>         MVC    A+VV*4,=F'4'       a(2,1)= 4<br/>         MVC    A+VV*4+8,=F'3'     a(2,3)= 3<br/>         MVC    A+VV*8+12,=F'2'    a(3,4)= 2<br/>         MVC    A+VV*12+4,=F'-1'   a(4,2)=-1<br/>         LA     R8,1               k=1<br/>       DO WHILE=(C,R8,LE,V)        do k=1 to v<br/>         LA     R10,A                @a<br/>         LA     R6,1                 i=1<br/>       DO WHILE=(C,R6,LE,V)          do i=1 to v<br/>         LA     R7,1                   j=1<br/>       DO WHILE=(C,R7,LE,V)            do j=1 to v<br/>         LR     R1,R6                    i<br/>         BCTR   R1,0<br/>         MH     R1,=AL2(VV)<br/>         AR     R1,R8                    k<br/>         SLA    R1,2<br/>         L      R9,A-4(R1)               a(i,k)<br/>         LR     R1,R8                    k<br/>         BCTR   R1,0<br/>         MH     R1,=AL2(VV)<br/>         AR     R1,R7                    j<br/>         SLA    R1,2<br/>         L      R3,A-4(R1)               a(k,j)<br/>         AR     R9,R3                    w=a(i,k)+a(k,j)<br/>         L      R2,0(R10)                a(i,j)<br/>       IF CR,R2,GT,R9 THEN               if a(i,j)&gt;w then<br/>         ST     R9,0(R10)                  a(i,j)=w<br/>       ENDIF    ,                        endif<br/>         LA     R10,4(R10)               next @a<br/>         LA     R7,1(R7)                 j++<br/>       ENDDO    ,                      enddo j<br/>         LA     R6,1(R6)               i++<br/>       ENDDO    ,                    enddo i<br/>         LA     R8,1(R8)             k++<br/>       ENDDO    ,                  enddo k<br/>         LA     R10,A              @a<br/>         LA     R6,1               f=1<br/>       DO WHILE=(C,R6,LE,V)        do f=1 to v<br/>         LA     R7,1                 t=1<br/>       DO WHILE=(C,R7,LE,V)          do t=1 to v<br/>       IF CR,R6,NE,R7 THEN             if f^=t then do<br/>         LR     R1,R6                    f<br/>         XDECO  R1,XDEC                  edit f<br/>         MVC    PG+0(4),XDEC+8           output f<br/>         LR     R1,R7                    t<br/>         XDECO  R1,XDEC                  edit t<br/>         MVC    PG+8(4),XDEC+8           output t<br/>         L      R2,0(R10)                a(f,t)<br/>         XDECO  R2,XDEC                  edit a(f,t)<br/>         MVC    PG+12(4),XDEC+8          output a(f,t)<br/>         XPRNT  PG,L'PG                  print<br/>       ENDIF    ,                      endif<br/>         LA     R10,4(R10)             next @a<br/>         LA     R7,1(R7)               t++<br/>       ENDDO    ,                    enddo t<br/>         LA     R6,1(R6)             f++<br/>       ENDDO    ,                  enddo f<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         RETURN (14,12),RC=0       restore registers from calling sav<br/>VV       EQU    4<br/>V        DC     A(VV)<br/>A        DC     (VV*VV)F'99999999' a(vv,vv)<br/>PG       DC     CL80'   . -&gt;    .   .'<br/>XDEC     DS     CL12<br/>         YREGS<br/>         END    FLOYDWAR</pre>"}, {"lang": "C", "loc": 77, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;limits.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sourceVertex<span class=\"sy0\">,</span> destVertex<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> edgeWeight<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>edge<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> vertices<span class=\"sy0\">,</span> edges<span class=\"sy0\">;</span><br/>\tedge<span class=\"sy0\">*</span> edgeMatrix<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>graph<span class=\"sy0\">;</span><br/>\u00a0<br/>graph loadGraph<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> fileName<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tFILE<span class=\"sy0\">*</span> fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>fileName<span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tgraph G<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,&amp;</span>G.<span class=\"me1\">vertices</span><span class=\"sy0\">,&amp;</span>G.<span class=\"me1\">edges</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tG.<span class=\"me1\">edgeMatrix</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>edge<span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>G.<span class=\"me1\">edges</span><span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>edge<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>G.<span class=\"me1\">edges</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d%d%d\"</span><span class=\"sy0\">,&amp;</span>G.<span class=\"me1\">edgeMatrix</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">sourceVertex</span><span class=\"sy0\">,&amp;</span>G.<span class=\"me1\">edgeMatrix</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">destVertex</span><span class=\"sy0\">,&amp;</span>G.<span class=\"me1\">edgeMatrix</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">edgeWeight</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> G<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> floydWarshall<span class=\"br0\">(</span>graph g<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> processWeights<span class=\"br0\">[</span>g.<span class=\"me1\">vertices</span><span class=\"br0\">]</span><span class=\"br0\">[</span>g.<span class=\"me1\">vertices</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> processedVertices<span class=\"br0\">[</span>g.<span class=\"me1\">vertices</span><span class=\"br0\">]</span><span class=\"br0\">[</span>g.<span class=\"me1\">vertices</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tprocessWeights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> SHRT_MAX<span class=\"sy0\">;</span><br/>\t\t\tprocessedVertices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i<span class=\"sy0\">!=</span>j<span class=\"br0\">)</span><span class=\"sy0\">?</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">edges</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tprocessWeights<span class=\"br0\">[</span>g.<span class=\"me1\">edgeMatrix</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">sourceVertex</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>g.<span class=\"me1\">edgeMatrix</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">destVertex</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> g.<span class=\"me1\">edgeMatrix</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">edgeWeight</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>k<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>processWeights<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> processWeights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> processWeights<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\tprocessWeights<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> processWeights<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> processWeights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tprocessedVertices<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> processedVertices<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"pair    dist   path\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>g.<span class=\"me1\">vertices</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">!=</span>j<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d -&gt;\u00a0%d\u00a0%3d\u00a0%5d\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>processWeights<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tk <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t\t\t\tk <span class=\"sy0\">=</span> processedVertices<span class=\"br0\">[</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"-&gt;%d\"</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>k<span class=\"sy0\">!=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;file containing graph data&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tfloydWarshall<span class=\"br0\">(</span>loadGraph<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 74, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;&gt;</span> dist, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"(pair, dist, path)\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> size <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">size</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> u <span class=\"sy1\">=</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">auto</span> v <span class=\"sy1\">=</span> j <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"(\"</span> <span class=\"sy1\">&lt;&lt;</span> u <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy1\">&lt;&lt;</span> v <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>          <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">stringstream</span> path<span class=\"sy4\">;</span><br/>        path <span class=\"sy1\">&lt;&lt;</span> u<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>          u <span class=\"sy1\">=</span> next<span class=\"br0\">[</span>u <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>          path <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy1\">&lt;&lt;</span> u<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>u <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> path.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\")\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> solve<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> w_s, <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> num_vertices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;&gt;</span> dist<span class=\"br0\">(</span>num_vertices<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> dim <span class=\"sy4\">:</span> dist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      dim.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"kw2\">INT_MAX</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> w <span class=\"sy4\">:</span> w_s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    dist<span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> w<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> next<span class=\"br0\">(</span>num_vertices<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      next<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> j <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> num_vertices<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy2\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy2\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>          next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  print<span class=\"br0\">(</span>dist, next<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> w <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy2\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> num_vertices <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>  solve<span class=\"br0\">(</span>w, num_vertices<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>.<span class=\"me1\">ignore</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 65, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> FloydWarshallAlgorithm <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> FloydWarshall<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> weights, <span class=\"kw4\">int</span> numVerticies<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> dist <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>numVerticies, numVerticies<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    dist<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">double</span><span class=\"sy0\">.</span><span class=\"me1\">PositiveInfinity</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> weights<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dist<span class=\"br0\">[</span>weights<span class=\"br0\">[</span>i, <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, weights<span class=\"br0\">[</span>i, <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> weights<span class=\"br0\">[</span>i, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> next <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>numVerticies, numVerticies<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        next<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> numVerticies<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i, k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k, j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> dist<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            dist<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dist<span class=\"br0\">[</span>i, k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k, j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            next<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>i, k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            PrintResult<span class=\"br0\">(</span>dist, next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PrintResult<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> dist, <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> next<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> next<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw4\">int</span> u <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw4\">int</span> v <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw4\">string</span> path <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} -&gt; {1}    {2,2:G}     {3}\"</span>, u, v, dist<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span>, u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                            u <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>u <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, v <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                            path <span class=\"sy0\">+=</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy0\">+</span> u<span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>u <span class=\"sy0\">!=</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> weights <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> numVerticies <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            FloydWarshall<span class=\"br0\">(</span>weights, numVerticies<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 70, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> weights <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> numVertices <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    floydWarshall<span class=\"br0\">(</span>weights<span class=\"sy0\">,</span> numVertices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> floydWarshall<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> weights<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> numVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">real</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dist <span class=\"sy0\">=</span> uninitializedArray<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span>numVertices<span class=\"sy0\">,</span> numVertices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>dim<span class=\"sy0\">;</span> dist<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dim<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>w<span class=\"sy0\">;</span> weights<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dist<span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> next <span class=\"sy0\">=</span> uninitializedArray<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span>numVertices<span class=\"sy0\">,</span> numVertices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k<span class=\"sy0\">&lt;</span>numVertices<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>numVertices<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>numVertices<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    printResult<span class=\"br0\">(</span>dist<span class=\"sy0\">,</span> next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dist<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">format</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">!=</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> u <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> v <span class=\"sy0\">=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">string</span> path <span class=\"sy0\">=</span> format<span class=\"br0\">(</span><span class=\"st0\">\"%d -&gt;\u00a0%d   \u00a0%2d    \u00a0%s\"</span><span class=\"sy0\">,</span> u<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                    u <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    path <span class=\"sy0\">~=</span> text<span class=\"br0\">(</span><span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span> u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>u <span class=\"sy0\">!=</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                writeln<span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 43, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'matrix<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; in\u00a0: initialized dist and next matrices</span><br/><span class=\"co1\">;; out\u00a0: dist and next matrices</span><br/><span class=\"co1\">;; O(n^3)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>floyd<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>path n dist next <span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>for<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>k n<span class=\"br0\">)</span> <span class=\"br0\">(</span>i n<span class=\"br0\">)</span> <span class=\"br0\">(</span>j n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t #:break <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref dist j j<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> 'negative<span class=\"sy0\">-</span>cycle<br/> \t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> <span class=\"kw1\">d</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref dist i k<span class=\"br0\">)</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref dist k j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"kw1\">d</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref dist i j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> dist i j <span class=\"kw1\">d</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> next i j <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref next i k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; utilities</span><br/>\u00a0<br/><span class=\"co1\">;; init random edges costs, matrix 66% filled</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>init<span class=\"sy0\">-</span>edges n dist next<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>for<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i n<span class=\"br0\">)</span> <span class=\"br0\">(</span>j n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> dist i i <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   \t<span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> next i j null<span class=\"br0\">)</span><br/> \t#:continue <span class=\"br0\">(</span><span class=\"sy0\">=</span> j i<span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> dist i j Infinity<span class=\"br0\">)</span><br/>\t #:continue <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>random<span class=\"br0\">)</span> <span class=\"nu0\">0.3</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> dist i j <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>random <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>array<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> next i j j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; show path from u to v</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>path u v<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span> <br/>\t <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> u v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref next u v<span class=\"br0\">)</span><span class=\"br0\">)</span> null<span class=\"br0\">)</span>\t\t<br/> \t <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> u <span class=\"br0\">(</span>path <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref next u v<span class=\"br0\">)</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span><span class=\"br0\">(</span> mdist u v<span class=\"br0\">)</span> <span class=\"co1\">;; show computed distance</span><br/>\t  <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>ref dist u v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>init<span class=\"sy0\">-</span>edges n dist next<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>array<span class=\"sy0\">-</span>print dist<span class=\"br0\">)</span> <span class=\"co1\">;; show init distances</span><br/>\t <span class=\"br0\">(</span>floyd<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>path n dist next<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 44, "block": "<pre class=\"text highlighted_source\">defmodule Floyd_Warshall do<br/>  def main(n, edge) do<br/>    {dist, next} = setup(n, edge)<br/>    {dist, next} = shortest_path(n, dist, next)<br/>    print(n, dist, next)<br/>  end<br/>\u00a0<br/>  defp setup(n, edge) do<br/>    big = 1.0e300<br/>    dist = for i &lt;- 1..n, j &lt;- 1..n, into:\u00a0%{}, do: {{i,j},(if i==j, do: 0, else: big)}<br/>    next = for i &lt;- 1..n, j &lt;- 1..n, into:\u00a0%{}, do: {{i,j}, nil}<br/>    Enum.reduce(edge, {dist,next}, fn {u,v,w},{dst,nxt} -&gt;<br/>      { Map.put(dst, {u,v}, w), Map.put(nxt, {u,v}, v) }<br/>    end)<br/>  end<br/>\u00a0<br/>  defp shortest_path(n, dist, next) do<br/>    (for k &lt;- 1..n, i &lt;- 1..n, j &lt;- 1..n, do: {k,i,j})<br/>    |&gt; Enum.reduce({dist,next}, fn {k,i,j},{dst,nxt} -&gt;<br/>         if dst[{i,j}] &gt; dst[{i,k}] + dst[{k,j}] do<br/>           {Map.put(dst, {i,j}, dst[{i,k}] + dst[{k,j}]), Map.put(nxt, {i,j}, nxt[{i,k}])}<br/>         else<br/>           {dst, nxt}<br/>         end<br/>       end)<br/>  end<br/>\u00a0<br/>  defp print(n, dist, next) do<br/>    IO.puts \"pair     dist    path\"<br/>    for i &lt;- 1..n, j &lt;- 1..n, i\u00a0!= j,<br/>        do:\u00a0:io.format \"~w -&gt; ~w  ~4w     ~s~n\", [i, j, dist[{i,j}], path(next, i, j)]<br/>  end<br/>\u00a0<br/>  defp path(next, i, j), do: path(next, i, j, [i]) |&gt; Enum.join(\" -&gt; \")<br/>\u00a0<br/>  defp path(_next, i, i, list), do: Enum.reverse(list)<br/>  defp path(next, i, j, list) do<br/>    u = next[{i,j}]<br/>    path(next, u, j, [u | list])<br/>  end<br/>end<br/>\u00a0<br/>edge = [{1, 3, -2}, {2, 1, 4}, {2, 3, 3}, {3, 4, 2}, {4, 2, -1}]<br/>Floyd_Warshall.main(4, edge)</pre>"}, {"lang": "FreeBASIC", "loc": 62, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> POSITIVE_INFINITY <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">1.0</span>/<span class=\"nu0\">0.0</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printResult<span class=\"br0\">(</span>dist<span class=\"br0\">(</span>any, any<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, nxt<span class=\"br0\">(</span>any, any<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> u, v<br/>  <span class=\"kw1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>nxt, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>nxt, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> i &lt;&gt; j <span class=\"kw1\">Then</span><br/>        u = i + <span class=\"nu0\">1</span><br/>        v = j + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>; <span class=\"st0\">\" -&gt; \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>; <span class=\"st0\">\"    \"</span>; dist<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span>; <span class=\"st0\">\"     \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">Do</span><br/>          u = nxt<span class=\"br0\">(</span>u - <span class=\"nu0\">1</span>, v - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">Print</span> <span class=\"st0\">\" -&gt; \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">Loop</span> <span class=\"kw1\">While</span> u &lt;&gt; v<br/>        <span class=\"kw1\">Print</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> floydWarshall<span class=\"br0\">(</span>weights<span class=\"br0\">(</span>Any, Any<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, numVertices <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> dist<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>      dist<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = POSITIVE_INFINITY<br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">For</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>weights, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    dist<span class=\"br0\">(</span>weights<span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span>, weights<span class=\"br0\">(</span>x, <span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> = weights<span class=\"br0\">(</span>x, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> x<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> nxt<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> i &lt;&gt; j <span class=\"kw1\">Then</span> nxt<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = j + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i <br/>\u00a0<br/>  <span class=\"kw1\">For</span> k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> numVertices - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>dist<span class=\"br0\">(</span>i, k<span class=\"br0\">)</span> + dist<span class=\"br0\">(</span>k, j<span class=\"br0\">)</span><span class=\"br0\">)</span> &lt; dist<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>          dist<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = dist<span class=\"br0\">(</span>i, k<span class=\"br0\">)</span> + dist<span class=\"br0\">(</span>k, j<span class=\"br0\">)</span><br/>          nxt<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = nxt<span class=\"br0\">(</span>i, k<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw1\">Next</span> k<br/>\u00a0<br/>  printResult<span class=\"br0\">(</span>dist<span class=\"br0\">(</span><span class=\"br0\">)</span>, nxt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> weights<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, -<span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> numVertices <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">4</span><br/>floydWarshall<span class=\"br0\">(</span>weights<span class=\"br0\">(</span><span class=\"br0\">)</span>, numVertices<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 17, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">//Floyd's algorithm: Nigel Galloway August 5th 2018</span><br/><span class=\"kw1\">let</span> Floyd <span class=\"br0\">(</span>n:<span class=\"st0\">'a[]) (g:Map&lt;('</span>a<span class=\"sy0\">*</span><span class=\"st0\">'a),int&gt;)= //nodes graph(Map of adjacency list)<br/>  let ix n g=Seq.init (pown g n) (fun x-&gt;List.unfold(fun (a,b)-&gt;if a=0 then None else Some(b%g,(a-1,b/g)))(n,x))<br/>  let fN w (i,j,k)=match Map.tryFind(i,j) w,Map.tryFind(i,k) w,Map.tryFind(k,j) w with<br/>                        |(None  ,Some j,Some k)-&gt;Some(j+k)<br/>                        |(Some i,Some j,Some k)-&gt;if (j+k) &lt; i then Some(j+k) else None<br/>                        |_                     -&gt;None<br/>  let n,z=ix 3 (Array.length n)|&gt;Seq.choose(fun (i::j::k::_)-&gt;if i&lt;&gt;j&amp;&amp;i&lt;&gt;k&amp;&amp;j&lt;&gt;k then Some(n.[i],n.[j],n.[k]) else None)<br/>       |&gt;Seq.fold(fun (n,n'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i,j,k<span class=\"br0\">)</span> <span class=\"kw1\">as</span> g<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">match</span> fN n g <span class=\"kw1\">with</span> |Some g<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">add</span> <span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> g n,<a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">add</span> <span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> k n<span class=\"st0\">')|_-&gt;(n,n'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>g,<a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>n,<span class=\"br0\">(</span><span class=\"kw1\">fun</span> x y<span class=\"sy0\">-&gt;</span><span class=\"kw4\">seq</span><span class=\"br0\">{</span><br/>               <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fN n g<span class=\"sy0\">=</span><span class=\"kw4\">seq</span><span class=\"br0\">{</span><br/>                 <span class=\"kw1\">match</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">tryFind</span> <span class=\"br0\">(</span>n,g<span class=\"br0\">)</span> z <span class=\"kw1\">with</span><br/>                 |Some r<span class=\"sy0\">-&gt;</span><span class=\"kw1\">yield!</span> fN n r<span class=\"sy0\">;</span> <span class=\"kw1\">yield</span> Some r<span class=\"sy0\">;</span>yield<span class=\"sy0\">!</span> fN r g<br/>                 |_<span class=\"sy0\">-&gt;</span><span class=\"kw1\">yield</span> None<span class=\"br0\">}</span><br/>               <span class=\"kw1\">yield!</span> fN x y <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">choose</span> id<span class=\"sy0\">;</span> <span class=\"kw1\">yield</span> y<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 51, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> arc <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    to <span class=\"kw4\">int</span><br/>    wt <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> fw<span class=\"sy1\">(</span>g <span class=\"sy1\">[][]</span>arc<span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    dist <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>g<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dist <span class=\"sy1\">{</span><br/>        di <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>g<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> di <span class=\"sy1\">{</span><br/>            di<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> math<span class=\"sy3\">.</span>Inf<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        di<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        dist<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> di<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> u<span class=\"sy1\">,</span> arcs <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> g <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> arcs <span class=\"sy1\">{</span><br/>            dist<span class=\"sy1\">[</span>u<span class=\"sy1\">][</span>v<span class=\"sy3\">.</span>to<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> v<span class=\"sy3\">.</span>wt<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy1\">,</span> dk <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dist <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> di <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dist <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> j<span class=\"sy1\">,</span> dij <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> di <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> d <span class=\"sy2\">:=</span> di<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> dk<span class=\"sy1\">[</span>j<span class=\"sy1\">];</span> dij &gt; d <span class=\"sy1\">{</span><br/>                    di<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> dist<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    g <span class=\"sy2\">:=</span> <span class=\"sy1\">[][]</span>arc<span class=\"sy1\">{</span><br/>        <span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"sy1\">{{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">}},</span><br/>        <span class=\"nu0\">2</span><span class=\"sy1\">:</span> <span class=\"sy1\">{{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">}},</span><br/>        <span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"sy1\">{{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}},</span><br/>        <span class=\"nu0\">4</span><span class=\"sy1\">:</span> <span class=\"sy1\">{{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">}},</span><br/>    <span class=\"sy1\">}</span><br/>    dist <span class=\"sy2\">:=</span> fw<span class=\"sy1\">(</span>g<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> d <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> dist <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%4g<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>join<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>union<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Map <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a><span class=\"sy0\">,</span> union<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>fromJust<span class=\"sy0\">,</span> isJust<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Semigroup<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\"><span class=\"kw2\">Prelude</span></a> <span class=\"kw1\">hiding</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">floyd=: verb define<br/>  <span class=\"re0\">for_j.</span> i.#<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>    <span class=\"kw2\">y</span>=. <span class=\"kw2\">y</span> &lt;. j <span class=\"sy0\">(</span>{\"<span class=\"nu0\">1</span> +/ {<span class=\"sy0\">)</span> <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 58, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FloydWarshall <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> weights <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> numVertices <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        floydWarshall<span class=\"br0\">(</span>weights, numVertices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> floydWarshall<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> weights, <span class=\"kw4\">int</span> numVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dist <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>numVertices<span class=\"br0\">]</span><span class=\"br0\">[</span>numVertices<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> dist<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>row, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">POSITIVE_INFINITY</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> w <span class=\"sy0\">:</span> weights<span class=\"br0\">)</span><br/>            dist<span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> next <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>numVertices<span class=\"br0\">]</span><span class=\"br0\">[</span>numVertices<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span><br/>                    next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> numVertices<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numVertices<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> numVertices<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>\u00a0<br/>        printResult<span class=\"br0\">(</span>dist, next<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dist, <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> next<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> next.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">int</span> u <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">int</span> v <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> path <span class=\"sy0\">=</span> format<span class=\"br0\">(</span><span class=\"st0\">\"%d -&gt;\u00a0%d   \u00a0%2d    \u00a0%s\"</span>, u, v,<br/>                            <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>, u<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                        u <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>u <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        path <span class=\"sy0\">+=</span> <span class=\"st0\">\" -&gt; \"</span> <span class=\"sy0\">+</span> u<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>u <span class=\"sy0\">!=</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 21, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> graph <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  graph.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>    graph<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">9999999</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  graph<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> graph<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>graph<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> graph<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> graph<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        graph<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> graph<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> graph<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>graph<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def weights: {<br/>  \"1\": {\"3\": -2},<br/>  \"2\": {\"1\"\u00a0: 4, \"3\": 3},<br/>  \"3\": {\"4\": 2},<br/>  \"4\": {\"2\": -1}<br/>};</pre>"}, {"lang": "Julia", "loc": 38, "block": "<pre class=\"text highlighted_source\"># Floyd-Warshall algorithm: https://rosettacode.org/wiki/Floyd-Warshall_algorithm<br/># v0.6<br/>\u00a0<br/>function floydwarshall(weights::Matrix, nvert::Int)<br/>    dist = fill(Inf, nvert, nvert)<br/>    for i in 1:size(weights, 1)<br/>        dist[weights[i, 1], weights[i, 2]] = weights[i, 3]<br/>    end<br/>    # return dist<br/>    next = collect(j\u00a0!= i\u00a0? j\u00a0: 0 for i in 1:nvert, j in 1:nvert)<br/>\u00a0<br/>    for k in 1:nvert, i in 1:nvert, j in 1:nvert<br/>        if dist[i, k] + dist[k, j] &lt; dist[i, j]<br/>            dist[i, j] = dist[i, k] + dist[k, j]<br/>            next[i, j] = next[i, k]<br/>        end<br/>    end<br/>\u00a0<br/>    # return next<br/>    function printresult(dist, next)<br/>        println(\"pair     dist    path\")<br/>        for i in 1:size(next, 1), j in 1:size(next, 2)<br/>            if i\u00a0!= j<br/>                u = i<br/>                path = @sprintf \"%d -&gt;\u00a0%d   \u00a0%2d    \u00a0%s\" i j dist[i, j] i<br/>                while true<br/>                    u = next[u, j]<br/>                    path *= \" -&gt; $u\"<br/>                    if u == j break end<br/>                end<br/>                println(path)<br/>            end<br/>        end<br/>    end<br/>    printresult(dist, next)<br/>end<br/>\u00a0<br/>floydwarshall([1 3 -2; 2 1 4; 2 3 3; 3 4 2; 4 2 -1], 4)</pre>"}, {"lang": "Kotlin", "loc": 58, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> FloydWarshall <span class=\"br0\">{</span><br/>    fun doCalcs<span class=\"br0\">(</span>weights<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span>, nVertices<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dist <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>nVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span> DoubleArray<span class=\"br0\">(</span>nVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span> Double.<span class=\"me1\">POSITIVE_INFINITY</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>w in weights<span class=\"br0\">)</span> dist<span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>w<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> next <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>nVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>nVertices<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until next.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until next.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j + <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until nVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until nVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until nVertices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> + dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> + dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>                        next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        printResult<span class=\"br0\">(</span>dist, next<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun printResult<span class=\"br0\">(</span>dist<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>DoubleArray<span class=\"sy0\">&gt;</span>, next<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> u<span class=\"sy0\">:</span> Int<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> v<span class=\"sy0\">:</span> Int<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> path<span class=\"sy0\">:</span> String<br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until next.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until next.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    u <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>                    v <span class=\"sy0\">=</span> j + <span class=\"nu0\">1</span><br/>                    path <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d -&gt;\u00a0%d   \u00a0%2d    \u00a0%s\"</span><span class=\"br0\">)</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>u, v, dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, u<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>                        u <span class=\"sy0\">=</span> next<span class=\"br0\">[</span>u - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                        path +<span class=\"sy0\">=</span> <span class=\"st0\">\" -&gt; \"</span> + u<br/>                    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>u <span class=\"sy0\">!=</span> v<span class=\"br0\">)</span><br/>                    println<span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> weights <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>            intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, -<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>            intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>            intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>            intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>            intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nVertices <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    FloydWarshall.<span class=\"me1\">doCalcs</span><span class=\"br0\">(</span>weights, nVertices<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Modula-2", "loc": 85, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> FloydWarshall;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> SpecialReals <span class=\"kw1\">IMPORT</span> Infinity;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> ReadChar<span class=\"sy0\">,</span>WriteString<span class=\"sy0\">,</span>WriteLn;<br/>\u00a0<br/><span class=\"kw1\">CONST</span> NUM_VERTICIES <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>;<br/><span class=\"kw1\">TYPE</span><br/>    IntArray <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>    RealArray <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> FloydWarshall<span class=\"br0\">(</span>weights <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    dist <span class=\"sy0\">:</span> RealArray;<br/>    next <span class=\"sy0\">:</span> IntArray;<br/>    i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">FOR</span> j<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>            dist<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Infinity;<br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    k <span class=\"sy0\">:=</span> <span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> k <span class=\"kw1\">DO</span><br/>        dist<span class=\"br0\">[</span>weights<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>weights<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>weights<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">FOR</span> j<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>            <span class=\"kw1\">IF</span> i<span class=\"sy0\">#</span>j <span class=\"kw1\">THEN</span><br/>                next<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">FOR</span> k<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>            <span class=\"kw1\">FOR</span> j<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>                <span class=\"kw1\">IF</span> dist<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> &gt; dist<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>                    dist<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> dist<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"sy0\">,</span>j<span class=\"br0\">]</span>;<br/>                    next<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> next<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>k<span class=\"br0\">]</span>;<br/>                <span class=\"kw1\">END</span><br/>            <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    PrintResult<span class=\"br0\">(</span>dist<span class=\"sy0\">,</span> next<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> FloydWarshall;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> PrintResult<span class=\"br0\">(</span>dist <span class=\"sy0\">:</span> RealArray; next <span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>u<span class=\"sy0\">,</span>v <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">FOR</span> j<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> NUM_VERTICIES<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>            <span class=\"kw1\">IF</span> i<span class=\"sy0\">#</span>j <span class=\"kw1\">THEN</span><br/>                u <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>                v <span class=\"sy0\">:=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>                FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i -&gt;\u00a0%i   \u00a0%2i    \u00a0%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> u<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"kw3\">TRUNC</span><span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> u<span class=\"br0\">)</span>;<br/>                WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">REPEAT</span><br/>                    u <span class=\"sy0\">:=</span> next<span class=\"br0\">[</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>;<br/>                    FormatString<span class=\"br0\">(</span><span class=\"st0\">\" -&gt;\u00a0%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> u<span class=\"br0\">)</span>;<br/>                    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">UNTIL</span> u<span class=\"sy0\">=</span>v;<br/>                WriteLn<br/>            <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> PrintResult;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> WeightArray <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> weights <span class=\"sy0\">:</span> WeightArray;<br/><span class=\"kw1\">BEGIN</span><br/>    weights <span class=\"sy0\">:=</span> WeightArray<span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>;<br/>\u00a0<br/>    FloydWarshall<span class=\"br0\">(</span>weights<span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> FloydWarshall.</pre>"}, {"lang": "Perl", "loc": 50, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> FloydWarshall<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$edges</span> <span class=\"sy0\">=</span> <span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@dist</span><span class=\"sy0\">,</span> <span class=\"re0\">@seq</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$num_vert</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\"># insert given dists into dist matrix</span><br/>\t<span class=\"kw3\">map</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$num_vert</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$num_vert</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$num_vert</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$num_vert</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"re0\">$edges</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@vertices</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span><span class=\"re0\">$num_vert</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\"># init sequence/\"next\" table</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$seq</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$j</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$j</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># diagonal of dists matrix</span><br/>\t<span class=\"co1\">#map {$dist[$_][$_] = 0} @vertices;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$k</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"kw3\">defined</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"kw3\">defined</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw3\">defined</span><span class=\"br0\">(</span><span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>\t\t\t\t\t\t<span class=\"sy0\">||</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$seq</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$seq</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># print table</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"pair     dist    path<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span><span class=\"br0\">(</span><span class=\"re0\">@vertices</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@path</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"re0\">$seq</span><span class=\"br0\">[</span><span class=\"re0\">$path</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw3\">push</span> <span class=\"re0\">@path</span><span class=\"sy0\">,</span> <span class=\"re0\">$seq</span><span class=\"br0\">[</span><span class=\"re0\">$path</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw3\">push</span> <span class=\"re0\">@path</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"%d -&gt;\u00a0%d \u00a0%4d    \u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <br/>\t\t\t\t<span class=\"re0\">$path</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$path</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' -&gt; '</span><span class=\"sy0\">,</span> <span class=\"re0\">@path</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$graph</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>FloydWarshall<span class=\"br0\">(</span><span class=\"re0\">$graph</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 27, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> Floyd<span class=\"sy0\">-</span>Warshall <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@edge</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@dist</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span>Inf <span class=\"kw1\">xx</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">*.</span><span class=\"me1\">Array</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> \u2026 <span class=\"sy0\">!*</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@edge</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$u</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@dist</span><span class=\"br0\">[</span><span class=\"re0\">$u</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$v</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"re0\">$u</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$v</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">@dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"re0\">@dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">@dist</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">' Pair  Distance     Path'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@path</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@path</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span><span class=\"br0\">[</span><span class=\"re0\">@path</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw1\">until</span> <span class=\"re0\">@path</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \u2192\u00a0%d \u00a0%4d      \u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@dist</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"re0\">@path</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span> <span class=\"sy0\">*+</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' \u2192 '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Floyd<span class=\"sy0\">-</span>Warshall<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 47, "block": "<pre class=\"text highlighted_source\">constant inf = 1e300*1e300<br/>\u00a0<br/>function Path(integer u, integer v, sequence next)<br/>    if next[u,v]=null then<br/>       return \"\"<br/>    end if<br/>    sequence path = {sprintf(\"%d\",u)}<br/>    while u!=v do<br/>       u = next[u,v]<br/>       path = append(path,sprintf(\"%d\",u))<br/>    end while<br/>    return join(path,\"-&gt;\")<br/>end function<br/>\u00a0<br/>procedure FloydWarshall(integer V, sequence weights)<br/>    sequence dist = repeat(repeat(inf,V),V)<br/>    sequence next = repeat(repeat(null,V),V)<br/>    for k=1 to length(weights) do<br/>      integer {u,v,w} = weights[k]<br/>      dist[u,v]\u00a0:= w  -- the weight of the edge (u,v)<br/>      next[u,v]\u00a0:= v<br/>    end for<br/>    -- standard Floyd-Warshall implementation<br/>    for k=1 to V do<br/>      for i=1 to V do<br/>        for j=1 to V do<br/>          atom d = dist[i,k] + dist[k,j]<br/>          if dist[i,j] &gt; d then<br/>            dist[i,j]\u00a0:= d<br/>            next[i,j]\u00a0:= next[i,k]<br/>          end if<br/>        end for<br/>      end for<br/>    end for<br/>    printf(1,\"pair  dist  path\\n\")<br/>    for u=1 to V do<br/>      for v=1 to V do<br/>        if u!=v then<br/>          printf(1,\"%d-&gt;%d  \u00a0%2d  \u00a0%s\\n\",{u,v,dist[u,v],Path(u,v,next)})<br/>        end if<br/>      end for<br/>    end for<br/>end procedure   <br/>\u00a0<br/>constant V = 4<br/>constant weights = {{1, 3, -2}, {2, 1, 4}, {2, 3, 3}, {3, 4, 2}, {4, 2, -1}}<br/>FloydWarshall(V,weights)</pre>"}, {"lang": "PHP", "loc": 23, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$graph</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$j</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$j</span>\u00a0? <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">9999999</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$graph</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><span class=\"re0\">$graph</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "Python", "loc": 29, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> inf<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/>\u00a0<br/><span class=\"kw1\">def</span> floyd_warshall<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> edge<span class=\"br0\">)</span>:<br/>    rn <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    dist <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>inf<span class=\"br0\">]</span> * n <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> rn<span class=\"br0\">]</span><br/>    nxt  <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   * n <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> rn<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> rn:<br/>        dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> u<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> w <span class=\"kw1\">in</span> edge:<br/>        dist<span class=\"br0\">[</span>u-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w<br/>        nxt<span class=\"br0\">[</span>u-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j <span class=\"kw1\">in</span> product<span class=\"br0\">(</span>rn<span class=\"sy0\">,</span> repeat<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>:<br/>        sum_ik_kj <span class=\"sy0\">=</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> + dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> sum_ik_kj:<br/>            dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum_ik_kj<br/>            nxt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>  <span class=\"sy0\">=</span> nxt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"pair     dist    path\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> j <span class=\"kw1\">in</span> product<span class=\"br0\">(</span>rn<span class=\"sy0\">,</span> repeat<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">!=</span> j:<br/>            path <span class=\"sy0\">=</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"kw1\">while</span> path<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> j:<br/>                path.<span class=\"me1\">append</span><span class=\"br0\">(</span>nxt<span class=\"br0\">[</span>path<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \u2192\u00a0%d \u00a0%4d      \u00a0%s\"</span> <br/>                 \u00a0% <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> j + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>                     <span class=\"st0\">' \u2192 '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>p + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> path<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    floyd_warshall<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 76, "block": "<pre class=\"text highlighted_source\">#lang typed/racket<br/>(require math/array)<br/>\u00a0<br/>;; in\u00a0: initialized dist and next matrices<br/>;; out\u00a0: dist and next matrices<br/>;; O(n^3)<br/>(define-type Next-T (Option Index))<br/>(define-type Dist-T Real)<br/>(define-type Dists (Array Dist-T))<br/>(define-type Nexts (Array Next-T))<br/>(define-type Settable-Dists (Settable-Array Dist-T))<br/>(define-type Settable-Nexts (Settable-Array Next-T))<br/>\u00a0<br/>(: floyd-with-path (-&gt; Index Dists Nexts (Values Dists Nexts)))<br/>(: init-edges (-&gt; Index (Values Settable-Dists Settable-Nexts)))<br/>\u00a0<br/>(define (floyd-with-path n dist-in next-in)<br/>  (define dist\u00a0: Settable-Dists (array-&gt;mutable-array dist-in))<br/>  (define next\u00a0: Settable-Nexts (array-&gt;mutable-array next-in))<br/>  (for* ((k n) (i n) (j n))<br/>    (when (negative? (array-ref dist (vector j j)))<br/>      (raise 'negative-cycle))<br/>    (define i.k (vector i k))<br/>    (define i.j (vector i j))<br/>    (define d (+ (array-ref dist i.k) (array-ref dist (vector k j))))<br/>    (when (&lt; d (array-ref dist i.j))<br/>      (array-set! dist i.j d)<br/>      (array-set! next i.j (array-ref next i.k))))<br/>  (values dist next))<br/>\u00a0<br/>;; utilities<br/>\u00a0<br/>;; init random edges costs, matrix 66% filled<br/>(define (init-edges n)<br/>  (define dist\u00a0: Settable-Dists (array-&gt;mutable-array (make-array (vector n n) 0)))<br/>  (define next\u00a0: Settable-Nexts (array-&gt;mutable-array (make-array (vector n n) #f)))  <br/>  (for* ((i n) (j n) #:unless (= i j))<br/>    (define i.j (vector i j))<br/>    (array-set! dist i.j +Inf.0)<br/>    (unless (&lt; (random) 0.3)<br/>      (array-set! dist i.j (add1 (random 100)))<br/>      (array-set! next i.j j)))<br/>  (values dist next))<br/>\u00a0<br/>;; show path from u to v<br/>(: path (-&gt; Nexts Index Index (Listof Index)))<br/>(define (path next u v)<br/>  (let loop\u00a0: (Listof Index) ((u\u00a0: Index u) (rv\u00a0: (Listof Index) null))<br/>    (if (= u v)<br/>        (reverse (cons u rv))<br/>        (let ((nxt (array-ref next (vector u v))))<br/>          (if nxt (loop nxt (cons u rv)) null)))))<br/>\u00a0<br/>;; show computed distance<br/>(: mdist (-&gt; Dists Index Index Dist-T))<br/>(define (mdist dist u v)<br/>  (array-ref dist (vector u v)))<br/>\u00a0<br/>(module+ main<br/>  (define n 8)<br/>  (define-values (dist next) (init-edges n))<br/>  (define-values (dist+ next+) (floyd-with-path n dist next))<br/>  (displayln \"original dist\")<br/>  dist<br/>  (displayln \"new dist and next\")<br/>  dist+<br/>  next+<br/> \u00a0;; note, these path and dist calls are not as carefully crafted as<br/> \u00a0;; the echolisp ones (in fact they're verbatim copied)<br/>  (displayln \"paths and distances\")<br/>  (path  next+ 1 3)<br/>  (mdist dist+ 1 0)<br/>  (mdist dist+ 0 3)<br/>  (mdist dist+ 1 3)<br/>  (path next+ 7 6)<br/>  (path next+ 6 7))</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program uses Floyd-Warshall algorithm to find shortest distance between vertices.*/</span><br/>v=<span class=\"nu0\">4</span>              <span class=\"coMULTI\">/*\u2588\u2588\u2588       {1}       \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/*number of vertices in weighted graph.*/</span><br/>@<span class=\"sy0\">.</span>= <span class=\"nu0\">99999999</span>     <span class=\"coMULTI\">/*\u2588\u2588\u2588    4 /   \\ -2   \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/*the default distance  (edge weight). */</span><br/>@<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>3=-<span class=\"nu0\">2</span>         <span class=\"coMULTI\">/*\u2588\u2588\u2588     /  3  \\     \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/*the distance (weight) for an edge.   */</span><br/>@<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>1= <span class=\"nu0\">4</span>         <span class=\"coMULTI\">/*\u2588\u2588\u2588  {2} \u2500\u2500\u2500\u2500\u25ba {3}  \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/* \"     \"         \"     \"   \"   \"     */</span><br/>@<span class=\"sy0\">.</span>2<span class=\"sy0\">.</span>3= <span class=\"nu0\">3</span>         <span class=\"coMULTI\">/*\u2588\u2588\u2588     \\     /     \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/* \"     \"         \"     \"   \"   \"     */</span><br/>@<span class=\"sy0\">.</span>3<span class=\"sy0\">.</span>4= <span class=\"nu0\">2</span>         <span class=\"coMULTI\">/*\u2588\u2588\u2588   -1 \\   / 2    \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/* \"     \"         \"     \"   \"   \"     */</span><br/>@<span class=\"sy0\">.</span>4<span class=\"sy0\">.</span>2=-<span class=\"nu0\">1</span>         <span class=\"coMULTI\">/*\u2588\u2588\u2588       {4}       \u2588\u2588\u2588*/</span>     <span class=\"coMULTI\">/* \"     \"         \"     \"   \"   \"     */</span><br/>            <span class=\"kw1\">do</span>     k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> v<br/>              <span class=\"kw1\">do</span>   i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> v<br/>                <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> v;  <a class=\"__cf_email__\" data-cfemail=\"653a5825\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>k + @<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>j<br/>                <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>j<span class=\"sy0\">&gt;</span>_  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>j=_         <span class=\"coMULTI\">/*use a new distance (weight) for edge.*/</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>              <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*i*/</span><br/>            <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*k*/</span><br/>w=<span class=\"nu0\">12</span>                                             <span class=\"coMULTI\">/*width of the columns for the output. */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'vertices'</span>, w<span class=\"br0\">)</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'distance'</span>, w<span class=\"br0\">)</span> <span class=\"coMULTI\">/*display the  1st  line of the title. */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'pair'</span>    , w<span class=\"br0\">)</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'(weight)'</span>, w<span class=\"br0\">)</span> <span class=\"coMULTI\">/*   \"     \"   2nd    \"   \"  \"    \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>       , w<span class=\"br0\">)</span>  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>       , w<span class=\"br0\">)</span> <span class=\"coMULTI\">/*   \"     \"   3rd    \"   \"  \"    \"    */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display edge distances (weight)*/</span><br/>   <span class=\"kw1\">do</span>   f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> v                               <span class=\"coMULTI\">/*process each of the \"from\" vertices. */</span><br/>     <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> v;   <span class=\"kw1\">if</span> f==t  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>      <span class=\"coMULTI\">/*   \"      \"   \"  \"   \"to\"      \"     */</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>f <span class=\"st0\">'\u2500\u25ba'</span> t, w<span class=\"br0\">)</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>t, w%2<span class=\"br0\">)</span> <span class=\"coMULTI\">/*show the distance between 2 vertices.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span><br/>   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*f*/</span>                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 35, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> floyd_warshall<span class=\"br0\">(</span>n, edge<span class=\"br0\">)</span><br/>  dist = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> i==j\u00a0? <span class=\"nu0\">0</span>\u00a0: <span class=\"kw3\">Float</span>::INFINITY<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  nxt = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  edge.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>u,v,w<span class=\"sy0\">|</span><br/>    dist<span class=\"br0\">[</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = w<br/>    nxt<span class=\"br0\">[</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>    n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>          dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+</span> dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>          nxt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = nxt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"pair     dist    path\"</span><br/>  n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">next</span>  <span class=\"kw1\">if</span> i==j<br/>      u = i<br/>      path = <span class=\"br0\">[</span>u<span class=\"br0\">]</span><br/>      path <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>u = nxt<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"kw1\">while</span> u\u00a0!= j<br/>      path = path.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>u<span class=\"sy0\">|</span> u<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" -&gt; \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"%d -&gt;\u00a0%d \u00a0%4d    \u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>, path<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>n = <span class=\"nu0\">4</span><br/>edge = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>floyd_warshall<span class=\"br0\">(</span>n, edge<span class=\"br0\">)</span></pre>"}, {"lang": "SequenceL", "loc": 57, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Sequence.sl&gt;;<br/>import &lt;Utilities/Math.sl&gt;;<br/>\u00a0<br/>ARC\u00a0::= (To: int, Weight: float);<br/>arc(t,w)\u00a0:= (To: t, Weight: w);<br/>VERTEX\u00a0::= (Label: int, Arcs: ARC(1));<br/>vertex(l,arcs(1))\u00a0:= (Label: l, Arcs: arcs);<br/>\u00a0<br/>getArcsFrom(vertex, graph(1))\u00a0:=<br/>    let<br/>        index\u00a0:= firstIndexOf(graph.Label, vertex);<br/>    in<br/>        [] when index = 0<br/>    else<br/>        graph[index].Arcs;<br/>\u00a0<br/>getWeightTo(vertex, arcs(1))\u00a0:=<br/>    let<br/>        index\u00a0:= firstIndexOf(arcs.To, vertex);<br/>    in<br/>        0 when index = 0<br/>    else<br/>        arcs[index].Weight;<br/>\u00a0<br/>throughK(k, dist(2))\u00a0:=<br/>    let<br/>        newDist[i, j]\u00a0:= min(dist[i][k] + dist[k][j], dist[i][j]);<br/>    in<br/>        dist when k &gt; size(dist)<br/>    else<br/>        throughK(k + 1, newDist);<br/>\u00a0<br/>floydWarshall(graph(1))\u00a0:=<br/>    let<br/>        initialResult[i,j]\u00a0:= 1.79769e308 when i /= j else 0<br/>                              foreach i within 1 ... size(graph),<br/>                                      j within 1 ... size(graph);<br/>\u00a0<br/>        singleResult[i,j]\u00a0:= getWeightTo(j, getArcsFrom(i, graph))<br/>                             foreach i within 1 ... size(graph),<br/>                                     j within 1 ... size(graph);<br/>\u00a0<br/>        start[i,j]\u00a0:= <br/>                initialResult[i,j] when singleResult[i,j] = 0<br/>            else<br/>                singleResult[i,j];    <br/>    in<br/>        throughK(1, start);<br/>\u00a0<br/>main()\u00a0:=<br/>    let<br/>        graph\u00a0:= [vertex(1, [arc(3,-2)]),<br/>                  vertex(2, [arc(1,4), arc(3,3)]),<br/>                  vertex(3, [arc(4,2)]),<br/>                  vertex(4, [arc(2,-1)])];<br/>    in<br/>        floydWarshall(graph);</pre>"}, {"lang": "Sidef", "loc": 33, "block": "<pre class=\"ruby highlighted_source\">func floyd_warshall<span class=\"br0\">(</span>n, edge<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var dist = n.<span class=\"me1\">of</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> n.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> i == j\u00a0? <span class=\"nu0\">0</span>\u00a0: Inf <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    var nxt  = n.<span class=\"me1\">of</span> <span class=\"br0\">{</span> n.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"kw2\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> u,v,w <span class=\"kw1\">in</span> edge <span class=\"br0\">{</span><br/>        dist<span class=\"br0\">[</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = w<br/>         nxt<span class=\"br0\">[</span>u<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = v<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>^n<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> cartesian <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k, i, j<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">+</span>dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">+</span>dist<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            nxt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = nxt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var summary = <span class=\"st0\">\"pair     dist    path<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"kw1\">for</span> i,j <span class=\"br0\">(</span>^n ~X ^n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        i==j <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>        var u = i<br/>        var path = <span class=\"br0\">[</span>u<span class=\"br0\">]</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>u\u00a0!= j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            path <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>u = nxt<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        path.<span class=\"me1\">map</span>!<span class=\"br0\">{</span><span class=\"sy0\">|</span>u<span class=\"sy0\">|</span> u<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span>!<span class=\"br0\">(</span><span class=\"st0\">\" -&gt; \"</span><span class=\"br0\">)</span><br/>        summary <span class=\"sy0\">+</span>= <span class=\"br0\">(</span><span class=\"st0\">\"%d -&gt;\u00a0%d \u00a0%4d    \u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, dist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>, path<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> summary<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var n = <span class=\"nu0\">4</span><br/>var edge = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> floyd_warshall<span class=\"br0\">(</span>n, edge<span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span>     <span class=\"sy0\">;</span><span class=\"co1\"># for {*} and [dict]</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"me1\">graph</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"me1\">graph</span>::<span class=\"me1\">op</span><br/>\u00a0<br/>struct::<span class=\"me1\">graph</span> g<br/>\u00a0<br/><span class=\"kw1\">set</span> arclist <span class=\"br0\">{</span><br/>    a b<br/>    a p<br/>    b m<br/>    b c<br/>    c d<br/>    d e<br/>    e f<br/>    f q<br/>    f g<br/><span class=\"br0\">}</span><br/>\u00a0<br/>g node insert <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$arclist</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>from to<span class=\"br0\">}</span> <span class=\"re0\">$arclist</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> a <span class=\"br0\">[</span>g arc insert <span class=\"re0\">$from</span> <span class=\"re0\">$to</span><span class=\"br0\">]</span><br/>    g arc setweight <span class=\"re0\">$a</span> <span class=\"nu0\">1.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> paths <span class=\"br0\">[</span>::<span class=\"me1\">struct</span>::<span class=\"me1\">graph</span>::<span class=\"me1\">op</span>::<span class=\"me1\">FloydWarshall</span> g<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">set</span> paths <span class=\"br0\">[</span>dict filter <span class=\"re0\">$paths</span> key <span class=\"br0\">{</span>a <span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">]</span>        <span class=\"sy0\">;</span><span class=\"co1\"># filter for paths starting at \"a\"</span><br/><span class=\"kw1\">set</span> paths <span class=\"br0\">[</span>dict filter <span class=\"re0\">$paths</span> value <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>-<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">]</span>   <span class=\"sy0\">;</span><span class=\"co1\"># whose cost is not \"Inf\"</span><br/><span class=\"kw1\">set</span> paths <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -stride <span class=\"nu0\">2</span> -index <span class=\"nu0\">1</span> -real -decreasing <span class=\"re0\">$paths</span><span class=\"br0\">]</span>   <span class=\"sy0\">;</span><span class=\"co1\"># and print the longest first</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$paths</span></pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">fcn FloydWarshallWithPathReconstruction(dist){ // dist is munged<br/>   V:=dist[0].len();<br/>   next:=V.pump(List,V.pump(List,Void.copy).copy);  // VxV matrix of Void<br/>   foreach u,v in (V,V){ if(dist[u][v]!=Void and u!=v) next[u][v] = v }<br/>   foreach k,i,j in (V,V,V){<br/>      a,b,c:=dist[i][j],dist[i][k],dist[k][j];<br/>      if( (a!=Void and b!=Void and c!=Void and a&gt;b+c) or  // Inf math<br/>\t  (a==Void and b!=Void and c!=Void) ){<br/>\t dist[i][j] = b+c;<br/>\t next[i][j] = next[i][k];<br/>      }<br/>   }<br/>   return(dist,next)<br/>} <br/>fcn path(next,u,v){<br/>   if(Void==next[u][v]) return(T);<br/>   path:=List(u);<br/>   while(u!=v){ path.append(u = next[u][v]) }<br/>   path<br/>}<br/>fcn printM(m){ m.pump(Console.println,rowFmt) }<br/>fcn rowFmt(row){ (\"%5s \"*row.len()).fmt(row.xplode()) }</pre>"}]}