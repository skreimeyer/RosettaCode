{"task": "Euler%27s_identity", "blocks": [{"lang": "ALGOL 68", "loc": 53, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># calculate an approximation to e^(i pi) + 1 which should be 0 (Euler's identity) #</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># returns e^ix for long real x, using the series:                                 #</span><br/>    <span class=\"coMULTI\">#      exp(ix) = 1 - x^2/2! + x^4/4! - ... + i(x - x^3/3! + x^5/5! - x^7/7! ... ) #</span><br/>    <span class=\"coMULTI\">#      the expansion stops when successive terms differ by less than 1e-15        #</span><br/>    <span class=\"kw4\">PROC</span> expi <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">COMPL</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>            <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> t              <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> <span class=\"kw26\">real</span> part      <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> imaginary part <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> divisor        <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">BOOL</span>      even power     <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>            <span class=\"kw3\">BOOL</span>      subtract       <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>            <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> diff           <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">WHILE</span> <span class=\"kw8\">ABS</span> diff <span class=\"sy1\">&gt;</span> <span class=\"re1\">1e-15</span> <span class=\"kw2\">DO</span><br/>                divisor <span class=\"sy1\">*:=</span> n<span class=\"sy1\">;</span><br/>                t       <span class=\"sy1\">*:=</span> x<span class=\"sy1\">;</span><br/>                <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> <span class=\"kw22\">term</span> <span class=\"sy1\">:=</span> t <span class=\"sy1\">/</span> divisor<span class=\"sy1\">;</span><br/>                <span class=\"kw2\">IF</span> even power <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># this term is real #</span><br/>                    subtract <span class=\"sy1\">:=</span> <span class=\"kw8\">NOT</span> subtract<span class=\"sy1\">;</span><br/>                    <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> prev <span class=\"sy1\">:=</span> <span class=\"kw26\">real</span> part<span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">IF</span> subtract <span class=\"kw2\">THEN</span><br/>                        <span class=\"kw26\">real</span> part <span class=\"sy1\">-:=</span> <span class=\"kw22\">term</span><br/>                    <span class=\"kw2\">ELSE</span><br/>                        <span class=\"kw26\">real</span> part <span class=\"sy1\">+:=</span> <span class=\"kw22\">term</span><br/>                    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                    diff <span class=\"sy1\">:=</span> prev <span class=\"sy1\">-</span> <span class=\"kw26\">real</span> part<br/>                <span class=\"kw2\">ELSE</span><br/>                    <span class=\"coMULTI\"># this term is imaginary #</span><br/>                    <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> prev <span class=\"sy1\">:=</span> imaginary part<span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">IF</span> subtract <span class=\"kw2\">THEN</span><br/>                        imaginary part <span class=\"sy1\">-:=</span> <span class=\"kw22\">term</span><br/>                    <span class=\"kw2\">ELSE</span><br/>                        imaginary part <span class=\"sy1\">+:=</span> <span class=\"kw22\">term</span><br/>                    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                    diff <span class=\"sy1\">:=</span> prev <span class=\"sy1\">-</span> imaginary part<br/>                <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                even power <span class=\"sy1\">:=</span> <span class=\"kw8\">NOT</span> even power<br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"br0\">(</span> <span class=\"kw26\">real</span> part<span class=\"sy1\">,</span> imaginary part <span class=\"br0\">)</span><br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># expi #</span> <span class=\"sy1\">;</span><br/>    <span class=\"kw4\">LONG</span> <span class=\"kw3\">COMPL</span> eulers identity <span class=\"sy1\">=</span> expi<span class=\"br0\">(</span> <span class=\"kw23\">long pi</span> <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"e^(i*pi) ~ \"</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> re <span class=\"kw6\">OF</span> eulers identity<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>23<span class=\"sy1\">,</span> 20 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> im <span class=\"kw6\">OF</span> eulers identity<span class=\"sy1\">,</span>  23<span class=\"sy1\">,</span> 20 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"st0\">\"i\"</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "C", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;complex.h&gt;</span><br/><span class=\"co2\">#include &lt;wchar.h&gt;</span><br/><span class=\"co2\">#include &lt;locale.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">wchar_t</span> pi <span class=\"sy0\">=</span> L<span class=\"st0\">'<span class=\"es3\">\\u03c0</span>'</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Small pi symbol */</span><br/>    <span class=\"kw4\">wchar_t</span> ae <span class=\"sy0\">=</span> L<span class=\"st0\">'<span class=\"es3\">\\u2245</span>'</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Approximately equals symbol */</span><br/>    <span class=\"kw4\">double</span> complex e <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cexp.html\"><span class=\"kw3\">cexp</span></a><span class=\"br0\">(</span>M_PI <span class=\"sy0\">*</span> I<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setlocale.html\"><span class=\"kw3\">setlocale</span></a><span class=\"br0\">(</span>LC_CTYPE<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"e ^\u00a0%lci + 1 = [%.16f,\u00a0%.16f]\u00a0%lc 0<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> pi<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/creal.html\"><span class=\"kw3\">creal</span></a><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cimag.html\"><span class=\"kw3\">cimag</span></a><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">,</span> ae<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 7, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;complex&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">exp</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span>, M_PI<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu16\">1.0</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USING: math math.constants math.functions prettyprint\u00a0;<br/>1 e pi C{ 0 1 } * ^ + .</pre>"}, {"lang": "Go", "loc": 11, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/cmplx\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw3\">cmplx</span><span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pi <span class=\"sy3\">*</span> <span class=\"nu0\">1i</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex<br/>\u00a0<br/>eulerIdentityZeroIsh <span class=\"sy0\">::</span> Complex <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>eulerIdentityZeroIsh <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:exp\"><span class=\"kw3\">exp</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> eulerIdentityZeroIsh</pre>"}, {"lang": "J", "loc": 24, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>   <span class=\"co1\">NB. Euler's number is the default base for power</span><br/>   <span class=\"co1\">NB. using j's expressive numeric notation:</span><br/>   <span class=\"nu0\">1</span> + ^ <span class=\"nu0\">0j1p1</span><br/>0j1.<span class=\"nu0\">22465e_16</span><br/>\u00a0<br/>\u00a0<br/>   <span class=\"co1\">NB. Customize the comparison tolerance to 10 ^ (-15)</span><br/>   <span class=\"co1\">NB. to show that</span><br/>   <span class=\"nu0\">_1</span> <span class=\"sy0\">(</span>=!.<span class=\"nu0\">1e_15</span><span class=\"sy0\">)</span> ^ <span class=\"nu0\">0j1p1</span><br/><span class=\"nu0\">1</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>   TAU =: <span class=\"nu0\">2p1</span><br/>\u00a0<br/>   <span class=\"co1\">NB. tauday.com  pi is wrong</span><br/>   <span class=\"co1\">NB. with TAU as 2 pi,</span><br/>   <span class=\"co1\">NB. Euler's identity should have read</span><br/>\u00a0<br/>\u00a0<br/>   <span class=\"nu0\">1</span> <span class=\"sy0\">(</span>=!.<span class=\"nu0\">1e_15</span><span class=\"sy0\">)</span> ^ j. TAU<br/><span class=\"nu0\">1</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">@show e ^ (\u03c0 * im) + 1<br/>@assert e ^ (\u03c0 * im) \u2248 -1</pre>"}, {"lang": "Kotlin", "loc": 52, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.40</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">math</span>.<span class=\"me1\">sqrt</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">math</span>.<span class=\"me1\">PI</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> EPSILON <span class=\"sy0\">=</span> 1.0e-16<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SMALL<span class=\"sy0\">_</span>PI <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es3\">\\u03c0</span>'</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> APPROX<span class=\"sy0\">_</span>EQUALS <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es3\">\\u2245</span>'</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> real<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> imag<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    operator fun plus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        Complex<span class=\"br0\">(</span>real + other.<span class=\"me1\">real</span>, imag + other.<span class=\"me1\">imag</span><span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun times<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span><br/>        real <span class=\"sy0\">*</span> other.<span class=\"me1\">real</span> - imag <span class=\"sy0\">*</span> other.<span class=\"me1\">imag</span>,<br/>        real <span class=\"sy0\">*</span> other.<span class=\"me1\">imag</span> + imag <span class=\"sy0\">*</span> other.<span class=\"me1\">real</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    fun inv<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Complex <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom <span class=\"sy0\">=</span> real <span class=\"sy0\">*</span> real + imag <span class=\"sy0\">*</span> imag<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Complex<span class=\"br0\">(</span>real / denom, -imag / denom<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun unaryMinus<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span>-real, -imag<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun minus<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + <span class=\"br0\">(</span>-other<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun div<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Complex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">*</span> other.<span class=\"me1\">inv</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> modulus<span class=\"sy0\">:</span> Double get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>real <span class=\"sy0\">*</span> real + imag <span class=\"sy0\">*</span> imag<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>imag <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"st0\">\"$real + ${imag}i\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"$real - ${-imag}i\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> fact <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, PI<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> e <span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, PI<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pow <span class=\"sy0\">=</span> x<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e0 <span class=\"sy0\">=</span> e<br/>        fact <span class=\"sy0\">*=</span> n++<br/>        pow <span class=\"sy0\">*=</span> x<br/>        e +<span class=\"sy0\">=</span> pow / Complex<span class=\"br0\">(</span>fact, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>e - e0<span class=\"br0\">)</span>.<span class=\"me1\">modulus</span> <span class=\"sy0\">&gt;=</span> EPSILON<span class=\"br0\">)</span><br/>    e +<span class=\"sy0\">=</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"e^${SMALL_PI}i + 1 = $e $APPROX_EQUALS 0\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">;;</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALacos\"><span class=\"kw3\">acos</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> pi <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">3.14159265358979312</span><br/><span class=\"sy0\">#</span> add <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexp\"><span class=\"kw3\">exp</span></a> <span class=\"br0\">{</span> re <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span> im <span class=\"sy0\">=</span> pi <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> re <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span> im <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span> <span class=\"br0\">}</span><span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Complex.html\"><span class=\"kw2\">Complex</span></a><span class=\"sy0\">.</span>t <span class=\"sy0\">=</span> <span class=\"br0\">{</span>re <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.;</span> im <span class=\"sy0\">=</span> 1<span class=\"sy0\">.</span>22464679914735321e<span class=\"sy0\">-</span>16<span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span>pi <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>\u2062<span class=\"sy0\">&gt;</span> <span class=\"kw1\">is</span> tighter<span class=\"br0\">(</span><span class=\"re0\">&amp;infix</span><span class=\"sy0\">:&lt;**&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$^a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$^b</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'e**i\u2062\u03c0 + 1 \u2245 0\u00a0: '</span><span class=\"sy0\">,</span> e<span class=\"sy0\">**</span><span class=\"kw3\">i</span>\u2062\u03c0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> \u2245 <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Error: '</span><span class=\"sy0\">,</span> e<span class=\"sy0\">**</span><span class=\"kw3\">i</span>\u2062\u03c0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">math</span>.<span class=\"me1\">e</span> ** <span class=\"br0\">(</span><span class=\"kw3\">math</span>.<span class=\"me1\">pi</span> * 1j<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>1.2246467991473532e-16j</pre>"}, {"lang": "Racket", "loc": 2, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(+ (exp (* 0+i pi)) 1)</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program proves  Euler's  identity by showing that:      e^(i pi) + 1  \u2261     0    */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  -  <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*set number of decimal digs precision.*/</span><br/>   cosPi= fmt<span class=\"br0\">(</span> cos<span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*calculate the value of   cos(pi).    */</span><br/>   sinPi= fmt<span class=\"br0\">(</span> sin<span class=\"br0\">(</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*    \"      \"    \"    \"   sin(pi).    */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'     cos(pi) = '</span>  cosPi                    <span class=\"coMULTI\">/*display    \"    \"    \"   cos(Pi).    */</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'     sin(pi) = '</span>  sinPi                    <span class=\"coMULTI\">/*   \"       \"    \"    \"   sin(Pi).    */</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*separate the wheat from the chaff.   */</span><br/>       $= cosPi +  mult<span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>, sinPi<span class=\"br0\">)</span>  +  <span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*calc. product of sin(x) and sqrt(-1).*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'e^(i pi) + 1 = '</span>  fmt<span class=\"br0\">(</span>$<span class=\"br0\">)</span>     proof<span class=\"br0\">(</span>$ = <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*display both sides of the equation.  */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fmt:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; x=<span class=\"kw6\">format</span><span class=\"br0\">(</span>x,,<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>%2,<span class=\"nu0\">0</span><span class=\"br0\">)</span>;  <span class=\"kw1\">return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, x<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">)</span>x <span class=\"sy0\">/</span> <span class=\"nu0\">1</span><br/>mult:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b;       <span class=\"kw1\">if</span> a=<span class=\"nu0\">0</span>  <span class=\"sy0\">|</span> b=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;            <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>b<br/>pi:    pi= <span class=\"nu0\">3.1415926535897932384626433832795028841971693993751058209749445923</span>;  <span class=\"kw1\">return</span> pi<br/>proof: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?;         <span class=\"kw1\">return</span> <span class=\"st0\">'  '</span>  <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">\"unproven proven\"</span>,\u00a0? + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>cos:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;                             <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span><span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>sin:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;                             <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span>x,  <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>sinCos: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z <span class=\"nu0\">1</span> _,i; q=x<span class=\"sy0\">*</span>x;   <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">until</span> p=z; p=z; _=-_<span class=\"sy0\">*</span>q<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k+i<span class=\"br0\">)</span><span class=\"br0\">)</span>; z=z+_<br/>                                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*';          return z<br/>/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;  d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  i=;     m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>;  h=d+<span class=\"nu0\">6</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>;    <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">do</span>;  x= -x;    i= <span class=\"st0\">'i'</span>;   <span class=\"kw3\">end</span><br/>       <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span>, , <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"st0\">'E0'</span>   <span class=\"kw2\">with</span>   g  <span class=\"st0\">'E'</span>  _  <span class=\"sy0\">.</span>;     g= g <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>             <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;        m<span class=\"sy0\">.</span>j=h;                h= h%2 + <span class=\"nu0\">1</span>;        <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>             <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;    <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;   g= <span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;               <span class=\"kw1\">return</span> <span class=\"br0\">(</span>g<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>i           <span class=\"coMULTI\">/*make complex if  X &lt; 0.*/</span></pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"kw3\">require</span> <span class=\"st0\">'complex'</span><br/><span class=\"sy0\">&gt;</span> <span class=\"kw4\">Math</span>::E <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"kw4\">Math</span>::PI <span class=\"sy0\">*</span> <span class=\"kw4\">Complex</span>::I<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy0\">+</span>0.0i<span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 8, "block": "<pre class=\"text highlighted_source\">use std::f64::consts::PI;<br/>\u00a0<br/>extern crate num_complex;<br/>use num_complex::Complex;<br/>\u00a0<br/>fn main() {<br/>    println!(\"{:e}\", Complex::new(0.0, PI).exp() + 1.0);<br/>}</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"br0\">(</span><span class=\"st0\">'e**i\u2062\u03c0 + 1 \u2245 0\u00a0: '</span>, Num.<span class=\"me1\">e</span><span class=\"sy0\">**</span>Num.<span class=\"me1\">pi</span>.<span class=\"me1\">i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> \u2245 <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">'Error: '</span>, Num.<span class=\"me1\">e</span><span class=\"sy0\">**</span>Num.<span class=\"me1\">pi</span>.<span class=\"me1\">i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>Z,pi,e\u00a0:= GSL.Z, (0.0).pi, (0.0).e;<br/>\u00a0<br/>println(\"e^(\\u03c0i) + 1 =\u00a0%s \\u2245 0\".fmt( Z(e).pow(Z(0,1)*pi) + 1 ));<br/>println(\"TMI: \",(Z(e).pow(Z(0,1)*pi) + 1 ).format(0,25,\"g\"));</pre>"}]}