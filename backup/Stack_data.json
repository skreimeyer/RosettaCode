{"task": "Stack", "blocks": [{"lang": "ActionScript", "loc": 5, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">var</span> stack:<span class=\"kw3\">Array</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>stack.<span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>stack.<span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span>stack.<span class=\"kw3\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">// outputs \"2\"</span><br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span>stack.<span class=\"kw3\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">// outputs \"1\"</span></pre>"}, {"lang": "Ada", "loc": 16, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Element_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>; <br/><span class=\"kw3\">package</span> Generic_Stack <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Stack <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>; <br/>   <span class=\"kw3\">procedure</span> Push <span class=\"br0\">(</span>Item\u00a0: Element_Type; Onto\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Stack<span class=\"br0\">)</span>; <br/>   <span class=\"kw3\">procedure</span> Pop <span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">out</span> Element_Type; From\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Stack<span class=\"br0\">)</span>; <br/>   <span class=\"kw3\">function</span> Create <span class=\"kw1\">return</span> Stack;<br/>   Stack_Empty_Error\u00a0: <span class=\"kw1\">exception</span>;<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Node; <br/>   <span class=\"kw3\">type</span> Stack <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Node; <br/>   <span class=\"kw3\">type</span> Node <span class=\"kw1\">is</span> <span class=\"kw3\">record</span> <br/>      Element\u00a0: Element_Type;  <br/>      Next   \u00a0: Stack       \u00a0:= <span class=\"kw3\">null</span>;  <br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>; <br/><span class=\"kw1\">end</span> Generic_Stack;</pre>"}, {"lang": "ALGOL 68", "loc": 15, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># -*- coding: utf-8 -*- #</span><br/>CO REQUIRES<span class=\"sy1\">:</span><br/>  <span class=\"kw4\">MODE</span> OBJVALUE <span class=\"sy1\">=</span> <span class=\"sy1\">~</span> <span class=\"coMULTI\"># Mode/type of actual obj to be stacked #</span><br/><span class=\"kw2\">END</span> CO<br/>\u00a0<br/><span class=\"kw4\">MODE</span> OBJNEXTLINK <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">REF</span> OBJNEXTLINK next<span class=\"sy1\">,</span><br/>  OBJVALUE value <span class=\"coMULTI\"># ... etc. required #</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> obj nextlink new <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> OBJNEXTLINK<span class=\"sy1\">:</span><br/>  <span class=\"kw4\">HEAP</span> OBJNEXTLINK<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> obj nextlink free <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> OBJNEXTLINK free<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  next <span class=\"kw6\">OF</span> free <span class=\"sy1\">:=</span> obj stack empty <span class=\"coMULTI\"># give the garbage collector a BIG hint #</span></pre>"}, {"lang": "ALGOL W", "loc": 51, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% define a Stack type that will hold StringStackElements    \u00a0%<br/>   \u00a0% and the StringStackElement type                           \u00a0%<br/>   \u00a0% we would need separate types for other element types      \u00a0%<br/>    record StringStack ( reference(StringStackElement) top );<br/>    record StringStackElement ( string(8)                     element<br/>                             \u00a0; reference(StringStackElement) next<br/>                              );<br/>   \u00a0% adds e to the end of the StringStack s                    \u00a0%<br/>    procedure pushString ( reference(StringStack) value s<br/>                        \u00a0; string(8)              value e<br/>                         )\u00a0;<br/>    begin<br/>        reference(StringStackElement) newElement;<br/>        top(s)\u00a0:= StringStackElement( e, top(s) )<br/>    end pushString\u00a0;<br/>   \u00a0% removes and returns the top element from the StringStack s\u00a0%<br/>   \u00a0% asserts the Stack is not empty, which will stop the       \u00a0%<br/>   \u00a0% program if it is                                          \u00a0%<br/>    string(8) procedure popString ( reference(StringStack) value s )\u00a0;<br/>    begin<br/>        string(8) v;<br/>        assert( not isEmptyStringStack( s ) );<br/>        v    \u00a0:= element(top(s));<br/>        top(s):= next(top(s));<br/>        v<br/>    end popStringStack\u00a0;<br/>   \u00a0% returns the top element of the StringStack s              \u00a0%<br/>   \u00a0% asserts the Stack is not empty, which will stop the       \u00a0%<br/>   \u00a0% program if it is                                          \u00a0%<br/>    string(8) procedure peekStringStack ( reference(StringStack) value s )\u00a0;<br/>    begin<br/>        assert( not isEmptyStringStack( s ) );<br/>        element(top(s))<br/>    end popStringStack\u00a0;<br/>   \u00a0% returns true if the StringStack s is empty, false otherwise\u00a0%<br/>    logical procedure isEmptyStringStack ( reference(StringStack) value s )\u00a0; top(s) = null;<br/>\u00a0<br/>    begin\u00a0% test the StringStack operations\u00a0%<br/>        reference(StringStack) s;<br/>        s\u00a0:= StringStack( null );<br/>        pushString( s, \"up\"      );<br/>        pushString( s, \"down\"    );<br/>        pushString( s, \"strange\" );<br/>        pushString( s, \"charm\"   );<br/>        while not isEmptyStringStack( s ) do write( popString( s )<br/>                                                  , if isEmptyStringStack( s ) then \"(empty)\"<br/>                                                                               else peekStringStack( s )<br/>                                                  )<br/>    end<br/>end.</pre>"}, {"lang": "Applesoft BASIC", "loc": 40, "block": "<pre class=\"text highlighted_source\">100  DIM STACK$(1000)<br/>110  DATA \"(2*A)\",\"PI\",\"\",\"TO BE OR\",\"NOT TO BE\"<br/>120  FOR I = 1 TO 5<br/>130  READ ELEMENT$<br/>140  GOSUB 500_PUSH<br/>150  NEXT <br/>200  GOSUB 400 POP  AND  PRINT <br/>210  GOSUB 300_EMPTY AND  PRINT <br/>220  FOR I = 1 TO 4<br/>230  GOSUB 400 POP  AND  PRINT <br/>240  NEXT <br/>250  GOSUB 300_EMPTY AND  PRINT <br/>260  END <br/>300  GOSUB 700_EMPTY<br/>310  PRINT \"STACK IS \";<br/>320  IF  NOT EMPTY THEN  PRINT \"NOT \";<br/>330  PRINT \"EMPTY\"<br/>340  RETURN <br/>400  GOSUB 600 POP <br/>410  PRINT ELEMENT$<br/>420  RETURN <br/>500  REM <br/>510  REM PUSH<br/>520  REM <br/>530  LET STACK$(SP) = ELEMENT$<br/>540  LET SP = SP + 1<br/>550  RETURN <br/>600  REM <br/>610  REM POP<br/>620  REM <br/>630  IF SP THEN SP = SP - 1<br/>640  LET ELEMENT$ = STACK$(SP)<br/>650  LET STACK$(SP) = \"\"<br/>660  RETURN <br/>700  REM <br/>710  REM EMPTY<br/>720  REM <br/>730  LET EMPTY = SP = 0<br/>740  RETURN<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 39, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"push\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"push\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"peek\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"pop\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"peek\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"empty\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"pop\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% stack<span class=\"br0\">(</span><span class=\"st0\">\"empty\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> <br/>\u00a0<br/>stack<span class=\"br0\">(</span>command<span class=\"sy0\">,</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  static <br/><span class=\"kw1\">if</span>\u00a0!pointer <br/>pointer <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>command <span class=\"sy0\">=</span> <span class=\"st0\">\"push\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>  _p<span class=\"re0\">%pointer%</span> <span class=\"sy0\">:=</span> value<br/>  pointer <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">return</span> value<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>command <span class=\"sy0\">=</span> <span class=\"st0\">\"pop\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    pointer <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> _p<span class=\"re0\">%pointer%</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>command <span class=\"sy0\">=</span> <span class=\"st0\">\"peek\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>next <span class=\"sy0\">:=</span> pointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>    <br/><span class=\"kw1\">return</span> _p<span class=\"re0\">%next%</span><br/><span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>command <span class=\"sy0\">=</span> <span class=\"st0\">\"empty\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pointer <span class=\"sy0\">==</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"empty\"</span><br/><span class=\"kw1\">else</span><br/><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 14, "block": "<pre class=\"text highlighted_source\">0\u2192S<br/>Lbl PUSH<br/>r\u2081\u2192{L\u2081+S}\u02b3<br/>S+2\u2192S<br/>Return<br/>\u00a0<br/>Lbl POP<br/>S-2\u2192S<br/>{L\u2081+S}\u02b3<br/>Return<br/>\u00a0<br/>Lbl EMPTY<br/>S\u2264\u22640<br/>Return</pre>"}, {"lang": "Babel", "loc": 18, "block": "<pre class=\"text highlighted_source\">main\u00a0: <br/>    { (1 2 3) foo set     -- foo = (1 2 3)<br/>    4 foo push            -- foo = (1 2 3 4)<br/>    0 foo unshift         -- foo = (0 1 2 3 4)<br/>    foo pop               -- foo = (0 1 2 3)<br/>    foo shift             -- foo = (1 2 3)<br/>    check_foo<br/>    { foo pop } 4 times   -- Pops too many times, but this is OK and Babel won't complain<br/>    check_foo }<br/>\u00a0<br/>empty?\u00a0: nil?   -- just aliases 'empty?' to the built-in operator 'nil?'<br/>\u00a0<br/>check_foo!\u00a0: <br/>    { \"foo is \" <br/>    {foo empty?) {nil} {\"not \" .} ifte <br/>    \"empty\" . <br/>    cr &lt;&lt; }<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 69, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enableDelayedExpansion<br/><span class=\"co2\"><br/>:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br/><span class=\"co2\">:: LIFO stack usage</span><br/><span class=\"co2\"><br/>:: Define the stack</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">newStack</span> myStack<br/><span class=\"co2\"><br/>:: Push some values onto the stack</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>value1 value2 value3<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">pushStack</span> myStack <span class=\"sy0\">%%</span><span class=\"re3\">A</span><br/><span class=\"co2\"><br/>:: Test if stack is empty by examining the top \"attribute\"</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> myStack.top==0 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> myStack is empty<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> myStack is <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">NOT</span></a> empty<span class=\"sy0\">)</span><br/><span class=\"co2\"><br/>:: Peek at the top stack value</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:peekStack myStack val <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> a peek at the top of myStack shows <span class=\"sy0\">!</span><span class=\"re2\">val</span><span class=\"sy0\">!</span><br/><span class=\"co2\"><br/>:: Pop the top stack value</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">popStack</span> myStack val <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> popped myStack value=<span class=\"sy0\">!</span><span class=\"re2\">val</span><span class=\"sy0\">!</span><br/><span class=\"co2\"><br/>:: Push some more values onto the stack</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>value4 value5 value6<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">pushStack</span> myStack <span class=\"sy0\">%%</span><span class=\"re3\">A</span><br/><span class=\"co2\"><br/>:: Process the remainder of the stack</span><br/>:<span class=\"re0\">processStack</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">popStack</span> myStack val <span class=\"sy0\">||</span> <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">stackEmpty</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> popped myStack value=<span class=\"sy0\">!</span><span class=\"re2\">val</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">processStack</span><br/>:<span class=\"re0\">stackEmpty</span><br/><span class=\"co2\"><br/>:: Test if stack is empty using the empty \"method\"/\"macro\". Use of the</span><br/><span class=\"co2\">:: second IF statement serves to demonstrate the negation of the empty</span><br/><span class=\"co2\">:: \"method\". A single IF could have been used with an ELSE clause instead.</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">myStack.empty</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> myStack is empty<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">%</span><span class=\"re3\">myStack.empty</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> myStack is <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">NOT</span></a> empty<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br/><span class=\"co2\">:: LIFO stack definition</span><br/>\u00a0<br/>:<span class=\"re0\">newStack</span> stackName<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a <span class=\"sy0\">%</span><span class=\"re3\">~1</span>.top=0<br/><span class=\"co2\">:: Define an empty \"method\" for this stack as a sort of macro</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">~1</span>.empty=<span class=\"co3\">^!</span><span class=\"sy0\">%</span><span class=\"re3\">~1</span>.top<span class=\"co3\">^!</span> == 0\"<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">pushStack</span> stackName value<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a <span class=\"sy0\">%</span><span class=\"re3\">~1</span>.top+=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">~1</span>.<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.top</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">popStack</span> stackName returnVar<br/><span class=\"co2\">:: Sets errorlevel to 0 if success</span><br/><span class=\"co2\">:: Sets errorlevel to 1 if failure because stack was empty</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.top</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">N</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.top</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">~2</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.<span class=\"sy0\">%%</span><span class=\"re3\">N</span></span><span class=\"sy0\">!</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">~1</span>.<span class=\"sy0\">%%</span><span class=\"re3\">N</span>=<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a <span class=\"sy0\">%</span><span class=\"re3\">~1</span>.top-=1<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0<br/>:<span class=\"re0\">peekStack</span> stackName returnVar<br/><span class=\"co2\">:: Sets errorlevel to 0 if success</span><br/><span class=\"co2\">:: Sets errorlevel to 1 if failure because stack was empty</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.top</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">N</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.top</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">~2</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">~1</span>.<span class=\"sy0\">%%</span><span class=\"re3\">N</span></span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0</pre>"}, {"lang": "BBC BASIC", "loc": 31, "block": "<pre class=\"text highlighted_source\">      STACKSIZE = 1000<br/>\u00a0<br/>      FOR n = 3 TO 5<br/>        PRINT \"Push \";n\u00a0: PROCpush(n)<br/>      NEXT<br/>      PRINT \"Pop \"\u00a0; FNpop<br/>      PRINT \"Push 6\"\u00a0: PROCpush(6)<br/>      REPEAT<br/>        PRINT \"Pop \"\u00a0; FNpop<br/>      UNTIL FNisempty<br/>      PRINT \"Pop \"\u00a0; FNpop<br/>      END<br/>\u00a0<br/>      DEF PROCpush(n)\u00a0: LOCAL f%<br/>      DEF FNpop\u00a0: LOCAL f%\u00a0: f% = 1<br/>      DEF FNisempty\u00a0: LOCAL f%\u00a0: f% = 2<br/>      PRIVATE stack(), sptr%<br/>      DIM stack(STACKSIZE-1)<br/>      CASE f% OF<br/>        WHEN 0:<br/>          IF sptr% = DIM(stack(),1) ERROR 100, \"Error: stack overflowed\"<br/>          stack(sptr%) = n<br/>          sptr% += 1<br/>        WHEN 1:<br/>          IF sptr% = 0 ERROR 101, \"Error: stack empty\"<br/>          sptr% -= 1<br/>          = stack(sptr%)<br/>        WHEN 2:<br/>          = (sptr% = 0)<br/>      ENDCASE<br/>      ENDPROC</pre>"}, {"lang": "beeswax", "loc": 1, "block": "<pre>     instruction: _f\n\n     gstack:      UInt64[0]\u2022         (at the beginning of a program lstack is initialized to [0 0 0]</pre>"}, {"lang": "Bracmat", "loc": 32, "block": "<pre class=\"text highlighted_source\">( ( stack<br/>  =   (S=)<br/>      (push=.(!arg.!(its.S)):?(its.S))<br/>      ( pop<br/>      = top.!(its.S):(%?top.?(its.S))&amp;!top<br/>      )<br/>      (top=top.!(its.S):(%?top.?)&amp;!top)<br/>      (empty=.!(its.S):)<br/>  )<br/>&amp; new$stack:?Stack<br/>&amp; (Stack..push)$(2*a)<br/>&amp; (Stack..push)$pi<br/>&amp; (Stack..push)$<br/>&amp; (Stack..push)$\"to be or\"<br/>&amp; (Stack..push)$\"not to be\"<br/>&amp; out$((Stack..pop)$|\"Cannot pop (a)\")<br/>&amp; out$((Stack..top)$|\"Cannot pop (b)\")<br/>&amp; out$((Stack..pop)$|\"Cannot pop (c)\")<br/>&amp; out$((Stack..pop)$|\"Cannot pop (d)\")<br/>&amp; out$((Stack..pop)$|\"Cannot pop (e)\")<br/>&amp; out$((Stack..pop)$|\"Cannot pop (f)\")<br/>&amp; out$((Stack..pop)$|\"Cannot pop (g)\")<br/>&amp; out$((Stack..pop)$|\"Cannot pop (h)\")<br/>&amp;   out<br/>  $ ( str<br/>    $ ( \"Stack is \"<br/>        ((Stack..empty)$&amp;|not)<br/>        \" empty\"<br/>      )<br/>    )<br/>&amp; <br/>);</pre>"}, {"lang": "Brat", "loc": 6, "block": "<pre class=\"text highlighted_source\">stack = []<br/>stack.push 1<br/>stack.push 2<br/>stack.push 3<br/>\u00a0<br/>until { stack.empty? } { p stack.pop }</pre>"}, {"lang": "C", "loc": 62, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* to read expanded code, run through cpp | indent -st */</span><br/><span class=\"co2\">#define DECL_STACK_TYPE(type, name)\t\t\t\t\t\\<br/>typedef struct stk_##name##_t{type *buf; size_t alloc,len;}*stk_##name;\t\\<br/>stk_##name stk_##name##_create(size_t init_size) {\t\t\t\\<br/>\tstk_##name s; if (!init_size) init_size = 4;\t\t\t\\<br/>\ts = malloc(sizeof(struct stk_##name##_t));\t\t\t\\<br/>\tif (!s) return 0;\t\t\t\t\t\t\\<br/>\ts-&gt;buf = malloc(sizeof(type) * init_size);\t\t\t\\<br/>\tif (!s-&gt;buf) { free(s); return 0; }\t\t\t\t\\<br/>\ts-&gt;len = 0, s-&gt;alloc = init_size;\t\t\t\t\\<br/>\treturn s; }\t\t\t\t\t\t\t\\<br/>int stk_##name##_push(stk_##name s, type item) {\t\t\t\\<br/>\ttype *tmp;\t\t\t\t\t\t\t\\<br/>\tif (s-&gt;len &gt;= s-&gt;alloc) {\t\t\t\t\t\\<br/>\t\ttmp = realloc(s-&gt;buf, s-&gt;alloc*2*sizeof(type));\t\t\\<br/>\t\tif (!tmp) return -1; s-&gt;buf = tmp;\t\t\t\\<br/>\t\ts-&gt;alloc *= 2; }\t\t\t\t\t\\<br/>\ts-&gt;buf[s-&gt;len++] = item;\t\t\t\t\t\\<br/>\treturn s-&gt;len; }\t\t\t\t\t\t\\<br/>type stk_##name##_pop(stk_##name s) {\t\t\t\t\t\\<br/>\ttype tmp;\t\t\t\t\t\t\t\\<br/>\tif (!s-&gt;len) abort();\t\t\t\t\t\t\\<br/>\ttmp = s-&gt;buf[--s-&gt;len];\t\t\t\t\t\t\\<br/>\tif (s-&gt;len * 2 &lt;= s-&gt;alloc &amp;&amp; s-&gt;alloc &gt;= 8) {\t\t\t\\<br/>\t\ts-&gt;alloc /= 2;\t\t\t\t\t\t\\<br/>\t\ts-&gt;buf = realloc(s-&gt;buf, s-&gt;alloc * sizeof(type));}\t\\<br/>\treturn tmp; }\t\t\t\t\t\t\t\\<br/>void stk_##name##_delete(stk_##name s) {\t\t\t\t\\<br/>\tfree(s-&gt;buf); free(s); }</span><br/>\u00a0<br/><span class=\"co2\">#define stk_empty(s) (!(s)-&gt;len)</span><br/><span class=\"co2\">#define stk_size(s) ((s)-&gt;len)</span><br/>\u00a0<br/>DECL_STACK_TYPE<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tstk_int stk <span class=\"sy0\">=</span> stk_int_create<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"pushing: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%c\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstk_int_push<span class=\"br0\">(</span>stk<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>size now:\u00a0%d\"</span><span class=\"sy0\">,</span> stk_size<span class=\"br0\">(</span>stk<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>stack is%s empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> stk_empty<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>poppoing:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>stk_size<span class=\"br0\">(</span>stk<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%c\"</span><span class=\"sy0\">,</span> stk_int_pop<span class=\"br0\">(</span>stk<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>size now:\u00a0%d\"</span><span class=\"sy0\">,</span> stk_size<span class=\"br0\">(</span>stk<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>stack is%s empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> stk_empty<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" not\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* stk_int_pop(stk); &lt;-- will abort() */</span><br/>\tstk_int_delete<span class=\"br0\">(</span>stk<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"co1\">// Non-Generic Stack</span><br/><span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">Stack</span> stack <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">Stack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>stack<span class=\"sy0\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span> obj <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">bool</span> isEmpty <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">object</span> top <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Peek without Popping.</span><br/>top <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Generic Stack</span><br/><span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">Generic</span><span class=\"sy0\">.</span><span class=\"me1\">Stack</span><span class=\"sy0\">&lt;</span>Foo<span class=\"sy0\">&gt;</span> stack <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">Generic</span><span class=\"sy0\">.</span><span class=\"me1\">Stack</span><span class=\"sy0\">&lt;</span>Foo<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>stack<span class=\"sy0\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">bool</span> isEmpty <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>Foo top <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Peek without Popping.</span><br/>top <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 1, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;stack&gt;</span></pre>"}, {"lang": "Clojure", "loc": 20, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>deftype Stack <span class=\"br0\">[</span>elements<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def stack <span class=\"br0\">(</span>Stack <span class=\"br0\">(</span>ref <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn push-stack<br/>  <span class=\"st0\">\"Pushes an item to the top of the stack.\"</span><br/>  <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span>dosync <span class=\"br0\">(</span>alter <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">elements</span> stack<span class=\"br0\">)</span> conj x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn pop-stack<br/>  <span class=\"st0\">\"Pops an item from the top of the stack.\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>fst <span class=\"br0\">(</span>first <span class=\"br0\">(</span>deref <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">elements</span> stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>       <span class=\"br0\">(</span>dosync <span class=\"br0\">(</span>alter <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">elements</span> stack<span class=\"br0\">)</span> rest<span class=\"br0\">)</span><span class=\"br0\">)</span> fst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn top-stack<br/>  <span class=\"st0\">\"Shows what's on the top of the stack.\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>first <span class=\"br0\">(</span>deref <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">elements</span> stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn empty-stack?<br/>  <span class=\"st0\">\"Tests whether or not the stack is empty.\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>deref <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">elements</span> stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 3, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"nu0\">01</span>  stack<span class=\"sy0\">.</span><br/>         <span class=\"nu0\">05</span>  head <span class=\"kw3\">USAGE</span> <span class=\"kw3\">IS</span> <span class=\"kw3\">POINTER</span> <span class=\"kw3\">VALUE</span> <span class=\"kw3\">NULL</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 6, "block": "<pre class=\"coffeescript highlighted_source\">stack = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>stack.<span class=\"me1\">push</span> <span class=\"nu0\">1</span><br/>stack.<span class=\"me1\">push</span> <span class=\"nu0\">2</span><br/>console.<span class=\"me1\">log</span> stack<br/>console.<span class=\"me1\">log</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>console.<span class=\"me1\">log</span> stack</pre>"}, {"lang": "Common Lisp", "loc": 16, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defstruct stack<br/>  elements<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> stack-push <span class=\"br0\">(</span>element stack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>push element <span class=\"br0\">(</span>stack-elements stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> stack-pop <span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"br0\">(</span>deftype Stack <span class=\"br0\">[</span>elements<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> stack-empty <span class=\"br0\">(</span>stack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>stack-elements stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> stack-top <span class=\"br0\">(</span>stack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>first <span class=\"br0\">(</span>stack-elements stack<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> stack-peek <span class=\"br0\">(</span>stack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>stack-top stack<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 112, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Stacks;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\t<span class=\"coMULTI\">(* some pointers to records *)</span><br/>\tObject<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> ABSTRACT <span class=\"kw1\">RECORD</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tInteger <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">RECORD</span> <span class=\"br0\">(</span>Object<span class=\"br0\">)</span><br/>\t\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tPoint <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">RECORD</span> <span class=\"br0\">(</span>Object<span class=\"br0\">)</span><br/>\t\tx<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tNode <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIMITED <span class=\"kw1\">RECORD</span><br/>\t\tnext<span class=\"sy0\">-</span> <span class=\"sy0\">:</span> Node;<br/>\t\tdata<span class=\"sy0\">-:</span> ANYPTR;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* Stack *)</span><br/>\tStack<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">RECORD</span>  <br/>\t\ttop<span class=\"sy0\">-</span> <span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>dn<span class=\"sy0\">:</span> Object<span class=\"br0\">)</span> Show<span class=\"sy0\">*,</span> <span class=\"kw3\">NEW</span><span class=\"sy0\">,</span> ABSTRACT;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Integer<span class=\"br0\">)</span> Show<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Integer(\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i.<span class=\"me1\">i</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\");\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> Show;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> Show<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Point(\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Real</span><span class=\"br0\">(</span>p.<span class=\"me1\">x</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">Real</span><span class=\"br0\">(</span>p.<span class=\"me1\">y</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\");\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> Show;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">)</span> Init<span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\ts.<span class=\"me1\">top</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t<span class=\"kw1\">END</span> Init;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">)</span> Push<span class=\"sy0\">*</span><span class=\"br0\">(</span>data<span class=\"sy0\">:</span> ANYPTR<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tn<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span> <br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;n.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;n.<span class=\"me1\">data</span> <span class=\"sy0\">:=</span> data;<br/>\t\t<span class=\"kw1\">IF</span> s.<span class=\"me1\">top</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span><br/>\t\t\ts.<span class=\"me1\">top</span> <span class=\"sy0\">:=</span> n<br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\tn.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> s.<span class=\"me1\">top</span>;<br/>\t\t\ts.<span class=\"me1\">top</span> <span class=\"sy0\">:=</span> n<br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> Push;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">)</span> Pop<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> ANYPTR<span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tx<span class=\"sy0\">:</span> ANYPTR;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> s.<span class=\"me1\">top</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span><br/>\t\t\tx <span class=\"sy0\">:=</span> s.<span class=\"me1\">top</span>.<span class=\"me1\">data</span>;<br/>\t\t\ts.<span class=\"me1\">top</span> <span class=\"sy0\">:=</span> s.<span class=\"me1\">top</span>.<span class=\"me1\">next</span><br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\tx <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> x<br/>\t<span class=\"kw1\">END</span> Pop;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">)</span> Empty<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"sy0\">,</span> <span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> s.<span class=\"me1\">top</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><br/>\t<span class=\"kw1\">END</span> Empty;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> NewStack<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stack;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ts<span class=\"sy0\">:</span> Stack;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>;s.<span class=\"me1\">Init</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> s<br/>\t<span class=\"kw1\">END</span> NewStack;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> NewInteger<span class=\"sy0\">*</span><span class=\"br0\">(</span>data<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Integer;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> Integer;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;i.<span class=\"me1\">i</span> <span class=\"sy0\">:=</span> data;<br/>\t\t<span class=\"kw1\">RETURN</span> i<br/>\t<span class=\"kw1\">END</span> NewInteger;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> NewPoint<span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Point;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tp<span class=\"sy0\">:</span> Point;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;p.<span class=\"me1\">x</span> <span class=\"sy0\">:=</span> x;p.<span class=\"me1\">y</span> <span class=\"sy0\">:=</span> y;<br/>\t\t<span class=\"kw1\">RETURN</span> p<br/>\t<span class=\"kw1\">END</span> NewPoint;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> TestStack<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ts<span class=\"sy0\">:</span> Stack;<br/>\t<span class=\"kw1\">BEGIN</span> <br/>\t\ts <span class=\"sy0\">:=</span> NewStack<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t\ts.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewInteger<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\ts.<span class=\"me1\">Push</span><span class=\"br0\">(</span>NewPoint<span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"sy0\">,</span><span class=\"nu0\">3.4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\ts.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Object<span class=\"br0\">)</span>.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t\ts.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Object<span class=\"br0\">)</span>.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> TestStack;<br/>\u00a0<br/><span class=\"kw1\">END</span> Stacks.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 26, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">@property</span> <span class=\"kw4\">bool</span> empty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> items.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> push<span class=\"br0\">(</span>T top<span class=\"br0\">)</span> <span class=\"br0\">{</span> items <span class=\"sy0\">~=</span> top<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    T pop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Empty Stack.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> top <span class=\"sy0\">=</span> items.<span class=\"me1\">back</span><span class=\"sy0\">;</span><br/>        items.<span class=\"me1\">popBack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> top<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> s <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Stack<span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 12, "block": "<pre class=\"text highlighted_source\">local\u00a0:stack [] #lists used to be stacks in DV<br/>\u00a0<br/>push-to stack 1<br/>push-to stack 2<br/>push-to stack 3<br/>\u00a0<br/>!. pop-from stack #prints 3<br/>!. pop-from stack #prints 2<br/>!. pop-from stack #prints 1<br/>\u00a0<br/>if stack: #empty lists are falsy<br/>    error #this stack should be empty now!</pre>"}, {"lang": "Delphi", "loc": 24, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Stack<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Collections</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lStack<span class=\"sy1\">:</span> TStack&lt;Integer&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lStack <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStack&lt;Integer&gt;<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Assert</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Peek</span> <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 3 should be at the top of the stack</span><br/>\u00a0<br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 3</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 2</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 1</span><br/>    <span class=\"kw3\">Assert</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// should be empty</span><br/>  <span class=\"kw1\">finally</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 13, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> stack<span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/>stack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>stack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>stack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>stack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 3</span><br/>PrintLn<span class=\"br0\">(</span>stack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 2</span><br/>PrintLn<span class=\"br0\">(</span>stack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 1</span><br/>\u00a0<br/><span class=\"kw3\">Assert</span><span class=\"br0\">(</span>stack<span class=\"sy1\">.</span><span class=\"me1\">Length</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// assert empty</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 22, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> l <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [].diverge()</span><br/>\u00a0<br/><span class=\"sy0\">?</span> l.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"sy0\">?</span> l.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"sy0\">?</span> l<br/><span class=\"co1\"># value: [1, 2].diverge()</span><br/>\u00a0<br/><span class=\"sy0\">?</span> l.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 2</span><br/>\u00a0<br/><span class=\"sy0\">?</span> l.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">aboveZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: true</span><br/>\u00a0<br/><span class=\"sy0\">?</span> l.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 1</span><br/>\u00a0<br/><span class=\"sy0\">?</span> l.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 1</span><br/>\u00a0<br/><span class=\"sy0\">?</span> l.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">aboveZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: false</span></pre>"}, {"lang": "EchoLisp", "loc": 22, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">; build stack [0 1 ... 9 (top)] from a list</span><br/><span class=\"br0\">(</span>list-<span class=\"sy0\">&gt;</span>stack <span class=\"br0\">(</span>iota <span class=\"nu0\">10</span><span class=\"br0\">)</span> 'my-stack<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>stack-top 'my-stack<span class=\"br0\">)</span> \u2192 <span class=\"nu0\">9</span><br/><span class=\"br0\">(</span>pop 'my-stack<span class=\"br0\">)</span>  \u2192 <span class=\"nu0\">9</span><br/><span class=\"br0\">(</span>stack-top 'my-stack<span class=\"br0\">)</span> \u2192 <span class=\"nu0\">8</span><br/><span class=\"br0\">(</span>push 'my-stack '\ud83d\udc38<span class=\"br0\">)</span> <span class=\"co1\">; any kind of lisp object in the stack</span><br/><span class=\"br0\">(</span>stack-empty? 'my-stack<span class=\"br0\">)</span> \u2192 #f<br/><span class=\"br0\">(</span>stack-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> 'my-stack<span class=\"br0\">)</span> <span class=\"co1\">; convert stack to list</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> \ud83d\udc38<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>stack-swap 'my-stack<span class=\"br0\">)</span> <span class=\"co1\">; swaps two last items </span><br/>    \u2192 <span class=\"nu0\">8</span> <span class=\"co1\">; new top</span><br/><span class=\"br0\">(</span>stack-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> 'my-stack<span class=\"br0\">)</span><br/>     \u2192 <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> \ud83d\udc38 <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"co1\">; swapped</span><br/><span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>stack-empty? 'my-stack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>pop 'my-stack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; pop until empty</span><br/><span class=\"br0\">(</span>stack-empty? 'my-stack<span class=\"br0\">)</span>  \u2192 #t <span class=\"co1\">; true</span><br/>\u00a0<br/><span class=\"br0\">(</span>push 'my-stack <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>my-stack <span class=\"co1\">; a stack is not a variable, nor a symbol - cannot be evaluated</span><br/>   \u26d4 <span class=\"kw1\">error</span><span class=\"sy0\">:</span> #<span class=\"sy0\">|</span>user<span class=\"sy0\">|</span> <span class=\"sy0\">:</span> <span class=\"me1\">unbound</span> variable <span class=\"sy0\">:</span> <span class=\"me1\">my-stack</span><br/><span class=\"br0\">(</span>stack-top 'my-stack<span class=\"br0\">)</span>  \u2192 <span class=\"nu0\">7</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 45, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tSTACK_ON_ARRAY<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Implementation</span><br/>\u00a0<br/>\tempty<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> stack.<span class=\"me1\">is_empty</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tempty<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>stack.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tpush <span class=\"br0\">(</span>item<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+any&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ANY</span></a><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tstack.<span class=\"me1\">force</span> <span class=\"br0\">(</span>item, stack.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tpushed<span class=\"sy0\">:</span> stack <span class=\"br0\">[</span>stack.<span class=\"me1\">upper</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> item<br/>\t\t\tgrowth<span class=\"sy0\">:</span> stack.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> stack.<span class=\"me1\">count</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tpop<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+any&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ANY</span></a><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tnot_empty<span class=\"sy0\">:</span> <span class=\"kw2\">not</span> empty<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> stack.<span class=\"me1\">at</span> <span class=\"br0\">(</span>stack.<span class=\"me1\">upper</span><span class=\"br0\">)</span><br/>\t\t\tstack.<span class=\"me1\">remove_tail</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\treduction<span class=\"sy0\">:</span> stack.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> stack.<span class=\"me1\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tstack<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+any&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ANY</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> stack.<span class=\"me1\">make_empty</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    var stack\u00a0:= system'collections'Stack new.<br/>\u00a0<br/>    stack push:2.<br/>\u00a0<br/>    var isEmpty\u00a0:= stack length == 0.<br/>\u00a0<br/>    var item\u00a0:= stack peek. // Peek without Popping.<br/>\u00a0<br/>    item\u00a0:= stack pop.<br/>\u00a0</pre>"}, {"lang": "Elisa", "loc": 21, "block": "<pre class=\"text highlighted_source\"> component GenericStack ( Stack, Element );<br/> type Stack;<br/>      Stack (MaxSize = integer) -&gt; Stack;<br/>      Empty ( Stack )           -&gt; boolean;<br/>      Full ( Stack )            -&gt; boolean;<br/>      Push ( Stack, Element)    -&gt; nothing;<br/>      Pull ( Stack )            -&gt; Element;<br/>begin<br/>      Stack(MaxSize) =<br/>             Stack:[ MaxSize; index:=0; area=array (Element, MaxSize) ];<br/>      Empty( stack ) = (stack.index &lt;= 0);<br/>      Full ( stack ) = (stack.index &gt;= stack.MaxSize);<br/>      Push ( stack, element ) = <br/>                   [ exception (Full (stack), \"Stack Overflow\");<br/>                     stack.index:=stack.index + 1; <br/>                     stack.area[stack.index]:=element ];<br/>      Pull ( stack ) = <br/>                   [ exception (Empty (stack), \"Stack Underflow\");<br/>                     stack.index:=stack.index - 1; <br/>                     stack.area[stack.index + 1] ];<br/>end component GenericStack;</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">defmodule Stack do<br/>  def new, do: []<br/>\u00a0<br/>  def empty?([]), do: true<br/>  def empty?(_), do: false<br/>\u00a0<br/>  def pop([h|t]), do: {h,t}<br/>\u00a0<br/>  def push(h,t), do: [h|t]<br/>\u00a0<br/>  def top([h|_]), do: h<br/>end</pre>"}, {"lang": "Erlang", "loc": 13, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>empty<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> new<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> pop<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> push<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> top<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">empty</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">empty</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pop</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">push</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">H</span>|T<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">top</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|_<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">H</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> Stack<span class=\"sy0\">&lt;</span><span class=\"st0\">'a&gt; //'</span><span class=\"co1\">//(workaround for syntax highlighting problem)</span><br/>  <span class=\"br0\">(</span>?items<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> items <span class=\"sy0\">=</span> defaultArg items <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">Push</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Stack<span class=\"br0\">(</span>A::items<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> items <span class=\"kw1\">with</span><br/>      | x::xr <span class=\"sy0\">-&gt;</span>  <span class=\"br0\">(</span>x, Stack<span class=\"br0\">(</span>xr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"Stack is empty.\"</span><br/>\u00a0<br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">IsEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> items <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">// example usage</span><br/><span class=\"kw1\">let</span> anEmptyStack <span class=\"sy0\">=</span> Stack<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> stack2 <span class=\"sy0\">=</span> anEmptyStack.<span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>stack2.<span class=\"me1\">IsEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span>x, stack3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> stack2.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"%d\"</span> x<br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>stack3.<span class=\"me1\">IsEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 12, "block": "<pre class=\"text highlighted_source\"> V{ 1 2 3 } {<br/> [ 6 swap push ]<br/> [ \"hi\" swap push ]<br/> [ \"Vector is now: \" write . ]<br/> [ \"Let's pop it: \" write pop . ]<br/> [ \"Vector is now: \" write . ]<br/> [ \"Top is: \" write last . ] } cleave<br/>\u00a0<br/> Vector is now: V{ 1 2 3 6 \"hi\" }<br/> Let's pop it: \"hi\"<br/> Vector is now: V{ 1 2 3 6 }<br/> Top is: 6</pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">: stack ( size -- )<br/>  create here cell+ ,  cells allot\u00a0;<br/>\u00a0<br/>: push ( n st -- ) tuck @\u00a0!  cell swap +!\u00a0;<br/>: pop ( st -- n ) -cell over +!  @ @\u00a0;<br/>: empty? ( st --\u00a0? ) dup @ - cell+ 0=\u00a0;<br/>\u00a0<br/>10 stack st<br/>\u00a0<br/>1 st push<br/>2 st push<br/>3 st push<br/>st empty? .  \\ 0 (false)<br/>st pop . st pop . st pop .  \\ 3 2 1<br/>st empty? .  \\ -1 (true)</pre>"}, {"lang": "Fortran", "loc": 84, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> stack<br/>\u00a0<br/>  <span class=\"kw3\">public</span><br/>\u00a0<br/>  <span class=\"co1\">! Define the data-structure to hold the data</span><br/>  <span class=\"kw3\">type</span> stack_var<br/>     <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"kw3\">data</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>     <span class=\"kw3\">integer</span>              <span class=\"sy0\">::</span> <span class=\"kw4\">size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> stack_var<br/>\u00a0<br/>  <span class=\"co1\">! Set the size of allocated memory blocks</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span>, <span class=\"kw3\">private</span> <span class=\"sy0\">::</span> <span class=\"me2\">block_size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"co1\">! Push ----------------------------------------------------------------------</span><br/>  <span class=\"kw1\">subroutine</span> push<span class=\"br0\">(</span>s, e<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>stack_var<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>            <span class=\"sy0\">::</span> <span class=\"me2\">e</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">wk</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       <span class=\"co1\">! Allocate space if not yet done</span><br/>       <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">(</span>block_size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">==</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       <span class=\"co1\">! Grow the allocated space</span><br/>       <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>wk<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>block_size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       wk<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><br/>       <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>wk,s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"co1\">! Store the data in the stack</span><br/>    s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> e<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> push<br/>\u00a0<br/>  <span class=\"co1\">! Pop -----------------------------------------------------------------------</span><br/>  <span class=\"kw1\">function</span> pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">pop</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>stack_var<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       pop <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    pop <span class=\"sy0\">=</span> s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span><span class=\"br0\">)</span><br/>    s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> pop<br/>\u00a0<br/>  <span class=\"co1\">! Peek ----------------------------------------------------------------------</span><br/>  <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> peek<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>stack_var<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       peek <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    peek <span class=\"sy0\">=</span> s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> peek<br/>\u00a0<br/>  <span class=\"co1\">! Empty ---------------------------------------------------------------------</span><br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> empty<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>stack_var<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    empty <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw4\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>s<span class=\"sy0\">%</span><span class=\"kw3\">data</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> empty<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> stack<br/>\u00a0<br/><span class=\"kw1\">program</span> tstack<br/>  <span class=\"kw3\">use</span> stack<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>stack_var<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>  <span class=\"kw3\">integer</span>         <span class=\"sy0\">::</span> <span class=\"me2\">v</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> push<span class=\"br0\">(</span>s,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> push<span class=\"br0\">(</span>s,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> push<span class=\"br0\">(</span>s,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> push<span class=\"br0\">(</span>s,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>empty<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>     v <span class=\"sy0\">=</span> pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>     write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(a,i0)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Popped value off stack = '</span>,v<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> tstack</pre>"}, {"lang": "FreeBASIC", "loc": 85, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' stack_rosetta.bi</span><br/><span class=\"co1\">' simple generic Stack type</span><br/>\u00a0<br/><span class=\"co2\">#Define Stack(T) Stack_##T</span><br/>\u00a0<br/><span class=\"co2\">#Macro Declare_Stack(T)</span><br/><span class=\"kw1\">Type</span> Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span><br/> <span class=\"kw1\">Public</span>:<br/>    <span class=\"kw1\">Declare</span> Constructor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Declare</span> Destructor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Declare</span> Property capacity <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw1\">Declare</span> Property count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <br/>    <span class=\"kw1\">Declare</span> Property empty <span class=\"kw1\">As</span> Boolean<br/>    <span class=\"kw1\">Declare</span> Property top <span class=\"kw1\">As</span> T <br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> pop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> T   <br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Sub</span> push<span class=\"br0\">(</span>item <span class=\"kw1\">As</span> T<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Private</span>:<br/>    a<span class=\"br0\">(</span>any<span class=\"br0\">)</span> <span class=\"kw1\">As</span> T <br/>    count_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span>  <br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> resize<span class=\"br0\">(</span>size <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>    <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/>Constructor Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Redim</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">'' create a default T instance for various purposes </span><br/><span class=\"kw1\">End</span> Constructor<br/>\u00a0<br/>Destructor Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Erase</span> a<br/><span class=\"kw1\">End</span> Destructor<br/>\u00a0<br/>Property Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">capacity</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> Property<br/>\u00a0<br/>Property Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> count_<br/><span class=\"kw1\">End</span> Property<br/>\u00a0<br/>Property Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">empty</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Return</span> count_ = <span class=\"nu0\">0</span><br/><span class=\"kw1\">End</span> Property<br/>\u00a0<br/>Property Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">top</span> <span class=\"kw1\">As</span> T<br/>  <span class=\"kw1\">If</span> count_ &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Return</span> a<span class=\"br0\">(</span>count_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Error: Attempted to access 'top' element of an empty stack\"</span><br/>  <span class=\"kw1\">Return</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"co1\">'' return default element </span><br/><span class=\"kw1\">End</span> Property<br/>\u00a0<br/><span class=\"kw1\">Function</span> Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> T<br/>  <span class=\"kw1\">If</span> count_ &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Dim</span> value <span class=\"kw1\">As</span> T = a<span class=\"br0\">(</span>count_<span class=\"br0\">)</span><br/>    a<span class=\"br0\">(</span>count_<span class=\"br0\">)</span> = a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"co1\">'' zero element to be removed</span><br/>    count_ -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Return</span> value<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Error: Attempted to remove 'top' element of an empty stack\"</span><br/>  <span class=\"kw1\">Return</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"co1\">'' return default element</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>item <span class=\"kw1\">As</span> T<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> size <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  count_ += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> count_ &gt;  size <span class=\"kw1\">Then</span><br/>    size = resize<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> size<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  a<span class=\"br0\">(</span>count_<span class=\"br0\">)</span> = item   <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span>.<span class=\"me1\">resize</span><span class=\"br0\">(</span>size <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> size = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    size = <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">ElseIf</span> size &lt;= <span class=\"nu0\">32</span> <span class=\"kw1\">Then</span><br/>    size  = <span class=\"nu0\">2</span> * size<br/>  <span class=\"kw1\">Else</span><br/>    size += <span class=\"nu0\">32</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Return</span> size<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co2\">#EndMacro</span></pre>"}, {"lang": "Free Pascal", "loc": 23, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Stack<span class=\"sy1\">;</span><br/> <span class=\"co2\">{$IFDEF FPC}{$MODE DELPHI}{$IFDEF WINDOWS}{$APPTYPE CONSOLE}{$ENDIF}{$ENDIF}</span> <br/> <span class=\"co2\">{$ASSERTIONS ON}</span> <br/><span class=\"kw1\">uses</span> Generics<span class=\"sy1\">.</span><span class=\"me1\">Collections</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lStack<span class=\"sy1\">:</span> TStack&lt;Integer&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lStack <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStack&lt;Integer&gt;<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Assert<span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Peek</span> <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 3 should be at the top of the stack</span><br/>\u00a0<br/>    <span class=\"kw3\">Write</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>   <span class=\"co1\">// 3</span><br/>    <span class=\"kw3\">Write</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>   <span class=\"co1\">// 2</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Pop</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// 1</span><br/>    Assert<span class=\"br0\">(</span>lStack<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"st0\">'Stack is not empty'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// should be empty</span><br/>  <span class=\"kw1\">finally</span><br/>    lStack<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Go", "loc": 1, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">var</span> intStack <span class=\"sy1\">[]</span><span class=\"kw4\">int</span></pre>"}, {"lang": "Groovy", "loc": 37, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stack <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<span class=\"me1\">empty</span><br/>\u00a0<br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">55</span><span class=\"br0\">)</span><br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"st0\">'kittens'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'kittens'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> stack.<span class=\"me1\">empty</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> stack<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"kittens\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> stack<br/>\u00a0<br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> stack<br/>\u00a0<br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">420</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> stack<br/>\u00a0<br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> / stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> stack<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> stack.<span class=\"me1\">empty</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> stack.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=NoSuchElementException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">NoSuchElementException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> e.<span class=\"me1\">message</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">type</span> Stack a <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>\u00a0<br/>create <span class=\"sy0\">::</span> Stack a<br/>create <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>push <span class=\"sy0\">::</span> a <span class=\"sy0\">-&gt;</span> Stack a <span class=\"sy0\">-&gt;</span> Stack a<br/>push <span class=\"sy0\">=</span> <span class=\"br0\">(</span>:<span class=\"br0\">)</span><br/>\u00a0<br/>pop <span class=\"sy0\">::</span> Stack a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> Stack a<span class=\"br0\">)</span><br/>pop <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"Stack empty\"</span><br/>pop <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>xs<span class=\"br0\">)</span><br/>\u00a0<br/>empty <span class=\"sy0\">::</span> Stack a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>empty <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a><br/>\u00a0<br/>peek <span class=\"sy0\">::</span> Stack a <span class=\"sy0\">-&gt;</span> a<br/>peek <span class=\"br0\">[</span><span class=\"br0\">]</span>    <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"Stack empty\"</span><br/>peek <span class=\"br0\">(</span>x:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x</pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>stack <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>                                     <span class=\"co1\"># new empty stack</span><br/><span class=\"kw4\">push</span><span class=\"br0\">(</span>stack<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                                   <span class=\"co1\"># add item</span><br/><span class=\"kw4\">push</span><span class=\"br0\">(</span>stack<span class=\"sy1\">,</span><span class=\"st0\">\"hello\"</span><span class=\"sy1\">,</span><span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>          <span class=\"co1\"># add more items of mixed types in order left to right</span><br/>y <span class=\"sy1\">:=</span> top<span class=\"br0\">(</span>stack<span class=\"br0\">)</span>                                 <span class=\"co1\"># peek</span><br/>x <span class=\"sy1\">:=</span> <span class=\"kw4\">pop</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span>                                 <span class=\"co1\"># remove item</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The stack is \"</span><span class=\"sy1\">,</span><span class=\"kw1\">if</span> isempty<span class=\"br0\">(</span>stack<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"empty\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"not empty\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> isempty<span class=\"br0\">(</span>x<span class=\"br0\">)</span>           <span class=\"co1\">#: test if a datum is empty, return the datum or fail (task requirement)</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">*</span>x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> x        <span class=\"co1\">#  in practice just write *x = 0 or *x ~= 0 for is/isn't empty</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> top<span class=\"br0\">(</span>x<span class=\"br0\">)</span>               <span class=\"co1\">#: return top element w/o changing stack</span><br/><span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>                    <span class=\"co1\">#  in practice, just use x[1]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 21, "block": "<pre class=\"io highlighted_source\">Node\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span> <span class=\"kw2\">do</span><span class=\"br0\">(</span><br/>    next\u00a0:= <span class=\"kw3\">nil</span><br/>    obj\u00a0:= <span class=\"kw3\">nil</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>Stack\u00a0:= <span class=\"kw3\">Object</span> <span class=\"kw2\">clone</span> <span class=\"kw2\">do</span><span class=\"br0\">(</span><br/>    node\u00a0:= <span class=\"kw3\">nil</span><br/>\u00a0<br/>    pop\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span><br/>        obj\u00a0:= node obj<br/>        node = node next<br/>        obj<br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    push\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span>obj,<br/>        nn\u00a0:= Node <span class=\"kw2\">clone</span><br/>        nn obj = obj<br/>        nn next = <span class=\"kw2\">self</span> node<br/>        <span class=\"kw2\">self</span> node = nn<br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Ioke", "loc": 6, "block": "<pre class=\"text highlighted_source\">Stack = Origin mimic do(<br/>  initialize = method(@elements = [])<br/>  pop = method(@elements pop!)<br/>  empty = method(@elements empty?)<br/>  push = method(element, @elements push!(element))<br/>)</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">stack=: <span class=\"st_h\">''</span><br/>push=: monad def <span class=\"st_h\">'0$stack=:stack,y'</span><br/>pop=: monad def <span class=\"st_h\">'r[ stack=:}:stack[ r=.{:stack'</span><br/>empty=: monad def <span class=\"st_h\">'0=#stack'</span></pre>"}, {"lang": "Java", "loc": 21, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Stack</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StackTest <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> Stack<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> stack <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> <span class=\"st0\">\"New stack empty? \"</span> <span class=\"sy0\">+</span> stack.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"st0\">\"There can be only one\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> <span class=\"st0\">\"Pushed stack empty? \"</span> <span class=\"sy0\">+</span> stack.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> <span class=\"st0\">\"Popped single entry: \"</span> <span class=\"sy0\">+</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"st0\">\"First\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span> <span class=\"st0\">\"Second\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> <span class=\"st0\">\"Popped entry should be second: \"</span> <span class=\"sy0\">+</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Popping an empty stack will throw...</span><br/>        stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> stack <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// 3</span><br/>print<span class=\"br0\">(</span>stack.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// 2, stack empty if 0</span></pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">stack = Int[]           # []<br/>@show push!(stack, 1)   # [1]<br/>@show push!(stack, 2)   # [1, 2]<br/>@show push!(stack, 3)   # [1, 2, 3]<br/>@show pop!(stack)       # 3<br/>@show length(stack)     # 2<br/>@show empty!(stack)     # []<br/>@show isempty(stack)    # true</pre>"}, {"lang": "K", "loc": 26, "block": "<pre class=\"text highlighted_source\">stack:()<br/>push:{stack::x,stack}<br/>pop:{r:*stack;stack::1_ stack;r}<br/>empty:{0=#stack}<br/>\u00a0<br/>/example:<br/>stack:()<br/>  push 3<br/>  stack<br/>,3<br/>  push 5<br/>  stack<br/>5 3<br/>  pop[]<br/>5<br/>  stack<br/>,3<br/>  empty[]<br/>0<br/>  pop[]<br/>3<br/>  stack<br/>!0<br/>  empty[]<br/>1<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Stack<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> data.<span class=\"me1\">size</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> empty get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> size <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    fun push<span class=\"br0\">(</span>element<span class=\"sy0\">:</span> E<span class=\"br0\">)</span> <span class=\"sy0\">=</span> data.<span class=\"me1\">add</span><span class=\"br0\">(</span>element<span class=\"br0\">)</span><br/>\u00a0<br/>    fun pop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> E <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>empty<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> RuntimeException<span class=\"br0\">(</span><span class=\"st0\">\"Can't pop elements from an empty stack\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> data.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>data.<span class=\"me1\">lastIndex</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> top<span class=\"sy0\">:</span> E<br/>        get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>empty<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> RuntimeException<span class=\"br0\">(</span><span class=\"st0\">\"Empty stack can't have a top element\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> data.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    fun clear<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> data.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> data.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> Stack<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> s.<span class=\"me1\">push</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Size of stack = ${s.size}\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Popping: \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"${s.pop()} \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Remaining on stack: $s\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Top element is now ${s.top}\"</span><span class=\"br0\">)</span><br/>    s.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"After clearing, stack is ${if(s.empty) \"</span>empty<span class=\"st0\">\" else \"</span>not empty<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> Exception<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>e.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "lang5", "loc": 14, "block": "<pre class=\"text highlighted_source\">: cr  \"\\n\" .\u00a0;<br/>: empty?  dup execute length if 0 else -1 then swap drop\u00a0;<br/>: pop  dup execute length 1 - extract swap drop\u00a0;<br/>: push  dup execute rot append over\u00a0;<br/>: s. stack execute .\u00a0;<br/>\u00a0<br/>[] '_ set<br/>: stack '_\u00a0;<br/>stack                     # local variable<br/>    1 swap push set<br/>    2 swap push set s. cr # [    1     2  ]<br/>    pop .           s. cr # 2     [    1  ]<br/>    pop drop<br/>    empty? .              # -1</pre>"}, {"lang": "Lasso", "loc": 10, "block": "<pre class=\"text highlighted_source\">local(a) = array<br/>\u00a0<br/>#a-&gt;push('a') <br/>#a-&gt;push('b') <br/>#a-&gt;push('c')<br/>\u00a0<br/>#a-&gt;pop // c<br/>#a-&gt;pop // b<br/>#a-&gt;pop // a<br/>#a-&gt;pop // null</pre>"}, {"lang": "Liberty BASIC", "loc": 40, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">global</span> stack$<br/>stack$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">randomize</span> .51<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0.5</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span>  <span class=\"st0\">\"pop =&gt; \"</span>;pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        j<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        s$ <span class=\"sy0\">=</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"push \"</span>;s$<br/>        <span class=\"kw1\">call</span> push s$<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Clean-up\"</span><br/><span class=\"kw1\">do</span><br/>    <span class=\"kw1\">print</span>  <span class=\"st0\">\"pop =&gt; \"</span>;pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span>empty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Stack is empty\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">'------------------------------------</span><br/><span class=\"kw1\">sub</span> push s$<br/>    stack$<span class=\"sy0\">=</span>s$<span class=\"sy0\">+</span><span class=\"st0\">\"|\"</span><span class=\"sy0\">+</span>stack$    <span class=\"co1\">'stack</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> stack$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> pop$<span class=\"sy0\">=</span><span class=\"st0\">\"*EMPTY*\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    pop$<span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>    stack$<span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> empty<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>     empty <span class=\"sy0\">=</span><span class=\"br0\">(</span>stack$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 23, "block": "<pre class=\"text highlighted_source\">-- parent script \"Stack\"<br/>\u00a0<br/>property _tos<br/>\u00a0<br/>on push (me, data)<br/>  me._tos = [#data:data, #next:me._tos]<br/>end<br/>\u00a0<br/>on pop (me)<br/>  if voidP(me._tos) then return VOID<br/>  data = me._tos.data<br/>  me._tos = me._tos.next<br/>  return data<br/>end<br/>\u00a0<br/>on peek (me)<br/>  if voidP(me._tos) then return VOID<br/>  return me._tos.data<br/>end<br/>\u00a0<br/>on empty (me)<br/>  return voidP(me.peek())<br/>end</pre>"}, {"lang": "Logo", "loc": 6, "block": "<pre class=\"text highlighted_source\">make \"stack []<br/>push \"stack 1<br/>push \"stack 2<br/>push \"stack 3<br/>print pop \"stack  \u00a0; 3<br/>print empty?\u00a0:stack\u00a0; false</pre>"}, {"lang": "Logtalk", "loc": 14, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(stack).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(push<span class=\"sy1\">/</span><span class=\"nu0\">3</span>).<br/>    push(<span class=\"re0\">Element</span>, <span class=\"re0\">Stack</span>, [<span class=\"re0\">Element</span>| <span class=\"re0\">Stack</span>]).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(pop<span class=\"sy1\">/</span><span class=\"nu0\">3</span>).<br/>    pop([<span class=\"re0\">Top</span>| <span class=\"re0\">Stack</span>], <span class=\"re0\">Top</span>, <span class=\"re0\">Stack</span>).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(empty<span class=\"sy1\">/</span><span class=\"nu0\">1</span>)<br/>    empty([]).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\">stack <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>stack<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">--&gt; 3</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      a=Stack<br/>      Stack a {<br/>            Push 100, 200, 300<br/>      }<br/>      Print StackItem(a, 1)=300<br/>      Stack a {<br/>            Print StackItem(1)=300<br/>            While not empty {<br/>                  Read N<br/>                  Print N<br/>            }<br/>      }<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 13, "block": "<pre class=\"text highlighted_source\">with(stack): # load the package, to allow use of short command names<br/>\u00a0<br/>s\u00a0:= stack:-new(a, b):<br/>\u00a0<br/>push(c, s):<br/>\u00a0<br/># The following statements terminate with a semicolon and print output.<br/>top(s);<br/>pop(s);<br/>pop(s);<br/>empty(s);<br/>pop(s);<br/>empty(s);</pre>"}, {"lang": "Mathematica", "loc": 14, "block": "<pre class=\"text highlighted_source\">EmptyQ[a_]\u00a0:= If[Length[a] == 0, True, False]<br/>SetAttributes[Push, HoldAll];[a_, elem_]\u00a0:= AppendTo[a, elem]<br/>SetAttributes[Pop, HoldAllComplete]; <br/>Pop[a_]\u00a0:= If[EmptyQ[a], False, b = Last[a]; Set[a, Most[a]]; b]<br/>Peek[a_]\u00a0:= If[EmptyQ[a], False, Last[a]]<br/>\u00a0<br/>Example use:<br/>stack = {};Push[stack, 1]; Push[stack, 2]; Push[stack, 3]; Push[stack, 4];<br/>Peek[stack]<br/>-&gt;4<br/>Pop[stack] <br/>-&gt;4<br/>Peek[stack]<br/>-&gt;3</pre>"}, {"lang": "MATLAB / Octave", "loc": 13, "block": "<pre class=\"matlab highlighted_source\">mystack = <span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"co1\">% push </span><br/>mystack<span class=\"br0\">{</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> = x; <br/>\u00a0<br/><span class=\"co1\">%pop</span><br/>x = mystack<span class=\"br0\">{</span><span class=\"kw1\">end</span><span class=\"br0\">}</span>;  mystack<span class=\"br0\">{</span><span class=\"kw1\">end</span><span class=\"br0\">}</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>\u00a0<br/><span class=\"co1\">%peek,top</span><br/>x = mystack<span class=\"br0\">{</span><span class=\"kw1\">end</span><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"co1\">% empty </span><br/>isempty<span class=\"br0\">(</span>mystack<span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 11, "block": "<pre class=\"text highlighted_source\">/* lists can be used as stacks; Maxima provides pop and push */<br/>\u00a0<br/>load(basic)$<br/>\u00a0<br/>a: []$<br/>push(25, a)$<br/>push(7, a)$<br/>pop(a);<br/>\u00a0<br/>emptyp(a);<br/>length(a);</pre>"}, {"lang": "Mercury", "loc": 33, "block": "<pre class=\"text highlighted_source\">:- module sstack.<br/>\u00a0<br/>:- interface.<br/>\u00a0<br/>% We're going to call the type sstack (simple stack) because we don't want to get it<br/>% accidentally confused with the official stack module in the standard library.<br/>:- type sstack(T).<br/>\u00a0<br/>:- func sstack.new = sstack(T).<br/>:- pred sstack.is_empty(sstack(T)::in) is semidet.<br/>:- func sstack.push(sstack(T), T) = sstack(T).<br/>:- pred sstack.pop(T::out, sstack(T)::in, sstack(T)::out) is semidet.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module list.<br/>\u00a0<br/>:- type sstack(T)<br/>   ---&gt;  sstack(list(T)).<br/>\u00a0<br/>sstack.new = sstack([]).<br/>\u00a0<br/>sstack.is_empty(sstack([])).<br/>\u00a0<br/>sstack.push(Stack0, Elem) = Stack1\u00a0:-<br/>   Stack0 = sstack(Elems),<br/>   Stack1 = sstack([Elem | Elems]).<br/>\u00a0<br/>sstack.pop(Elem,\u00a0!Stack)\u00a0:-<br/>  \u00a0!.Stack = sstack([Elem | Elems]),<br/>  \u00a0!:Stack = sstack(Elems).<br/>\u00a0<br/>:- end_module sstack.</pre>"}, {"lang": "Nemerle", "loc": 34, "block": "<pre class=\"text highlighted_source\">public class Stack[T]<br/>{<br/>    private stack\u00a0: list[T];<br/>\u00a0<br/>    public this()<br/>    {<br/>        stack = [];<br/>    }<br/>\u00a0<br/>    public this(init\u00a0: list[T])<br/>    {<br/>        stack = init;<br/>    }<br/>\u00a0<br/>    public Push(item\u00a0: T)\u00a0: Stack[T]<br/>    {<br/>        Stack(item::stack)<br/>    }<br/>\u00a0<br/>    public Pop()\u00a0: T * Stack[T]<br/>    {<br/>        (stack.Head, Stack(stack.Tail))<br/>    }<br/>\u00a0<br/>    public Peek()\u00a0: T<br/>    {<br/>        stack.Head<br/>    }<br/>\u00a0<br/>    public IsEmpty()\u00a0: bool<br/>    {<br/>        stack.Length == 0<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 42, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx ************************************************************<br/>* 13.08.2013 Walter Pachl  translated from REXX version 2<br/>**********************************************************************/</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>stk = create_stk<br/>\u00a0<br/><span class=\"kw1\">say</span> push<span class=\"br0\">(</span>stk,<span class=\"nu0\">123</span><span class=\"br0\">)</span> <span class=\"st0\">'from push'</span><br/><span class=\"kw1\">say</span> empty<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <br/><span class=\"kw1\">say</span> peek<span class=\"br0\">(</span>stk<span class=\"br0\">)</span>     <span class=\"st0\">'from peek'</span><br/><span class=\"kw1\">say</span> pull<span class=\"br0\">(</span>stk<span class=\"br0\">)</span>     <span class=\"st0\">'from pull'</span><br/><span class=\"kw1\">say</span> empty<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <br/><span class=\"kw1\">Say</span> pull<span class=\"br0\">(</span>stk<span class=\"br0\">)</span>     <span class=\"st0\">'from pull'</span><br/>\u00a0<br/>method create_stk <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>  stk = <span class=\"st0\">''</span><br/>  stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">return</span> stk<br/>\u00a0<br/>method push<span class=\"br0\">(</span>stk,v<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>  stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>+<span class=\"nu0\">1</span><br/>  stk<span class=\"br0\">[</span>stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>=v<br/>  <span class=\"kw1\">Return</span> v<br/>\u00a0<br/>method peek<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>  x=stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">If</span> x=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">'stk is empty'</span><br/>  <span class=\"kw3\">Else</span><br/>    <span class=\"kw1\">Return</span> stk<span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>\u00a0<br/>method pull<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>  x=stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">If</span> x=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Return</span> <span class=\"st0\">'stk is empty'</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>-<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Return</span> stk<span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>    <span class=\"kw3\">End</span><br/>\u00a0<br/>method empty<span class=\"br0\">(</span>stk<span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">Return</span> stk<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=<span class=\"nu0\">0</span></pre>"}, {"lang": "Nim", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import math<br/>\u00a0<br/>type<br/>  EStackEmpty = object of E_Base<br/>\u00a0<br/>  TStack* [A] = object <br/>    data: seq[A]<br/>    count: int<br/>\u00a0<br/>proc initStack*[A](initialSize = 32): TStack[A] =<br/>  assert isPowerOfTwo(initialSize)<br/>  result.count = 0<br/>  newSeq(result.data,initialSize)<br/>\u00a0<br/>proc cap*[A] (s: TStack[A]): int =<br/>  result = s.data.len<br/>\u00a0<br/>proc len*[A](stack: TStack[A]): int =<br/>  result = stack.count<br/>\u00a0<br/>proc push*[A](s: var TStack[A], item: A) = <br/>  if s.count == s.data.len: <br/>    # not enough room, make container bigger<br/>    var d: Seq[A]<br/>    newSeq(d,s.len * 2)<br/>    for i in 0 .. s.data.len - 1:<br/>      shallowCopy(d[i],s.data[i])<br/>    shallowCopy(s.data,d)<br/>  s.data[s.count] = item<br/>  inc(s.count)<br/>\u00a0<br/>proc pop*[A](s: var TStack[A]): A {.raises: [EStackEmpty].}= <br/>  if s.count == 0:<br/>    raise newException(EStackEmpty,\"the stack is empty\")<br/>  dec(s.count)<br/>  result = s.data[s.count]<br/>\u00a0<br/>proc top*[A](s: TStack[A]): A = <br/>  result = s.data[s.count - 1]<br/>\u00a0<br/>proc isEmpty*[A](s: var TStack[A]): bool = <br/>  return s.count == 0<br/>\u00a0<br/>#Tests<br/>when isMainModule:<br/>  var stk: TStack[char] = initStack[char](4)<br/>  stk.push('a')<br/>  stk.push('b')<br/>  stk.push('c')<br/>  stk.push('d')<br/>\u00a0<br/>  assert(stk.count == 4)<br/>  assert(stk.data.len == 4)<br/>  stk.push('e')<br/>  assert(stk.cap == 8)<br/>  assert(stk.top == 'e')<br/>\u00a0<br/>\u00a0<br/>  discard stk.pop<br/>  discard stk.pop<br/>  discard stk.pop<br/>  discard stk.pop<br/>  assert(stk.isEmpty == false)<br/>  discard stk.pop<br/>  assert(stk.isEmpty == true)<br/>\u00a0<br/>  try:<br/>    discard stk.pop<br/>  except:<br/>    let <br/>      e = getCurrentException()<br/>      msg = getCurrentExceptionMsg()<br/>    echo \"Exception: [[\", repr(e), \"]] msg: \", msg<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 68, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Stacks;<br/><span class=\"kw1\">IMPORT</span> <br/>  Object<span class=\"sy0\">,</span><br/>  Object<span class=\"sy0\">:</span>Boxed<span class=\"sy0\">,</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  Pool<span class=\"br0\">(</span>E<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> E;<br/>  Stack<span class=\"sy0\">*</span><span class=\"br0\">(</span>E<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> StackDesc<span class=\"br0\">(</span>E<span class=\"br0\">)</span>;<br/>  StackDesc<span class=\"sy0\">*</span><span class=\"br0\">(</span>E<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>    pool<span class=\"sy0\">:</span> Pool<span class=\"br0\">(</span>E<span class=\"br0\">)</span>;<br/>    cap<span class=\"sy0\">-,</span>top<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> INIT<span class=\"sy0\">*</span><span class=\"br0\">(</span>cap<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>s.<span class=\"me1\">pool</span><span class=\"sy0\">,</span>cap<span class=\"br0\">)</span>;s.<span class=\"me1\">cap</span> <span class=\"sy0\">:=</span> cap;s.<span class=\"me1\">top</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">END</span> INIT;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> Top<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> E;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> s.<span class=\"me1\">pool</span><span class=\"br0\">[</span>s.<span class=\"me1\">top</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">END</span> Top;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> Push<span class=\"sy0\">*</span><span class=\"br0\">(</span>e<span class=\"sy0\">:</span> E<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>s.<span class=\"me1\">top</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>s.<span class=\"me1\">top</span> &lt; s.<span class=\"me1\">cap</span><span class=\"br0\">)</span>;<br/>    s.<span class=\"me1\">pool</span><span class=\"br0\">[</span>s.<span class=\"me1\">top</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> e;<br/>  <span class=\"kw1\">END</span> Push;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> Pop<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> E;<br/>  <span class=\"kw1\">VAR</span><br/>    resp<span class=\"sy0\">:</span> E;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>s.<span class=\"me1\">top</span> &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>    resp <span class=\"sy0\">:=</span> s.<span class=\"me1\">pool</span><span class=\"br0\">[</span>s.<span class=\"me1\">top</span><span class=\"br0\">]</span>;<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>s.<span class=\"me1\">top</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">RETURN</span> resp<br/>  <span class=\"kw1\">END</span> Pop;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> IsEmpty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> s.<span class=\"me1\">top</span> &lt; <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">END</span> IsEmpty;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> Size<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> s.<span class=\"me1\">top</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">END</span> Size;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Test;<br/>  <span class=\"kw1\">VAR</span><br/>    s<span class=\"sy0\">:</span> Stack<span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Stack<span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/>    s.<span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    s.<span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Boxed.<span class=\"me1\">LongInt</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"size: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>s.<span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"pop: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>s.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"top: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>s.<span class=\"me1\">Top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"size: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>s.<span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span> Test;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span> <br/>  Test<br/><span class=\"kw1\">END</span> Stacks.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 5, "block": "<pre class=\"objeck highlighted_source\">stack <span class=\"sy0\">:=</span> IntStack<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>stack<span class=\"sy0\">-&gt;</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>stack<span class=\"sy0\">-&gt;</span><span class=\"me1\">Push</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">(</span>stack<span class=\"sy0\">-&gt;</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> stack<span class=\"sy0\">-&gt;</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>stack<span class=\"sy0\">-&gt;</span><span class=\"me1\">IsEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Objective-C", "loc": 8, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>stack <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> array<span class=\"br0\">]</span>; <span class=\"co2\">// creating</span><br/>\u00a0<br/><span class=\"br0\">[</span>stack addObject<span class=\"sy0\">:</span>value<span class=\"br0\">]</span>; <span class=\"co2\">// pushing</span><br/>\u00a0<br/><span class=\"kw4\">id</span> value <span class=\"sy0\">=</span> <span class=\"br0\">[</span>stack lastObject<span class=\"br0\">]</span>;<br/><span class=\"br0\">[</span>stack removeLastObject<span class=\"br0\">]</span>; <span class=\"co2\">// popping</span><br/>\u00a0<br/><span class=\"br0\">[</span>stack count<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"co2\">// is empty?</span></pre>"}, {"lang": "OCaml", "loc": 18, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">exception</span> Stack_empty<br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"br0\">[</span><span class=\"sy0\">'</span>a<span class=\"br0\">]</span> stack <span class=\"sy0\">=</span><br/>  object <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>    <span class=\"kw1\">val</span> <span class=\"kw1\">mutable</span> lst <span class=\"sy0\">:</span> <span class=\"sy0\">'</span>a <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> push x <span class=\"sy0\">=</span><br/>     lst <span class=\"sy0\">&lt;-</span> x<span class=\"sy0\">::</span>lst<br/>\u00a0<br/>    <span class=\"kw1\">method</span> pop <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">match</span> lst <span class=\"kw1\">with</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span>    <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">raise</span> Stack_empty<br/>      <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs <span class=\"sy0\">-&gt;</span> lst <span class=\"sy0\">&lt;-</span> xs<span class=\"sy0\">;</span><br/>                 x<br/>\u00a0<br/>    <span class=\"kw1\">method</span> is_empty <span class=\"sy0\">=</span><br/>      lst <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">ListBuffer Class new: Stack<br/>Stack method: push  self add\u00a0;<br/>Stack method: pop   self removeLast\u00a0;<br/>Stack method: top   self last\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 8, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>stack = <span class=\"sy0\">.</span><span class=\"kw1\">queue</span>~of<span class=\"br0\">(</span><span class=\"nu0\">123</span>, <span class=\"nu0\">234</span><span class=\"br0\">)</span>  <span class=\"co1\">-- creates a stack with a couple of items</span><br/>stack~<span class=\"kw1\">push</span><span class=\"br0\">(</span><span class=\"st0\">\"Abc\"</span><span class=\"br0\">)</span>   <span class=\"co1\">-- pushing</span><br/><span class=\"kw2\">value</span> = stack~<span class=\"kw1\">pull</span>  <span class=\"co1\">-- popping</span><br/><span class=\"kw2\">value</span> = stack~peek  <span class=\"co1\">-- peeking</span><br/><span class=\"co1\">-- the is empty test</span><br/><span class=\"kw1\">if</span> stack~isEmpty <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"The stack is empty\"</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function f()<br/>  sys a=1,b=2,c=3,d=4<br/>  push a<br/>  push b<br/>  push c<br/>  push d<br/>  print a \",\" b \",\" c \",\" d 'result 1,2,3,4<br/>  a=10<br/>  b=20<br/>  c=30<br/>  d=40<br/>  print a \",\" b \",\" c \",\" d 'result 10,20,30,40<br/>  pop a<br/>  pop b<br/>  pop c<br/>  pop d<br/>  print a \",\" b \",\" c \",\" d 'result 4,3,2,1<br/>end function<br/>\u00a0<br/>f<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 31, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">export</span><br/>   New<br/>   Push<br/>   Pop<br/>   Empty<br/><span class=\"kw1\">define</span>   <br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">New</span><span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>NewCell nil<span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Push</span> Stack Element<span class=\"br0\">}</span><br/>      NewStack<br/>      <span class=\"co1\">%% Use atomic swap for thread safety</span><br/>      OldStack = Stack <span class=\"sy0\">:=</span> NewStack<br/>   <span class=\"kw1\">in</span><br/>      NewStack = Element<span class=\"sy0\">|</span>OldStack<br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Pop</span> Stack\u00a0?Result<span class=\"br0\">}</span><br/>      NewStack<br/>      <span class=\"co1\">%% Use atomic swap for thread safety</span><br/>      OldStack = Stack <span class=\"sy0\">:=</span> NewStack<br/>   <span class=\"kw1\">in</span><br/>      Result<span class=\"sy0\">|</span>NewStack = OldStack<br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Empty</span> Stack<span class=\"br0\">}</span><br/>      <span class=\"sy0\">@</span>Stack <span class=\"sy0\">==</span> nil<br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 18, "block": "<pre class=\"parigp highlighted_source\">push<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>pop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">,</span><br/>    my<span class=\"br0\">(</span>x<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    v<span class=\"sy0\">=</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    x<br/>  <span class=\"sy0\">,</span><br/>    <span class=\"kw1\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack underflow\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>empty<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">==</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>peek<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#v<span class=\"sy0\">,</span><br/>    v<span class=\"br0\">[</span>#v<span class=\"br0\">]</span><br/>  <span class=\"sy0\">,</span><br/>    <span class=\"kw1\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack underflow\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 55, "block": "<pre class=\"pascal highlighted_source\"><span class=\"coMULTI\">{ tStack is the actual stack type, tStackNode a helper type }</span><br/><span class=\"kw1\">type</span><br/>  pStackNode <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tStackNode<span class=\"sy1\">;</span><br/>  tStackNode <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                next<span class=\"sy1\">:</span> pStackNode<span class=\"sy1\">;</span><br/>                data<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tStack <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>            top<span class=\"sy1\">:</span> pStackNode<span class=\"sy1\">;</span><br/>           <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Always call InitStack before using a stack }</span><br/><span class=\"kw1\">procedure</span> InitStack<span class=\"br0\">(</span><span class=\"kw1\">var</span> stack<span class=\"sy1\">:</span> tStack<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  stack<span class=\"sy1\">.</span><span class=\"me1\">top</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">nil</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ This function removes all content from a stack; call before disposing, or before a local stack variable goes out of scope }</span><br/><span class=\"kw1\">procedure</span> ClearStack<span class=\"br0\">(</span><span class=\"kw1\">var</span> stack<span class=\"sy1\">:</span> tStack<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  node<span class=\"sy1\">:</span> pStackNode<span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">while</span> stack<span class=\"sy1\">.</span><span class=\"me1\">top</span> &lt;&gt; <span class=\"kw2\">nil</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">begin</span><br/>    node <span class=\"sy1\">:</span><span class=\"sy3\">=</span> stack<span class=\"sy1\">.</span><span class=\"me1\">top</span><span class=\"sy1\">;</span><br/>    stack<span class=\"sy1\">.</span><span class=\"me1\">top</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> stack<span class=\"sy1\">.</span><span class=\"me1\">top</span><span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">next</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">dispose</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> StackIsEmpty<span class=\"br0\">(</span>stack<span class=\"sy1\">:</span> tStack<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  StackIsEmpty <span class=\"sy1\">:</span><span class=\"sy3\">=</span> stack<span class=\"sy1\">.</span><span class=\"me1\">top</span> <span class=\"sy3\">=</span> <span class=\"kw2\">nil</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> PushToStack<span class=\"br0\">(</span><span class=\"kw1\">var</span> stack<span class=\"sy1\">:</span> tStack<span class=\"sy1\">;</span> value<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  node<span class=\"sy1\">:</span> pStackNode<span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">new</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  node<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">next</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> stack<span class=\"sy1\">.</span><span class=\"me1\">top</span><span class=\"sy1\">;</span><br/>  node<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">data</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value<span class=\"sy1\">;</span><br/>  stack<span class=\"sy1\">.</span><span class=\"me1\">top</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> node<br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ may only be called on a non-empty stack! }</span><br/><span class=\"kw1\">function</span> PopFromStack<span class=\"br0\">(</span><span class=\"kw1\">var</span> stack<span class=\"sy1\">:</span> tStack<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  node<span class=\"sy1\">:</span> pStackNode<span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  node <span class=\"sy1\">:</span><span class=\"sy3\">=</span> stack<span class=\"sy1\">.</span><span class=\"me1\">top</span><span class=\"sy1\">;</span><br/>  stack<span class=\"sy1\">.</span><span class=\"me1\">top</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> node<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">next</span><span class=\"sy1\">;</span><br/>  PopFromStack <span class=\"sy1\">:</span><span class=\"sy3\">=</span> node<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">data</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">dispose</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> empty<span class=\"br0\">{</span> <span class=\"kw1\">not</span> <span class=\"co5\">@_</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@stack</span><span class=\"sy0\">;</span>          <span class=\"co1\"># just a array</span><br/><span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$elem</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># add $elem to the end of @stack</span><br/><span class=\"re0\">$elem</span> <span class=\"sy0\">=</span> <span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">pop</span><span class=\"sy0\">;</span> <span class=\"co1\"># get the last element back</span><br/><span class=\"re0\">@stack</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>   <span class=\"co1\"># true, because the stack is empty</span><br/><span class=\"kw1\">not</span> <span class=\"re0\">@stack</span>          <span class=\"co1\"># also true because @stack is false</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">sequence stack = {}<br/>\u00a0<br/>procedure push(object what)<br/>    stack = append(stack,what)<br/>end procedure<br/>\u00a0<br/>function pop()<br/>    object what = stack[$]<br/>    stack = stack[1..$-1]<br/>    return what<br/>end function<br/>\u00a0<br/>function empty()<br/>    return length(stack)=0<br/>end function<br/>\u00a0<br/>?empty()                -- 1<br/>push(5)<br/>?empty()                -- 0<br/>push(6)<br/>?pop()                  -- 6<br/>?pop()                  -- 5<br/>?empty()                -- 1</pre>"}, {"lang": "PHP", "loc": 11, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$stack</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span> <span class=\"re0\">$stack</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// true</span><br/>\u00a0<br/><a href=\"http://www.php.net/array_push\"><span class=\"kw3\">array_push</span></a><span class=\"br0\">(</span> <span class=\"re0\">$stack</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// or $stack[] = 1;</span><br/><a href=\"http://www.php.net/array_push\"><span class=\"kw3\">array_push</span></a><span class=\"br0\">(</span> <span class=\"re0\">$stack</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// or $stack[] = 2;</span><br/>\u00a0<br/><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span> <span class=\"re0\">$stack</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// false</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/array_pop\"><span class=\"kw3\">array_pop</span></a><span class=\"br0\">(</span> <span class=\"re0\">$stack</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// outputs \"2\"</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/array_pop\"><span class=\"kw3\">array_pop</span></a><span class=\"br0\">(</span> <span class=\"re0\">$stack</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// outputs \"1\"</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(push 'Stack 3)<br/>(push 'Stack 2)<br/>(push 'Stack 1)</pre>"}, {"lang": "PL/I", "loc": 39, "block": "<pre class=\"text highlighted_source\">/* Any controlled variable may behave as a stack. */<br/>\u00a0<br/>declare s float controlled;<br/>\u00a0<br/>/* to push a value on the stack. */<br/>allocate s;<br/>s = 10;<br/>\u00a0<br/>/* To pop a value from the stack. */<br/>put (s);<br/>free s;<br/>\u00a0<br/>/* to peek at the top of stack&gt; */<br/>put (s);<br/>\u00a0<br/>/* To see whether the stack is empty */<br/>if allocation(s) = 0 then ...<br/>\u00a0<br/>/* Note: popping a value from the stack, or peeking,          */<br/>/* would usually require a check that the stack is not empty. */<br/>\u00a0<br/>/* Note: The above is a simple stack for S. */<br/>/* S can be any kind of data structure, an array, etc. */<br/>\u00a0<br/>/* Example to push ten values onto the stack, and then to */<br/>/* remove them.                                           */<br/>\u00a0<br/>/* Push ten values, obtained from the input, onto the stack: */<br/>declare S float controlled;<br/>do i = 1 to 10;<br/>   allocate s;<br/>   get list (s);<br/>end;<br/>/* To pop those values from the stack: */<br/>do while (allocation(s) &gt; 0);<br/>   put skip list (s);<br/>   free s;<br/>end;<br/>/* The values are printed in the reverse order, of course. */</pre>"}, {"lang": "PostScript", "loc": 11, "block": "<pre class=\"text highlighted_source\">% empty? is already defined.<br/>/push {exch cons}.<br/>/pop {uncons exch pop}.<br/>[2 3 4 5 6] 1 push<br/>= [1 2 3 4 5 6]<br/>[1 2 3 4 5 6] pop<br/>=[2 3 4 5 6]<br/>[2 3 4 5 6] empty?<br/>=false<br/>[] empty?<br/>=true</pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$stack</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> System.Collections.Stack<br/><span class=\"co1\"># or</span><br/><span class=\"re0\">$stack</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Collections.Stack<span class=\"br0\">]</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 11, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% push( ELEMENT, STACK, NEW )</span><br/><span class=\"co1\">% True if NEW is [ELEMENT|STACK]</span><br/>push<span class=\"br0\">(</span>ELEMENT<span class=\"sy4\">,</span>STACK<span class=\"sy4\">,</span><span class=\"br0\">[</span>ELEMENT<span class=\"sy5\">|</span>STACK<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% pop( STACK, TOP, NEW )</span><br/><span class=\"co1\">% True if TOP and NEW are head and tail, respectively, of STACK</span><br/>pop<span class=\"br0\">(</span><span class=\"br0\">[</span>TOP<span class=\"sy5\">|</span>STACK<span class=\"br0\">]</span><span class=\"sy4\">,</span>TOP<span class=\"sy4\">,</span>STACK<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% empty( STACK )</span><br/><span class=\"co1\">% True if STACK is empty</span><br/>empty<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 38, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Global</span> <span class=\"kw1\">NewList</span> MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Push_LIFO<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">InsertElement</span><span class=\"br0\">(</span>MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Pop_LIFO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Topmost <span class=\"sy0\">=</span> MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Topmost<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Empty_LIFO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Result<br/>  <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    Result <span class=\"sy0\">=</span> #True<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Result<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Peek_LIFO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Topmost <span class=\"sy0\">=</span> MyStack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Topmost<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;----   Example of implementation ----</span><br/>Push_LIFO<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>Push_LIFO<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>Push_LIFO<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> Empty_LIFO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Debug</span> Pop_LIFO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Wend</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> deque<br/>stack <span class=\"sy0\">=</span> deque<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>stack.<span class=\"me1\">append</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"co1\"># pushing</span><br/>value <span class=\"sy0\">=</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">not</span> stack <span class=\"co1\"># is empty?</span></pre>"}, {"lang": "R", "loc": 54, "block": "<pre class=\"text highlighted_source\">library(proto)<br/>\u00a0<br/>stack &lt;- proto(expr = {<br/>   l &lt;- list()<br/>   empty &lt;- function(.) length(.$l) == 0<br/>   push &lt;- function(., x) <br/>   {<br/>      .$l &lt;- c(list(x), .$l)<br/>      print(.$l)<br/>      invisible()<br/>   }<br/>   pop &lt;- function(.) <br/>   {<br/>      if(.$empty()) stop(\"can't pop from an empty list\")<br/>      .$l[[1]] &lt;- NULL<br/>      print(.$l)<br/>      invisible()<br/>   }<br/>})<br/>\u00a0<br/>stack$empty()<br/># [1] TRUE<br/>stack$push(3)<br/># [[1]]<br/># [1] 3<br/>stack$push(\"abc\")<br/># [[1]]<br/># [1] \"abc\"<br/># [[2]]<br/># [1] 3<br/>stack$push(matrix(1:6, nrow=2))<br/># [[1]]<br/>#      [,1] [,2] [,3]<br/># [1,]    1    3    5<br/># [2,]    2    4    6<br/># [[2]]<br/># [1] \"abc\"<br/># [[3]]<br/># [1] 3<br/>stack$empty()<br/># [1] FALSE<br/>stack$pop()<br/># [[1]]<br/>[1] \"abc\"<br/># [[2]]<br/># [1] 3<br/>stack$pop()<br/># [[1]]<br/># [1] 3<br/>stack$pop()<br/># list()<br/>stack$pop()<br/># Error in get(\"pop\", env = stack, inherits = TRUE)(stack, ...)\u00a0: <br/>#   can't pop from an empty list</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (stack) '())<br/>(define (push x stack) (cons x stack))<br/>(define (pop stack) (values (car stack) (cdr stack)))<br/>(define (empty? stack) (null? stack))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 3, "block": "<pre class=\"text highlighted_source\">new stack as s<br/>1 s push<br/>s pop</pre>"}, {"lang": "REBOL", "loc": 34, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Stack\"<br/>\tURL: http://rosettacode.org/wiki/Stack<br/>]</span><br/>\u00a0<br/>stack: <span class=\"kw3\">make</span> <span class=\"kw1\">object!</span> <span class=\"br0\">[</span><br/>\tdata: <span class=\"kw3\">copy</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>\tpush: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">append</span> data x<span class=\"br0\">]</span><br/>\tpop: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><span class=\"sy0\">/</span>local x<span class=\"br0\">]</span><span class=\"br0\">[</span>x: <span class=\"kw3\">last</span> data  <span class=\"kw3\">remove</span> <span class=\"kw3\">back</span> <span class=\"kw3\">tail</span> data  x<span class=\"br0\">]</span><br/>\tempty: <span class=\"kw2\">does</span> <span class=\"br0\">[</span><span class=\"kw3\">empty?</span> data<span class=\"br0\">]</span><br/>\u00a0<br/>\tpeek: <span class=\"kw2\">does</span> <span class=\"br0\">[</span><span class=\"kw3\">last</span> data<span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Teeny Tiny Test Suite</span><br/>\u00a0<br/>assert: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>code<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"kw2\">either</span> <span class=\"kw2\">do</span> code <span class=\"br0\">[</span><span class=\"st0\">\"  ok\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st0\">\"FAIL\"</span><span class=\"br0\">]</span>  <span class=\"kw3\">mold</span> code<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Simple integers:\"</span><br/>s: <span class=\"kw3\">make</span> stack <span class=\"br0\">[</span><span class=\"br0\">]</span>  s<span class=\"sy0\">/</span>push <span class=\"nu0\">1</span>  s<span class=\"sy0\">/</span>push <span class=\"nu0\">2</span> <span class=\"co1\">; Initialize.</span><br/>\u00a0<br/>assert <span class=\"br0\">[</span><span class=\"nu0\">2</span> = s<span class=\"sy0\">/</span>peek<span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"nu0\">2</span> = s<span class=\"sy0\">/</span>pop<span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"nu0\">1</span> = s<span class=\"sy0\">/</span>pop<span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span>s<span class=\"sy0\">/</span>empty<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>lf <span class=\"st0\">\"Symbolic data on stack:\"</span><span class=\"br0\">]</span><br/>v: <span class=\"kw3\">make</span> stack <span class=\"br0\">[</span>data: <span class=\"br0\">[</span>this is a test<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"co1\">; Initialize on instance.</span><br/>\u00a0<br/>assert <span class=\"br0\">[</span>'test = v<span class=\"sy0\">/</span>peek<span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span>'test = v<span class=\"sy0\">/</span>pop<span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span>'a = v<span class=\"sy0\">/</span>pop<span class=\"br0\">]</span><br/>assert <span class=\"br0\">[</span><span class=\"kw3\">not</span> v<span class=\"sy0\">/</span>empty<span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 15, "block": "<pre class=\"text highlighted_source\">: stack ( n\"-  ) create 0 , allot\u00a0;<br/>: push  ( na-  ) dup ++ dup @ +\u00a0!\u00a0;<br/>: pop   (  a-n ) dup @ over -- + @\u00a0;<br/>: top   (  a-n ) dup @ + @\u00a0;<br/>: empty? ( a-f ) @ 0 =\u00a0;<br/>\u00a0<br/>10 stack st<br/>\u00a0<br/>1 st push<br/>2 st push<br/>3 st push<br/>st empty? putn<br/>st top putn<br/>st pop putn st pop putn st pop putn<br/>st empty? putn</pre>"}, {"lang": "REXX", "loc": 7, "block": "<pre class=\"rexx highlighted_source\">y=<span class=\"nu0\">123</span>                        <span class=\"coMULTI\">/*define a REXX variable, value is 123  */</span><br/><span class=\"kw1\">push</span> y                       <span class=\"coMULTI\">/*pushes   123   onto the stack.        */</span><br/><span class=\"kw1\">pull</span> g                       <span class=\"coMULTI\">/*pops last value stacked &amp; removes it. */</span><br/>q=empty<span class=\"br0\">(</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*invokes the  EMPTY  subroutine (below)*/</span><br/><span class=\"kw1\">exit</span>                         <span class=\"coMULTI\">/*stick a fork in it, we're done.       */</span><br/>\u00a0<br/>empty: <span class=\"kw1\">return</span> <span class=\"kw6\">queued</span><span class=\"br0\">(</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*subroutine returns # of stacked items.*/</span></pre>"}, {"lang": "Ring", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Stack<br/>\u00a0<br/>load \"stdlib.ring\"<br/>ostack = new stack<br/>for n = 5 to 7<br/>     see \"Push: \" + n + nl<br/>     ostack.push(n) <br/>next<br/>see \"Pop:\" + ostack.pop() + nl<br/>see \"Push: \" + \"8\" + nl<br/>ostack.push(8)<br/>while len(ostack) &gt; 0<br/>        see \"Pop:\" + ostack.pop() + nl<br/>end<br/>if len(ostack) = 0<br/>   see \"Pop: stack is empty\" + nl<br/>ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">stack = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"co1\"># pushing</span><br/>value = stack.<span class=\"me1\">pop</span> <span class=\"co1\"># popping</span><br/>stack.<span class=\"me1\">empty</span>? <span class=\"co1\"># is empty?</span></pre>"}, {"lang": "Run BASIC", "loc": 41, "block": "<pre class=\"text highlighted_source\">dim stack$(10)   ' stack of ten<br/>global stack$<br/>global stackEnd<br/>\u00a0<br/>for i = 1 to 5                                      ' push 5 values to the stack<br/> a$ = push$(chr$(i + 64))<br/> print \"Pushed \";chr$(i + 64);\" stack has \";stackEnd<br/>next i<br/>\u00a0<br/>print \"Pop Value:\";pop$();\" stack has \";stackEnd  ' pop last in<br/>print \"Pop Value:\";pop$();\" stack has \";stackEnd  ' pop last in<br/>\u00a0<br/>e$ = mt$()                                        ' MT the stack<br/>print \"Empty stack. stack has \";stackEnd<br/>\u00a0<br/>' ------ PUSH the stack<br/>FUNCTION push$(val$)<br/>stackEnd = stackEnd + 1                            ' if more than 10 then lose the oldest<br/>if stackEnd &gt; 10 then<br/>   for i = 0 to 9<br/>      stack$(i) = stack$(i+1)<br/>   next i<br/>   stackEnd   = 10<br/>end if<br/>stack$(stackEnd) = val$<br/>END FUNCTION<br/>\u00a0<br/>' ------ POP the stack -----<br/>FUNCTION pop$()<br/>if stackEnd = 0 then <br/>   pop$     = \"Stack is MT\"<br/>  else<br/>   pop$     = stack$(stackEnd)                        ' pop last in<br/>   stackEnd = max(stackEnd - 1,0)<br/>end if<br/>END FUNCTION<br/>\u00a0<br/>' ------ MT the stack ------<br/>FUNCTION mt$()<br/>  stackEnd = 0<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 12, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let mut stack = Vec::new();<br/>    stack.push(\"Element1\");<br/>    stack.push(\"Element2\");<br/>    stack.push(\"Element3\");<br/>\u00a0<br/>    assert_eq!(Some(&amp;\"Element3\"), stack.last());<br/>    assert_eq!(Some(\"Element3\"), stack.pop());<br/>    assert_eq!(Some(\"Element2\"), stack.pop());<br/>    assert_eq!(Some(\"Element1\"), stack.pop());<br/>    assert_eq!(None, stack.pop());<br/>}</pre>"}, {"lang": "Sather", "loc": 33, "block": "<pre class=\"text highlighted_source\">class STACK{T} is<br/>  private attr stack\u00a0:LLIST{T};<br/>\u00a0<br/>  create:SAME is <br/>    res\u00a0::= new;<br/>    res.stack\u00a0:= #LLIST{T};<br/>    return res;<br/>  end;<br/>\u00a0<br/>  push(elt: T) is<br/>    stack.insert_front(elt);    <br/>  end;<br/>\u00a0<br/>  pop: T is<br/>    if ~stack.is_empty then<br/>      stack.rewind;<br/>      r\u00a0::= stack.current;<br/>      stack.delete;<br/>      return r;<br/>    else<br/>      raise \"stack empty!\\n\";<br/>    end;<br/>  end;<br/>\u00a0<br/>  top: T is<br/>    stack.rewind;<br/>    return stack.current;<br/>  end;<br/>\u00a0<br/>  is_empty: BOOL is<br/>    return stack.is_empty;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Stack<span class=\"br0\">[</span>T<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> items <span class=\"sy0\">=</span> List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isEmpty <span class=\"sy0\">=</span> items.<span class=\"me1\">isEmpty</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> peek <span class=\"sy0\">=</span> items <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> List<span class=\"br0\">(</span><span class=\"br0\">)</span>       <span class=\"sy0\">=&gt;</span> error<span class=\"br0\">(</span><span class=\"st0\">\"Stack empty\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> head <span class=\"sy0\">::</span> rest <span class=\"sy0\">=&gt;</span> head<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> pop <span class=\"sy0\">=</span> items <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> List<span class=\"br0\">(</span><span class=\"br0\">)</span>       <span class=\"sy0\">=&gt;</span> error<span class=\"br0\">(</span><span class=\"st0\">\"Stack empty\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> head <span class=\"sy0\">::</span> rest <span class=\"sy0\">=&gt;</span> items <span class=\"sy0\">=</span> rest<span class=\"sy0\">;</span> head<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> push<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> items <span class=\"sy0\">=</span> value +<span class=\"sy0\">:</span> items<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 15, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>stack<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>st '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>message . args<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">case</span> message<br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>empty?<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> st<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>top<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> st<span class=\"br0\">)</span><br/>                   'empty<br/>                   <span class=\"br0\">(</span><span class=\"kw1\">car</span> st<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>push<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> st <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> args<span class=\"br0\">)</span> st<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>pop<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> st<span class=\"br0\">)</span><br/>                   'empty<br/>                   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result <span class=\"br0\">(</span><span class=\"kw1\">car</span> st<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">set!</span> st <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> st<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> 'badmsg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 41, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func type: stack (in type: baseType) is func<br/>  result<br/>    var type: stackType is void;<br/>  begin<br/>    stackType\u00a0:= array baseType;<br/>\u00a0<br/>    const proc: push (inout stackType: aStack, in baseType: top) is func<br/>      begin<br/>         aStack\u00a0:= [] (top) &amp; aStack;<br/>      end func;<br/>\u00a0<br/>    const func baseType: pop (inout stackType: aStack) is func<br/>      result<br/>        var baseType: top is baseType.value;<br/>      begin<br/>        if length(aStack) = 0 then<br/>          raise RANGE_ERROR;<br/>        else<br/>          top\u00a0:= aStack[1];<br/>          aStack\u00a0:= aStack[2 ..];<br/>        end if;<br/>      end func;<br/>\u00a0<br/>    const func boolean: empty (in stackType: aStack) is<br/>      return length(aStack) = 0;<br/>  end func;<br/>\u00a0<br/>const type: intStack is stack(integer);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var intStack: s is intStack.value;<br/>  begin<br/>    push(s, 10);<br/>    push(s, 20);<br/>    writeln(pop(s) = 20);<br/>    writeln(pop(s) = 10);<br/>    writeln(empty(s));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">var stack = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span>;         <span class=\"co1\"># pushing</span><br/>say stack.<span class=\"me1\">pop</span>;          <span class=\"co1\"># popping</span><br/>say stack.<span class=\"me1\">is_empty</span>;     <span class=\"co1\"># is_emtpy?</span></pre>"}, {"lang": "Slate", "loc": 22, "block": "<pre class=\"text highlighted_source\">collections define: #Stack &amp;parents: {ExtensibleArray}.<br/>\"An abstraction over ExtensibleArray implementations to follow the stack<br/>protocol. The convention is that the Sequence indices run least-to-greatest<br/>from bottom to top.\"<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"097a49\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Stack traits) push: obj<br/>[s addLast: obj].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"413201\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Stack traits) pop<br/>[s removeLast].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"4b380b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Stack traits) pop: n<br/>[s removeLast: n].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"512211\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Stack traits) top<br/>[s last].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"ccbf8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Stack traits) top: n<br/>[s last: n].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"1e6d5e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Stack traits) bottom<br/>[s first].</pre>"}, {"lang": "Smalltalk", "loc": 8, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re6\">s</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Stack</span> new.<br/><span class=\"re5\">s</span> push: <span class=\"re5\">1</span>.<br/><span class=\"re5\">s</span> push: <span class=\"re5\">2</span>.<br/><span class=\"re5\">s</span> push: <span class=\"re5\">3</span>.<br/><span class=\"re5\">s</span> pop.<br/><span class=\"re5\">s</span> top. <span class=\"coMULTI\">\"2\"</span><br/>\u00a0</pre>"}, {"lang": "Standard ML", "loc": 16, "block": "<pre class=\"text highlighted_source\">signature STACK =<br/>sig<br/>    type 'a stack<br/>    exception EmptyStack<br/>\u00a0<br/>    val empty\u00a0: 'a stack<br/>    val isEmpty\u00a0: 'a stack -&gt; bool<br/>\u00a0<br/>    val push\u00a0: ('a * 'a stack) -&gt; 'a stack<br/>    val pop \u00a0: 'a stack -&gt; 'a stack<br/>    val top \u00a0: 'a stack -&gt; 'a<br/>    val popTop\u00a0: 'a stack -&gt; 'a stack * 'a<br/>\u00a0<br/>    val map\u00a0: ('a -&gt; 'b) -&gt; 'a stack -&gt; 'b stack<br/>    val app\u00a0: ('a -&gt; unit) -&gt; 'a stack -&gt; unit<br/>end</pre>"}, {"lang": "Stata", "loc": 26, "block": "<pre class=\"text highlighted_source\">struct Stack&lt;T&gt; {<br/>    var items = [T]()<br/>    var empty:Bool {<br/>        return items.count == 0<br/>    }<br/>\u00a0<br/>    func peek() -&gt; T {<br/>        return items[items.count - 1]<br/>    }<br/>\u00a0<br/>    mutating func pop() -&gt; T {<br/>        return items.removeLast()<br/>    }<br/>\u00a0<br/>    mutating func push(obj:T) {<br/>        items.append(obj)<br/>    }<br/>}<br/>\u00a0<br/>var stack = Stack&lt;Int&gt;()<br/>stack.push(1)<br/>stack.push(2)<br/>println(stack.pop())<br/>println(stack.peek())<br/>stack.pop()<br/>println(stack.empty)</pre>"}, {"lang": "Swift", "loc": 26, "block": "<pre class=\"text highlighted_source\">struct Stack&lt;T&gt; {<br/>    var items = [T]()<br/>    var empty:Bool {<br/>        return items.count == 0<br/>    }<br/>\u00a0<br/>    func peek() -&gt; T {<br/>        return items[items.count - 1]<br/>    }<br/>\u00a0<br/>    mutating func pop() -&gt; T {<br/>        return items.removeLast()<br/>    }<br/>\u00a0<br/>    mutating func push(obj:T) {<br/>        items.append(obj)<br/>    }<br/>}<br/>\u00a0<br/>var stack = Stack&lt;Int&gt;()<br/>stack.push(1)<br/>stack.push(2)<br/>println(stack.pop())<br/>println(stack.peek())<br/>stack.pop()<br/>println(stack.empty)</pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> push <span class=\"br0\">{</span>stackvar value<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$stackvar</span> stack<br/>    <span class=\"kw2\">lappend</span> stack <span class=\"re0\">$value</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> pop <span class=\"br0\">{</span>stackvar<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$stackvar</span> stack<br/>    <span class=\"kw1\">set</span> value <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$stack</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> stack <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$stack</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$value</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> size <span class=\"br0\">{</span>stackvar<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$stackvar</span> stack<br/>    <span class=\"kw2\">llength</span> <span class=\"re0\">$stack</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> empty <span class=\"br0\">{</span>stackvar<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$stackvar</span> stack<br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>size stack<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> peek <span class=\"br0\">{</span>stackvar<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$stackvar</span> stack<br/>    <span class=\"kw2\">lindex</span> <span class=\"re0\">$stack</span> end<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> S <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>empty S <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 1 (true)</span><br/>push S foo<br/>empty S <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 0 (false)</span><br/>push S bar<br/>peek S <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; bar</span><br/>pop S <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; bar</span><br/>peek S <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; foo</span></pre>"}, {"lang": "UnixPipes", "loc": 11, "block": "<pre class=\"bash highlighted_source\">init<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"re5\">-e</span> stack <span class=\"br0\">]</span>; <span class=\"kw1\">then</span> <span class=\"kw2\">rm</span> stack; <span class=\"kw1\">fi</span> <span class=\"br0\">}</span> <span class=\"co0\"># force pop to blow up if empty</span><br/>push<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">echo</span> <span class=\"re4\">$1</span> <span class=\"sy0\">&gt;&gt;</span> stack; <span class=\"br0\">}</span><br/>pop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">tail</span> <span class=\"re5\">-1</span> stack;<br/>\t<span class=\"re2\">x</span>=<span class=\"sy0\">`</span><span class=\"kw2\">head</span> <span class=\"re5\">-n</span> <span class=\"re5\">-1</span> stack <span class=\"sy0\">|</span> <span class=\"kw2\">wc</span> -c<span class=\"sy0\">`</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">[</span> <span class=\"re1\">$x</span> <span class=\"re5\">-eq</span> <span class=\"st_h\">'0'</span> <span class=\"br0\">]</span>; <span class=\"kw1\">then</span> <span class=\"kw2\">rm</span> stack; <span class=\"kw1\">else</span><br/>\t\ttruncate <span class=\"re5\">-s</span> <span class=\"sy0\">`</span><span class=\"kw2\">head</span> <span class=\"re5\">-n</span> <span class=\"re5\">-1</span> stack <span class=\"sy0\">|</span> <span class=\"kw2\">wc</span> -c<span class=\"sy0\">`</span> stack<br/>\t<span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>empty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">head</span> <span class=\"re5\">-n</span> <span class=\"re5\">-1</span> stack <span class=\"sy0\">|</span><span class=\"kw2\">wc</span> <span class=\"re5\">-l</span>; <span class=\"br0\">}</span><br/>stack_top<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">tail</span> <span class=\"re5\">-1</span> stack; <span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 37, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'Simple Stack class<br/></span><br/><span class=\"co1\">'uses a dynamic array of Variants to stack the values<br/></span><span class=\"co1\">'has read-only property \"Size\"<br/></span><span class=\"co1\">'and methods \"Push\", \"Pop\", \"IsEmpty\"<br/></span><br/><span class=\"kw2\">Private</span> myStack()<br/><span class=\"kw2\">Private</span> myStackHeight <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"co1\">'method Push<br/></span><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> Push(aValue)<br/>  <span class=\"co1\">'increase stack height<br/></span>  myStackHeight = myStackHeight + 1<br/>  <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> myStack(myStackHeight)<br/>  myStack(myStackHeight) = aValue<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'method Pop<br/></span><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> Pop()<br/>  <span class=\"co1\">'check for nonempty stack<br/></span>  <span class=\"kw3\">If</span> myStackHeight &gt; 0 <span class=\"kw3\">Then</span><br/>    Pop = myStack(myStackHeight)<br/>    myStackHeight = myStackHeight - 1<br/>  <span class=\"kw3\">Else</span><br/>    MsgBox <span class=\"st0\">\"Pop: stack is empty!\"</span><br/>  <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'method IsEmpty<br/></span><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> IsEmpty() <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>  IsEmpty = (myStackHeight = 0)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'property Size<br/></span><span class=\"kw4\">Property</span> <span class=\"kw4\">Get</span> Size() <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  Size = myStackHeight<br/><span class=\"kw3\">End</span> <span class=\"kw4\">Property</span></pre>"}, {"lang": "VBScript", "loc": 56, "block": "<pre class=\"vb highlighted_source\">class stack<br/>\t<span class=\"kw4\">dim</span> tos<br/>\t<span class=\"kw4\">dim</span> stack()<br/>\t<span class=\"kw4\">dim</span> stacksize<br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">sub</span> class_initialize<br/>\t\tstacksize = 100<br/>\t\t<span class=\"kw4\">redim</span> stack( stacksize )<br/>\t\ttos = 0<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">sub</span> push( x )<br/>\t\tstack(tos) = x<br/>\t\ttos = tos + 1<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> stackempty<br/>\t\tstackempty = ( tos = 0 )<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> stackfull<br/>\t\tstackfull = ( tos &gt; stacksize )<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> stackroom<br/>\t\tstackroom = stacksize - tos<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> pop()<br/>\t\tpop = stack( tos - 1 )<br/>\t\ttos = tos - 1<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">sub</span> resizestack( n )<br/>\t\t<span class=\"kw4\">redim</span> <span class=\"kw4\">preserve</span> stack( n )<br/>\t\tstacksize = n<br/>\t\t<span class=\"kw3\">if</span> tos &gt; stacksize <span class=\"kw3\">then</span><br/>\t\t\ttos = stacksize<br/>\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/><span class=\"kw3\">end</span> class<br/>\u00a0<br/><span class=\"kw4\">dim</span> s<br/><span class=\"kw4\">set</span> s = <span class=\"kw2\">new</span> stack<br/>s.resizestack 10<br/>wscript.echo s.stackempty<br/><span class=\"kw4\">dim</span> i<br/><span class=\"kw3\">for</span> i = 1 <span class=\"kw3\">to</span> 10<br/>\ts.push rnd<br/>\twscript.echo s.stackroom<br/>\t<span class=\"kw3\">if</span> s.stackroom = 0 <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw3\">for</span><br/><span class=\"kw3\">next</span><br/><span class=\"kw3\">for</span> i = 1 <span class=\"kw3\">to</span> 10<br/>\twscript.echo s.pop<br/>\t<span class=\"kw3\">if</span> s.stackempty <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw3\">for</span><br/><span class=\"kw3\">next</span></pre>"}, {"lang": "Wart", "loc": 11, "block": "<pre class=\"text highlighted_source\">def (stack)<br/>  (tag 'stack nil)<br/>\u00a0<br/>mac (push! x s)\u00a0:qcase `(isa stack ,s)<br/>  `(push! ,x (rep ,s))<br/>\u00a0<br/>mac (pop! s)\u00a0:qcase `(isa stack ,s)<br/>  `(pop! (rep ,s))<br/>\u00a0<br/>def (empty? s)\u00a0:case (isa stack s)<br/>  (empty? rep.s)</pre>"}, {"lang": "X86 Assembly", "loc": 84, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; x86_64 linux nasm<br/>\u00a0<br/>struc Stack<br/>  maxSize: resb 8<br/>  currentSize: resb 8<br/>  contents:<br/>endStruc<br/>\u00a0<br/>section .data<br/>\u00a0<br/>soError: db \"Stack Overflow Exception\", 10<br/>seError: db \"Stack Empty Error\", 10<br/>\u00a0<br/>\u00a0<br/>section .text<br/>\u00a0<br/>createStack:<br/>; IN: max number of elements (rdi)<br/>; OUT: pointer to new stack (rax)<br/>  push rdi<br/>  xor rdx, rdx<br/>  mov rbx, 8<br/>  mul rbx<br/>  mov rcx, rax<br/>  mov rax, 12<br/>  mov rdi, 0<br/>  syscall<br/>  push rax<br/>  mov rdi, rax<br/>  add rdi, rcx<br/>  mov rax, 12<br/>  syscall<br/>  pop rax<br/>  pop rbx<br/>  mov qword [rax + maxSize], rbx<br/>  mov qword [rax + currentSize], 0<br/>  ret<br/>\u00a0<br/>\u00a0<br/>push:<br/>; IN: stack to operate on (stack argument), element to push (rdi)<br/>; OUT: void<br/>  mov rax, qword [rsp + 8]<br/>  mov rbx, qword [rax + currentSize]<br/>  cmp rbx, qword [rax + maxSize]<br/>  je stackOverflow<br/>  lea rsi, [rax + contents + 8*rbx]<br/>  mov qword [rsi], rdi<br/>  add qword [rax + currentSize], 1<br/>  ret<br/>\u00a0<br/>\u00a0<br/>pop:<br/>; pop<br/>; IN: stack to operate on (stack argument)<br/>; OUT: element from stack top<br/>  mov rax, qword [rsp + 8]<br/>  mov rbx, qword [rax + currentSize]<br/>  cmp rbx, 0<br/>  je stackEmpty<br/>  sub rbx, 1<br/>  lea rsi, [rax + contents + 8*rbx]<br/>  mov qword [rax + currentSize], rbx<br/>  mov rax, qword [rsi]<br/>  ret<br/>\u00a0<br/>\u00a0<br/>; stack operation exceptions<br/>stackOverflow:<br/>  mov rsi, soError<br/>  mov rdx, 25<br/>  jmp errExit<br/>stackEmpty:<br/>  mov rsi, seError<br/>  mov rdx, 18<br/>errExit:<br/>  mov rax, 1<br/>  mov rdi, 1<br/>  syscall<br/>  mov rax, 60<br/>  mov rdi, 1<br/>  syscall<br/>\u00a0</pre>"}, {"lang": "XLISP", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define-class stack<br/>    <span class=\"br0\">(</span>instance-variables vals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>stack 'initialize<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> vals '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    self<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>stack 'push x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> vals <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x vals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>stack 'pop<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>define tos <span class=\"br0\">(</span><span class=\"kw1\">car</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> vals <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tos<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-method <span class=\"br0\">(</span>stack 'emptyp<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">null</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 29, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>int Stack(100), SP;<br/>\u00a0<br/>proc Push(I);           \\Push an integer onto the Stack<br/>int  I;<br/>[SP:= SP+1;<br/>Stack(SP):= I;<br/>]; \\Push<br/>\u00a0<br/>func Pop;               \\Pop an integer from the Stack<br/>int  I;<br/>[I:= Stack(SP);<br/>SP:= SP-1;<br/>return I;<br/>]; \\Pop<br/>\u00a0<br/>func Empty;             \\Return 'true' if Stack is empty<br/>return SP&lt;0;<br/>\u00a0<br/>func Top;               \\Return the integer at top of Stack<br/>return Stack(SP);<br/>\u00a0<br/>int I;<br/>[SP:= -1;               \\initialize stack pointer<br/>for I:= 0 to 10 do Push(I*I);<br/>IntOut(0, Top);  CrLf(0);<br/>while not Empty do [IntOut(0, Pop);  ChOut(0, ^ )];<br/>CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">class Stack{<br/>   var [const] stack=L();<br/>   fcn push(x){stack.append(x); self}<br/>   fcn pop    {stack.pop()}<br/>   fcn empty  {(not stack.len())}<br/>   var [proxy] isEmpty = empty;<br/>}</pre>"}]}