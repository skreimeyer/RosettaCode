{"task": "Hofstadter_Figure-Figure_sequences", "blocks": [{"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Hofstadter_Figure_Figure <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> FFR<span class=\"br0\">(</span>P: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> FFS<span class=\"br0\">(</span>P: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive;<br/>\u00a0<br/><span class=\"kw1\">end</span> Hofstadter_Figure_Figure;</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\">R<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> R<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> S<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>S<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tstatic ObjR<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">2</span><br/>\tObjS<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% n<br/>\t\tObjR<span class=\"br0\">[</span>R<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\tObjS<span class=\"br0\">[</span>S<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>\t\t<span class=\"kw1\">if</span>\u00a0!<span class=\"br0\">(</span>ObjR<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span>||ObjS<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 89, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># Hofstadter Figure-Figure sequences</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#    R(1) = 1; S(1) = 2;</span><br/><span class=\"co1\">#    R(n) = R(n-1) + S(n-1), n &gt; 1</span><br/><span class=\"co1\">#    S(n) is the values not in R(n)</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\"># start with the first two values of R and S to simplify finding S[n]:</span><br/>    R<span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> = <span class=\"nu0\">1</span>;<br/>    R<span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span> = <span class=\"nu0\">3</span>;<br/>    S<span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> = <span class=\"nu0\">2</span>;<br/>    S<span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span> = <span class=\"nu0\">4</span>;<br/>    <span class=\"co1\"># maximum n we currently have of R and S</span><br/>    rMax   = <span class=\"nu0\">2</span>;<br/>    sMax   = <span class=\"nu0\">2</span>;<br/>\u00a0<br/>    <span class=\"co1\"># calculate and show the first 10 values of R:</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"R[1..10]:\"</span> <span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> n = <span class=\"nu0\">1</span>; n <span class=\"sy2\">&lt;</span> <span class=\"nu0\">11</span>; n <span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"\u00a0%d\"</span>, ffr<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span>;<br/>    <span class=\"co1\"># check that R[1..40] and S[1..960] contain the numbers 1..1000 once each</span><br/>    <span class=\"co1\"># add the values of R[ 1..40 ] to the set V</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> n = <span class=\"nu0\">1</span>; n <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">40</span>; n <span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        V<span class=\"br0\">[</span> ffr<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy3\">++</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># add the values of S[ 1..960 ] to the set V</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> n = <span class=\"nu0\">1</span>; n <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">960</span>; n <span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        V<span class=\"br0\">[</span> ffs<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy3\">++</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># check all numbers are present and not duplicated</span><br/>    ok = <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> n = <span class=\"nu0\">1</span>; n <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">1000</span>; n <span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy1\">!</span> <span class=\"br0\">(</span> n <span class=\"kw1\">in</span> V <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"%d not present in R[1..40], S[1..960]<span class=\"es0\">\\n</span>\"</span>, n <span class=\"br0\">)</span>;<br/>            ok = <span class=\"nu0\">0</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> V<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"%d occurs\u00a0%d times in R[1..40], S[1..960]<span class=\"es0\">\\n</span>\"</span>, n, V<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"br0\">)</span>;<br/>            ok = <span class=\"nu0\">0</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> ok <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span> <span class=\"st0\">\"R[1..40] and S[1..960] uniquely contain all 1..1000<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span> <span class=\"co1\"># BEGIN</span><br/>\u00a0<br/><span class=\"kw6\">function</span> ffr<span class=\"br0\">(</span> n <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\"># calculate R[n]</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy1\">!</span> <span class=\"br0\">(</span> n <span class=\"kw1\">in</span> R <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\"># we haven't calculated R[ n ] yet</span><br/>        R<span class=\"br0\">[</span> n <span class=\"br0\">]</span>  = ffs<span class=\"br0\">(</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>;<br/>        R<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy3\">+</span>= ffr<span class=\"br0\">(</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"kw6\">return</span> R<span class=\"br0\">[</span> n <span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span> <span class=\"co1\"># ffr</span><br/>\u00a0<br/><span class=\"kw6\">function</span> ffs<span class=\"br0\">(</span> n <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\"># calculate S[n]</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy1\">!</span> <span class=\"br0\">(</span> n <span class=\"kw1\">in</span> S <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\"># starting at the highest known R, calculate the next one and fill in the S values</span><br/>        <span class=\"co1\"># continuing until we have enough S values</span><br/>        <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span><br/>            R<span class=\"br0\">[</span> rMax <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> = R<span class=\"br0\">[</span> rMax <span class=\"br0\">]</span> <span class=\"sy3\">+</span> S<span class=\"br0\">[</span> rMax <span class=\"br0\">]</span>;<br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> sValue = R<span class=\"br0\">[</span> rMax <span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>; sValue <span class=\"sy2\">&lt;</span> R<span class=\"br0\">[</span> rMax <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span>; sValue <span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                S<span class=\"br0\">[</span> sMax <span class=\"sy3\">++</span> <span class=\"br0\">]</span> = sValue;<br/>            <span class=\"br0\">}</span><br/>            rMax <span class=\"sy3\">++</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> sMax <span class=\"sy2\">&lt;</span> n <span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"kw6\">return</span> S<span class=\"br0\">[</span> n <span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span> <span class=\"co1\"># ffs</span></pre>"}, {"lang": "BBC BASIC", "loc": 53, "block": "<pre class=\"text highlighted_source\">      PRINT \"First 10 values of R:\"<br/>      FOR i% = 1 TO 10\u00a0: PRINT\u00a0;FNffr(i%) \" \";\u00a0: NEXT\u00a0: PRINT<br/>      PRINT \"First 10 values of S:\"<br/>      FOR i% = 1 TO 10\u00a0: PRINT\u00a0;FNffs(i%) \" \";\u00a0: NEXT\u00a0: PRINT<br/>      PRINT \"Checking for first 1000 integers:\"<br/>      r% = 1\u00a0: s% = 1<br/>      ffr% = FNffr(r%)<br/>      ffs% = FNffs(s%)<br/>      FOR wanted% = 1 TO 1000<br/>        CASE TRUE OF<br/>          WHEN wanted% = ffr%\u00a0: r% += 1\u00a0: ffr% = FNffr(r%)<br/>          WHEN wanted% = ffs%\u00a0: s% += 1\u00a0: ffs% = FNffs(s%)<br/>          OTHERWISE: EXIT FOR<br/>        ENDCASE<br/>      NEXT<br/>      IF r% = 41 AND s% = 961 PRINT \"Test passed\" ELSE PRINT \"Test failed\"<br/>      END<br/>\u00a0<br/>      DEF FNffr(N%)<br/>      LOCAL I%, J%, R%, S%, V%<br/>      DIM V% LOCAL 2*N%+1<br/>      V%?1 = 1<br/>      IF N% = 1 THEN = 1<br/>      R% = 1<br/>      S% = 2<br/>      FOR I% = 2 TO N%<br/>        FOR J% = S% TO 2*N%<br/>          IF V%?J% = 0 EXIT FOR<br/>        NEXT<br/>        V%?J% = 1<br/>        S% = J%<br/>        R% += S%<br/>        IF R% &lt;= 2*N% V%?R% = 1<br/>      NEXT I%<br/>      = R%<br/>\u00a0<br/>      DEF FNffs(N%)<br/>      LOCAL I%, J%, R%, S%, V%<br/>      DIM V% LOCAL 2*N%+1<br/>      V%?1 = 1<br/>      IF N% = 1 THEN = 2<br/>      R% = 1<br/>      S% = 2<br/>      FOR I% = 1 TO N%<br/>        FOR J% = S% TO 2*N%<br/>          IF V%?J% = 0 EXIT FOR<br/>        NEXT<br/>        V%?J% = 1<br/>        S% = J%<br/>        R% += S%<br/>        IF R% &lt;= 2*N% V%?R% = 1<br/>      NEXT I%<br/>      = S%</pre>"}, {"lang": "C", "loc": 84, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// simple extensible array stuff</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> xint<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> len<span class=\"sy0\">,</span> alloc<span class=\"sy0\">;</span><br/>\txint <span class=\"sy0\">*</span>buf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> xarray<span class=\"sy0\">;</span><br/>\u00a0<br/>xarray rs<span class=\"sy0\">,</span> ss<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> setsize<span class=\"br0\">(</span>xarray <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> size<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> n <span class=\"sy0\">=</span> a<span class=\"sy0\">-&gt;</span>alloc<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> size<span class=\"br0\">)</span> n <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ta<span class=\"sy0\">-&gt;</span>buf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>buf<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>xint<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>a<span class=\"sy0\">-&gt;</span>buf<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ta<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> push<span class=\"br0\">(</span>xarray <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> xint v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">&lt;=</span> a<span class=\"sy0\">-&gt;</span>len<span class=\"br0\">)</span><br/>\t\tsetsize<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"sy0\">-&gt;</span>alloc <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ta<span class=\"sy0\">-&gt;</span>buf<span class=\"br0\">[</span>a<span class=\"sy0\">-&gt;</span>len<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// sequence stuff</span><br/><span class=\"kw4\">void</span> RS_append<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>xint R<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> rs.<span class=\"me1\">len</span><span class=\"br0\">)</span> RS_append<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> rs.<span class=\"me1\">buf</span><span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>xint S<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> ss.<span class=\"me1\">len</span><span class=\"br0\">)</span> RS_append<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ss.<span class=\"me1\">buf</span><span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> RS_append<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> rs.<span class=\"me1\">len</span><span class=\"sy0\">;</span><br/>\txint r <span class=\"sy0\">=</span> R<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> S<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\txint s <span class=\"sy0\">=</span> S<span class=\"br0\">(</span>ss.<span class=\"me1\">len</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tpush<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rs<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>s <span class=\"sy0\">&lt;</span> r<span class=\"br0\">)</span> push<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>ss<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tpush<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>ss<span class=\"sy0\">,</span> r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// pesky 3</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpush<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rs<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tpush<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>ss<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"R(1 .. 10):\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%llu\"</span><span class=\"sy0\">,</span> R<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> seen<span class=\"br0\">[</span><span class=\"nu0\">1001</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span>  <span class=\"nu0\">40</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> seen<span class=\"br0\">[</span> R<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">960</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> seen<span class=\"br0\">[</span> S<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">&amp;&amp;</span> seen<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%d not seen<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>first 1000 ok\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 66, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> hofstadter<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> rlistSize, <span class=\"kw4\">unsigned</span> slistSize<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> n <span class=\"sy1\">=</span> rlistSize <span class=\"sy1\">&gt;</span> slistSize <span class=\"sy4\">?</span> rlistSize <span class=\"sy4\">:</span> slistSize<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> rlist <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> slist <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> vector<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> list <span class=\"sy1\">=</span> rlistSize <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy4\">?</span> rlist <span class=\"sy4\">:</span> slist<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> target_size <span class=\"sy1\">=</span> rlistSize <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy4\">?</span> rlistSize <span class=\"sy4\">:</span> slistSize<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>list<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> target_size<span class=\"br0\">)</span> list<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>pop_back<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>list<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> target_size<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> lastIndex <span class=\"sy1\">=</span> rlist<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">auto</span> lastr <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>rlist<span class=\"br0\">)</span><span class=\"br0\">[</span>lastIndex<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">auto</span> r <span class=\"sy1\">=</span> lastr <span class=\"sy2\">+</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>slist<span class=\"br0\">)</span><span class=\"br0\">[</span>lastIndex<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        rlist<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>push_back<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> s <span class=\"sy1\">=</span> lastr <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> s <span class=\"sy1\">&lt;</span> r <span class=\"sy3\">&amp;&amp;</span> list<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> target_size<span class=\"sy4\">;</span><span class=\"br0\">)</span><br/>            slist<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>push_back<span class=\"br0\">(</span>s<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> v <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">delete</span> rlist<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">delete</span> slist<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> v<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ostream<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">const</span> set<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'('</span> <span class=\"sy1\">&lt;&lt;</span> s.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"):\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> c <span class=\"sy1\">=</span> s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> c <span class=\"sy3\">!</span><span class=\"sy1\">=</span> s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy2\">++</span> <span class=\"sy2\">%</span> <span class=\"nu0\">20</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> os <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>        os <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> v1 <span class=\"sy1\">=</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> v2 <span class=\"sy1\">=</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    set<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span> r, s<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> v2<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&lt;=</span> v1<span class=\"br0\">)</span><br/>            r.<span class=\"me1\">insert</span><span class=\"br0\">(</span>hofstadter<span class=\"br0\">(</span>n, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        s.<span class=\"me1\">insert</span><span class=\"br0\">(</span>hofstadter<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"R\"</span> <span class=\"sy1\">&lt;&lt;</span> r <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"S\"</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> m <span class=\"sy1\">=</span> max<span class=\"br0\">(</span><span class=\"sy2\">*</span>r.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy2\">*</span>s.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> m<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r.<span class=\"me1\">count</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">==</span> s.<span class=\"me1\">count</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">clog</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"integer \"</span> <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" either in both or neither set\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 85, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> HofstadterFigureFigure<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> HofstadterFigureFigure<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">readonly</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> _r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">readonly</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> _s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> R<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> iR <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>iR <span class=\"sy0\">&gt;=</span> _r<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tAdvance<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> _r<span class=\"br0\">[</span>iR<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> <a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a> <span class=\"sy0\">&gt;=</span> _s<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tAdvance<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> _s<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">private</span> <span class=\"kw4\">void</span> Advance<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> rCount <span class=\"sy0\">=</span> _r<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> oldR <span class=\"sy0\">=</span> _r<span class=\"br0\">[</span>rCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> sVal<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// Take care of first two cases specially since S won't be larger than R at that point</span><br/>\t\t\t<span class=\"kw1\">switch</span> <span class=\"br0\">(</span>rCount<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsVal <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsVal <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>\t\t\t\t\tsVal <span class=\"sy0\">=</span> _s<span class=\"br0\">[</span>rCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t_r<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>_r<span class=\"br0\">[</span>rCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> sVal<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> newR <span class=\"sy0\">=</span> _r<span class=\"br0\">[</span>rCount<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> <a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a> <span class=\"sy0\">=</span> oldR <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a> <span class=\"sy0\">&lt;</span> newR<span class=\"sy0\">;</span> <a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t_s<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=is+msdn.microsoft.com\"><span class=\"kw3\">iS</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">class</span> Program<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> hff <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HofstadterFigureFigure<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">var</span> rs <span class=\"sy0\">=</span> hff<span class=\"sy0\">.</span><span class=\"me1\">R</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">var</span> arr <span class=\"sy0\">=</span> rs<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> v <span class=\"kw1\">in</span> arr<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}\"</span>, v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">var</span> hs <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ths<span class=\"sy0\">.</span><span class=\"me1\">UnionWith</span><span class=\"br0\">(</span>hff<span class=\"sy0\">.</span><span class=\"me1\">S</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">960</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>hs<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Verified\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Oops!  Something's wrong!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 26, "block": "<pre class=\"coffeescript highlighted_source\">R = <span class=\"br0\">[</span> <span class=\"kw4\">null</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>S = <span class=\"br0\">[</span> <span class=\"kw4\">null</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><br/>\u00a0<br/>extend_sequences = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  current = Math.<span class=\"me1\">max</span><span class=\"br0\">(</span>R<span class=\"br0\">[</span>R.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> S<span class=\"br0\">[</span>S.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  i = <span class=\"kw4\">undefined</span><br/>  <span class=\"kw1\">while</span> R.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span>= n <span class=\"kw2\">or</span> S.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span>= n<br/>    i = Math.<span class=\"me1\">min</span><span class=\"br0\">(</span>R.<span class=\"me1\">length</span><span class=\"sy0\">,</span> S.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    current <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> current == R<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> S<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      R.<span class=\"me1\">push</span> current<br/>    <span class=\"kw1\">else</span><br/>      S.<span class=\"me1\">push</span> current<br/>\u00a0<br/>ff = <span class=\"br0\">(</span>X<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    extend_sequences n<br/>    X<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">'R('</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">') = '</span> <span class=\"sy0\">+</span> ff<span class=\"br0\">(</span>R<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>int_array = <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">40</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> ff<span class=\"br0\">(</span>R<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">concat</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">960</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> ff<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>int_array.<span class=\"me1\">sort</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-</span> b<br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">if</span> int_array<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= i<br/>    <span class=\"kw1\">throw</span> <span class=\"st0\">'Something<span class=\"es0\">\\'</span>s wrong!'</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">'1000 integer check ok.'</span></pre>"}, {"lang": "Common Lisp", "loc": 34, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; equally doable with a list</span><br/><span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>seq <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">integer</span><br/>\t\t\t      <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> i<br/>\t\t\t      <span class=\"sy0\">:</span><span class=\"me1\">fill-pointer</span> <span class=\"nu0\">1</span><br/>\t\t\t      <span class=\"sy0\">:</span><span class=\"me1\">adjustable</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rr <span class=\"br0\">(</span>seq <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ss <span class=\"br0\">(</span>seq <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>extend-r <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t       <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> rr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t      <span class=\"br0\">(</span>r <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">aref</span> rr <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> ss <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t      <span class=\"br0\">(</span>s <span class=\"br0\">(</span>elt ss <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> ss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>vector-push-extend r rr<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> s r<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t\t       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"br0\">(</span>incf s<span class=\"br0\">)</span> r<span class=\"br0\">)</span><br/>\t\t\t\t <span class=\"br0\">(</span>vector-push-extend s ss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">defun</span> seq-r <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> rr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>extend-r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>elt rr <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"br0\">(</span><span class=\"kw1\">defun</span> seq-s <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> ss<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>extend-r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>elt ss <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> take <span class=\"br0\">(</span>f n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to n collect <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"First of R: ~a~%\"</span> <span class=\"br0\">(</span>take #'seq-r <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">mapl</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>\t\t\t   <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"not in sequence\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>sort <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>take #'seq-r <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span>take #'seq-s <span class=\"nu0\">960</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    #'<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"Ok\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> ffr<span class=\"sy0\">,</span> ffs<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">nothrow</span> <span class=\"kw4\">static</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ffr <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>r.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> nrk <span class=\"sy0\">=</span> r.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> rNext <span class=\"sy0\">=</span> r<span class=\"br0\">[</span>nrk<span class=\"br0\">]</span> <span class=\"sy0\">+</span> s<span class=\"br0\">[</span>nrk<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            r <span class=\"sy0\">~=</span> rNext<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> sn<span class=\"sy0\">;</span> r<span class=\"br0\">[</span>nrk<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"me1\">rNext</span><span class=\"br0\">)</span><br/>                s <span class=\"sy0\">~=</span> sn<span class=\"sy0\">;</span><br/>            s <span class=\"sy0\">~=</span> rNext <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> r<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ffs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>            ffr<span class=\"br0\">(</span>r.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> s<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>ffr.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> t <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>ffr.<span class=\"me1\">chain</span><span class=\"br0\">(</span>iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">961</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>ffs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    t.<span class=\"me1\">array</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span>iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1001</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>FFR n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>FFR <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>FFS <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>FFS n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> next <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>FFS <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t  #:break <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-</span>search<span class=\"sy0\">*</span> k <span class=\"br0\">(</span>cache 'FFR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> k<br/>\t\t  <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>remember 'FFR #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; init cache</span><br/><span class=\"br0\">(</span>remember 'FFS #<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function RSstep (r,s) ...<br/>$  n=cols(r);<br/>$  r=r|(r[n]+s[n]);<br/>$  s=s|(max(s[n]+1,r[n]+1):r[n+1]-1);<br/>$  return {r,s};<br/>$  endfunction<br/>&gt;function RS (n) ...<br/>$  if n==1 then return {[1],[2]}; endif;<br/>$  if n==2 then return {[1,3],[2]}; endif;<br/>$  r=[1,3]; s=[2,4];<br/>$  loop 3 to n; {r,s}=RSstep(r,s); end;<br/>$  return {r,s};<br/>$  endfunction<br/>&gt;{r,s}=RS(10);<br/>&gt;r<br/> [ 1  3  7  12  18  26  35  45  56  69 ]<br/>&gt;{r,s}=RS(50);<br/>&gt;all(sort(r[1:40]|s[1:960])==(1:1000))<br/> 1<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 21, "block": "<pre class=\"text highlighted_source\">SYMBOL: S  V{ 2 } S set<br/>SYMBOL: R  V{ 1 } R set<br/>\u00a0<br/>: next ( s r -- news newr )<br/>2dup [ last ] <a class=\"__cf_email__\" data-cfemail=\"93f1fad3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + suffix<br/>dup [<br/>  [ dup last 1 + dup ] dip member? [ 1 + ] when suffix<br/>] dip\u00a0;<br/>\u00a0<br/>: inc-SR ( n -- )<br/>dup 0 &lt;=<br/>[ drop ]<br/>[ [ S get R get ] dip  [ next ] times  R set S set ]<br/>if\u00a0;<br/>\u00a0<br/>: ffs ( n -- S(n) )<br/>dup S get length - inc-SR<br/>1 - S get nth\u00a0;<br/>: ffr ( n -- R(n) )<br/>dup R get length - inc-SR<br/>1 - R get nth\u00a0;</pre>"}, {"lang": "Go", "loc": 56, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> ffr<span class=\"sy1\">,</span> ffs <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"co1\">// The point of the init function is to encapsulate r and s.  If you are</span><br/><span class=\"co1\">// not concerned about that or do not want that, r and s can be variables at</span><br/><span class=\"co1\">// package level and ffr and ffs can be ordinary functions at package level.</span><br/><span class=\"kw4\">func</span> init<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// task 1, 2</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}</span><br/>\u00a0<br/>    ffr <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> &lt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>            nrk <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span>       <span class=\"co1\">// last n for which r(n) is known</span><br/>            rNxt <span class=\"sy2\">:=</span> r<span class=\"sy1\">[</span>nrk<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> s<span class=\"sy1\">[</span>nrk<span class=\"sy1\">]</span> <span class=\"co1\">// next value of r:  r(nrk+1)</span><br/>            r <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> rNxt<span class=\"sy1\">)</span>     <span class=\"co1\">// extend sequence r by one element</span><br/>            <span class=\"kw1\">for</span> sn <span class=\"sy2\">:=</span> r<span class=\"sy1\">[</span>nrk<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> sn &lt; rNxt<span class=\"sy1\">;</span> sn<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> sn<span class=\"sy1\">)</span>   <span class=\"co1\">// extend sequence s up to rNext</span><br/>            <span class=\"sy1\">}</span><br/>            s <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> rNxt<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span>   <span class=\"co1\">// extend sequence s one past rNext</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> r<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    ffs <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> &lt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>            ffr<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> s<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// task 3</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"r(%d):\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> ffr<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// task 4</span><br/>    <span class=\"kw1\">var</span> found <span class=\"sy1\">[</span><span class=\"nu0\">1001</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">40</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        found<span class=\"sy1\">[</span>ffr<span class=\"sy1\">(</span>n<span class=\"sy1\">)]</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">960</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        found<span class=\"sy1\">[</span>ffs<span class=\"sy1\">(</span>n<span class=\"sy1\">)]</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> found<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"task 4: FAIL\"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"task 4: PASS\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>delete<span class=\"sy0\">,</span> sort<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Functions by Reinhard Zumkeller</span><br/>ffr n <span class=\"sy0\">=</span> rl <span class=\"sy0\">!!</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>   rl <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: fig <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>   fig n <span class=\"br0\">(</span>x\u00a0: xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"st0\">'\u00a0: fig n'</span> <span class=\"br0\">(</span>delete n<span class=\"st0\">' xs) where n'</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> x<br/>\u00a0<br/>ffs n <span class=\"sy0\">=</span> rl <span class=\"sy0\">!!</span> n <span class=\"kw1\">where</span><br/>   rl <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0: figDiff <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>   figDiff n <span class=\"br0\">(</span>x\u00a0: xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x\u00a0: figDiff n<span class=\"st0\">' (delete n'</span> xs<span class=\"br0\">)</span> <span class=\"kw1\">where</span> n<span class=\"st0\">' = n + x<br/>\u00a0<br/>main = do<br/>    print $ map ffr [1 .. 10]<br/>    let i1000 = sort (map ffr [1 .. 40] ++ map ffs [1 .. 960])<br/>    print (i1000 == [1 .. 1000])</span></pre>"}, {"lang": "Icon and Unicon", "loc": 59, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<span class=\"sy1\">,</span>ximage <br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"Hofstader ff sequences R(n:= 1 to\u00a0%d)<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>N <span class=\"sy1\">:=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> printf<span class=\"br0\">(</span><span class=\"st0\">\"R(%d)=%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>n <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<span class=\"sy1\">,</span>ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   L <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>N <span class=\"sy1\">:=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   zero <span class=\"sy1\">:=</span> dup <span class=\"sy1\">:=</span> oob <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>RN <span class=\"sy1\">:=</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> L<span class=\"br0\">[</span>ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span>    <span class=\"co1\"># count R occurrence</span><br/>         oob <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>                   <span class=\"co1\"># count out of bounds</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>N<span class=\"sy1\">-</span>RN<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> L<span class=\"br0\">[</span>ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span>    <span class=\"co1\"># count S occurrence </span><br/>         oob <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>                   <span class=\"co1\"># count out of bounds  </span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> zero <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>L <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>           <span class=\"co1\"># count zeros / misses</span><br/>   <span class=\"kw1\">every</span> dup  <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>L <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"co1\"># count &gt; 1's / duplicates</span><br/>\u00a0<br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"Results of R(1 to\u00a0%d) and S(1 to\u00a0%d) coverage is \"</span><span class=\"sy1\">,</span>RN<span class=\"sy1\">,</span><span class=\"br0\">(</span>N<span class=\"sy1\">-</span>RN<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> oob<span class=\"sy1\">+</span>zero<span class=\"sy1\">+</span>dup<span class=\"sy1\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"complete.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span> <br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"flawed<span class=\"es0\">\\n</span>oob=%i,zero=%i,dup=%i<span class=\"es0\">\\n</span>L:<span class=\"es0\">\\n</span>%s<span class=\"es0\">\\n</span>R:<span class=\"es0\">\\n</span>%s<span class=\"es0\">\\n</span>S:<span class=\"es0\">\\n</span>%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>             oob<span class=\"sy1\">,</span>zero<span class=\"sy1\">,</span>dup<span class=\"sy1\">,</span>ximage<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy1\">,</span>ximage<span class=\"br0\">(</span>ffr<span class=\"br0\">(</span>ffr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>ximage<span class=\"br0\">(</span>ffs<span class=\"br0\">(</span>ffs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span>             <br/><span class=\"kw2\">static</span> R<span class=\"sy1\">,</span>S<br/><span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>   R <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>   S <span class=\"sy1\">:=</span> ffs<span class=\"br0\">(</span>ffs<span class=\"br0\">)</span>               <span class=\"co1\"># get access to S in ffs</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> n <span class=\"sy1\">===</span> ffr <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> R  <span class=\"co1\"># secret handshake to avoid globals\u00a0:)</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>      <span class=\"kw1\">return</span> R<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>R<span class=\"sy1\">,</span>ffr<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> ffs<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw2\">static</span> R<span class=\"sy1\">,</span>S<br/><span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>   S <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <br/>   R <span class=\"sy1\">:=</span> ffr<span class=\"br0\">(</span>ffr<span class=\"br0\">)</span>               <span class=\"co1\"># get access to R in ffr</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> n <span class=\"sy1\">===</span> ffs <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> S  <span class=\"co1\"># secret handshake to avoid globals\u00a0:)</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> S<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> S<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>         t <span class=\"sy1\">:=</span> S<span class=\"br0\">[</span><span class=\"sy1\">*</span>S<span class=\"br0\">]</span>  <br/>         <span class=\"kw1\">until</span> <span class=\"sy1\">*</span>S <span class=\"sy1\">=</span> n <span class=\"kw1\">do</span> <br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"sy1\">!</span>R <span class=\"kw1\">then</span> <span class=\"kw1\">next</span> <span class=\"co1\"># could be optimized with more code</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>S<span class=\"sy1\">,</span>t<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">*</span>S<span class=\"br0\">]</span>    <span class=\"co1\"># extend S</span><br/>         <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">R=: <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><br/>S=: <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><br/>FF=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while.</span> +./<span class=\"kw2\">y</span>&gt;:R,&amp;#S <span class=\"kw1\">do.</span><br/>    R=: R,<span class=\"sy0\">(</span>{:R<span class=\"sy0\">)</span>+<span class=\"sy0\">(</span>&lt;:#R<span class=\"sy0\">)</span>{S<br/>    S=: <span class=\"sy0\">(</span>i.&lt;:+/<span class=\"nu0\">_2</span>{.R<span class=\"sy0\">)</span>-.R<br/>  <span class=\"kw1\">end.</span><br/>  R;S<br/><span class=\"sy0\">)</span><br/>ffr=: { <span class=\"nu0\">0</span> {:: <a class=\"__cf_email__\" data-cfemail=\"98deded8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>&gt;./@,<span class=\"sy0\">)</span><br/>ffs=: { <span class=\"nu0\">1</span> {:: <a class=\"__cf_email__\" data-cfemail=\"480e0e08\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">0</span>,&gt;./@,<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 56, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Hofstadter<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> getSequence<span class=\"br0\">(</span><span class=\"kw4\">int</span> rlistSize, <span class=\"kw4\">int</span> slistSize<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> rlist <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> slist <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>rlist, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">addAll</span><span class=\"br0\">(</span>slist, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rlistSize <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> rlist <span class=\"sy0\">:</span> slist<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> targetSize <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rlistSize <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> rlistSize <span class=\"sy0\">:</span> slistSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> targetSize<span class=\"br0\">)</span><br/>      list.<span class=\"me1\">remove</span><span class=\"br0\">(</span>list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> targetSize<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> lastIndex <span class=\"sy0\">=</span> rlist.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> lastr <span class=\"sy0\">=</span> rlist.<span class=\"me1\">get</span><span class=\"br0\">(</span>lastIndex<span class=\"br0\">)</span>.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> lastr <span class=\"sy0\">+</span> slist.<span class=\"me1\">get</span><span class=\"br0\">(</span>lastIndex<span class=\"br0\">)</span>.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      rlist.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> lastr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> r<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> targetSize<span class=\"br0\">)</span><span class=\"sy0\">;</span> s<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        slist.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> list<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> ffr<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> getSequence<span class=\"br0\">(</span>n, <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> ffs<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> getSequence<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">intValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"R():\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> first40R <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      first40R.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> first960S <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">960</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      first960S.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> n <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>first40R.<span class=\"me1\">contains</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> first960S.<span class=\"me1\">contains</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Integer \"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\" either in both or neither set\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Done\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 47, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> R <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> S <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> extend_sequences <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> current <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>R<span class=\"br0\">[</span>R.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>S<span class=\"br0\">[</span>S.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy0\">;</span><br/>\twhile <span class=\"br0\">(</span>R.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">||</span> S.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>R.<span class=\"me1\">length</span><span class=\"sy0\">,</span> S.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tcurrent <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>current <span class=\"sy0\">===</span> R<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> S<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tR.<span class=\"me1\">push</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\tS.<span class=\"me1\">push</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> ffr <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\textend_sequences<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> R<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> ffs <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\textend_sequences<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> S<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'R('</span><span class=\"sy0\">+</span> i <span class=\"sy0\">+</span><span class=\"st0\">') = '</span> <span class=\"sy0\">+</span> ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> int_array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tint_array.<span class=\"me1\">push</span><span class=\"br0\">(</span>ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">960</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tint_array.<span class=\"me1\">push</span><span class=\"br0\">(</span>ffs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>int_array.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy0\">-</span>b<span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>int_array<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!==</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>\t\t<span class=\"kw1\">throw</span> <span class=\"st0\">\"Something's wrong!\"</span> <br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"1000 integer check ok.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 63, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>type FigureFigure{T&lt;:Integer}<br/>    r::Array{T,1}<br/>    rnmax::T<br/>    snmax::T<br/>    snext::T<br/>end<br/>\u00a0<br/>function grow!{T&lt;:Integer}(ff::FigureFigure{T}, rnmax::T=100)<br/>    ff.rnmax &lt; rnmax || return nothing<br/>    append!(ff.r, zeros(T, (rnmax-ff.rnmax)))<br/>    snext = ff.snext<br/>    for i in (ff.rnmax+1):rnmax<br/>        ff.r[i] = ff.r[i-1] + snext<br/>        snext += 1<br/>        while snext in ff.r<br/>            snext += 1<br/>        end<br/>    end<br/>    ff.rnmax = rnmax<br/>    ff.snmax = ff.r[end] - rnmax<br/>    ff.snext = snext<br/>    return nothing<br/>end<br/>\u00a0<br/>function FigureFigure{T&lt;:Integer}(rnmax::T=10)<br/>    ff = FigureFigure([1], 1, 0, 2)<br/>    grow!(ff, rnmax)<br/>    return ff<br/>end    <br/>\u00a0<br/>function FigureFigure{T&lt;:Integer}(rnmax::T, snmax::T)<br/>    ff = FigureFigure(rnmax)<br/>    while ff.snmax &lt; snmax<br/>        grow!(ff, 2ff.rnmax)<br/>    end<br/>    return ff<br/>end<br/>\u00a0<br/>function make_ffr{T&lt;:Integer}(nmax::T=10)<br/>    ff = FigureFigure(nmax)<br/>    function ffr{T&lt;:Integer}(n::T)<br/>        if n &gt; ff.rnmax<br/>            grow!(ff, 2n)<br/>        end<br/>        ff.r[n]<br/>    end<br/>end<br/>\u00a0<br/>function make_ffs{T&lt;:Integer}(nmax::T=100)<br/>    ff = FigureFigure(13, nmax)<br/>    function ffs{T&lt;:Integer}(n::T)<br/>        while ff.snmax &lt; n<br/>            grow!(ff, 2ff.rnmax)<br/>        end<br/>        s = n<br/>        for r in ff.r<br/>            r &lt;= s || return s<br/>            s += 1<br/>        end<br/>    end<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\">fun ffr<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> get<span class=\"br0\">(</span>n, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>fun ffs<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> get<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>internal fun get<span class=\"br0\">(</span>rSize<span class=\"sy0\">:</span> Int, sSize<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rlist <span class=\"sy0\">=</span> arrayListOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> slist <span class=\"sy0\">=</span> arrayListOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rSize <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rlist <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> slist<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> targetSize <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rSize <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rSize <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> sSize<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>list.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> targetSize<span class=\"br0\">)</span><br/>        list.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>list.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>list.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> targetSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lastIndex <span class=\"sy0\">=</span> rlist.<span class=\"me1\">lastIndex</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lastr <span class=\"sy0\">=</span> rlist<span class=\"br0\">[</span>lastIndex<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> lastr + slist<span class=\"br0\">[</span>lastIndex<span class=\"br0\">]</span><br/>        rlist +<span class=\"sy0\">=</span> r<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> lastr + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> r <span class=\"sy0\">&amp;&amp;</span> list.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> targetSize<span class=\"br0\">)</span><br/>            slist +<span class=\"sy0\">=</span> s++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> list<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"R():\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span> + ffr<span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> first40R <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">40</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> ffr<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> first960S <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">960</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> ffs<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> indices <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span>  <span class=\"br0\">{</span> it in first40R <span class=\"sy0\">==</span> it in first960S <span class=\"br0\">}</span><br/>    indices.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Integer $it either in both or neither set\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Done\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre>   The instructions call for two functions.\n   Because S[n] is generated while computing R[n], one would normally avoid redundancy by combining \n   R and S into a single function that returns both sequences.\n</pre>"}, {"lang": "MATLAB / Octave", "loc": 24, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">function</span> <span class=\"br0\">[</span>R,S<span class=\"br0\">]</span> = ffr_ffs<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <br/>    t = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>; <br/>    T = <span class=\"nu0\">1</span>;<br/>    n = <span class=\"nu0\">1</span>; <br/>    <span class=\"co1\">%while T&lt;=1000,</span><br/>    <span class=\"kw1\">while</span> n&lt;=N,<br/>        R = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>t,n<span class=\"br0\">)</span>;<br/>        S = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>~t,n<span class=\"br0\">)</span>;<br/>        T = R<span class=\"br0\">(</span>n<span class=\"br0\">)</span>+S<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"co1\">% pre-allocate memory, this improves performance</span><br/>\t<span class=\"kw1\">if</span> T &gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span>, t = <span class=\"br0\">[</span>t,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>; <span class=\"kw1\">end</span>;  <br/>\u00a0<br/>        t<span class=\"br0\">(</span>T<span class=\"br0\">)</span> = <span class=\"nu0\">1</span>; <br/>        n = n + <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">end</span>; <br/>    <span class=\"kw1\">if</span> nargout&gt;<span class=\"nu0\">0</span>, <br/>      r = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span>R<span class=\"br0\">)</span>; <br/>      s = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">else</span> <br/>      printf<span class=\"br0\">(</span><span class=\"co2\">'Sequence R:\\n'</span><span class=\"br0\">)</span>; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>R<span class=\"br0\">)</span>;<br/>      printf<span class=\"br0\">(</span><span class=\"co2\">'Sequence S:\\n'</span><span class=\"br0\">)</span>; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span>; <br/>  <span class=\"kw1\">end</span>; </pre>"}, {"lang": "Nim", "loc": 33, "block": "<pre class=\"text highlighted_source\">var cr = @[1]<br/>var cs = @[2]<br/>\u00a0<br/>proc extendRS =<br/>  let x = cr[cr.high] + cs[cr.high]<br/>  cr.add x<br/>  for y in cs[cs.high] + 1 .. &lt;x: cs.add y<br/>  cs.add x + 1<br/>\u00a0<br/>proc ffr(n): int =<br/>  assert n &gt; 0<br/>  while n &gt; cr.len: extendRS()<br/>  cr[n - 1]<br/>\u00a0<br/>proc ffs(n): int =<br/>  assert n &gt; 0<br/>  while n &gt; cs.len: extendRS()<br/>  cs[n - 1]<br/>\u00a0<br/>for i in 1..10: stdout.write ffr i,\" \"<br/>echo \"\"<br/>\u00a0<br/>var bin: array[1..1000, int]<br/>for i in 1..40: inc bin[ffr i]<br/>for i in 1..960: inc bin[ffs i]<br/>var all = true<br/>for x in bin:<br/>  if x\u00a0!= 1:<br/>    all = false<br/>    break<br/>\u00a0<br/>if all: echo \"All Integers 1..1000 found OK\"<br/>else: echo \"All Integers 1..1000 NOT found only once: ERROR\"</pre>"}, {"lang": "Oforth", "loc": 21, "block": "<pre class=\"text highlighted_source\">tvar: R<br/>ListBuffer new 1 over add R put<br/>\u00a0<br/>tvar: S<br/>ListBuffer new 2 over add S put<br/>\u00a0<br/>: buildnext <br/>| r s current i |<br/>   R at -&gt;r <br/>   S at -&gt;s<br/>   r last  r size s at  + dup -&gt;current  r add <br/>   s last 1+  current 1-  for: i [ i s add ]<br/>   current 1+ s add\u00a0;<br/>\u00a0<br/>: ffr(n)<br/>   while ( R at size n &lt; ) [ buildnext ]<br/>   n R at at\u00a0;<br/>\u00a0<br/>: ffs(n)<br/>   while ( S at size n &lt; ) [ buildnext ]<br/>   n S at at\u00a0;</pre>"}, {"lang": "Perl", "loc": 36, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@r</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ffsr <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">$#r</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@r</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"re0\">$#r</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ffr <span class=\"br0\">{</span> <span class=\"re0\">$r</span><span class=\"br0\">[</span>ffsr <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> ffs <span class=\"br0\">{</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span>ffsr <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"  i: R(i) S(i)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"==============<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%3d: \u00a0%3d \u00a0%3d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> ffr<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ffs<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>R(40)=%3d S(960)=%3d R(41)=%3d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> ffr<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ffs<span class=\"br0\">(</span><span class=\"nu0\">960</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ffr<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%seen</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$seen</span><span class=\"br0\">{</span>ffr<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$seen</span><span class=\"br0\">{</span>ffs<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">960</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"nu0\">1000</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%seen</span> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"re0\">$seen</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"All occured exactly once.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@missed</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"sy0\">!</span><span class=\"re0\">$seen</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@dupped</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"re0\">$seen</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%seen</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"These were missed: @missed<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"These were duplicated: @dupped<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">%r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%s</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> ffr <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">%r</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> ffr<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> ffs<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> ffs <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">%s</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"br0\">(</span><span class=\"kw3\">grep</span> <span class=\"kw3\">none</span><span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"re0\">&amp;ffr</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">max</span><span class=\"br0\">(</span><span class=\"re0\">%s</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@ffr</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;ffr</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..*;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ffs</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;ffs</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..*;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">@ffr</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Rawks!\"</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span><span class=\"sy0\">...</span><span class=\"nu0\">1000</span> eqv <span class=\"kw3\">sort</span> <span class=\"sy0\">|</span><span class=\"re0\">@ffr</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">@ffs</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">960</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 35, "block": "<pre class=\"text highlighted_source\">sequence F = {1,3,7},<br/>         S = {2,4,5,6}<br/>integer fmax = 3 -- (ie F[3], ==7, already in S)<br/>\u00a0<br/>forward function ffs(integer n)<br/>\u00a0<br/>function ffr(integer n)<br/>    integer l = length(F)<br/>    while n&gt;l do<br/>        F &amp;= F[l]+ffs(l)<br/>        l += 1<br/>    end while<br/>    return F[n]<br/>end function<br/>\u00a0<br/>function ffs(integer n)<br/>    while n&gt;length(S) do<br/>        fmax += 1<br/>        if fmax&gt;length(F) then {} = ffr(fmax) end if<br/>        S &amp;= tagset(lim:=F[fmax]-1,start:=F[fmax-1]+1)<br/>        -- ie/eg if fmax was 3, then F[2..3] being {3,7} <br/>        --       ==&gt; tagset(lim:=6,start:=4), ie {4,5,6}.<br/>    end while<br/>    return S[n]<br/>end function<br/>\u00a0<br/>{} = ffr(10)    -- (or collect one by one)<br/>?{\"The first ten values of R\",F[1..10]}<br/>{} = ffr(40)    -- (not actually needed)<br/>{} = ffs(960)<br/>if sort(F[1..40]&amp;S[1..960])=tagset(1000) then<br/>    puts(1,\"test passed\\n\")<br/>else<br/>    puts(1,\"some error!\\n\")<br/>end if</pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(setq *RNext 2)<br/>\u00a0<br/>(de ffr (N)<br/>   (cache '(NIL) N<br/>      (if (= 1 N)<br/>         1<br/>         (+ (ffr (dec N)) (ffs (dec N))) ) ) )<br/>\u00a0<br/>(de ffs (N)<br/>   (cache '(NIL) N<br/>      (if (= 1 N)<br/>         2<br/>         (let S (inc (ffs (dec N)))<br/>            (when (= S (ffr *RNext))<br/>               (inc 'S)<br/>               (inc '*RNext) )<br/>            S ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"pli highlighted_source\">ffr<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> v<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   v <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>   v<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span>b<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">if</span> v<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span>b <span class=\"kw1\">then</span> <span class=\"kw1\">leave</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      v<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span>b<span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>      r <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> s<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> r <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n <span class=\"kw1\">then</span> v<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span>b<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> ffr<span class=\"sy0\">;</span></pre>"}, {"lang": "Prolog", "loc": 27, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> chr_constraint ffr<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> ffs<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> hofstadter<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>hofstadter<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> chr_option<span class=\"br0\">(</span>debug<span class=\"sy4\">,</span> off<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> chr_option<span class=\"br0\">(</span>optimize<span class=\"sy4\">,</span> full<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% to remove duplicates</span><br/>ffr<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> R1<span class=\"br0\">)</span> \\ ffr<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> R2<span class=\"br0\">)</span> <span class=\"sy6\">&lt;=&gt;</span> R1 <span class=\"sy6\">=</span> R2 <span class=\"sy5\">|</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">.</span><br/>ffs<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> R1<span class=\"br0\">)</span> \\ ffs<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> R2<span class=\"br0\">)</span> <span class=\"sy6\">&lt;=&gt;</span> R1 <span class=\"sy6\">=</span> R2 <span class=\"sy5\">|</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% compute ffr</span><br/>ffr<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span> ffr<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><span class=\"sy4\">,</span> ffs<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span>S1<span class=\"br0\">)</span> <span class=\"sy6\">==&gt;</span><br/>         N <span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span><br/>\t R <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> R1 <span class=\"sy3\">+</span> S1<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% compute ffs</span><br/>ffs<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span> ffs<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span>S1<span class=\"br0\">)</span> <span class=\"sy6\">==&gt;</span><br/>         N <span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy5\">|</span><br/>\t V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> S1 <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t <span class=\"br0\">(</span>   find_chr_constraint<span class=\"br0\">(</span>ffr<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  S <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> V<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> S <span class=\"sy6\">=</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% init</span><br/>hofstadter<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy6\">==&gt;</span>  ffr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> ffs<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"co1\">% loop</span><br/>hofstadter<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span> ffr<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> _R<span class=\"br0\">)</span><span class=\"sy4\">,</span> ffs<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> _S<span class=\"br0\">)</span> <span class=\"sy6\">==&gt;</span> N1 <span class=\"sy6\">&lt;</span> N<span class=\"sy4\">,</span> N2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N1 <span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span>  ffr<span class=\"br0\">(</span>N2<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> ffs<span class=\"br0\">(</span>N2<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 46, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">int</span>: <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">\"n must be an int &gt;= 1\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw1\">return</span> ffr.<span class=\"me1\">r</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">except</span> <span class=\"kw2\">IndexError</span>:<br/>        r<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> ffr.<span class=\"me1\">r</span><span class=\"sy0\">,</span> ffs.<span class=\"me1\">s</span><br/>        ffr_n_1 <span class=\"sy0\">=</span> ffr<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        lastr <span class=\"sy0\">=</span> r<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"co1\"># extend s up to, and one past, last r </span><br/>        s +<span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> lastr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> lastr: s +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>lastr + <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"co1\"># access s[n-1] temporarily extending s if necessary</span><br/>        len_s <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        ffs_n_1 <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>n-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> len_s <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">else</span> <span class=\"br0\">(</span>n - len_s<span class=\"br0\">)</span> + s<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        ans <span class=\"sy0\">=</span> ffr_n_1 + ffs_n_1<br/>        r.<span class=\"me1\">append</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> ans<br/>ffr.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">int</span>: <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">\"n must be an int &gt;= 1\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw1\">return</span> ffs.<span class=\"me1\">s</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">except</span> <span class=\"kw2\">IndexError</span>:<br/>        r<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> ffr.<span class=\"me1\">r</span><span class=\"sy0\">,</span> ffs.<span class=\"me1\">s</span><br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">,</span> n+<span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>            ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> n:<br/>                <span class=\"kw1\">return</span> s<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <span class=\"kw1\">raise</span> <span class=\"kw2\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Whoops!\"</span><span class=\"br0\">)</span><br/>ffs.<span class=\"me1\">s</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    first10 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">assert</span> first10 <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">56</span><span class=\"sy0\">,</span> <span class=\"nu0\">69</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ffr() value error(s)\"</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"ffr(n) for n = [1..10] is\"</span><span class=\"sy0\">,</span> first10<span class=\"br0\">)</span><br/>    <span class=\"co1\">#</span><br/>    bin <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>*<span class=\"nu0\">1000</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        bin<span class=\"br0\">[</span>ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">960</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        bin<span class=\"br0\">[</span>ffs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> bin<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"All Integers 1..1000 found OK\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"All Integers 1..1000 NOT found only once: ERROR\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>\u00a0<br/>(define r-cache (make-hash '((1 . 1) (2 . 3) (3 . 7))))<br/>(define s-cache (make-hash '((1 . 2) (2 . 4) (3 . 5) (4 . 6))))<br/>\u00a0<br/>(define (extend-r-s!)<br/>  (define r-count (hash-count r-cache))<br/>  (define s-count (hash-count s-cache))<br/>  (define last-r (ffr r-count))<br/>  (define new-r (+ (ffr r-count) (ffs r-count)))<br/>  (hash-set! r-cache (add1 r-count) new-r)<br/>  (define offset (- s-count last-r))<br/>  (for ([val (in-range (add1 last-r) new-r)])<br/>    (hash-set! s-cache (+ val offset) val)))</pre>"}, {"lang": "REXX", "loc": 43, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  calculates and verifies  the  Hofstadter Figure\u2500Figure sequences.       */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x top bot <span class=\"sy0\">.</span>                            <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>   x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   x==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>   x=  <span class=\"nu0\">10</span>             <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> top==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> top==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> top=<span class=\"nu0\">1000</span>             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> bot==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> bot==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> bot=  <span class=\"nu0\">40</span>             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>low=<span class=\"nu0\">1</span>;         <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> low=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*only display a  single   \u2502X\u2502  value? */</span><br/>r<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  r<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span>;  rr<span class=\"sy0\">.</span>=r<span class=\"sy0\">.</span>;  rr<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span>;   s<span class=\"sy0\">.</span>=r<span class=\"sy0\">.</span>;  s<span class=\"sy0\">.</span>1=<span class=\"nu0\">2</span>  <span class=\"coMULTI\">/*initialize the  R, RR, and S  arrays.*/</span><br/>errs=<span class=\"nu0\">0</span>                                           <span class=\"coMULTI\">/*the number of errors found  (so far).*/</span><br/>             <span class=\"kw1\">do</span> i=low  <span class=\"kw2\">to</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*display the 1st  X  values of  R &amp; S.*/</span><br/>             <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'R('</span>i<span class=\"st0\">\") =\"</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>FFR<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'S('</span>i<span class=\"st0\">\") =\"</span>,<span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>FFS<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  list the 1st X Fig\u2500Fig numbers.*/</span><br/><span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">exit</span>                                <span class=\"coMULTI\">/*if X isn't positive, then we're done.*/</span><br/>$<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*initialize the memoization ($) array.*/</span><br/>             <span class=\"kw1\">do</span> m=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span>  bot;  r=FFR<span class=\"br0\">(</span>m<span class=\"br0\">)</span>;  $<span class=\"sy0\">.</span>r=<span class=\"nu0\">1</span> <span class=\"coMULTI\">/*calculate the first forty  R  values.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span>                         <span class=\"coMULTI\">/* [\u2191]  ($.)  is used for memoization. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  check for duplicate #s in R &amp; S*/</span><br/>             <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> top-bot;     s=FFS<span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*calculate the value of  FFS(n).      */</span><br/>             <span class=\"kw1\">if</span> $<span class=\"sy0\">.</span>s  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser <span class=\"st0\">'duplicate number in R and S lists:'</span> s;   $<span class=\"sy0\">.</span>s=<span class=\"nu0\">1</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span>                         <span class=\"coMULTI\">/* [\u2191]  calculate the 1st 960 S values.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  check for missing values in R\u2502S*/</span><br/>             <span class=\"kw1\">do</span> v=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> top;  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>$<span class=\"sy0\">.</span>v  <span class=\"kw3\">then</span>  <span class=\"kw1\">call</span> ser     <span class=\"st0\">'missing R \u2502 S:'</span>    v<br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*v*/</span>                         <span class=\"coMULTI\">/* [\u2191]  are all 1\u2264 numbers \u22641k present?*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">if</span> errs==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'verification completed for all numbers from  1 \u2500\u2500\u25ba'</span> top <span class=\"st0\">\"  [inclusive].\"</span><br/>            <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'verification failed with'</span>      errs      <span class=\"st0\">\"errors.\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>FFR: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> r<span class=\"sy0\">.</span> rr<span class=\"sy0\">.</span> s<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n     <span class=\"coMULTI\">/*obtain the number from the arguments.*/</span><br/>     <span class=\"kw1\">if</span> r<span class=\"sy0\">.</span>n<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> r<span class=\"sy0\">.</span>n                 <span class=\"coMULTI\">/*R.n  defined?  Then return the value.*/</span><br/>     _=FFR<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + FFS<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*calculate the  FFR  and  FFS  values.*/</span><br/>     r<span class=\"sy0\">.</span>n=_;       rr<span class=\"sy0\">.</span>_=<span class=\"nu0\">1</span>;        <span class=\"kw1\">return</span> _        <span class=\"coMULTI\">/*assign the value to R &amp; RR;   return.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>FFS: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> r<span class=\"sy0\">.</span> s<span class=\"sy0\">.</span> rr<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n     <span class=\"coMULTI\">/*search for not null  R or S  number. */</span><br/>     <span class=\"kw1\">if</span> s<span class=\"sy0\">.</span>n==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n               <span class=\"coMULTI\">/* [\u2193]  1st  IF  is a  SHORT CIRCUIT.  */</span><br/>                     <span class=\"kw1\">if</span> s<span class=\"sy0\">.</span>k<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> r<span class=\"sy0\">.</span>k<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*are both defined?*/</span><br/>                     <span class=\"kw1\">call</span> FFR k                  <span class=\"coMULTI\">/*define  R.k  via the  FFR  subroutine*/</span><br/>                     km=k-<span class=\"nu0\">1</span>;     _=s<span class=\"sy0\">.</span>km+<span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*calc. the next  S  number,  possibly.*/</span><br/>                     _=_+rr<span class=\"sy0\">.</span>_;   s<span class=\"sy0\">.</span>k=_           <span class=\"coMULTI\">/*define an element of  the  S  array. */</span><br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>     <span class=\"kw1\">return</span> s<span class=\"sy0\">.</span>n                                  <span class=\"coMULTI\">/*return   S.n   value to the invoker. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ser: errs=errs+<span class=\"nu0\">1</span>;    <span class=\"kw1\">say</span>  <span class=\"st0\">'***error***'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;                  <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Hofstadter Figure-Figure sequences<br/>\u00a0<br/>hofr = list(20)<br/>hofr[1] = 1<br/>hofs = []<br/>add(hofs,2)<br/>for n = 1 to 10<br/>      hofr[n+1] = hofr[n] + hofs[n]<br/>      if n = 1<br/>         add(hofs,4)<br/>      else<br/>         for p = hofr[n] + 1 to hofr[n+1] - 1<br/>               if p\u00a0!= hofs[n]<br/>                  add(hofs,p)<br/>               ok<br/>         next<br/>      ok<br/>next<br/>see \"First 10 values of R:\" + nl<br/>showarray(hofr)<br/>see \"First 10 values of S:\" + nl<br/>showarray(hofs)<br/>\u00a0<br/>func showarray(vect)<br/>         svect = \"\"<br/>        for n = 1 to 10<br/>              svect = svect + vect[n] + \" \"<br/>        next<br/>        svect = left(svect, len(svect) - 1)<br/>        see svect + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 42, "block": "<pre class=\"ruby highlighted_source\"><span class=\"re0\">$r</span> = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"re0\">$s</span> = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> buildSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  current = <span class=\"br0\">[</span> <span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"re0\">$s</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span>.<span class=\"me1\">max</span><br/>  <span class=\"kw1\">while</span> <span class=\"re0\">$r</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span>= n <span class=\"sy0\">||</span> <span class=\"re0\">$s</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span>= n<br/>    idx = <span class=\"br0\">[</span> <span class=\"re0\">$r</span>.<span class=\"me1\">length</span>, <span class=\"re0\">$s</span>.<span class=\"me1\">length</span> <span class=\"br0\">]</span>.<span class=\"me1\">min</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    current <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> current == <span class=\"re0\">$r</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$s</span><span class=\"br0\">[</span>idx<span class=\"br0\">]</span><br/>      <span class=\"re0\">$r</span> <span class=\"sy0\">&lt;&lt;</span> current<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"re0\">$s</span> <span class=\"sy0\">&lt;&lt;</span> current<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  buildSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"re0\">$r</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  buildSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"re0\">$s</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'set'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'test/unit'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> TestHofstadterFigureFigure <span class=\"sy0\">&lt;</span> <span class=\"kw4\"><span class=\"re2\">Test::Unit::TestCase</span></span><br/>  <span class=\"kw1\">def</span> test_first_ten_R_values<br/>    r10 = <span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    assert_equal<span class=\"br0\">(</span>r10, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">18</span>, <span class=\"nu0\">26</span>, <span class=\"nu0\">35</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">56</span>, <span class=\"nu0\">69</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> test_40_R_and_960_S_are_1_to_1000<br/>    rs_values = <span class=\"kw4\">Set</span>.<span class=\"me1\">new</span><br/>    rs_values.<span class=\"me1\">merge</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span>  <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>    rs_values.<span class=\"me1\">merge</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">960</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>    assert_equal<span class=\"br0\">(</span>rs_values, <span class=\"kw4\">Set</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HofstadterFigFigSeq <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"me1\">ListBuffer</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> ListBuffer<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> ListBuffer<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ffr<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ffri<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Unit <span class=\"sy0\">=</span> i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nrk <span class=\"sy0\">=</span> r.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rNext <span class=\"sy0\">=</span> r<span class=\"br0\">(</span>nrk<span class=\"br0\">)</span>+s<span class=\"br0\">(</span>nrk<span class=\"br0\">)</span><br/>      r +<span class=\"sy0\">=</span> rNext<br/>      <span class=\"br0\">(</span>r<span class=\"br0\">(</span>nrk<span class=\"br0\">)</span>+<span class=\"nu0\">2</span> to rNext-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">{</span>s +<span class=\"sy0\">=</span> <span class=\"sy0\">_</span><span class=\"br0\">}</span><br/>      s +<span class=\"sy0\">=</span> rNext+<span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>r.<span class=\"me1\">size</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>ffri<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    r<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ffs<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> ffr<span class=\"br0\">(</span>r.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    s<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>i<span class=\"sy0\">=&gt;</span><span class=\"br0\">(</span>i,ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>t<span class=\"sy0\">=&gt;</span>println<span class=\"br0\">(</span><span class=\"st0\">\"r(\"</span>+t.<span class=\"sy0\">_</span>1+<span class=\"st0\">\"): \"</span>+t.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">40</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>ffr<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>++<span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">960</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>ffs<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">)</span><span class=\"sy0\">==</span>List<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 35, "block": "<pre class=\"ruby highlighted_source\">var r = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>var s = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/>func ffsr<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>r.<span class=\"kw1\">end</span> <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    r <span class=\"sy0\">&lt;&lt;</span> s<span class=\"br0\">[</span>r.<span class=\"kw1\">end</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>r<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    s <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> .. <span class=\"me1\">r</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..., r<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span> s<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> _ <span class=\"br0\">}</span>...<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">return</span> n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func ffr<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> r<span class=\"br0\">[</span>ffsr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>func ffs<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> s<span class=\"br0\">[</span>ffsr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"  i: R(i) S(i)<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"==============<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d: \u00a0%3d \u00a0%3d<span class=\"es0\">\\n</span>\"</span>, i, ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, ffs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><br/><span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>R(40)=%3d S(960)=%3d R(41)=%3d<span class=\"es0\">\\n</span>\"</span>, ffr<span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span>, ffs<span class=\"br0\">(</span><span class=\"nu0\">960</span><span class=\"br0\">)</span>, ffr<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>var seen = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> seen<span class=\"br0\">{</span>ffr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span> <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">40</span><br/><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> seen<span class=\"br0\">{</span>ffs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span> <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">960</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>seen.<span class=\"me1\">count</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> <span class=\"br0\">(</span>k.<span class=\"me1\">to_i</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>k.<span class=\"me1\">to_i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>v == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> == <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"All occured exactly once.\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    var missed = <span class=\"br0\">{</span>\u00a0!seen.<span class=\"me1\">has_key</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">grep</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    var dupped = seen.<span class=\"me1\">grep</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>_, v<span class=\"sy0\">|</span> v <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span><br/>    say <span class=\"st0\">\"These were missed: #{missed}\"</span><br/>    say <span class=\"st0\">\"These were duplicated: #{dupped}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 43, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"kw1\">set</span><br/>\u00a0<br/><span class=\"co1\"># Core sequence generator engine; stores in $R and $S globals</span><br/><span class=\"kw1\">set</span> R <span class=\"br0\">{</span>R:-<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> S <span class=\"br0\">{</span>S:-<span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> buildSeq <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> R S<br/>    <span class=\"kw1\">set</span> ctr <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$R</span> end<span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$S</span> end<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$R</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span> || <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$S</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>min<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$R</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$S</span><span class=\"br0\">]</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> ctr<span class=\"br0\">]</span> == <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$R</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span>+<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$S</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> R <span class=\"re0\">$ctr</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> S <span class=\"re0\">$ctr</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Accessor procedures</span><br/><span class=\"kw1\">proc</span> ffr <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    buildSeq <span class=\"re0\">$n</span><br/>    <span class=\"kw2\">lindex</span> <span class=\"sy0\">$</span>::<span class=\"me1\">R</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> ffs <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    buildSeq <span class=\"re0\">$n</span><br/>    <span class=\"kw2\">lindex</span> <span class=\"sy0\">$</span>::<span class=\"me1\">S</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Show some things about the sequence</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"R($i) = [ffr $i]\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Considering {1..1000} vs {R(i)|i<span class=\"es0\">\\u</span>2208<span class=\"es0\">\\[</span>1,40<span class=\"es0\">\\]</span>}<span class=\"es0\">\\u</span>222a{S(i)|i<span class=\"es0\">\\u</span>2208<span class=\"es0\">\\[</span>1,960<span class=\"es0\">\\]</span>}\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> numsInSeq <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">40</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> numsRS <span class=\"br0\">[</span>ffr <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">960</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> numsRS <span class=\"br0\">[</span>ffs <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"set sizes: [struct::set size $numsInSeq] vs [struct::set size $numsRS]\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"set equality: [expr {[struct::set equal $numsInSeq $numsRS]?{yes}:{no}}]\"</span></pre>"}, {"lang": "uBasic/4tH", "loc": 101, "block": "<pre class=\"text highlighted_source\">Proc _SetBitR(1)                       ' Set the first R value<br/>Proc _SetBitS(2)                       ' Set the first S value<br/>\u00a0<br/>Print \"Creating bitmap, wait..\"        ' Create the bitmap<br/>Proc _MakeBitMap<br/>Print<br/>\u00a0<br/>Print \"R(1 .. 10):\";                   ' Print first 10 R-values<br/>\u00a0<br/>For x = 1 To 10<br/>  Print \" \";FUNC(_Rx(x));<br/>Next<br/>\u00a0<br/>Print\u00a0: Print \"S(1 .. 10):\";           ' Print first 10 S-values<br/>\u00a0<br/>For x = 1 To 10<br/>  Print \" \";FUNC(_Sx(x));<br/>Next<br/>\u00a0<br/>Print\u00a0: Print                          ' Terminate and skip line<br/>\u00a0<br/>For x = 0 To (1000/31)                 ' Check the first 1000 values<br/>  Print \"Checking \";(x*31)+1;\" to \";(x*31)+31;\":\\t\";<br/>  If XOR(@(x), @(x+64)) = 2147483647 Then<br/>     Print \"OK\"                        ' XOR R() and S() ranges<br/>  Else                                 ' should deliver MAX-N<br/>     Print \"Fail!\"                     ' or we did have an error<br/>  EndIf<br/>Next<br/>\u00a0<br/>For x = 1 to 40                        ' Prove there are only 40 R(x) values<br/>  If FUNC(_Rx(x)) &gt; 1000 Then Print \"R(\";x;\") value greater than 1000\"<br/>Next                                   ' below 1000<br/>\u00a0<br/>If FUNC(_Rx(x)) &lt; 1001 Then Print \"R(\";x;\") value also below 1000\"<br/>End<br/>\u00a0<br/>\u00a0<br/>_MakeBitMap                            ' Create the bitmap<br/>  Local (4)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"9cfddc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1                               ' Previous R(x) level<br/>  <a class=\"__cf_email__\" data-cfemail=\"d2b092\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1                               ' Previous R(x) value<br/>\u00a0<br/>  Do Until <a class=\"__cf_email__\" data-cfemail=\"197b59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; (1000/31)*32           ' Fill up an entire array element<br/>                                       ' calculate R(x+1) level<br/>    <a class=\"__cf_email__\" data-cfemail=\"a6c5e6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = FUNC(_Rx(<a class=\"__cf_email__\" data-cfemail=\"fd9cbd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) + FUNC(_Sx(<a class=\"__cf_email__\" data-cfemail=\"533213\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>    Proc _SetBitR (<a class=\"__cf_email__\" data-cfemail=\"1f7c5f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                 ' Set R(x+1) in the bitmap<br/>\u00a0<br/>    For <a class=\"__cf_email__\" data-cfemail=\"781c38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"305270\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1 To <a class=\"__cf_email__\" data-cfemail=\"3c5f7c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1          ' Set all intermediate S() values<br/>      Proc _SetBitS (<a class=\"__cf_email__\" data-cfemail=\"80e4c0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)               ' between R(x) and R(x+1)<br/>    Next<br/>\u00a0<br/>    Proc _SetBitS (<a class=\"__cf_email__\" data-cfemail=\"462506\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1)               ' Number after R(x) is always S()<br/>    <a class=\"__cf_email__\" data-cfemail=\"fd9fbd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"197a59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                            ' R(x+1) now becomes R(x)<br/>    <a class=\"__cf_email__\" data-cfemail=\"731233\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"452405\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1                        ' Increment level<br/>  Loop                                 ' Now do it again<br/>Return<br/>\u00a0<br/>\u00a0<br/>_Rx Param(1)                           ' Return value R(x)<br/>  Local(2)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"9cfedc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0                               ' No value found so far<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"701330\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 To (64*31)-1              ' Check the entire bitmap<br/>    If (FUNC(_GetBitR(<a class=\"__cf_email__\" data-cfemail=\"84e7c4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))) Then <a class=\"__cf_email__\" data-cfemail=\"c4a684\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"a8cae8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>    Until <a class=\"__cf_email__\" data-cfemail=\"6c0e2c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"2e4f6e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                      ' If a value found, increment counter<br/>  Next                                 ' Until the required level is reached<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"721132\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' Return position in bitmap<br/>\u00a0<br/>\u00a0<br/>_Sx Param(1)                           ' Return value S(x)<br/>  Local(2)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"781a38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0                               ' No value found so far<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"87e4c7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 To (64*31)-1              ' Check the entire bitmap<br/>    If (FUNC(_GetBitS(<a class=\"__cf_email__\" data-cfemail=\"eb88ab\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))) Then <a class=\"__cf_email__\" data-cfemail=\"0b694b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"1f7d5f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>    Until <a class=\"__cf_email__\" data-cfemail=\"335173\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"6f0e2f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                      ' If a value found, increment counter<br/>  Next                                 ' Until the required level is reached<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"bbd8fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' Return position in bitmap<br/>\u00a0<br/>\u00a0<br/>_SetBitR Param(1)                      ' Set bit n-1 in R-bitmap<br/>  <a class=\"__cf_email__\" data-cfemail=\"066746\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"89e8c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>  @(<a class=\"__cf_email__\" data-cfemail=\"610021\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/31) = OR(@(<a class=\"__cf_email__\" data-cfemail=\"036243\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/31), SHL(1,<a class=\"__cf_email__\" data-cfemail=\"dcbd9c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%31))<br/>Return<br/>\u00a0<br/>_GetBitR Param(1)                      ' Return bit n-1 in R-bitmap<br/>  <a class=\"__cf_email__\" data-cfemail=\"80e1c0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"7c1d3c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>Return (AND(@(<a class=\"__cf_email__\" data-cfemail=\"0c6d4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/31), SHL(1,<a class=\"__cf_email__\" data-cfemail=\"bcddfc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%31))#0)<br/>\u00a0<br/>_SetBitS Param(1)                      ' Set bit n-1 in S-bitmap<br/>  <a class=\"__cf_email__\" data-cfemail=\"fc9dbc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"523312\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>  @(<a class=\"__cf_email__\" data-cfemail=\"ba8c8e91dbfa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/31) = OR(@(<a class=\"__cf_email__\" data-cfemail=\"1620223d7756\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/31), SHL(1,<a class=\"__cf_email__\" data-cfemail=\"c6a786\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%31))<br/>Return<br/>\u00a0<br/>_GetBitS Param(1)                      ' Return bit n-1 in S-bitmap<br/>  <a class=\"__cf_email__\" data-cfemail=\"ff9ebf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"b2d3f2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1<br/>Return (AND(@(<a class=\"__cf_email__\" data-cfemail=\"3600021d5776\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>/31), SHL(1,<a class=\"__cf_email__\" data-cfemail=\"83e2c3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%31))#0)</pre>"}, {"lang": "VBScript", "loc": 72, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'Initialize the r and the s arrays.<br/></span><span class=\"kw4\">Set</span> r = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/><span class=\"kw4\">Set</span> s = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/>\u00a0<br/><span class=\"co1\">'Set initial values of r.<br/></span>r.Add <span class=\"st0\">\"\"</span> \u00a0: r.Add 1<br/>\u00a0<br/><span class=\"co1\">'Set initial values of s.<br/></span>s.Add <span class=\"st0\">\"\"</span>\u00a0: s.Add 2<br/>\u00a0<br/><span class=\"co1\">'Populate the r and the s arrays.<br/></span><span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> 1000<br/>\tffr(i)<br/>\tffs(i)<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"co1\">'r function<br/></span><span class=\"kw2\">Function</span> ffr(n)<br/>\tr.Add r(n-1)+s(n-1)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'s function<br/></span><span class=\"kw2\">Function</span> ffs(n)<br/>\t<span class=\"co1\">'index is the value of the last element of the s array.<br/></span>\tindex = s(n-1)+1<br/>\t<span class=\"kw3\">Do</span><br/>                <span class=\"co1\">'Add to s if the current index is not in the r array.<br/></span>\t\t<span class=\"kw3\">If</span> r.IndexOf(index,0) = -1 <span class=\"kw3\">Then</span><br/>\t\t\ts.Add index<br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tindex = index + 1<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Display the first 10 values of r.<br/></span>WScript.StdOut.Write <span class=\"st0\">\"First 10 Values of R:\"</span><br/>WScript.StdOut.WriteLine<br/><span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 10<br/>\t<span class=\"kw3\">If</span> j = 10 <span class=\"kw3\">Then</span><br/>\t\tWScript.StdOut.Write <span class=\"st0\">\"and \"</span> &amp; r(j)<br/>\t<span class=\"kw3\">Else</span><br/>\t\tWScript.StdOut.Write r(j) &amp; <span class=\"st0\">\", \"</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span><br/>WScript.StdOut.WriteBlankLines(2)<br/>\u00a0<br/><span class=\"co1\">'Show that the first 40 values of r plus the first 960 values of s include all the integers from 1 to 1000 exactly once.<br/></span><span class=\"co1\">'The idea here is to create another array(integer) with 1000 elements valuing from 1 to 1000. Go through the first 40 values<br/></span><span class=\"co1\">'of the r array and remove the corresponding element in the integer array.  Do the same thing with the first 960 values of<br/></span><span class=\"co1\">'the s array.  If the resultant count of the integer array is 0 then it is a pass.<br/></span><span class=\"kw4\">Set</span> integers = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/><span class=\"kw3\">For</span> k = 1 <span class=\"kw3\">To</span> 1000<br/>\tintegers.Add k<br/><span class=\"kw3\">Next</span><br/><span class=\"kw3\">For</span> l = 1 <span class=\"kw3\">To</span> 960<br/>\t<span class=\"kw3\">If</span> l &lt;= 40 <span class=\"kw3\">Then</span><br/>\t\tintegers.Remove(r(l))<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\tintegers.Remove(s(l))<br/><span class=\"kw3\">Next</span><br/>WScript.StdOut.Write <span class=\"st0\">\"Test for the first 1000 integers: \"</span><br/><span class=\"kw3\">If</span> integers.Count = 0 <span class=\"kw3\">Then</span><br/>\tWScript.StdOut.Write <span class=\"st0\">\"Passed!!!\"</span><br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Else</span><br/>\tWScript.StdOut.Write <span class=\"st0\">\"Miserably Failed!!!\"</span><br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn genRS(reset=False){ //--&gt;(n,R,S)<br/>  var n=0, Rs=L(0,1), S=2;<br/>  if(True==reset){ n=0; Rs=L(0,1); S=2; return(); }<br/>\u00a0<br/>  if (n==0) return(n=1,1,2);<br/>  R:=Rs[-1] + S; Rs.append(R);<br/>  foreach s in ([S+1..]){<br/>     if(not Rs.holds(s)) { S=s; break; } // trimming Rs doesn't save space<br/>  }<br/>  return(n+=1,R,S);<br/>}<br/>fcn ffrs(n) { genRS(True); do(n){ n=genRS() } n[1,2] }  //--&gt;( R(n),S(n) )</pre>"}]}