{"task": "Polymorphic_copy", "blocks": [{"lang": "Ada", "loc": 53, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Polymorphic_Copy <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Base <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> T <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>      <span class=\"kw3\">type</span> T_ptr <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">all</span> T'Class;<br/>      <span class=\"kw3\">function</span> Name <span class=\"br0\">(</span>X\u00a0: T<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>   <span class=\"kw1\">end</span> Base;<br/>   <span class=\"kw3\">use</span> Base;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> <span class=\"kw3\">body</span> Base <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> Name <span class=\"br0\">(</span>X\u00a0: T<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"T\"</span>;<br/>      <span class=\"kw1\">end</span> Name;<br/>   <span class=\"kw1\">end</span> Base;<br/>\u00a0<br/>      <span class=\"co1\">-- The procedure knows nothing about S</span><br/>   <span class=\"kw3\">procedure</span> Copier <span class=\"br0\">(</span>X\u00a0: T'Class<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Duplicate\u00a0: T'Class\u00a0:= X;  <span class=\"co1\">-- A copy of X</span><br/>   <span class=\"kw1\">begin</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Copied \"</span> &amp; Duplicate.<span class=\"me1\">Name</span><span class=\"br0\">)</span>; <span class=\"co1\">-- Check the copy</span><br/>   <span class=\"kw1\">end</span> Copier;<br/>\u00a0<br/>      <span class=\"co1\">-- The function knows nothing about S and creates a copy on the heap</span><br/>   <span class=\"kw3\">function</span> Clone <span class=\"br0\">(</span>X\u00a0: T'Class<span class=\"br0\">)</span> <span class=\"kw1\">return</span> T_ptr <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">new</span> T'Class<span class=\"br0\">(</span>X<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Copier;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Derived <span class=\"kw1\">is</span>   <br/>      <span class=\"kw3\">type</span> S <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> T <span class=\"kw3\">with</span> <span class=\"kw3\">null</span> <span class=\"kw3\">record</span>;<br/>      <span class=\"kw3\">overriding</span> <span class=\"kw3\">function</span> Name <span class=\"br0\">(</span>X\u00a0: S<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>   <span class=\"kw1\">end</span> Derived;<br/>   <span class=\"kw3\">use</span> Derived;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> <span class=\"kw3\">body</span> Derived <span class=\"kw1\">is</span>   <br/>      <span class=\"kw3\">function</span> Name <span class=\"br0\">(</span>X\u00a0: S<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span>;<br/>      <span class=\"kw1\">end</span> Name;<br/>   <span class=\"kw1\">end</span> Derived;<br/>\u00a0<br/>   Object_1\u00a0: T;<br/>   Object_2\u00a0: S;<br/>   Object_3\u00a0: T_ptr\u00a0:= Clone<span class=\"br0\">(</span>T<span class=\"br0\">)</span>;<br/>   Object_4\u00a0: T_ptr\u00a0:= Clone<span class=\"br0\">(</span>S<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Copier <span class=\"br0\">(</span>Object_1<span class=\"br0\">)</span>;<br/>   Copier <span class=\"br0\">(</span>Object_2<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Cloned \"</span> &amp; Object_3.<span class=\"kw3\">all</span>.<span class=\"me1\">Name</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Cloned \"</span> &amp; Object_4.<span class=\"kw3\">all</span>.<span class=\"me1\">Name</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Polymorphic_Copy;</pre>"}, {"lang": "Aikido", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class T {<br/>    public function print {<br/>        println (\"class T\")<br/>    }<br/>}<br/>\u00a0<br/>class S extends T {<br/>    public function print {<br/>        println (\"class S\")<br/>    }<br/>}<br/>\u00a0<br/>var t = new T()<br/>var s = new S()<br/>println (\"before copy\")<br/>t.print()<br/>s.print()<br/>\u00a0<br/>var tcopy = clone (t, false)<br/>var scopy = clone (s, false)<br/>println (\"after copy\")<br/>tcopy.print()<br/>scopy.print()<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 28, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$ + \"CLASSLIB\"<br/>\u00a0<br/>      REM Create parent class T:<br/>      DIM classT{array#(0), setval, retval}<br/>      DEF classT.setval (n%,v) classT.array#(n%) = v\u00a0: ENDPROC<br/>      DEF classT.retval (n%) = classT.array#(n%)<br/>      PROC_class(classT{})<br/>\u00a0<br/>      REM Create class S derived from T, known only at run-time:<br/>      RunTimeSize% = RND(100)<br/>      DIM classS{array#(RunTimeSize%)}<br/>      PROC_inherit(classS{}, classT{})<br/>      DEF classS.retval (n%) = classS.array#(n%) ^ 2\u00a0: REM Overridden method<br/>      PROC_class(classS{})<br/>\u00a0<br/>      REM Create an instance of class S:<br/>      PROC_new(myobject{}, classS{})<br/>\u00a0<br/>      REM Now make a copy of the instance:<br/>      DIM mycopy{} = myobject{}<br/>      mycopy{} = myobject{}<br/>      PROC_discard(myobject{})<br/>\u00a0<br/>      REM Test the copy (should print 123^2):<br/>      PROC(mycopy.setval)(RunTimeSize%, 123)<br/>      result% = FN(mycopy.retval)(RunTimeSize%)<br/>      PRINT result%<br/>      END</pre>"}, {"lang": "C", "loc": 202, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> object <span class=\"sy0\">*</span>BaseObj<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sclass <span class=\"sy0\">*</span>Class<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>CloneFctn<span class=\"br0\">)</span><span class=\"br0\">(</span>BaseObj s<span class=\"sy0\">,</span> BaseObj clo<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>SpeakFctn<span class=\"br0\">)</span><span class=\"br0\">(</span>BaseObj s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>DestroyFctn<span class=\"br0\">)</span><span class=\"br0\">(</span>BaseObj s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sclass <span class=\"br0\">{</span><br/>    <span class=\"kw4\">size_t</span> csize<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* size of the class instance */</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span>  <span class=\"sy0\">*</span>cname<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* name of the class */</span><br/>    Class  parent<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* parent class */</span><br/>\u00a0<br/>    CloneFctn clone<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* clone function */</span><br/>    SpeakFctn speak<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* speak function */</span><br/>    DestroyFctn del<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* delete the object */</span><br/><span class=\"br0\">}</span> sClass<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> object <span class=\"br0\">{</span><br/>    Class class<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> SObject<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <br/>BaseObj obj_copy<span class=\"br0\">(</span> BaseObj s<span class=\"sy0\">,</span> Class c <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    BaseObj clo<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"sy0\">-&gt;</span>parent<span class=\"br0\">)</span> <br/>        clo <span class=\"sy0\">=</span> obj_copy<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> c<span class=\"sy0\">-&gt;</span>parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <br/>        clo <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span> s<span class=\"sy0\">-&gt;</span>class<span class=\"sy0\">-&gt;</span>csize <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>clo<span class=\"br0\">)</span><br/>        c<span class=\"sy0\">-&gt;</span>clone<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> clo <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> clo<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">void</span> obj_del<span class=\"br0\">(</span> BaseObj s<span class=\"sy0\">,</span> Class c <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"sy0\">-&gt;</span>del<span class=\"br0\">)</span><br/>        c<span class=\"sy0\">-&gt;</span>del<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c<span class=\"sy0\">-&gt;</span>parent<span class=\"br0\">)</span><br/>        obj_del<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> c<span class=\"sy0\">-&gt;</span>parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BaseObj ObjClone<span class=\"br0\">(</span> BaseObj s <span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"kw1\">return</span> obj_copy<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> s<span class=\"sy0\">-&gt;</span>class <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> ObjSpeak<span class=\"br0\">(</span> BaseObj s <span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">-&gt;</span>class<span class=\"sy0\">-&gt;</span>speak<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> ObjDestroy<span class=\"br0\">(</span> BaseObj s <span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span> obj_del<span class=\"br0\">(</span> s<span class=\"sy0\">,</span> s<span class=\"sy0\">-&gt;</span>class <span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* * * * * * */</span><br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">void</span> baseClone<span class=\"br0\">(</span> BaseObj s<span class=\"sy0\">,</span> BaseObj clone<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>  <br/>    clone<span class=\"sy0\">-&gt;</span>class <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>class<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>baseSpeak<span class=\"br0\">(</span>BaseObj s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"Hello, I'm base object\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>sClass boc <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>SObject<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"BaseObj\"</span><span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> <br/>    <span class=\"sy0\">&amp;</span>baseClone<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>baseSpeak<span class=\"sy0\">,</span> NULL <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Class BaseObjClass <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>boc<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* * * * * * */</span><br/><span class=\"coMULTI\">/* Dog - a derived class */</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sDogPart <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> weight<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> color<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> name<span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> DogPart<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sDog <span class=\"sy0\">*</span>Dog<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> sDog <span class=\"br0\">{</span><br/>    Class   class<span class=\"sy0\">;</span>\t\t<span class=\"co1\">// parent structure</span><br/>    DogPart dog<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">void</span> dogClone<span class=\"br0\">(</span> BaseObj s<span class=\"sy0\">,</span> BaseObj c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>  <br/>    Dog src <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Dog<span class=\"br0\">)</span>s<span class=\"sy0\">;</span><br/>    Dog clone <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Dog<span class=\"br0\">)</span>c<span class=\"sy0\">;</span><br/>    clone<span class=\"sy0\">-&gt;</span>dog <span class=\"sy0\">=</span> src<span class=\"sy0\">-&gt;</span>dog<span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* no pointers so strncpys not needed */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>dogSpeak<span class=\"br0\">(</span> BaseObj s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Dog d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Dog<span class=\"br0\">)</span>s<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">char</span>  response<span class=\"br0\">[</span><span class=\"nu0\">90</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>response<span class=\"sy0\">,</span> <span class=\"st0\">\"woof! woof! My name is\u00a0%s. I'm a\u00a0%s\u00a0%s\"</span><span class=\"sy0\">,</span> <br/>            d<span class=\"sy0\">-&gt;</span>dog.<span class=\"me1\">name</span><span class=\"sy0\">,</span> d<span class=\"sy0\">-&gt;</span>dog.<span class=\"me1\">color</span><span class=\"sy0\">,</span> d<span class=\"sy0\">-&gt;</span>class<span class=\"sy0\">-&gt;</span>cname<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> response<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>sClass dogc <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sDog<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Dog\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>boc<span class=\"sy0\">,</span><br/>    <span class=\"sy0\">&amp;</span>dogClone<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>dogSpeak<span class=\"sy0\">,</span> NULL <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Class DogClass <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>dogc<span class=\"sy0\">;</span><br/>\u00a0<br/>BaseObj NewDog<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>color<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> weight <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Dog dog <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>DogClass<span class=\"sy0\">-&gt;</span>csize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dog<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        DogPart <span class=\"sy0\">*</span>dogp <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>dog<span class=\"sy0\">-&gt;</span>dog<span class=\"sy0\">;</span><br/>        dog<span class=\"sy0\">-&gt;</span>class <span class=\"sy0\">=</span> DogClass<span class=\"sy0\">;</span><br/>        dogp<span class=\"sy0\">-&gt;</span>weight <span class=\"sy0\">=</span> weight<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>dogp<span class=\"sy0\">-&gt;</span>name<span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>dogp<span class=\"sy0\">-&gt;</span>color<span class=\"sy0\">,</span> color<span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>BaseObj<span class=\"br0\">)</span>dog<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* * * * * * * * * */</span><br/><span class=\"coMULTI\">/* Ferret - a derived class */</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sFerretPart <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> color<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> name<span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span>  age<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> FerretPart<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sFerret <span class=\"sy0\">*</span>Ferret<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> sFerret <span class=\"br0\">{</span><br/>    Class   class<span class=\"sy0\">;</span>\t\t<span class=\"co1\">// parent structure</span><br/>    FerretPart ferret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">void</span> ferretClone<span class=\"br0\">(</span> BaseObj s<span class=\"sy0\">,</span> BaseObj c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span>  <br/>    Ferret src <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Ferret<span class=\"br0\">)</span>s<span class=\"sy0\">;</span><br/>    Ferret clone <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Ferret<span class=\"br0\">)</span>c<span class=\"sy0\">;</span><br/>    clone<span class=\"sy0\">-&gt;</span>ferret <span class=\"sy0\">=</span> src<span class=\"sy0\">-&gt;</span>ferret<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* no pointers so strncpys not needed */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ferretSpeak<span class=\"br0\">(</span>BaseObj s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Ferret f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Ferret<span class=\"br0\">)</span>s<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">char</span>  response<span class=\"br0\">[</span><span class=\"nu0\">90</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>response<span class=\"sy0\">,</span> <span class=\"st0\">\"My name is\u00a0%s. I'm a\u00a0%d mo. old\u00a0%s wiley\u00a0%s\"</span><span class=\"sy0\">,</span> <br/>            f<span class=\"sy0\">-&gt;</span>ferret.<span class=\"me1\">name</span><span class=\"sy0\">,</span> f<span class=\"sy0\">-&gt;</span>ferret.<span class=\"me1\">age</span><span class=\"sy0\">,</span> f<span class=\"sy0\">-&gt;</span>ferret.<span class=\"me1\">color</span><span class=\"sy0\">,</span><br/>            f<span class=\"sy0\">-&gt;</span>class<span class=\"sy0\">-&gt;</span>cname<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> response<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>sClass ferretc <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> sFerret<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ferret\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>boc<span class=\"sy0\">,</span> <br/>    <span class=\"sy0\">&amp;</span>ferretClone<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>ferretSpeak<span class=\"sy0\">,</span> NULL <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Class FerretClass <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>ferretc<span class=\"sy0\">;</span><br/>\u00a0<br/>BaseObj NewFerret<span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>color<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> age <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Ferret ferret <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>FerretClass<span class=\"sy0\">-&gt;</span>csize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ferret<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        FerretPart <span class=\"sy0\">*</span>ferretp <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>ferret<span class=\"sy0\">-&gt;</span>ferret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ferret<span class=\"sy0\">-&gt;</span>class <span class=\"sy0\">=</span> FerretClass<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>ferretp<span class=\"sy0\">-&gt;</span>name<span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>ferretp<span class=\"sy0\">-&gt;</span>color<span class=\"sy0\">,</span> color<span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        ferretp<span class=\"sy0\">-&gt;</span>age <span class=\"sy0\">=</span> age<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>BaseObj<span class=\"br0\">)</span>ferret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* * Now you really understand why Bjarne created C++ * */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    BaseObj  o1<span class=\"sy0\">;</span><br/>    BaseObj  kara <span class=\"sy0\">=</span> NewFerret<span class=\"br0\">(</span> <span class=\"st0\">\"Kara\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"grey\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    BaseObj  bruce <span class=\"sy0\">=</span> NewDog<span class=\"br0\">(</span><span class=\"st0\">\"Bruce\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"yellow\"</span><span class=\"sy0\">,</span> <span class=\"nu16\">85.0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ok created things<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    o1 <span class=\"sy0\">=</span> ObjClone<span class=\"br0\">(</span>kara <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Karol says\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ObjSpeak<span class=\"br0\">(</span>o1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Kara says\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ObjSpeak<span class=\"br0\">(</span>kara<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ObjDestroy<span class=\"br0\">(</span>o1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    o1 <span class=\"sy0\">=</span> ObjClone<span class=\"br0\">(</span>bruce <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>Dog<span class=\"br0\">)</span>o1<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>dog.<span class=\"me1\">name</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Donald\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Don says\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ObjSpeak<span class=\"br0\">(</span>o1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Bruce says\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ObjSpeak<span class=\"br0\">(</span>bruce<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ObjDestroy<span class=\"br0\">(</span>o1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 39, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> T<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> <span class=\"kw4\">string</span> Name<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"T\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> T Clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> S <span class=\"sy0\">:</span> T<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> Name<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> T Clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        T original <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        T clone <span class=\"sy0\">=</span> original<span class=\"sy0\">.</span><span class=\"me1\">Clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>original<span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>clone<span class=\"sy0\">.</span><span class=\"me1\">Name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 50, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> T<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> identify<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"I am a genuine T\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">virtual</span> T<span class=\"sy2\">*</span> clone<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">new</span> T<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">virtual</span> ~T<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> S<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> T<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> identify<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"I am an S\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw2\">virtual</span> S<span class=\"sy2\">*</span> clone<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">new</span> S<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> X <span class=\"co1\">// the class of the object which contains a T or S</span><br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"co1\">// by getting the object through a pointer to T, X cannot know if it's an S or a T</span><br/>  X<span class=\"br0\">(</span>T<span class=\"sy2\">*</span> t<span class=\"br0\">)</span><span class=\"sy4\">:</span> member<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// copy constructor</span><br/>  X<span class=\"br0\">(</span>X <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span><span class=\"sy4\">:</span> member<span class=\"br0\">(</span>other.<span class=\"me1\">member</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>clone<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// copy assignment operator</span><br/>  X<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span>X <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    T<span class=\"sy2\">*</span> new_member <span class=\"sy1\">=</span> other.<span class=\"me1\">member</span><span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>clone<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">delete</span> member<span class=\"sy4\">;</span><br/>    member <span class=\"sy1\">=</span> new_member<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// destructor</span><br/>  ~X<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">delete</span> member<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// check what sort of object it contains</span><br/>  <span class=\"kw4\">void</span> identify_member<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> member<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>identify<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  T<span class=\"sy2\">*</span> member<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  X original<span class=\"br0\">(</span><span class=\"kw3\">new</span> S<span class=\"br0\">)</span><span class=\"sy4\">;</span>      <span class=\"co1\">// construct an X and give it an S,</span><br/>  X copy <span class=\"sy1\">=</span> original<span class=\"sy4\">;</span>      <span class=\"co1\">// copy it,</span><br/>  copy.<span class=\"me1\">identify_member</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// and check what type of member it contains</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defstruct super foo<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defstruct <span class=\"br0\">(</span>sub <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">include</span> super<span class=\"br0\">)</span><span class=\"br0\">)</span> bar<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defgeneric frob <span class=\"br0\">(</span>thing<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod frob <span class=\"br0\">(</span><span class=\"br0\">(</span>super super<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~&amp;Super has foo = ~w.\"</span> <span class=\"br0\">(</span>super-foo super<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod frob <span class=\"br0\">(</span><span class=\"br0\">(</span>sub sub<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~&amp;Sub has foo = ~w, bar = ~w.\"</span><br/>          <span class=\"br0\">(</span>sub-foo sub<span class=\"br0\">)</span> <span class=\"br0\">(</span>sub-bar sub<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">class</span> T <span class=\"br0\">{</span><br/>    <span class=\"kw4\">override</span> <span class=\"kw4\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"I'm the instance of T\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    T duplicate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> T<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> S <span class=\"sy0\">:</span> T <span class=\"br0\">{</span><br/>    <span class=\"kw4\">override</span> <span class=\"kw4\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"I'm the instance of S\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">override</span> T duplicate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> S<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    T orig <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> S<span class=\"sy0\">;</span><br/>    T copy <span class=\"sy0\">=</span> orig.<span class=\"me1\">duplicate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>copy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 33, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> PolymorphicCopy<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  T <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>    <span class=\"kw1\">function</span> Name<span class=\"sy1\">:</span><span class=\"kw4\">String</span><span class=\"sy1\">;</span> <span class=\"kw1\">virtual</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> Clone<span class=\"sy1\">:</span>T<span class=\"sy1\">;</span> <span class=\"kw1\">virtual</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  S <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>T<span class=\"br0\">)</span><br/>    <span class=\"kw1\">function</span> Name<span class=\"sy1\">:</span><span class=\"kw4\">String</span><span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> Clone<span class=\"sy1\">:</span>T<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> T<span class=\"sy1\">.</span><span class=\"me1\">Name</span> <span class=\"sy1\">:</span><span class=\"kw4\">String</span><span class=\"sy1\">;</span> <span class=\"kw1\">begin</span> <span class=\"kw3\">Exit</span><span class=\"br0\">(</span><span class=\"st0\">'T'</span><span class=\"br0\">)</span>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> T<span class=\"sy1\">.</span><span class=\"me1\">Clone</span><span class=\"sy1\">:</span>T<span class=\"sy1\">;</span>      <span class=\"kw1\">begin</span> <span class=\"kw3\">Exit</span><span class=\"br0\">(</span>T<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">)</span><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> S<span class=\"sy1\">.</span><span class=\"me1\">Name</span> <span class=\"sy1\">:</span><span class=\"kw4\">String</span><span class=\"sy1\">;</span> <span class=\"kw1\">begin</span> <span class=\"kw3\">Exit</span><span class=\"br0\">(</span><span class=\"st0\">'S'</span><span class=\"br0\">)</span>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> S<span class=\"sy1\">.</span><span class=\"me1\">Clone</span><span class=\"sy1\">:</span>T<span class=\"sy1\">;</span>      <span class=\"kw1\">begin</span> <span class=\"kw3\">Exit</span><span class=\"br0\">(</span>S<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">)</span><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Main<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  Original<span class=\"sy1\">,</span> Clone <span class=\"sy1\">:</span>T<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Original <span class=\"sy1\">:</span><span class=\"sy3\">=</span> S<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  Clone    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Original<span class=\"sy1\">.</span><span class=\"me1\">Clone</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Original<span class=\"sy1\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Clone<span class=\"sy1\">.</span><span class=\"me1\">Name</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Main<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 5, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> deSubgraphKit <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elib<span class=\"sy0\">:</span>serial.<span class=\"me1\">deSubgraphKit</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> copy<span class=\"br0\">(</span>object<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return deSubgraphKit.<span class=\"me1\">recognize</span><span class=\"br0\">(</span>object<span class=\"sy0\">,</span> deSubgraphKit.<span class=\"me1\">makeBuilder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'types<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'struct<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>struct <span class=\"kw1\">T</span> <span class=\"br0\">(</span>integer:x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; super class</span><br/><span class=\"br0\">(</span>struct <span class=\"kw1\">S</span> <span class=\"kw1\">T</span> <span class=\"br0\">(</span>integer:y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; sub class</span><br/><span class=\"br0\">(</span>struct K <span class=\"br0\">(</span><span class=\"kw1\">T</span>:box<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; container class, box must be of type T, or derived </span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> k<span class=\"sy0\">-</span>source <span class=\"br0\">(</span>K <span class=\"br0\">(</span><span class=\"kw1\">S</span> <span class=\"nu0\">33</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> k<span class=\"sy0\">-</span>copy <span class=\"br0\">(</span>copy k<span class=\"sy0\">-</span>source<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>k<span class=\"sy0\">-</span>source<br/>    \u2192 #<span class=\"sy0\">&lt;</span>K<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>#<span class=\"sy0\">&lt;</span>S<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">33</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; new container, with a S in box</span><br/>k<span class=\"sy0\">-</span>copy<br/>    \u2192 #<span class=\"sy0\">&lt;</span>K<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>#<span class=\"sy0\">&lt;</span>S<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">33</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; copied S type</span><br/>\u00a0<br/><span class=\"br0\">(</span>set<span class=\"sy0\">-</span>S<span class=\"sy0\">-</span>y<span class=\"sy0\">!</span> <span class=\"br0\">(</span>K<span class=\"sy0\">-</span>box k<span class=\"sy0\">-</span>source<span class=\"br0\">)</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span> <span class=\"co1\">;; modify k-source.box.y</span><br/>\u00a0<br/>k<span class=\"sy0\">-</span>source<br/>    \u2192 #<span class=\"sy0\">&lt;</span>K<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>#<span class=\"sy0\">&lt;</span>S<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">33</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; modified</span><br/>k<span class=\"sy0\">-</span>copy<br/>    \u2192 #<span class=\"sy0\">&lt;</span>K<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>#<span class=\"sy0\">&lt;</span>S<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">33</span> <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;; unmodified</span><br/>\u00a0<br/><span class=\"br0\">(</span>K <span class=\"st0\">\"string-inside\"</span><span class=\"br0\">)</span> <span class=\"co1\">;; trying to put a string in the container box</span><br/>\ud83d\ude21 error: <span class=\"kw1\">T</span>\u00a0: type<span class=\"sy0\">-</span>check failure\u00a0: string<span class=\"sy0\">-</span>inside \u2192 'K:box'<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 24, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>class T<br/>{<br/>    Name = \"T\".<br/>\u00a0<br/>    clone = T new.<br/>}<br/>\u00a0<br/>class S\u00a0:: T<br/>{<br/>    Name = \"S\".<br/>\u00a0<br/>    clone = S new.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    type&lt;T&gt; original\u00a0:= S new.<br/>    type&lt;T&gt; clone\u00a0:= original clone.<br/>\u00a0<br/>    console printLine(original Name).<br/>    console printLine(clone Name).<br/>].</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"co1\">// expose protected MemberwiseClone method (and downcast the result)</span><br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">Clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x.<span class=\"me1\">MemberwiseClone</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0:?<span class=\"sy0\">&gt;</span> T<br/>  <span class=\"co1\">// virtual method Print with default implementation</span><br/>  <span class=\"kw1\">abstract</span> Print\u00a0: <span class=\"kw4\">unit</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">unit</span><br/>  <span class=\"kw1\">default</span> x.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> printfn <span class=\"st0\">\"I'm a T!\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">inherit</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">override</span> x.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> printfn <span class=\"st0\">\"I'm an S!\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> s2 <span class=\"sy0\">=</span> s.<span class=\"me1\">Clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// the static type of s2 is T, but it \"points\" to an S</span><br/>s2.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// prints \"I'm an S!\"</span></pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">USING: classes kernel prettyprint serialize\u00a0;<br/>TUPLE: A\u00a0;<br/>TUPLE: C &lt; A\u00a0;<br/>: serial-clone ( obj -- obj' ) object&gt;bytes bytes&gt;object\u00a0;<br/>\u00a0<br/>C new<br/>[ clone ]<br/>[ serial-clone ] bi [ class . ] <a class=\"__cf_email__\" data-cfemail=\"afcdc6ef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Forth", "loc": 36, "block": "<pre class=\"text highlighted_source\">include lib/memcell.4th<br/>include 4pp/lib/foos.4pp<br/>                                       ( a1 -- a2)<br/>:token fork dup allocated dup (~~alloc) swap &gt;r swap over r&gt; smove\u00a0;<br/>                                       \\ allocate an empty object<br/>:: T()                                 \\ super class T<br/>   class<br/>     method: print                     \\ print message<br/>     method: clone                     \\ clone yourself<br/>   end-class {<br/>                                       \\ implementing methods<br/>    \u00a0:method { .\" class T\" cr }\u00a0; defines print<br/>     fork defines clone                ( -- addr)<br/>   }<br/>;<br/>\u00a0<br/>:: S()                                 \\ class S<br/>   extends T()                         \\ derived from T<br/>   end-extends {                       \\ print message<br/>    \u00a0:method { .\" class S\" cr }\u00a0; defines print<br/>   }                                   \\ clone yourself<br/>;<br/>\u00a0<br/>new T() t                              \\ create a new object t<br/>new S() s                              \\ create a new object s<br/>\u00a0<br/>.\" before copy\" cr<br/>t =&gt; print                             \\ use \"print\" methods<br/>s =&gt; print<br/>\u00a0<br/>t =&gt; clone to tcopy                    \\ cloning t, spawning tcopy<br/>s =&gt; clone to scopy                    \\ cloning s, spawning scopy<br/>\u00a0<br/>.\" after copy\" cr<br/>tcopy =&gt; print                         \\ use \"print\" methods<br/>scopy =&gt; print</pre>"}, {"lang": "Fortran", "loc": 68, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">!Module polymorphic_copy_example_module</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">module</span> polymorphic_copy_example_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">private</span> <span class=\"co1\">! all by default</span><br/>   <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">T</span>,S<br/>\u00a0<br/>   <span class=\"kw3\">type</span>, abstract <span class=\"sy0\">::</span> <span class=\"me2\">T</span><br/>   <span class=\"kw1\">contains</span><br/>      <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>T_procedure1<span class=\"br0\">)</span>, deferred, pass <span class=\"sy0\">::</span> <span class=\"me2\">identify</span><br/>      <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>T_procedure2<span class=\"br0\">)</span>, deferred, pass <span class=\"sy0\">::</span> <span class=\"me2\">duplicate</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> T<br/>\u00a0<br/>\u00a0<br/>   abstract <span class=\"kw1\">interface</span><br/>      <span class=\"kw1\">subroutine</span> T_procedure1<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>         import  <span class=\"sy0\">::</span> <span class=\"me2\">T</span><br/>         class<span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> T_procedure1<br/>      <span class=\"kw1\">function</span> T_procedure2<span class=\"br0\">(</span>this<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>Tobj<span class=\"br0\">)</span><br/>         import  <span class=\"sy0\">::</span> <span class=\"me2\">T</span><br/>         class<span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>         class<span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">Tobj</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> T_procedure2<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span>, extends<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">S</span><br/>   <span class=\"kw1\">contains</span><br/>      <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">identify</span><br/>      <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">duplicate</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> S<br/>\u00a0<br/> <span class=\"kw1\">contains</span><br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span>  identify<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      class<span class=\"br0\">(</span>S<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"S\"</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> identify<br/>\u00a0<br/>   <span class=\"kw1\">function</span> duplicate<span class=\"br0\">(</span>this<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><br/>      class<span class=\"br0\">(</span>S<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      class<span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">obj</span><br/>      <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>obj, source <span class=\"sy0\">=</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> duplicate<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> polymorphic_copy_example_module<br/>\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">!Main program test</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">program</span>    test<br/>   <span class=\"kw3\">use</span> polymorphic_copy_example_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>   class<span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">Sobj</span><br/>   class<span class=\"br0\">(</span>T<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">Sclone</span><br/>\u00a0<br/>   <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>Sobj, source <span class=\"sy0\">=</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>Sclone, source <span class=\"sy0\">=</span> Sobj <span class=\"sy0\">%</span> duplicate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">call</span> Sobj <span class=\"sy0\">%</span> identify<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">call</span> Sclone <span class=\"sy0\">%</span> identify<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 84, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"reflect\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// interface types provide polymorphism, but not inheritance.</span><br/><span class=\"kw1\">type</span> <span class=\"nu2\">i</span> <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    identify<span class=\"sy1\">()</span> <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// \"base\" type</span><br/><span class=\"kw1\">type</span> t <span class=\"kw4\">float64</span><br/>\u00a0<br/><span class=\"co1\">// \"derived\" type.  in Go terminology, it is simply a struct with an</span><br/><span class=\"co1\">// anonymous field.  fields and methods of anonymous fields however,</span><br/><span class=\"co1\">// can be accessed without additional qualification and so are</span><br/><span class=\"co1\">// \"inherited\" in a sense.</span><br/><span class=\"kw1\">type</span> s <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    t<br/>    k\u014dan <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// another type with an \"embedded\" t field.  (t is the *type*, this field</span><br/><span class=\"co1\">// has no *name*.)</span><br/><span class=\"kw1\">type</span> r <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    t<br/>    ch <span class=\"kw4\">chan</span> <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a method on t.  this method makes t satisfy interface i.</span><br/><span class=\"co1\">// since a t is embedded in types s and r, they automatically \"inherit\"</span><br/><span class=\"co1\">// the method.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>x t<span class=\"sy1\">)</span> identify<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"I'm a t!\"</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// the same method on s.  although s already satisfied i, calls to identify</span><br/><span class=\"co1\">// will now find this method rather than the one defined on t.  </span><br/><span class=\"co1\">// in a sense it \"overrides\" the method of the \"base class.\"</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>x s<span class=\"sy1\">)</span> identify<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"I'm an s!\"</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// three variables with different types, initialized from literals.</span><br/>    <span class=\"kw1\">var</span> t1 t <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">var</span> s1 s <span class=\"sy2\">=</span> s<span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"st0\">\"one\"</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> r1 r <span class=\"sy2\">=</span> r<span class=\"sy1\">{</span>t<span class=\"sy1\">:</span> <span class=\"nu0\">7</span><span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// variables declared with the same type.  initial value is nil.</span><br/>    <span class=\"kw1\">var</span> i1<span class=\"sy1\">,</span> i2<span class=\"sy1\">,</span> i3 <span class=\"nu2\">i</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Initial (zero) values of interface variables:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"i1:\"</span><span class=\"sy1\">,</span> i1<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i2:\"</span><span class=\"sy1\">,</span> i2<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i3:\"</span><span class=\"sy1\">,</span> i3<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// in the terminology of the Go language reference, i1, i2, and i3</span><br/>    <span class=\"co1\">// still have static type i, but now have different dynamic types.</span><br/>    i1<span class=\"sy1\">,</span> i2<span class=\"sy1\">,</span> i3 <span class=\"sy2\">=</span> t1<span class=\"sy1\">,</span> s1<span class=\"sy1\">,</span> r1<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Polymorphic:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"i1:\"</span><span class=\"sy1\">,</span> i1<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i1<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i1<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i2:\"</span><span class=\"sy1\">,</span> i2<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i2<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i2<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i3:\"</span><span class=\"sy1\">,</span> i3<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i3<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i3<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// copy: declare and assign in one step using \"short declaration.\"</span><br/>    i1c<span class=\"sy1\">,</span> i2c<span class=\"sy1\">,</span> i3c <span class=\"sy2\">:=</span> i1<span class=\"sy1\">,</span> i2<span class=\"sy1\">,</span> i3<br/>\u00a0<br/>    <span class=\"co1\">// modify first set of polymorphic variables.</span><br/>    i1<span class=\"sy1\">,</span> i2<span class=\"sy1\">,</span> i3 <span class=\"sy2\">=</span> s<span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"st0\">\"dog\"</span><span class=\"sy1\">},</span> r<span class=\"sy1\">{</span>t<span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span> t<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// demonstrate that copies are distinct from first set</span><br/>    <span class=\"co1\">// and that types are preserved.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>First set now modified:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"i1:\"</span><span class=\"sy1\">,</span> i1<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i1<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i1<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i2:\"</span><span class=\"sy1\">,</span> i2<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i2<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i2<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i3:\"</span><span class=\"sy1\">,</span> i3<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i3<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i3<span class=\"sy1\">))</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Copies made before modifications:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"i1c:\"</span><span class=\"sy1\">,</span> i1c<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i1c<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i1c<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i2c:\"</span><span class=\"sy1\">,</span> i2c<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i2c<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i2c<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"i3c:\"</span><span class=\"sy1\">,</span> i3c<span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> i3c<span class=\"sy3\">.</span>identify<span class=\"sy1\">(),</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>i3c<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 14, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> T <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20implements\"><span class=\"kw2\">implements</span></a> <a href=\"http://www.google.de/search?as_q=Cloneable&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Cloneable</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20property\"><span class=\"kw2\">property</span></a><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">'T'</span> <span class=\"br0\">}</span><br/>    T copy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20super\"><span class=\"kw2\">super</span></a>.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=CloneNotSupportedException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">CloneNotSupportedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    @Override<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20boolean\"><span class=\"kw4\">boolean</span></a> equals<span class=\"br0\">(</span>that<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> that<span class=\"sy0\">?</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20property\"><span class=\"kw2\">property</span></a> <span class=\"sy0\">==</span> that<span class=\"sy0\">?</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20property\"><span class=\"kw2\">property</span></a> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> S <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20extends\"><span class=\"kw2\">extends</span></a> T <span class=\"br0\">{</span><br/>    @Override <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">'S'</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 36, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw7\">T</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">method</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"This is T's a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> S<span class=\"sy0\">:</span> <span class=\"kw7\">T</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">method</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"This is S's a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"S:\"</span><span class=\"sy0\">,</span>deepcopy<span class=\"br0\">(</span>S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">a</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> deepcopy<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> cache<span class=\"br0\">)</span>  <span class=\"co1\">#: return a deepcopy of A</span><br/>    <span class=\"kw2\">local</span> k<br/>\u00a0<br/>    <span class=\"sy0\">/</span>cache <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\"># used to handle multireferenced objects</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">case</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"table\"</span><span class=\"sy0\">|</span><span class=\"st0\">\"list\"</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>            cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw4\">copy</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>            <span class=\"kw1\">every</span> cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">[</span>k <span class=\"sy0\">:=</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> deepcopy<span class=\"br0\">(</span>A<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> cache<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"st0\">\"set\"</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>            cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">every</span> <span class=\"kw4\">insert</span><span class=\"br0\">(</span>cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"sy0\">,</span> deepcopy<span class=\"br0\">(</span><span class=\"sy0\">!</span>A<span class=\"sy0\">,</span> cache<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>           <span class=\"co1\"># records and objects (encoded as records)</span><br/>            cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw4\">copy</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw4\">match</span><span class=\"br0\">(</span><span class=\"st0\">\"record \"</span><span class=\"sy0\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">every</span> cache<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">[</span>k <span class=\"sy0\">:=</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> deepcopy<span class=\"br0\">(</span>A<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> cache<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">.</span><span class=\"me1\">cache</span><span class=\"br0\">[</span>A<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre>  def=: abc \n</pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> clone<span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>obj <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">||</span> <span class=\"kw1\">typeof</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'object'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> obj<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> temp <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> key <span class=\"kw1\">in</span> obj<span class=\"br0\">)</span><br/>        temp<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> clone<span class=\"br0\">(</span>obj<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> temp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Java", "loc": 24, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> T <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acloneable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Cloneable</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"T\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> T copy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"kw1\">super</span>.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aclonenotsupportedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">CloneNotSupportedException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> S <span class=\"kw1\">extends</span> T <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PolymorphicCopy <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> T copier<span class=\"br0\">(</span>T x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        T obj1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        S obj2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>copier<span class=\"br0\">(</span>obj1<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"T\"</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>copier<span class=\"br0\">(</span>obj2<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"S\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>open <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Animal<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> age<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    open fun copy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Animal<span class=\"br0\">(</span>name, age<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Name: $name, Age: $age\"</span>     <br/><span class=\"br0\">}</span>   <br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Dog<span class=\"br0\">(</span>name<span class=\"sy0\">:</span> String, age<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> breed<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Animal<span class=\"br0\">(</span>name, age<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun copy<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Dog<span class=\"br0\">(</span>name, age, breed<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\", Breed: $breed\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a<span class=\"sy0\">:</span> Animal <span class=\"sy0\">=</span> Dog<span class=\"br0\">(</span><span class=\"st0\">\"Rover\"</span>, <span class=\"nu0\">3</span>, <span class=\"st0\">\"Terrier\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b<span class=\"sy0\">:</span> Animal <span class=\"sy0\">=</span> a.<span class=\"me1\">copy</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// calls Dog.copy() because runtime type of 'a' is Dog</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Dog 'a' = $a\"</span><span class=\"br0\">)</span>   <span class=\"co1\">// implicitly calls Dog.toString()</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Dog 'b' = $b\"</span><span class=\"br0\">)</span>   <span class=\"co1\">// ditto</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Dog 'a' is ${if (a === b) \"</span><span class=\"st0\">\" else \"</span>not<span class=\"st0\">\"} the same object as Dog 'b'\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "NetRexx", "loc": 39, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/><span class=\"kw1\">class</span> RCPolymorphicCopy <span class=\"kw2\">public</span><br/>\u00a0<br/>method copier<span class=\"br0\">(</span>x = T<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> T<br/>  <span class=\"kw1\">return</span> x.<span class=\"me0\">copy</span><br/>\u00a0<br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">constant</span><br/>  obj1 = T<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  obj2 = S<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  System.<span class=\"me0\">out</span>.<span class=\"me0\">println</span><span class=\"br0\">(</span>copier<span class=\"br0\">(</span>obj1<span class=\"br0\">)</span>.<span class=\"me0\">name</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"T\"</span><br/>  System.<span class=\"me0\">out</span>.<span class=\"me0\">println</span><span class=\"br0\">(</span>copier<span class=\"br0\">(</span>obj2<span class=\"br0\">)</span>.<span class=\"me0\">name</span><span class=\"br0\">)</span> <span class=\"co1\">-- prints \"S\"</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/><span class=\"kw1\">class</span> RCPolymorphicCopy.<span class=\"me0\">T</span> <span class=\"kw2\">public</span> <span class=\"kw2\">implements</span> Cloneable<br/>\u00a0<br/>method name <span class=\"kw2\">returns</span> String<br/>  <span class=\"kw1\">return</span> T.<span class=\"kw1\">class</span>.<span class=\"me0\">getSimpleName</span><br/>\u00a0<br/>method copy <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> T<br/>  dup = T<br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    dup = T <span class=\"kw4\">super</span>.<span class=\"me0\">clone</span><br/>  <span class=\"kw3\">catch</span> ex = CloneNotSupportedException<br/>    ex.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> dup<br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/><span class=\"kw1\">class</span> RCPolymorphicCopy.<span class=\"me0\">S</span> <span class=\"kw2\">public</span> <span class=\"kw2\">extends</span> RCPolymorphicCopy.<span class=\"me0\">T</span><br/>\u00a0<br/>method name <span class=\"kw2\">returns</span> String<br/>  <span class=\"kw1\">return</span> S.<span class=\"kw1\">class</span>.<span class=\"me0\">getSimpleName</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 37, "block": "<pre class=\"text highlighted_source\">type<br/>  T = ref object of TObject<br/>    myValue: string<br/>  S1 = ref object of T<br/>  S2 = ref object of T<br/>\u00a0<br/>method speak(x: T)  = echo \"T Hello \", x.myValue<br/>method speak(x: S1) = echo \"S1 Meow \", x.myValue<br/>method speak(x: S2) = echo \"S2 Woof \", x.myValue<br/>\u00a0<br/>echo \"creating initial objects of types S1, S2, and T\"<br/>var a = S1(myValue: \"Green\")<br/>a.speak<br/>var b = S2(myValue: \"Blue\")<br/>b.speak<br/>var u = T(myValue: \"Blue\")<br/>u.speak<br/>\u00a0<br/>echo \"Making copy of a as u, colors and types should match\"<br/>u.deepCopy(a)<br/>u.speak<br/>a.speak<br/>\u00a0<br/>echo \"Assigning new color to u, A's color should be unchanged.\"<br/>u.myValue = \"Orange\"<br/>u.speak<br/>a.speak<br/>\u00a0<br/>echo \"Assigning u to reference same object as b, colors and types should match\"<br/>u = b<br/>u.speak<br/>b.speak<br/>\u00a0<br/>echo \"Assigning new color to u. Since u,b references same object b's color changes as well\"<br/>u.myValue = \"Yellow\"<br/>u.speak<br/>b.speak</pre>"}, {"lang": "Objective-C", "loc": 38, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> T <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>identify;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> T<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>identify <span class=\"br0\">{</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"I am a genuine T\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">id</span><span class=\"br0\">)</span>copyWithZone<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">NSZone</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>zone <span class=\"br0\">{</span><br/>    T <span class=\"sy0\">*</span>copy <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span>self class<span class=\"br0\">]</span> allocWithZone<span class=\"sy0\">:</span>zone<span class=\"br0\">]</span> init<span class=\"br0\">]</span>; <span class=\"co2\">// call an appropriate constructor here</span><br/>                                                        <span class=\"co2\">// then copy data into it as appropriate here</span><br/>                                                        <span class=\"co2\">// make sure to use \"[[self class] alloc...\" and</span><br/>                                                        <span class=\"co2\">// not \"[T alloc...\" to make it polymorphic</span><br/>    <span class=\"kw1\">return</span> copy;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> S <span class=\"sy0\">:</span> T<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> S<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>identify<br/><span class=\"br0\">{</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"I am an S\"</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>        T <span class=\"sy0\">*</span>original <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>S alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>        T <span class=\"sy0\">*</span>another <span class=\"sy0\">=</span> <span class=\"br0\">[</span>original copy<span class=\"br0\">]</span>;<br/>        <span class=\"br0\">[</span>another identify<span class=\"br0\">]</span>; <span class=\"co2\">// logs \"I am an S\"</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 13, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> obj1 <span class=\"sy0\">=</span><br/>  object<br/>    <span class=\"kw1\">method</span> name <span class=\"sy0\">=</span> <span class=\"st0\">\"T\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> obj2 <span class=\"sy0\">=</span><br/>  object<br/>    <span class=\"kw1\">method</span> name <span class=\"sy0\">=</span> <span class=\"st0\">\"S\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Oo.html\"><span class=\"kw2\">Oo</span></a><span class=\"sy0\">.</span>copy obj1<span class=\"br0\">)</span><span class=\"sy0\">#</span>name<span class=\"sy0\">;</span> <span class=\"co1\">(* prints \"T\" *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Oo.html\"><span class=\"kw2\">Oo</span></a><span class=\"sy0\">.</span>copy obj2<span class=\"br0\">)</span><span class=\"sy0\">#</span>name<span class=\"sy0\">;</span> <span class=\"co1\">(* prints \"S\" *)</span></pre>"}, {"lang": "ooRexx", "loc": 14, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>s = <span class=\"sy0\">.</span>s~new<br/>s2 = s~copy   <span class=\"co1\">-- makes a copy of the first</span><br/><span class=\"kw1\">if</span> s == s2 <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"copy didn't work!\"</span><br/><span class=\"kw1\">if</span> s2~<span class=\"kw2\">name</span> == <span class=\"st0\">\"S\"</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">\"polymorphic copy worked\"</span><br/>\u00a0<br/>::class t<br/>::method <span class=\"kw2\">name</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"T\"</span><br/>\u00a0<br/>::class s subclass t<br/>::method <span class=\"kw2\">name</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'======<br/>class T<br/>'======<br/>\u00a0<br/>float vv<br/>\u00a0<br/>method constructor(float a=0) {vv=a}<br/>method destructor    {}<br/>method copy as T     {new T ob\u00a0: ob&lt;=vv\u00a0: return ob}<br/>method mA() as float {return vv*2}<br/>method mB() as float {return vv*3}<br/>\u00a0<br/>end class<br/>\u00a0<br/>\u00a0<br/>'======<br/>class S<br/>'======<br/>\u00a0<br/>has T<br/>\u00a0<br/>method mB() as float {return vv*4} 'ovveride<br/>\u00a0<br/>end class<br/>\u00a0<br/>'====<br/>'TEST<br/>'====<br/>\u00a0<br/>new T objA(10.5)<br/>\u00a0<br/>let objB = cast S objA.copy<br/>\u00a0<br/>print objA.mb 'result 31.5<br/>print objB.mb 'result 42<br/>\u00a0<br/>del objA\u00a0: del objB<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 41, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">class</span> <span class=\"re2\">T</span> <span class=\"kw1\">from</span> ObjectSupport<span class=\"sy0\">.</span>reflect<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">init</span><br/>        <span class=\"kw1\">skip</span><br/>     <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">name</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>        <span class=\"st0\">'T'</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> <span class=\"re2\">S</span> <span class=\"kw1\">from</span> T<br/>     <span class=\"kw1\">attr</span> a<br/>     <span class=\"kw1\">feat</span> f<br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">name</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>        <span class=\"st0\">'S'</span><br/>     <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">getA</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span> <span class=\"sy0\">@</span>a <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">setA</span><span class=\"br0\">(</span>V<span class=\"br0\">)</span> a <span class=\"sy0\">:=</span> V <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Obj = <span class=\"br0\">{</span>New S init<span class=\"br0\">}</span><br/>  Copy = <span class=\"br0\">{</span>Obj clone<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% Some assertions:</span><br/>\u00a0<br/>  <span class=\"co1\">%% Copy is really an S:</span><br/>  <span class=\"br0\">{</span>Copy name<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span> = <span class=\"st0\">'S'</span><br/>\u00a0<br/>  <span class=\"co1\">%% Copy is not just a reference to the same object:</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>eq Obj Copy<span class=\"br0\">}</span> = <span class=\"kw1\">false</span><br/>\u00a0<br/>  <span class=\"co1\">%% Not a deep copy. Feature f has the same identity for both objects:</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>eq Obj<span class=\"sy0\">.</span>f Copy<span class=\"sy0\">.</span>f<span class=\"br0\">}</span> = <span class=\"kw1\">true</span><br/>\u00a0<br/>  <span class=\"co1\">%% However, both have their own distinct attributes:</span><br/>  <span class=\"br0\">{</span>Obj setA<span class=\"br0\">(</span>13<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Copy setA<span class=\"br0\">(</span>14<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Obj getA<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">\\=</span> <span class=\"br0\">{</span>Copy getA<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span> = <span class=\"kw1\">true</span></pre>"}, {"lang": "Perl", "loc": 53, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> T<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$cls</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span> <span class=\"co5\">@_</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$cls</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> set_data <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@$self</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> copy <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span> <span class=\"re0\">@$self</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> manifest <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"type T, content: @$self<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> S<span class=\"sy0\">;</span><br/><span class=\"kw1\">our</span> <span class=\"re0\">@ISA</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'T'</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># S is inheriting from T.</span><br/><span class=\"co1\"># 'manifest' method is overriden, while 'new', 'copy' and</span><br/><span class=\"co1\"># 'set_data' are all inherited.</span><br/><span class=\"kw2\">sub</span> manifest <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"type S, content: @$self<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"# creating <span class=\"es0\">\\$</span>t as a T<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> T<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'abc'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">manifest</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"# creating <span class=\"es0\">\\$</span>s as an S<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> S<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"st_h\">'SPQR'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$s</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">manifest</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"# make var <span class=\"es0\">\\$</span>x as a copy of <span class=\"es0\">\\$</span>t<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">manifest</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"# now as a copy of <span class=\"es0\">\\$</span>s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">manifest</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"# show that this copy is indeed a separate entity<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">set_data</span><span class=\"br0\">(</span><span class=\"st_h\">'totally different'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\$</span>x is: \"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">manifest</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> Cool <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">22</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span> <span class=\"kw1\">but</span> <span class=\"kw2\">role</span> Fink <span class=\"br0\">{</span> <span class=\"kw2\">method</span> brag <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"I'm a cool {self.WHAT.perl}!\"</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> Cool <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">.</span><span class=\"me1\">clone</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span><span class=\"sy0\">.</span><span class=\"me1\">brag</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 27, "block": "<pre class=\"text highlighted_source\">enum NAME, METHOD<br/>\u00a0<br/>procedure me_t()<br/>    puts(1,\"I is a T\\n\")<br/>end procedure<br/>constant r_t = routine_id(\"me_t\")<br/>\u00a0<br/>procedure me_s()<br/>    puts(1,\"I is an S\\n\")<br/>end procedure<br/>constant r_s = routine_id(\"me_s\")<br/>\u00a0<br/>type T(object o)<br/>    -- as o[METHOD] can be overidden, don't verify it!<br/>    return sequence(o) and length(o)=2 and string(o[NAME]) and integer(o[METHOD])<br/>end type<br/>\u00a0<br/>type S(T t)<br/>    return t[METHOD] = r_s<br/>end type<br/>\u00a0<br/>S this = {\"S\",r_s}<br/>T that = {\"T\",r_t}<br/>\u00a0<br/>call_proc(that[METHOD],{})<br/>that = this<br/>call_proc(that[METHOD],{})</pre>"}, {"lang": "PHP", "loc": 16, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">class</span> T <span class=\"br0\">{</span><br/>      <span class=\"kw2\">function</span> name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"T\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> S <span class=\"br0\">{</span><br/>      <span class=\"kw2\">function</span> name<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"S\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$obj1</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$obj2</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> S<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$obj3</span> <span class=\"sy0\">=</span> clone <span class=\"re0\">$obj1</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$obj4</span> <span class=\"sy0\">=</span> clone <span class=\"re0\">$obj2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$obj3</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"T\"</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$obj4</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// prints \"S\"</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">: (setq A (new '(+Cls1 +Cls2) 'attr1 123  'attr2 \"def\"  'attr3 (4 2 0)  'attr4 T))<br/>-&gt; $385603635<br/>\u00a0<br/>: (show A)<br/>$385603635 (+Cls1 +Cls2)<br/>   attr4<br/>   attr3 (4 2 0)<br/>   attr2 \"def\"<br/>   attr1 123<br/>-&gt; $385603635</pre>"}, {"lang": "Python", "loc": 54, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">copy</span><br/>\u00a0<br/><span class=\"kw1\">class</span> T:<br/>   <span class=\"kw1\">def</span> classname<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>: <br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.__class__.__name__<br/>\u00a0<br/>   <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">myValue</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"I'm a T.\"</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> speak<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">print</span> <span class=\"kw2\">self</span>.<span class=\"me1\">classname</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Hello'</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">myValue</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> clone<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">copy</span>.<span class=\"kw3\">copy</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> S1<span class=\"br0\">(</span>T<span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> speak<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">print</span> <span class=\"kw2\">self</span>.<span class=\"me1\">classname</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Meow\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">myValue</span><br/>\u00a0<br/><span class=\"kw1\">class</span> S2<span class=\"br0\">(</span>T<span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> speak<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">print</span> <span class=\"kw2\">self</span>.<span class=\"me1\">classname</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Woof\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">myValue</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"creating initial objects of types S1, S2, and T\"</span><br/>a <span class=\"sy0\">=</span> S1<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>a.<span class=\"me1\">myValue</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Green'</span><br/>a.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>b <span class=\"sy0\">=</span> S2<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>b.<span class=\"me1\">myValue</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Blue'</span><br/>b.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>u <span class=\"sy0\">=</span> T<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>u.<span class=\"me1\">myValue</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Purple'</span><br/>u.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Making copy of a as u, colors and types should match\"</span><br/>u <span class=\"sy0\">=</span> a.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>u.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>a.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Assigning new color to u, A's color should be unchanged.\"</span><br/>u.<span class=\"me1\">myValue</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Orange\"</span><br/>u.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>a.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Assigning u to reference same object as b, colors and types should match\"</span><br/>u <span class=\"sy0\">=</span> b<br/>u.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>b.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Assigning new color to u. Since u,b references same object b's color changes as well\"</span><br/>u.<span class=\"me1\">myValue</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Yellow\"</span><br/>u.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>b.<span class=\"me1\">speak</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>\u00a0<br/>(define (copy-prefab-struct str)<br/>  (apply make-prefab-struct (vector-&gt;list (struct-&gt;vector str))))<br/>\u00a0<br/>(struct point (x y) #:prefab)<br/>(struct point/color point (color) #:prefab)<br/>\u00a0<br/>\u00a0<br/>(let* ([original (point 0 0)]<br/>       [copied (copy-prefab-struct original)])<br/>  (displayln copied)<br/>  (displayln (eq? original copied)))<br/>\u00a0<br/>(let* ([original (point/color 0 0 'black)]<br/>       [copied (copy-prefab-struct original)])<br/>  (displayln copied)<br/>  (displayln (eq? original copied)))</pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> T<br/>  <span class=\"kw1\">def</span> name<br/>    <span class=\"st0\">\"T\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> S<br/>  <span class=\"kw1\">def</span> name<br/>    <span class=\"st0\">\"S\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>obj1 = T.<span class=\"me1\">new</span><br/>obj2 = S.<span class=\"me1\">new</span><br/><span class=\"kw3\">puts</span> obj1.<span class=\"me1\">dup</span>.<span class=\"me1\">name</span> <span class=\"co1\"># prints \"T\"</span><br/><span class=\"kw3\">puts</span> obj2.<span class=\"me1\">dup</span>.<span class=\"me1\">name</span> <span class=\"co1\"># prints \"S\"</span></pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"text highlighted_source\">object PolymorphicCopy {<br/>\u00a0<br/>  def main(args: Array[String]) {<br/>    val a: Animal = Dog(\"Rover\", 3, \"Terrier\")<br/>    val b: Animal = a.copy() // calls Dog.copy() because runtime type of 'a' is Dog<br/>    println(s\"Dog 'a' = $a\") // implicitly calls Dog.toString()<br/>    println(s\"Dog 'b' = $b\") // ditto<br/>    println(s\"Dog 'a' is ${if (a == b) \"\" else \"not\"} the same object as Dog 'b'\")<br/>  }<br/>\u00a0<br/>  case class Animal(name: String, age: Int) {<br/>\u00a0<br/>    override def toString = s\"Name: $name, Age: $age\"<br/>  }<br/>\u00a0<br/>  case class Dog(override val name: String, override val age: Int, breed: String) extends Animal(name, age) {<br/>\u00a0<br/>    override def toString = super.toString() + s\", Breed: $breed\"<br/>  }<br/>\u00a0<br/>}</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> T<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method display <span class=\"br0\">{</span><br/>        say value;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> S<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> T <span class=\"br0\">{</span><br/>    method display <span class=\"br0\">{</span><br/>        say value;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var obj1 = T<span class=\"br0\">(</span><span class=\"st0\">\"T\"</span><span class=\"br0\">)</span>;<br/>var obj2 = S<span class=\"br0\">(</span><span class=\"st0\">\"S\"</span><span class=\"br0\">)</span>;<br/>var obj3 = obj2.<span class=\"me1\">dclone</span>;         <span class=\"co1\"># make a deep clone of obj2</span><br/>\u00a0<br/>obj1.<span class=\"me1\">value</span> = <span class=\"st0\">\"foo\"</span>;             <span class=\"co1\"># change the value of obj1</span><br/>obj2.<span class=\"me1\">value</span> = <span class=\"st0\">\"bar\"</span>;             <span class=\"co1\"># change the value of obj2</span><br/>\u00a0<br/>obj1.<span class=\"me1\">display</span>;                   <span class=\"co1\"># prints \"foo\"</span><br/>obj2.<span class=\"me1\">display</span>;                   <span class=\"co1\"># prints \"bar\"</span><br/>obj3.<span class=\"me1\">display</span>;                   <span class=\"co1\"># prints \"S\"</span></pre>"}, {"lang": "Slate", "loc": 9, "block": "<pre class=\"text highlighted_source\">define: #T &amp;parents: {Cloneable}.<br/>\u00a0<br/>define: #S &amp;parents: {Cloneable}.<br/>\u00a0<br/>define: #obj1 -&gt; T clone.<br/>define: #obj2 -&gt; S clone.<br/>\u00a0<br/>obj1 printName.<br/>obj2 printName.</pre>"}, {"lang": "Swift", "loc": 24, "block": "<pre class=\"text highlighted_source\">class T {<br/>  required init() { } // constructor used in polymorphic initialization must be \"required\"<br/>  func identify() {<br/>    println(\"I am a genuine T\")<br/>  }<br/>  func copy() -&gt; T {<br/>    let newObj\u00a0: T = self.dynamicType() // call an appropriate constructor here<br/>    // then copy data into newObj as appropriate here<br/>    // make sure to use \"self.dynamicType(...)\" and<br/>    // not \"T(...)\" to make it polymorphic<br/>    return newObj<br/>  }<br/>}<br/>\u00a0<br/>class S\u00a0: T {<br/>  override func identify()  {<br/>    println(\"I am an S\")<br/>  }<br/>}<br/>\u00a0<br/>let original\u00a0: T = S()<br/>let another\u00a0: T = original.copy()<br/>println(original === another) // prints \"false\" (i.e. they are different objects)<br/>another.identify() // prints \"I am an S\"</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> varCopy <span class=\"re0\">$varOriginal</span></pre>"}]}