{"task": "Create_a_two-dimensional_array_at_runtime", "blocks": [{"lang": "Ada", "loc": 22, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Float_Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Two_Dimensional_Arrays <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Matrix_Type <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Float;<br/>   Dim_1\u00a0: Positive;<br/>   Dim_2\u00a0: Positive;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Integer_Text_Io</span>.<span class=\"me1\">Get</span><span class=\"br0\">(</span>Item =&gt; Dim_1<span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Integer_Text_Io</span>.<span class=\"me1\">Get</span><span class=\"br0\">(</span>Item =&gt; Dim_2<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- Create an inner block with the correctly sized array</span><br/>   <span class=\"kw1\">declare</span><br/>      Matrix\u00a0: Matrix_Type<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Dim_1</span>, <span class=\"nu0\">1</span>..<span class=\"me1\">Dim_2</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Matrix<span class=\"br0\">(</span><span class=\"nu0\">1</span>, Dim_2<span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">3.14159</span>;<br/>      Ada.<span class=\"me1\">Float_Text_Io</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Item =&gt; Matrix<span class=\"br0\">(</span><span class=\"nu0\">1</span>, Dim_2<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">1</span>, Aft =&gt; <span class=\"nu0\">5</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_Io</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span>;<br/>   <span class=\"co1\">-- The variable Matrix is popped off the stack automatically</span><br/><span class=\"kw1\">end</span> Two_Dimensional_Arrays;</pre>"}, {"lang": "ALGOL 68", "loc": 6, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Input two positive whole numbers separated by space and press newline:\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"br0\">[</span><span class=\"kw22\">read int</span><span class=\"sy1\">,</span><span class=\"kw22\">read int</span><span class=\"br0\">]</span> <span class=\"kw3\">INT</span> array<span class=\"sy1\">;</span><br/>  array<span class=\"br0\">[</span>1<span class=\"sy1\">,</span>1<span class=\"br0\">]</span><span class=\"sy1\">:=</span>42<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span> <span class=\"br0\">(</span>array<span class=\"br0\">[</span>1<span class=\"sy1\">,</span>1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 22, "block": "<pre class=\"text highlighted_source\">begin<br/>    integer dimension1UpperBound, dimension2UpperBound;<br/>    write( \"upper bound for dimension 1: \" );<br/>    read( dimension1UpperBound );<br/>    write( \"upper bound for dimension 2: \" );<br/>    read( dimension2UpperBound );<br/>\u00a0<br/>    begin<br/>       \u00a0% we start a new block because declarations must precede statements\u00a0%<br/>       \u00a0% and variables in array bounds must be from outside the block     \u00a0%<br/>        integer array matrix ( 1\u00a0:: dimension1UpperBound<br/>                             , 1\u00a0:: dimension2UpperBound<br/>                             );<br/>       \u00a0% set the first element - the program will crash if the user input \u00a0%<br/>       \u00a0% upper bounds less than 1                                         \u00a0%<br/>        matrix( 1, 1 )\u00a0:= 3;<br/>       \u00a0% write it                                                         \u00a0%<br/>        write( matrix( 1, 1 ) );<br/>       \u00a0% the array is automatically deleted when the block ends           \u00a0%<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 8, "block": "<pre class=\"text highlighted_source\">array\u2190m n \u2374 0 \u235d array of zeros with shape of m by n.<br/>\u00a0<br/>array[1;1]\u219073 \u235d assign a value to location 1;1.<br/>\u00a0<br/>array[1;1] \u235d read the value back out<br/>\u00a0<br/>\u2395ex 'array' \u235d erase the array<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 25, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> R <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter number of rows:\"</span> <span class=\"kw1\">default answer</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">set</span> c <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> returned <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"Enter number of columns:\"</span> <span class=\"kw1\">default answer</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw3\">set</span> array <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> R<br/>\t<span class=\"kw3\">set</span> temp <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> c<br/>\t\t<span class=\"kw3\">set</span> temp<span class=\"co2\">'</span>s <span class=\"kw3\">end</span> <span class=\"kw3\">to</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\t<span class=\"kw3\">set</span> array<span class=\"co2\">'</span>s <span class=\"kw3\">end</span> <span class=\"kw3\">to</span> temp<br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/><span class=\"co1\">-- Address the first column of the first row:</span><br/><span class=\"kw3\">set</span> array<span class=\"co2\">'</span>s <span class=\"kw1\">item</span> <span class=\"nu0\">1</span>'s <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\">-- Negative index values can be used to address from the end:</span><br/><span class=\"kw3\">set</span> array<span class=\"co2\">'</span>s <span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>'s <span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">to</span> <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\">-- Access an item (row 2 column 1):</span><br/><span class=\"kw3\">set</span> x <span class=\"kw3\">to</span> array<span class=\"co2\">'</span>s <span class=\"kw1\">item</span> <span class=\"nu0\">2</span>'s <span class=\"kw1\">item</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw3\">return</span> array<br/>\u00a0<br/><span class=\"co1\">-- Destroy array (typically unnecessary since it'll automatically be destroyed once script ends).</span><br/><span class=\"kw3\">set</span> array <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Applesoft BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">10 INPUT \"ENTER TWO INTEGERS:\"; X%, Y%<br/>20 DIM A%(X% - 1, Y% - 1)<br/>30 X% = RND(1) * X%<br/>40 Y% = RND(1) * Y%<br/>50 A%(X%, Y%) = -32767<br/>60 PRINT A%(X%, Y%)<br/>70 CLEAR</pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\">Array <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"sy0\">,</span> data<span class=\"sy0\">,,</span> <span class=\"kw6\">Enter</span> two integers separated by a <span class=\"kw6\">Space</span>:`n<span class=\"br0\">(</span>ex<span class=\"sy0\">.</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> data<span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><br/>Array<span class=\"br0\">[</span>i1<span class=\"sy0\">,</span>i2<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"that element\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Array[\"</span> i1 <span class=\"st0\">\",\"</span> i2 <span class=\"st0\">\"] = \"</span> Array<span class=\"br0\">[</span>i1<span class=\"sy0\">,</span>i2<span class=\"br0\">]</span></pre>"}, {"lang": "AutoIt", "loc": 14, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">; == get dimensions from user input</span><br/><span class=\"re0\">$sInput</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">'2D Array Creation'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Input comma separated count of rows and columns, i.e. \"5,3\"'</span><span class=\"br0\">)</span><br/><span class=\"re0\">$aDimension</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"br0\">(</span><span class=\"re0\">$sInput</span><span class=\"sy0\">,</span> <span class=\"st0\">','</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\">; == create array</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Dim</span></a> <span class=\"re0\">$a2D</span><span class=\"br0\">[</span> <span class=\"re0\">$aDimension</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"re0\">$aDimension</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co0\">; == write value to last row/last column</span><br/><span class=\"re0\">$a2D</span><span class=\"br0\">[</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$a2D</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$a2D</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'test string'</span><br/>\u00a0<br/><span class=\"co0\">; == output this value to MsgBox</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'Output'</span><span class=\"sy0\">,</span> <span class=\"st0\">'row['</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$a2D</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'], col['</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$a2D</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">']'</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'= '</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$a2D</span><span class=\"br0\">[</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$a2D</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$a2D</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 13, "block": "<pre class=\"awk highlighted_source\"><span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+/</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> <span class=\"re0\">$1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j=<span class=\"nu0\">0</span>; j <span class=\"sy2\">&lt;</span> <span class=\"re0\">$2</span>; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      arr<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> = i<span class=\"sy3\">*</span>j<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\"># how to scan \"multidim\" array as explained in the GNU AWK manual</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>comb <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span>comb, idx, <span class=\"kw3\">SUBSEP</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">print</span> idx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"st0\">\",\"</span> idx<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"st0\">\"-&gt;\"</span> arr<span class=\"br0\">[</span>idx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, idx<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 6, "block": "<pre class=\"qbasic highlighted_source\"> <a href=\"http://www.qbasicnews.com/qboho/qckcls.shtml\"><span class=\"kw3\">CLS</span></a><br/> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> a<span class=\"sy0\">,</span> b <span class=\"co1\">'inputs need to be separated by commas</span><br/> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> array <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> a<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> b<span class=\"br0\">)</span><br/> array<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><br/> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> array<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/> <a href=\"http://www.qbasicnews.com/qboho/qckerase.shtml\"><span class=\"kw3\">ERASE</span></a> array</pre>"}, {"lang": "BBC BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">      INPUT \"Enter array dimensions separated by a comma: \" a%, b%<br/>\u00a0<br/>      DIM array(a%, b%)<br/>      array(1, 1) = PI<br/>      PRINT array(1, 1)</pre>"}, {"lang": "C", "loc": 13, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>   <span class=\"kw4\">int</span> user1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> user2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter two integers.  Space delimited, please:  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\"</span><span class=\"sy0\">,&amp;</span>user1<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>user2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> array<span class=\"br0\">[</span>user1<span class=\"br0\">]</span><span class=\"br0\">[</span>user2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   array<span class=\"br0\">[</span>user1<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>user2<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> user1 <span class=\"sy0\">+</span> user2<span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"array[%d][%d] is\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>user1<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>user2<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>array<span class=\"br0\">[</span>user1<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>user2<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// read values</span><br/>  <span class=\"kw4\">int</span> dim1, dim2<span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> dim1 <span class=\"sy1\">&gt;&gt;</span> dim2<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// create array</span><br/>  <span class=\"kw4\">double</span><span class=\"sy2\">*</span> array_data <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>dim1<span class=\"sy2\">*</span>dim2<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">double</span><span class=\"sy2\">**</span> array <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">double</span><span class=\"sy2\">*</span><span class=\"br0\">[</span>dim1<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> dim1<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> array_data <span class=\"sy2\">+</span> dim2<span class=\"sy2\">*</span>i<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// write element</span><br/>  array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu16\">3.5</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// output element</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// get rid of array</span><br/>  <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array_data<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 15, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter two integers. Space delimited please: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> myArray<span class=\"sy0\">=</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>,<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            myArray<span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>myArray<span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "Clean", "loc": 8, "block": "<pre class=\"text highlighted_source\">import StdEnv<br/>\u00a0<br/>Start\u00a0:: *World -&gt; { {Real} }<br/>Start world<br/>    # (console, world) = stdio world<br/>      (_, dim1, console) = freadi console<br/>      (_, dim2, console) = freadi console<br/>    = createArray dim1 (createArray dim2 1.0)</pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rows <span class=\"br0\">(</span>Integer<span class=\"sy0\">/</span>parseInt <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      cols <span class=\"br0\">(</span>Integer<span class=\"sy0\">/</span>parseInt <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      a <span class=\"br0\">(</span><span class=\"kw1\">to-array-2d</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> rows <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> cols nil<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">aset</span> a <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"Element at 0,0:\"</span> <span class=\"br0\">(</span><span class=\"kw1\">aget</span> a <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>d1 <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>d2 <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>typep d1 '<span class=\"br0\">(</span><span class=\"kw1\">integer</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>               <span class=\"br0\">(</span>typep d2 '<span class=\"br0\">(</span><span class=\"kw1\">integer</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>          <span class=\"br0\">(</span>d1 d2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">array</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> d1 d2<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>p1 <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>p2 <span class=\"br0\">(</span>floor d2 <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> p1 p2<span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> p1 p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 19, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> TestArray;<br/><span class=\"coMULTI\">(* Implemented in BlackBox Component Builder *)</span><br/>\u00a0<br/>\t<span class=\"kw1\">IMPORT</span> Out;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* Open array *)</span><br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> DoTwoDim<span class=\"sy0\">*</span>;<br/>\t\t<span class=\"kw1\">VAR</span> d<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>; <span class=\"coMULTI\">(* allocating array in memory *)</span><br/>\t\td<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">100</span>; <span class=\"coMULTI\">(* second row, third column element *)</span><br/>\t\td<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">100</span>; <span class=\"coMULTI\">(* fifth row, fourth column element *)</span><br/>\t\tOut.<span class=\"me1\">Int</span><span class=\"br0\">(</span>d<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">Ln</span>;<br/>\t\tOut.<span class=\"me1\">Int</span><span class=\"br0\">(</span>d<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">END</span> DoTwoDim;<br/>\u00a0<br/><span class=\"kw1\">END</span> TestArray.</pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> nRow<span class=\"sy0\">,</span> nCol<span class=\"sy0\">;</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Give me the numer of rows: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>        nRow <span class=\"sy0\">=</span> readln.<span class=\"me1\">strip</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>StdioException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nRow <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Give me the numer of columns: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>        nCol <span class=\"sy0\">=</span> readln.<span class=\"me1\">strip</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>StdioException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nCol <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> array <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">float</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>nRow<span class=\"sy0\">,</span> nCol<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu16\">3.5</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"The number at place [0, 0] is \"</span><span class=\"sy0\">,</span> array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 28, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Project1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  matrix<span class=\"sy1\">:</span><span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Byte</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Randomize<span class=\"sy1\">;</span><br/>  <span class=\"co1\">//Finalization is not required in this case, but you have to do</span><br/>  <span class=\"co1\">//so when reusing the variable in scope</span><br/>  <span class=\"kw3\">Finalize</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//Init first dimension with random size from 1..10</span><br/>  <span class=\"co1\">//Remember dynamic arrays are indexed from 0</span><br/>  <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>matrix<span class=\"sy1\">,</span><span class=\"kw3\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//Init 2nd dimension with random sizes too</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw3\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">//End of code, the following part is just output</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'Total amount of columns =\u00a0%.2d'</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'Column\u00a0%.2d =\u00a0%.2d rows'</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>i<span class=\"sy1\">,</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Elena", "loc": 16, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[ <br/>    var n\u00a0:= Integer new.<br/>    var m\u00a0:= Integer new.<br/>\u00a0<br/>    console write:\"Enter two space delimited integers:\".<br/>    console readLine(n,m).<br/>\u00a0<br/>    var myArray\u00a0:= RealMatrix new(n,m).<br/>\u00a0<br/>    myArray[0][0]\u00a0:= 2.<br/>\u00a0<br/>    console printLine(myArray[0][0]).<br/>].</pre>"}, {"lang": "Elixir", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule TwoDimArray do<br/>\u00a0<br/>  def create(w, h) do<br/>    List.duplicate(0, w)<br/>      |&gt; List.duplicate(h)<br/>  end<br/>\u00a0<br/>  def set(arr, x, y, value) do<br/>    List.replace_at(arr, x, <br/>      List.replace_at(Enum.at(arr, x), y, value)<br/>    )<br/>  end<br/>\u00a0<br/>  def get(arr, x, y) do<br/>    arr |&gt; Enum.at(x) |&gt; Enum.at(y)<br/>  end<br/>end<br/>\u00a0<br/>\u00a0<br/>width = IO.gets \"Enter Array Width: \"<br/>w = width |&gt; String.trim() |&gt; String.to_integer()<br/>\u00a0<br/>height = IO.gets \"Enter Array Height: \"<br/>h = height |&gt; String.trim() |&gt; String.to_integer()<br/>\u00a0<br/>arr = TwoDimArray.create(w, h) <br/>arr = TwoDimArray.set(arr,2,0,42)<br/>\u00a0<br/>IO.puts(TwoDimArray.get(arr,2,0))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 20, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> two_dimensional_array <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>create<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw3\">get</span><span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> set<span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"kw3\">size</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>default<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"kw3\">size</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Array</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Array</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">set</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Array</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Y_array</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Array</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">New_y_array</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">set</span><span class=\"br0\">(</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Y_array</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">set</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">New_y_array</span><span class=\"sy1\">,</span> <span class=\"re5\">Array</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fread</span><span class=\"br0\">(</span> <span class=\"st0\">\"Input two integers.  Space delimited, please:  \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"~d ~d\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Array</span> <span class=\"sy3\">=</span> <span class=\"re3\">create</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">New_array</span> <span class=\"sy3\">=</span> <span class=\"re3\">set</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span> <span class=\"sy3\">*</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Array</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"In position ~p ~p we have ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw3\">get</span><span class=\"br0\">(</span> <span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">New_array</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM DYNAMIC<br/>\u00a0<br/>!$DYNAMIC<br/>DIM A%[0,0]<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)\u00a0!CLS<br/>  INPUT(\"Subscripts\",R%,C%)<br/> \u00a0!$DIM A%[R%,C%]<br/>  A%[2,3]=6<br/>  PRINT(\"Value in row\";2;\"and col\";3;\"is\";A%[2,3])<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 15, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> get.e<br/>\u00a0<br/><span class=\"kw2\">sequence</span> array<br/><span class=\"kw2\">integer</span> height<span class=\"sy2\">,</span>width<span class=\"sy2\">,</span>i<span class=\"sy2\">,</span>j<br/>\u00a0<br/>height <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>prompt_number<span class=\"br0\">(</span><span class=\"st0\">\"Enter height: \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>width <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>prompt_number<span class=\"br0\">(</span><span class=\"st0\">\"Enter width: \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>array <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span>width<span class=\"br0\">)</span><span class=\"sy2\">,</span>height<span class=\"br0\">)</span><br/>\u00a0<br/>i <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>height<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">+</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>j <span class=\"sy1\">=</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>width<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">+</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> height <span class=\"sy1\">+</span> width<br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"array[%d][%d] is\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>i<span class=\"sy2\">,</span>j<span class=\"sy2\">,</span>array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 14, "block": "<pre class=\"text highlighted_source\">USING: io kernel math.matrices math.parser prettyprint<br/>sequences\u00a0;<br/>IN: rosettacode.runtime2darray<br/>\u00a0<br/>: set-Mi,j ( elt {i,j} matrix -- )<br/>[ first2 swap ] dip nth set-nth\u00a0;<br/>: Mi,j ( {i,j} matrix -- elt ) <br/>[ first2 swap ] dip nth nth\u00a0;<br/>\u00a0<br/>: example ( -- ) <br/>readln readln [ string&gt;number ] <a class=\"__cf_email__\" data-cfemail=\"3b59527b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> zero-matrix\u00a0! create the array<br/>[ [ 42 { 0 0 } ] dip set-Mi,j ]\u00a0! set the { 0 0 } element to 42<br/>[ [ { 0 0 } ] dip Mi,j . ]\u00a0! read the { 0 0 } element<br/>bi\u00a0;</pre>"}, {"lang": "Forth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: cell-matrix<br/>  create ( width height \"name\" ) over ,  * cells allot<br/>  does&gt; ( x y -- addr ) dup cell+ &gt;r  @ * + cells r&gt; +\u00a0;<br/>\u00a0<br/>5 5 cell-matrix test<br/>\u00a0<br/>36 0 0 test\u00a0!<br/>0 0 test @ .  \\ 36</pre>"}, {"lang": "Fortran", "loc": 20, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> Example<br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">rows</span>, columns, errcheck<br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">ALLOCATABLE</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>\u00a0<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Enter number of rows\"</span><br/>  READ<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> rows<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Enter number of columns\"</span><br/>  READ<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> columns<br/>\u00a0<br/>  <span class=\"kw1\">ALLOCATE</span> <span class=\"br0\">(</span>array<span class=\"br0\">(</span>rows,columns<span class=\"br0\">)</span>, STAT<span class=\"sy0\">=</span>errcheck<span class=\"br0\">)</span> <span class=\"co1\">! STAT is optional and is used for error checking</span><br/>\u00a0<br/>  array<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><br/>\u00a0<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> array<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">DEALLOCATE</span> <span class=\"br0\">(</span>array, STAT<span class=\"sy0\">=</span>errcheck<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> Example</pre>"}, {"lang": "FreeBASIC", "loc": 11, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j<br/><span class=\"kw1\">Input</span> <span class=\"st0\">\"Enter two positive integers, separated by a comma\"</span>; i, j<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> i, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> j<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> = i * j<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"a(\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\",\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>; <span class=\"st0\">\") =\"</span>; a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/><span class=\"kw1\">Erase</span> a<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[rows, cols] = dims = eval[input[\"Enter dimensions: \", [\"Rows\", \"Columns\"]]]<br/>a = new array[dims, 0]    // Create and initialize to 0<br/><a class=\"__cf_email__\" data-cfemail=\"086948\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(rows-1)@(cols-1) = 10<br/>println[<a class=\"__cf_email__\" data-cfemail=\"137253\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(rows-1)@(cols-1)]<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 7, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> width <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span> Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> height <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span> Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> arr <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">create</span> width height <span class=\"nu0\">0</span><br/>arr.<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">42</span><br/>printfn <span class=\"st0\">\"%d\"</span> arr.<span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span></pre>"}, {"lang": "GAP", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Creating an array of 0<br/>a\u00a0:= NullMat(2, 2); <br/># [ [ 0, 0 ], [ 0, 0 ] ]<br/>\u00a0<br/># Some assignments<br/>a[1][1]\u00a0:= 4;<br/>a[1][2]\u00a0:= 5;<br/>a[2][1]\u00a0:= 3;<br/>a[2][2]\u00a0:= 4;<br/>\u00a0<br/>a<br/># [ [ 4, 5 ], [ 3, 4 ] ]<br/>\u00a0<br/>Determinant(a);<br/># 1</pre>"}, {"lang": "Go", "loc": 28, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> row<span class=\"sy1\">,</span> col <span class=\"kw4\">int</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"enter rows cols: \"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Scan</span><span class=\"sy1\">(</span><span class=\"sy3\">&amp;</span>row<span class=\"sy1\">,</span> <span class=\"sy3\">&amp;</span>col<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// allocate composed 2d array</span><br/>    a <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> row<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// array elements initialized to 0</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"a[0][0] =\"</span><span class=\"sy1\">,</span> a<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>\u00a0<br/>    <span class=\"co1\">// assign</span><br/>    a<span class=\"sy1\">[</span>row<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>col<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">7</span><br/>\u00a0<br/>    <span class=\"co1\">// retrieve</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"a[%d][%d] =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> row<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> col<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> a<span class=\"sy1\">[</span>row<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>col<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>\u00a0<br/>    <span class=\"co1\">// remove only reference</span><br/>    a <span class=\"sy2\">=</span> <span class=\"kw2\">nil</span><br/>    <span class=\"co1\">// memory allocated earlier with make can now be garbage collected.</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> make2d <span class=\"sy0\">=</span> <span class=\"br0\">{</span> nrows, ncols <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>nrows<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>ncols <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/>\u00a0<br/>doit n m <span class=\"sy0\">=</span> a<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">where</span> a <span class=\"sy0\">=</span> array <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 7, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> array<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">DLG</span><span class=\"br0\">(</span>NameEdit<span class=\"sy1\">=</span>rows<span class=\"sy1\">,</span> NameEdit<span class=\"sy1\">=</span>cols<span class=\"sy1\">,</span> Button<span class=\"sy1\">=</span><span class=\"st0\">'OK'</span><span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span><span class=\"st0\">'Enter array dimensions'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">ALLOCATE</span><span class=\"br0\">(</span>array<span class=\"sy1\">,</span> cols<span class=\"sy1\">,</span> rows<span class=\"br0\">)</span><br/>array<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1.234</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> array<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Icon and Unicon", "loc": 13, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    nr <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">3</span>  <span class=\"co1\"># Default to 3x3</span><br/>    nc <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>    A <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>nr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy1\">!</span>A <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>nc<span class=\"br0\">)</span><br/>\u00a0<br/>    x <span class=\"sy1\">:=</span> <span class=\"sy1\">?</span>nr    <span class=\"co1\"># Select a random element</span><br/>    y <span class=\"sy1\">:=</span> <span class=\"sy1\">?</span>nc<br/>\u00a0<br/>    A<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">pi</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"A[\"</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span><span class=\"st0\">\"][\"</span><span class=\"sy1\">,</span>y<span class=\"sy1\">,</span><span class=\"st0\">\"] -&gt; \"</span><span class=\"sy1\">,</span>A<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 9, "block": "<pre class=\"idl highlighted_source\">read, x, prompt<span class=\"sy0\">=</span><span class=\"st0\">'Enter x size:'</span><br/>read, y, prompt<span class=\"sy0\">=</span><span class=\"st0\">'Enter y size:'</span><br/>d <span class=\"sy0\">=</span> fltarr<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <br/>\u00a0<br/>d<span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5.6</span><br/>print,d<span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span><br/><span class=\"sy0\">;==</span>&gt; outputs  <span class=\"nu0\">5.6</span><br/>\u00a0<br/>delvar, d</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   array1=:i. <span class=\"nu0\">3</span> <span class=\"nu0\">4</span>   <span class=\"co1\">NB. a 3 by 4 array with arbitrary values</span><br/>   array2=: <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> $ <span class=\"nu0\">2</span> <span class=\"co1\">NB. a 5 by 6 array where every value is the number 2</span></pre>"}, {"lang": "Java", "loc": 14, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> twoDimArray <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Scanner in <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> nbr1 <span class=\"sy0\">=</span> in.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nbr2 <span class=\"sy0\">=</span> in.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>nbr1<span class=\"br0\">]</span><span class=\"br0\">[</span>nbr2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42.0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"The number at place [0 0] is \"</span> <span class=\"sy0\">+</span> array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 17, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> width <span class=\"sy0\">=</span> <span class=\"kw4\">Number</span><span class=\"br0\">(</span>prompt<span class=\"br0\">(</span><span class=\"st0\">\"Enter width: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> height <span class=\"sy0\">=</span> <span class=\"kw4\">Number</span><span class=\"br0\">(</span>prompt<span class=\"br0\">(</span><span class=\"st0\">\"Enter height: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//make 2D array</span><br/><span class=\"kw1\">var</span> arr <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>width<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">//set value of element</span><br/>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'foo'</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//print value of element</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'arr[0][0] = '</span> <span class=\"sy0\">+</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//cleanup array</span><br/>arr <span class=\"sy0\">=</span> <span class=\"kw1\">void</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>   M | setpath([i,j]; e)\n</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">function input(prompt::AbstractString)<br/>    print(prompt)<br/>    return readline()<br/>end<br/>\u00a0<br/>n = input(\"Upper bound for dimension 1: \") |&gt;<br/>    x -&gt; parse(Int, x)<br/>m = input(\"Upper bound for dimension 2: \") |&gt;<br/>    x -&gt; parse(Int, x)<br/>\u00a0<br/>x = rand(n, m)<br/>display(x)<br/>x[3, 3]         # overloads `getindex` generic function<br/>x[3, 3] = 5.0   # overloads `setindex!` generic function<br/>x::Matrix # `Matrix{T}` is an alias for `Array{T, 2}`<br/>x = 0; gc() # Julia has no `del` command, rebind `x` and call the garbage collector</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// build</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dim <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> array <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>dim<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>dim<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// fill</span><br/>    array.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> i, it -<span class=\"sy0\">&gt;</span><br/>        it.<span class=\"me1\">indices</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> j -<span class=\"sy0\">&gt;</span><br/>            it<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + i + j<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// print</span><br/>    array.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span>it.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 11, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">input</span> <span class=\"st0\">\"Enter first  array dimension \"</span>; a<br/><span class=\"kw1\">input</span> <span class=\"st0\">\"Enter second array dimension \"</span>; b<br/>\u00a0<br/><span class=\"kw1\">dim</span> array<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>\u00a0<br/>array<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">123.456</span><br/><span class=\"kw1\">print</span> array<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">make \"a2 mdarray [5 5]<br/>mdsetitem [1 1]\u00a0:a2 0    \u00a0; by default, arrays are indexed starting at 1<br/>print mditem [1 1]\u00a0:a2   \u00a0; 0</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;=</span> b <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">,</span> multiply<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><br/>matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span>multiply<span class=\"br0\">(</span><span class=\"br0\">{</span>multiply<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>matrix<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckArray {<br/>      Do {<br/>            Input \"A, B=\", A% ,B%<br/>      } Until A%&gt;0 and B%&gt;0<br/>\u00a0<br/>      \\\\ <a class=\"__cf_email__\" data-cfemail=\"1b2a5b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> is 1 Decimal<br/>      addone=lambda <a class=\"__cf_email__\" data-cfemail=\"aae4979bea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> -&gt;{=N\u00a0: N++}<br/>      Dim Base 1, Arr(A%,B%)&lt;&lt;addone()<br/>      \\\\ pi also is decimal<br/>      Arr(1,1)=pi<br/>      Print Arr(1,1)<br/>      Print Arr()<br/>      \\\\ all variables/arrays/inner functions/modules erased now<br/>}<br/>CheckArray<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 12, "block": "<pre class=\"text highlighted_source\">&gt; a\u00a0:= Array( 1 .. 3, 1 .. 4 ): # initialised to 0s<br/>&gt; a[1,1]\u00a0:= 1: # assign an element<br/>&gt; a[2,3]\u00a0:= 4: # assign an element<br/>&gt; a; # display the array<br/>                           [1    0    0    0]<br/>                           [                ]<br/>                           [0    0    4    0]<br/>                           [                ]<br/>                           [0    0    0    0]<br/>\u00a0<br/>&gt; a\u00a0:= 'a': # unassign the name<br/>&gt; gc(); # force a garbage collection; may or may not actually collect the array, but it will be eventually</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>arrayFun[m_Integer,n_Integer]:=Module[{array=ConstantArray[0,{m,n}]},<br/>   array[[1,1]]=RandomReal[];<br/>   array[[1,1]]<br/>]</pre>"}, {"lang": "MATLAB / Octave", "loc": 11, "block": "<pre class=\"matlab highlighted_source\">width = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Array Width: '</span><span class=\"br0\">)</span>;<br/>height = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'Array Height: '</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>array  = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span>width,height<span class=\"br0\">)</span>;<br/>\u00a0<br/>array<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">12</span>;<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"co2\">'Array element (1,1) = '</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>array<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/clear.html\"><span class=\"kw2\">clear</span></a> array;  <span class=\"co1\">% de-allocate (remove) array from workspace </span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 9, "block": "<pre class=\"text highlighted_source\">printf(true, \"in the following terminate every number with semicolon `;'\")$<br/>n: readonly(\"Input x-size: \")$<br/>m: readonly(\"Input y-size: \")$<br/>a: make_array(fixnum, n, m)$<br/>fillarray(a, makelist(i, i, 1, m*n))$<br/>\u00a0<br/>/* indexing starts from 0 */<br/>print(a[0,0]);<br/>print(a[n-1,m-1]);</pre>"}, {"lang": "MAXScript", "loc": 11, "block": "<pre class=\"text highlighted_source\">a = getKBValue prompt:\"Enter first dimension:\"<br/>b = getKBValue prompt:\"Enter second dimension:\"<br/>arr1 = #()<br/>arr2 = #()<br/>arr2[b] = undefined<br/>for i in 1 to a do<br/>(<br/>     append arr1 (deepCopy arr2)<br/>)<br/>arr1[a][b] = 1<br/>print arr1[a][b]</pre>"}, {"lang": "MUMPS", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ARA2D<br/> NEW X,Y,A,I,J<br/>REARA<br/> WRITE\u00a0!,\"Please enter two positive integers\"<br/> READ:10\u00a0!,\"First: \",X<br/> READ:10\u00a0!,\"Second: \",Y<br/> GOTO:(X\\1'=X)!(X&lt;0)!(Y\\1'=Y)!(Y&lt;0) REARA<br/> FOR I=1:1:X FOR J=1:1:Y SET A(I,J)=I+J<br/> WRITE\u00a0!,\"The corner of X and Y is \",A(X,Y)<br/> KILL X,Y,A,I,J<br/> QUIT<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 13, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"give me the X and Y dimensions as two positive integers:\"</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">ask</span> xDim yDim<br/>xPos = xDim\u00a0% <span class=\"nu0\">2</span> <span class=\"co1\">-- integer divide to get close to the middle of the array</span><br/>yPos = yDim\u00a0% <span class=\"nu0\">2</span><br/>\u00a0<br/>arry = Rexx<span class=\"br0\">[</span>xDim, yDim<span class=\"br0\">]</span><br/>arry<span class=\"br0\">[</span>xPos, yPos<span class=\"br0\">]</span> = xDim <span class=\"sy0\">/</span> yDim <span class=\"co1\">-- make up a value...</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"arry[\"</span>xPos<span class=\"st0\">\",\"</span>yPos<span class=\"st0\">\"]:\"</span> arry<span class=\"br0\">[</span>xPos, yPos<span class=\"br0\">]</span><br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">import strutils, rdstdin<br/>\u00a0<br/>var<br/>  w = readLineFromStdin(\"Width: \").parseInt()<br/>  h = readLineFromStdin(\"Height: \").parseInt()<br/>  s = newSeq[seq[int]](h)<br/>\u00a0<br/>for i in 0 .. &lt; h:<br/>  s[i].newSeq(w)</pre>"}, {"lang": "Objeck", "loc": 25, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> IO<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> TwoDee <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> System.<span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      DoIt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> DoIt<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter x: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      x <span class=\"sy0\">:=</span> Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter y: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      y <span class=\"sy0\">:=</span> Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetInstance</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        array <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Int<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span>\t<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 26, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> num1, num2;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%d\"</span>, <span class=\"sy0\">&amp;</span>num1, <span class=\"sy0\">&amp;</span>num2<span class=\"br0\">)</span>;<br/>\u00a0<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%d\u00a0%d\"</span>, num1, num2<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> <span class=\"sy0\">*</span>arr <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/\"><span class=\"kw5\">NSMutableArray</span></a> arrayWithCapacity<span class=\"sy0\">:</span> <span class=\"br0\">(</span>num1<span class=\"sy0\">*</span>num2<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    <span class=\"co2\">// initialize it with 0s</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>; i &lt; <span class=\"br0\">(</span>num1<span class=\"sy0\">*</span>num2<span class=\"br0\">)</span>; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>arr addObject<span class=\"sy0\">:</span> @0<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"co2\">// replace 0s with something more interesting</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>; i &lt; num1; i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span>; j &lt; num2; j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        arr<span class=\"br0\">[</span>i<span class=\"sy0\">*</span>num2<span class=\"sy0\">+</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> @<span class=\"br0\">(</span>i<span class=\"sy0\">*</span>j<span class=\"br0\">)</span>;<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co2\">// access a value: i*num2+j, where i,j are the indexes for the bidimensional array</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">*</span>num2<span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> nbr1 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_int\"><span class=\"kw3\">read_int</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> nbr2 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_int\"><span class=\"kw3\">read_int</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix nbr1 nbr2 <span class=\"nu0\">0.0</span><span class=\"sy0\">;;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">3.5</span><span class=\"sy0\">;;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_float\"><span class=\"kw3\">print_float</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray\"><span class=\"kw4\">array</span></a><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span></pre>"}, {"lang": "ooRexx", "loc": 11, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">Say</span> <span class=\"st0\">\"enter first dimension\"</span><br/><span class=\"kw1\">pull</span> d1<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"enter the second dimension\"</span><br/><span class=\"kw1\">pull</span> d2<br/>a = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>d1, d2<span class=\"br0\">)</span><br/>a<span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">\"Abc\"</span><br/><span class=\"kw1\">say</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">say</span> d1 d2 a<span class=\"br0\">[</span>d1,d2<span class=\"br0\">]</span> <br/><span class=\"kw1\">say</span> a<span class=\"br0\">[</span><span class=\"nu0\">10</span>,<span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"kw6\">max</span>=<span class=\"nu0\">1000000000</span><br/>b = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span><span class=\"kw6\">max</span>,<span class=\"kw6\">max</span><span class=\"br0\">)</span>  </pre>"}, {"lang": "Oz", "loc": 15, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% Read width and height from stdin</span><br/>  <span class=\"kw1\">class</span> <span class=\"re2\">TextFile</span> <span class=\"kw1\">from</span> Open<span class=\"sy0\">.</span>file Open<span class=\"sy0\">.</span>text <span class=\"kw1\">end</span><br/>  StdIn = <span class=\"br0\">{</span>New TextFile init<span class=\"br0\">(</span>name:stdin<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  Width = <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>StdIn getS<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  Height = <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>StdIn getS<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"co1\">%% create array</span><br/>  Arr = <span class=\"br0\">{</span>Array<span class=\"sy0\">.</span>new 1 Width <span class=\"kw1\">unit</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>Width <span class=\"kw1\">do</span><br/>     Arr<span class=\"sy0\">.</span>X <span class=\"sy0\">:=</span> <span class=\"br0\">{</span>Array<span class=\"sy0\">.</span>new 1 Height 0<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"co1\">%% set and read element</span><br/>  Arr<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>1 <span class=\"sy0\">:=</span> 42<br/>  <span class=\"br0\">{</span>Show Arr<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>1<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">tmp<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  M<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>  M<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 26, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> array2d<span class=\"br0\">(</span>input<span class=\"sy1\">,</span> output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/> tArray2d<span class=\"br0\">(</span>dim1<span class=\"sy1\">,</span> dim2<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy1\">..</span> <span class=\"me1\">dim1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy1\">..</span> <span class=\"me1\">dim2</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> pArray2D <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tArray2D<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/> d1<span class=\"sy1\">,</span> d2<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> data<span class=\"sy1\">:</span> pArray2D<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> <span class=\"coMULTI\">{ read values }</span><br/> <span class=\"kw3\">readln</span><span class=\"br0\">(</span>d1<span class=\"sy1\">,</span> d2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\">{ create array }</span><br/> <span class=\"kw3\">new</span><span class=\"br0\">(</span>data<span class=\"sy1\">,</span> d1<span class=\"sy1\">,</span> d2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\">{ write element }</span><br/> data<span class=\"sy2\">^</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3.5</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\">{ output element }</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>data<span class=\"sy2\">^</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\">{ get rid of array }</span><br/> <span class=\"kw3\">dispose</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> make_array<span class=\"br0\">(</span>$ <span class=\"co5\">$)</span><span class=\"br0\">{</span><br/>  <span class=\"co1\"># get array sizes from provided params, but force numeric value</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^\\d+$/</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^\\d+$/</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\"># define array, then add multi-dimensional elements</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@array</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'X '</span><span class=\"sy0\">;</span> <span class=\"co1\"># first by first element</span><br/>  <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'X '</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$y</span> <span class=\"kw1\">and</span> <span class=\"nu0\">7</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># sixth by eighth element, if the max size is big enough</span><br/>  <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'X '</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">12</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$y</span> <span class=\"kw1\">and</span> <span class=\"nu0\">15</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># thirteenth by sixteenth element, if the max size is big enough</span><br/>\u00a0<br/>  <span class=\"co1\"># loop through the elements expected to exist base on input, and display the elements contents in a grid</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dy</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dx</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$dy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$dx</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$array</span><span class=\"br0\">[</span><span class=\"re0\">$dy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$dx</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'. '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$major</span><span class=\"sy0\">,</span><span class=\"re0\">$minor</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> prompt<span class=\"br0\">(</span><span class=\"st0\">\"Dimensions? \"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\d+/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@array</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"st_h\">'@'</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$minor</span> <span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$major</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@array</span><span class=\"br0\">[</span> <span class=\"sy0\">*.</span><span class=\"kw3\">rand</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"sy0\">*.</span><span class=\"kw3\">rand</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">@array</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">sequence array<br/>integer height,width,i,j<br/>\u00a0<br/>height = floor(prompt_number(\"Enter height: \"))<br/>width = floor(prompt_number(\"Enter width: \"))<br/>\u00a0<br/>array = repeat(repeat(0,width),height)<br/>\u00a0<br/>i = floor(height/2+0.5)<br/>j = floor(width/2+0.5)<br/>array[i][j] = height + width<br/>\u00a0<br/>printf(1,\"array[%d][%d] is\u00a0%d\\n\", {i,j,array[i][j]})</pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de 2dimTest (DX DY)<br/>   (let A (make (do DX (link (need DY))))<br/>      (set (nth A 3 3) 999)            # Set A[3][3] to 999<br/>      (mapc println A)                 # Print all<br/>      (get A 3 3) ) )                  # Return A[3][3]<br/>\u00a0<br/>(2dimTest 5 5)</pre>"}, {"lang": "PL/I", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* First way using a controlled variable: */<br/>\u00a0<br/>declare A(*,*) float controlled;<br/>get list (m, n);<br/>allocate A(m,n);<br/>get list (A);<br/>put skip list (A);<br/>\u00a0<br/>/* The array remains allocated until the program terminates, */<br/>/* or until explicitly destroyed using a FREE statement.     */<br/>\u00a0<br/>free A;<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 12, "block": "<pre class=\"text highlighted_source\">vars itemrep;<br/>incharitem(charin) -&gt; itemrep;<br/>;;; Read sizes<br/>vars n1 = itemrep(), n2= itemrep();<br/>;;; Create 0 based array<br/>vars ar = newarray([0 ^(n1 - 1) 0 ^(n2 - 1)], 0);<br/>;;; Set element value<br/>15 -&gt; ar(0, 0);<br/>;;; Print element value<br/>ar(0,0) =&gt;<br/>;;; Make sure array is unreferenced<br/>0 -&gt; ar;</pre>"}, {"lang": "PowerShell", "loc": 24, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Read<span class=\"sy0\">-</span>ArrayIndex <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$Prompt</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Enter an integer greater than zero\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$inputAsInteger</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">-not</span> <span class=\"br0\">[</span><span class=\"re3\">Int</span><span class=\"br0\">]</span>::TryParse<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$inputString</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Read-Host</span> <span class=\"re0\">$Prompt</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">ref</span><span class=\"br0\">]</span><span class=\"re0\">$inputAsInteger</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$inputString</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Read-Host</span> <span class=\"st0\">\"Enter an integer greater than zero\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$inputAsInteger</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"re0\">$inputAsInteger</span><span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>\u00a0<br/><span class=\"kw3\">do</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> Read<span class=\"sy0\">-</span>ArrayIndex <span class=\"kw5\">-Prompt</span> <span class=\"st0\">\"Enter two dimensional array index X\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> Read<span class=\"sy0\">-</span>ArrayIndex <span class=\"kw5\">-Prompt</span> <span class=\"st0\">\"Enter two dimensional array index Y\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">until</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw4\">-ne</span> <span class=\"re0\">$null</span><span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"kw4\">-ne</span> <span class=\"re0\">$null</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$array2d</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"kw5\">-TypeName</span> <span class=\"st0\">'System.Object[,]'</span> <span class=\"kw5\">-ArgumentList</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 17, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> x, y<br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Input X-Size: \"</span><span class=\"br0\">)</span><br/>  x <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Input Y-Size: \"</span><span class=\"br0\">)</span><br/>  y <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>   <span class=\"co1\">; Should really check if x &amp; y are larger then 1, but that would be less fun....</span><br/>\u00a0<br/>  a<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"a(1,1)= \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>:<span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span>          <span class=\"co1\">; Close down and let PureBasic delete the Console and all variables.</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\">width <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"Width of myarray: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>height <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"Height of Array: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>myarray <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * width <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>height<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>myarray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3.5</span><br/><span class=\"kw1\">print</span> myarray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 7, "block": "<pre class=\"text highlighted_source\">input &lt;- readline(\"Enter two integers.  Space delimited, please:  \")<br/>dims &lt;- as.numeric(strsplit(input, \" \")[[1]])<br/>arr &lt;- array(dim=dims)<br/>ii &lt;- ceiling(dims[1]/2)<br/>jj &lt;- ceiling(dims[2]/2)<br/>arr[ii, jj] &lt;- sum(dims)<br/>cat(\"array[\", ii, \",\", jj, \"] is \", arr[ii, jj], \"\\n\", sep=\"\")</pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(printf \"Enter XY dimensions: \")<br/>(define xy (cons (read) (read)))<br/>(define array (for/vector ([x (car xy)]) (for/vector ([y (cdr xy)]) 0)))<br/>\u00a0<br/>(printf \"Enter a number for the top-left: \")<br/>(vector-set! (vector-ref array 0) 0 (read))<br/>(printf \"Enter a number for the bottom-right: \")<br/>(vector-set! (vector-ref array (sub1 (car xy))) (sub1 (cdr xy)) (read))<br/>\u00a0<br/>array<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 33, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  allocates/populates/displays  a two-dimensional array.  */</span><br/><span class=\"kw1\">call</span> bloat                   <span class=\"coMULTI\">/*the BLOAT procedure does all allocations.*/</span><br/>                             <span class=\"coMULTI\">/*no more array named   @   at this point. */</span><br/><span class=\"kw1\">exit</span>                         <span class=\"coMULTI\">/*stick a fork in it, we're all done honey.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500BLOAT subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>bloat: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">say</span>       <span class=\"coMULTI\">/*\"PROCEDURE\"  makes this a \u00b7\u00b7\u00b7 procedure. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Enter two positive integers (a 2-dimensional array will be created).'</span><br/><span class=\"kw1\">pull</span> n m <span class=\"sy0\">.</span>                   <span class=\"coMULTI\">/*elements are allocated as they're defined*/</span><br/>                             <span class=\"coMULTI\">/*N and M should be verified at this point.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"st0\">' \u00b7 '</span>                     <span class=\"coMULTI\">/*Initial value for all  @  array elements,*/</span><br/>                             <span class=\"coMULTI\">/*this ensures  every  element has a value.*/</span><br/>  <span class=\"kw1\">do</span> j    =<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n          <span class=\"coMULTI\">/*traipse through the first  dimension  [N]*/</span><br/>      <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> m          <span class=\"coMULTI\">/*   \"       \"     \"  second     \"      [M]*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"nu0\">7</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>k=j<span class=\"st0\">'~'</span>k    <span class=\"coMULTI\">/*populate every 7th random*/</span><br/>      <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>  <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*j*/</span><br/>                             <span class=\"coMULTI\">/* [\u2193]  display array to console:  row,col */</span><br/>  <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;    _=       <span class=\"coMULTI\">/*construct one row (or line) at a time.   */</span><br/>      <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> m          <span class=\"coMULTI\">/*construct row one column at a time.      */</span><br/>      _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c,<span class=\"nu0\">4</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*append a nice-aligned column to the line.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*kk*/</span>           <span class=\"coMULTI\">/* [\u2191]   an nicely aligned line is built.  */</span><br/>  <span class=\"kw1\">say</span> _                      <span class=\"coMULTI\">/*display one row at a time to the terminal*/</span><br/>  <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*jj*/</span><br/><span class=\"coMULTI\">/*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557<br/>  \u2551 When the  RETURN  is executed (from a PROCEDURE in this case), and \u2551<br/>  \u2551 array   @  is \"de\u2500allocated\", that is, it's no longer defined, and \u2551<br/>  \u2551 the array's storage is now free for other REXX variables.   If the \u2551<br/>  \u2551 BLOAT   subroutine didn't have a   \"PROCEDURE\"   on that statement,\u2551<br/>  \u2551 the array    @    would've been left intact.    The same effect is \u2551<br/>  \u2551 performed by a   DROP   statement   (an example is shown below).   \u2551<br/>  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/</span><br/><span class=\"kw1\">drop</span> @<span class=\"sy0\">.</span>                      <span class=\"coMULTI\">/*because of the  PROCEDURE  statement, the*/</span><br/><span class=\"kw1\">return</span>                       <span class=\"coMULTI\">/* [\u2191]    DROP   statement is superfluous. */</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>See 'Enter width\u00a0: ' give width<br/>See 'Enter height\u00a0: ' give height<br/>width=0+width   height=0+height<br/>aList = list(height) for x in aList  x = list(width) next<br/>aList[1][2] = 10  See aList[1][2] + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">puts</span> <span class=\"st0\">'Enter width and height: '</span><br/>w=<span class=\"kw3\">gets</span>.<span class=\"me1\">to_i</span><br/>arr = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw3\">gets</span>.<span class=\"me1\">to_i</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = <span class=\"nu0\">5</span><br/><span class=\"kw3\">p</span> arr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span></pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">print \"Enter array 1 greater than 0\";\u00a0: input a1<br/>print \"Enter array 2 greater than 0\";\u00a0: input a2<br/>\u00a0<br/>dim chrArray$(max(a1,1),max(a2,1))<br/>dim numArray(max(a1,1),max(a2,1))<br/>\u00a0<br/>chrArray$(1,1) = \"Hello\"<br/>numArray(1,1)  = 987.2<br/>print chrArray$(1,1);\" \";numArray(1,1)</pre>"}, {"lang": "Rust", "loc": 15, "block": "<pre class=\"text highlighted_source\">use std::env;<br/>\u00a0<br/>fn main() {<br/>    let mut args = env::args().skip(1).flat_map(|num| num.parse());<br/>    let rows = args.next().expect(\"Expected number of rows as first argument\");<br/>    let cols = args.next().expect(\"Expected number of columns as second argument\");<br/>\u00a0<br/>    assert_ne!(rows, 0, \"rows were zero\");<br/>    assert_ne!(cols, 0, \"cols were zero\");<br/>\u00a0<br/>    // Creates a vector of vectors with all elements initialized to 0.<br/>    let mut v = vec![vec![0; cols]; rows];<br/>    v[0][0] = 1;<br/>    println!(\"{}\", v[0][0]);<br/>}</pre>"}, {"lang": "Scala", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Array2D<span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> Console.<span class=\"me1\">readInt</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> Console.<span class=\"me1\">readInt</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a<span class=\"sy0\">=</span>Array.<span class=\"me1\">fill</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">42</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"The number at (0, 0) is \"</span>+a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">read</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Read x/y from user</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> x <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"X: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>flush<span class=\"sy0\">-</span><span class=\"kw1\">output-port</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> y <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Y: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>flush<span class=\"sy0\">-</span><span class=\"kw1\">output-port</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Create a vector, and fill it with a vector for each row</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> arr <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i x<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> arr i <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> y <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; set element (x/2, y/2) to 3</span><br/><span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> arr <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> y <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> arr<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Retrieved: \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> arr <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> y <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 16, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: numRows is 0;<br/>    var integer: numCols is 0;<br/>    var array array integer: anArray is 0 times 0 times 0;<br/>  begin<br/>    write(\"Give me the numer of rows: \");<br/>    readln(numRows); <br/>    write(\"Give me the numer of columns: \");<br/>    readln(numCols);<br/>    anArray\u00a0:= numRows times numCols times 0;<br/>    anArray[1][1]\u00a0:= 3;<br/>    writeln(\"The number at place [1, 1] is \" &lt;&amp; anArray[1][1]);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func make_matrix<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    y.<span class=\"me1\">of</span> <span class=\"br0\">{</span> x.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var y = Sys.<span class=\"me1\">scanln</span><span class=\"br0\">(</span><span class=\"st0\">\"rows: \"</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span>;<br/>var x = Sys.<span class=\"me1\">scanln</span><span class=\"br0\">(</span><span class=\"st0\">\"cols: \"</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span>;<br/>\u00a0<br/>var matrix = make_matrix<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;   <span class=\"co1\"># create the matrix</span><br/>matrix<span class=\"br0\">[</span>y<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span>;             <span class=\"co1\"># write something inside it</span><br/>say matrix;                       <span class=\"co1\"># display the matrix</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\"> 10 PRINT \"1ST DIMENSION: \";<br/> 20 INPUT D1<br/> 30 PRINT D1<br/> 40 PRINT \"2ND DIMENSION: \";<br/> 50 INPUT D2<br/> 60 PRINT D2<br/> 70 DIM A(D1,D1)<br/> 80 PRINT \"ARRAY CREATED\"<br/> 90 LET X=1+INT (D1*RND)<br/>100 LET Y=1+INT (D2*RND)<br/>110 LET A(X,Y)=37<br/>120 PRINT \"ITEM \";X;\", \";Y;\" = \";A(X,Y)<br/>130 CLEAR<br/>140 PRINT \"ARRAY DESTROYED\"</pre>"}, {"lang": "Smalltalk", "loc": 13, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re6\">m</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re0\">FillInTheBlankMorph</span> request: <span class=\"st0\">'Number of rows?'</span><span class=\"br0\">)</span> asNumber.<br/><span class=\"re5\">n</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re0\">FillInTheBlankMorph</span> request: <span class=\"st0\">'Number of columns?'</span><span class=\"br0\">)</span> asNumber.<br/><span class=\"re5\">aMatrix</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Matrix</span> rows: <span class=\"re5\">m</span> columns: <span class=\"re5\">n</span>.<br/><span class=\"re5\">aMatrix</span> <br/>\tat: <span class=\"br0\">(</span><span class=\"re5\">aMatrix</span> rowCount // <span class=\"re5\">2</span><span class=\"br0\">)</span> <br/>\tat: <span class=\"br0\">(</span><span class=\"re5\">aMatrix</span> columnCount // <span class=\"re5\">2</span><span class=\"br0\">)</span> <br/>\tput: <span class=\"re5\">3</span>.<span class=\"re5\">4</span>.<br/><span class=\"re5\">e</span> <span class=\"sy0\">:=</span> <span class=\"re5\">aMatrix</span> <br/>\tat: <span class=\"br0\">(</span><span class=\"re5\">aMatrix</span> rowCount // <span class=\"re5\">2</span><span class=\"br0\">)</span> <br/>\tat: <span class=\"br0\">(</span><span class=\"re5\">aMatrix</span> columnCount // <span class=\"re5\">2</span><span class=\"br0\">)</span>.<br/><span class=\"re0\">Transcript</span> show: <span class=\"st0\">'Entry is'</span>, <span class=\"re5\">e</span> printString.<br/>\u00a0</pre>"}, {"lang": "SNOBOL4", "loc": 21, "block": "<pre class=\"text highlighted_source\">*       # Get user X,Y dimensions<br/>        output = 'Enter X,Y:'; xy = trim(input)<br/>        xy break(',') . x ',' rem . y<br/>\u00a0<br/>*       # Define and create array, 1-based<br/>        arr = array(x ',' y)\u00a0;* Or arr = array(xy)<br/>\u00a0<br/>*       # Display array prototype<br/>        output = 'Prototype: ' prototype(arr)<br/>\u00a0<br/>*       # Assign elements, angle or square brackets<br/>*       # Same array can hold ints, strings, etc.<br/>        arr&lt;x,y&gt; = 99; arr[1,1] = 'dog'<br/>\u00a0<br/>*       # Display elements<br/>        output = 'arr[' xy '] = ' arr[x,y]<br/>        output = 'arr[1,1] = ' arr[1,1]<br/>\u00a0<br/>*       # Release array for garbage collection<br/>        arr =<br/>end</pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">val nbr1 = valOf (TextIO.scanStream (Int.scan StringCvt.DEC) TextIO.stdIn);<br/>val nbr2 = valOf (TextIO.scanStream (Int.scan StringCvt.DEC) TextIO.stdIn);<br/>val array = Array2.array (nbr1, nbr2, 0.0);<br/>Array2.update (array, 0, 0, 3.5);<br/>print (Real.toString (Array2.sub (array, 0, 0)) ^ \"\\n\");</pre>"}, {"lang": "Stata", "loc": 6, "block": "<pre class=\"text highlighted_source\">display \"Number of rows?\" _request(nr)<br/>display \"Number of columns?\" _request(nc)<br/>matrix define a=J($nr,$nc,0)<br/>matrix a[1,2]=1.5<br/>matrix list a<br/>matrix drop a</pre>"}, {"lang": "Swift", "loc": 19, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>print(\"Enter the dimensions of the array seperated by a space (width height): \")<br/>\u00a0<br/>let fileHandle = NSFileHandle.fileHandleWithStandardInput()<br/>let dims = NSString(data: fileHandle.availableData, encoding: NSUTF8StringEncoding)?.componentsSeparatedByString(\" \")<br/>\u00a0<br/>if let dims = dims where dims.count == 2{<br/>\tlet w = dims[0].integerValue<br/>\tlet h = dims[1].integerValue<br/>\u00a0<br/>\tif let w = w, h = h where w &gt; 0 &amp;&amp; h &gt; 0 {<br/>\t\tvar array = Array&lt;[Int!]&gt;(count: h, repeatedValue: Array&lt;Int!&gt;(count: w, repeatedValue: nil))<br/>\u00a0<br/>\t\tarray[0][0] = 2<br/>\t\tprintln(array[0][0])<br/>\t\tprintln(array)<br/>\t}<br/>}</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Enter width:\"</span><br/><span class=\"kw1\">set</span> width <span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Enter height:\"</span><br/><span class=\"kw1\">set</span> height <span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin<span class=\"br0\">]</span><br/><span class=\"co1\"># Initialize array</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$width</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$height</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> arr<span class=\"br0\">(</span><span class=\"re0\">$i</span>,<span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Store value</span><br/><span class=\"kw1\">set</span> arr<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"abc\"</span><br/><span class=\"co1\"># Print value</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Element (0/0): $arr(0,0)\"</span><br/><span class=\"co1\"># Cleanup array</span><br/>unset arr<br/>\u00a0</pre>"}, {"lang": "TI-83 BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">Input \"ROWS? \",R<br/>Input \"COLS? \",C<br/>{R,C}\u2192dim([A])<br/>42\u2192[A](1,1)<br/>Disp [A](1,1)<br/>DelVar [A]</pre>"}, {"lang": "Toka", "loc": 14, "block": "<pre class=\"text highlighted_source\">[ ( x y -- address )<br/>  cells malloc &gt;r<br/>  dup cells &gt;r<br/>  [ r&gt; r&gt; r&gt; 2dup &gt;r &gt;r swap malloc swap i swap array.put &gt;r ] iterate<br/>r&gt; r&gt; nip<br/>] is 2D-array<br/>\u00a0<br/>[ ( a b address -- value )<br/>  array.get array.get<br/>] is 2D-get-element<br/>\u00a0<br/>[ ( value a b address -- )<br/>  array.get array.put<br/>] is 2D-put-element</pre>"}, {"lang": "Ursa", "loc": 19, "block": "<pre class=\"text highlighted_source\">decl int width height<br/>out \"width:  \" console<br/>set width (in int console)<br/>out \"height: \" console<br/>set height (in int console)<br/>\u00a0<br/>decl int&lt;&gt;&lt;&gt; twodstream<br/>for (decl int i) (&lt; i height) (inc i)<br/>        append (new int&lt;&gt;) twodstream<br/>end for<br/>for (set i 0) (&lt; i height) (inc i)<br/>        decl int j<br/>        for (set j 0) (&lt; j width) (inc j)<br/>                append 0 twodstream&lt;i&gt;<br/>        end for<br/>end for<br/>\u00a0<br/>set twodstream&lt;0&gt;&lt;0&gt; 5<br/>out twodstream&lt;0&gt;&lt;0&gt; endl console</pre>"}, {"lang": "VBA", "loc": 21, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_Create_Array()<br/><span class=\"kw4\">Dim</span> NbColumns <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, NbRows <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    <span class=\"co1\">'Get two integers from the user,<br/></span>    <span class=\"kw3\">Do</span><br/>        NbColumns = Application.InputBox(<span class=\"st0\">\"Enter number of columns\u00a0: \"</span>, <span class=\"st0\">\"Numeric only\"</span>, 3, <span class=\"kw4\">Type</span>:=1)<br/>        NbRows = Application.InputBox(<span class=\"st0\">\"Enter number of rows\u00a0: \"</span>, <span class=\"st0\">\"Numeric only\"</span>, 5, <span class=\"kw4\">Type</span>:=1)<br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">While</span> NbColumns = 0 <span class=\"kw3\">Or</span> NbRows = 0<br/>    <span class=\"co1\">'Create a two-dimensional array at runtime<br/></span>    <span class=\"kw4\">ReDim</span> myArray(1 <span class=\"kw3\">To</span> NbRows, 1 <span class=\"kw3\">To</span> NbColumns)<br/>    <span class=\"co1\">'Write some element of that array,<br/></span>    myArray(<span class=\"kw4\">LBound</span>(myArray, 1), <span class=\"kw4\">UBound</span>(myArray, 2)) = <span class=\"st0\">\"Toto\"</span><br/>    <span class=\"co1\">'and then output that element.<br/></span>    MsgBox myArray(<span class=\"kw4\">LBound</span>(myArray, 1), <span class=\"kw4\">UBound</span>(myArray, 2))<br/>    <span class=\"co1\">'destroy the array<br/></span>    Erase myArray<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Vim Script", "loc": 29, "block": "<pre class=\"vim highlighted_source\"><span class=\"co1\">\" Create a two-dimensional array with r rows and c columns.</span><span class=\"co1\"><br/>\" The optional third argument specifies the initial value</span><span class=\"co1\"><br/>\" (default is 0).</span><br/><span class=\"kw1\">function</span> MakeArray<span class=\"br0\">(</span>r, c, <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> a<span class=\"sy0\">:</span><span class=\"nu0\">0</span><br/>        <span class=\"kw1\">let</span> init = a<span class=\"sy0\">:</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">let</span> init = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">endif</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> temp = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"kw3\">range</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span>c<span class=\"br0\">)</span> <br/>        <span class=\"kw1\">call</span> <span class=\"kw3\">add</span><span class=\"br0\">(</span>temp, init<span class=\"br0\">)</span><br/>    <span class=\"kw1\">endfor</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> array = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw3\">range</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span>r<span class=\"br0\">)</span><br/>        <span class=\"kw1\">call</span> <span class=\"kw3\">add</span><span class=\"br0\">(</span>array, temp<span class=\"br0\">[</span><span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">endfor</span><br/>    <span class=\"kw1\">return</span> array<br/>endfunction<br/>\u00a0<br/><span class=\"kw1\">let</span> rows = <span class=\"kw3\">input</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of rows: \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> cols = <span class=\"kw3\">input</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number of columns: \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"kw1\">let</span> array = MakeArray<span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> array<span class=\"br0\">[</span>rows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>cols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> = rows <span class=\"sy0\">*</span> cols<br/><span class=\"kw1\">echo</span> array<span class=\"br0\">[</span>rows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>cols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">unlet</span> array</pre>"}, {"lang": "XPL0", "loc": 9, "block": "<pre class=\"text highlighted_source\">inc     c:\\cxpl\\codes;  \\(command words can be abbreviated to first 3 letters)<br/>def     IntSize=4;      \\number of bytes in an integer (2 or 4 depending on version)<br/>int     X, Y, A, I;<br/>[X:= IntIn(0);  Y:= IntIn(0);           \\get 2 dimensions from user<br/>A:= Reserve(X*IntSize);<br/>for I:= 0 to X-1 do A(I):= Reserve(Y*IntSize);<br/>A(X/2, Y/2):= X+Y;<br/>IntOut(0, A(X/2, Y/2));  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">rows:=ask(\"Rows: \").toInt();<br/>cols:=ask(\"columns: \").toInt();<br/>array:=rows.pump(List.createLong(rows),List.createLong(cols,0).copy);<br/>array[1][2]=123;<br/>array.println();<br/>array[1][2].println();</pre>"}, {"lang": "zonnon", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module Main;<br/>type<br/>\tMatrix = array *,* of integer;<br/>\u00a0<br/>var<br/>\tm: Matrix;<br/>\ti,j: integer;<br/>begin<br/>\twrite(\"first dim? \");readln(i);<br/>\twrite(\"second dim? \");readln(j);<br/>\tm\u00a0:= new Matrix(i,j);<br/>\tm[0,0]\u00a0:= 10;<br/>\twriteln(\"m[0,0]:&gt; \",m[0,0]);<br/>\twriteln(\"m[0,1].&gt; \",m[0,1])<br/>end Main.<br/>\u00a0</pre>"}]}