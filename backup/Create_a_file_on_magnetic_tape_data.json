{"task": "Create_a_file_on_magnetic_tape", "blocks": [{"lang": "Applesoft BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">SAVE</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tFILE<span class=\"sy0\">*</span> fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"TAPE.FILE\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"This code should be able to write a file to magnetic tape.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"The Wikipedia page on Magnetic tape data storage shows that magnetic tapes are still in use.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"In fact, the latest format, at the time of writing this code is TS1155 released in 2017.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"And since C is already 44, maybe 45, years old in 2017, I am sure someone somewhere did use a C compiler on magnetic tapes.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"If you happen to have one, please try to compile and execute me on that system.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"My creator tested me on an i5 machine with SSD and RAM that couldn't have even been dreamt of by Denis Ritchie.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"Who knows\u00a0? Maybe he did foresee today, after all he created something which is still young after 44-45 years and counting...<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"EOF\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>spit <span class=\"st0\">\"/dev/tape\"</span> <span class=\"st0\">\"Hello, World!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 22, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FORMAT <span class=\"kw3\">IS</span> FREE<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> MAKE-TAPE-<span class=\"kw3\">FILE</span><span class=\"sy0\">.</span><br/>\u00a0<br/>ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">INPUT-OUTPUT</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">FILE-CONTROL</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SELECT</span> TAPE-<span class=\"kw3\">FILE</span><br/>        <span class=\"kw3\">ASSIGN</span> <span class=\"st0\">\"./TAPE.FILE\"</span><br/>        <span class=\"kw3\">ORGANIZATION</span> <span class=\"kw3\">IS</span> <span class=\"kw3\">LINE</span> <span class=\"kw3\">SEQUENTIAL</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">FILE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">FD</span> TAPE-<span class=\"kw3\">FILE</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> TAPE-FILE-<span class=\"kw3\">RECORD</span> <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">OPEN</span> <span class=\"kw3\">OUTPUT</span> SHARING <span class=\"kw3\">WITH</span> <span class=\"kw3\">ALL</span> <span class=\"kw3\">OTHER</span> TAPE-<span class=\"kw3\">FILE</span><br/>    <span class=\"kw3\">WRITE</span> TAPE-FILE-<span class=\"kw3\">RECORD</span> <br/>        <span class=\"kw3\">FROM</span> <span class=\"st0\">\"COBOL treats tape files and text files identically.\"</span><br/>    <span class=\"kw3\">END-WRITE</span><br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span></pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">version</span><span class=\"br0\">(</span>Windows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        File f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"TAPE.FILE\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        File f <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"/dev/tape\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    f.<span class=\"me1\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Fortran", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"archive/tar\"</span><br/>        <span class=\"st0\">\"compress/gzip\"</span><br/>        <span class=\"st0\">\"flag\"</span><br/>        <span class=\"st0\">\"io\"</span><br/>        <span class=\"st0\">\"log\"</span><br/>        <span class=\"st0\">\"os\"</span><br/>        <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        filename <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span>String<span class=\"sy1\">(</span><span class=\"st0\">\"file\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"TAPE.FILE\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"filename within TAR\"</span><span class=\"sy1\">)</span><br/>        data <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span><span class=\"me1\">String</span><span class=\"sy1\">(</span><span class=\"st0\">\"data\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"data for file\"</span><span class=\"sy1\">)</span><br/>        outfile <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span><span class=\"me1\">String</span><span class=\"sy1\">(</span><span class=\"st0\">\"out\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"output file or device (e.g. /dev/tape)\"</span><span class=\"sy1\">)</span><br/>        gzipFlag <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span><span class=\"me1\">Bool</span><span class=\"sy1\">(</span><span class=\"st0\">\"gzip\"</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"st0\">\"use gzip compression\"</span><span class=\"sy1\">)</span><br/>        flag<span class=\"sy3\">.</span>Parse<span class=\"sy1\">()</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> w <a href=\"http://golang.org/search?q=io.Writer\"><span class=\"kw5\">io.<span class=\"me1\">Writer</span></span></a> <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Stdout<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>outfile <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>                f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"sy3\">*</span>outfile<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                        log<span class=\"sy3\">.</span>Fatalf<span class=\"sy1\">(</span><span class=\"st0\">\"opening/creating\u00a0%q:\u00a0%v\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">*</span>outfile<span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">defer</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>                w <span class=\"sy2\">=</span> f<br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>gzipFlag <span class=\"sy1\">{</span><br/>                zw <span class=\"sy2\">:=</span> gzip<span class=\"sy3\">.</span>NewWriter<span class=\"sy1\">(</span>w<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">defer</span> zw<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>                w <span class=\"sy2\">=</span> zw<br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        tw <span class=\"sy2\">:=</span> tar<span class=\"sy3\">.</span>NewWriter<span class=\"sy1\">(</span>w<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">defer</span> tw<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>        w <span class=\"sy2\">=</span> tw<br/>        tw<span class=\"sy3\">.</span>WriteHeader<span class=\"sy1\">(</span>&amp;<a href=\"http://golang.org/search?q=tar.Header\"><span class=\"kw5\">tar.<span class=\"me1\">Header</span></span></a><span class=\"sy1\">{</span><br/>                Name<span class=\"sy1\">:</span>     <span class=\"sy3\">*</span>filename<span class=\"sy1\">,</span><br/>                Mode<span class=\"sy1\">:</span>     <span class=\"nu0\">0660</span><span class=\"sy1\">,</span><br/>                Size<span class=\"sy1\">:</span>     <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>data<span class=\"sy1\">)),</span><br/>                ModTime<span class=\"sy1\">:</span>  time<span class=\"sy3\">.</span>Now<span class=\"sy1\">(),</span><br/>                Typeflag<span class=\"sy1\">:</span> tar<span class=\"sy3\">.</span>TypeReg<span class=\"sy1\">,</span><br/>                Uname<span class=\"sy1\">:</span>    <span class=\"st0\">\"guest\"</span><span class=\"sy1\">,</span><br/>                Gname<span class=\"sy1\">:</span>    <span class=\"st0\">\"guest\"</span><span class=\"sy1\">,</span><br/>        <span class=\"sy1\">})</span><br/>\u00a0<br/>        _<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> w<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>data<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"writing data:\"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Go", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>        <span class=\"st0\">\"archive/tar\"</span><br/>        <span class=\"st0\">\"compress/gzip\"</span><br/>        <span class=\"st0\">\"flag\"</span><br/>        <span class=\"st0\">\"io\"</span><br/>        <span class=\"st0\">\"log\"</span><br/>        <span class=\"st0\">\"os\"</span><br/>        <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        filename <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span>String<span class=\"sy1\">(</span><span class=\"st0\">\"file\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"TAPE.FILE\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"filename within TAR\"</span><span class=\"sy1\">)</span><br/>        data <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span><span class=\"me1\">String</span><span class=\"sy1\">(</span><span class=\"st0\">\"data\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"data for file\"</span><span class=\"sy1\">)</span><br/>        outfile <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span><span class=\"me1\">String</span><span class=\"sy1\">(</span><span class=\"st0\">\"out\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"output file or device (e.g. /dev/tape)\"</span><span class=\"sy1\">)</span><br/>        gzipFlag <span class=\"sy2\">:=</span> flag<span class=\"sy3\">.</span><span class=\"me1\">Bool</span><span class=\"sy1\">(</span><span class=\"st0\">\"gzip\"</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"st0\">\"use gzip compression\"</span><span class=\"sy1\">)</span><br/>        flag<span class=\"sy3\">.</span>Parse<span class=\"sy1\">()</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> w <a href=\"http://golang.org/search?q=io.Writer\"><span class=\"kw5\">io.<span class=\"me1\">Writer</span></span></a> <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Stdout<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>outfile <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>                f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"sy3\">*</span>outfile<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                        log<span class=\"sy3\">.</span>Fatalf<span class=\"sy1\">(</span><span class=\"st0\">\"opening/creating\u00a0%q:\u00a0%v\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">*</span>outfile<span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>                <span class=\"sy1\">}</span><br/>                <span class=\"kw1\">defer</span> f<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>                w <span class=\"sy2\">=</span> f<br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>gzipFlag <span class=\"sy1\">{</span><br/>                zw <span class=\"sy2\">:=</span> gzip<span class=\"sy3\">.</span>NewWriter<span class=\"sy1\">(</span>w<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">defer</span> zw<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>                w <span class=\"sy2\">=</span> zw<br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        tw <span class=\"sy2\">:=</span> tar<span class=\"sy3\">.</span>NewWriter<span class=\"sy1\">(</span>w<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">defer</span> tw<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>        w <span class=\"sy2\">=</span> tw<br/>        tw<span class=\"sy3\">.</span>WriteHeader<span class=\"sy1\">(</span>&amp;<a href=\"http://golang.org/search?q=tar.Header\"><span class=\"kw5\">tar.<span class=\"me1\">Header</span></span></a><span class=\"sy1\">{</span><br/>                Name<span class=\"sy1\">:</span>     <span class=\"sy3\">*</span>filename<span class=\"sy1\">,</span><br/>                Mode<span class=\"sy1\">:</span>     <span class=\"nu0\">0660</span><span class=\"sy1\">,</span><br/>                Size<span class=\"sy1\">:</span>     <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>data<span class=\"sy1\">)),</span><br/>                ModTime<span class=\"sy1\">:</span>  time<span class=\"sy3\">.</span>Now<span class=\"sy1\">(),</span><br/>                Typeflag<span class=\"sy1\">:</span> tar<span class=\"sy3\">.</span>TypeReg<span class=\"sy1\">,</span><br/>                Uname<span class=\"sy1\">:</span>    <span class=\"st0\">\"guest\"</span><span class=\"sy1\">,</span><br/>                Gname<span class=\"sy1\">:</span>    <span class=\"st0\">\"guest\"</span><span class=\"sy1\">,</span><br/>        <span class=\"sy1\">})</span><br/>\u00a0<br/>        _<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> w<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>data<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>                log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"writing data:\"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Main <span class=\"br0\">(</span>main<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:writeFile\"><span class=\"kw3\">writeFile</span></a> <span class=\"st0\">\"/dev/tape\"</span> <span class=\"st0\">\"Hello from Rosetta Code!\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"/dev/tape\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"Hi\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "JCL", "loc": 9, "block": "<pre class=\"text highlighted_source\">// EXEC PGM=IEBGENER <br/>//* Create a file named \"TAPE.FILE\" on magnetic tape; \"UNIT=TAPE\" <br/>//*    may vary depending on site-specific esoteric name assignment <br/>//SYSPRINT DD SYSOUT=* <br/>//SYSIN    DD DUMMY <br/>//SYSUT2   DD UNIT=TAPE,DSN=TAPE.FILE,DISP=(,CATLG) <br/>//SYSUT1   DD * <br/>DATA TO BE WRITTEN TO TAPE <br/>/* </pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0 (Linux)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">FileWriter</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lp0 <span class=\"sy0\">=</span> FileWriter<span class=\"br0\">(</span><span class=\"st0\">\"/dev/tape\"</span><span class=\"br0\">)</span><br/>    lp0.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, world!\"</span><span class=\"br0\">)</span><br/>    lp0.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">var t = open(\"/dev/tape\", fmWrite)<br/>t.writeln \"Hi Tape!\"<br/>t.close</pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$tape</span> <span class=\"sy0\">=</span> open <span class=\"st0\">\"/dev/tape\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't open tape: $!\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tape</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">:</span> <span class=\"st0\">\"I am a tape file now, or hope to be soon.\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tape</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(out \"/dev/tape\"<br/>   (prin \"Hello World!\") )</pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">'/dev/tape'</span><span class=\"sy0\">,</span> <span class=\"st0\">'w'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> t: t.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Hi Tape!<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>... <br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(with-output-to-file \"/dev/tape\" #:exists 'append<br/>  (\u03bb() (displayln \"I am a cheap imitation of the Perl code for a boring problem\")))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 7, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm  demonstrates  writing records  to an attached magnetic tape.*/</span><br/>dsName = <span class=\"st0\">'TAPE.FILE'</span>                   <span class=\"coMULTI\">/*dsName of \"file\" being written.*/</span><br/>\u00a0<br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">100</span>              <span class=\"coMULTI\">/*write 100 records to mag tape. */</span><br/>          <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span>  dsName,  <span class=\"st0\">'this is record'</span>   j   <span class=\"sy0\">||</span>   <span class=\"st0\">\".\"</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Create a file on magnetic tape<br/>\u00a0<br/>fn = \"Tape.file\"<br/>fp = fopen(fn,\"w\")<br/>str = \"I am a tape file now, or hope to be soon.\"<br/>fwrite(fp, str)<br/>fclose(fp)<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LinePrinter <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"br0\">{</span> FileWriter, IOException <span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lp0 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> FileWriter<span class=\"br0\">(</span><span class=\"st0\">\"/dev/tape\"</span><span class=\"br0\">)</span><br/>    lp0.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, world!\"</span><span class=\"br0\">)</span><br/>    lp0.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">cd</span> /tmp<br/>\u00a0<br/><span class=\"co1\"># Create the file</span><br/><span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> hello.jnk w<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$f</span> <span class=\"st0\">\"Hello World!\"</span><br/><span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/>\u00a0<br/><span class=\"co1\"># Archive to tape</span><br/><span class=\"kw1\">set</span> fin <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"st0\">\"|tar cf - hello.jnk\"</span> rb<span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> fout <span class=\"br0\">[</span><span class=\"kw2\">open</span> /dev/tape wb<span class=\"br0\">]</span><br/><span class=\"kw2\">fcopy</span> <span class=\"re0\">$fin</span> <span class=\"re0\">$fout</span><br/><span class=\"kw2\">close</span> <span class=\"re0\">$fin</span><br/><span class=\"kw2\">close</span> <span class=\"re0\">$fout</span></pre>"}, {"lang": "TUSCRIPT", "loc": 3, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>STATUS = CREATE (\"tape.file\",tape-o,-std-)<br/>PRINT STATUS</pre>"}, {"lang": "UNIX Shell", "loc": 6, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/sh</span><br/><span class=\"kw3\">cd</span>    <span class=\"co0\"># Make our home directory current</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Hello World!\"</span> <span class=\"sy0\">&gt;</span> hello.jnk  <span class=\"co0\"># Create a junk file</span><br/><span class=\"co0\"># tape rewind                    # Uncomment this to rewind the tape</span><br/><span class=\"kw2\">tar</span> c hello.jnk                  <span class=\"co0\"># Traditional archivers use magnetic tape by default</span><br/><span class=\"co0\"># tar c hello.jnk &gt; /dev/tape    # With newer archivers redirection is needed</span></pre>"}, {"lang": "ZX Spectrum Basic", "loc": 1, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"kw1\">SAVE</span> <span class=\"st0\">\"TAPEFILE\"</span> <span class=\"kw3\">CODE</span> <span class=\"nu0\">16384</span>,<span class=\"nu0\">6912</span></pre>"}]}