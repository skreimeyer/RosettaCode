{"task": "Call_a_foreign-language_function", "blocks": [{"lang": "ALGOL 68", "loc": 69, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">MODE</span> PASSWD <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> passwd<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> uid<span class=\"sy1\">,</span> gid<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> gecos<span class=\"sy1\">,</span> dir<span class=\"sy1\">,</span> shell<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">PROC</span> getpwnam <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> name<span class=\"br0\">)</span> PASSWD <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw6\">FILE</span> c source<span class=\"sy1\">;</span><br/>      <span class=\"kw22\">create</span> <span class=\"br0\">(</span>c source<span class=\"sy1\">,</span> <span class=\"kw21\">stand out channel</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw22\">putf</span> <span class=\"br0\">(</span>c source<span class=\"sy1\">,</span> <span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span><br/><span class=\"st0\">\"#include &lt;sys/types.h&gt;\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"#include &lt;pwd.h&gt;\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"#include &lt;stdio.h&gt;\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"main ()\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"{\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"  char name[256];\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"  scanf (\"</span><span class=\"st0\">\"%s\"</span><span class=\"st0\">\", name);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"  struct passwd *pass = getpwnam (name);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"  if (pass == (struct passwd *) NULL) {\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    putchar ('\\n');\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"  } else {\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%s\\n\"</span><span class=\"st0\">\", pass-&gt;pw_name);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%s\\n\"</span><span class=\"st0\">\", pass-&gt;pw_passwd);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%d\\n\"</span><span class=\"st0\">\", pass-&gt;pw_uid);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%d\\n\"</span><span class=\"st0\">\", pass-&gt;pw_gid);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%s\\n\"</span><span class=\"st0\">\", pass-&gt;pw_gecos);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%s\\n\"</span><span class=\"st0\">\", pass-&gt;pw_dir);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"    printf (\"</span><span class=\"st0\">\"%s\\n\"</span><span class=\"st0\">\", pass-&gt;pw_shell);\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"  }\"</span><span class=\"sy1\">,</span><br/><span class=\"st0\">\"}\"</span><br/>\t\t       <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">STRING</span> source name <span class=\"sy1\">=</span> <span class=\"kw22\">idf</span> <span class=\"br0\">(</span>c source<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">STRING</span> bin name <span class=\"sy1\">=</span> source name <span class=\"sy1\">+</span> <span class=\"st0\">\".bin\"</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> child pid <span class=\"sy1\">=</span> execve child <span class=\"br0\">(</span><span class=\"st0\">\"/usr/bin/gcc\"</span><span class=\"sy1\">,</span><br/>\t\t\t\t    <span class=\"br0\">(</span><span class=\"st0\">\"gcc\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-x\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"c\"</span><span class=\"sy1\">,</span> source name<span class=\"sy1\">,</span> <span class=\"st0\">\"-o\"</span><span class=\"sy1\">,</span> bin name<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t\t\t    <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      wait pid <span class=\"br0\">(</span>child pid<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      PIPE p <span class=\"sy1\">=</span> execve child pipe <span class=\"br0\">(</span>bin name<span class=\"sy1\">,</span> <span class=\"st0\">\"Ding dong, a68g calling\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      put <span class=\"br0\">(</span>write <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>name<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">STRING</span> line<span class=\"sy1\">;</span><br/>      PASSWD result<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>line<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> line <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><br/>      <span class=\"kw2\">THEN</span><br/>\t result <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t CO<br/>         Return to sender<span class=\"sy1\">,</span> address unknown.<br/>         No such number<span class=\"sy1\">,</span> no such zone.<br/>\t CO<br/>      <span class=\"kw2\">ELSE</span><br/>\t name <span class=\"kw6\">OF</span> result <span class=\"sy1\">:=</span> line<span class=\"sy1\">;</span><br/>\t get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>passwd <span class=\"kw6\">OF</span> result<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>uid <span class=\"kw6\">OF</span> result<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>gid <span class=\"kw6\">OF</span> result<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>gecos <span class=\"kw6\">OF</span> result<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>dir <span class=\"kw6\">OF</span> result<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t get <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"br0\">(</span>shell <span class=\"kw6\">OF</span> result<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      <span class=\"kw22\">close</span> <span class=\"br0\">(</span>write <span class=\"kw6\">OF</span> p<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t\t<span class=\"co1\">CO Sundry cleaning up. CO</span><br/>      <span class=\"kw22\">close</span> <span class=\"br0\">(</span>read <span class=\"kw6\">OF</span> p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      execve child <span class=\"br0\">(</span><span class=\"st0\">\"/bin/rm\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"rm\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-f\"</span><span class=\"sy1\">,</span> source name<span class=\"sy1\">,</span> bin name<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      result<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   PASSWD mr root <span class=\"sy1\">=</span> getpwnam <span class=\"br0\">(</span><span class=\"st0\">\"root\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">IF</span> name <span class=\"kw6\">OF</span> mr root <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw2\">THEN</span><br/>      <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Oh dear, we seem to be rootless.\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$2<span class=\"br0\">(</span>g<span class=\"sy1\">,</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> 2<span class=\"br0\">(</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> 2<span class=\"br0\">(</span>g<span class=\"sy1\">,</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> gl$<span class=\"sy1\">,</span> mr root<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">FI</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "8th", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ tell 8th what the function expects:<br/>\"ZZ\" \"strdup\" func: strdup<br/>\"VZ\" \"free\" func: free<br/>\\ call the external funcs<br/>\"abc\" dup     \\ now we have two strings \"abc\" on the stack<br/>strdup .s cr   \\ after strdup, you'll have the new (but duplicate) string on the stack<br/>\\ the \".s\" will show both strings and you can see they are different items on the stack<br/>free   \\ let the c library free the string<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 15, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;           <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Interfaces.<span class=\"me1\">C</span>;          <span class=\"kw3\">use</span> Interfaces.<span class=\"me1\">C</span>;<br/><span class=\"kw3\">with</span> Interfaces.<span class=\"me1\">C</span>.<span class=\"me1\">Strings</span>;  <span class=\"kw3\">use</span> Interfaces.<span class=\"me1\">C</span>.<span class=\"me1\">Strings</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_C_Interface <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> strdup <span class=\"br0\">(</span>s1\u00a0: Char_Array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Chars_Ptr;<br/>   <span class=\"kw3\">pragma</span> Import <span class=\"br0\">(</span>C, strdup, <span class=\"st0\">\"_strdup\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   S1\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"Hello World!\"</span>;<br/>   S2\u00a0: Chars_Ptr;<br/><span class=\"kw1\">begin</span><br/>   S2\u00a0:= strdup <span class=\"br0\">(</span>To_C <span class=\"br0\">(</span>S1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>Value <span class=\"br0\">(</span>S2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Free <span class=\"br0\">(</span>S2<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_C_Interface;</pre>"}, {"lang": "Aikido", "loc": 13, "block": "<pre class=\"text highlighted_source\">#include &lt;aikido.h&gt;<br/>extern \"C\" {       // need C linkage<br/>\u00a0<br/>// define the function using a macro defined in aikido.h<br/>AIKIDO_NATIVE(strdup) {<br/>    aikido::string *s = paras[0].str;<br/>    char *p = strdup (s-&gt;c_str());<br/>    aikido::string *result = new aikido::string(p);<br/>    free (p);<br/>    return result;<br/>}<br/>\u00a0<br/>}</pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; Example: Calls the Windows API function \"MessageBox\" and report which button the user presses.</span><br/>\u00a0<br/>WhichButton <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"MessageBox\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"int\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"str\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Press Yes or No\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"str\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Title of box\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> You pressed <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a> #<span class=\"re0\">%WhichButton%</span><span class=\"sy0\">.</span></pre>"}, {"lang": "BBC BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">      SYS \"LoadLibrary\", \"MSVCRT.DLL\" TO msvcrt%<br/>      SYS \"GetProcAddress\", msvcrt%, \"_strdup\" TO `strdup`<br/>      SYS \"GetProcAddress\", msvcrt%, \"free\" TO `free`<br/>\u00a0<br/>      SYS `strdup`, \"Hello World!\" TO address%<br/>      PRINT $$address%<br/>      SYS `free`, address%<br/>\u00a0</pre>"}, {"lang": "C++", "loc": 2, "block": "<pre class=\"cpp highlighted_source\">FUNCTION MULTIPLY<span class=\"br0\">(</span>X, Y<span class=\"br0\">)</span><br/>DOUBLE PRECISION MULTIPLY, X, Y</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>JNIDemo<span class=\"sy0\">/</span>callStrdup <span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 25, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:cmake_minimum_required\"><span class=\"kw1\">cmake_minimum_required</span></a><span class=\"sy0\">(</span><span class=\"kw3\">VERSION</span> 2.6<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:project\"><span class=\"kw1\">project</span></a><span class=\"sy0\">(</span><span class=\"st0\">\"outer project\"</span> C<span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Compile cmDIV.</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:try_compile\"><span class=\"kw1\">try_compile</span></a><span class=\"sy0\">(</span><br/>  compiled_div                  <span class=\"co1\"># result variable</span><br/>  <span class=\"re0\">${CMAKE_BINARY_DIR}</span>/div       <span class=\"co1\"># bindir</span><br/>  <span class=\"re0\">${CMAKE_SOURCE_DIR}</span>/div       <span class=\"co1\"># srcDir</span><br/>  div<span class=\"sy0\">)</span>                          <span class=\"co1\"># projectName</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> compiled_div<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">FATAL_ERROR</span> <span class=\"st0\">\"Failed to compile cmDIV\"</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>\u00a0<br/><span class=\"co1\"># Load cmDIV.</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:load_command\"><span class=\"kw1\">load_command</span></a><span class=\"sy0\">(</span>DIV <span class=\"re0\">${CMAKE_BINARY_DIR}</span>/div<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> CMAKE_LOADED_COMMAND_DIV<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">FATAL_ERROR</span> <span class=\"st0\">\"Failed to load cmDIV\"</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>\u00a0<br/><span class=\"co1\"># Try div() command.</span><br/>div<span class=\"sy0\">(</span>quot rem 2012 500<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"st0\">\"<br/>  2012 / 500 = <span class=\"es1\">${quot}</span><br/>  2012\u00a0% 500 = <span class=\"es1\">${rem}</span><br/>\"</span><span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 27, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> foreign<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> hello<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">value</span> z<span class=\"st0\">\"Hello, world\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> duplicate    <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> buffer       <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> based<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> storage      <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"strdup\"</span> <span class=\"kw3\">using</span> hello returning duplicate<br/>           <span class=\"kw3\">on</span> <span class=\"kw3\">exception</span><br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"error calling strdup\"</span> <span class=\"kw3\">upon</span> syserr<br/>       end-<span class=\"kw2\">call</span><br/>       <span class=\"kw1\">if</span> duplicate <span class=\"kw3\">equal</span> <span class=\"kw3\">null</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"strdup returned null\"</span> <span class=\"kw3\">upon</span> syserr<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw3\">set</span> <span class=\"kw3\">address</span> <span class=\"kw3\">of</span> buffer <span class=\"kw2\">to</span> duplicate<br/>           <span class=\"kw3\">string</span> buffer <span class=\"kw3\">delimited</span> <span class=\"kw3\">by</span> <span class=\"kw3\">low-value</span> <span class=\"kw2\">into</span> storage<br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> trim<span class=\"br0\">(</span>storage<span class=\"br0\">)</span><br/>           <span class=\"kw2\">call</span> <span class=\"st0\">\"free\"</span> <span class=\"kw3\">using</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> duplicate<br/>               <span class=\"kw3\">on</span> <span class=\"kw3\">exception</span><br/>                   <span class=\"kw2\">display</span> <span class=\"st0\">\"error calling free\"</span> <span class=\"kw3\">upon</span> syserr<br/>       end-<span class=\"kw1\">if</span><br/>       goback<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>string <span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>c-string <span class=\"br0\">(</span>cffi<span class=\"sy0\">:</span><span class=\"me1\">foreign-</span><span class=\"kw1\">funcall</span> <span class=\"st0\">\"strdup\"</span> <span class=\"sy0\">:</span><span class=\"me1\">string</span> string <span class=\"sy0\">:</span><span class=\"me1\">pointer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>unwind-protect <span class=\"br0\">(</span>write-line <span class=\"br0\">(</span>cffi<span class=\"sy0\">:</span><span class=\"me1\">foreign-string-to-lisp</span> c-string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>cffi<span class=\"sy0\">:</span><span class=\"me1\">foreign-</span><span class=\"kw1\">funcall</span> <span class=\"st0\">\"free\"</span> <span class=\"sy0\">:</span><span class=\"me1\">pointer</span> c-string <span class=\"sy0\">:</span><span class=\"me1\">void</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Hello World<span class=\"sy0\">!</span><br/><span class=\"co1\">; No value</span></pre>"}, {"lang": "D", "loc": 36, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">:</span> writeln<span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">:</span> toStringz<span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">:</span> to<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> strdup<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">void</span> free<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span> ptr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// We could use char* here (as in D string literals are</span><br/>    <span class=\"co1\">// null-terminated) but we want to comply with the \"of the</span><br/>    <span class=\"co1\">// string type typical to the language\" part.</span><br/>    <span class=\"co1\">// Note: D supports 0-values inside a string, C doesn't.</span><br/>    <span class=\"kw4\">auto</span> input <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Method 1 (preferred):</span><br/>    <span class=\"co1\">//   toStringz converts D strings to null-terminated C strings.</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> str1 <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>toStringz<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Method 2:</span><br/>    <span class=\"co1\">// D strings are not null-terminated, so we append '\\0'.</span><br/>    <span class=\"co1\">// .ptr returns a pointer to the 1st element of the array,</span><br/>    <span class=\"co1\">// just as &amp;array[0]</span><br/>    <span class=\"co1\">// This has to be done because D dynamic arrays are</span><br/>    <span class=\"co1\">// represented with:  { size_t length; T* pointer; }</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> str2 <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span><span class=\"br0\">(</span>input <span class=\"sy0\">~</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">ptr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// We could have just used printf here, but the task asks to</span><br/>    <span class=\"co1\">// \"print it using language means\":</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"str1: \"</span><span class=\"sy0\">,</span> to<span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span>str1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"str2: \"</span><span class=\"sy0\">,</span> to<span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    free<span class=\"br0\">(</span>str1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    free<span class=\"br0\">(</span>str2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 3, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"co2\">{$O myhello.obj}</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">FUNCTION: char* strdup ( c-string s )\u00a0;<br/>\u00a0<br/>: my-strdup ( str -- str' )<br/>    strdup [ utf8 alien&gt;string ] [ (free) ] bi\u00a0;</pre>"}, {"lang": "FBSL", "loc": 23, "block": "<pre class=\"text highlighted_source\">c-library cstrings<br/>\u00a0<br/>\\c #include &lt;string.h&gt;<br/>c-function strdup strdup a -- a ( c-string -- duped string )<br/>c-function strlen strlen a -- n ( c-string -- length )<br/>\u00a0<br/>end-c-library<br/>\u00a0<br/>\\ convenience function (not used here)<br/>: c-string ( addr u -- addr' )<br/>    tuck  pad swap move  pad + 0 swap c!  pad\u00a0;<br/>\u00a0<br/>create test s\" testing\" mem, 0 c,<br/>\u00a0<br/>test strdup value duped<br/>\u00a0<br/>test .<br/>test 7 type\t\t\\ testing<br/>cr<br/>duped .                 \\ different address<br/>duped dup strlen type   \\ testing<br/>\u00a0<br/>duped free throw\t\\ gforth ALLOCATE and FREE map directly to C's malloc() and free()</pre>"}, {"lang": "Forth", "loc": 23, "block": "<pre class=\"text highlighted_source\">c-library cstrings<br/>\u00a0<br/>\\c #include &lt;string.h&gt;<br/>c-function strdup strdup a -- a ( c-string -- duped string )<br/>c-function strlen strlen a -- n ( c-string -- length )<br/>\u00a0<br/>end-c-library<br/>\u00a0<br/>\\ convenience function (not used here)<br/>: c-string ( addr u -- addr' )<br/>    tuck  pad swap move  pad + 0 swap c!  pad\u00a0;<br/>\u00a0<br/>create test s\" testing\" mem, 0 c,<br/>\u00a0<br/>test strdup value duped<br/>\u00a0<br/>test .<br/>test 7 type\t\t\\ testing<br/>cr<br/>duped .                 \\ different address<br/>duped dup strlen type   \\ testing<br/>\u00a0<br/>duped free throw\t\\ gforth ALLOCATE and FREE map directly to C's malloc() and free()</pre>"}, {"lang": "Fortran", "loc": 45, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> c_api<br/>    <span class=\"kw3\">use</span> iso_c_binding<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>    <span class=\"kw1\">interface</span><br/>        <span class=\"kw1\">function</span> strdup<span class=\"br0\">(</span>ptr<span class=\"br0\">)</span> bind<span class=\"br0\">(</span>C<span class=\"br0\">)</span><br/>            import c_ptr<br/>            <span class=\"kw3\">type</span><span class=\"br0\">(</span>c_ptr<span class=\"br0\">)</span>, value <span class=\"sy0\">::</span> <span class=\"me2\">ptr</span><br/>            <span class=\"kw3\">type</span><span class=\"br0\">(</span>c_ptr<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">strdup</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/>    <span class=\"kw1\">interface</span><br/>        <span class=\"kw1\">subroutine</span> free<span class=\"br0\">(</span>ptr<span class=\"br0\">)</span> bind<span class=\"br0\">(</span>C<span class=\"br0\">)</span><br/>            import c_ptr<br/>            <span class=\"kw3\">type</span><span class=\"br0\">(</span>c_ptr<span class=\"br0\">)</span>, value <span class=\"sy0\">::</span> <span class=\"me2\">ptr</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/>    <span class=\"kw1\">interface</span><br/>        <span class=\"kw1\">function</span> puts<span class=\"br0\">(</span>ptr<span class=\"br0\">)</span> bind<span class=\"br0\">(</span>C<span class=\"br0\">)</span><br/>            import c_ptr, c_int<br/>            <span class=\"kw3\">type</span><span class=\"br0\">(</span>c_ptr<span class=\"br0\">)</span>, value <span class=\"sy0\">::</span> <span class=\"me2\">ptr</span><br/>            <span class=\"kw3\">integer</span><span class=\"br0\">(</span>c_int<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">puts</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> c_example<br/>    <span class=\"kw3\">use</span> c_api<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>, <span class=\"kw3\">target</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, World!\"</span> <span class=\"sy0\">//</span> c_null_char<br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>c_ptr<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">ptr</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>c_int<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>\u00a0<br/>    ptr <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>c_loc<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    res <span class=\"sy0\">=</span> puts<span class=\"br0\">(</span>c_loc<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    res <span class=\"sy0\">=</span> puts<span class=\"br0\">(</span>ptr<span class=\"br0\">)</span><br/>\u00a0<br/>    print <span class=\"sy0\">*</span>, <span class=\"kw4\">transfer</span><span class=\"br0\">(</span>c_loc<span class=\"br0\">(</span>str<span class=\"br0\">)</span>, <span class=\"nu0\">0</span>_c_intptr_t<span class=\"br0\">)</span>, <span class=\"sy0\">&amp;</span><br/>             <span class=\"kw4\">transfer</span><span class=\"br0\">(</span>ptr, <span class=\"nu0\">0</span>_c_intptr_t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> free<span class=\"br0\">(</span>ptr<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">'Using StrDup function in Shlwapi.dll</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span> library = <span class=\"kw1\">DyLibLoad</span><span class=\"br0\">(</span><span class=\"st0\">\"Shlwapi\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> strdup <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">ZString</span> <span class=\"kw1\">Ptr</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> <span class=\"kw1\">Ptr</span><br/>strdup = <span class=\"kw1\">DyLibSymbol</span><span class=\"br0\">(</span>library, <span class=\"st0\">\"StrDupA\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'Using LocalFree function in kernel32.dll</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span> library2 = <span class=\"kw1\">DyLibLoad</span><span class=\"br0\">(</span><span class=\"st0\">\"kernel32\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> localfree <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span><br/>localfree = <span class=\"kw1\">DyLibSymbol</span><span class=\"br0\">(</span>library2, <span class=\"st0\">\"LocalFree\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> * <span class=\"nu0\">10</span> z = <span class=\"st0\">\"duplicate\"</span>  <span class=\"co1\">'' 10 characters including final zero byte</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Zstring</span> <span class=\"kw1\">Ptr</span> pcz = strdup<span class=\"br0\">(</span>@z<span class=\"br0\">)</span>  <span class=\"co1\">'' pointer to the duplicate string</span><br/><span class=\"kw1\">Print</span> *pcz                           <span class=\"co1\">'' print duplicate string by dereferencing pointer </span><br/>localfree<span class=\"br0\">(</span>pcz<span class=\"br0\">)</span>                       <span class=\"co1\">'' free the memory which StrDup allocated internally </span><br/>pcz = <span class=\"nu0\">0</span>                              <span class=\"co1\">'' set pointer to null                    </span><br/>DyLibFree<span class=\"br0\">(</span>library<span class=\"br0\">)</span>                   <span class=\"co1\">'' unload first dll</span><br/>DyLibFree<span class=\"br0\">(</span>library2<span class=\"br0\">)</span>                  <span class=\"co1\">'' unload second fll </span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 28, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"co1\">// #include &lt;string.h&gt;</span><br/><span class=\"co1\">// #include &lt;stdlib.h&gt;</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"C\"</span><br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"unsafe\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// a go string</span><br/>    go1 <span class=\"sy2\">:=</span> <span class=\"st0\">\"hello C\"</span><br/>    <span class=\"co1\">// allocate in C and convert from Go representation to C representation</span><br/>    c1 <span class=\"sy2\">:=</span> C<span class=\"sy3\">.</span>CString<span class=\"sy1\">(</span>go1<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// go string can now be garbage collected</span><br/>    go1 <span class=\"sy2\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"co1\">// strdup, per task. this calls the function in the C library.</span><br/>    c2 <span class=\"sy2\">:=</span> C<span class=\"sy3\">.</span>strdup<span class=\"sy1\">(</span>c1<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// free the source C string.  again, this is free() in the C library.</span><br/>    C<span class=\"sy3\">.</span>free<span class=\"sy1\">(</span>unsafe<span class=\"sy3\">.</span>Pointer<span class=\"sy1\">(</span>c1<span class=\"sy1\">))</span><br/>    <span class=\"co1\">// create a new Go string from the C copy</span><br/>    go2 <span class=\"sy2\">:=</span> C<span class=\"sy3\">.</span>GoString<span class=\"sy1\">(</span>c2<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// free the C copy</span><br/>    C<span class=\"sy3\">.</span>free<span class=\"sy1\">(</span>unsafe<span class=\"sy3\">.</span>Pointer<span class=\"sy1\">(</span>c2<span class=\"sy1\">))</span><br/>    <span class=\"co1\">// demonstrate we have string contents intact</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>go2<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE ForeignFunctionInterface #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.html\"><span class=\"kw2\">Foreign</span></a> <span class=\"br0\">(</span>free<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.html\"><span class=\"kw2\">Foreign</span></a><span class=\"sy0\">.</span>C<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"br0\">(</span>CString<span class=\"sy0\">,</span> withCString<span class=\"sy0\">,</span> peekCString<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- import the strdup function itself</span><br/><span class=\"co1\">-- the \"unsafe\" means \"assume this foreign function never calls back into Haskell and avoid extra bookkeeping accordingly\"</span><br/>foreign <span class=\"kw1\">import</span> ccall unsafe <span class=\"st0\">\"string.h strdup\"</span> strdup <span class=\"sy0\">::</span> CString <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> CString<br/>\u00a0<br/>testC <span class=\"sy0\">=</span> withCString <span class=\"st0\">\"Hello World!\"</span> <span class=\"co1\">-- marshall the Haskell string \"Hello World!\" into a C string...</span><br/>        <span class=\"br0\">(</span>\\s <span class=\"sy0\">-&gt;</span> <span class=\"co1\">-- ... and name it s</span><br/>         <span class=\"kw1\">do</span> s2 <span class=\"sy0\">&lt;-</span> strdup s<br/>            s2<span class=\"sy0\">_</span>hs <span class=\"sy0\">&lt;-</span> peekCString s2 <span class=\"co1\">-- marshall the C string called s2 into a Haskell string named s2_hs</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> s2<span class=\"sy0\">_</span>hs<br/>            free s2<span class=\"br0\">)</span> <span class=\"co1\">-- s is automatically freed by withCString once done</span></pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include \"icall.h\"  // a header routine from the Unicon sources - provides helpful type-conversion macros</span><br/>\u00a0<br/><span class=\"kw4\">int</span> strdup_wrapper <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> descriptor <span class=\"sy0\">*</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  ArgString <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// check that the first argument is a string</span><br/>\u00a0<br/>  RetString <span class=\"br0\">(</span>strdup <span class=\"br0\">(</span>StringVal<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// call strdup, convert and return result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// and strcat, for a result that does not equal the input</span><br/><span class=\"kw4\">int</span> strcat_wrapper <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> descriptor <span class=\"sy0\">*</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  ArgString <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  ArgString <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> result <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a> <span class=\"br0\">(</span>StringVal<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> StringVal<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  RetString <span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'dll'</span><br/>strdup=: <span class=\"st_h\">'msvcrt.dll _strdup &gt;x *'</span> cd &lt;<br/>free=: <span class=\"st_h\">'msvcrt.dll free n x'</span> cd &lt;<br/>getstr=: free ] <a class=\"__cf_email__\" data-cfemail=\"9cf1f9f1eedc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,&amp;<span class=\"nu0\">0</span> <span class=\"nu0\">_1</span></pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> JNIDemo<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">static</span><br/>  <span class=\"br0\">{</span>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">loadLibrary</span><span class=\"br0\">(</span><span class=\"st0\">\"JNIDemo\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>callStrdup<span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">native</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> callStrdup<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">p = ccall(:strdup, Ptr{Cuchar}, (Ptr{Cuchar},), \"Hello world\")<br/>@show unsafe_string(p) # \"Hello world\"<br/>ccall(:free, Void, (Ptr{Cuchar},), p)</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Kotlin Native v0.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlinx.<span class=\"me1\">cinterop</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> string.<span class=\"sy0\">*</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>  <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hw <span class=\"sy0\">=</span> strdup <span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toKString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>hw<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 24, "block": "<pre class=\"text highlighted_source\">Section Header<br/>\u00a0<br/>+ name\u00a0:= TEST_C_INTERFACE;<br/>\u00a0<br/>// this will be inserted in front of the program<br/>- external\u00a0:= `#include &lt;string.h&gt;`;<br/>\u00a0<br/>Section Public<br/>\u00a0<br/>- main &lt;- (<br/>  + s\u00a0: STRING_CONSTANT;<br/>  + p\u00a0: NATIVE_ARRAY[CHARACTER];<br/>\u00a0<br/>  s\u00a0:= \"Hello World!\";<br/>  p\u00a0:= s.to_external;<br/>  // this will be inserted in-place<br/>  // use `expr`:type to tell Lisaac what's the type of the external expression<br/>  p\u00a0:= `strdup(@p)`\u00a0: NATIVE_ARRAY[CHARACTER];<br/>  s.print;<br/>  '='.print;<br/>  p.println;<br/>  // this will also be inserted in-place, expression type disregarded<br/>  `free(@p)`;<br/>);</pre>"}, {"lang": "Lisaac", "loc": 24, "block": "<pre class=\"text highlighted_source\">Section Header<br/>\u00a0<br/>+ name\u00a0:= TEST_C_INTERFACE;<br/>\u00a0<br/>// this will be inserted in front of the program<br/>- external\u00a0:= `#include &lt;string.h&gt;`;<br/>\u00a0<br/>Section Public<br/>\u00a0<br/>- main &lt;- (<br/>  + s\u00a0: STRING_CONSTANT;<br/>  + p\u00a0: NATIVE_ARRAY[CHARACTER];<br/>\u00a0<br/>  s\u00a0:= \"Hello World!\";<br/>  p\u00a0:= s.to_external;<br/>  // this will be inserted in-place<br/>  // use `expr`:type to tell Lisaac what's the type of the external expression<br/>  p\u00a0:= `strdup(@p)`\u00a0: NATIVE_ARRAY[CHARACTER];<br/>  s.print;<br/>  '='.print;<br/>  p.println;<br/>  // this will also be inserted in-place, expression type disregarded<br/>  `free(@p)`;<br/>);</pre>"}, {"lang": "Lua", "loc": 15, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> ffi <span class=\"sy0\">=</span> <span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"ffi\"</span><span class=\"br0\">)</span><br/>ffi<span class=\"sy0\">.</span>cdef<span class=\"br0\">[</span><span class=\"br0\">[</span><br/>char <span class=\"sy0\">*</span> strndup<span class=\"br0\">(</span>const char <span class=\"sy0\">*</span> s<span class=\"sy0\">,</span> size_t n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>int <span class=\"kw3\">strlen</span><span class=\"br0\">(</span>const char <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">local</span> s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello, world!\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Original: \"</span> <span class=\"sy0\">..</span> s1<span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> s_s1 <span class=\"sy0\">=</span> ffi<span class=\"sy0\">.</span>C<span class=\"sy0\">.</span><span class=\"kw3\">strlen</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"strlen: \"</span> <span class=\"sy0\">..</span> s_s1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> s2 <span class=\"sy0\">=</span> ffi<span class=\"sy0\">.</span><span class=\"kw3\">string</span><span class=\"br0\">(</span>ffi<span class=\"sy0\">.</span>C<span class=\"sy0\">.</span>strndup<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s_s1<span class=\"br0\">)</span><span class=\"sy0\">,</span> s_s1<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Copy: \"</span> <span class=\"sy0\">..</span> s2<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"strlen: \"</span> <span class=\"sy0\">..</span> ffi<span class=\"sy0\">.</span>C<span class=\"sy0\">.</span><span class=\"kw3\">strlen</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Luck", "loc": 7, "block": "<pre class=\"text highlighted_source\">import \"stdio.h\";;<br/>import \"string.h\";;<br/>\u00a0<br/>let s1:string = \"Hello World!\";;<br/>let s2:char* = strdup(cstring(s1));;<br/>puts(s2);;<br/>free(s2 as void*)</pre>"}, {"lang": "M2000 Interpreter", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>Module CheckCCall {<br/>      mybuf$=string$(chr$(0), 1000)<br/>      a$=\"Hello There 12345\"+Chr$(0)<br/>      Print Len(a$)<br/>      Buffer Clear Mem as Byte*Len(a$)<br/>      \\\\ copy to Mem the converted a$ (from Utf-16Le to ANSI)<br/>      Return Mem, 0:=str$(a$)<br/>\u00a0<br/>      Declare  MyStrDup Lib C \"msvcrt._strdup\" { Long Ptr} <br/>      Declare  MyFree Lib C \"msvcrt.free\" { Long Ptr}<br/>      \\\\ see &amp; means by reference<br/>      \\\\ ... means any number of arguments <br/>      Declare  MyPrintStr Lib C \"msvcrt.swprintf\" { &amp;sBuf$,  sFmt$, long Z } <br/>\u00a0<br/>      \\\\ Now we use address Mem(0) as pointer (passing by value)<br/>      Long Z=MyStrDup(Mem(0))<br/>      a=MyPrintStr(&amp;myBuf$, \"%s\", Z)<br/>      Print MyFree(Z), a<br/>      Print LeftPart$(chr$(mybuf$), chr$(0))<br/>}<br/>CheckCCall<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt; strdup\u00a0:= define_external( strdup, s::string, RETURN::string, LIB = \"/lib/libc.so.6\" ):<br/>&gt; strdup( \"foo\" );<br/>                                 \"foo\"<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">Needs[\"NETLink`\"];<br/>externalstrdup = DefineDLLFunction[\"_strdup\", \"msvcrt.dll\", \"string\", {\"string\"}];<br/>Print[\"Duplicate: \", externalstrdup[\"Hello world!\"]]</pre>"}, {"lang": "Maxima", "loc": 9, "block": "<pre class=\"text highlighted_source\">/* Maxima is written in Lisp and can call Lisp functions.<br/>Use load(\"funcs.lisp\"), or inside Maxima: */<br/>\u00a0<br/>to_lisp();<br/>&gt; (defun $f (a b) (+ a b))<br/>&gt; (to-maxima)<br/>\u00a0<br/>f(5, 6);<br/>11</pre>"}, {"lang": "Mercury", "loc": 23, "block": "<pre class=\"text highlighted_source\">:- module test_ffi.<br/>\u00a0<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>% The actual FFI code begins here.<br/>:- pragma foreign_decl(\"C\", \"#include &lt;string.h&gt;\").<br/>\u00a0<br/>:- func strdup(string::in) = (string::out) is det.<br/>:- pragma foreign_proc(\"C\", strdup(S::in) = (SD::out),<br/>                       [will_not_call_mercury, not_thread_safe, promise_pure],<br/>                       \"SD = strdup(S);\").<br/>% The actual FFI code ends here.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>  io.write_string(strdup(\"Hello, worlds!\\n\"),\u00a0!IO).<br/>\u00a0<br/>:- end_module test_ffi.</pre>"}, {"lang": "Modula-2", "loc": 68, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;vga.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span>   Initialize <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> vga_init <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>     <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">else</span><br/>     <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>  SetMode <span class=\"br0\">(</span><span class=\"kw4\">int</span> newmode<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_setmode <span class=\"br0\">(</span>newmode<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span>   GetMode <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> vga_getcurrentmode <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span>   MaxWidth <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> vga_getxdim <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span>   MaxHeight <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> vga_getydim <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>  Clear <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_clear <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span>  SetColour <span class=\"br0\">(</span><span class=\"kw4\">int</span> colour<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_setcolor <span class=\"br0\">(</span>colour<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>  SetEGAcolour <span class=\"br0\">(</span><span class=\"kw4\">int</span> colour<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_setegacolor <span class=\"br0\">(</span>colour<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>  SetRGB <span class=\"br0\">(</span><span class=\"kw4\">int</span> red<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> green<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> blue<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_setrgbcolor <span class=\"br0\">(</span>red<span class=\"sy0\">,</span> green<span class=\"sy0\">,</span> blue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>   DrawLine <span class=\"br0\">(</span><span class=\"kw4\">int</span> x0<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y0<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> dy<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_drawline <span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> y0<span class=\"sy0\">,</span> x0 <span class=\"sy0\">+</span> dx<span class=\"sy0\">,</span> y0 <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>   Plot <span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   vga_drawpixel <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span>    ThisColour <span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> vga_getpixel <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span>   GetKey <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ch<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"sy0\">*</span>ch <span class=\"sy0\">=</span> vga_getkey <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Modula-3", "loc": 17, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">UNSAFE</span> <span class=\"kw1\">MODULE</span> Foreign <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Ctypes<span class=\"sy0\">,</span> Cstring<span class=\"sy0\">,</span> M3toC;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> string1<span class=\"sy0\">,</span> string2<span class=\"sy0\">:</span> Ctypes.<span class=\"me1\">const_char_star</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  string1 <span class=\"sy0\">:=</span> M3toC.<span class=\"me1\">CopyTtoS</span><span class=\"br0\">(</span><span class=\"st0\">\"Foobar\"</span><span class=\"br0\">)</span>;<br/>  string2 <span class=\"sy0\">:=</span> M3toC.<span class=\"me1\">CopyTtoS</span><span class=\"br0\">(</span><span class=\"st0\">\"Foobar2\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> Cstring.<span class=\"me1\">strcmp</span><span class=\"br0\">(</span>string1<span class=\"sy0\">,</span> string2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"string1 = string2<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">ELSE</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"string1 # string2<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  M3toC.<span class=\"me1\">FreeCopiedS</span><span class=\"br0\">(</span>string1<span class=\"br0\">)</span>;<br/>  M3toC.<span class=\"me1\">FreeCopiedS</span><span class=\"br0\">(</span>string2<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Foreign.</pre>"}, {"lang": "NewLISP", "loc": 8, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">; simple FFI interface on Mac OSX</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#import\"><span class=\"kw1\">import</span></a> <span class=\"st0\">\"libc.dylib\"</span> <span class=\"st0\">\"strdup\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#get-string\"><span class=\"kw1\">get-string</span></a> <span class=\"br0\">(</span>strdup <span class=\"st0\">\"hello world\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; or extended FFI interface on Mac OSX</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#import\"><span class=\"kw1\">import</span></a> <span class=\"st0\">\"libc.dylib\"</span> <span class=\"st0\">\"strdup\"</span> <span class=\"st0\">\"char*\"</span> <span class=\"st0\">\"char*\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>strdup <span class=\"st0\">\"hello world\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">proc strcmp(a, b: cstring): cint {.importc: \"strcmp\", nodecl.}<br/>echo strcmp(\"abc\", \"def\")<br/>echo strcmp(\"hello\", \"hello\")<br/>\u00a0<br/>proc printf(formatstr: cstring) {.header: \"&lt;stdio.h&gt;\", varargs.}<br/>\u00a0<br/>var x = \"foo\"<br/>printf(\"Hello\u00a0%d\u00a0%s!\\n\", 12, x)</pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\">void myfunc_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> myfunc_b<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a>, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <span class=\"sy0\">*</span>myfunc_c<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Oz", "loc": 21, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include \"mozart.h\"</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/>OZ_BI_define<span class=\"br0\">(</span>c_strdup,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  OZ_declareVirtualString<span class=\"br0\">(</span><span class=\"nu0\">0</span>, s1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">char</span><span class=\"sy2\">*</span> s2 <span class=\"sy1\">=</span> strdup<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  OZ_Term s3 <span class=\"sy1\">=</span> OZ_string<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw3\">free</span><span class=\"br0\">(</span> s2 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  OZ_RETURN<span class=\"br0\">(</span> s3 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>OZ_BI_end<br/>\u00a0<br/>OZ_C_proc_interface <span class=\"sy2\">*</span> oz_init_module<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">static</span> OZ_C_proc_interface table<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"strdup\"</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,c_strdup<span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> table<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Inline C <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><br/>    char <span class=\"re0\">*copy</span><span class=\"sy0\">;</span><br/>    char <span class=\"sy0\">*</span> c_dup<span class=\"br0\">(</span>char <span class=\"re0\">*orig</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> copy <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    void c_free<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        free<span class=\"br0\">(</span>copy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> c_dup<span class=\"br0\">(</span><span class=\"st_h\">'Hello'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>c_free<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Inline C <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><br/>    char <span class=\"re0\">*copy</span><span class=\"sy0\">;</span><br/>    char <span class=\"sy0\">*</span> c_dup<span class=\"br0\">(</span>char <span class=\"re0\">*orig</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> copy <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    void c_free<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        free<span class=\"br0\">(</span>copy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> c_dup<span class=\"br0\">(</span><span class=\"st_h\">'Hello'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>c_free<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Inline C <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><br/>    char <span class=\"re0\">*copy</span><span class=\"sy0\">;</span><br/>    char <span class=\"sy0\">*</span> c_dup<span class=\"br0\">(</span>char <span class=\"re0\">*orig</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> copy <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    void c_free<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        free<span class=\"br0\">(</span>copy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> c_dup<span class=\"br0\">(</span><span class=\"st_h\">'Hello'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>c_free<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> NativeCall<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> strdup<span class=\"br0\">(</span>Str <span class=\"re0\">$s</span> <span class=\"sy0\">--&gt;</span> OpaquePointer<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> puts<span class=\"br0\">(</span>OpaquePointer <span class=\"re0\">$p</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> free<span class=\"br0\">(</span>OpaquePointer <span class=\"re0\">$p</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span><span class=\"st0\">\"Success!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'puts returns '</span><span class=\"sy0\">,</span> puts<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'free returns '</span><span class=\"sy0\">,</span> free<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">constant shlwapi = open_dll(\"shlwapi.dll\")<br/>constant xStrDup = define_c_func(shlwapi,\"StrDupA\",{C_PTR},C_PTR)<br/>constant kernel32 = open_dll(\"kernel32.dll\")<br/>constant xLocalFree = define_c_func(kernel32,\"LocalFree\",{C_PTR},C_PTR)<br/>constant HelloWorld = \"Hello World!\"<br/>\u00a0<br/>atom pMem = c_func(xStrDup,{HelloWorld})<br/>?peek_string(pMem)<br/>if c_func(xLocalFree,{pMem})!=NULL then\u00a0?9/0 end if</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(load \"@lib/gcc.l\")<br/>\u00a0<br/>(gcc \"str\" NIL                # The 'gcc' function passes all text<br/>   'duptest )                 # until /**/ to the C compiler<br/>\u00a0<br/>any duptest(any ex) {<br/>   any x = evSym(cdr(ex));    // Accept a symbol (string)<br/>   char str[bufSize(x)];      // Create a buffer to unpack the name<br/>   char *s;<br/>\u00a0<br/>   bufString(x, str);         // Upack the string<br/>   s = strdup(str);           // Make a duplicate<br/>   x = mkStr(s);              // Build a new Lisp string<br/>   free(s);                   // Dispose the duplicate<br/>   return x;<br/>}<br/>/**/<br/>\u00a0<br/>(println 'Duplicate (duptest \"Hello world!\"))</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">declare strdup entry (character (30) varyingz) options (fastcall16);<br/>\u00a0<br/>put (strdup('hello world') );</pre>"}, {"lang": "Prolog", "loc": 2, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> module<span class=\"br0\">(</span>plffi<span class=\"sy4\">,</span> <span class=\"br0\">[</span>strdup<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> use_foreign_library<span class=\"br0\">(</span>plffi<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 41, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"co1\">; Call_a_foreign_language_function.fasm -&gt; Call_a_foreign_language_function.obj</span><br/><span class=\"co1\">; the assembler code...</span><br/>\u00a0<br/><span class=\"co1\">; format COFF or </span><br/><span class=\"co1\">; format COFF64 classic (DJGPP) variants of COFF file</span><br/>\u00a0<br/><span class=\"co1\">; format MS COFF or </span><br/><span class=\"co1\">; format MS COFF64 Microsoft's variants of COFF file</span><br/>\u00a0<br/>format  MS COFF <br/>\u00a0<br/>include <span class=\"st0\">\"Win32A.Inc\"</span><br/>\u00a0<br/>section <span class=\"st0\">\".text\"</span> executable readable code<br/>\u00a0<br/>proc\tstrucase stdcall <span class=\"kw2\">str</span>:dword<br/><span class=\"kw1\">xor</span>\teax,eax<br/><span class=\"kw3\">mov</span>\tebx,<span class=\"br0\">[</span><span class=\"kw2\">str</span><span class=\"br0\">]</span><br/>strucase_loop:<br/><span class=\"kw3\">mov</span>\tal,byte<span class=\"br0\">[</span>ebx<span class=\"br0\">]</span><br/><span class=\"kw3\">cmp</span>\tal,<span class=\"nu0\">0</span><br/><span class=\"kw3\">jz</span>\tstrucase_is_null_byte<br/><span class=\"kw3\">cmp</span>\tal,'a'<br/><span class=\"kw3\">jb</span>\tstrucase_skip<br/><span class=\"kw3\">cmp</span>\tal,'z'<br/><span class=\"kw3\">ja</span>\tstrucase_skip<br/><span class=\"kw1\">and</span>\tal,11011111b<br/>strucase_skip:<br/><span class=\"co1\">; mov\tbyte[ebx],al</span><br/><span class=\"kw3\">xchg</span>\tal,byte<span class=\"br0\">[</span>ebx<span class=\"br0\">]</span><br/><span class=\"kw3\">inc</span>\tebx<br/><span class=\"kw3\">jmp</span>\tstrucase_loop<br/>strucase_is_null_byte:<br/><span class=\"kw1\">xor</span>\teax,eax<br/><span class=\"kw3\">mov</span>\teax,<span class=\"br0\">[</span><span class=\"kw2\">str</span><span class=\"br0\">]</span><br/><span class=\"kw3\">ret</span><br/>endp<br/>\u00a0<br/>public strucase <span class=\"kw1\">as</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"1c436f686e697f7d6f795c28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> ctypes<br/>libc <span class=\"sy0\">=</span> ctypes.<span class=\"me1\">CDLL</span><span class=\"br0\">(</span><span class=\"st0\">\"/lib/libc.so.6\"</span><span class=\"br0\">)</span><br/>libc.<span class=\"me1\">strcmp</span><span class=\"br0\">(</span><span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"def\"</span><span class=\"br0\">)</span>     <span class=\"co1\"># -1</span><br/>libc.<span class=\"me1\">strcmp</span><span class=\"br0\">(</span><span class=\"st0\">\"hello\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span> <span class=\"co1\">#  0</span></pre>"}, {"lang": "Racket", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket/base<br/>(require ffi/unsafe)<br/>\u00a0<br/>(provide strdup)<br/>\u00a0<br/>;; Helper: create a Racket string from a C string pointer.<br/>(define make-byte-string<br/>  (get-ffi-obj \"scheme_make_byte_string\" #f (_fun _pointer -&gt; _scheme)))<br/>\u00a0<br/>;; Take special care not to allow NULL (#f) to be passed as an input,<br/>;; as that will crash strdup.<br/>(define _string/no-null<br/>  (make-ctype _pointer<br/>    (lambda (x)<br/>      (unless (string? x)<br/>        (raise-argument-error '_string/no-null \"string\" x))<br/>      (string-&gt;bytes/utf-8 x))<br/>   \u00a0;; We don't use _string/no-null as an output type, so don't care:<br/>    (lambda (x) x)))<br/>\u00a0<br/>; Make a Scheme string from the C string, and free immediately.<br/>(define _string/free <br/>  (make-ctype _pointer<br/>   \u00a0;; We don't use this as an input type, so we don't care.<br/>    (lambda (x) x)<br/>    (lambda (x)<br/>      (cond <br/>       [x<br/>        (define s (bytes-&gt;string/utf-8 (make-byte-string x)))<br/>        (free x)<br/>        s]<br/>       [else<br/>       \u00a0;; We should never get null from strdup unless we're out of<br/>       \u00a0;; memory:<br/>        (error 'string/free \"Out of memory\")]))))<br/>\u00a0<br/>(define strdup<br/>  (get-ffi-obj \"strdup\" #f (_fun _string/no-null -&gt; _string/free)))<br/>\u00a0<br/>;; Let's try it:<br/>(strdup \"Hello World!\")<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 24, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>  <span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> CreateFileW Lib <span class=\"st0\">\"Kernel32\"</span> (FileName <span class=\"kw4\">As</span> WString, DesiredAccess <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, ShareMode <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, SecurityAttributes <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, _<br/>        CreateDisposition <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, Flags <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, Template <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> WriteFile Lib <span class=\"st0\">\"Kernel32\"</span> (fHandle <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, writeData <span class=\"kw4\">As</span> Ptr, numOfBytes <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, <span class=\"kw4\">ByRef</span> numOfBytesWritten <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, _<br/>        overlapped <span class=\"kw4\">As</span> Ptr) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>  <span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> GetLastError Lib <span class=\"st0\">\"Kernel32\"</span> () <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> CloseHandle Lib <span class=\"st0\">\"kernel32\"</span> (hObject <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>  Const FILE_SHARE_READ = &amp;h00000001<br/>  Const FILE_SHARE_WRITE = &amp;h00000002<br/>  Const OPEN_EXISTING = 3<br/>\u00a0<br/>  <span class=\"kw4\">Dim</span> fHandle <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = CreateFileW(<span class=\"st0\">\"C:\\foo.txt\"</span>, 0,  FILE_SHARE_READ <span class=\"kw3\">Or</span> FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0)<br/>  <span class=\"kw3\">If</span> fHandle &gt; 0 <span class=\"kw3\">Then</span><br/>    <span class=\"kw4\">Dim</span> mb <span class=\"kw4\">As</span> MemoryBlock = <span class=\"st0\">\"Hello, World!\"</span><br/>    <span class=\"kw4\">Dim</span> bytesWritten <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> WriteFile(fHandle, mb, mb.Size, bytesWritten, Nil) <span class=\"kw3\">Then</span><br/>      MsgBox(<span class=\"st0\">\"Error Number: \"</span> + Str(GetLastError))<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw2\">Call</span> CloseHandle(fHandle)<br/>  <span class=\"kw3\">Else</span><br/>    MsgBox(<span class=\"st0\">\"Error Number: \"</span> + Str(GetLastError))<br/>  <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 8, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calls (invoke) a \"foreign\" (non-REXX) language routine/program.*/</span><br/>\u00a0<br/>cmd = <span class=\"st0\">\"MODE\"</span>                           <span class=\"coMULTI\">/*define the command that is to be used*/</span><br/>opts= <span class=\"st0\">'CON:  CP  /status'</span>              <span class=\"coMULTI\">/*define the options to be used for cmd*/</span><br/>\u00a0<br/><span class=\"kw1\">address</span>  <span class=\"st0\">'SYSTEM'</span>  cmd  opts           <span class=\"coMULTI\">/*invoke a cmd via the SYSTEM interface*/</span><br/>\u00a0<br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 34, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* rc_strdup.c */</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;   /* free() */</span><br/><span class=\"co2\">#include &lt;string.h&gt;   /* strdup() */</span><br/><span class=\"co2\">#include &lt;ruby.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> VALUE<br/>rc_strdup<span class=\"br0\">(</span>VALUE obj<span class=\"sy0\">,</span> VALUE str_in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    VALUE str_out<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>d<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>     * Convert Ruby value to C string.  May raise TypeError if the<br/>     * value isn't a string, or ArgumentError if it contains '\\0'.<br/>     */</span><br/>    c <span class=\"sy0\">=</span> StringValueCStr<span class=\"br0\">(</span>str_in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Call strdup() and perhaps raise Errno::ENOMEM. */</span><br/>    d <span class=\"sy0\">=</span> strdup<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\trb_sys_fail<span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Convert C string to Ruby string. */</span><br/>    str_out <span class=\"sy0\">=</span> rb_str_new_cstr<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> str_out<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span><br/>Init_rc_strdup<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    VALUE mRosettaCode <span class=\"sy0\">=</span> rb_define_module<span class=\"br0\">(</span><span class=\"st0\">\"RosettaCode\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    rb_define_module_function<span class=\"br0\">(</span>mRosettaCode<span class=\"sy0\">,</span> <span class=\"st0\">\"strdup\"</span><span class=\"sy0\">,</span> rc_strdup<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 13, "block": "<pre class=\"text highlighted_source\">extern crate libc;<br/>\u00a0<br/>//c function that returns the sum of two integers<br/>extern {<br/>    fn add_input(in1: libc::c_int, in2: libc::c_int) -&gt; libc::c_int;<br/>}<br/>\u00a0<br/>fn main() {<br/>    let (in1, in2) = (5, 4);<br/>    let output = unsafe {<br/>        add_input(in1, in2) };<br/>    assert!( (output == (in1 + in2) ),\"Error in sum calculation\")\u00a0;<br/>}</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> JNIDemo <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> System.<span class=\"me1\">loadLibrary</span><span class=\"br0\">(</span><span class=\"st0\">\"JNIDemo\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> callStrdup<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>callStrdup<span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include \"stplugin.h\"</span><br/>\u00a0<br/>STDLL stata_call<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtol.html\"><span class=\"kw3\">strtol</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Don't forget array indices are 1-based in Stata.</span><br/>            SF_mat_store<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let hello = \"Hello, World!\"<br/>let fromC = strdup(hello)<br/>let backToSwiftString = String.fromCString(fromC)</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require critcl<br/>critcl::<span class=\"me1\">code</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">#include &lt;math.h&gt;</span><br/><span class=\"br0\">}</span><br/>critcl::<span class=\"me1\">cproc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">ilogb</span> <span class=\"br0\">{</span>double value<span class=\"br0\">}</span> int <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> ilogb<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">package</span> provide ilogb <span class=\"nu0\">1.0</span></pre>"}, {"lang": "TXR", "loc": 1, "block": "<pre>This is the TXR Lisp interactive listener of TXR 176.\nUse the\u00a0:quit command or type Ctrl-D on empty line to exit.\n1&gt; (with-dyn-lib nil\n     (deffi strdup \"strdup\" str-d (str)))\n#:lib-0177\n2&gt; (strdup \"hello, world!\")\n\"hello, world!\"</pre>"}, {"lang": "zkl", "loc": 36, "block": "<pre class=\"c highlighted_source\"><span class=\"co1\">//-*-c-*-</span><br/><span class=\"co1\">// flf.c, Call a foreign-language function</span><br/>\u00a0<br/><span class=\"co1\">// export zklRoot=/home/ZKL</span><br/><span class=\"co1\">// clang -O -fPIC -I $zklRoot/VM  -c -o flf.o flf.c</span><br/><span class=\"co1\">// clang flf.o -L$zklRoot/Lib -lzkl -shared -Wl,-soname,flf.so -o flf.so</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#include \"zklObject.h\"</span><br/><span class=\"co2\">#include \"zklMethod.h\"</span><br/><span class=\"co2\">#include \"zklString.h\"</span><br/><span class=\"co2\">#include \"zklImports.h\"</span><br/>\u00a0<br/>    <span class=\"co1\">// strlen(str)</span><br/><span class=\"kw4\">static</span> Instance <span class=\"sy0\">*</span>zkl_strlen<span class=\"br0\">(</span>Instance <span class=\"sy0\">*</span>_<span class=\"sy0\">,</span>pArglist arglist<span class=\"sy0\">,</span>pVM vm<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   Instance <span class=\"sy0\">*</span>s  <span class=\"sy0\">=</span> arglistGetString<span class=\"br0\">(</span>arglist<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"strlen\"</span><span class=\"sy0\">,</span>vm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">size_t</span>    sz <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>stringText<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> intCreate<span class=\"br0\">(</span>sz<span class=\"sy0\">,</span>vm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> one<span class=\"sy0\">;</span><br/>\u00a0<br/>DllExport <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>construct<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>vm<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>vm<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>ZKLX_PROTOCOL<span class=\"sy0\">;</span>\t<span class=\"co1\">// handshake</span><br/>   \t<span class=\"co1\">// If this is reloaded, nothing happens except </span><br/>\t<span class=\"co1\">// construct() is called again so don't reinitialize</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>one<span class=\"br0\">)</span>\t<span class=\"co1\">// static items are zero</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"co1\">// do some one time initialization</span><br/>      one <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> methodCreate<span class=\"br0\">(</span>Void<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>zkl_strlen<span class=\"sy0\">,</span>vm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}]}