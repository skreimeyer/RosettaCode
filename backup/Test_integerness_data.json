{"task": "Test_integerness", "blocks": [{"lang": "ALGOL 68", "loc": 26, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># set the required precision of LONG LONG values using    #</span><br/><span class=\"coMULTI\"># \"PR precision n PR\" if required                         #</span><br/><span class=\"co2\">PR precision 24 PR</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns TRUE if v has an integer value, FALSE otherwise #</span><br/><span class=\"kw4\">OP</span> ISINT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">COMPL</span> v <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">IF</span> im <span class=\"kw6\">OF</span> v <span class=\"sy1\">/=</span> 0 <span class=\"kw2\">THEN</span><br/>       <span class=\"coMULTI\"># v has an imaginary part #</span><br/>       <span class=\"kw7\">FALSE</span><br/>   <span class=\"kw2\">ELSE</span><br/>       <span class=\"coMULTI\"># v has a real part only #</span><br/>       <span class=\"kw8\">ENTIER</span> re <span class=\"kw6\">OF</span> v <span class=\"sy1\">=</span> v<br/>   <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># ISINT #</span><br/>\u00a0<br/><span class=\"coMULTI\"># test ISINT #</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> test is int <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw5\">COMPLEX</span> v <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> re <span class=\"kw6\">OF</span> v<span class=\"sy1\">,</span> <span class=\"st0\">\"_\"</span><span class=\"sy1\">,</span> im <span class=\"kw6\">OF</span> v<span class=\"sy1\">,</span> <span class=\"kw2\">IF</span> ISINT v <span class=\"kw2\">THEN</span> <span class=\"st0\">\" is \"</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\" is not \"</span> <span class=\"kw2\">FI</span><span class=\"sy1\">,</span> <span class=\"st0\">\"integral\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/>test is int<span class=\"br0\">(</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test is int<span class=\"br0\">(</span> <span class=\"re1\">1.00000001</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test is int<span class=\"br0\">(</span> 4 <span class=\"kw10\">I</span> 3 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test is int<span class=\"br0\">(</span> <span class=\"re1\">4.0</span> <span class=\"kw10\">I</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test is int<span class=\"br0\">(</span> 123456789012345678901234 <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 59, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;complex.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Testing macros */</span><br/><span class=\"co2\">#define FMTSPEC(arg) _Generic((arg), \\<br/>    float: \"%f\", double: \"%f\", \\<br/>    long double: \"%Lf\", unsigned int: \"%u\", \\<br/>    unsigned long: \"%lu\", unsigned long long: \"%llu\", \\<br/>    int: \"%d\", long: \"%ld\", long long: \"%lld\", \\<br/>    default: \"(invalid type (%p)\")</span><br/>\u00a0<br/><span class=\"co2\">#define CMPPARTS(x, y) ((long double complex)((long double)(x) + \\<br/>            I * (long double)(y)))</span><br/>\u00a0<br/><span class=\"co2\">#define TEST_CMPL(i, j)\\<br/>    printf(FMTSPEC(i), i), printf(\" + \"), printf(FMTSPEC(j), j), \\<br/>    printf(\"i =\u00a0%s\\n\", (isint(CMPPARTS(i, j))\u00a0? \"true\"\u00a0: \"false\"))</span><br/>\u00a0<br/><span class=\"co2\">#define TEST_REAL(i)\\<br/>    printf(FMTSPEC(i), i), printf(\" =\u00a0%s\\n\", (isint(i)\u00a0? \"true\"\u00a0: \"false\"))</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Main code */</span><br/><span class=\"kw4\">static</span> <span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> isint<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">double</span> complex n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> cimagl<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nearbyintl<span class=\"br0\">(</span>creall<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> creall<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu16\">2.00000000000001</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"nu16\">7.3333333333333</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"nu16\">3.141592653589</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu19\">9.223372036854776e18</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span><span class=\"nu19\">5e-324</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_REAL<span class=\"br0\">(</span>NAN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_CMPL<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_CMPL<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_CMPL<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    TEST_CMPL<span class=\"br0\">(</span><span class=\"nu16\">3.4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Demonstrating that we can use the same function for complex values<br/>     * constructed in the standard way */</span><br/>    <span class=\"kw4\">double</span> complex test1 <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"sy0\">*</span>I<span class=\"sy0\">,</span><br/>                   test2 <span class=\"sy0\">=</span> <span class=\"nu17\">3.4f</span><span class=\"sy0\">,</span><br/>                   test3 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>                   test4 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"nu16\">1.2</span><span class=\"sy0\">*</span>I<span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Test 1 (5+i) =\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> isint<span class=\"br0\">(</span>test1<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"true\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"false\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Test 2 (3.4+0i) =\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> isint<span class=\"br0\">(</span>test2<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"true\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"false\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Test 3 (3+0i) =\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> isint<span class=\"br0\">(</span>test3<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"true\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"false\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Test 4 (0+1.2i) =\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> isint<span class=\"br0\">(</span>test4<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"true\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"false\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 171, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;complex&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> Type<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">struct</span> Precision<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\t<span class=\"kw4\">static</span> Type GetEps<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> eps<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">void</span> SetEps<span class=\"br0\">(</span>Type e<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\teps <span class=\"sy1\">=</span> e<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>\t<span class=\"kw4\">static</span> Type eps<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> Type<span class=\"sy1\">&gt;</span> Type Precision<span class=\"sy1\">&lt;</span>Type<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">eps</span> <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>Type<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu19\">1E-7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> DigType<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">bool</span> IsDoubleEqual<span class=\"br0\">(</span>DigType d1, DigType d2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw3\">fabs</span><span class=\"br0\">(</span>d1 <span class=\"sy2\">-</span> d2<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> Precision<span class=\"sy1\">&lt;</span>DigType<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">GetEps</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> DigType<span class=\"sy1\">&gt;</span><br/>DigType IntegerPart<span class=\"br0\">(</span>DigType value<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>value <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"kw3\">floor</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy4\">:</span> <span class=\"kw3\">ceil</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> DigType<span class=\"sy1\">&gt;</span><br/>DigType FractionPart<span class=\"br0\">(</span>DigType value<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">fabs</span><span class=\"br0\">(</span>IntegerPart<span class=\"sy1\">&lt;</span>DigType<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy2\">-</span> value<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> Type<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">bool</span> IsInteger<span class=\"br0\">(</span><span class=\"kw4\">const</span> Type<span class=\"sy3\">&amp;</span> value<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define GEN_CHECK_INTEGER(type)\t\t\t\\<br/>template&lt;&gt;\t\t\t\t\t\\<br/>bool IsInteger&lt;type&gt;(const type&amp; value)         \\<br/>{\t\t\t\t\t\t\\<br/>\treturn true;\t\t\t\t\\<br/>}</span><br/>\u00a0<br/><span class=\"co2\">#define GEN_CHECK_CMPL_INTEGER(type)\t\t\t\t\t\\<br/>template&lt;&gt;\t\t\t\t\t\t\t\t\\<br/>bool IsInteger&lt;std::complex&lt;type&gt; &gt;(const std::complex&lt;type&gt;&amp; value)\t\\<br/>{\t\t\t\t\t\t\t\t\t\\<br/>\ttype zero = type();\t\t\t\t\t\t\\<br/>\treturn value.imag() == zero;\t\t\t\t\t\\<br/>}</span><br/>\u00a0<br/><span class=\"co2\">#define GEN_CHECK_REAL(type)\t\t\t\t\t\t\\<br/>template&lt;&gt;\t\t\t\t\t\t\t\t\\<br/>bool IsInteger&lt;type&gt;(const type&amp; value)\t\t\t\t\t\\<br/>{\t\t\t\t\t\t\t\t\t\\<br/>\ttype zero = type();\t\t\t\t\t\t\\<br/>\treturn IsDoubleEqual&lt;type&gt;(FractionPart&lt;type&gt;(value), zero);\t\\<br/>}</span><br/>\u00a0<br/><span class=\"co2\">#define GEN_CHECK_CMPL_REAL(type)\t\t\t\t\t\\<br/>template&lt;&gt;\t\t\t\t\t\t\t\t\\<br/>bool IsInteger&lt;std::complex&lt;type&gt; &gt;(const std::complex&lt;type&gt;&amp; value)\t\\<br/>{\t\t\t\t\t\t\t\t\t\\<br/>\ttype zero = type();\t\t\t\t\t\t\\<br/>\treturn IsDoubleEqual&lt;type&gt;(value.imag(), zero);\t\t\t\\<br/>}</span><br/>\u00a0<br/><span class=\"co2\">#define GEN_INTEGER(type)\t\t\\<br/>\tGEN_CHECK_INTEGER(type)\t\t\\<br/>\tGEN_CHECK_CMPL_INTEGER(type)</span><br/>\u00a0<br/><span class=\"co2\">#define GEN_REAL(type)\t\t\t\\<br/>\tGEN_CHECK_REAL(type)\t\t\\<br/>\tGEN_CHECK_CMPL_REAL(type)</span><br/>\u00a0<br/>\u00a0<br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">short</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span><br/>GEN_INTEGER<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span><br/>\u00a0<br/>GEN_REAL<span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span><br/>GEN_REAL<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><br/>GEN_REAL<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">double</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">class</span> Type<span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> TestValue<span class=\"br0\">(</span><span class=\"kw4\">const</span> Type<span class=\"sy3\">&amp;</span> value<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Value: \"</span> <span class=\"sy1\">&lt;&lt;</span> value <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" of type: \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">typeid</span><span class=\"br0\">(</span>Type<span class=\"br0\">)</span>.<span class=\"me1\">name</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is integer - \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">boolalpha</span> <span class=\"sy1\">&lt;&lt;</span> IsInteger<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> uc <span class=\"sy1\">=</span> <span class=\"nu0\">200</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">short</span> s <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span> us <span class=\"sy1\">=</span> uc<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> s<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> ui <span class=\"sy1\">=</span> us<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ll <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ull <span class=\"sy1\">=</span> ui<span class=\"sy4\">;</span><br/>\u00a0<br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ci1<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ci2<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> ci3<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span><span class=\"sy1\">&gt;</span> cs1<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">short</span><span class=\"sy1\">&gt;</span> cs2<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">short</span><span class=\"sy1\">&gt;</span> cs3<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cd1<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span> cf1<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> cd2<span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">float</span> f1 <span class=\"sy1\">=</span> <span class=\"nu16\">1.0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">float</span> f2 <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu16\">2.0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">float</span> f3 <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu17\">2.4f</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">float</span> f4 <span class=\"sy1\">=</span> 1.23e<span class=\"sy2\">-</span>5f<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">float</span> f5 <span class=\"sy1\">=</span> 1.23e<span class=\"sy2\">-</span>10f<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> d1 <span class=\"sy1\">=</span> f5<span class=\"sy4\">;</span><br/>\u00a0<br/>\tTestValue<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>uc<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>us<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>ui<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>ll<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>ull<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tTestValue<span class=\"br0\">(</span>ci1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>ci2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>ci3<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>cs1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>cs2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>cs3<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tTestValue<span class=\"br0\">(</span>cd1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>cd2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>cf1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tTestValue<span class=\"br0\">(</span>f1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>f2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>f3<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>f4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>f5<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set float precision: 1e-15f<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\tPrecision<span class=\"sy1\">&lt;</span><span class=\"kw4\">float</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">SetEps</span><span class=\"br0\">(</span>1e<span class=\"sy2\">-</span>15f<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>f5<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tTestValue<span class=\"br0\">(</span>d1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 131, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>namespace Test_integerness<br/><span class=\"br0\">{</span><br/>\tclass Program<br/>\t<span class=\"br0\">{</span><br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" ***************************************************\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" *                                                 *\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" *              Integerness test                   *\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" *                                                 *\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" ***************************************************\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tConsoleKeyInfo key <span class=\"sy0\">=</span> new ConsoleKeyInfo<span class=\"br0\">(</span><span class=\"st0\">'Y'</span><span class=\"sy0\">,</span>ConsoleKey.<span class=\"me1\">Y</span><span class=\"sy0\">,</span><span class=\"kw2\">true</span><span class=\"sy0\">,</span><span class=\"kw2\">true</span><span class=\"sy0\">,</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>key.<span class=\"me1\">Key</span> <span class=\"sy0\">==</span> ConsoleKey.<span class=\"me1\">Y</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">// Get number value from keyboard</span><br/>\t\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" Enter number value\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tstring LINE <span class=\"sy0\">=</span> Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">// Get tolerance value from keyboard</span><br/>\t\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" Enter tolerance value\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw4\">double</span> TOLERANCE <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">// Resolve entered number format and set NUMBER value</span><br/>\t\t\t\t<span class=\"kw4\">double</span> NUMBER <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tstring <span class=\"br0\">[</span><span class=\"br0\">]</span> N<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">// Real number value</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw4\">double</span>.<span class=\"me1\">TryParse</span><span class=\"br0\">(</span>LINE<span class=\"sy0\">,</span> out NUMBER<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">// Rational number value</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>LINE.<span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tN <span class=\"sy0\">=</span> LINE.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t\t\tNUMBER <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>N<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">double</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>N<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t<span class=\"co1\">// Inf value</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>LINE.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"INF\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tNUMBER <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">PositiveInfinity</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t<span class=\"co1\">// Complex value</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>LINE.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">Contains</span><span class=\"br0\">(</span><span class=\"st0\">\"I\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"co1\">// Delete letter i</span><br/>\t\t\t\t\t\tLINE <span class=\"sy0\">=</span> LINE.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"I\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t\t\tstring r <span class=\"sy0\">=</span> string.<span class=\"me1\">Empty</span><span class=\"sy0\">;</span> <span class=\"co1\">// real part</span><br/>\t\t\t\t\t\tstring i <span class=\"sy0\">=</span> string.<span class=\"me1\">Empty</span><span class=\"sy0\">;</span> <span class=\"co1\">// imaginary part</span><br/>\u00a0<br/>\t\t\t\t\t\t<span class=\"kw4\">int</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// sign offset</span><br/>\u00a0<br/>\t\t\t\t\t\t<span class=\"co1\">// Get sign</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>LINE<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'+'</span> <span class=\"sy0\">||</span> LINE<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t\tr<span class=\"sy0\">+=</span>LINE<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\tLINE <span class=\"sy0\">=</span> LINE.<span class=\"me1\">Remove</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\ts<span class=\"sy0\">--;</span><br/>\t\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t\t<span class=\"co1\">// Get real part</span><br/>\t\t\t\t\t\tforeach <span class=\"br0\">(</span><span class=\"kw4\">char</span> element in LINE<span class=\"br0\">)</span> <br/>\t\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>element<span class=\"sy0\">!=</span><span class=\"st0\">'+'</span> <span class=\"sy0\">&amp;&amp;</span> element<span class=\"sy0\">!=</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t\tr<span class=\"sy0\">+=</span>element.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t\t<span class=\"co1\">// get imaginary part</span><br/>\t\t\t\t\t\ti <span class=\"sy0\">=</span> LINE.<span class=\"me1\">Substring</span><span class=\"br0\">(</span>LINE.<span class=\"me1\">Length</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>r.<span class=\"me1\">Length</span><span class=\"sy0\">+</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t\t\tNUMBER <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>NUMBER<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tNUMBER <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t\tNUMBER <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">NaN</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t<span class=\"co1\">// NaN value</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\tNUMBER <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">NaN</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">// Test</span><br/>\t\t\t\tbool IS_INTEGER <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\tbool IS_INTEGER_T <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">double</span>.<span class=\"me1\">IsNaN</span><span class=\"br0\">(</span>NUMBER<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\tIS_INTEGER<span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Round</span><span class=\"br0\">(</span>NUMBER<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> NUMBER.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\tIS_INTEGER <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>decimal<span class=\"br0\">)</span>TOLERANCE <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>decimal<span class=\"br0\">)</span>Math.<span class=\"me1\">Abs</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>decimal<span class=\"br0\">)</span>Math.<span class=\"me1\">Round</span><span class=\"br0\">(</span>NUMBER<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>decimal<span class=\"br0\">)</span>NUMBER <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\tIS_INTEGER_T <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>IS_INTEGER<span class=\"br0\">)</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" Is exact integer \"</span> <span class=\"sy0\">+</span> IS_INTEGER<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\" Is exact integer \"</span> <span class=\"sy0\">+</span> IS_INTEGER <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\" Is integer with tolerance \"</span> <span class=\"sy0\">+</span> IS_INTEGER_T <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" Another test &lt; Y /N &gt; . . . \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tkey  <span class=\"sy0\">=</span> Console.<span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 35, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> INTEGERNESS-<span class=\"kw3\">PROGRAM</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  INTEGERS-OR-ARE-THEY<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> POSSIBLE-<span class=\"kw4\">INTEGER</span> <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>V9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> DEFINITE-<span class=\"kw4\">INTEGER</span> <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  COMPLEX-<span class=\"kw3\">NUMBER</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> REAL-PART        <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>V9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> IMAGINARY-PART   <span class=\"kw3\">PIC</span> S9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>V9<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>TEST-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ZERO</span> <span class=\"kw2\">TO</span> IMAGINARY-PART<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DIVIDE</span> -<span class=\"nu0\">28</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">7</span> <span class=\"kw2\">GIVING</span> POSSIBLE-<span class=\"kw4\">INTEGER</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> INTEGER-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DIVIDE</span> <span class=\"nu0\">28</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">18</span> <span class=\"kw2\">GIVING</span> POSSIBLE-<span class=\"kw4\">INTEGER</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> INTEGER-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DIVIDE</span> <span class=\"nu0\">3</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">10000000000</span> <span class=\"kw2\">GIVING</span> POSSIBLE-<span class=\"kw4\">INTEGER</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> INTEGER-PARAGRAPH<span class=\"sy0\">.</span><br/>TEST-COMPLEX-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ZERO</span> <span class=\"kw2\">TO</span> REAL-PART<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> IMAGINARY-PART<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> REAL-PART <span class=\"kw2\">TO</span> POSSIBLE-<span class=\"kw4\">INTEGER</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> INTEGER-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>INTEGER-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> IMAGINARY-PART <span class=\"kw3\">IS</span> <span class=\"kw3\">EQUAL</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">ZERO</span> <span class=\"kw3\">THEN</span> <span class=\"kw2\">PERFORM</span> REAL-PARAGRAPH<span class=\"sy0\">,</span><br/>    <span class=\"kw3\">ELSE</span> <span class=\"kw2\">PERFORM</span> COMPLEX-PARAGRAPH<span class=\"sy0\">.</span><br/>REAL-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> POSSIBLE-<span class=\"kw4\">INTEGER</span> <span class=\"kw2\">TO</span> DEFINITE-<span class=\"kw4\">INTEGER</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> DEFINITE-<span class=\"kw4\">INTEGER</span> <span class=\"kw3\">IS</span> <span class=\"kw3\">EQUAL</span> <span class=\"kw2\">TO</span> POSSIBLE-<span class=\"kw4\">INTEGER</span><br/>    <span class=\"kw3\">THEN</span> <span class=\"kw2\">DISPLAY</span> POSSIBLE-<span class=\"kw4\">INTEGER</span> <span class=\"st0\">' IS AN INTEGER.'</span><span class=\"sy0\">,</span><br/>    <span class=\"kw3\">ELSE</span> <span class=\"kw2\">DISPLAY</span> POSSIBLE-<span class=\"kw4\">INTEGER</span> <span class=\"st0\">' IS NOT AN INTEGER.'</span><span class=\"sy0\">.</span><br/>COMPLEX-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> REAL-PART <span class=\"st0\">'+'</span> IMAGINARY-PART <span class=\"st0\">'i IS NOT AN INTEGER.'</span><span class=\"sy0\">.</span></pre>"}, {"lang": "D", "loc": 87, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">meta</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"nu16\">25.000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"nu16\">24.999999</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"nu16\">24.999999</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.00001</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"nu16\">25.000100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu19\">2.1e120</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu19\">5e-2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">nan</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"nu16\">5.0</span><span class=\"sy0\">+</span>0.0i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">-</span>5i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T v<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> tol <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Is\u00a0%0.10s an integer?\u00a0%s\"</span><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> isInteger<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> tol<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Test for plain integers</span><br/><span class=\"kw4\">bool</span> isInteger<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T v<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isIntegral<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"nu0\">2L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2L</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Test for floating point</span><br/><span class=\"kw4\">bool</span> isInteger<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T v<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> tol <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isFloatingPoint<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>v <span class=\"sy0\">-</span> floor<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tol <span class=\"sy0\">||</span> <span class=\"br0\">(</span>ceil<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">-</span> v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tol<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"nu16\">25.000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isInteger<span class=\"br0\">(</span><span class=\"nu16\">24.999999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"nu16\">24.999999</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.00001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Test for complex numbers</span><br/><span class=\"kw4\">bool</span> isInteger<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>Complex<span class=\"sy0\">!</span>T v<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> tol <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> isInteger<span class=\"br0\">(</span>v.<span class=\"me1\">re</span><span class=\"sy0\">,</span> tol<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> abs<span class=\"br0\">(</span>v.<span class=\"me1\">im</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tol<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span>complex<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isInteger<span class=\"br0\">(</span>complex<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span>complex<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.00009</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Test for built-in complex types</span><br/><span class=\"kw4\">bool</span> isInteger<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T v<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> tol <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>staticIndexOf<span class=\"sy0\">!</span><span class=\"br0\">(</span>Unqual<span class=\"sy0\">!</span>T<span class=\"sy0\">,</span> AliasSeq<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">cfloat</span><span class=\"sy0\">,</span> <span class=\"kw4\">cdouble</span><span class=\"sy0\">,</span> <span class=\"kw4\">creal</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> isInteger<span class=\"br0\">(</span>v.<span class=\"me1\">re</span><span class=\"sy0\">,</span> tol<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> abs<span class=\"br0\">(</span>v.<span class=\"me1\">im</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tol<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">+</span> 0.0i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isInteger<span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">+</span> 0.0001i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span><span class=\"nu16\">1.0</span> <span class=\"sy0\">+</span> 0.00009i<span class=\"sy0\">,</span> <span class=\"nu16\">0.0001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Test for built-in imaginary types</span><br/><span class=\"kw4\">bool</span> isInteger<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T v<span class=\"sy0\">,</span> <span class=\"kw4\">real</span> tol <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>staticIndexOf<span class=\"sy0\">!</span><span class=\"br0\">(</span>Unqual<span class=\"sy0\">!</span>T<span class=\"sy0\">,</span> AliasSeq<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">ifloat</span><span class=\"sy0\">,</span> <span class=\"kw4\">idouble</span><span class=\"sy0\">,</span> <span class=\"kw4\">ireal</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> abs<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tol<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span>0.0i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isInteger<span class=\"br0\">(</span>0.0001i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>isInteger<span class=\"br0\">(</span>0.00009i<span class=\"sy0\">,</span> <span class=\"nu16\">0.0001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">defmodule Test do<br/>  def integer?(n) when n == trunc(n), do: true<br/>  def integer?(_), do: false<br/>end<br/>\u00a0<br/>Enum.each([2, 2.0, 2.5, 2.000000000000001, 1.23e300, 1.0e-300, \"123\", '123',\u00a0:\"123\"], fn n -&gt;<br/>  IO.puts \"#{inspect n} is integer?: #{Test.integer?(n)}\"<br/>end)</pre>"}, {"lang": "Factor", "loc": 36, "block": "<pre class=\"text highlighted_source\">USING: formatting io kernel math math.functions sequences\u00a0;<br/>IN: rosetta-code.test-integerness<br/>\u00a0<br/>GENERIC: integral? ( n --\u00a0? )<br/>\u00a0<br/>M: real integral? [ ] [ &gt;integer ] bi number=\u00a0;<br/>M: complex integral? &gt;rect [ integral? ] [ 0 number= ] bi* and\u00a0;<br/>\u00a0<br/>GENERIC# fuzzy-int? 1 ( n tolerance --\u00a0? )<br/>\u00a0<br/>M: real fuzzy-int? [ dup round - abs ] dip &lt;=\u00a0;<br/>M: complex fuzzy-int? [ &gt;rect ] dip swapd fuzzy-int? swap 0<br/>    number= and\u00a0;<br/>\u00a0<br/>{<br/>    25/1<br/>    50+2/3<br/>    34/73<br/>    312459210312903/129381293812491284512951<br/>    25.000000<br/>    24.999999<br/>    25.000100<br/>    -2.1e120<br/>    -5e-2<br/>    0/0.\u00a0! NaN<br/>    1/0.\u00a0! Infinity<br/>    C{ 5.0 0.0 }<br/>    C{ 5 -5 }<br/>    C{ 5 0 }<br/>}<br/>\"Number\" \"Exact int?\" \"Fuzzy int? (tolerance=0.00001)\"<br/>\"%-41s\u00a0%-11s\u00a0%s\\n\" printf<br/>[<br/>   [ ] [ integral? ] [ 0.00001 fuzzy-int? ] tri<br/>   \"%-41u\u00a0%-11u\u00a0%u\\n\" printf<br/>] each</pre>"}, {"lang": "Fortran", "loc": 28, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> ZERMELO\t<span class=\"co1\">!Approach the foundations of mathematics.</span><br/>       <span class=\"kw1\">CONTAINS</span><br/>        <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> ISINTEGRAL<span class=\"br0\">(</span>X<span class=\"br0\">)</span>\t<span class=\"co1\">!A whole number?</span><br/>         <span class=\"kw3\">REAL</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> X\t<span class=\"co1\">!Alas, this is not really a REAL number.</span><br/>         <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> N\t<span class=\"co1\">!Largest available.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>ISNAN<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Avoid some sillyness.</span><br/>            ISINTEGRAL <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!And possible error messages.</span><br/>          <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!But now it is safe to try.</span><br/>            N <span class=\"sy0\">=</span> KIDINT<span class=\"br0\">(</span>X<span class=\"br0\">)</span>\t\t<span class=\"co1\">!This one truncates.</span><br/>            ISINTEGRAL <span class=\"sy0\">=</span> N <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> X\t<span class=\"co1\">!Any difference?</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!A floating-point number may overflow an integer.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ISINTEGRAL\t<span class=\"co1\">!And even if integral, it will not seem so.</span><br/>\u00a0<br/>        <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> ISINTEGRALZ<span class=\"br0\">(</span>Z<span class=\"br0\">)</span>\t<span class=\"co1\">!For complex numbers, two tests.</span><br/>         <span class=\"kw3\">DOUBLE</span> <span class=\"kw3\">COMPLEX</span> Z\t<span class=\"co1\">!Still not really REAL, though.</span><br/>          ISINTEGRALZ <span class=\"sy0\">=</span> ISINTEGRAL<span class=\"br0\">(</span><span class=\"kw4\">DBLE</span><span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> ISINTEGRAL<span class=\"br0\">(</span>DIMAG<span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Separate the parts.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ISINTEGRALZ<span class=\"co1\">!No INTEGER COMPLEX type is offered.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> ZERMELO\t<span class=\"co1\">!Much more mathematics lie elsewhere.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> TEST<br/>      <span class=\"kw3\">USE</span> ZERMELO<br/>      <span class=\"kw3\">DOUBLE</span> <span class=\"kw3\">COMPLEX</span> Z<br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"See if some numbers are integral...\"</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> ISINTEGRAL<span class=\"br0\">(</span>666D0<span class=\"br0\">)</span>,666D0<br/>      Z <span class=\"sy0\">=</span> DCMPLX<span class=\"br0\">(</span><span class=\"sy0\">-</span>3D0,<span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"kw4\">ATAN</span><span class=\"br0\">(</span>1D0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> ISINTEGRALZ<span class=\"br0\">(</span>Z<span class=\"br0\">)</span>,Z<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "Go", "loc": 157, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"math\"</span><br/>\t<span class=\"st0\">\"math/big\"</span><br/>\t<span class=\"st0\">\"reflect\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/>\t<span class=\"st0\">\"unsafe\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// Go provides an integerness test only for the big.Rat and big.Float types</span><br/><span class=\"co1\">// in the standard library.</span><br/>\u00a0<br/><span class=\"co1\">// The fundamental piece of code needed for built-in floating point types</span><br/><span class=\"co1\">// is a test on the float64 type:</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Float64IsInt<span class=\"sy1\">(</span>f <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t_<span class=\"sy1\">,</span> frac <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Modf<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> frac <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Other built-in or stanadard library numeric types are either always</span><br/><span class=\"co1\">// integer or can be easily tested using Float64IsInt.</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Float32IsInt<span class=\"sy1\">(</span>f <span class=\"kw4\">float32</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> Float64IsInt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>f<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Complex128IsInt<span class=\"sy1\">(</span>c <span class=\"kw4\">complex128</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">imag</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; Float64IsInt<span class=\"sy1\">(</span><span class=\"kw3\">real</span><span class=\"sy1\">(</span>c<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Complex64IsInt<span class=\"sy1\">(</span>c <span class=\"kw4\">complex64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">imag</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; Float64IsInt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"kw3\">real</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Usually just the above statically typed functions would be all that is used,</span><br/><span class=\"co1\">// but if it is desired to have a single function that can test any arbitrary</span><br/><span class=\"co1\">// type, including the standard math/big types, user defined types based on</span><br/><span class=\"co1\">// an integer, float, or complex builtin types, or user defined types that</span><br/><span class=\"co1\">// have an IsInt() method, then reflection can be used.</span><br/>\u00a0<br/><span class=\"kw1\">type</span> hasIsInt <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>\tIsInt<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> bigIntT <span class=\"sy2\">=</span> reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">((</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)(</span><span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/>\u00a0<br/><span class=\"kw4\">func</span> IsInt<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> ci<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>hasIsInt<span class=\"sy1\">);</span> ok <span class=\"sy1\">{</span><br/>\t\t<span class=\"co1\">// Handles things like *big.Rat</span><br/>\t\t<span class=\"kw1\">return</span> ci<span class=\"sy3\">.</span>IsInt<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">switch</span> v <span class=\"sy2\">:=</span> reflect<span class=\"sy3\">.</span>ValueOf<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">);</span> v<span class=\"sy3\">.</span>Kind<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">case</span> reflect<span class=\"sy3\">.</span>Int<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Int8<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Int16<span class=\"sy1\">,</span><br/>\t\treflect<span class=\"sy3\">.</span>Int32<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Int64<span class=\"sy1\">,</span><br/>\t\treflect<span class=\"sy3\">.</span>Uint<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Uint8<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Uint16<span class=\"sy1\">,</span><br/>\t\treflect<span class=\"sy3\">.</span>Uint32<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Uint64<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Uintptr<span class=\"sy1\">:</span><br/>\t\t<span class=\"co1\">// Built-in types and any custom type based on them</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"kw1\">case</span> reflect<span class=\"sy3\">.</span>Float32<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Float64<span class=\"sy1\">:</span><br/>\t\t<span class=\"co1\">// Built-in floats and anything based on them</span><br/>\t\t<span class=\"kw1\">return</span> Float64IsInt<span class=\"sy1\">(</span>v<span class=\"sy3\">.</span>Float<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">case</span> reflect<span class=\"sy3\">.</span>Complex64<span class=\"sy1\">,</span> reflect<span class=\"sy3\">.</span>Complex128<span class=\"sy1\">:</span><br/>\t\t<span class=\"co1\">// Built-in complexes and anything based on them</span><br/>\t\t<span class=\"kw1\">return</span> Complex128IsInt<span class=\"sy1\">(</span>v<span class=\"sy3\">.</span>Complex<span class=\"sy1\">())</span><br/>\t<span class=\"kw1\">case</span> reflect<span class=\"sy3\">.</span>String<span class=\"sy1\">:</span><br/>\t\t<span class=\"co1\">// Could also do strconv.ParseFloat then FloatIsInt but</span><br/>\t\t<span class=\"co1\">// big.Rat handles everything ParseFloat can plus more.</span><br/>\t\t<span class=\"co1\">// Note, there is no strconv.ParseComplex.</span><br/>\t\t<span class=\"kw1\">if</span> r<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>v<span class=\"sy3\">.</span>String<span class=\"sy1\">());</span> ok <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> r<span class=\"sy3\">.</span>IsInt<span class=\"sy1\">()</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">case</span> reflect<span class=\"sy3\">.</span>Ptr<span class=\"sy1\">:</span><br/>\t\t<span class=\"co1\">// Special case for math/big.Int</span><br/>\t\t<span class=\"kw1\">if</span> v<span class=\"sy3\">.</span>Type<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> bigIntT <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// The rest is just demonstration and display</span><br/>\u00a0<br/><span class=\"kw1\">type</span> intbased <span class=\"kw4\">int16</span><br/><span class=\"kw1\">type</span> complexbased <span class=\"kw4\">complex64</span><br/><span class=\"kw1\">type</span> customIntegerType <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\t<span class=\"co1\">// Anything that stores or represents a sub-set</span><br/>\t<span class=\"co1\">// of integer values in any way desired.</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>customIntegerType<span class=\"sy1\">)</span> IsInt<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span>    <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>customIntegerType<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"&lt;\u2026&gt;\"</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\thdr <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%27s \u00a0%-6s\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Input\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"IsInt\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Type\"</span><span class=\"sy1\">)</span><br/>\tshow2 <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>t <span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{},</span> args <span class=\"sy4\">...</span><span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span><br/>\t\tistr <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprint<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%27s \u00a0%-6t\u00a0%T \"</span><span class=\"sy1\">,</span> istr<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>args<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tshow <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{},</span> args <span class=\"sy4\">...</span><span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span><br/>\t\tshow2<span class=\"sy1\">(</span>IsInt<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">),</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> args<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"Using Float64IsInt with float64:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> hdr<span class=\"sy1\">)</span><br/>\tneg1 <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"nu0\">0</span><span class=\"sy1\">,</span> neg1 <span class=\"sy3\">*</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy3\">.</span><span class=\"nu0\">000000000000001</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">22</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>\t\tmath<span class=\"sy3\">.</span>Pi<span class=\"sy1\">,</span><br/>\t\tmath<span class=\"sy3\">.</span>MinInt64<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>MaxUint64<span class=\"sy1\">,</span><br/>\t\tmath<span class=\"sy3\">.</span>SmallestNonzeroFloat64<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>MaxFloat64<span class=\"sy1\">,</span><br/>\t\tmath<span class=\"sy3\">.</span>NaN<span class=\"sy1\">(),</span> math<span class=\"sy3\">.</span>Inf<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span> math<span class=\"sy3\">.</span>Inf<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span><br/>\t<span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tshow2<span class=\"sy1\">(</span>Float64IsInt<span class=\"sy1\">(</span>f<span class=\"sy1\">),</span> f<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Using Complex128IsInt with complex128:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> hdr<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">complex128</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1i</span><span class=\"sy1\">,</span> <span class=\"nu0\">0i</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy3\">.</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><br/>\t<span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tshow2<span class=\"sy1\">(</span>Complex128IsInt<span class=\"sy1\">(</span>c<span class=\"sy1\">),</span> c<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Using reflection:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span>hdr<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"hello\"</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>MaxFloat64<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"9e100\"</span><span class=\"sy1\">)</span><br/>\tf <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Float<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>\tf<span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span><span class=\"st0\">\"1e-3000\"</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"(4+0i)\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"(complex strings not parsed)\"</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"nu0\">4</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0i</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>rune<span class=\"sy1\">(</span><span class=\"st0\">'\u00a7'</span><span class=\"sy1\">),</span> <span class=\"st0\">\"or rune\"</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">'A'</span><span class=\"sy1\">),</span> <span class=\"st0\">\"or byte\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">var</span> t1 intbased <span class=\"sy2\">=</span> <span class=\"nu0\">5200</span><br/>\t<span class=\"kw1\">var</span> t2a<span class=\"sy1\">,</span> t2b complexbased <span class=\"sy2\">=</span> <span class=\"nu0\">5</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0i</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1i</span><br/>\tshow<span class=\"sy1\">(</span>t1<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>t2a<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>t2b<span class=\"sy1\">)</span><br/>\tx <span class=\"sy2\">:=</span> <span class=\"kw4\">uintptr</span><span class=\"sy1\">(</span>unsafe<span class=\"sy3\">.</span>Pointer<span class=\"sy1\">(</span>&amp;t2b<span class=\"sy1\">))</span><br/>\tshow<span class=\"sy1\">(</span>x<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>MinInt32<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>MaxUint64<span class=\"sy1\">))</span><br/>\tb<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"9\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">25</span><span class=\"sy1\">),</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Rat<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>\tr<span class=\"sy3\">.</span>SetString<span class=\"sy1\">(</span><span class=\"st0\">\"2/3\"</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>SetFrac<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">)))</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"st0\">\"12345/5\"</span><span class=\"sy1\">)</span><br/>\tshow<span class=\"sy1\">(</span><span class=\"kw3\">new</span><span class=\"sy1\">(</span>customIntegerType<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Decimal<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Ratio<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   isInt =:  <span class=\"sy0\">(</span>= &lt;.<span class=\"sy0\">)</span> *. <span class=\"sy0\">(</span>= {<a class=\"__cf_email__\" data-cfemail=\"e7c9a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+.<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 100, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigDecimal</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TestIntegerness <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isLong<span class=\"br0\">(</span><span class=\"kw4\">double</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> isLong<span class=\"br0\">(</span>d, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isLong<span class=\"br0\">(</span><span class=\"kw4\">double</span> d, <span class=\"kw4\">double</span> tolerance<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>d <span class=\"sy0\">-</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tolerance <span class=\"sy0\">||</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">-</span> d<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tolerance<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @SuppressWarnings<span class=\"br0\">(</span><span class=\"st0\">\"ResultOfMethodCallIgnored\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isBigInteger<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a> bd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            bd.<span class=\"me1\">toBigIntegerExact</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarithmeticexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ArithmeticException</span></a> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Rational <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> num<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span> denom<span class=\"sy0\">;</span><br/>\u00a0<br/>        Rational<span class=\"br0\">(</span><span class=\"kw4\">int</span> num, <span class=\"kw4\">int</span> denom<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">num</span> <span class=\"sy0\">=</span> num<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">denom</span> <span class=\"sy0\">=</span> denom<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span> isLong<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> num <span class=\"sy0\">%</span> denom <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%s/%s\"</span>, num, denom<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Complex <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> real<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> imag<span class=\"sy0\">;</span><br/>\u00a0<br/>        Complex<span class=\"br0\">(</span><span class=\"kw4\">double</span> real, <span class=\"kw4\">double</span> imag<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">real</span> <span class=\"sy0\">=</span> real<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">imag</span> <span class=\"sy0\">=</span> imag<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span> isLong<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> TestIntegerness.<span class=\"me1\">isLong</span><span class=\"br0\">(</span>real<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> imag <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>imag <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%s +\u00a0%si\"</span>, real, imag<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%s -\u00a0%si\"</span>, real, imag<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span> da <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">25.000000</span>, <span class=\"nu0\">24.999999</span>, <span class=\"nu0\">25.000100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> d <span class=\"sy0\">:</span> da<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">boolean</span> exact <span class=\"sy0\">=</span> isLong<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%.6f is\u00a0%s integer%n\"</span>, d, exact <span class=\"sy0\">?</span> <span class=\"st0\">\"an\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not an\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> tolerance <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"With a tolerance of\u00a0%.5f:%n\"</span>, tolerance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> d <span class=\"sy0\">:</span> da<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">boolean</span> fuzzy <span class=\"sy0\">=</span> isLong<span class=\"br0\">(</span>d, tolerance<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%.6f is\u00a0%s integer%n\"</span>, d, fuzzy <span class=\"sy0\">?</span> <span class=\"st0\">\"an\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not an\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span> fa <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>2.1e120, <span class=\"sy0\">-</span>5e<span class=\"sy0\">-</span>2, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NaN</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">POSITIVE_INFINITY</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> f <span class=\"sy0\">:</span> fa<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">boolean</span> exact <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>f.<span class=\"me1\">isNaN</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>f.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isBigInteger<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abigdecimal+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">(</span>f.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s is\u00a0%s integer%n\"</span>, f, exact <span class=\"sy0\">?</span> <span class=\"st0\">\"an\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not an\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Complex<span class=\"sy0\">&gt;</span> ca <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Complex<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Complex c <span class=\"sy0\">:</span> ca<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">boolean</span> exact <span class=\"sy0\">=</span> c.<span class=\"me1\">isLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s is\u00a0%s integer%n\"</span>, c, exact <span class=\"sy0\">?</span> <span class=\"st0\">\"an\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not an\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Rational<span class=\"sy0\">&gt;</span> ra <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Rational<span class=\"br0\">(</span><span class=\"nu0\">24</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Rational<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Rational<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Rational r <span class=\"sy0\">:</span> ra<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">boolean</span> exact <span class=\"sy0\">=</span> r.<span class=\"me1\">isLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s is\u00a0%s integer%n\"</span>, r, exact <span class=\"sy0\">?</span> <span class=\"st0\">\"an\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not an\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\">def is_integral:<br/>  if type == \"number\" then . == floor<br/>  elif type == \"array\" then<br/>       length == 2 and .[1] == 0 and (.[0] | is_integral)<br/>  else type == \"object\"<br/>       and .type == \"rational\" <br/>       and  .q\u00a0!= 0<br/>       and (.q | is_integral)<br/>       and ((.p / .q) | is_integral)<br/>  end\u00a0;</pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\"># v0.6.0<br/>\u00a0<br/>@show isinteger(25.000000)<br/>@show isinteger(24.999999)<br/>@show isinteger(25.000100)<br/>@show isinteger(-2.1e120)<br/>@show isinteger(-5e-2)<br/>@show isinteger(NaN)<br/>@show isinteger(Inf)<br/>@show isinteger(complex(5.0, 0.0))<br/>@show isinteger(complex(5, 5))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 68, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigDecimal</span><br/>\u00a0<br/>fun Double.<span class=\"me1\">isLong</span><span class=\"br0\">(</span>tolerance<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> - Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tolerance || <span class=\"br0\">(</span>Math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> - <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> tolerance<br/>\u00a0<br/>fun BigDecimal.<span class=\"me1\">isBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">toBigIntegerExact</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>ex<span class=\"sy0\">:</span> ArithmeticException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Rational<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> denom<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun isLong<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num <span class=\"sy0\">%</span> denom <span class=\"sy0\">==</span> 0L<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$num/$denom\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Complex<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> real<span class=\"sy0\">:</span> Double, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> imag<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun isLong<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> real.<span class=\"me1\">isLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> imag <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>imag <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>            <span class=\"st0\">\"$real + ${imag}i\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            <span class=\"st0\">\"$real - ${-imag}i\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> da <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">25.000000</span>, <span class=\"nu0\">24.999999</span>, <span class=\"nu0\">25.000100</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in da<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exact <span class=\"sy0\">=</span> d.<span class=\"me1\">isLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>.6f<span class=\"st0\">\".format(d)} is ${if (exact) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} integer\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tolerance <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span> <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>With a tolerance of ${\"</span><span class=\"sy0\">%</span>.5f<span class=\"st0\">\".format(tolerance)}:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in da<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fuzzy <span class=\"sy0\">=</span> d.<span class=\"me1\">isLong</span><span class=\"br0\">(</span>tolerance<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>.6f<span class=\"st0\">\".format(d)} is ${if (fuzzy) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} integer\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fa <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span>-2.1e120, -5e-2, Double.<span class=\"me1\">NaN</span>, Double.<span class=\"me1\">POSITIVE_INFINITY</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>f in fa<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exact <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>f.<span class=\"me1\">isNaN</span><span class=\"br0\">(</span><span class=\"br0\">)</span> || f.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> BigDecimal<span class=\"br0\">(</span>f.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">isBigInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$f is ${if (exact) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} integer\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ca <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>Complex<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span>, Complex<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, -<span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in ca<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exact <span class=\"sy0\">=</span> c.<span class=\"me1\">isLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$c is ${if (exact) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} integer\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ra <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>Rational<span class=\"br0\">(</span><span class=\"nu0\">24</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span>, Rational<span class=\"br0\">(</span>-<span class=\"nu0\">5</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, Rational<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in ra<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exact <span class=\"sy0\">=</span> r.<span class=\"me1\">isLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$r is ${if (exact) \"</span>an<span class=\"st0\">\" else \"</span>not an<span class=\"st0\">\"} integer\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> isInt <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"number\"</span> <span class=\"kw2\">and</span> x <span class=\"sy0\">==</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Value<span class=\"es1\">\\t</span>Integer?\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"=====<span class=\"es1\">\\t</span>========\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3.5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"String!\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> input <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>input<span class=\"sy0\">,</span> isInt<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "ooRexx", "loc": 60, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 22.06.2014 Walter Pachl using a complex data class<br/>* ooRexx Distribution contains an elaborate complex class<br/>* parts of which are used here<br/>* see REXX for Extra Credit implementation<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">1000</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>1e+12,0e-3<span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">3.14</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">1.00000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">33</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">999999999</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">99999999999</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>1e272<span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">1.000</span>,-<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">1.000</span>,-<span class=\"nu0\">3.3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">2.00000000</span>,+<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">333</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>-<span class=\"nu0\">1</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>,<span class=\"sy0\">.</span>00<span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"sy0\">.</span>complex~new<span class=\"br0\">(</span>0003,<span class=\"nu0\">00.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>test_integer:<br/><span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> cpx<br/>cpxa=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'+-'</span>,cpx,<span class=\"st0\">'-'</span><span class=\"br0\">)</span>,<span class=\"nu0\">13</span><span class=\"br0\">)</span>  <span class=\"co1\">-- beautify representation</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> cpx~imaginary<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> cpxa <span class=\"st0\">'is not an integer'</span><br/>  <span class=\"kw3\">When</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>cpx~real,<span class=\"st0\">'W'</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> cpxa <span class=\"st0\">'is an integer'</span><br/>  <span class=\"kw3\">Otherwise</span><br/>    <span class=\"kw1\">Say</span> cpxa <span class=\"st0\">'is not an integer'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>::class complex<br/>\u00a0<br/>::method init                               <span class=\"coMULTI\">/* initialize a complex number    */</span><br/><span class=\"kw1\">expose</span> real imaginary                       <span class=\"coMULTI\">/* expose the state data          */</span><br/><span class=\"kw1\">use</span> Strict <span class=\"kw1\">arg</span> first=<span class=\"nu0\">0</span>, second=<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/* access the two numbers         */</span><br/>real = first + <span class=\"nu0\">0</span>                            <span class=\"coMULTI\">/* force rounding                 */</span><br/>imaginary = second + <span class=\"nu0\">0</span>                      <span class=\"coMULTI\">/* force rounding on the second   */</span><br/>\u00a0<br/>::method real                               <span class=\"coMULTI\">/* return real part of a complex  */</span><br/><span class=\"kw1\">expose</span> real                                 <span class=\"coMULTI\">/* access the state information   */</span><br/><span class=\"kw1\">return</span> real                                 <span class=\"coMULTI\">/* return that value              */</span><br/>\u00a0<br/>::method imaginary                          <span class=\"coMULTI\">/* return imaginary part          */</span><br/><span class=\"kw1\">expose</span> imaginary                            <span class=\"coMULTI\">/* access the state information   */</span><br/><span class=\"kw1\">return</span> imaginary                            <span class=\"coMULTI\">/* return the value               */</span><br/>\u00a0<br/>::method string                             <span class=\"coMULTI\">/* format as a string value       */</span><br/><span class=\"kw1\">expose</span> real imaginary                       <span class=\"coMULTI\">/* get the state info             */</span><br/><span class=\"kw1\">return</span> real<span class=\"st0\">'+'</span>imaginary<span class=\"st0\">'i'</span>                  <span class=\"coMULTI\">/* format as real+imaginaryi      */</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">IntegerQ /@ {E, 2.4, 7, 9/2}</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">isInteger<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">real</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"kw1\">real</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">imag</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"kw1\">imag</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>isInteger<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span> <span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">1.7</span> <span class=\"sy0\">+</span> <span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">10.0</span> <span class=\"sy0\">+</span> <span class=\"kw1\">I</span><span class=\"sy0\">,</span> <span class=\"nu2\">1.0</span> <span class=\"sy0\">-</span> <span class=\"nu2\">7.0</span> <span class=\"sy0\">*</span> <span class=\"kw1\">I</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is_int <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ref <span class=\"re0\">$number</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'Math::Complex'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">if</span> <span class=\"re0\">$number</span><span class=\"sy0\">-&gt;</span>Im <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><span class=\"sy0\">-&gt;</span>Re<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> int<span class=\"br0\">(</span><span class=\"re0\">$number</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.1</span><span class=\"sy0\">,</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 1<span class=\"sy0\">.</span>1e10<span class=\"sy0\">,</span> <span class=\"nu0\">3.0</span><span class=\"sy0\">-</span><span class=\"nu0\">0.0</span><span class=\"sy0\">*</span><span class=\"kw3\">i</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"kw3\">i</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.6</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">*</span><span class=\"kw3\">i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%20s is%s an integer<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>is_int<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" NOT\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 17, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">multi</span> is<span class=\"sy0\">-</span>int <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">narrow</span> <span class=\"sy0\">~~</span> Int <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> is<span class=\"sy0\">-</span>int <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$tolerance</span><span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">round</span> <span class=\"sy0\">-</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$tolerance</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> is<span class=\"sy0\">-</span>int <span class=\"br0\">(</span>Complex <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$tolerance</span><span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    is<span class=\"sy0\">-</span>int<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">re</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$tolerance</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">im</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$tolerance</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">25.000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">24.999999</span><span class=\"sy0\">,</span> <span class=\"nu0\">25.000100</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>2<span class=\"sy0\">.</span>1e120<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>5e<span class=\"sy0\">-</span>2<span class=\"sy0\">,</span> Inf<span class=\"sy0\">,</span> NaN<span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">+</span>0<span class=\"sy0\">.</span>0i<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">-</span>5i <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%-7s \u00a0%-9s \u00a0%-5s \u00a0%-5s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.^</span>name<span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span><br/>        is<span class=\"sy0\">-</span>int<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        is<span class=\"sy0\">-</span>int<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>tolerance<span class=\"sy0\">&lt;</span><span class=\"nu0\">0.00001</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">?integer(3.5+3.5) -- true<br/>?integer(3.5+3.4) -- false</pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(de int? (N)<br/>  (= N (* 1.0 (/ N 1.0)))) #returns T or NIL<br/>\u00a0<br/>(de integer? (N)<br/>  (and (= N (* 1.0 (/ N 1.0))) N)) #returns value of N or NIL<br/>\u00a0<br/>(scl 4) #-&gt; 4 # *Scl the global which holds <br/>1.0 #-&gt; 10000<br/>(int? 1.0) #-&gt; T<br/>(int? 1) #-&gt; NIL # 1 with a scale of 4 is same as 0.0001 which is not an Integer<br/>(int? -1.0) #-&gt; T<br/>(int? -0.0) #-&gt; T<br/>(int? \"RE\") #-&gt; \"RE\" -- Number expected<br/>(int? (*/ 2.0 1.0 3.0)) #-&gt; NIL # 6667 is not an integer of the scale of 4, use of */ because of the scale <br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 22, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Test<span class=\"sy0\">-</span>Integer <span class=\"br0\">(</span><span class=\"re0\">$Number</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    try<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Number</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Numerics.Complex<span class=\"br0\">]</span><span class=\"re0\">$Number</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$Number</span>.Real <span class=\"kw4\">-eq</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Number</span>.Real<span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"re0\">$Number</span>.Imaginary <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">return</span> <span class=\"re0\">$true</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">return</span> <span class=\"re0\">$false</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    catch<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"Parameter was not a number.\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> isint<span class=\"br0\">(</span>f<span class=\"br0\">)</span>: <br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">complex</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>.<span class=\"me1\">imag</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> <span class=\"kw2\">complex</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>.<span class=\"me1\">real</span>.<span class=\"me1\">is_integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>isint<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3.0</span>+0.0j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span>+4j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">5.6</span>+0j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"sy0\">,</span> <span class=\"kw2\">True</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"sy0\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Test cases</span><br/>...<br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"nu0\">25.000000</span><span class=\"br0\">)</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"nu0\">24.999999</span><span class=\"br0\">)</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"nu0\">25.000100</span><span class=\"br0\">)</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span>-<span class=\"nu0\">2.1e120</span><span class=\"br0\">)</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span>-<span class=\"nu0\">5e-2</span><span class=\"br0\">)</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"st0\">'nan'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"st0\">'inf'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">False</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>+0.0j<span class=\"br0\">)</span><br/><span class=\"kw2\">True</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> isint<span class=\"br0\">(</span><span class=\"nu0\">5</span>-5j<span class=\"br0\">)</span><br/><span class=\"kw2\">False</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 53, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require tests/eli-tester)<br/>\u00a0<br/>(test\u00a0;; known representations of integers:<br/>\u00a0;; - as exacts<br/> (integer? -1) =&gt; #t<br/> (integer?  0) =&gt; #t<br/> (integer?  1) =&gt; #t<br/> (integer?   1234879378539875943875937598379587539875498792424323432432343242423432432) =&gt; #t<br/> (integer?  -1234879378539875943875937598379587539875498792424323432432343242423432432) =&gt; #t<br/> (integer?  #xff) =&gt; #t<br/>\u00a0<br/>\u00a0;; - as inexacts<br/> (integer? -1.) =&gt; #t<br/> (integer?  0.) =&gt; #t<br/> (integer?  1.) =&gt; #t<br/> (integer?  1234879378539875943875937598379587539875498792424323432432343242423432432.) =&gt; #t<br/> (integer?  #xff.0) =&gt; #t<br/>\u00a0;; - but without a decimal fractional part<br/> (integer? -1.1) =&gt; #f<br/>\u00a0<br/>\u00a0;; - fractional representation<br/> (integer? -42/3) =&gt; #t<br/> (integer?   0/1) =&gt; #t<br/> (integer?  27/9) =&gt; #t<br/> (integer?  #xff/f) =&gt; #t<br/> (integer?  #b11111111/1111) =&gt; #t<br/>\u00a0;; - but obviously not fractions<br/> (integer? 5/7) =&gt; #f<br/>\u00a0<br/>\u00a0; - as scientific<br/> (integer?  1.23e2) =&gt; #t<br/> (integer?  1.23e120) =&gt; #t<br/>\u00a0; - but not with a small exponent<br/> (integer?  1.23e1) =&gt; #f<br/>\u00a0<br/>\u00a0; - complex representations with 0 imaginary component<br/>\u00a0;   \u2124 is a subset of the sets of rational and /real/ numbers and<br/> (integer? 1+0i) =&gt; #t<br/> (integer? (sqr 0+1i)) =&gt; #t<br/> (integer? 0+1i) =&gt; #f<br/>\u00a0<br/>\u00a0;; oh, there's so much else that isn't an integer:<br/> (integer? \"woo\") =&gt; #f<br/> (integer? \"100\") =&gt; #f<br/> (integer? (string-&gt;number \"22/11\")) =&gt; #t\u00a0; just cast it!<br/> (integer? +inf.0) =&gt; #f<br/> (integer? -inf.0) =&gt; #f<br/> (integer? +nan.0) =&gt; #f\u00a0; duh! it's not even a number!<br/> (integer? -NaN.0) =&gt; #f<br/> (integer? pi) =&gt; #f<br/> )<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 88, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 20.06.2014 Walter Pachl<br/>* 22.06.2014 WP add complex numbers such as 13-12j etc.<br/>* (using 13e-12 or so is not (yet) supported)<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"nu0\">3.14</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"nu0\">1.00000</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"nu0\">33</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"nu0\">999999999</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"nu0\">99999999999</span><br/><span class=\"kw1\">Call</span> test_integer 1e272<br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'AA'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'0'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'1.000-3i'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'1.000-3.3i'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'4j'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'2.00000000+0j'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'0j'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'333'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'-1-i'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'1+i'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'.00i'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'j'</span><br/><span class=\"kw1\">Call</span> test_integer <span class=\"st0\">'0003-00.0j'</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>test_integer:<br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> xx<br/><span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">1000</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> parse_number<span class=\"br0\">(</span>xx<span class=\"br0\">)</span> <span class=\"kw2\">With</span> x imag<br/><span class=\"kw1\">If</span> imag<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>xx,<span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"st0\">'is not an integer (imaginary part is not zero)'</span><br/>  <span class=\"kw1\">Return</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">'NUM'</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>xx,<span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"st0\">'is not an integer (not even a number)'</span><br/>  <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'W'</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">Say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>xx,<span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"st0\">'is an integer'</span><br/>    <span class=\"kw3\">Else</span><br/>      <span class=\"kw1\">Say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>xx,<span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"st0\">'isn'</span><span class=\"st0\">'t an integer'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span><br/>parse_number: <span class=\"kw1\">Procedure</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Upper</span> <span class=\"kw1\">Arg</span> x<br/>  x=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>x,<span class=\"st0\">'I'</span>,<span class=\"st0\">'J'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'I'</span>,x<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    pi=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>x,<span class=\"st0\">'+-'</span>,<span class=\"st0\">'M'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Select</span><br/>      <span class=\"kw3\">When</span> pi<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>        real=<span class=\"kw6\">left</span><span class=\"br0\">(</span>x,pi-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        imag=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,pi<span class=\"br0\">)</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">When</span> pi=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>        real=<span class=\"nu0\">0</span><br/>        imag=x<br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">Otherwise</span> <span class=\"coMULTI\">/*pi=1*/</span><span class=\"kw1\">Do</span><br/>        p2=<span class=\"kw6\">verify</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"st0\">'+-'</span>,<span class=\"st0\">'M'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> p2<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>          real=<span class=\"kw6\">left</span><span class=\"br0\">(</span>x,p2<span class=\"br0\">)</span><br/>          imag=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,p2+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>          real=<span class=\"nu0\">0</span><br/>          imag=x<br/>          <span class=\"kw3\">End</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    real=x<br/>    imag=<span class=\"st0\">'0I'</span><br/>    <span class=\"kw3\">End</span><br/>  pi=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>imag,<span class=\"st0\">'+-'</span>,<span class=\"st0\">'M'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> pi=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> imag imag_v <span class=\"st0\">'I'</span><br/>    imag_sign=<span class=\"st0\">'+'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span><br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> imag imag_sign <span class=\"nu0\">2</span> imag_v <span class=\"st0\">'I'</span><br/>  <span class=\"kw1\">If</span> imag_v=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>    imag_v=<span class=\"nu0\">1</span><br/>  imag=imag_sign<span class=\"sy0\">||</span>imag_v<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> real imag</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw4\">Numeric</span><br/>  <span class=\"kw1\">def</span> to_i?<br/>    <span class=\"kw2\">self</span> == <span class=\"kw2\">self</span>.<span class=\"me1\">to_i</span> <span class=\"kw1\">rescue</span> <span class=\"kw2\">false</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Demo</span><br/>ar = <span class=\"br0\">[</span><span class=\"nu0\">25.000000</span>, <span class=\"nu0\">24.999999</span>, <span class=\"nu0\">25.000100</span>, <span class=\"sy0\">-</span>2.1e120, <span class=\"sy0\">-</span>5e<span class=\"sy0\">-</span>2,  <span class=\"co1\"># Floats</span><br/>      <span class=\"kw3\">Float</span>::NAN, <span class=\"kw3\">Float</span>::INFINITY,                       <span class=\"co1\"># more Floats</span><br/>      2r, 2.5r,                                          <span class=\"co1\"># Rationals </span><br/>      <span class=\"nu0\">2</span><span class=\"sy0\">+</span>0i, <span class=\"nu0\">2</span><span class=\"sy0\">+</span>0.0i, <span class=\"nu0\">5</span><span class=\"sy0\">-</span>5i<span class=\"br0\">]</span>                                <span class=\"co1\"># Complexes</span><br/>\u00a0<br/>ar.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>num<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{num} integer? #{num.to_i?}\"</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre>sash[r7rs]&gt; (integer? 1)\n#t\nsash[r7rs]&gt; (integer? 2/3)\n#f\nsash[r7rs]&gt; (integer? 4/2)\n#t\nsash[r7rs]&gt; (integer? 1+3i)\n#f\nsash[r7rs]&gt; (integer? 1+0i)\n#t\nsash[r7rs]&gt; (exact? 3.0)\n#f\nsash[r7rs]&gt; (integer? 3.0)\n#t\nsash[r7rs]&gt; (integer? 3.5)\n#f\nsash[r7rs]&gt; (integer? 1.23e3)\n#t\nsash[r7rs]&gt; (integer? 1.23e1)\n#f\nsash[r7rs]&gt; (integer? 1e120)\n#t\n</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func is_int <span class=\"br0\">(</span>n, tolerance=<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   \u00a0!!<span class=\"br0\">(</span>abs<span class=\"br0\">(</span>n.<span class=\"me1\">real</span>.<span class=\"me1\">round</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">imag</span> <span class=\"sy0\">-</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= tolerance<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"nu0\">25.000000</span> <span class=\"nu0\">24.999999</span> <span class=\"nu0\">25.000100</span> <span class=\"sy0\">-</span>2.1e120 <span class=\"sy0\">-</span>5e<span class=\"sy0\">-</span>2 Inf NaN <span class=\"nu0\">5.0</span><span class=\"sy0\">+</span>0.0i <span class=\"nu0\">5</span><span class=\"sy0\">-</span>5i<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span><br/>    var n = Number<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-10s \u00a0%-8s \u00a0%-5s<span class=\"es0\">\\n</span>\"</span>, s,<br/>        is_int<span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<br/>        is_int<span class=\"br0\">(</span>n, tolerance: <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> isNumberIntegral <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> == entier<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># test with various kinds of numbers:</span><br/><span class=\"kw1\">foreach</span> x <span class=\"br0\">{</span>1e100 <span class=\"nu0\">3.14</span> <span class=\"nu0\">7</span> <span class=\"nu0\">1.000000000000001</span> <span class=\"nu0\">1000000000000000000000</span> -<span class=\"nu0\">22.7</span> -<span class=\"nu0\">123.000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%s:\u00a0%s\"</span> <span class=\"re0\">$x</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isNumberIntegral <span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"yes\"</span>\u00a0: <span class=\"st0\">\"no\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">T(1, 2.0,4.1,\"nope\",self).apply((1).isType)</pre>"}]}