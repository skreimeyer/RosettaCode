{"task": "Sum_of_squares", "blocks": [{"lang": "0815", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>{x{*%&lt;:d:~$&lt;:1:~&gt;&gt;&lt;:2:~&gt;&gt;&lt;:3:~&gt;&gt;&lt;:4:~&gt;&gt;&lt;:5:~&gt;&gt;&lt;:6:~&gt;&gt;&lt;:7:<br/>~&gt;&gt;&lt;:8:~&gt;&gt;&lt;:9:~&gt;&gt;&lt;:a:~&gt;&gt;&lt;:b:~&gt;&gt;&lt;:c:~&gt;&gt;&lt;:ffffffffffffffff:<br/>~&gt;{x{*&gt;}:8f:{x{*&amp;{=+&gt;{~&gt;&amp;=x&lt;:ffffffffffffffff:/#:8f:{{~%<br/>\u00a0</pre>"}, {"lang": "360 Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">*        Sum of squares            27/08/2015<br/>SUMOFSQR CSECT<br/>         USING  SUMOFSQR,R12<br/>         LR     R12,R15<br/>         LA     R7,A               a(1)<br/>         SR     R6,R6              sum=0<br/>         LA     R3,1               i=1<br/>LOOPI    CH     R3,N               do i=1 to hbound(a)<br/>         BH     ELOOPI<br/>         L      R5,0(R7)           a(i)<br/>         M      R4,0(R7)           a(i)*a(i)<br/>         AR     R6,R5              sum=sum+a(i)**2<br/>         LA     R7,4(R7)           next a<br/>         LA     R3,1(R3)           i=i+1<br/>         B      LOOPI              end i<br/>ELOOPI   XDECO  R6,PG+23           edit sum<br/>         XPRNT  PG,80<br/>         XR     R15,R15<br/>         BR     R14<br/>A        DC     F'1',F'2',F'3',F'4',F'5',F'6',F'7',F'8',F'9',F'10'<br/>PG       DC     CL80'The sum of squares is: '<br/>N        DC     AL2((PG-A)/4)<br/>         YREGS<br/>         END    SUMOFSQR</pre>"}, {"lang": "ACL2", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-of-squares <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>sum-of-squares <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> sumOfSquares<span class=\"br0\">(</span>vector:Vector.<span class=\"sy0\">&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> vector.<span class=\"kw3\">length</span>; i++<span class=\"br0\">)</span><br/>\t\tsum += vector<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>vector<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">return</span> sum;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Sum_Of_Squares <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Float_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Integer <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Float;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Sum_Of_Squares <span class=\"br0\">(</span>X\u00a0: Float_Array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      Sum\u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> X'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Sum\u00a0:= Sum + X <span class=\"br0\">(</span>I<span class=\"br0\">)</span> ** <span class=\"nu0\">2</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Sum;<br/>   <span class=\"kw1\">end</span> Sum_Of_Squares;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>Float'Image <span class=\"br0\">(</span>Sum_Of_Squares <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">0</span> =&gt; <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- Empty array</span><br/>   Put_Line <span class=\"br0\">(</span>Float'Image <span class=\"br0\">(</span>Sum_Of_Squares <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Sum_Of_Squares;</pre>"}, {"lang": "Aime", "loc": 28, "block": "<pre class=\"text highlighted_source\">real<br/>squaredsum(list l)<br/>{<br/>    integer i;<br/>    real s;<br/>\u00a0<br/>    s = 0;<br/>    i = -~l;<br/>    while (i) {<br/>        s += sq(l[i += 1]);<br/>    }<br/>\u00a0<br/>    s;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    list l;<br/>\u00a0<br/>    l = list(0, 1, 2, 3);<br/>\u00a0<br/>    o_form(\"~\\n\", squaredsum(l));<br/>    o_form(\"~\\n\", squaredsum(list()));<br/>    o_form(\"~\\n\", squaredsum(list(.5, -.5, 2)));<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 10, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> sum of squares <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span> <span class=\"kw27\">argv</span><span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">REAL</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> <span class=\"kw27\">argv</span> <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> <span class=\"kw27\">argv</span> <span class=\"kw2\">DO</span><br/>    sum <span class=\"sy1\">+:=</span> <span class=\"kw27\">argv</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">**</span>2<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sum<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span>sum of squares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">REAL</span><span class=\"br0\">(</span>3<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 9<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 20, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% procedure to sum the elements of a vector. As the procedure can't find\u00a0%<br/>   \u00a0% the bounds of the array for itself, we pass them in lb and ub         \u00a0%<br/>    real procedure sumSquares ( real    array vector ( * )<br/>                             \u00a0; integer value lb<br/>                             \u00a0; integer value ub<br/>                              )\u00a0;<br/>    begin<br/>        real sum;<br/>        sum\u00a0:= 0;<br/>        for i\u00a0:= lb until ub do sum\u00a0:= sum + ( vector( i ) * vector( i ) );<br/>        sum<br/>    end sumOfSquares\u00a0;<br/>\u00a0<br/>   \u00a0% test the sumSquares procedure                                         \u00a0%<br/>    real array numbers ( 1\u00a0:: 5 );<br/>    for i\u00a0:= 1 until 5 do numbers( i )\u00a0:= i;<br/>    r_format\u00a0:= \"A\"; r_w\u00a0:= 10; r_d\u00a0:= 1;\u00a0% set fixed point output          \u00a0%<br/>    write( sumSquares( numbers, 1, 5 ) );<br/>end.</pre>"}, {"lang": "Alore", "loc": 10, "block": "<pre class=\"text highlighted_source\">def sum_squares(a)<br/>   var sum = 0<br/>   for i in a<br/>      sum = sum + i**2<br/>   end<br/>   return sum<br/>end<br/>\u00a0<br/>WriteLn(sum_squares([3,1,4,1,5,9]))<br/>end</pre>"}, {"lang": "APL", "loc": 5, "block": "<pre class=\"text highlighted_source\">      square_sum\u2190{+/\u2375*2}<br/>      square_sum 1 2 3 4 5<br/>55<br/>      square_sum \u236c \u235dThe empty vector<br/>0</pre>"}, {"lang": "AppleScript", "loc": 85, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- TWO APPROACHES \u2013 SUM OVER MAP, AND DIRECT FOLD ----------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- sumOfSquares\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> sumOfSquares<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> squared<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            x <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    sum<span class=\"br0\">(</span>map<span class=\"br0\">(</span>squared, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> sumOfSquares<br/>\u00a0<br/><span class=\"co1\">-- sumOfSquares2\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> sumOfSquares2<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> plusSquare<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> x <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>plusSquare, <span class=\"nu0\">0</span>, xs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> sumOfSquares2<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>sumOfSquares<span class=\"br0\">(</span>xs<span class=\"br0\">)</span>, sumOfSquares2<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">-- {133.0, 133.0}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- sum\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> sum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> add<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>add, <span class=\"nu0\">0</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sum</pre>"}, {"lang": "Astro", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>\u00b2<span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\">list <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><br/> sum <span class=\"sy0\">+=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>% sum</pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"br0\">{</span>s=<span class=\"nu0\">0</span>;<span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;=</span><span class=\"kw3\">NF</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span>s<span class=\"sy3\">+</span>=<span class=\"re0\">$i</span><span class=\"sy3\">*</span><span class=\"re0\">$i</span>;<span class=\"kw5\">print</span> s<span class=\"br0\">}</span>'<br/><span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span><br/><span class=\"nu0\">133</span><br/>\u00a0<br/><span class=\"nu0\">0</span></pre>"}, {"lang": "BASIC", "loc": 5, "block": "<pre class=\"qbasic highlighted_source\">sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">FOR</span> I <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklbound.shtml\"><span class=\"kw3\">LBOUND</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> a<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">NEXT</span> I<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"The sum of squares is: \"</span> <span class=\"sy0\">+</span> sum</pre>"}, {"lang": "BBC BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">      DIM vector(5)<br/>      vector() = 1, 2, 3, 4, 5, 6<br/>\u00a0<br/>      PRINT \"Sum of squares = \"\u00a0; MOD(vector()) ^ 2</pre>"}, {"lang": "bc", "loc": 9, "block": "<pre class=\"text highlighted_source\">define s(a[], n) {<br/>    auto i, s<br/>\u00a0<br/>    for (i = 0; i &lt; n; i++) {<br/>        s += a[i] * a[i]<br/>    }<br/>\u00a0<br/>    return(s)<br/>}</pre>"}, {"lang": "Bracmat", "loc": 13, "block": "<pre class=\"text highlighted_source\">( ( sumOfSquares<br/>  =   sum component<br/>    .   0:?sum<br/>      &amp;   whl<br/>        ' (\u00a0!arg:%?component\u00a0?arg<br/>          &amp;\u00a0!component^2+!sum:?sum<br/>          )<br/>      &amp;\u00a0!sum<br/>  )<br/>&amp; out$(sumOfSquares$(3 4))<br/>&amp; out$(sumOfSquares$(3 4 i*5))<br/>&amp; out$(sumOfSquares$(a b c))<br/>);</pre>"}, {"lang": "Brat", "loc": 1, "block": "<pre class=\"text highlighted_source\">p 1.to(10).reduce 0 { res, n | res = res + n ^ 2 }  #Prints 385</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> squaredsum<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>l<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> e<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span> <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> e <span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> sum <span class=\"sy0\">+=</span> l<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">*</span>l<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> list<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu16\">3.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">9.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> squaredsum<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> squaredsum<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"coMULTI\">/* the same without using a real list as if it were 0-element long */</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> squaredsum<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> add_square<span class=\"br0\">(</span><span class=\"kw4\">double</span> prev_sum, <span class=\"kw4\">double</span> new_val<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> prev_sum <span class=\"sy2\">+</span> new_val<span class=\"sy2\">*</span>new_val<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> vec_add_squares<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu16\">0.0</span>, add_square<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// first, show that for empty vectors we indeed get 0</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span> <span class=\"co1\">// empty</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> vec_add_squares<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// now, use some values</span><br/>  <span class=\"kw4\">double</span> data<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu16\">1.5</span>, <span class=\"nu0\">42</span>, <span class=\"nu16\">0.1</span>, <span class=\"sy2\">-</span><span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  v.<span class=\"me1\">assign</span><span class=\"br0\">(</span>data, data<span class=\"sy2\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> vec_add_squares<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 17, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> SumOfSquares<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> list<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> list<span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>SumOfSquares<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">42</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 2854</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>SumOfSquares<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 55</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>SumOfSquares<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// 0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Chef", "loc": 23, "block": "<pre class=\"text highlighted_source\">Sum of squares.<br/>\u00a0<br/>First input is length of vector, then rest of input is vector.<br/>\u00a0<br/>Ingredients.<br/>1 g eggs<br/>0 g bacon<br/>\u00a0<br/>Method.<br/>Put bacon into the 1st mixing bowl.<br/>Take eggs from refrigerator.<br/>Square the eggs.<br/>Take bacon from refrigerator.<br/>Put bacon into 2nd mixing bowl.<br/>Combine bacon into 2nd mixing bowl.<br/>Fold bacon into 2nd mixing bowl.<br/>Add the bacon into the 1st mixing bowl.<br/>Ask the eggs until squared.<br/>Pour contents of the 1st mixing bowl into the 1st baking dish.<br/>\u00a0<br/>Serves 1.<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sum<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>squares <span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> #<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"sy0\">%</span>1 <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">%</span>2 <span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 4, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>sumOfSquares = <span class=\"br0\">(</span> list <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    list.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> sum<span class=\"sy0\">,</span> x <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span> x <span class=\"sy0\">*</span> x <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-of-squares <span class=\"br0\">(</span>vector<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for x across vector sum <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> sum_squares<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    a.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e<span class=\"sy0\">*</span>e<span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> sum_squares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co1\"># =&gt; 14</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\">T sumSquares<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    T sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>e<span class=\"sy0\">;</span> a<span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">+=</span> e <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">:</span> writeln<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"nu16\">3.1</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">9.0</span><span class=\"br0\">]</span>.<span class=\"me1\">sumSquares</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 11, "block": "<pre class=\"d highlighted_source\">sumOfSquares<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  list.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"br0\">(</span>var n<span class=\"br0\">)</span> <span class=\"br0\">{</span> sum<span class=\"sy0\">+=</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  print<span class=\"br0\">(</span>sumOfSquares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span>sumOfSquares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  print<span class=\"br0\">(</span>sumOfSquares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> SumOfSq<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TDblArray <span class=\"sy3\">=</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  A<span class=\"sy1\">:</span> TDblArray<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">SumOfSquares</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>            <span class=\"co1\">//  0.00</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">SumOfSquares</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"co1\">// 30.00</span><br/>  A<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">nil</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">SumOfSquares</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>             <span class=\"co1\">//  0.00</span><br/>  A<span class=\"sy1\">:</span><span class=\"sy3\">=</span> TDblArray<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"kw3\">SumOfSquares</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">6</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>             <span class=\"co1\">// 30.00</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 7, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> sumOfSquares<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> numbers <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> x<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    return sum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 33, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ta<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\ta <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"sy0\">&gt;&gt;</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>Square sum of &lt;&lt;1, 2, 3&gt;&gt;: \"</span> <span class=\"sy0\">+</span> sum_of_square <span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\ta <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;&lt;&gt;&gt;</span><br/>\t\t\tprint <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>Square sum of &lt;&lt;&gt;&gt;: \"</span> <span class=\"sy0\">+</span> sum_of_square <span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>\tsum_of_square <span class=\"br0\">(</span>a<span class=\"sy0\">:</span> ITERABLE <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> NATURAL<br/>\t\t\t<span class=\"co1\">-- sum of square of each items</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\tacross a <span class=\"kw2\">as</span> it <span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>it.<span class=\"me1\">item</span> <span class=\"sy0\">*</span> it.<span class=\"me1\">item</span><span class=\"br0\">)</span>.<span class=\"me1\">as_natural_32</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 12, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>SumOfSquares = <br/>    (:list)( list selectBy(:x)(x * x); summarize(Integer new) ).<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(SumOfSquares eval:(4, 8, 15, 16, 23, 42)).<br/>    console printLine(SumOfSquares eval:(1, 2, 3, 4, 5)).<br/>    console printLine(SumOfSquares eval(Array min)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Enum.reduce([3,1,4,1,5,9], 0, fn x,sum -&gt; sum + x*x end)<br/>133</pre>"}, {"lang": "Emacs Lisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun sum-square (ls)<br/>  (apply '+ (mapcar (lambda (k) (* k k) ) ls) ))<br/>\u00a0<br/>(insert (format \"%d\"(sum-square (number-sequence 0 3) )))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Sum</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span><span class=\"sy3\">*</span><span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Sum</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 8, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> SumOfSquares<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> v<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> sum<br/>    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">*</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Excel", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>=SUMSQ(A1:A10)<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">USE: math sequences\u00a0;<br/>\u00a0<br/>: sum-of-squares ( seq -- n ) [ sq ] map-sum\u00a0;<br/>\u00a0<br/>{ 1.0 2.0 4.0 8.0 16.0 } sum-of-squares</pre>"}, {"lang": "FALSE", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>0 3 1 4 1 5 9$*\\ [$0=~][$*+\\]#%. <br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class SumSquares<br/>{<br/>  static Int sumSquares (Int[] numbers)<br/>  {<br/>    Int sum\u00a0:= 0<br/>    numbers.each |n| { sum += n * n }<br/>    return sum<br/>  }<br/>\u00a0<br/>  public static Void main () <br/>  {<br/>    Int[] n\u00a0:= [,]<br/>    echo (\"Sum of squares of $n = ${sumSquares(n)}\")<br/>    n = [1,2,3,4,5]<br/>    echo (\"Sum of squares of $n = ${sumSquares(n)}\")<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fish", "loc": 4, "block": "<pre class=\"text highlighted_source\">v<br/>\\0&amp;<br/>&gt;l?!v:*&amp;+&amp;<br/>    &gt;&amp;n;</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: fsum**2 ( addr n -- f )<br/>  0e<br/>  dup 0= if 2drop exit then<br/>  floats bounds do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"107650\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> fdup f* f+<br/>  1 floats +loop\u00a0;<br/>\u00a0<br/>create test 3e f, 1e f, 4e f, 1e f, 5e f, 9e f,<br/>test 6 fsum**2 f.     \\ 133.</pre>"}, {"lang": "Fortran", "loc": 9, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>i, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/><span class=\"kw3\">real</span>, <span class=\"kw3\">pointer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span> <span class=\"sy0\">=</span>&gt; a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"co1\">! pointer to zero-length array</span><br/><span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"kw3\">result</span>, zresult<br/>\u00a0<br/><span class=\"kw3\">result</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>a<span class=\"sy0\">*</span>a<span class=\"br0\">)</span>    <span class=\"co1\">! Multiply array by itself to get squares</span><br/>\u00a0<br/><span class=\"kw3\">result</span> <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>a<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"co1\">! Use exponentiation operator to get squares</span><br/>\u00a0<br/>zresult <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>p<span class=\"sy0\">*</span>p<span class=\"br0\">)</span>   <span class=\"co1\">! P is zero-length; P*P is valid zero-length array expression; SUM(P*P) == 0.0 as expected</span></pre>"}, {"lang": "FreeBASIC", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> SumSquares<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> length = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> - <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> length = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> sum = <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    sum += a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> * a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"br0\">{</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">3.0</span>, -<span class=\"nu0\">1.0</span>, -<span class=\"nu0\">2.0</span>, -<span class=\"nu0\">3.0</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = SumSquares<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The sum of the squares is\"</span>; sum<br/><span class=\"kw1\">Print</span> <br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f = {|x| x^2}   // Anonymous function which squares its argument<br/>a = [1,2,3,5,7]<br/>println[sum[map[f,a], 0]]<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <br/><span class=\"br0\">[</span>|<span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span>|<span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a x <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "GAP", "loc": 9, "block": "<pre class=\"text highlighted_source\"># Just multiplying a vector by itself yields the sum of squares (it's an inner product)<br/># It's necessary to check for the empty vector though<br/>SumSq\u00a0:= function(v)<br/>\tif Size(v) = 0 then<br/>\t\treturn 0;<br/>\telse<br/>\t\treturn v*v;<br/>\tfi;<br/>end;</pre>"}, {"lang": "GEORGE", "loc": 6, "block": "<pre class=\"text highlighted_source\">read (n) print\u00a0;<br/>0<br/>1, n rep (i)<br/>   read print dup mult +<br/>   ]<br/>print</pre>"}, {"lang": "Go", "loc": 13, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> v <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float32</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> sum <span class=\"kw4\">float32</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> v <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">+=</span> x <span class=\"sy3\">*</span> x<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>sum<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 3, "block": "<pre class=\"text highlighted_source\">{0\\{.*+}%}:sqsum;<br/># usage example<br/>[1 2 3]sqsum puts</pre>"}, {"lang": "Groovy", "loc": 10, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> array <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\">// square via multiplication</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sumSq <span class=\"sy0\">=</span> array.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> sumSq<br/>\u00a0<br/><span class=\"co1\">// square via exponentiation</span><br/>sumSq <span class=\"sy0\">=</span> array.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> sumSq</pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>      <span class=\"co1\">-- ver 1</span><br/>  <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span>     <span class=\"co1\">-- ver 2</span><br/>  <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"co1\">-- ver 3</span><br/>  <span class=\"br0\">]</span> <span class=\"sy0\">&lt;*&gt;</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">print,total<span class=\"br0\">(</span>array<span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> lst<br/>   lst <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   <span class=\"co1\">#Construct a simple list and pass it to getsum</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>lst<span class=\"sy1\">,</span><span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">\\</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span>getsum<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> getsum<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> total<br/>   total <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">every</span> total <span class=\"sy1\">+:=</span> <span class=\"sy1\">!</span>lst <span class=\"sy1\">^</span> <span class=\"nu0\">2</span><br/>   <span class=\"kw1\">return</span> total<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Inform 7", "loc": 16, "block": "<pre class=\"text highlighted_source\">Sum Of Squares is a room.<br/>\u00a0<br/>To decide which number is the sum of (N - number) and (M - number) (this is summing):<br/>\tdecide on N + M.<br/>\u00a0<br/>To decide which number is (N - number) squared (this is squaring):<br/>\tdecide on N * N.<br/>\u00a0<br/>To decide which number is the sum of squares of (L - list of numbers):<br/>\tdecide on the summing reduction of squaring applied to L.<br/>\u00a0<br/>When play begins:<br/>\tsay the sum of squares of {};<br/>\tsay line break;<br/>\tsay the sum of squares of {1, 2, 3};<br/>\tend the story.</pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">map</span><span class=\"br0\">(</span>squared<span class=\"br0\">)</span> sum</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">ss=: +/ @: *:</pre>"}, {"lang": "Java", "loc": 11, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> SumSquares<br/><span class=\"br0\">{</span><br/> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">double</span> sum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nums = <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i\u00a0: nums<span class=\"br0\">)</span><br/>   sum += i <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span><br/>  <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"The sum of the squares is: \"</span> + sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 11, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> sumsq<span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> i<span class=\"sy0\">,</span> iLen<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> iLen <span class=\"sy0\">=</span> array.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> iLen<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">+=</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>alert<span class=\"br0\">(</span>sumsq<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// 55</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\"># ss for an input array:<br/>def ss: map(.*.) | add;<br/>\u00a0<br/># ss for a stream, S, without creating an intermediate array:<br/>def ss(S): reduce S as $x (0; . + ($x * $x) );</pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">julia&gt; sum([1,2,3,4,5].^2)<br/>55<br/>\u00a0<br/>julia&gt; sum([x^2 for x in [1,2,3,4,5]])<br/>55<br/>\u00a0<br/>julia&gt; mapreduce(x-&gt;x^2,+,[1:5])<br/>55<br/>\u00a0<br/>julia&gt; sum([x^2 for x in []])<br/>0</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  ss: {+/x*x}<br/>  ss 1 2 3 4 5<br/>55<br/>  <a class=\"__cf_email__\" data-cfemail=\"afdcdcef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>!0<br/>0<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vector <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3.1</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>vector.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vector2 <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// empty vector</span><br/>    println<span class=\"br0\">(</span>vector2.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1 2 3 4 5] 2 ** '+ reduce .</pre>"}, {"lang": "Lasso", "loc": 12, "block": "<pre class=\"text highlighted_source\">define sumofsquares(values::array) =&gt; {<br/>\u00a0<br/>\tlocal(sum = 0)<br/>\u00a0<br/>\twith value in #values do {<br/>\t\t#sum += #value * #value<br/>\t}<br/>\u00a0<br/>\treturn #sum<br/>}<br/>\u00a0<br/>sumofsquares(array(1,2,3,4,5))</pre>"}, {"lang": "LFE", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-sq <span class=\"br0\">(</span>nums<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lists<span class=\"sy0\">:</span><span class=\"me1\">foldl</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x acc<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>+ acc <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 27, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'   [RC] Sum of Squares</span><br/>\u00a0<br/>    SourceList$     <span class=\"sy0\">=</span><span class=\"st0\">\"3 1 4 1 5 9\"</span><br/>    <span class=\"co1\">'SourceList$     =\"\"</span><br/>\u00a0<br/>    <span class=\"co1\">'   If saved as an array we'd have to have a flag for last data.</span><br/>    <span class=\"co1\">'   LB has the very useful word$() to read from delimited strings.</span><br/>    <span class=\"co1\">'   The default delimiter is a space character, \" \".</span><br/>\u00a0<br/>    SumOfSquares    <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    n               <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">data</span>$           <span class=\"sy0\">=</span><span class=\"st0\">\"666\"</span>  <span class=\"co1\">'   temporary dummy to enter the loop.</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">data</span>$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span>                                <span class=\"co1\">'   we loop until no data left.</span><br/>        <span class=\"kw1\">data</span>$           <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> SourceList$<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">'   first data, as a string</span><br/>        NewVal          <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw1\">data</span>$<span class=\"br0\">)</span>                <span class=\"co1\">'   convert string to number</span><br/>        SumOfSquares    <span class=\"sy0\">=</span>SumOfSquares <span class=\"sy0\">+</span>NewVal^<span class=\"nu0\">2</span>     <span class=\"co1\">'   add to existing sum of squares</span><br/>        n <span class=\"sy0\">=</span>n <span class=\"sy0\">+</span><span class=\"nu0\">1</span>                                     <span class=\"co1\">'   increment number of data items found</span><br/>    <span class=\"kw1\">wend</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span>n <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Supplied data was \"</span>;         SourceList$<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"This contained \"</span>;            n; <span class=\"st0\">\" numbers.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Sum of squares is \"</span>;         SumOfSquares<br/>\u00a0<br/>    <span class=\"kw1\">end</span></pre>"}, {"lang": "LiveCode", "loc": 5, "block": "<pre class=\"text highlighted_source\">put \"1,2,3,4,5\" into nums<br/>repeat for each item n in nums<br/>    add (n * n) to m<br/>end repeat<br/>put m  // 55</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">print apply \"sum map [? *\u00a0?] [1 2 3 4 5] \u00a0; 55</pre>"}, {"lang": "Logtalk", "loc": 7, "block": "<pre class=\"logtalk highlighted_source\">sum(<span class=\"re0\">List</span>, <span class=\"re0\">Sum</span>) <span class=\"sy2\">:-</span><br/>    sum(<span class=\"re0\">List</span>, <span class=\"nu0\">0</span>, <span class=\"re0\">Sum</span>).<br/>\u00a0<br/>sum([], <span class=\"re0\">Sum</span>, <span class=\"re0\">Sum</span>).<br/>sum([<span class=\"re0\">X</span>| <span class=\"re0\">Xs</span>], <span class=\"re0\">Acc</span>, <span class=\"re0\">Sum</span>) <span class=\"sy2\">:-</span><br/>    <span class=\"re0\">Acc2</span> <span class=\"kw5\">is</span> <span class=\"re0\">Acc</span> <span class=\"sy1\">+</span> <span class=\"re0\">X</span>,<br/>    sum(<span class=\"re0\">Xs</span>, <span class=\"re0\">Acc2</span>, <span class=\"re0\">Sum</span>).</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> squaresum<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> a <span class=\"kw2\">and</span> a<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> squaresum<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> squaresumt<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> squaresum<span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>squaresumt<span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Dim A() 'make an array with zero items<br/>\u00a0<br/>A=(,) 'make a pointer to array with zero items<br/>\u00a0<br/>A=(1,) 'make a pointer to array with one item<br/>\u00a0<br/>A()=A 'make a copy of array pointed by A to A()<br/>\u00a0<br/>A=A() 'make A a pointer for A()<br/>\u00a0<br/>Dim A(10)=1 'redim A() and pass 1 to each item<br/>\u00a0<br/>k=lambda m=1-&gt;{=m:m++}  ' a lambda function with a closure m<br/>\u00a0<br/>Dim B(10)&lt;&lt;k()    'fill B() from 1 to 10<br/>\u00a0<br/>A()=B() ' copy B() to A(), A() object stay as is, but new items loaded, so pointer A points to A.<br/>\u00a0<br/>A+=100 ' add 100 to each element of A()<br/>\u00a0<br/>A(0)+=100 ' add 100 to first element<br/>\u00a0<br/>A()=Cons(A,A)<br/>\u00a0<br/>Now A and A() prints a 20 item array (Cons() add a list of arrays)<br/>Print A   ' or Print A() print the same<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>F\u00a0:= V -&gt; add(v^2, v in V):<br/>F(&lt;1,2,3,4,5&gt;);<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">SumOfSquares[x_]:=Total[x^2]<br/>SumOfSquares[{1,2,3,4,5}]</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>squaredSum<span class=\"br0\">]</span> = sumofsquares<span class=\"br0\">(</span>inputVector<span class=\"br0\">)</span><br/>   squaredSum = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span> inputVector.^<span class=\"nu0\">2</span> <span class=\"br0\">)</span>;</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">nums\u00a0: [3,1,4,1,5,9];<br/>sum(nums[i]^2,i,1,length(nums));</pre>"}, {"lang": "Mercury", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module sum_of_squares.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int, list.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    io.write_int(sum_of_squares([3, 1, 4, 1, 5, 9]),\u00a0!IO),<br/>    io.nl(!IO).<br/>\u00a0<br/>:- func sum_of_squares(list(int)) = int.<br/>\u00a0<br/>sum_of_squares(Ns) = list.foldl((func(N, Acc) = Acc + N * N), Ns, 0).<br/>\u00a0</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">x^2\t+\t\u0421/\u041f\t\u0411\u041f\t00</pre>"}, {"lang": "Modula-3", "loc": 19, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> SumSquares <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> RealArray <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> SumOfSquares<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> RealArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span> sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> sum;<br/>  <span class=\"kw1\">END</span> SumOfSquares;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">Real</span><span class=\"br0\">(</span>SumOfSquares<span class=\"br0\">(</span>RealArray<span class=\"br0\">{</span><span class=\"nu0\">3.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9.0</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> SumSquares.</pre>"}, {"lang": "MOO", "loc": 16, "block": "<pre class=\"text highlighted_source\">@verb #100:sum_squares this none this rd<br/>@program #100:sum_squares<br/>sum = 0;<br/>list = args[1];<br/>for i in (list)<br/>  sum = sum + (i^2);<br/>endfor<br/>player:tell(toliteral(list), \" =&gt; \", sum);<br/>.<br/>\u00a0<br/>{{out}}<br/>;#100:sum_squares({3,1,4,1,5,9})<br/>{3, 1, 4, 1, 5, 9} =&gt; 133<br/>;#100:sum_squares({})<br/>{} =&gt; 0<br/>\u00a0</pre>"}, {"lang": "MUMPS", "loc": 6, "block": "<pre class=\"text highlighted_source\">SUMSQUARE(X)<br/>\u00a0;X is assumed to be a list of numbers separated by \"^\"<br/> NEW RESULT,I<br/> SET RESULT=0,I=1<br/> FOR  QUIT:(I&gt;$LENGTH(X,\"^\"))  SET RESULT=($PIECE(X,\"^\",I)*$PIECE(X,\"^\",I))+RESULT,I=I+1<br/> QUIT RESULT</pre>"}, {"lang": "Nemerle", "loc": 5, "block": "<pre class=\"text highlighted_source\">SS(x\u00a0: list[double])\u00a0: double<br/>{<br/>    |[] =&gt; 0.0<br/>    |_  =&gt; x.Map(fun (x) {x*x}).FoldLeft(0.0, _+_)<br/>}</pre>"}, {"lang": "NetRexx", "loc": 17, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/*NetRexx *************************************************************<br/>* program to sum the squares of a vector of fifteen numbers.<br/>* translated from REXX<br/>* 14.05.2013 Walter Pachl<br/>**********************************************************************/</span><br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">50</span>                   <span class=\"coMULTI\">/*allow 50-digit # (default is 9)*/</span><br/>v=<span class=\"st0\">'-100 9 8 7 6 0 3 4 5 2 1 .5 10 11 12'</span> <span class=\"coMULTI\">/* vector with some #s.     */</span><br/>n=v.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>x=<span class=\"st0\">''</span><br/>sum=<span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/*initialize   SUM   to zero.    */</span><br/>                                    <span class=\"coMULTI\">/*if vector is empty, sum = zero.*/</span><br/><span class=\"kw1\">loop</span> Until x=<span class=\"st0\">''</span>                     <span class=\"coMULTI\">/*loop until list is exhausted   */</span><br/>  <span class=\"kw1\">Parse</span> v x v                       <span class=\"coMULTI\">/* pick next number              */</span><br/>  <span class=\"kw1\">If</span> x<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span>                      <span class=\"coMULTI\">/* there is a number             */</span><br/>    sum=sum + x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                  <span class=\"coMULTI\">/*add its square to the sum.     */</span><br/>  <span class=\"kw3\">end</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"The sum of\"</span> n <span class=\"st0\">\"elements for the V vector is:\"</span> sum</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#apply\"><span class=\"kw1\">apply</span></a> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> <span class=\"br0\">(</span>fn<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">-&gt;</span> <span class=\"nu0\">133</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#apply\"><span class=\"kw1\">apply</span></a> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#map\"><span class=\"kw1\">map</span></a> <span class=\"br0\">(</span>fn<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import math, sequtils<br/>\u00a0<br/>echo sum(map(@[1,2,3,4,5], proc (x: int): int = x*x))</pre>"}, {"lang": "Objeck", "loc": 18, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Sum <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> SquaredSum<span class=\"br0\">(</span>values <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>       sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         sum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>       <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>       SquaredSum<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9.0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> sum a <span class=\"sy0\">-&gt;</span> sum <span class=\"sy0\">+</span> a <span class=\"sy0\">*</span> a<span class=\"br0\">)</span> <span class=\"nu0\">0</span> ints</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">#sq [1, 1.2, 3, 4.5 ] map sum</pre>"}, {"lang": "Octave", "loc": 2, "block": "<pre class=\"octave highlighted_source\">a <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/sumsq.html\"><span class=\"kw5\">sumsq</span></a> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/sum.html\"><span class=\"kw5\">sum</span></a><span class=\"br0\">(</span>a <span class=\"sy2\">.^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Order", "loc": 6, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span>8to_lit<span class=\"br0\">(</span><br/>  8seq_fold<span class=\"br0\">(</span>8plus<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            8seq_map<span class=\"br0\">(</span>8fn<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8times<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 8seq<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 8, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SumOfSquares</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> Xs sum:S <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span>S X<span class=\"sy0\">*</span>X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>SumOfSquares <span class=\"br0\">[</span>3 1 4 1 5 9<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">ss<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 19, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Example45<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Program to demonstrate the SumOfSquares function. }</span><br/>\u00a0<br/><span class=\"kw1\">Uses</span> math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Var</span><br/>  I <span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>  ExArray <span class=\"sy1\">:</span> <span class=\"kw4\">Array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">100</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> Float<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Randomize<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> I<span class=\"sy1\">:</span><span class=\"sy3\">=</span>low<span class=\"br0\">(</span>ExArray<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>ExArray<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    ExArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span>Random<span class=\"sy3\">-</span>Random<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Max            \u00a0: '</span><span class=\"sy1\">,</span>MaxValue<span class=\"br0\">(</span>ExArray<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Min            \u00a0: '</span><span class=\"sy1\">,</span>MinValue<span class=\"br0\">(</span>ExArray<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Sum squares    \u00a0: '</span><span class=\"sy1\">,</span>SumOfSquares<span class=\"br0\">(</span>ExArray<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Sum squares (b)\u00a0: '</span><span class=\"sy1\">,</span>SumOfSquares<span class=\"br0\">(</span><span class=\"sy2\">@</span>ExArray<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> sum_of_squares <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"kw1\">foreach</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> sum_of_squares<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"sy0\">*</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?sum(sq_power(tagset(10),2))    -- prints 385</pre>"}, {"lang": "PHP", "loc": 7, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">function</span> sum_squares<span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a> <span class=\"re0\">$args</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/array_reduce\"><span class=\"kw3\">array_reduce</span></a><span class=\"br0\">(</span><br/>        <span class=\"re0\">$args</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/create_function\"><span class=\"kw3\">create_function</span></a><span class=\"br0\">(</span><span class=\"st_h\">'$x, $y'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'return $x+$y*$y;'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">: (sum '((N) (* N N)) (3 1 4 1 5 9))<br/>-&gt; 133<br/>: (sum '((N) (* N N)) ())<br/>-&gt; 0</pre>"}, {"lang": "PL/I", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare A(10) float initial (10, 9, 8, 7, 6, 5, 4, 3, 2, 1);<br/>\u00a0<br/>put (sum(A**2));<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 9, "block": "<pre class=\"text highlighted_source\">define sum_squares(v);<br/>    lvars s = 0, j;<br/>    for j from 1 to length(v) do<br/>        s + v(j)*v(j) -&gt; s;<br/>    endfor;<br/>    s;<br/>enddefine;<br/>\u00a0<br/>sum_squares({1 2 3 4 5}) =&gt;</pre>"}, {"lang": "PostScript", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/sqrsum{<br/>/x exch def<br/>/sum 0 def<br/>/i 0 def<br/>x length 0 eq<br/>{}<br/>{<br/>x length{<br/>/sum sum x i get 2 exp add def<br/>/i i 1 add def<br/>}repeat<br/>}ifelse<br/>sum ==<br/>}def<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 10, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>SquareSum <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span>.Length <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> `<br/>             <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">*</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span> `<br/>             <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Sum</span><br/>        <span class=\"kw3\">return</span> <span class=\"re0\">$x</span>.Sum<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 6, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> SumOfSquares<span class=\"br0\">(</span>List base<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> base<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Sum <span class=\"sy0\">+</span> base<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>base<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Sum<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw2\">sum</span><span class=\"br0\">(</span>x*x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre>   sum([],0).\n   sum([H|T],S)\u00a0:- sum(T, S1), S is S1 + (H * H).\n</pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">arr &lt;- c(1,2,3,4,5)<br/>result &lt;- sum(arr^2)</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(for/sum ([x #(3 1 4 1 5 9)]) (* x x))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 4, "block": "<pre class=\"text highlighted_source\">define sumOfSqrs use $lst<br/>   0 $lst each dup * +<br/>\u00a0<br/>[ 1 2 3 4] sumOfSqrs \"Sum of squares:\u00a0%d\\n\" print</pre>"}, {"lang": "REXX", "loc": 10, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  sums  the squares of the numbers  in a (numeric)  vector of 15 numbers. */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100</span>                               <span class=\"coMULTI\">/*allow 100\u2500digit numbers; default is 9*/</span><br/>v= -<span class=\"nu0\">100</span> <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">6</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"sy0\">.</span>5 <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span>          <span class=\"coMULTI\">/*define a vector with fifteen numbers.*/</span><br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>                                       <span class=\"coMULTI\">/*obtain number of words in the V list.*/</span><br/>$= <span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*initialize the  sum  ($)  to zero.   */</span><br/>       <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                             <span class=\"coMULTI\">/*process each number in the V vector. */</span><br/>       $=$ + <span class=\"kw6\">word</span><span class=\"br0\">(</span>v,k<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>                        <span class=\"coMULTI\">/*add a squared element to the ($) sum.*/</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                               <span class=\"coMULTI\">/* [\u2191]  if vector is empty, then sum=0.*/</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The sum of '</span>      #      <span class=\"st0\">\" squared elements for the  V  vector is: \"</span>   $</pre>"}, {"lang": "Ring", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aList = [1,2,3,4,5]<br/>see sumOfSquares(aList)<br/>\u00a0<br/>func sumOfSquares sos<br/>sumOfSquares = 0<br/>for i=1 to len(sos)<br/>    sumOfSquares = sumOfSquares + pow(sos[i],2)<br/>next<br/>return sumOfSquares<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>sum,x<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> x<span class=\"sy0\">*</span>x<span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">list$ = \"1,2,3,4,5\"<br/>print sumOfSquares(list$)<br/>\u00a0<br/>FUNCTION sumOfSquares(sos$)<br/>  while word$(sos$,i+1,\",\") &lt;&gt; \"\"<br/>    i = i + 1<br/>    sumOfSquares = sumOfSquares + val(word$(sos$,i,\",\"))^2<br/>  wend<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">fn sq_sum(v: &amp;[f64]) -&gt; f64 {<br/>    v.iter().fold(0., |sum, &amp;num| sum + num*num)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let v = vec![3.0, 1.0, 4.0, 1.0, 5.5, 9.7];<br/>    println!(\"{}\", sq_sum(&amp;v));<br/>\u00a0<br/>    let u\u00a0: Vec&lt;f64&gt; = vec![];<br/>    println!(\"{}\", sq_sum(&amp;u));<br/>}</pre>"}, {"lang": "Sather", "loc": 16, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>\u00a0<br/>  sqsum(s, e:FLT):FLT is<br/>    return s + e*e;<br/>  end;<br/>\u00a0<br/>  sum_of_squares(v\u00a0:ARRAY{FLT}):FLT is<br/>    return (#ARRAY{FLT}(|0.0|).append(v)).reduce(bind(sqsum(_,_)));<br/>  end;<br/>\u00a0<br/>  main is<br/>    v\u00a0:ARRAY{FLT}\u00a0:= |3.0, 1.0, 4.0, 1.0, 5.0, 9.0|;<br/>    #OUT + sum_of_squares(v) + \"\\n\";<br/>  end;<br/>\u00a0<br/>end;</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sum<span class=\"sy0\">_</span>of<span class=\"sy0\">_</span>squares<span class=\"br0\">(</span>xs<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> xs.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">(</span>a,x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a + x<span class=\"sy0\">*</span>x<span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>squares <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">*</span> <span class=\"kw1\">l</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 22, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const array float: list1 is [] (3.0, 1.0, 4.0, 1.0, 5.0, 9.0);<br/>const array float: list2 is 0 times 0.0;<br/>\u00a0<br/>const func float: squaredSum (in array float: floatList) is func<br/>  result<br/>    var float: sum is 0.0;<br/>  local<br/>    var float: number is 0.0;<br/>  begin<br/>    for number range floatList do<br/>      sum +:= number ** 2;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(squaredSum(list1));<br/>    writeln(squaredSum(list2));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">func sum_of_squares<span class=\"br0\">(</span>vector<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var sum = <span class=\"nu0\">0</span>;<br/>    vector.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span>= n<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span>;<br/>    <span class=\"kw2\">return</span> sum;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say sum_of_squares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;         <span class=\"co1\"># 0</span><br/>say sum_of_squares<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;    <span class=\"co1\"># 14</span></pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">{1. 2. 3} reduce: [|:x\u00a0:y| y squared + x].<br/>{} reduce: [|:x\u00a0:y| y squared + x] ifEmpty: [0].</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">3</span> 1 4 1 5 9<span class=\"br0\">)</span></span> inject: <span class=\"re5\">0</span> into: <span class=\"br0\">[</span>:<span class=\"re5\">sum</span>\u00a0:<span class=\"re5\">aNumber</span> | sum + <span class=\"re5\">aNumber</span> squared<span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 9, "block": "<pre class=\"text highlighted_source\">        define('ssq(a)i')\u00a0:(ssq_end)<br/>ssq     i = i + 1; ssq = ssq + (a&lt;i&gt; * a&lt;i&gt;)\u00a0:s(sumsq)f(return)<br/>ssq_end<br/>\u00a0<br/>*       # Fill array, test and display<br/>        str = '1 2 3 5 7 11 13 17 19 23'; a = array(10)<br/>loop    i = i + 1; str len(p) span('0123456789') . a&lt;i&gt; @p\u00a0:s(loop)<br/>        output = str ' -&gt; ' sumsq(a)<br/>end</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">foldl (fn (a, sum) =&gt; sum + a * a) 0 ints</pre>"}, {"lang": "SQL", "loc": 1, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">SELECT</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> vector</pre>"}, {"lang": "Stata", "loc": 9, "block": "<pre class=\"text highlighted_source\">a = 1..100<br/>sum(a:^2)<br/>  338350<br/>\u00a0<br/>a = J(0, 1, .)<br/>length(a)<br/>  0<br/>sum(a:^2)<br/>  0</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func sumSq(s: [Int]) -&gt; Int {<br/>  return s.map{$0 * $0}.reduce(0, +)<br/>}</pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> sumOfSquares <span class=\"br0\">{</span>nums<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> num <span class=\"re0\">$nums</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"re0\">$num</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span><br/>sumOfSquares <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 55</span><br/>sumOfSquares <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; 0</span></pre>"}, {"lang": "Trith", "loc": 1, "block": "<pre class=\"text highlighted_source\">[3 1 4 1 5 9] 0 [dup * +] foldl</pre>"}, {"lang": "TUSCRIPT", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>array=\"3'1'4'1'5'9\",sum=0<br/>LOOP a=array<br/>sum=sum+(a*a)<br/>ENDLOOP<br/>PRINT sum<br/>\u00a0</pre>"}, {"lang": "UnixPipes", "loc": 12, "block": "<pre class=\"bash highlighted_source\">folder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">(</span><span class=\"kw2\">read</span> B; <span class=\"re2\">res</span>=$<span class=\"br0\">(</span> <span class=\"kw2\">expr</span> <span class=\"re4\">$1</span> \\<span class=\"sy0\">*</span> <span class=\"re4\">$1</span> <span class=\"br0\">)</span>\u00a0; <span class=\"kw3\">test</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$B</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">expr</span> <span class=\"re1\">$res</span> + <span class=\"re1\">$B</span> <span class=\"sy0\">||</span> <span class=\"kw3\">echo</span> <span class=\"re1\">$res</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fold<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">while</span> <span class=\"kw2\">read</span> a\u00a0; <span class=\"kw1\">do</span><br/>       fold <span class=\"sy0\">|</span> folder <span class=\"re1\">$a</span><br/>   <span class=\"kw1\">done</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw3\">echo</span> <span class=\"nu0\">3</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">1</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">4</span>;<span class=\"kw3\">echo</span> <span class=\"nu0\">1</span>;<span class=\"kw3\">echo</span> <span class=\"nu0\">5</span>; <span class=\"kw3\">echo</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> fold</pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>ssq = sum:-0+ product*iip<br/>\u00a0<br/>#cast\u00a0%n<br/>\u00a0<br/>main = ssq &lt;21,12,77,0,94,23,96,93,72,72,79,24,8,50,9,93&gt;</pre>"}, {"lang": "V", "loc": 5, "block": "<pre class=\"text highlighted_source\">[sumsq [dup *] map 0 [+] fold].<br/>\u00a0<br/>[] sumsq<br/>=0<br/>[1 2 3] sumsq</pre>"}, {"lang": "VBScript", "loc": 13, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> sum_of_squares(arr)<br/>\t<span class=\"kw3\">If</span> <span class=\"kw4\">UBound</span>(arr) = -1 <span class=\"kw3\">Then</span><br/>\t\tsum_of_squares = 0<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\tsum_of_squares = sum_of_squares + (arr(i)^2)<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.WriteLine sum_of_squares(Array(1,2,3,4,5))<br/>WScript.StdOut.WriteLine sum_of_squares(Array())<br/>\u00a0</pre>"}, {"lang": "Visual Basic .NET", "loc": 38, "block": "<pre class=\"vbnet highlighted_source\">\u00a0<br/> <span class=\"kw1\">Private</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">Function</span> sumsq<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> i <span class=\"kw1\">As</span> ICollection<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">If</span> i <span class=\"kw1\">Is</span> <span class=\"kw1\">Nothing</span> <span class=\"kw1\">OrElse</span> i<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Return</span> i<span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"kw1\">Select</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw1\">Function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/> <span class=\"kw1\">Private</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> a <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/>        <span class=\"co1\">' 55</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sumsq<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> K <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">16</span><br/>               Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"SumOfSquares({0}) = {1}\"</span>, K, SumOfSquares<span class=\"br0\">(</span>K<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/> <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/> <span class=\"kw1\">Function</span> SumOfSquares<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> Max <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> Square <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">Dim</span> Add <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Dim</span> Sum <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">For</span> J <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> Max <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            Square <span class=\"sy0\">+=</span> Add<br/>            Add <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><br/>            Sum <span class=\"sy0\">+=</span> Square<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Return</span> Sum<br/> <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/> <span class=\"kw1\">Function</span> SumOfSquaresByMult<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> Max <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> Sum <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">For</span> J <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> Max<br/>            Sum <span class=\"sy0\">+=</span> J <span class=\"sy0\">*</span> J<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Return</span> Sum<br/> <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@sum\u00a0!*^@sq [3 1 4 1 5 9]\u00a0; returns 133</pre>"}, {"lang": "XLISP", "loc": 14, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-of-squares <span class=\"br0\">(</span>vec<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">defun</span> sumsq <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> xs<span class=\"br0\">)</span><br/>            <span class=\"nu0\">0</span><br/>            <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> xs<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sumsq <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sumsq <span class=\"br0\">(</span>vector-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> vec<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define first-seven-primes #<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define zero-length-vector #<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> `<span class=\"br0\">(</span>the sum of the squares of the first seven prime numbers is <span class=\"sy0\">,</span><span class=\"br0\">(</span>sum-of-squares first-seven-primes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> `<span class=\"br0\">(</span>the sum of the squares of no numbers at all is <span class=\"sy0\">,</span><span class=\"br0\">(</span>sum-of-squares zero-length-vector<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>\u00a0<br/>func SumSq(V, L);<br/>int  V, L;<br/>int  S, I;<br/>[S:= 0;<br/>for I:= 0 to L-1 do S:= S+sq(V(I));<br/>return S;<br/>]; \\SumSq<br/>\u00a0<br/>[IntOut(0, SumSq([1,2,3,4,5,6,7,8,9,10], 10));  CrLf(0);<br/> IntOut(0, SumSq([0], 0));  CrLf(0);    \\zero-length vector \"[]\" doesn't compile<br/>]</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">T().reduce(fcn(p,n){ p + n*n },0)               //--&gt;0<br/>T(3,1,4,1,5,9).reduce(fcn(p,n){ p + n*n },0.0) //--&gt;133.0<br/>[1..5].reduce(fcn(p,n){ p + n*n },0)          //--&gt;55</pre>"}]}