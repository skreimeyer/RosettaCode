{"task": "Spiral_matrix", "blocks": [{"lang": "360 Assembly", "loc": 120, "block": "<pre class=\"text highlighted_source\">SPIRALM  CSECT<br/>         USING  SPIRALM,R13<br/>SAVEAREA B      STM-SAVEAREA(R15)<br/>         DC     17F'0'<br/>         DC     CL8'SPIRALM'<br/>STM      STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15<br/>*        ----   CODE<br/>         LA     R0,0<br/>         LA     R1,1<br/>         LH     R12,N           n<br/>         LR     R4,R1           Row=1<br/>         LR     R5,R1           Col=1<br/>         LR     R6,R1           BotRow=1<br/>         LR     R7,R1           BotCol=1<br/>         LR     R8,R12          TopRow=n<br/>         LR     R9,R12          TopCol=n<br/>         LR     R10,R0          Dir=0<br/>         LR     R15,R12         n<br/>         MR     R14,R12         R15=n*n<br/>         LA     R11,1           k=1<br/>LOOP     CR     R11,R15<br/>         BH     ENDLOOP<br/>         LR     R1,R4<br/>         BCTR   R1,0<br/>         MH     R1,N<br/>         AR     R1,R5<br/>         LR     R2,R11          k<br/>         BCTR   R2,0<br/>         BCTR   R1,0<br/>         SLA    R1,1<br/>         STH    R2,MATRIX(R1)   Matrix(Row,Col)=k-1<br/>         CH     R10,=H'0'<br/>         BE     DIR0<br/>         CH     R10,=H'1'<br/>         BE     DIR1<br/>         CH     R10,=H'2'<br/>         BE     DIR2<br/>         CH     R10,=H'3'<br/>         BE     DIR3<br/>         B      DIRX<br/>DIR0     CR     R5,R9           if Col&lt;TopCol<br/>         BNL    DIR0S<br/>         LA     R5,1(R5)        Col=Col+1<br/>         B      DIRX<br/>DIR0S    LA     R10,1           Dir=1<br/>         LA     R4,1(R4)        Row=Row+1<br/>         LA     R6,1(R6)        BotRow=BotRow+1<br/>         B      DIRX<br/>DIR1     CR     R4,R8           if Row&lt;TopRow<br/>         BNL    DIR1S<br/>         LA     R4,1(R4)        Row=Row+1<br/>         B      DIRX<br/>DIR1S    LA     R10,2           Dir=2<br/>         BCTR   R5,0            Col=Col-1<br/>         BCTR   R9,0            TopCol=TopCol-1<br/>         B      DIRX<br/>DIR2     CR     R5,R7           if Col&gt;BotCol<br/>         BNH    DIR2S<br/>         BCTR   R5,0            Col=Col-1<br/>         B      DIRX<br/>DIR2S    LA     R10,3           Dir=3<br/>         BCTR   R4,0            Row=Row-1<br/>         BCTR   R8,0            TopRow=TopRow-1<br/>         B      DIRX<br/>DIR3     CR     R4,R6           if Row&gt;BotRow<br/>         BNH    DIR3S<br/>         BCTR   R4,0            Row=Row-1<br/>         B      DIRX<br/>DIR3S    LA     R10,0           Dir=0<br/>         LA     R5,1(R5)        Col=Col+1<br/>         LA     R7,1(R7)        BotCol=BotCol+1<br/>DIRX     EQU    *<br/>         LA     R11,1(R11)      k=k+1<br/>         B      LOOP<br/>ENDLOOP  EQU    *<br/>         LA     R4,1            i<br/>LOOPI    CR     R4,R12<br/>         BH     ENDLOOPI<br/>         XR     R10,R10<br/>         LA     R5,1            j<br/>LOOPJ    CR     R5,R12<br/>         BH     ENDLOOPJ<br/>         LR     R1,R4<br/>         BCTR   R1,0<br/>         MH     R1,N<br/>         AR     R1,R5<br/>         BCTR   R1,0<br/>         SLA    R1,1<br/>         LH     R2,MATRIX(R1)   Matrix(i,j)<br/>         LA     R3,BUF<br/>         AR     R3,R10<br/>         CVD    R2,P8<br/>         MVC    0(4,R3),=X'40202120'<br/>         ED     0(4,R3),P8+6<br/>         LA     R10,4(R10)<br/>         LA     R5,1(R5)<br/>         B      LOOPJ<br/>ENDLOOPJ EQU    *<br/>         WTO    MF=(E,WTOMSG)\t\t  <br/>         LA     R4,1(R4)<br/>         B      LOOPI<br/>ENDLOOPI EQU    *<br/>*        ----   END CODE<br/>         L      R13,4(0,R13)<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14<br/>*        ----   DATA<br/>N        DC     H'5'            max=20 (20*4=80)<br/>         LTORG  <br/>P8       DS     PL8<br/>WTOMSG   DS     0F<br/>         DC     H'80',XL2'0000'<br/>BUF      DC     CL80' '<br/>MATRIX   DS     H               Matrix(n,n)<br/>         YREGS  <br/>         END    SPIRALM</pre>"}, {"lang": "Ada", "loc": 67, "block": "<pre class=\"ada highlighted_source\"><span class=\"co1\">-- Spiral Square</span><br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Integer_Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Spiral_Square <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Array_Type <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Spiral <span class=\"br0\">(</span>N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Array_Type <span class=\"kw1\">is</span><br/>      Result \u00a0: Array_Type<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">N</span>, <span class=\"nu0\">1</span>..<span class=\"me1\">N</span><span class=\"br0\">)</span>;<br/>      Row    \u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>      Col    \u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>      Max_Row\u00a0: Natural\u00a0:= N;<br/>      Max_Col\u00a0: Natural\u00a0:= N;<br/>      Min_Row\u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>      Min_Col\u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">N</span>**<span class=\"nu0\">2</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         Result<span class=\"br0\">(</span>Row, Col<span class=\"br0\">)</span>\u00a0:= I;<br/>         <span class=\"kw1\">if</span> Row = Min_Row <span class=\"kw1\">then</span><br/>            Col\u00a0:= Col + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">if</span> Col &gt; Max_Col <span class=\"kw1\">then</span><br/>               Col\u00a0:= Max_Col;<br/>               Row\u00a0:= Row + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">elsif</span> Col = Max_Col <span class=\"kw1\">then</span><br/>            Row\u00a0:= Row + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">if</span> Row &gt; Max_Row <span class=\"kw1\">then</span><br/>               Row\u00a0:= Max_Row;<br/>               Col\u00a0:= Col - <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">elsif</span> Row = Max_Row <span class=\"kw1\">then</span><br/>            Col\u00a0:= Col - <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">if</span> Col &lt; Min_Col <span class=\"kw1\">then</span><br/>               Col\u00a0:= Min_Col;<br/>               Row\u00a0:= Row - <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">elsif</span> Col = Min_Col <span class=\"kw1\">then</span><br/>            Row\u00a0:= Row - <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">if</span> Row = Min_Row <span class=\"kw1\">then</span>  <span class=\"co1\">-- Reduce spiral</span><br/>               Min_Row\u00a0:= Min_Row + <span class=\"nu0\">1</span>;<br/>               Max_Row\u00a0:= Max_Row - <span class=\"nu0\">1</span>;<br/>               Row\u00a0:= Min_Row;<br/>               Min_Col\u00a0:= Min_Col + <span class=\"nu0\">1</span>;<br/>               Max_Col\u00a0:= Max_Col - <span class=\"nu0\">1</span>;<br/>               Col\u00a0:= Min_Col;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Spiral;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>Item\u00a0: Array_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Num_Digits\u00a0: <span class=\"kw3\">constant</span> Float\u00a0:= Log<span class=\"br0\">(</span>X =&gt; Float<span class=\"br0\">(</span>Item'Length<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span><span class=\"br0\">)</span>, Base =&gt; <span class=\"nu0\">10.0</span><span class=\"br0\">)</span>;<br/>      Spacing   \u00a0: <span class=\"kw3\">constant</span> Positive\u00a0:= Integer<span class=\"br0\">(</span>Num_Digits<span class=\"br0\">)</span> + <span class=\"nu0\">2</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Item'<span class=\"kw3\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Item'<span class=\"kw3\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            Put<span class=\"br0\">(</span>Item =&gt; Item<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>, Width =&gt; Spacing<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Print<span class=\"br0\">(</span>Spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Spiral_Square;</pre>"}, {"lang": "ALGOL 68", "loc": 34, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> empty<span class=\"sy1\">=</span>0<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> spiral <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> dx<span class=\"sy1\">:=</span>1<span class=\"sy1\">,</span> dy<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span>            <span class=\"coMULTI\"># Starting increments #</span><br/>    <span class=\"kw3\">INT</span> x<span class=\"sy1\">:=</span>0<span class=\"sy1\">,</span> y<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span>              <span class=\"coMULTI\"># Starting location #</span><br/>    <span class=\"br0\">[</span>0<span class=\"sy1\">:</span>n<span class=\"sy1\">-</span>1<span class=\"sy1\">,</span>0<span class=\"sy1\">:</span>n<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><span class=\"kw3\">INT</span> my array<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> y <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> my array <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> my array <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> x <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> my array <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> my array <span class=\"kw2\">DO</span><br/>            my array<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">:=</span>empty<br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> n<span class=\"sy1\">**</span>2 <span class=\"kw2\">DO</span><br/>        my array<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> i<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> nx<span class=\"sy1\">:=</span>x<span class=\"sy1\">+</span>dx<span class=\"sy1\">,</span> ny<span class=\"sy1\">:=</span>y<span class=\"sy1\">+</span>dy<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">&lt;=</span>nx <span class=\"kw16\">AND</span> nx<span class=\"sy1\">&lt;</span>n <span class=\"kw16\">AND</span> 0<span class=\"sy1\">&lt;=</span>ny <span class=\"kw16\">AND</span> ny<span class=\"sy1\">&lt;</span>n <span class=\"sy1\">|</span> my array<span class=\"br0\">[</span>nx<span class=\"sy1\">,</span>ny<span class=\"br0\">]</span> <span class=\"sy1\">=</span> empty <span class=\"sy1\">|</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            x<span class=\"sy1\">:=</span>nx<span class=\"sy1\">;</span> y<span class=\"sy1\">:=</span>ny<br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"kw3\">INT</span> swap<span class=\"sy1\">:=</span>dx<span class=\"sy1\">;</span> dx<span class=\"sy1\">:=-</span>dy<span class=\"sy1\">;</span> dy<span class=\"sy1\">:=</span>swap<span class=\"sy1\">;</span><br/>            x<span class=\"sy1\">+:=</span>dx<span class=\"sy1\">;</span> y<span class=\"sy1\">+:=</span>dy<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    my array<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> spiral <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> my array<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw2\">FOR</span> y <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> my array <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> my array <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> x <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> my array <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> my array <span class=\"kw2\">DO</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>my array<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">,-</span>3<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span> spiral<span class=\"br0\">(</span>spiral<span class=\"br0\">(</span>5<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 254, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- spiral\u00a0:: Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> spiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> go<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>rows, cols, start<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> rows <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>enumFromTo<span class=\"br0\">(</span>start, start <span class=\"sy0\">+</span> pred<span class=\"br0\">(</span>cols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                    map<span class=\"br0\">(</span><span class=\"kw3\">my</span> |reverse|, \u00ac<br/>                        <span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>|\u03bb|<span class=\"br0\">(</span>cols, pred<span class=\"br0\">(</span>rows<span class=\"br0\">)</span>, start <span class=\"sy0\">+</span> cols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    go<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>n, n, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> spiral<br/>\u00a0<br/><span class=\"co1\">-- TEST ------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    wikiTable<span class=\"br0\">(</span>spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>, \u00ac<br/>        <span class=\"kw1\">false</span>, \u00ac<br/>        <span class=\"st0\">\"text-align:center;width:12em;height:12em;table-layout:fixed;\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- WIKI TABLE FORMAT ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- wikiTable\u00a0:: [Text] -&gt; Bool -&gt; Text -&gt; Text</span><br/><span class=\"kw3\">on</span> wikiTable<span class=\"br0\">(</span>lstRows, blnHdr, strStyle<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> fWikiRows<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>lstRow, iRow<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strDelim <span class=\"kw3\">to</span> if_<span class=\"br0\">(</span>blnHdr <span class=\"kw2\">and</span> <span class=\"br0\">(</span>iRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"st0\">\"!\"</span>, <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strDbl <span class=\"kw3\">to</span> strDelim <span class=\"sy0\">&amp;</span> strDelim<br/>            linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"|-\"</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> strDelim <span class=\"sy0\">&amp;</span> <span class=\"kw1\">space</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                intercalateS<span class=\"br0\">(</span><span class=\"kw1\">space</span> <span class=\"sy0\">&amp;</span> strDbl <span class=\"sy0\">&amp;</span> <span class=\"kw1\">space</span>, lstRow<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"{| class=<span class=\"es0\">\\\"</span>wikitable<span class=\"es0\">\\\"</span> \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        if_<span class=\"br0\">(</span>strStyle \u2260 <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"style=<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> strStyle <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        intercalateS<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>fWikiRows, lstRows<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"|}\"</span> <span class=\"sy0\">&amp;</span> linefeed<br/><span class=\"kw3\">end</span> wikiTable<br/>\u00a0<br/><span class=\"co1\">-- GENERIC ------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- comparing\u00a0:: (a -&gt; b) -&gt; (a -&gt; a -&gt; Ordering)</span><br/><span class=\"kw3\">on</span> comparing<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> fa <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> fb <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                <span class=\"kw3\">if</span> fa <span class=\"sy0\">&lt;</span> fb <span class=\"kw3\">then</span><br/>                    <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> fa &gt; fb <span class=\"kw3\">then</span><br/>                    <span class=\"nu0\">1</span><br/>                <span class=\"kw3\">else</span><br/>                    <span class=\"nu0\">0</span><br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> comparing<br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> lng <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> acc<br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m \u2264 n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- if_\u00a0:: Bool -&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> if_<span class=\"br0\">(</span>bool, x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>        x<br/>    <span class=\"kw3\">else</span><br/>        y<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> if_<br/>\u00a0<br/><span class=\"co1\">-- intercalateS\u00a0:: String -&gt; [String] -&gt; String</span><br/><span class=\"kw3\">on</span> intercalateS<span class=\"br0\">(</span><span class=\"kw1\">sep</span>, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, <span class=\"kw1\">sep</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> s <span class=\"kw3\">to</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> s<br/><span class=\"kw3\">end</span> intercalateS<br/>\u00a0<br/><span class=\"co1\">-- length\u00a0:: [a] -&gt; Int</span><br/><span class=\"kw3\">on</span> |length|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    length <span class=\"kw3\">of</span> xs<br/><span class=\"kw3\">end</span> |length|<br/>\u00a0<br/><span class=\"co1\">-- max\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> max<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> x &gt; y <span class=\"kw3\">then</span><br/>        x<br/>    <span class=\"kw3\">else</span><br/>        y<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> max<br/>\u00a0<br/><span class=\"co1\">-- maximumBy\u00a0:: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> maximumBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> cmp <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> max<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> a <span class=\"kw3\">is</span> <span class=\"kw1\">missing value</span> <span class=\"kw2\">or</span> cmp<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                b<br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>max, <span class=\"kw1\">missing value</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> maximumBy<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: First-class m =&gt; (a -&gt; b) -&gt; m (a -&gt; b)</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- pred\u00a0:: Enum a =&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> pred<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> x<br/><span class=\"kw3\">end</span> pred<br/>\u00a0<br/><span class=\"co1\">-- Egyptian multiplication - progressively doubling a list, appending</span><br/><span class=\"co1\">-- stages of doubling to an accumulator where needed for binary </span><br/><span class=\"co1\">-- assembly of a target length</span><br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- reverse\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> |reverse|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span>reverse <span class=\"kw3\">of</span> characters <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span><br/>        reverse <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |reverse|<br/>\u00a0<br/><span class=\"co1\">-- If some of the rows are shorter than the following rows, </span><br/><span class=\"co1\">-- their elements are skipped:</span><br/><span class=\"co1\">-- transpose({{10,11},{20},{},{30,31,32}}) -&gt; {{10, 20, 30}, {11, 31}, {32}}</span><br/><span class=\"co1\">-- transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> transpose<span class=\"br0\">(</span>xxs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> intMax <span class=\"kw3\">to</span> |length|<span class=\"br0\">(</span>maximumBy<span class=\"br0\">(</span>comparing<span class=\"br0\">(</span><span class=\"kw3\">my</span> |length|<span class=\"br0\">)</span>, xxs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> gaps <span class=\"kw3\">to</span> replicate<span class=\"br0\">(</span>intMax, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> padded<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> |length|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> lng <span class=\"sy0\">&lt;</span> intMax <span class=\"kw3\">then</span><br/>                xs <span class=\"sy0\">&amp;</span> <span class=\"kw1\">items</span> <span class=\"br0\">(</span>lng <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> gaps<br/>            <span class=\"kw3\">else</span><br/>                xs<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">set</span> rows <span class=\"kw3\">to</span> map<span class=\"br0\">(</span>padded, xxs<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> cols<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, iCol<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> cell<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">item</span> iCol <span class=\"kw3\">of</span> row<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>            concatMap<span class=\"br0\">(</span>cell, rows<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    map<span class=\"br0\">(</span>cols, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> rows<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> transpose<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> \u00ac<br/>        <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, linefeed<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> str <span class=\"kw3\">to</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    str<br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- unwords\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unwords<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalateS<span class=\"br0\">(</span><span class=\"kw1\">space</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unwords</pre>"}, {"lang": "AutoHotkey", "loc": 26, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> dx <span class=\"sy0\">:=</span> x <span class=\"sy0\">:=</span> y <span class=\"sy0\">:=</span> v <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> dy <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">*</span>n <span class=\"br0\">{</span><br/>   a_<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> v<span class=\"sy0\">++</span><br/>   nx <span class=\"sy0\">:=</span> x<span class=\"sy0\">+</span>dx<span class=\"sy0\">,</span> ny <span class=\"sy0\">:=</span> y<span class=\"sy0\">+</span>dy<br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> nx || nx <span class=\"sy0\">&gt;</span> n || <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> ny || ny <span class=\"sy0\">&gt;</span> n || a_<span class=\"re0\">%nx%</span>_<span class=\"re0\">%ny%</span><span class=\"br0\">)</span><br/>      t <span class=\"sy0\">:=</span> dx<span class=\"sy0\">,</span> dx <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span>dy<span class=\"sy0\">,</span> dy <span class=\"sy0\">:=</span> t<br/>   x <span class=\"sy0\">:=</span> x<span class=\"sy0\">+</span>dx<span class=\"sy0\">,</span> y <span class=\"sy0\">:=</span> y<span class=\"sy0\">+</span>dy<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span> <span class=\"br0\">{</span>                      <span class=\"co1\">; generate printout</span><br/>   y <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a>                 <span class=\"co1\">; for each row</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span>                     <span class=\"co1\">; and for each column</span><br/>      s <span class=\"sy0\">.=</span> a_<span class=\"re0\">%A_Index%</span>_<span class=\"re0\">%y%</span> <span class=\"st0\">\"`t\"</span> <span class=\"co1\">; attach stored index</span><br/>   s <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span>                    <span class=\"co1\">; row is complete</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"re0\">%s%</span>                      <span class=\"co1\">; show output</span><br/><span class=\"coMULTI\">/*<br/>---------------------------<br/>1   2   3   4   5 <br/>16  17  18  19  6 <br/>15  24  25  20  7 <br/>14  23  22  21  8 <br/>13  12  11  10  9 <br/>---------------------------<br/>*/</span></pre>"}, {"lang": "AWK", "loc": 41, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f SPIRAL_MATRIX.AWK [-v offset={0|1}] [size]</span><br/><span class=\"co1\"># converted from BBC BASIC</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># offset: \"0\" prints 0 to size^2-1 while \"1\" prints 1 to size^2</span><br/>    offset = <span class=\"br0\">(</span>offset <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">0</span> <span class=\"sy5\">:</span> offset<br/>    size = <span class=\"br0\">(</span><span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">5</span> <span class=\"sy5\">:</span> <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>offset <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span>01<span class=\"br0\">]</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>size <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    bot_col = bot_row = <span class=\"nu0\">0</span><br/>    top_col = top_row = size <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    direction = col = row = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;=</span>size<span class=\"sy3\">*</span>size<span class=\"sy3\">-</span><span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># build</span><br/>      arr<span class=\"br0\">[</span>col,row<span class=\"br0\">]</span> = i <span class=\"sy3\">+</span> offset<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>direction <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy2\">&lt;</span> top_col<span class=\"br0\">)</span> <span class=\"br0\">{</span> col<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span> direction = <span class=\"nu0\">1</span>\u00a0; row<span class=\"sy3\">++</span>\u00a0; bot_row<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>direction <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy2\">&lt;</span> top_row<span class=\"br0\">)</span> <span class=\"br0\">{</span> row<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span> direction = <span class=\"nu0\">2</span>\u00a0; col<span class=\"sy3\">--</span>\u00a0; top_col<span class=\"sy3\">--</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>direction <span class=\"sy2\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy2\">&gt;</span> bot_col<span class=\"br0\">)</span> <span class=\"br0\">{</span> col<span class=\"sy3\">--</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span> direction = <span class=\"nu0\">3</span>\u00a0; row<span class=\"sy3\">--</span>\u00a0; top_row<span class=\"sy3\">--</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>direction <span class=\"sy2\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy2\">&gt;</span> bot_row<span class=\"br0\">)</span> <span class=\"br0\">{</span> row<span class=\"sy3\">--</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span> direction = <span class=\"nu0\">0</span>\u00a0; col<span class=\"sy3\">++</span>\u00a0; bot_col<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    width = <span class=\"kw4\">length</span><span class=\"br0\">(</span>size <span class=\"sy3\">^</span> <span class=\"nu0\">2</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> offset<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\"># column width</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;</span>size; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># print</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">0</span>; j<span class=\"sy2\">&lt;</span>size; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%*d\"</span>,width,arr<span class=\"br0\">[</span>j,i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">      N%=5<br/>      @%=LENSTR$(N%*N%-1)+1<br/>      BotCol%=0\u00a0: TopCol%=N%-1<br/>      BotRow%=0\u00a0: TopRow%=N%-1<br/>      DIM Matrix%(TopCol%,TopRow%)<br/>\u00a0<br/>      Dir%=0\u00a0: Col%=0\u00a0: Row%=0<br/>      FOR I%=0 TO N%*N%-1<br/>        Matrix%(Col%,Row%)=I%<br/>        PRINT TAB(Col%*@%,Row%) I%<br/>        CASE Dir% OF<br/>          WHEN 0: IF Col% &lt; TopCol% THEN Col%+=1 ELSE Dir%=1\u00a0: Row%+=1\u00a0: BotRow%+=1<br/>          WHEN 1: IF Row% &lt; TopRow% THEN Row%+=1 ELSE Dir%=2\u00a0: Col%-=1\u00a0: TopCol%-=1<br/>          WHEN 2: IF Col% &gt; BotCol% THEN Col%-=1 ELSE Dir%=3\u00a0: Row%-=1\u00a0: TopRow%-=1<br/>          WHEN 3: IF Row% &gt; BotRow% THEN Row%-=1 ELSE Dir%=0\u00a0: Col%+=1\u00a0: BotCol%+=1<br/>        ENDCASE<br/>      NEXT<br/>      END</pre>"}, {"lang": "C", "loc": 35, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define valid(i, j) 0 &lt;= i &amp;&amp; i &lt; m &amp;&amp; 0 &lt;= j &amp;&amp; j &lt; n &amp;&amp;\u00a0!s[i][j]</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* default size: 5 */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> m <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> n <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> n <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">**</span>s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> m <span class=\"sy0\">+</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> m <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span>s <span class=\"sy0\">+</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> dx <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> val <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> valid<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> dy<span class=\"sy0\">,</span> j <span class=\"sy0\">+=</span> dx <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> valid<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> dx<span class=\"sy0\">,</span> i <span class=\"sy0\">+=</span> dy<span class=\"br0\">)</span><br/>\t\t\ts<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">++</span>val<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tj <span class=\"sy0\">-=</span> dx<span class=\"sy0\">;</span> i <span class=\"sy0\">-=</span> dy<span class=\"sy0\">;</span><br/>\t\tt <span class=\"sy0\">=</span> dy<span class=\"sy0\">;</span> dy <span class=\"sy0\">=</span> dx<span class=\"sy0\">;</span> dx <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>t<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>t <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> val <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> t<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*d\"</span><span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 67, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;memory&gt;\t// for auto_ptr</span><br/><span class=\"co2\">#include &lt;cmath&gt;\t// for the ceil and log10 and floor functions</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;\t// for the setw function</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> vector<span class=\"sy1\">&lt;</span> <span class=\"kw4\">int</span> <span class=\"sy1\">&gt;</span> IntRow<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> vector<span class=\"sy1\">&lt;</span> IntRow <span class=\"sy1\">&gt;</span> IntTable<span class=\"sy4\">;</span><br/>\u00a0<br/>auto_ptr<span class=\"sy1\">&lt;</span> IntTable <span class=\"sy1\">&gt;</span> getSpiralArray<span class=\"br0\">(</span> <span class=\"kw4\">int</span> dimension <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tauto_ptr<span class=\"sy1\">&lt;</span> IntTable <span class=\"sy1\">&gt;</span> spiralArrayPtr<span class=\"br0\">(</span> <span class=\"kw3\">new</span> IntTable<span class=\"br0\">(</span><br/>\t\tdimension, IntRow<span class=\"br0\">(</span> dimension <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> numConcentricSquares <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">int</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">ceil</span><span class=\"br0\">(</span><br/>\t\t<span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">double</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> dimension <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu16\">2.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> j<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> sideLen <span class=\"sy1\">=</span> dimension<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> currNum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> numConcentricSquares<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// do top side</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> sideLen<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>spiralArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> i <span class=\"br0\">]</span><span class=\"br0\">[</span> i <span class=\"sy2\">+</span> j <span class=\"br0\">]</span> <span class=\"sy1\">=</span> currNum<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// do right side</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> sideLen<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>spiralArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> i <span class=\"sy2\">+</span> j <span class=\"br0\">]</span><span class=\"br0\">[</span> dimension <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">-</span> i <span class=\"br0\">]</span> <span class=\"sy1\">=</span> currNum<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// do bottom side</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> j <span class=\"sy1\">=</span> sideLen <span class=\"sy2\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> j<span class=\"sy2\">--</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>spiralArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> dimension <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">-</span> i <span class=\"br0\">]</span><span class=\"br0\">[</span> i <span class=\"sy2\">+</span> j <span class=\"br0\">]</span> <span class=\"sy1\">=</span> currNum<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// do left side</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> j <span class=\"sy1\">=</span> sideLen <span class=\"sy2\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j<span class=\"sy2\">--</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>spiralArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> i <span class=\"sy2\">+</span> j <span class=\"br0\">]</span><span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">=</span> currNum<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\tsideLen <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> spiralArrayPtr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printSpiralArray<span class=\"br0\">(</span> <span class=\"kw4\">const</span> auto_ptr<span class=\"sy1\">&lt;</span> IntTable <span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> spiralArrayPtr <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">size_t</span> dimension <span class=\"sy1\">=</span> spiralArrayPtr<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>size<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> fieldWidth <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">int</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">floor</span><span class=\"br0\">(</span> <span class=\"kw3\">log10</span><span class=\"br0\">(</span><br/>\t\t<span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span> <span class=\"kw4\">double</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> dimension <span class=\"sy2\">*</span> dimension <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">size_t</span> col<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> row <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> row <span class=\"sy1\">&lt;</span> dimension<span class=\"sy4\">;</span> row<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> col <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> col <span class=\"sy1\">&lt;</span> dimension<span class=\"sy4\">;</span> col<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> fieldWidth <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>spiralArrayPtr <span class=\"br0\">)</span><span class=\"br0\">[</span> row <span class=\"br0\">]</span><span class=\"br0\">[</span> col <span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tprintSpiralArray<span class=\"br0\">(</span> getSpiralArray<span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 37, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> Spiral<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n, n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> <span class=\"kw1\">value</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> count<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum <span class=\"sy0\">+=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>sum <span class=\"sy0\">/</span> n, sum <span class=\"sy0\">%</span> n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">value</span> <span class=\"sy0\">*=</span> n<span class=\"sy0\">;</span><br/>        count<span class=\"sy0\">--;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> count<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum <span class=\"sy0\">+=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>sum <span class=\"sy0\">/</span> n, sum <span class=\"sy0\">%</span> n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// Method to print arrays, pads numbers so they line up in columns</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> PrintArray<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>array<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> array<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> array<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> array<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>array<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span>n, <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> spiral <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>cyc <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> n <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">mapcat</span> #<span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"nu0\">2</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">mapcat</span> #<span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"sy0\">%</span>2 <span class=\"sy0\">%</span><span class=\"br0\">)</span> cyc<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>reductions <span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> second<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">first</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>pprint<span class=\"sy0\">/</span>cl<span class=\"sy0\">-</span><span class=\"kw1\">format</span><br/>    true<br/>    <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\" ~{~&lt;~%~,\"</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"st0\">\":;~2d ~&gt;~}~%\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>spiral n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 48, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># Let's say you want to arrange the first N-squared natural numbers</span><br/><span class=\"co1\"># in a spiral, where you fill in the numbers clockwise, starting from</span><br/><span class=\"co1\"># the upper left corner.  This code computes the values for each x/y</span><br/><span class=\"co1\"># coordinate of the square.  (Of course, you could precompute the values</span><br/><span class=\"co1\"># iteratively, but what fun is that?)</span><br/>\u00a0<br/>spiral_value = <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  prior_legs =<br/>    N<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>    E<span class=\"sy0\">:</span> <span class=\"nu0\">1</span><br/>    S<span class=\"sy0\">:</span> <span class=\"nu0\">2</span><br/>    W<span class=\"sy0\">:</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>  edge_run = <span class=\"br0\">(</span>edge_offset<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    N<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> edge_offset.<span class=\"me1\">W</span> <span class=\"sy0\">-</span> edge_offset.<span class=\"me1\">N</span><br/>    E<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> edge_offset.<span class=\"me1\">N</span> <span class=\"sy0\">-</span> edge_offset.<span class=\"me1\">E</span><br/>    S<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> edge_offset.<span class=\"me1\">E</span> <span class=\"sy0\">-</span> edge_offset.<span class=\"me1\">S</span><br/>    W<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> edge_offset.<span class=\"me1\">S</span> <span class=\"sy0\">-</span> edge_offset.<span class=\"me1\">W</span><br/>\u00a0<br/>  edge_offset =<br/>    N<span class=\"sy0\">:</span> y<br/>    E<span class=\"sy0\">:</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> x<br/>    S<span class=\"sy0\">:</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> y<br/>    W<span class=\"sy0\">:</span> x<br/>\u00a0<br/>  min_edge_offset = n<br/>  <span class=\"kw1\">for</span> dir <span class=\"kw1\">of</span> edge_offset<br/>    <span class=\"kw1\">if</span> edge_offset<span class=\"br0\">[</span>dir<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> min_edge_offset<br/>      min_edge_offset = edge_offset<span class=\"br0\">[</span>dir<span class=\"br0\">]</span><br/>      border = dir<br/>\u00a0<br/>  inner_square_edge = n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> min_edge_offset<br/>  corner_offset = n <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> inner_square_edge <span class=\"sy0\">*</span> inner_square_edge<br/>  corner_offset <span class=\"sy0\">+</span>= prior_legs<span class=\"br0\">[</span>border<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>inner_square_edge <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  corner_offset <span class=\"sy0\">+</span> edge_run<span class=\"br0\">(</span>edge_offset<span class=\"br0\">)</span><span class=\"br0\">[</span>border<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>spiral_matrix = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># return a nested array expression</span><br/>  <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>      spiral_value x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>----Spiral n=#{n}\"</span><br/>    console.<span class=\"me1\">log</span> spiral_matrix n<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> spiral <span class=\"br0\">(</span>rows columns<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>N <span class=\"br0\">(</span>* rows columns<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>spiral <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> rows columns<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>dx <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>dy <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>y <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>i <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i N<span class=\"br0\">)</span> spiral<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> spiral y x<span class=\"br0\">)</span> i<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nx <span class=\"br0\">(</span>+ x dx<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ny <span class=\"br0\">(</span>+ y dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> -<span class=\"nu0\">1</span> nx columns<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> -<span class=\"nu0\">1</span> ny rows<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> spiral ny nx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> x nx<br/>              y ny<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>t <span class=\"br0\">(</span>psetf dx <span class=\"br0\">(</span>- dy<span class=\"br0\">)</span><br/>                 dy dx<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">setf</span> x <span class=\"br0\">(</span>+ x dx<span class=\"br0\">)</span><br/>                y <span class=\"br0\">(</span>+ y dy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 20, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> M<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> pos<span class=\"sy0\">,</span> side <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>            M<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>            M<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">]</span><span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            M<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">]</span><span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            M<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos<span class=\"sy0\">++;</span><br/>        side <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%2d\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 56, "block": "<pre class=\"dcl highlighted_source\">$ <span class=\"kw3\">p1</span> <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw3\">p1</span> <span class=\"br0\">)</span><br/>$ max <span class=\"sy0\">=</span> <span class=\"kw3\">p1</span> * <span class=\"kw3\">p1</span><br/>$<br/>$ i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$ r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$ rd <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$ c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$ cd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$<span class=\"re2\"> loop:</span><br/>$  a<span class=\"re0\">'r'</span>_<span class=\"re0\">'c'</span> <span class=\"sy0\">=</span> i<br/>$  nr <span class=\"sy0\">=</span> r + rd<br/>$  nc <span class=\"sy0\">=</span> c + cd<br/>$  <span class=\"kw1\">if</span> nr <span class=\"sy0\">.eq.</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.or.</span> nc <span class=\"sy0\">.eq.</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.or.</span> nr <span class=\"sy0\">.gt.</span> <span class=\"kw3\">p1</span> <span class=\"sy0\">.or.</span> nc <span class=\"sy0\">.gt.</span> <span class=\"kw3\">p1</span> <span class=\"sy0\">.or.</span> <span class=\"kw2\">f$type</span><span class=\"br0\">(</span> a<span class=\"re0\">'nr'</span>_<span class=\"re0\">'nc'</span> <span class=\"br0\">)</span> <span class=\"sy0\">.nes.</span> <span class=\"st0\">\"\"</span><br/>$  <span class=\"kw1\">then</span><br/>$   <span class=\"kw1\">gosub</span> change_directions<br/>$  <span class=\"kw1\">endif</span><br/>$  r <span class=\"sy0\">=</span> r + rd<br/>$  c <span class=\"sy0\">=</span> c + cd<br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> i <span class=\"sy0\">.lt.</span> max <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop<br/>$ length <span class=\"sy0\">=</span> <span class=\"kw2\">f$length</span><span class=\"br0\">(</span> <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> max <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$ r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$ loop2:<br/>$  c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$  output <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>$  loop3:<br/>$   output <span class=\"sy0\">=</span> output + <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!#UL \"</span>, length, a<span class=\"re0\">'r'</span>_<span class=\"re0\">'c'</span> <span class=\"br0\">)</span><br/>$   c <span class=\"sy0\">=</span> c + <span class=\"nu0\">1</span><br/>$   <span class=\"kw1\">if</span> c <span class=\"sy0\">.le.</span> <span class=\"kw3\">p1</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop3<br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> output<br/>$  r <span class=\"sy0\">=</span> r + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> r <span class=\"sy0\">.le.</span> <span class=\"kw3\">p1</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop2<br/>$ <span class=\"kw1\">exit</span><br/>$<br/>$<span class=\"re2\"> change_directions:</span><br/>$ <span class=\"kw1\">if</span> rd <span class=\"sy0\">.eq.</span> <span class=\"nu0\">0</span> .and cd <span class=\"sy0\">.eq.</span> <span class=\"nu0\">1</span><br/>$ <span class=\"kw1\">then</span><br/>$  rd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$  cd <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$ <span class=\"kw1\">else</span><br/>$  <span class=\"kw1\">if</span> rd <span class=\"sy0\">.eq.</span> <span class=\"nu0\">1</span> <span class=\"sy0\">.and.</span> cd <span class=\"sy0\">.eq.</span> <span class=\"nu0\">0</span><br/>$  <span class=\"kw1\">then</span><br/>$   rd <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$   cd <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">else</span><br/>$   <span class=\"kw1\">if</span> rd <span class=\"sy0\">.eq.</span> <span class=\"nu0\">0</span> <span class=\"sy0\">.and.</span> cd <span class=\"sy0\">.eq.</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>$   <span class=\"kw1\">then</span><br/>$    rd <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>$    cd <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$   <span class=\"kw1\">else</span><br/>$    rd <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$    cd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$   <span class=\"kw1\">endif</span><br/>$  <span class=\"kw1\">endif</span><br/>$ <span class=\"kw1\">endif</span><br/>$ <span class=\"kw1\">return</span></pre>"}, {"lang": "E", "loc": 26, "block": "<pre class=\"e highlighted_source\"><span class=\"coMULTI\">/** Missing scalar multiplication, but we don't need it. */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeVector2<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> vector <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> x<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return x <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> y<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return y <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> add<span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeVector2<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> other.<span class=\"me1\">x</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> other.<span class=\"me1\">y</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> clockwise<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeVector2<span class=\"br0\">(</span><span class=\"sy0\">-</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Bugs: (1) The printing is specialized. (2) No bounds check on the column. */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeFlex2DArray<span class=\"br0\">(</span>rows<span class=\"sy0\">,</span> cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> storage <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">*</span> cols<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> flex2DArray <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __printOn<span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> y <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>rows <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>cols <span class=\"br0\">{</span><br/>          out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">makeString</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>flex2DArray<span class=\"br0\">[</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> get<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span> return storage<span class=\"br0\">[</span>r <span class=\"sy0\">*</span> cols <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> put<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span> storage<span class=\"br0\">[</span>r <span class=\"sy0\">*</span> cols <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> v <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def spiral_matrix(n) do<br/>    wide = length(to_char_list(n*n-1))<br/>    fmt = String.duplicate(\"~#{wide}w \", n) &lt;&gt; \"~n\"<br/>    runs = Enum.flat_map(n..1, &amp;[&amp;1,&amp;1]) |&gt; tl<br/>    delta = Stream.cycle([{0,1},{1,0},{0,-1},{-1,0}])<br/>    running(Enum.zip(runs,delta),0,-1,[])<br/>    |&gt; Enum.with_index |&gt; Enum.sort |&gt;  Enum.chunk(n)<br/>    |&gt; Enum.each(fn row -&gt;\u00a0:io.format fmt, (for {_,i} &lt;- row, do: i) end)<br/>  end<br/>\u00a0<br/>  defp running([{run,{dx,dy}}|rest], x, y, track) do<br/>    new_track = Enum.reduce(1..run, track, fn i,acc -&gt; [{x+i*dx, y+i*dy} | acc] end)<br/>    running(rest, x+run*dx, y+run*dy, new_track)<br/>  end<br/>  defp running([],_,_,track), do: track |&gt; Enum.reverse<br/>end<br/>\u00a0<br/>RC.spiral_matrix(5)</pre>"}, {"lang": "Euphoria", "loc": 29, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> spiral<span class=\"br0\">(</span><span class=\"kw2\">integer</span> dimension<span class=\"br0\">)</span><br/>    <span class=\"kw2\">integer</span> side<span class=\"sy2\">,</span> curr<span class=\"sy2\">,</span> curr2<br/>    <span class=\"kw2\">sequence</span> s<br/>    s <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span>dimension<span class=\"br0\">)</span><span class=\"sy2\">,</span>dimension<span class=\"br0\">)</span><br/>    side <span class=\"sy1\">=</span> dimension<br/>    curr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span>dimension<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> side<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            s<span class=\"br0\">[</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy1\">+</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> curr <span class=\"co1\">-- top</span><br/>            curr2 <span class=\"sy1\">=</span> curr <span class=\"sy1\">+</span> side<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>            s<span class=\"br0\">[</span>i<span class=\"sy1\">+</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy1\">+</span>side<span class=\"br0\">]</span> <span class=\"sy1\">=</span> curr2 <span class=\"co1\">-- right</span><br/>            curr2 <span class=\"sy1\">+=</span> side<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>            s<span class=\"br0\">[</span>i<span class=\"sy1\">+</span>side<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy1\">+</span>side<span class=\"sy1\">-</span>j<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> curr2 <span class=\"co1\">-- bottom</span><br/>            curr2 <span class=\"sy1\">+=</span> side<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>            s<span class=\"br0\">[</span>i<span class=\"sy1\">+</span>side<span class=\"sy1\">-</span>j<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> curr2 <span class=\"co1\">-- left</span><br/>            curr <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        curr <span class=\"sy1\">=</span> curr2 <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>        side <span class=\"sy1\">-=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>dimension<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        s<span class=\"br0\">[</span><span class=\"kw2\">floor</span><span class=\"br0\">(</span>dimension<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">floor</span><span class=\"br0\">(</span>dimension<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> curr<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Fortran", "loc": 49, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> SPIRAL<br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">PARAMETER</span> <span class=\"sy0\">::</span> <span class=\"kw4\">size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">count</span> <span class=\"sy0\">=</span> <span class=\"kw4\">size</span>, n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">array</span><span class=\"br0\">(</span><span class=\"kw4\">size</span>,<span class=\"kw4\">size</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">count</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <br/>      array<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span><br/>    <span class=\"kw4\">count</span> <span class=\"sy0\">=</span> <span class=\"kw4\">count</span>  <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">count</span><br/>        y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        array<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>        n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">count</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        array<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>        n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n &gt; <span class=\"kw4\">size</span><span class=\"sy0\">*</span>size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">EXIT</span><br/>      <span class=\"kw4\">count</span> <span class=\"sy0\">=</span> <span class=\"kw4\">count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">count</span><br/>        y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        array<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>        n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">count</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        array<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>        n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n &gt; <span class=\"kw4\">size</span><span class=\"sy0\">*</span>size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">EXIT</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><br/>    <span class=\"kw1\">DO</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(I4)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> array <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> SPIRAL</pre>"}, {"lang": "FreeBASIC", "loc": 76, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Enum</span> Direction<br/>  across <br/>  down<br/>  back<br/>  up<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Enum</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Input</span> <span class=\"st0\">\"Enter size of matrix \"</span>; n<br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> n &gt; <span class=\"nu0\">0</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> spiral<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"co1\">'' all zero by default</span><br/>\u00a0<br/><span class=\"co1\">' enter the numbers 0 to (n^2 - 1) spirally in the matrix</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> row = <span class=\"nu0\">1</span>, col = <span class=\"nu0\">1</span>, lowRow = <span class=\"nu0\">1</span>, highRow = n, lowCol = <span class=\"nu0\">1</span>, highCol = n<br/><span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> Direction = across<br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>n * n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  spiral<span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> = i<br/>  Select <span class=\"kw1\">Case</span> d<br/>    <span class=\"kw1\">Case</span> across<br/>      col += <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> col &gt; highCol <span class=\"kw1\">Then</span><br/>        col = highCol<br/>        row += <span class=\"nu0\">1</span><br/>        d = down<br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">Case</span> down<br/>      row += <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> row &gt; highRow <span class=\"kw1\">Then</span><br/>        row = highRow<br/>        col -= <span class=\"nu0\">1</span><br/>        d = back<br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">Case</span> back<br/>      col -= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> col &lt; lowCol <span class=\"kw1\">Then</span><br/>        col = lowCol<br/>        row -= <span class=\"nu0\">1</span><br/>        d = up<br/>        lowRow += <span class=\"nu0\">1</span>        <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Case</span> up<br/>      row -= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> row &lt; lowRow <span class=\"kw1\">Then</span><br/>        row = lowRow<br/>        col += <span class=\"nu0\">1</span><br/>        d = across<br/>        highRow -= <span class=\"nu0\">1</span><br/>        lowCol += <span class=\"nu0\">1</span><br/>        highCol -= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">End</span> Select<br/><span class=\"kw1\">Next</span> <br/>\u00a0<br/><span class=\"co1\">' print spiral matrix if n &lt; 20 </span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">20</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>      <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; spiral<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">Else</span> <br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Matrix is too big to display on 80 column console\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> Spiral n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> sq <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">create</span> n n <span class=\"nu0\">0</span>                                   <span class=\"co1\">// Set up an output array</span><br/>    <span class=\"kw1\">let</span> nCur <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>                                               <span class=\"co1\">// Current value being inserted</span><br/>    <span class=\"kw1\">let</span> NextN<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> nCur <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>nCur<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> <span class=\"sy0\">!</span>nCur                         <span class=\"co1\">// Inc current value and return new value</span><br/>    <span class=\"kw1\">let</span> Frame inset <span class=\"sy0\">=</span>                                               <span class=\"co1\">// Create the \"frame\" at an offset from the outside</span><br/>        <span class=\"kw1\">let</span> rangeF <span class=\"sy0\">=</span> <span class=\"br0\">[</span>inset..<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> inset <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>                       <span class=\"co1\">// Range we use going forward</span><br/>        <span class=\"kw1\">let</span> rangeR <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> inset <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span>inset <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>           <span class=\"co1\">// Range we use going backward</span><br/>        rangeF <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> sq.<span class=\"br0\">[</span>inset,i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> NextN<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">// Top of frame</span><br/>        rangeF <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> sq.<span class=\"br0\">[</span>i,n<span class=\"sy0\">-</span>inset<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> NextN<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">// Right side of frame</span><br/>        rangeR <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> sq.<span class=\"br0\">[</span>n<span class=\"sy0\">-</span>inset<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> NextN<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">// Bottom of frame</span><br/>        rangeR <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> sq.<span class=\"br0\">[</span>i,inset<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> NextN<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">// Left side of frame</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> Frame i<span class=\"br0\">)</span>                   <span class=\"co1\">// Fill in all frames</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&amp;&amp;&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> sq.<span class=\"br0\">[</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span>,n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> n<span class=\"sy0\">*</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>                     <span class=\"co1\">// If n is odd, fill in the last single value</span><br/>    sq                                                              <span class=\"co1\">// Return our output array</span></pre>"}, {"lang": "GAP", "loc": 47, "block": "<pre class=\"text highlighted_source\"># Spiral matrix with numbers 1 .. n&lt;sup&gt;2&lt;/sup&gt;, more natural in GAP<br/>SpiralMatrix\u00a0:= function(n)<br/>  local i, j, k, di, dj, p, vi, vj, imin, imax, jmin, jmax;<br/>  a\u00a0:= NullMat(n, n);<br/>  vi\u00a0:= [ 1, 0, -1, 0 ];<br/>  vj\u00a0:= [ 0, 1, 0, -1 ];<br/>  imin\u00a0:= 0;<br/>  imax\u00a0:= n;<br/>  jmin\u00a0:= 1;<br/>  jmax\u00a0:= n + 1;<br/>  p\u00a0:= 1;<br/>  di\u00a0:= vi[p];<br/>  dj\u00a0:= vj[p];<br/>  i\u00a0:= 1;<br/>  j\u00a0:= 1;<br/>  for k in [1 .. n*n] do<br/>    a[j][i]\u00a0:= k;<br/>    i\u00a0:= i + di;<br/>    j\u00a0:= j + dj;<br/>    if i &lt; imin or i &gt; imax or j &lt; jmin or j &gt; jmax then<br/>      i\u00a0:= i - di;<br/>      j\u00a0:= j - dj;<br/>      p\u00a0:= RemInt(p, 4) + 1;<br/>      di\u00a0:= vi[p];<br/>      dj\u00a0:= vj[p];<br/>      i\u00a0:= i + di;<br/>      j\u00a0:= j + dj;<br/>      if p = 1 then<br/>        imax\u00a0:= imax - 1;<br/>      elif p = 2 then<br/>        jmax\u00a0:= jmax - 1;<br/>      elif p = 3 then<br/>        imin\u00a0:= imin + 1;<br/>      else<br/>        jmin\u00a0:= jmin + 1;<br/>      fi;<br/>    fi;<br/>  od;<br/>  return a;<br/>end;<br/>\u00a0<br/>PrintArray(SpiralMatrix(5)); <br/># [ [   1,   2,   3,   4,   5 ],<br/>#   [  16,  17,  18,  19,   6 ],<br/>#   [  15,  24,  25,  20,   7 ],<br/>#   [  14,  23,  22,  21,   8 ],<br/>#   [  13,  12,  11,  10,   9 ] ]</pre>"}, {"lang": "Go", "loc": 58, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    top<span class=\"sy1\">,</span> left<span class=\"sy1\">,</span> bottom<span class=\"sy1\">,</span> right <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    sz <span class=\"sy2\">:=</span> n <span class=\"sy3\">*</span> n<br/>    a <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> sz<span class=\"sy1\">)</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> left &lt; right <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// work right, along top</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> left<span class=\"sy1\">;</span> c &lt;<span class=\"sy2\">=</span> right<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>top<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        top<span class=\"sy2\">++</span><br/>        <span class=\"co1\">// work down right side</span><br/>        <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> top<span class=\"sy1\">;</span> r &lt;<span class=\"sy2\">=</span> bottom<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>right<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        right<span class=\"sy2\">--</span><br/>        <span class=\"kw1\">if</span> top <span class=\"sy3\">==</span> bottom <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// work left, along bottom</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> right<span class=\"sy1\">;</span> c &gt;<span class=\"sy2\">=</span> left<span class=\"sy1\">;</span> c<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>bottom<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        bottom<span class=\"sy2\">--</span><br/>        <span class=\"co1\">// work up left side</span><br/>        <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> bottom<span class=\"sy1\">;</span> r &gt;<span class=\"sy2\">=</span> top<span class=\"sy1\">;</span> r<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>left<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        left<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// center (last) element</span><br/>    a<span class=\"sy1\">[</span>top<span class=\"sy3\">*</span>n<span class=\"sy3\">+</span>left<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> i<br/>\u00a0<br/>    <span class=\"co1\">// print</span><br/>    w <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span>n<span class=\"sy3\">*</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%*d \"</span><span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span>n <span class=\"sy3\">==</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 54, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20enum\"><span class=\"kw2\">enum</span></a> Direction <span class=\"br0\">{</span><br/>    East<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, South<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, West<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, North<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> _n<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> stepDelta<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> bound<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> Direction<span class=\"br0\">(</span>delta<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        stepDelta <span class=\"sy0\">=</span> delta<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> setN<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Direction._n <span class=\"sy0\">=</span> n<br/>        North.<span class=\"me1\">bound</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        South.<span class=\"me1\">bound</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        West.<span class=\"me1\">bound</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        East.<span class=\"me1\">bound</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> move<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dir <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> newIJDir <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>i,j<span class=\"br0\">]</span>,stepDelta<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">+</span> dir<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>North.<span class=\"me1\">bound</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span>South.<span class=\"me1\">bound</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20contains\"><span class=\"kw6\">contains</span></a><span class=\"br0\">(</span>newIJDir<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>West.<span class=\"me1\">bound</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span>East.<span class=\"me1\">bound</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20contains\"><span class=\"kw6\">contains</span></a><span class=\"br0\">(</span>newIJDir<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            newIJDir<br/>        <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">++</span>dir<span class=\"br0\">)</span>.<span class=\"me1\">move</span><span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?as_q=Object&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Object</span></a> next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> North: West.<span class=\"me1\">bound</span><span class=\"sy0\">++;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> East<span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> East: North.<span class=\"me1\">bound</span><span class=\"sy0\">++;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> South<span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> South: East.<span class=\"me1\">bound</span><span class=\"sy0\">--;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> West<span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> West: South.<span class=\"me1\">bound</span><span class=\"sy0\">--;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> North<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> spiralMatrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> M <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>n <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    Direction.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> n<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dir <span class=\"sy0\">=</span> Direction.<span class=\"me1\">East</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span>n<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> k <span class=\"sy0\">-&gt;</span><br/>        M<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<br/>        <span class=\"br0\">(</span>i,j,dir<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>n<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>            <span class=\"sy0\">?</span> dir.<span class=\"me1\">move</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> \\<br/>           \u00a0: <span class=\"br0\">[</span>i,j,dir<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    M<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>grade xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"sy0\">.</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> xs <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>values n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle\"><span class=\"kw3\">cycle</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span>n<span class=\"br0\">]</span><br/>counts n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n:<span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>ap <span class=\"br0\">(</span>:<span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a><span class=\"br0\">)</span>  <span class=\"sy0\">$</span> <span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>reshape n <span class=\"sy0\">=</span> unfoldr <span class=\"br0\">(</span>\\xs <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> xs <span class=\"kw1\">then</span> Nothing <span class=\"kw1\">else</span> Just <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> n xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>spiral n <span class=\"sy0\">=</span> reshape n <span class=\"sy0\">.</span> grade<span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl1\"><span class=\"kw3\">scanl1</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> replicate <span class=\"br0\">(</span>counts n<span class=\"br0\">)</span> <span class=\"br0\">(</span>values n<span class=\"br0\">)</span><br/>displayRow <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> intercalate <span class=\"st0\">\" \"</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a> displayRow <span class=\"sy0\">$</span> spiral <span class=\"nu0\">5</span></pre>"}, {"lang": "Icon and Unicon", "loc": 28, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span>        <span class=\"co1\"># spiral matrix</span><br/>N <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">|</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>           <span class=\"co1\"># N=1... (dfeault 5)</span><br/>WriteMatrix<span class=\"br0\">(</span>SpiralMatrix<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> WriteMatrix<span class=\"br0\">(</span>M<span class=\"br0\">)</span>             <span class=\"co1\">#: write the matrix</span><br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> M<span class=\"br0\">[</span>r <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>M<span class=\"sy1\">,</span> c <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>M<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>x<span class=\"sy1\">|</span><span class=\"st0\">\"-\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw1\">if</span> c <span class=\"sy1\">=</span> <span class=\"sy1\">*</span>M<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SpiralMatrix<span class=\"br0\">(</span>N<span class=\"br0\">)</span>            <span class=\"co1\">#: create spiral matrix</span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>M <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>    <span class=\"co1\"># build empty matrix NxN</span><br/>                                     <span class=\"co1\"># setup before starting first turn</span><br/>corner <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span>                          <span class=\"co1\"># . corner we're at       </span><br/>i <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span>                              <span class=\"co1\"># . cell contents  </span><br/>r<span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">;</span> c <span class=\"sy1\">:=</span><span class=\"nu0\">0</span>                        <span class=\"co1\"># . row &amp; col </span><br/>cincr <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>sin<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\"># . column incr</span><br/>\u00a0<br/><span class=\"kw1\">until</span> i <span class=\"sy1\">&gt;</span> N<span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   rincr <span class=\"sy1\">:=</span> cincr                              <span class=\"co1\"># row incr follows col                                  </span><br/>   cincr <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>sin<span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">pi</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>corner<span class=\"sy1\">+:=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\"># col incr at each corner</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>run <span class=\"sy1\">:=</span> N<span class=\"sy1\">-</span>corner<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span>      <span class=\"co1\"># shorten run to 0 at U/R &amp; L/L </span><br/>   <span class=\"kw1\">every</span> run <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> by <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span>                     <br/>      M<span class=\"br0\">[</span>r <span class=\"sy1\">+:=</span> rincr<span class=\"sy1\">,</span>c <span class=\"sy1\">+:=</span> cincr<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> i <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>    <span class=\"co1\"># move, count, and fill</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> M<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">spiral =: ,~ $ [: /: }<a class=\"__cf_email__\" data-cfemail=\"fad4ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">2</span> # &gt;:@<a class=\"__cf_email__\" data-cfemail=\"fc95d2bcd1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">)</span> +/\\@# &lt;:@+: $ <span class=\"sy0\">(</span>, -<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;,<span class=\"sy0\">)</span><br/>\u00a0<br/>   spiral <span class=\"nu0\">5</span><br/> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">15</span> <span class=\"nu0\">16</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">14</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span> <span class=\"nu0\">19</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">13</span> <span class=\"nu0\">22</span> <span class=\"nu0\">21</span> <span class=\"nu0\">20</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">12</span> <span class=\"nu0\">11</span> <span class=\"nu0\">10</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">8</span></pre>"}, {"lang": "Java", "loc": 51, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Blah <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print2dArray<span class=\"br0\">(</span>getSpiralArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> getSpiralArray<span class=\"br0\">(</span><span class=\"kw3\">int</span> dimension<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> spiralArray = <span class=\"kw2\">new</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span>dimension<span class=\"br0\">]</span><span class=\"br0\">[</span>dimension<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">int</span> numConcentricSquares = <span class=\"br0\">(</span><span class=\"kw3\">int</span><span class=\"br0\">)</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dimension<span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">int</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">int</span> sideLen = dimension<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">int</span> currNum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numConcentricSquares<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"co1\">// do top side</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sideLen<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        spiralArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i + j<span class=\"br0\">]</span> = currNum++<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"co1\">// do right side</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sideLen<span class=\"sy0\">;</span> j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        spiralArray<span class=\"br0\">[</span>i + j<span class=\"br0\">]</span><span class=\"br0\">[</span>dimension - <span class=\"nu0\">1</span> - i<span class=\"br0\">]</span> = currNum++<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"co1\">// do bottom side</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j = sideLen - <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> -<span class=\"nu0\">1</span><span class=\"sy0\">;</span> j--<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        spiralArray<span class=\"br0\">[</span>dimension - <span class=\"nu0\">1</span> - i<span class=\"br0\">]</span><span class=\"br0\">[</span>i + j<span class=\"br0\">]</span> = currNum++<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"co1\">// do left side</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j = sideLen - <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j--<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        spiralArray<span class=\"br0\">[</span>i + j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> = currNum++<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      sideLen -= <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> spiralArray<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> print2dArray<span class=\"br0\">(</span><span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row\u00a0: array<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> elem\u00a0: row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d\"</span>, elem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 22, "block": "<pre class=\"javascript highlighted_source\">spiralArray <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>edge<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> arr <span class=\"sy0\">=</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>edge<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> edge<span class=\"sy0\">,</span><br/>        total <span class=\"sy0\">=</span> edge <span class=\"sy0\">*</span> edge<span class=\"sy0\">--,</span><br/>        dx <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> dy <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>y<span class=\"br0\">)</span> arr<span class=\"br0\">[</span><span class=\"sy0\">--</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> total<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        arr<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">++;</span><br/>        x <span class=\"sy0\">+=</span> dx<span class=\"sy0\">;</span> y <span class=\"sy0\">+=</span> dy<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>j <span class=\"sy0\">==</span> edge<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dy <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>x<span class=\"sy0\">++;</span> y<span class=\"sy0\">++;</span> edge <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>            j <span class=\"sy0\">=</span> dx<span class=\"sy0\">;</span> dx <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>dy<span class=\"sy0\">;</span> dy <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>       <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> arr<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// T E S T:</span><br/>arr <span class=\"sy0\">=</span> spiralArray<span class=\"br0\">(</span>edge <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>y<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> edge<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span> console.<span class=\"me1\">log</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 26, "block": "<pre class=\"text highlighted_source\"># Create an m x n matrix<br/> def matrix(m; n; init):<br/>   if m == 0 then []<br/>   elif m == 1 then [range(0;n)] | map(init)<br/>   elif m &gt; 0 then<br/>     matrix(1;n;init) as $row<br/>     | [range(0;m)] | map( $row )<br/>   else error(\"matrix\\(m);_;_) invalid\")<br/>   end\u00a0;<br/>\u00a0<br/># Print a matrix neatly, each cell occupying n spaces<br/>def neatly(n):<br/>  def right: tostring | ( \" \" * (n-length) + .);<br/>  . as $in<br/>  | length as $length<br/>  | reduce range (0;$length) as $i<br/>      (\"\"; . + reduce range(0;$length) as $j<br/>      (\"\"; \"\\(.)\\($in[$i][$j] | right )\" ) + \"\\n\" )\u00a0;<br/>\u00a0<br/>def right:<br/>  if   . == [1,  0] then [ 0, -1]<br/>  elif . == [0, -1] then [-1,  0]<br/>  elif . == [-1, 0] then [ 0,  1]<br/>  elif . == [0,  1] then [ 1,  0]<br/>  else error(\"invalid direction: \\(.)\")<br/>  end;</pre>"}, {"lang": "Julia", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>immutable Spiral<br/>    m::Int<br/>    n::Int<br/>    cmax::Int<br/>    dir::Array{Array{Int,1},1}<br/>    bdelta::Array{Array{Int,1},1}<br/>end<br/>\u00a0<br/>function Spiral(m::Int, n::Int)<br/>    cmax = m*n<br/>    dir = Array{Int,1}[[0,1], [1,0], [0,-1], [-1,0]]<br/>    bdelta = Array{Int,1}[[0,0,0,1], [-1,0,0,0],<br/>                          [0,-1,0,0], [0,0,1,0]]<br/>    Spiral(m, n, cmax, dir, bdelta)<br/>end<br/>\u00a0<br/>function spiral(m::Int, n::Int)<br/>    0&lt;m&amp;&amp;0&lt;n || error(\"The matrix dimensions must be positive.\")<br/>    Spiral(m, n)<br/>end<br/>spiral(n::Int) = spiral(n, n)<br/>\u00a0<br/>type SpState<br/>    cnt::Int<br/>    dirdex::Int<br/>    cell::Array{Int,1}<br/>    bounds::Array{Int,1}<br/>end<br/>\u00a0<br/>Base.length(sp::Spiral) = sp.cmax<br/>Base.start(sp::Spiral) = SpState(1, 1, [1,1], [sp.n,sp.m,1,1])<br/>Base.done(sp::Spiral, sps::SpState) = sps.cnt &gt; sp.cmax<br/>\u00a0<br/>function Base.next(sp::Spiral, sps::SpState)<br/>    s = sub2ind((sp.m, sp.n), sps.cell[1], sps.cell[2])<br/>    if sps.cell[rem1(sps.dirdex+1, 2)] == sps.bounds[sps.dirdex]<br/>        sps.bounds += sp.bdelta[sps.dirdex]<br/>        sps.dirdex = rem1(sps.dirdex+1, 4)<br/>    end<br/>    sps.cell += sp.dir[sps.dirdex]<br/>    sps.cnt += 1<br/>    return (s, sps)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Vector <span class=\"sy0\">=</span> IntArray<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Vector<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun spiralMatrix<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> Vector<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value <span class=\"sy0\">=</span> -n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        value <span class=\"sy0\">=</span> -value / n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum +<span class=\"sy0\">=</span> value<br/>            result<span class=\"br0\">[</span>sum / n<span class=\"br0\">]</span><span class=\"br0\">[</span>sum <span class=\"sy0\">%</span> n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos++<br/>        <span class=\"br0\">}</span><br/>        value <span class=\"sy0\">*=</span> n<br/>        count--<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum +<span class=\"sy0\">=</span> value<br/>            result<span class=\"br0\">[</span>sum / n<span class=\"br0\">]</span><span class=\"br0\">[</span>sum <span class=\"sy0\">%</span> n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printMatrix<span class=\"br0\">(</span>spiralMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span>spiralMatrix<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 76, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">nomainwin</span><br/>\u00a0<br/><span class=\"kw3\">UpperLeftX</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><br/><span class=\"kw3\">UpperLeftY</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><br/><span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span><span class=\"nu0\">900</span><br/><span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span><span class=\"nu0\">930</span><br/>\u00a0<br/><span class=\"kw1\">statictext</span> <span class=\"sy0\">#</span>w.st<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">850</span><span class=\"sy0\">,</span> <span class=\"nu0\">870</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><br/>\u00a0<br/><span class=\"kw1\">open</span> <span class=\"st0\">\"Spiral matrix\"</span> <span class=\"kw1\">for</span> graphics_nsb_nf <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>w<br/>\u00a0<br/><span class=\"sy0\">#</span>w <span class=\"st0\">\"trapclose [quit]\"</span><br/><span class=\"sy0\">#</span>w <span class=\"st0\">\"backcolor darkblue; color cyan; fill darkblue\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> N <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">50</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w.st <span class=\"st0\">\"!font courier_new \"</span>; <span class=\"kw2\">int</span><span class=\"br0\">(</span>  <span class=\"nu0\">60</span> <span class=\"sy0\">/</span>N<span class=\"br0\">)</span>; <span class=\"st0\">\" bold\"</span><br/>    <span class=\"sy0\">#</span>w    <span class=\"st0\">\"down; font arial \"</span>;  <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">240</span> <span class=\"sy0\">/</span>N<span class=\"br0\">)</span>; <span class=\"st0\">\" bold\"</span><br/>\u00a0<br/>    g$ <span class=\"sy0\">=</span><span class=\"st0\">\"ruld\"</span>                                  <span class=\"co1\">'   direction sequence</span><br/>    <span class=\"kw1\">if</span> N<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> pg <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">else</span> pg <span class=\"sy0\">=</span><span class=\"nu0\">0</span>     <span class=\"co1\">'   pointer to current direction</span><br/>                                                <span class=\"co1\">'   last move is left or right depending on N even/odd</span><br/>    d$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N <span class=\"sy0\">-</span><span class=\"nu0\">1</span>                            <span class=\"co1\">'   calculate direction to move</span><br/>        d$ <span class=\"sy0\">=</span>nChar$<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> g$<span class=\"sy0\">,</span> pg <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>d$<br/>        pg <span class=\"sy0\">=</span><span class=\"br0\">(</span> pg <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">4</span><br/>        d$ <span class=\"sy0\">=</span>nChar$<span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> g$<span class=\"sy0\">,</span> pg <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>d$<br/>        pg <span class=\"sy0\">=</span><span class=\"br0\">(</span> pg <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    d$ <span class=\"sy0\">=</span>nChar$<span class=\"br0\">(</span> N <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>d$                  <span class=\"co1\">'   first row</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w.st <span class=\"st0\">\"   N =\"</span>; N; <span class=\"st0\">\"  \"</span>; d$<br/>\u00a0<br/>    xp <span class=\"sy0\">=</span><span class=\"nu0\">60</span> <span class=\"sy0\">+</span><span class=\"nu0\">250</span> <span class=\"sy0\">/</span>N<br/>    yp <span class=\"sy0\">=</span><span class=\"nu0\">80</span> <span class=\"sy0\">+</span><span class=\"nu0\">250</span> <span class=\"sy0\">/</span>N<br/>\u00a0<br/>    stp <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">750</span> <span class=\"sy0\">/</span>N<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> N^<span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        dir$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> d$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> dir$<br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"r\"</span><br/>                xp <span class=\"sy0\">=</span>xp <span class=\"sy0\">+</span>stp<br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"d\"</span><br/>                yp <span class=\"sy0\">=</span>yp <span class=\"sy0\">+</span>stp<br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"l\"</span><br/>                xp <span class=\"sy0\">=</span>xp <span class=\"sy0\">-</span>stp<br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"u\"</span><br/>                yp <span class=\"sy0\">=</span>yp <span class=\"sy0\">-</span>stp<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>\u00a0<br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"place \"</span>; xp; <span class=\"st0\">\" \"</span>; yp<br/>        <span class=\"sy0\">#</span>w <span class=\"st0\">\"\\\"</span>; i<br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">timer</span> <span class=\"nu0\">3000</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">wait</span><br/>  <span class=\"br0\">[</span><span class=\"kw1\">on</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">timer</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"cls\"</span><br/>    <span class=\"kw1\">scan</span><br/><span class=\"kw1\">next</span> N<br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">function</span> nChar$<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> i$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/>        nChar$ <span class=\"sy0\">=</span>nChar$ <span class=\"sy0\">+</span>i$<br/>    <span class=\"kw1\">next</span> i<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"br0\">[</span>quit<span class=\"br0\">]</span><br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span>w<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\">av<span class=\"sy0\">,</span> sn <span class=\"sy0\">=</span> <span class=\"kw3\">math.abs</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">return</span> s<span class=\"sy0\">~=</span><span class=\"nu0\">0</span> <span class=\"kw2\">and</span> s<span class=\"sy0\">/</span>av<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> sindex<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"co1\">-- returns the value at (x, y) in a spiral that starts at 1 and goes outwards</span><br/>  <span class=\"kw1\">if</span> y <span class=\"sy0\">==</span> <span class=\"sy0\">-</span>x <span class=\"kw2\">and</span> y <span class=\"sy0\">&gt;=</span> x <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> l <span class=\"sy0\">=</span> <span class=\"kw3\">math.max</span><span class=\"br0\">(</span>av<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">,</span> av<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>l<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>l<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>l<span class=\"sy0\">*</span>sn<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>y<span class=\"br0\">)</span><span class=\"sy0\">+</span>sn<span class=\"br0\">(</span>y<span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span>x<span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>l<span class=\"sy0\">-</span><span class=\"br0\">(</span>av<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">==</span>l <span class=\"kw2\">and</span> sn<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">*</span>x <span class=\"kw2\">or</span> sn<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">*</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- OH GOD WHAT</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> spiralt<span class=\"br0\">(</span>side<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> stop <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>side<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"br0\">(</span>side<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> side <span class=\"kw1\">do</span><br/>    ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> side <span class=\"kw1\">do</span><br/>      ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> side<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> sindex<span class=\"br0\">(</span>stop <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>start <span class=\"sy0\">+</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">--moves the coordinates so (0,0) is at the center of the spiral</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>spiralt<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> j<span class=\"sy0\">,</span> u <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>u <span class=\"sy0\">..</span> <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 16, "block": "<pre class=\"text highlighted_source\">AddSquareRing[x_List/;<a class=\"__cf_email__\" data-cfemail=\"d194a0a4b0bd91\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@Dimensions[x] &amp;&amp; Length[Dimensions[x]]==2]:=Module[{new=x,size,smallest},<br/> size=Length[x];<br/> smallest=x[[1,1]];<br/> Do[<br/>  new[[i]]=Prepend[new[[i]],smallest-i];<br/>  new[[i]]=Append[new[[i]],smallest-3 size+i-3]<br/> ,{i,size}];<br/> PrependTo[new,Range[smallest-3size-3-size-1,smallest-3size-3]];<br/> AppendTo[new,Range[smallest-size-1,smallest-size-size-2,-1]];<br/> new<br/>]<br/>MakeSquareSpiral[size_Integer/;size&gt;0]:=Module[{largest,start,times},<br/> start=size^2+If[Mod[size,2]==0,{{-4,-3},{-1,-2}},{{-1}}];<br/> times=If[Mod[size,2]==0,size/2-1,(size-1)/2];<br/> Nest[AddSquareRing,start,times]<br/>]</pre>"}, {"lang": "MATLAB", "loc": 11, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> matrix = reverseSpiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    matrix = <span class=\"br0\">(</span>-spiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>+n^<span class=\"nu0\">2</span>;<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span><br/>        matrix = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/flipud.html\"><span class=\"kw2\">flipud</span></a><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">else</span><br/>        matrix = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span>matrix<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"co1\">%reverseSpiral</span></pre>"}, {"lang": "Maxima", "loc": 40, "block": "<pre class=\"text highlighted_source\">spiral(n)\u00a0:= block([a, i, j, k, p, di, dj, vi, vj, imin, imax, jmin, jmax],<br/>a: zeromatrix(n, n),<br/>vi: [1, 0, -1, 0],<br/>vj: [0, 1, 0, -1],<br/>imin: 0,<br/>imax: n,<br/>jmin: 1,<br/>jmax: n + 1,<br/>p: 1,<br/>di: vi[p],<br/>dj: vj[p],<br/>i: 1,<br/>j: 1,<br/>for k from 1 thru n*n do (<br/>   a[j, i]: k,<br/>   i: i + di,<br/>   j: j + dj,<br/>   if i &lt; imin or i &gt; imax or j &lt; jmin or j &gt; jmax then (<br/>      i: i - di,<br/>      j: j - dj,<br/>      p: mod(p, 4) + 1,<br/>      di: vi[p],<br/>      dj: vj[p],<br/>      i: i + di,<br/>      j: j + dj,<br/>      if p = 1 then imax: imax - 1<br/>      elseif p = 2 then jmax: jmax - 1<br/>      elseif p = 3 then imin: imin + 1<br/>      else jmin: jmin + 1<br/>   )<br/>),<br/>a<br/>)$<br/>\u00a0<br/>spiral(5);<br/>/* matrix([ 1,  2,  3,  4,  5],<br/>          [16, 17, 18, 19,  6],<br/>          [15, 24, 25, 20,  7],<br/>          [14, 23, 22, 21,  8],<br/>          [13, 12, 11, 10,  9]) */</pre>"}, {"lang": "NetRexx", "loc": 93, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">parse</span> arg size .<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>size.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'W'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>  printArray<span class=\"br0\">(</span>generateArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  printArray<span class=\"br0\">(</span>generateArray<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  printArray<span class=\"br0\">(</span>generateArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw3\">end</span><br/><span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>  printArray<span class=\"br0\">(</span>generateArray<span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/>method generateArray<span class=\"br0\">(</span>dimension = int<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> int<span class=\"br0\">[</span>,<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">-- the output array</span><br/>  array = int<span class=\"br0\">[</span>dimension, dimension<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">-- get the number of squares, including the center one if</span><br/>  <span class=\"co1\">-- the dimension is odd</span><br/>\u00a0<br/>  squares = dimension\u00a0% <span class=\"nu0\">2</span> + dimension <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>  <span class=\"co1\">-- length of a side for the current square</span><br/>  sidelength = dimension<br/>  current = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">0</span> to squares - <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">-- do each side of the current square</span><br/>    <span class=\"co1\">-- top side</span><br/>    <span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">0</span> to sidelength - <span class=\"nu0\">1</span><br/>      array<span class=\"br0\">[</span>i_, i_ + j_<span class=\"br0\">]</span> = current<br/>      current = current + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>    <span class=\"co1\">-- down the right side</span><br/>    <span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">1</span> to sidelength - <span class=\"nu0\">1</span><br/>      array<span class=\"br0\">[</span>i_ + j_, dimension - <span class=\"nu0\">1</span> - i_<span class=\"br0\">]</span> = current<br/>      current = current + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>    <span class=\"co1\">-- across the bottom</span><br/>    <span class=\"kw1\">loop</span> j_ = sidelength - <span class=\"nu0\">2</span> to <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><br/>      array<span class=\"br0\">[</span>dimension - <span class=\"nu0\">1</span> - i_, i_ + j_<span class=\"br0\">]</span> = current<br/>      current = current + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>    <span class=\"co1\">-- and up the left side</span><br/>    <span class=\"kw1\">loop</span> j_ = sidelength - <span class=\"nu0\">2</span> to <span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><br/>      array<span class=\"br0\">[</span>i_ + j_, i_<span class=\"br0\">]</span> = current<br/>      current = current + <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span> j_<br/>\u00a0<br/>    <span class=\"co1\">-- reduce the length of the side by two rows</span><br/>    sidelength = sidelength - <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">end</span> i_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> array<br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/>method printArray<span class=\"br0\">(</span>array = int<span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  dimension = array<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me0\">length</span><br/>  rl = formatSize<span class=\"br0\">(</span>array<span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">0</span> to dimension - <span class=\"nu0\">1</span><br/>    line = Rexx<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> j_ = <span class=\"nu0\">0</span> to dimension - <span class=\"nu0\">1</span><br/>      line = line Rexx<span class=\"br0\">(</span>array<span class=\"br0\">[</span>i_, j_<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>rl<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> j_<br/>    line = line <span class=\"st0\">\"|\"</span><br/>    <span class=\"kw1\">say</span> line<br/>    <span class=\"kw3\">end</span> i_<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/>method formatSize<span class=\"br0\">(</span>array = int<span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  dim = array<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me0\">length</span><br/>  maxNum = Rexx<span class=\"br0\">(</span>dim <span class=\"sy0\">*</span> dim - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> maxNum<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 43, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>type Pos = tuple[x, y: int]<br/>\u00a0<br/>proc newSeqWith[T](len: int, init: T): seq[T] =<br/>  result = newSeq[T] len<br/>  for i in 0 .. &lt;len:<br/>    result[i] = init<br/>\u00a0<br/>proc `^`*(base: int, exp: int): int =<br/>  var (base, exp) = (base, exp)<br/>  result = 1<br/>\u00a0<br/>  while exp\u00a0!= 0:<br/>    if (exp and 1)\u00a0!= 0:<br/>      result *= base<br/>    exp = exp shr 1<br/>    base *= base<br/>\u00a0<br/>proc `$`(m: seq[seq[int]]): string =<br/>  result = \"\"<br/>  for r in m:<br/>    for c in r:<br/>      result.add align($c, 2) &amp; \" \"<br/>    result.add \"\\n\"<br/>\u00a0<br/>proc spiral(n): auto =<br/>  result = newSeqWith(n, newSeqWith[int](n, -1))<br/>  var dx = 1<br/>  var dy, x, y = 0<br/>  for i in 0 .. &lt;(n^2):<br/>    result[y][x] = i<br/>    let (nx, ny) = (x+dx, y+dy)<br/>    if nx in 0 .. &lt;n and ny in 0 .. &lt;n and result[ny][nx] == -1:<br/>      x = nx<br/>      y = ny<br/>    else:<br/>      swap dx, dy<br/>      dx = -dx<br/>      x = x + dx<br/>      y = y + dy<br/>\u00a0<br/>echo spiral(5)</pre>"}, {"lang": "OCaml", "loc": 39, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> next_dir <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span>  <span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span>  <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span>  <span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span>  <span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span>  <span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span>  <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><br/>  <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> assert <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"kw1\">let</span> next_pos <span class=\"re1\">~pos</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"re1\">~dir</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>nx,ny<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">+</span>nx, y<span class=\"sy0\">+</span>ny<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> next_cell ar <span class=\"re1\">~pos</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"re1\">~dir</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>nx,ny<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>nx<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>y<span class=\"sy0\">+</span>ny<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">let</span> for_loop n init fn <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i v <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">then</span> aux <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn i v<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">0</span> init<br/>\u00a0<br/><span class=\"kw1\">let</span> spiral <span class=\"re1\">~n</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ar <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix n n <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> dir <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> set <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> i <span class=\"sy0\">=</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> i <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> step <span class=\"br0\">(</span>pos, dir<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> next_cell ar pos dir <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>next_pos pos dir, dir<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> dir <span class=\"sy0\">=</span> next_dir dir <span class=\"kw1\">in</span> <span class=\"br0\">(</span>next_pos pos dir, dir<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  for_loop <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>pos, dir<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"br0\">(</span>pos, dir<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> set pos i<span class=\"sy0\">;</span> step <span class=\"br0\">(</span>pos, dir<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>ar<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> line <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%2d\"</span><span class=\"br0\">)</span> line<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> print<span class=\"br0\">(</span>spiral <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 21, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> a <span class=\"sy3\">=</span> spiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  a <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/ones.html\"><span class=\"kw5\">ones</span></a><span class=\"br0\">(</span>n<span class=\"sy1\">*</span>n<span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  u <span class=\"sy3\">=</span> <span class=\"sy1\">-</span><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> n<span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>v <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/ones.html\"><span class=\"kw5\">ones</span></a><span class=\"br0\">(</span>n<span class=\"sy5\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> k <span class=\"sy3\">=</span> n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">1</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>k<span class=\"sy5\">;</span><br/>    a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"sy1\">+</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <span class=\"sy3\">=</span> u<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"sy1\">-</span>u<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"sy1\">+</span><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy1\">+</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> v<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"sy1\">-</span>v<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">+=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>k<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/>  a<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/cumsum.html\"><span class=\"kw5\">cumsum</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span>n<span class=\"sy1\">*</span>n<span class=\"sy5\">;</span><br/>  a <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/reshape.html\"><span class=\"kw5\">reshape</span></a><span class=\"br0\">(</span>a<span class=\"sy5\">,</span> n<span class=\"sy5\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">'-</span><span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;</span> spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw3\">ans</span> <span class=\"sy3\">=</span><br/>\u00a0<br/>    <span class=\"nu0\">0</span>    <span class=\"nu0\">1</span>    <span class=\"nu0\">2</span>    <span class=\"nu0\">3</span>    <span class=\"nu0\">4</span><br/>   <span class=\"nu0\">15</span>   <span class=\"nu0\">16</span>   <span class=\"nu0\">17</span>   <span class=\"nu0\">18</span>    <span class=\"nu0\">5</span><br/>   <span class=\"nu0\">14</span>   <span class=\"nu0\">23</span>   <span class=\"nu0\">24</span>   <span class=\"nu0\">19</span>    <span class=\"nu0\">6</span><br/>   <span class=\"nu0\">13</span>   <span class=\"nu0\">22</span>   <span class=\"nu0\">21</span>   <span class=\"nu0\">20</span>    <span class=\"nu0\">7</span><br/>   <span class=\"nu0\">12</span>   <span class=\"nu0\">11</span>   <span class=\"nu0\">10</span>    <span class=\"nu0\">9</span>    <span class=\"nu0\">8</span></pre>"}, {"lang": "ooRexx", "loc": 57, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"kw1\">call</span> printArray generateArray<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> printArray generateArray<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> printArray generateArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>::routine generateArray<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> dimension<br/>  <span class=\"co1\">-- the output array</span><br/>  array = <span class=\"sy0\">.</span>array~new<span class=\"br0\">(</span>dimension, dimension<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">-- get the number of squares, including the center one if</span><br/>  <span class=\"co1\">-- the dimension is odd</span><br/>  squares = dimension\u00a0% <span class=\"nu0\">2</span> + dimension <span class=\"sy0\">//</span> <span class=\"nu0\">2</span><br/>  <span class=\"co1\">-- length of a side for the current square</span><br/>  sidelength = dimension<br/>  current = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> squares<br/>      <span class=\"co1\">-- do each side of the current square</span><br/>      <span class=\"co1\">-- top side</span><br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> sidelength - <span class=\"nu0\">1</span><br/>          array<span class=\"br0\">[</span>i, i + j<span class=\"br0\">]</span> = current<br/>          current += <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- down the right side</span><br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> sidelength - <span class=\"nu0\">1</span><br/>          array<span class=\"br0\">[</span>i + j, dimension - i + <span class=\"nu0\">1</span><span class=\"br0\">]</span> = current<br/>          current += <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- across the bottom</span><br/>      <span class=\"kw1\">loop</span> j = sidelength - <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> <span class=\"nu0\">0</span> <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span><br/>          array<span class=\"br0\">[</span>dimension - i + <span class=\"nu0\">1</span>, i + j<span class=\"br0\">]</span> = current<br/>          current += <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- and up the left side</span><br/>      <span class=\"kw1\">loop</span> j = sidelength - <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> <span class=\"nu0\">1</span> <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span><br/>          array<span class=\"br0\">[</span>i + j, i<span class=\"br0\">]</span> = current<br/>          current += <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- reduce the length of the side by two rows</span><br/>      sidelength -= <span class=\"nu0\">2</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> array<br/>\u00a0<br/>::routine printArray<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> array<br/>  dimension = array~dimension<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> dimension<br/>      line = <span class=\"st0\">\"|\"</span><br/>      <span class=\"kw1\">loop</span> j = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> dimension<br/>          line = line array<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span>~<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>      line = line <span class=\"st0\">\"|\"</span><br/>      <span class=\"kw1\">say</span> line<br/>   <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 42, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Spiral</span> N<span class=\"br0\">}</span><br/>     <span class=\"co1\">%% create nested array</span><br/>     Arr = <span class=\"br0\">{</span>Array<span class=\"sy0\">.</span>new 1 N <span class=\"kw1\">unit</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">for</span> Y <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>N <span class=\"kw1\">do</span> Arr<span class=\"sy0\">.</span>Y <span class=\"sy0\">:=</span> <span class=\"br0\">{</span>Array<span class=\"sy0\">.</span>new 1 N 0<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>     <span class=\"co1\">%% fill it recursively with increasing numbers</span><br/>     C = <span class=\"br0\">{</span>Counter 0<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Fill Arr 1 N C<span class=\"br0\">}</span><br/>     Arr<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Fill</span> Arr S E C<span class=\"br0\">}</span><br/>     <span class=\"co1\">%% go right</span><br/>     <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> S<span class=\"sy0\">..</span>E <span class=\"kw1\">do</span><br/>        Arr<span class=\"sy0\">.</span>S<span class=\"sy0\">.</span>X <span class=\"sy0\">:=</span> <span class=\"br0\">{</span>C<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"co1\">%% go down</span><br/>     <span class=\"kw1\">for</span> Y <span class=\"kw1\">in</span> S<span class=\"sy0\">+</span>1<span class=\"sy0\">..</span>E <span class=\"kw1\">do</span><br/>        Arr<span class=\"sy0\">.</span>Y<span class=\"sy0\">.</span>E <span class=\"sy0\">:=</span> <span class=\"br0\">{</span>C<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"co1\">%% go left</span><br/>     <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> E<span class=\"sy0\">-</span>1<span class=\"sy0\">..</span>S;<span class=\"sy0\">~</span>1 <span class=\"kw1\">do</span><br/>        Arr<span class=\"sy0\">.</span>E<span class=\"sy0\">.</span>X <span class=\"sy0\">:=</span> <span class=\"br0\">{</span>C<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"co1\">%% go up</span><br/>     <span class=\"kw1\">for</span> Y <span class=\"kw1\">in</span> E<span class=\"sy0\">-</span>1<span class=\"sy0\">..</span>S<span class=\"sy0\">+</span>1;<span class=\"sy0\">~</span>1 <span class=\"kw1\">do</span><br/>        Arr<span class=\"sy0\">.</span>Y<span class=\"sy0\">.</span>S <span class=\"sy0\">:=</span> <span class=\"br0\">{</span>C<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"co1\">%% fill the inner rectangle</span><br/>     <span class=\"kw1\">if</span> E <span class=\"sy0\">-</span> S <span class=\"sy0\">&gt;</span> 1 <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Fill Arr S<span class=\"sy0\">+</span>1 E<span class=\"sy0\">-</span>1 C<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Counter</span> N<span class=\"br0\">}</span><br/>     C = <span class=\"br0\">{</span>NewCell N<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span><br/>        C <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>C <span class=\"sy0\">+</span> 1<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>Spiral 5<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">spiral<span class=\"br0\">(</span>dim<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  my <span class=\"br0\">(</span>M <span class=\"sy0\">=</span> <span class=\"kw1\">matrix</span><span class=\"br0\">(</span>dim<span class=\"sy0\">,</span> dim<span class=\"br0\">)</span><span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> s <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> q <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> dim<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> dim<span class=\"sy0\">-</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> M<span class=\"br0\">[</span>p<span class=\"sy0\">,</span>q<span class=\"sy0\">+=</span>s<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> dim<span class=\"sy0\">-</span>n<span class=\"sy0\">,</span> M<span class=\"br0\">[</span>p<span class=\"sy0\">+=</span>s<span class=\"sy0\">,</span>q<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    s <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>s<span class=\"sy0\">;</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  M<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 71, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Spiralmat<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tDir <span class=\"sy3\">=</span> <span class=\"br0\">(</span>left<span class=\"sy1\">,</span>down<span class=\"sy1\">,</span>right<span class=\"sy1\">,</span>up<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  tdxy <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>           dx<span class=\"sy1\">,</span>dy<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tdeltaDir <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tDir<span class=\"br0\">]</span> <span class=\"kw1\">of</span> tdxy<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  Nextdir <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tDir<span class=\"br0\">]</span> <span class=\"kw1\">of</span> tDir <span class=\"sy3\">=</span> <span class=\"br0\">(</span>down<span class=\"sy1\">,</span>right<span class=\"sy1\">,</span>up<span class=\"sy1\">,</span>left<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  cDir <span class=\"sy1\">:</span> tDeltaDir <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dx<span class=\"sy1\">:</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>dy<span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">(</span>dx<span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>dy<span class=\"sy1\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">(</span>dx<span class=\"sy1\">:</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>dy<span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"br0\">(</span>dx<span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span>dy<span class=\"sy1\">:</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  cMaxN <span class=\"sy3\">=</span> <span class=\"nu0\">32</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tSpiral <span class=\"sy3\">=</span>  <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">cMaxN</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">cMaxN</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FillSpiral<span class=\"br0\">(</span>n<span class=\"sy1\">:</span><span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>tSpiral<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  b<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span> dn<span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>y <span class=\"sy1\">:</span> <span class=\"kw4\">longInt</span><span class=\"sy1\">;</span><br/>  dir <span class=\"sy1\">:</span> tDir<span class=\"sy1\">;</span><br/>  tmpSp <span class=\"sy1\">:</span> tSpiral<span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//only for the first line</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  dn <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  tmpSp<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>  dir <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  left<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> i &lt; dn <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      inc<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      tmpSp<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>cDir<span class=\"br0\">[</span>dir<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">dx</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>y<span class=\"sy1\">,</span>cDir<span class=\"br0\">[</span>dir<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">dy</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Dir<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextDir<span class=\"br0\">[</span>dir<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> k &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"co1\">//shorten the line every second direction change</span><br/>      dn <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dn<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> dn &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//the last</span><br/>  tmpSp<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  FillSpiral <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmpSp<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  a <span class=\"sy1\">:</span> tSpiral<span class=\"sy1\">;</span><br/>  x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>n <span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">For</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span><span class=\"coMULTI\">{cMaxN}</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    A<span class=\"sy1\">:</span><span class=\"sy3\">=</span>FillSpiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> y <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">For</span> x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 21, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> spiral<br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$dy</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$nx</span><span class=\"sy0\">,</span> <span class=\"re0\">$ny</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">(</span><span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>          <span class=\"re0\">$dx</span> <span class=\"sy0\">==</span>  <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$nx</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$ny</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$nx</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">?</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span> <span class=\"re0\">$dy</span> <span class=\"sy0\">==</span>  <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$ny</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$ny</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$nx</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span> <span class=\"re0\">$dx</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$nx</span>  <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$ny</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$nx</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">?</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span> <span class=\"re0\">$dy</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$ny</span>  <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$ny</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$nx</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">?</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>spiral <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%3d\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"kw1\">foreach</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 59, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Turtle <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@dv</span> <span class=\"sy0\">=</span>  <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$points</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"co1\"># 'compass' points of neighbors on grid: north=0, northeast=1, east=2, etc.</span><br/>\u00a0<br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">loc</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">dir</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">%</span><span class=\"sy0\">.</span><span class=\"me1\">world</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">maxegg</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">range</span><span class=\"sy0\">-</span>y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> turn<span class=\"sy0\">-</span>left <span class=\"br0\">(</span><span class=\"re0\">$angle</span> <span class=\"sy0\">=</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">/</span> <span class=\"nu0\">45</span><span class=\"sy0\">;</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$points</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> turn<span class=\"sy0\">-</span>right<span class=\"br0\">(</span><span class=\"re0\">$angle</span> <span class=\"sy0\">=</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">/</span> <span class=\"nu0\">45</span><span class=\"sy0\">;</span> <span class=\"re0\">$!dir</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$points</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> lay<span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$egg</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">%!world</span><span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">@!loc</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$egg</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$!maxegg</span> <span class=\"kw3\">max</span><span class=\"sy0\">=</span> <span class=\"re0\">$egg</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$!range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span> minmax<span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$!range</span><span class=\"sy0\">-</span>y minmax<span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> look<span class=\"br0\">(</span><span class=\"re0\">$ahead</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$there</span> <span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"re0\">@dv</span><span class=\"br0\">[</span><span class=\"re0\">$!dir</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">$ahead</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">%!world</span><span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">$there</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> forward<span class=\"br0\">(</span><span class=\"re0\">$ahead</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$there</span> <span class=\"sy0\">=</span> <span class=\"re0\">@!loc</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"re0\">@dv</span><span class=\"br0\">[</span><span class=\"re0\">$!dir</span><span class=\"br0\">]</span>\u00a0\u00bb<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">$ahead</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@!loc</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$there</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> showmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$form</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"%{$!maxegg.chars}s\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$endx</span> <span class=\"sy0\">=</span> <span class=\"re0\">$!range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">$!range</span><span class=\"sy0\">-</span>y<span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"kw1\">X</span> <span class=\"re0\">$!range</span><span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"re0\">%!world</span><span class=\"br0\">{</span><span class=\"st0\">\"$x $y\"</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"re0\">$form</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">print</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$endx</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Now we can build the spiral in the normal way from outside-in like this:</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span>Int <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> Turtle<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>dir <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$counter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..^</span> <span class=\"re0\">$size</span> <span class=\"sy0\">-&gt;</span> $ <span class=\"br0\">{</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">lay</span><span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">$size</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">...</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$run</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>right<span class=\"sy0\">;</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">lay</span><span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..^</span><span class=\"re0\">$run</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">turn</span><span class=\"sy0\">-</span>right<span class=\"sy0\">;</span><br/>    <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">forward</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">lay</span><span class=\"sy0\">-</span>egg<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..^</span><span class=\"re0\">$run</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$t</span><span class=\"sy0\">.</span><span class=\"me1\">showmap</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 19, "block": "<pre class=\"text highlighted_source\">integer n = 5<br/>string fmt = sprintf(\"%%%dd\",length(sprintf(\"%d\",n*n)))<br/>integer x = 1, y = 0, c = 0, dx = 0, dy = 1, len = n<br/>sequence m = repeat(repeat(\"??\",n),n)<br/>for i=1 to 2*n do                               -- 2n runs..<br/>    for j=1 to len do                           -- of a length...<br/>        x += dx<br/>        y += dy<br/>        m[x][y] = sprintf(fmt,c)<br/>        c += 1<br/>    end for<br/>    len -= and_bits(i,1)                        -- ..-1 every other <br/>    {dx,dy} = {dy,-dx}                          -- in new direction<br/>end for<br/>\u00a0<br/>for i=1 to n do<br/>    m[i] = join(m[i])<br/>end for<br/>puts(1,join(m,\"\\n\"))</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(de spiral (N)<br/>   (prog1 (grid N N)<br/>      (let (Dir '(north east south west .)  This 'a1)<br/>         (for Val (* N N)<br/>            (=: val Val)<br/>            (setq This<br/>               (or<br/>                  (with ((car Dir) This)<br/>                     (unless (: val) This) )<br/>                  (with ((car (setq Dir (cdr Dir))) This)<br/>                     (unless (: val) This) ) ) ) ) ) ) )<br/>\u00a0<br/>(mapc<br/>   '((L)<br/>      (for This L (prin (align 3 (: val))))<br/>      (prinl) )<br/>   (spiral 5) )</pre>"}, {"lang": "PL/I", "loc": 55, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* Generates a square matrix containing the integers from 0 to N**2-1, */</span><br/><span class=\"coMULTI\">/* where N is the length of one side of the square.                    */</span><br/><span class=\"coMULTI\">/* Written 22 February 2010.                                           */</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Please type the size of the square:'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> A<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> iinc<span class=\"sy0\">,</span> jinc<span class=\"sy0\">,</span> q<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   A <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   i<span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> iinc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>             <span class=\"coMULTI\">/* back up */</span><br/>             j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span>jinc<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> iinc<span class=\"sy0\">;</span><br/>             <span class=\"coMULTI\">/* change direction */</span><br/>             <span class=\"kw1\">if</span> iinc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> jinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> iinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> jinc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> iinc <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> jinc <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> iinc <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> iinc <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> jinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> iinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> jinc <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> iinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> jinc <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> iinc <span class=\"sy0\">=</span>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jinc <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/* Take one step in the new direction */</span><br/>             i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> iinc<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> jinc<span class=\"sy0\">;</span><br/>             a<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> i<span class=\"sy0\">+</span>iinc <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">|</span> i<span class=\"sy0\">+</span>iinc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>            iinc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> jinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> j<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> jinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>iinc<span class=\"sy0\">,</span>j<span class=\"sy0\">+</span>jinc<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> jinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>jinc<span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/* j = j + jinc; /* to move on from the present (filled) position */</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> iinc<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> j<span class=\"sy0\">+</span>jinc <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">|</span> j<span class=\"sy0\">+</span>jinc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>            jinc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> iinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> iinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> iinc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> a<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>iinc<span class=\"sy0\">,</span>j<span class=\"sy0\">+</span>jinc<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> iinc <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>iinc<span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> iinc<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* to move on from the present (filled) position */</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> jinc<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"coMULTI\">/* Display the square. */</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span>i<span class=\"sy0\">,*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 36, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Spiral<span class=\"sy0\">-</span>Matrix <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Initialize variables</span><br/>    <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$Y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$Sign</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">#  Intialize array</span><br/>    <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> <span class=\"st0\">'int[,]'</span> <span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span><br/>\u00a0<br/>    <span class=\"co1\">#  Set top row</span><br/>    <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$Y</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sign</span>; <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"sy0\">,</span><span class=\"re0\">$Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  For each remaining half spiral...</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$M</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  Set the vertical quarter spiral</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$M</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$X</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sign</span>; <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"sy0\">,</span><span class=\"re0\">$Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">#  Curve the spiral</span><br/>        <span class=\"re0\">$Sign</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"re0\">$Sign</span><br/>\u00a0<br/>        <span class=\"co1\">#  Set the horizontal quarter spiral</span><br/>        <span class=\"nu0\">1</span>..<span class=\"re0\">$M</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$Y</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Sign</span>; <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"sy0\">,</span><span class=\"re0\">$Y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Convert the array to text output</span><br/>    <span class=\"re0\">$Spiral</span> <span class=\"sy0\">=</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$X</span> <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$N</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$X</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">\"<span class=\"es0\">`t</span>\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$Spiral</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>Spiral<span class=\"sy0\">-</span>Matrix <span class=\"nu0\">5</span><br/><span class=\"st0\">\"\"</span><br/>Spiral<span class=\"sy0\">-</span>Matrix <span class=\"nu0\">7</span></pre>"}, {"lang": "Prolog", "loc": 53, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/><span class=\"co1\">%  Prolog implementation: SWI-Prolog 7.2.3 </span><br/>\u00a0<br/>replace<span class=\"br0\">(</span><span class=\"br0\">[</span>_<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> <span class=\"br0\">[</span>E<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>replace<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> Xs<span class=\"br0\">)</span>    <span class=\"sy1\">:-</span><br/>  succ<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span> replace<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> Xs1<span class=\"br0\">)</span><span class=\"sy4\">,</span> Xs <span class=\"sy6\">=</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>Xs1<span class=\"br0\">]</span><span class=\"sy4\">.</span> <br/>\u00a0<br/><span class=\"co1\">% True if Xs is the Original grid with the element at (X, Y) replaces by E.</span><br/>replace_in<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> Xs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> replace<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> NH<span class=\"br0\">)</span><span class=\"sy4\">,</span> Xs <span class=\"sy6\">=</span> <span class=\"br0\">[</span>NH<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>replace_in<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> Xs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  succ<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span> replace_in<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> <span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> Xs1<span class=\"br0\">)</span><span class=\"sy4\">,</span> Xs <span class=\"sy6\">=</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>Xs1<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% True, if E is the value at (X, Y) in Xs</span><br/>get_in<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> <span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> E<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> nth0<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Xs<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span> nth0<span class=\"br0\">(</span>Y<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> E<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>create<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Mx<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>             <span class=\"co1\">% NxN grid full of nils</span><br/>  numlist<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> Ns<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"br0\">(</span>member<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> Ns<span class=\"br0\">)</span><span class=\"sy4\">,</span> X <span class=\"sy6\">=</span> nil<span class=\"br0\">)</span><span class=\"sy4\">,</span> Ls<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"br0\">(</span>member<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> Ns<span class=\"br0\">)</span><span class=\"sy4\">,</span> X <span class=\"sy6\">=</span> Ls<span class=\"br0\">)</span><span class=\"sy4\">,</span> Mx<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Depending of the direction, returns two possible coordinates and directions</span><br/><span class=\"co1\">% (C,D) that will be used in case of a turn, and (A,B) otherwise.</span><br/>ops<span class=\"br0\">(</span>right<span class=\"sy4\">,</span> <span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> D2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  A <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy4\">,</span> B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> D1 <span class=\"sy6\">=</span> right<span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> D <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy4\">,</span> D2 <span class=\"sy6\">=</span> down<span class=\"sy4\">.</span><br/>\u00a0<br/>ops<span class=\"br0\">(</span>left<span class=\"sy4\">,</span> <span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> D2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  A <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy4\">,</span> B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> D1 <span class=\"sy6\">=</span> left<span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> D <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy4\">,</span> D2 <span class=\"sy6\">=</span> up<span class=\"sy4\">.</span>  <br/>\u00a0<br/>ops<span class=\"br0\">(</span>up<span class=\"sy4\">,</span> <span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> D2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  A <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy4\">,</span> D1 <span class=\"sy6\">=</span> up<span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy4\">,</span> D <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> D2 <span class=\"sy6\">=</span> right<span class=\"sy4\">.</span><br/>\u00a0<br/>ops<span class=\"br0\">(</span>down<span class=\"sy4\">,</span> <span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> D2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  A <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> B <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy4\">,</span> D1 <span class=\"sy6\">=</span> down<span class=\"sy4\">,</span> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X<span class=\"sy4\">,</span> D <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> D2 <span class=\"sy6\">=</span> left<span class=\"sy4\">.</span> <br/>\u00a0<br/><span class=\"co1\">% True if NCoor is the right coor in spiral shape. Returns a new direction also.</span><br/>next<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Mx<span class=\"sy4\">,</span> Coor<span class=\"sy4\">,</span> NCoor<span class=\"sy4\">,</span> NDir<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  ops<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Coor<span class=\"sy4\">,</span> C1<span class=\"sy4\">,</span> C2<span class=\"sy4\">,</span> D1<span class=\"sy4\">,</span> D2<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>  <span class=\"br0\">(</span>get_in<span class=\"br0\">(</span>Mx<span class=\"sy4\">,</span> C1<span class=\"sy4\">,</span> nil<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> NCoor <span class=\"sy6\">=</span> C1<span class=\"sy4\">,</span> NDir <span class=\"sy6\">=</span> D1<br/>                        <span class=\"sy4\">;</span> NCoor <span class=\"sy6\">=</span> C2<span class=\"sy4\">,</span> NDir <span class=\"sy6\">=</span> D2<span class=\"br0\">)</span><span class=\"sy4\">.</span>  <br/>\u00a0<br/><span class=\"co1\">% Returns an spiral with [H|Vs] elements called R, only work if the length of</span><br/><span class=\"co1\">% [H|Vs], is the square of the size of the grid.</span><br/>spiralH<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Mx<span class=\"sy4\">,</span> Coor<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>Vs<span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span>  <span class=\"sy1\">:-</span><br/> replace_in<span class=\"br0\">(</span>Mx<span class=\"sy4\">,</span> Coor<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> NMx<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/> <span class=\"br0\">(</span>Vs <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> NMx<br/>           <span class=\"sy4\">;</span> next<span class=\"br0\">(</span>Dir<span class=\"sy4\">,</span> Mx<span class=\"sy4\">,</span> Coor<span class=\"sy4\">,</span> NCoor<span class=\"sy4\">,</span> NDir<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>             spiralH<span class=\"br0\">(</span>NDir<span class=\"sy4\">,</span> NMx<span class=\"sy4\">,</span> NCoor<span class=\"sy4\">,</span> Vs<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>  <br/>\u00a0<br/><span class=\"co1\">% True if Mx is the grid in spiral shape of the numbers from 0 to N*N-1.</span><br/>spiral<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Mx<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  Sq <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">*</span>N<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> numlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Sq<span class=\"sy4\">,</span> Ns<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>  create<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> EMx<span class=\"br0\">)</span><span class=\"sy4\">,</span> spiralH<span class=\"br0\">(</span>right<span class=\"sy4\">,</span> EMx<span class=\"sy4\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Ns<span class=\"sy4\">,</span> Mx<span class=\"br0\">)</span><span class=\"sy4\">.</span> <br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 57, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> spiralMatrix<span class=\"br0\">(</span>size <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, x <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, y, count <span class=\"sy0\">=</span> size, n<br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>,size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>    x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    a<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>    n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">Repeat</span><br/>    count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>      y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      a<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>      n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>      x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      a<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>      n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>      y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      a<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>      n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>      x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      a<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>      n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Until</span> count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Spiral: \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>Size<span class=\"br0\">)</span> <span class=\"sy0\">+</span> #CRLF$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> colWidth <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>size <span class=\"sy0\">*</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span>, colWidth, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  spiralMatrix<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  spiralMatrix<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> spiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    dx<span class=\"sy0\">,</span>dy <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span>            <span class=\"co1\"># Starting increments</span><br/>    x<span class=\"sy0\">,</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span>              <span class=\"co1\"># Starting location</span><br/>    myarray <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"br0\">]</span>* n <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>n**<span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>        myarray<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>        nx<span class=\"sy0\">,</span>ny <span class=\"sy0\">=</span> x+dx<span class=\"sy0\">,</span> y+dy<br/>        <span class=\"kw1\">if</span> <span class=\"nu0\">0</span><span class=\"sy0\">&lt;=</span>nx<span class=\"sy0\">&lt;</span>n <span class=\"kw1\">and</span> <span class=\"nu0\">0</span><span class=\"sy0\">&lt;=</span>ny<span class=\"sy0\">&lt;</span>n <span class=\"kw1\">and</span> myarray<span class=\"br0\">[</span>nx<span class=\"br0\">]</span><span class=\"br0\">[</span>ny<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw2\">None</span>:<br/>            x<span class=\"sy0\">,</span>y <span class=\"sy0\">=</span> nx<span class=\"sy0\">,</span>ny<br/>        <span class=\"kw1\">else</span>:<br/>            dx<span class=\"sy0\">,</span>dy <span class=\"sy0\">=</span> -dy<span class=\"sy0\">,</span>dx<br/>            x<span class=\"sy0\">,</span>y <span class=\"sy0\">=</span> x+dx<span class=\"sy0\">,</span> y+dy<br/>    <span class=\"kw1\">return</span> myarray<br/>\u00a0<br/><span class=\"kw1\">def</span> printspiral<span class=\"br0\">(</span>myarray<span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>myarray<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> n:<br/>        <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> n:<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"%2i\"</span>\u00a0% myarray<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"kw1\">print</span><br/>\u00a0<br/>printspiral<span class=\"br0\">(</span>spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\">spiral_matrix &lt;- function(n) {<br/>    stopifnot(is.numeric(n))<br/>    stopifnot(n &gt; 0)<br/>    steps &lt;- c(1, n, -1, -n)<br/>    reps &lt;- n - seq_len(n * 2 - 1L)\u00a0%/% 2<br/>    indicies &lt;- rep(rep_len(steps, length(reps)), reps)<br/>    indicies &lt;- cumsum(indicies)<br/>    values &lt;- integer(length(indicies))<br/>    values[indicies] &lt;- seq_along(indicies)<br/>    matrix(values, n, n, byrow = TRUE)<br/>}</pre>"}, {"lang": "Racket", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(define (spiral rows columns)<br/>  (define (index x y) (+ (* x columns) y))<br/>  (do ((N (* rows columns))<br/>       (spiral (make-vector (* rows columns) #f))<br/>       (dx 1) (dy 0) (x 0) (y 0)<br/>       (i 0 (+ i 1)))<br/>      ((= i N) spiral)<br/>    (vector-set! spiral (index y x) i)<br/>    (let ((nx (+ x dx)) (ny (+ y dy)))<br/>      (cond<br/>       ((and (&lt; -1 nx columns)<br/>             (&lt; -1 ny rows)<br/>             (not (vector-ref spiral (index ny nx))))<br/>        (set! x nx)<br/>        (set! y ny))<br/>       (else <br/>        (set!-values (dx dy) (values (- dy) dx))<br/>        (set! x (+ x dx))<br/>        (set! y (+ y dy)))))))<br/>\u00a0<br/>(vector-&gt;matrix 4 4 (spiral 4 4))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays a spiral in a  square array  (of any size)  starting at  START. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> size start <span class=\"sy0\">.</span>                           <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> size ==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> size ==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> size =<span class=\"nu0\">5</span>          <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> start==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> start==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> start=<span class=\"nu0\">0</span>          <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>tot=size<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;           L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>tot + start<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*total number of elements in spiral.  */</span><br/>k=size                                           <span class=\"coMULTI\">/*K:   is the counter for the spiral.  */</span><br/>row=<span class=\"nu0\">1</span>;       col=<span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/*start spiral at    row 1,  column 0. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  construct the numbered spiral. */</span><br/>     <span class=\"kw1\">do</span> n=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> k;    col=col + <span class=\"nu0\">1</span>;   @<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row=n + start;   <span class=\"kw3\">end</span>;       <span class=\"kw1\">if</span> k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">exit</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  build the first row of spiral. */</span><br/>     <span class=\"kw1\">do</span> <span class=\"kw2\">until</span>  n<span class=\"sy0\">&gt;</span>=tot                                                   <span class=\"coMULTI\">/*spiral matrix.*/</span><br/>        <span class=\"kw1\">do</span> one=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">2</span>  <span class=\"kw2\">until</span> n<span class=\"sy0\">&gt;</span>=tot;   k=k-<span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*perform twice.*/</span><br/>          <span class=\"kw1\">do</span> n=n  <span class=\"kw2\">for</span> k;   row=row + one;    @<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row=n + start;   <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*for the row\u00b7\u00b7\u00b7*/</span><br/>          <span class=\"kw1\">do</span> n=n  <span class=\"kw2\">for</span> k;   col=col - one;    @<span class=\"sy0\">.</span>col<span class=\"sy0\">.</span>row=n + start;   <span class=\"kw3\">end</span> <span class=\"coMULTI\">/* \"   \"  col\u00b7\u00b7\u00b7*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*one*/</span>                                                   <span class=\"coMULTI\">/* \u2191\u2193 direction.*/</span><br/>     <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*until n\u2265tot*/</span>                    <span class=\"coMULTI\">/* [\u2191]   done with the matrix spiral.  */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]   display spiral to the screen. */</span><br/>  <span class=\"kw1\">do</span>      r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> size;    _=   <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>r, L<span class=\"br0\">)</span> <span class=\"coMULTI\">/*construct display   row   by    row. */</span><br/>       <span class=\"kw1\">do</span> c=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> size -<span class=\"nu0\">1</span>; _=_  <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>c<span class=\"sy0\">.</span>r, L<span class=\"br0\">)</span> <span class=\"coMULTI\">/*construct a line  for the display.   */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*col*/</span>                             <span class=\"coMULTI\">/* [\u2191]  line has an extra leading blank*/</span><br/>  <span class=\"kw1\">say</span> _                                          <span class=\"coMULTI\">/*display a line (row) of the spiral.  */</span><br/>  <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*row*/</span>                               <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 55, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Spiral matrix<br/>\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                   setwindowtitle(\"Spiral matrix\")<br/>                   setgeometry(100,100,600,400)<br/>                   n = 5<br/>                   result = newlist(n,n)<br/>                   spiral = newlist(n,n)<br/>                   k = 1 <br/>                   top = 1<br/>                   bottom = n<br/>                   left = 1<br/>                   right = n<br/>                   while (k &lt;= n*n)<br/>                           for  i= left to right<br/>                                result[top][i] = k<br/>                                k = k + 1<br/>                           next    <br/>                           top = top + 1 <br/>                           for i = top to bottom<br/>                                result[i][right] = k<br/>                                k = k + 1<br/>                           next<br/>                           right = right - 1 <br/>                           for i = right to left step -1<br/>                                result[bottom][i] = k<br/>                                k = k + 1<br/>                           next<br/>                           bottom = bottom - 1 <br/>                           for i = bottom to top step -1<br/>                                result[i][left] = k<br/>                                k = k + 1<br/>                           next<br/>                           left = left + 1<br/>                   end<br/>                   for m = 1 to n<br/>                        for p = 1 to n<br/>                             spiral[p][m] = new qpushbutton(win1) {<br/>                                                  x = 150+m*40<br/>                                                  y = 30 + p*40<br/>                                                  setgeometry(x,y,40,40)<br/>                                                  settext(string(result[m][p]))<br/>                                                  }<br/>                        next<br/>                   next<br/>                   show()<br/>                   }<br/>                   exec()<br/>                   }<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> spiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  spiral = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>n, <span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">}</span>     <span class=\"co1\"># n x n array of nils</span><br/>  runs = n.<span class=\"me1\">downto</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">flatten</span>  <span class=\"co1\"># n==5; [5,4,4,3,3,2,2,1,1,0]</span><br/>  delta = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">cycle</span><br/>  x, y, value = <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> run <span class=\"kw1\">in</span> runs<br/>    dx, dy = delta.<span class=\"kw1\">next</span><br/>    run.<span class=\"me1\">times</span> <span class=\"br0\">{</span> spiral<span class=\"br0\">[</span>y<span class=\"sy0\">+</span>=dy<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"sy0\">+</span>=dx<span class=\"br0\">]</span> = <span class=\"br0\">(</span>value<span class=\"sy0\">+</span>=<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>  spiral<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_matrix<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  width = m.<span class=\"me1\">flatten</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x.<span class=\"me1\">to_s</span>.<span class=\"me1\">size</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span><br/>  m.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> row.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"st0\">\"%#{width}s \"</span> <span class=\"sy0\">%</span> x<span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>print_matrix spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Folder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dir <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>l<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, a<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> pos  <span class=\"co1\">//start position</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>dx,dy<span class=\"br0\">)</span> <span class=\"sy0\">=</span> dir <span class=\"co1\">//direction</span><br/>    l.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span>e <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=</span> x + dx<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> y + dy<span class=\"sy0\">;</span> a<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> e <span class=\"br0\">}</span>  <span class=\"co1\">//copy l elements to array using current direction</span><br/>    pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>    dir <span class=\"sy0\">=</span> <span class=\"br0\">(</span>-dy, dx<span class=\"br0\">)</span> <span class=\"co1\">//turn</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> spiral<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> dup<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>i<span class=\"sy0\">=&gt;</span>List<span class=\"br0\">(</span>i,i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> folds <span class=\"sy0\">=</span> n <span class=\"sy0\">::</span> dup<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>  <span class=\"co1\">//define fold part lengths</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> array <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fold <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Folder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> seq <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> until n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>  <span class=\"co1\">//sequence to fold</span><br/>  folds.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span>len <span class=\"sy0\">=&gt;</span> fold<span class=\"br0\">(</span>seq.<span class=\"me1\">take</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span>,array<span class=\"br0\">)</span><span class=\"sy0\">;</span> seq <span class=\"sy0\">=</span> seq.<span class=\"me1\">drop</span><span class=\"br0\">(</span>len<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  array<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 25, "block": "<pre class=\"text highlighted_source\">function a = spiral(n)<br/>  a = ones(n*n, 1)<br/>  v = ones(n, 1)<br/>  u = -n*v;<br/>  i = n<br/>  for k = n-1:-1:1<br/>    j = 1:k<br/>    u(j) = -u(j)<br/>    a(j+i) = u(j)<br/>    v(j) = -v(j)<br/>    a(j+(i+k)) = v(j)<br/>    i = i+2*k<br/>  end<br/>  a(cumsum(a)) = (1:n*n)'<br/>  a = matrix(a, n, n)'-1<br/>endfunction<br/>\u00a0<br/>--&gt;spiral(5)<br/> ans  =<br/>\u00a0<br/>    0.     1.     2.     3.     4.  <br/>    15.    16.    17.    18.    5.  <br/>    14.    23.    24.    19.    6.  <br/>    13.    22.    21.    20.    7.  <br/>    12.    11.    10.    9.     8.</pre>"}, {"lang": "Seed7", "loc": 52, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: matrix is array array integer;<br/>\u00a0<br/>const func matrix: spiral (in integer: n) is func<br/>  result<br/>    var matrix: myArray is matrix.value;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: dx is 1;<br/>    var integer: dy is 0;<br/>    var integer: x is 1;<br/>    var integer: y is 1;<br/>    var integer: nx is 0;<br/>    var integer: ny is 0;<br/>    var integer: swap is 0;<br/>  begin<br/>    myArray\u00a0:= n times n times 0;<br/>    for i range 1 to n**2 do<br/>      myArray[x][y]\u00a0:= i;<br/>      nx\u00a0:= x + dx;<br/>      ny\u00a0:= y + dy;<br/>      if nx &gt;= 1 and nx &lt;= n and ny &gt;= 1 and ny &lt;= n and myArray[nx][ny] = 0 then<br/>        x\u00a0:= nx;<br/>        y\u00a0:= ny;<br/>      else<br/>        swap\u00a0:= dx;<br/>        dx\u00a0:= -dy;<br/>        dy\u00a0:= swap;<br/>        x +:= dx;<br/>        y +:= dy;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: writeMatrix (in matrix: myArray) is func<br/>  local<br/>    var integer: x is 0;<br/>    var integer: y is 0;<br/>  begin<br/>    for key y range myArray do<br/>      for key x range myArray[y] do<br/>        write(myArray[x][y] lpad 4);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeMatrix(spiral(5));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 20, "block": "<pre class=\"ruby highlighted_source\">func spiral<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>x, y, dx, dy, a<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        a<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> = i<br/>        var <span class=\"br0\">(</span>nx, ny<span class=\"br0\">)</span> = <span class=\"br0\">(</span>x<span class=\"sy0\">+</span>dx, y<span class=\"sy0\">+</span>dy<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dx ==  <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>nx == n <span class=\"sy0\">||</span> a<span class=\"br0\">[</span>ny<span class=\"br0\">]</span><span class=\"br0\">[</span>nx<span class=\"br0\">]</span>!=<span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span>,  <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span>dy ==  <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>ny == n <span class=\"sy0\">||</span> a<span class=\"br0\">[</span>ny<span class=\"br0\">]</span><span class=\"br0\">[</span>nx<span class=\"br0\">]</span>!=<span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span>dx == <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>nx  <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> a<span class=\"br0\">[</span>ny<span class=\"br0\">]</span><span class=\"br0\">[</span>nx<span class=\"br0\">]</span>!=<span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span>dy == <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>ny  <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> a<span class=\"br0\">[</span>ny<span class=\"br0\">]</span><span class=\"br0\">[</span>nx<span class=\"br0\">]</span>!=<span class=\"kw2\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span>,  <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span>                                            <span class=\"br0\">{</span> <span class=\"br0\">[</span>dx, dy<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span>\u00a0\u00bb <span class=\"br0\">(</span>\\dx, \\dy<span class=\"br0\">)</span><br/>        x = x<span class=\"sy0\">+</span>dx<br/>        y = y<span class=\"sy0\">+</span>dy<br/>    <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> a<br/><span class=\"br0\">}</span><br/>\u00a0<br/>spiral<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span><br/>    row.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"st0\">\"%3d\"</span> <span class=\"sy0\">%</span> _<span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Stata", "loc": 21, "block": "<pre class=\"text highlighted_source\">function spiral_mat(n) {<br/>\ta = J(n*n, 1, 1)<br/>\tu = J(n, 1, -n)<br/>\tv = J(n, 1, 1)<br/>\tfor (k=(i=n)-1; k&gt;=1; i=i+2*k--) {<br/>\t\tj = 1..k<br/>\t\ta[j:+i] = u[j] = -u[j]<br/>\t\ta[j:+(i+k)] = v[j] = -v[j]<br/>\t}<br/>\treturn(rowshape(invorder(runningsum(a)),n):-1)<br/>}<br/>\u00a0<br/>spiral_mat(5)<br/>        1    2    3    4    5<br/>    +--------------------------+<br/>  1 |   0    1    2    3    4  |<br/>  2 |  15   16   17   18    5  |<br/>  3 |  14   23   24   19    6  |<br/>  4 |  13   22   21   20    7  |<br/>  5 |  12   11   10    9    8  |<br/>    +--------------------------+</pre>"}, {"lang": "Tcl", "loc": 34, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> spiral size <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$size</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$size</span> .<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> dx <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> y -<span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> dy <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">set</span> i -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dy</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> x <span class=\"re0\">$dx</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$m</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> eq <span class=\"st0\">\".\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lset</span> m <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># back up and change direction</span><br/>                <span class=\"kw2\">incr</span> x <span class=\"br0\">[</span>- <span class=\"re0\">$dx</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">set</span> dy <span class=\"br0\">[</span>- <span class=\"re0\">$dx</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">set</span> dx <span class=\"nu0\">0</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">incr</span> y <span class=\"re0\">$dy</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$y</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$m</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> eq <span class=\"st0\">\".\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lset</span> m <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># back up and  change direction</span><br/>                <span class=\"kw2\">incr</span> y <span class=\"br0\">[</span>- <span class=\"re0\">$dy</span><span class=\"br0\">]</span><br/>                <span class=\"kw1\">set</span> dx <span class=\"re0\">$dy</span><br/>                <span class=\"kw1\">set</span> dy <span class=\"nu0\">0</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$m</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>print_matrix <span class=\"br0\">[</span>spiral <span class=\"nu0\">5</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 40, "block": "<pre class=\"text highlighted_source\">5-&gt;N<br/>DelVar [F]<br/>{N,N}\u2192dim([F])<br/>1\u2192A: N\u2192B<br/>1\u2192C: N\u2192D<br/>0\u2192E: E\u2192G <br/>1\u2192I: 1\u2192J <br/>For(K,1,N*N)<br/>K-1\u2192[F](I,J)<br/>If E=0: Then <br/>If J&lt;D: Then<br/>J+1\u2192J<br/>Else: 1\u2192G<br/>I+1\u2192I: A+1\u2192A<br/>End<br/>End<br/>If E=1: Then <br/>If I&lt;B: Then<br/>I+1\u2192I<br/>Else: 2\u2192G<br/>J-1\u2192J: D-1\u2192D<br/>End<br/>End<br/>If E=2: Then<br/>If J&gt;C: Then<br/>J-1\u2192J<br/>Else: 3\u2192G<br/>I-1\u2192I: B-1\u2192B<br/>End<br/>End<br/>If E=3: Then <br/>If I&gt;A: Then<br/>I-1\u2192I<br/>Else: 0\u2192G<br/>J+1\u2192J: C+1\u2192C<br/>End<br/>End<br/>G\u2192E<br/>End<br/>[F]</pre>"}, {"lang": "TSE SAL", "loc": 130, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>// library: math: create: array: spiral: inwards &lt;description&gt;&lt;/description&gt; &lt;version control&gt;&lt;/version control&gt; &lt;version&gt;1.0.0.0.15&lt;/version&gt; (filenamemacro=creamasi.s) [&lt;Program&gt;] [&lt;Research&gt;] [kn, ri, mo, 31-12-2012 01:15:43]<br/>PROC PROCMathCreateArraySpiralInwards( INTEGER nI )<br/> // e.g. PROC Main()<br/> // e.g. STRING s1[255] = \"5\"<br/> // e.g. IF ( NOT ( Ask( \"math: create: array: spiral: inwards: nI = \", s1, _EDIT_HISTORY_ ) ) AND ( Length( s1 ) &gt; 0 ) ) RETURN() ENDIF<br/> // e.g.  PROCMathCreateArraySpiralInwards( Val( s1 ) )<br/> // e.g. END<br/> // e.g.<br/> // e.g. &lt;F12&gt; Main()<br/> //<br/> INTEGER columnEndI = 0<br/> //<br/> INTEGER columnBeginI = nI - 1<br/> //<br/> INTEGER rowEndI = 0<br/> //<br/> INTEGER rowBeginI = nI - 1<br/> //<br/> INTEGER columnI = 0<br/> //<br/> INTEGER rowI = 0<br/> //<br/> INTEGER minI = 0<br/> INTEGER maxI = nI * nI - 1<br/> INTEGER I = 0<br/> //<br/> INTEGER columnWidthI = Length( Str( nI * nI - 1 ) ) + 1<br/> //<br/> INTEGER directionRightI = 0<br/> INTEGER directionLeftI = 1<br/> INTEGER directionDownI = 2<br/> INTEGER directionUpI = 3<br/> //<br/> INTEGER directionI = directionRightI<br/> //<br/> FOR I = minI TO maxI<br/>  //<br/>  SetGlobalInt( Format( \"MatrixS\", columnI, \",\", rowI ), I )<br/>  // SetGlobalInt( Format( \"MatrixS\", columnI, \",\", rowI ), I )<br/>  //<br/>  PutStrXY( ( Query( ScreenCols ) / 8 ) + columnI * columnWidthI, ( Query( ScreenRows ) / 8 ) + rowI, Str( I ), Color( BRIGHT RED ON WHITE ) )<br/>  // PutStrXY( ( Query( ScreenCols ) / 8 ) + columnI * columnWidthI, ( Query( ScreenRows ) / 8 ) + rowI, Str( I + 1 ), Color( BRIGHT RED ON WHITE ) )<br/>  //<br/>  CASE directionI<br/>   //<br/>   WHEN directionRightI<br/>    //<br/>    IF ( columnI &lt; columnBeginI )<br/>     //<br/>     columnI = columnI + 1<br/>     //<br/>    ELSE<br/>     //<br/>     directionI = directionDownI<br/>     //<br/>     rowI = rowI + 1<br/>     //<br/>     rowEndI = rowEndI + 1<br/>     //<br/>    ENDIF<br/>    //<br/>   WHEN directionDownI<br/>    //<br/>    IF ( rowI &lt; rowBeginI )<br/>     //<br/>     rowI = rowI + 1<br/>     //<br/>    ELSE<br/>     //<br/>     directionI = directionLeftI<br/>     //<br/>     columnI = columnI - 1<br/>     //<br/>     columnBeginI = columnBeginI - 1<br/>     //<br/>    ENDIF<br/>    //<br/>   WHEN directionLeftI<br/>    //<br/>    IF ( columnI &gt; columnEndI )<br/>     //<br/>     columnI = columnI - 1<br/>     //<br/>    ELSE<br/>     //<br/>     directionI = directionUpI<br/>     //<br/>     rowI = rowI - 1<br/>     //<br/>     rowBeginI = rowBeginI - 1<br/>     //<br/>    ENDIF<br/>    //<br/>   WHEN directionUpI<br/>    //<br/>    IF ( rowI &gt; rowEndI )<br/>     //<br/>     rowI = rowI - 1<br/>     //<br/>    ELSE<br/>     //<br/>     directionI = directionRightI<br/>     //<br/>     columnI = columnI + 1<br/>     //<br/>     columnEndI = columnEndI + 1<br/>     //<br/>    ENDIF<br/>    //<br/>   OTHERWISE<br/>    //<br/>    Warn( Format( \"PROCMathCreateArraySpiralInwards(\", \" \", \"case\", \" \", \":\", \" \", Str( directionI ), \": not known\" ) )<br/>    //<br/>    RETURN()<br/>    //<br/>  ENDCASE<br/>  //<br/> ENDFOR<br/> //<br/>END<br/>\u00a0<br/>PROC Main()<br/>STRING s1[255] = \"5\"<br/>IF ( NOT ( Ask( \"math: create: array: spiral: inwards: nI = \", s1, _EDIT_HISTORY_ ) ) AND ( Length( s1 ) &gt; 0 ) ) RETURN() ENDIF<br/> PROCMathCreateArraySpiralInwards( Val( s1 ) )<br/>END<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "uBasic/4tH", "loc": 19, "block": "<pre class=\"text highlighted_source\">Input \"Width:  \";w<br/>Input \"Height: \";h<br/>Print<br/>\u00a0<br/>For i = 0 To h-1<br/>  For j = 0 To w-1<br/>    Print Using \"__#\"; FUNC(_Spiral(w,h,j,i));<br/>  Next<br/>  Print<br/>Next<br/>End<br/>\u00a0<br/>\u00a0<br/>_Spiral Param(4)<br/>If <a class=\"__cf_email__\" data-cfemail=\"325672\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Then<br/>  Return (<a class=\"__cf_email__\" data-cfemail=\"781938\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + FUNC(_Spiral(<a class=\"__cf_email__\" data-cfemail=\"4f2d0f627e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"7e1f3e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"a3c7e3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1, <a class=\"__cf_email__\" data-cfemail=\"553415\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - <a class=\"__cf_email__\" data-cfemail=\"690a29\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - 1)))<br/>Else<br/>  Return (<a class=\"__cf_email__\" data-cfemail=\"086b48\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>EndIf</pre>"}, {"lang": "Ursala", "loc": 13, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import int<br/>\u00a0<br/>spiral =<br/>\u00a0<br/>^H/block nleq-&lt;lS&amp;r+ -+<br/>   <a class=\"__cf_email__\" data-cfemail=\"b5dbc0d8f5fbdcf6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+ sum:-0*yK33x+ (|\\LL negation**)+ rlc ~&amp;lh==1,<br/>   ~&amp;rNNXNXSPlrDlSPK32^lrtxiiNCCSLhiC5D/~&amp; iota*+ iota+-<br/>\u00a0<br/>#cast\u00a0%nLLL<br/>\u00a0<br/>examples = spiral* &lt;5,6,7&gt;</pre>"}, {"lang": "VBScript", "loc": 49, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> build_spiral(n)<br/>\tbotcol = 0\u00a0: topcol = n - 1<br/>\tbotrow = 0\u00a0: toprow = n - 1<br/>\t<span class=\"co1\">'declare a two dimensional array<br/></span>\t<span class=\"kw4\">Dim</span> matrix()<br/>\t<span class=\"kw4\">ReDim</span> matrix(topcol,toprow)<br/>\tdir = 0\u00a0: col = 0\u00a0: row = 0<br/>\t<span class=\"co1\">'populate the array<br/></span>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n*n-1<br/>\t\tmatrix(col,row) = i<br/>\t\t<span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> dir<br/>\t\t\t<span class=\"kw3\">Case</span> 0<br/>\t\t\t\t<span class=\"kw3\">If</span> col &lt; topcol <span class=\"kw3\">Then</span><br/>\t\t\t\t\tcol = col + 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = 1\u00a0: row = row + 1\u00a0: botrow = botrow + 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Case</span> 1<br/>\t\t\t\t<span class=\"kw3\">If</span> row &lt; toprow <span class=\"kw3\">Then</span><br/>\t\t\t\t\trow = row + 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = 2\u00a0: col = col - 1\u00a0: topcol = topcol - 1\t<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Case</span> 2<br/>\t\t\t\t<span class=\"kw3\">If</span> col &gt; botcol <span class=\"kw3\">Then</span><br/>\t\t\t\t\tcol = col - 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = 3\u00a0: row = row - 1\u00a0: toprow = toprow - 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Case</span> 3<br/>\t\t\t\t<span class=\"kw3\">If</span> row &gt; botrow <span class=\"kw3\">Then</span><br/>\t\t\t\t\trow = row - 1<br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\tdir = 0\u00a0: col = col + 1\u00a0: botcol = botcol + 1<br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">Select</span><br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"co1\">'print the array<br/></span>\t<span class=\"kw3\">For</span> y = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t<span class=\"kw3\">For</span> x = 0 <span class=\"kw3\">To</span> n-1<br/>\t\t\tWScript.StdOut.Write matrix(x,y) &amp; vbTab<br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>build_spiral(CInt(WScript.Arguments(0)))<br/>\u00a0</pre>"}, {"lang": "Visual Basic", "loc": 58, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/>    print2dArray getSpiralArray(5)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> getSpiralArray(dimension <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>()<br/>    <span class=\"kw4\">ReDim</span> spiralArray(dimension - 1, dimension - 1) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> numConcentricSquares <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    numConcentricSquares = dimension \\ 2<br/>    <span class=\"kw3\">If</span> (dimension <span class=\"kw4\">Mod</span> 2) <span class=\"kw3\">Then</span> numConcentricSquares = numConcentricSquares + 1<br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, sideLen <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, currNum <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    sideLen = dimension<br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> numConcentricSquares - 1<br/>        <span class=\"co1\">' do top side<br/></span>        <span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> sideLen - 1<br/>            spiralArray(i, i + j) = currNum<br/>            currNum = currNum + 1<br/>        <span class=\"kw3\">Next</span><br/>\u00a0<br/>        <span class=\"co1\">' do right side<br/></span>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> sideLen - 1<br/>            spiralArray(i + j, dimension - 1 - i) = currNum<br/>            currNum = currNum + 1<br/>        <span class=\"kw3\">Next</span><br/>\u00a0<br/>        <span class=\"co1\">' do bottom side<br/></span>        <span class=\"kw3\">For</span> j = sideLen - 2 <span class=\"kw3\">To</span> 0 <span class=\"kw3\">Step</span> -1<br/>            spiralArray(dimension - 1 - i, i + j) = currNum<br/>            currNum = currNum + 1<br/>        <span class=\"kw3\">Next</span><br/>\u00a0<br/>        <span class=\"co1\">' do left side<br/></span>        <span class=\"kw3\">For</span> j = sideLen - 2 <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>            spiralArray(i + j, i) = currNum<br/>            currNum = currNum + 1<br/>        <span class=\"kw3\">Next</span><br/>\u00a0<br/>        sideLen = sideLen - 2<br/>    <span class=\"kw3\">Next</span><br/>\u00a0<br/>    getSpiralArray = spiralArray()<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> print2dArray(arr() <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/>    <span class=\"kw4\">Dim</span> row <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, col <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw3\">For</span> row = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr, 1)<br/>        <span class=\"kw3\">For</span> col = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr, 2) - 1<br/>            Debug.<span class=\"kw4\">Print</span> arr(row, col),<br/>        <span class=\"kw3\">Next</span><br/>        Debug.<span class=\"kw4\">Print</span> arr(row, <span class=\"kw4\">UBound</span>(arr, 2))<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XPL0", "loc": 22, "block": "<pre class=\"text highlighted_source\">def N=5;<br/>int A(N,N);<br/>int I, J, X, Y, Steps, Dir;<br/>include c:\\cxpl\\codes;<br/>[Clear;<br/>I:= 0;  X:= -1;  Y:= 0;  Steps:= N;  Dir:= 0;<br/>repeat  for J:= 1 to Steps do<br/>                [case Dir&amp;3 of<br/>                  0: X:= X+1;<br/>                  1: Y:= Y+1;<br/>                  2: X:= X-1;<br/>                  3: Y:= Y-1<br/>                other [];<br/>                A(X,Y):= I;<br/>                Cursor(X*3,Y);  IntOut(0,I);<br/>                I:= I+1;<br/>                ];<br/>        Dir:= Dir+1;<br/>        if Dir&amp;1 then Steps:= Steps-1;<br/>until   Steps = 0;<br/>Cursor(0,N);<br/>]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn spiralMatrix(n){<br/>   sm:=(0).pump(n,List,(0).pump(n,List,False).copy); //L(L(False,False..), L(F,F,..) ...)<br/>   drc:=Walker.cycle(T(0,1,0), T(1,0,1), T(0,-1,0), T(-1,0,1)); // deltas<br/>   len:=n; r:=0; c:=-1; z:=-1; while(len&gt;0){ //or do(2*n-1){<br/>      dr,dc,dl:=drc.next();<br/>      do(len-=dl){ sm[r+=dr][c+=dc]=(z+=1); }<br/>   }<br/>   sm<br/>}</pre>"}]}