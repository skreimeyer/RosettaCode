{"task": "Taxicab_numbers", "blocks": [{"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">v+1$$&lt;_v#!`**::+1g42$$_v#&lt;!`**::+1g43\\g43::&lt;&lt;v,,.g42,&lt;<br/>&gt;004p:0&gt;1+24p:24g\\:24g&gt;&gt;1+:34p::**24g::**+-|p&gt;9,,,14v,<br/>,,,\"^3 + ^3= ^3 + ^3\".\\,,,9\"= \".:\\_v#g40g43&lt;^v,,,,.g&lt;^<br/>5+,$$$\\1+:38*`#@_\\::\"~\"1+:24p34p0\\0&gt;14p24g04^&gt;,04g.,,5</pre>"}, {"lang": "C", "loc": 84, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> xint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> uint<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\tuint x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span> <span class=\"co1\">// x &gt; y always</span><br/>\txint value<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> sum_t<span class=\"sy0\">;</span><br/>\u00a0<br/>xint <span class=\"sy0\">*</span>cube<span class=\"sy0\">;</span><br/>uint n_cubes<span class=\"sy0\">;</span><br/>\u00a0<br/>sum_t <span class=\"sy0\">*</span>pq<span class=\"sy0\">;</span><br/>uint pq_len<span class=\"sy0\">,</span> pq_cap<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> add_cube<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tuint x <span class=\"sy0\">=</span> n_cubes<span class=\"sy0\">++;</span><br/>\tcube <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>cube<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>xint<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n_cubes <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcube<span class=\"br0\">[</span>n_cubes<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xint<span class=\"br0\">)</span> n_cubes<span class=\"sy0\">*</span>n_cubes<span class=\"sy0\">*</span>n_cubes<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span> <span class=\"co1\">// x = 0 or 1 is useless</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>pq_len <span class=\"sy0\">&gt;=</span> pq_cap<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pq_cap <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> pq_cap <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\tpq <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>pq<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>pq<span class=\"br0\">)</span> <span class=\"sy0\">*</span> pq_cap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tsum_t tmp <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum_t<span class=\"br0\">)</span> <span class=\"br0\">{</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cube<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\">// upheap</span><br/>\tuint i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> pq_len<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> pq<span class=\"br0\">[</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">&gt;</span> tmp.<span class=\"me1\">value</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> j<span class=\"br0\">)</span><br/>\t\tpq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tpq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> next_sum<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>redo<span class=\"sy0\">:</span>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>pq_len <span class=\"sy0\">||</span> pq<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">&gt;=</span> cube<span class=\"br0\">[</span>n_cubes<span class=\"br0\">]</span><span class=\"br0\">)</span> add_cube<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tsum_t tmp <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// pq[0] always stores last seen value</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>tmp.<span class=\"me1\">y</span> <span class=\"sy0\">&gt;=</span> tmp.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t<span class=\"co1\">// done with this x; throw it away</span><br/>\t\ttmp <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span>pq_len<span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>pq_len<span class=\"br0\">)</span> <span class=\"kw1\">goto</span> redo<span class=\"sy0\">;</span>\t<span class=\"co1\">// refill empty heap</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>\t\ttmp.<span class=\"me1\">value</span> <span class=\"sy0\">+=</span> cube<span class=\"br0\">[</span>tmp.<span class=\"me1\">y</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> cube<span class=\"br0\">[</span>tmp.<span class=\"me1\">y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tuint i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"co1\">// downheap</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> pq_len<span class=\"sy0\">;</span> pq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> pq_len <span class=\"sy0\">&amp;&amp;</span> pq<span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">&lt;</span> pq<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span>j<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>pq<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">&gt;=</span> tmp.<span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tpq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>uint next_taxi<span class=\"br0\">(</span>sum_t <span class=\"sy0\">*</span>hist<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">do</span> next_sum<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">!=</span> pq<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tuint len <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\thist<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\thist<span class=\"br0\">[</span>len<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> pq<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <br/>\t\tnext_sum<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">==</span> pq<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> len<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tuint i<span class=\"sy0\">,</span> l<span class=\"sy0\">;</span><br/>\tsum_t x<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2006</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tl <span class=\"sy0\">=</span> next_taxi<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">25</span> <span class=\"sy0\">&lt;</span> i <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4u:%10llu\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>l<span class=\"sy0\">--</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" =\u00a0%4u^3 +\u00a0%4u^3\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 76, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> TaxicabNumber<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, IList<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;&gt;</span> taxicabNumbers <span class=\"sy0\">=</span> GetTaxicabNumbers<span class=\"br0\">(</span><span class=\"nu0\">2006</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PrintTaxicabNumbers<span class=\"br0\">(</span>taxicabNumbers<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, IList<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;&gt;</span> GetTaxicabNumbers<span class=\"br0\">(</span><span class=\"kw4\">int</span> length<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            SortedList<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, IList<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;&gt;</span> sumsOfTwoCubes <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SortedList<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, IList<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">long</span> sum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>i, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>j, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>sumsOfTwoCubes<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        sumsOfTwoCubes<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>sum, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>\u00a0<br/>                    sumsOfTwoCubes<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;=</span> i<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">// Found that you need to keep going for a while after the length, because higher i values fill in gaps</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sumsOfTwoCubes<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> t<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> length <span class=\"sy0\">*</span> <span class=\"nu0\">1.1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, IList<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;&gt;</span> values <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">from</span> t <span class=\"kw1\">in</span> sumsOfTwoCubes <span class=\"kw1\">where</span> t<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">select</span> t<span class=\"br0\">)</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">2006</span><span class=\"br0\">)</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">ToDictionary</span><span class=\"br0\">(</span>u <span class=\"sy0\">=&gt;</span> u<span class=\"sy0\">.</span><span class=\"me1\">Key</span>, u <span class=\"sy0\">=&gt;</span> u<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> values<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PrintTaxicabNumbers<span class=\"br0\">(</span>IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">long</span>, IList<span class=\"sy0\">&lt;</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;&gt;</span> values<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> taxicabNumber <span class=\"kw1\">in</span> values<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                StringBuilder output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">AppendFormat</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,10}<span class=\"es0\">\\t</span>{1,4}\"</span>, i, taxicabNumber<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> numbers <span class=\"kw1\">in</span> values<span class=\"br0\">[</span>taxicabNumber<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    output<span class=\"sy0\">.</span><span class=\"me1\">AppendFormat</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>= {0}^3 + {1}^3\"</span>, numbers<span class=\"sy0\">.</span><span class=\"me1\">Item1</span>, numbers<span class=\"sy0\">.</span><span class=\"me1\">Item2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">25</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2000</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2006</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>output<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                i<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 68, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> test<span class=\"sy0\">-</span>project<span class=\"sy0\">-</span>intellij<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cube <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>  <span class=\"st0\">\"Cube a number through triple multiplication\"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sum3 <span class=\"br0\">[</span><span class=\"br0\">[</span>i j<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   <span class=\"st0\">\" [i j] -&gt; i^3 + j^3\"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>cube i<span class=\"br0\">)</span> <span class=\"br0\">(</span>cube j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> next<span class=\"sy0\">-</span>pair <span class=\"br0\">[</span><span class=\"br0\">[</span>i j<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Generate next [i j] pair of sequence  (producing lower triangle pairs) \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> j i<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>i <span class=\"br0\">(</span><span class=\"kw1\">inc</span> j<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">inc</span> i<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Pair sequence generator [1 1] [2 1] [2 2] [3 1] [3 2] [3 3] ...</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> pairs<span class=\"sy0\">-</span>seq\t<span class=\"br0\">(</span><span class=\"kw1\">iterate</span> next<span class=\"sy0\">-</span>pair <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dict<span class=\"sy0\">-</span><span class=\"kw1\">inc</span> <span class=\"br0\">[</span>m pair<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Add pair to pair map m, with the key of the map based upon the cubic sum (sum3) and the value appends the pair \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">update-in</span> m <span class=\"br0\">[</span><span class=\"br0\">(</span>sum3 pair<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>fnil #<span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"sy0\">%</span> pair<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> enough? <span class=\"br0\">[</span>m n<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>generate<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Checks if we have enough taxi numbers (i.e. if number in map &gt;= count-needed \"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> m                                <span class=\"co1\">; hash-map of sum of cube of numbers [key] and their pairs as value</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>second <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> true false<span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">; filter out ones which don't have more than 1 entry</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">count</span><span class=\"br0\">)</span>                                              <span class=\"co1\">; count the item remaining</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>generate<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                                <span class=\"co1\">; true iff count-needed is less or equal to the nubmer filtered</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> find<span class=\"sy0\">-</span>taxi<span class=\"sy0\">-</span>numbers <span class=\"br0\">[</span>n<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>generate<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Generates 1st n-to-generate taxi numbers\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>m <span class=\"br0\">{</span><span class=\"br0\">}</span>               <span class=\"co1\">; Hash-map containing cube of pairs (key) and set of pairs that produce sum (value)</span><br/>         p pairs<span class=\"sy0\">-</span>seq        <span class=\"co1\">; select pairs from our pair sequence generator (i.e. [1 1] [2 1] [2 2] ...)</span><br/>         num<span class=\"sy0\">-</span>tried <span class=\"nu0\">0</span>        <span class=\"co1\">; Since its expensve to count how many taxi numbers we have found</span><br/>         check<span class=\"sy0\">-</span>after <span class=\"nu0\">1</span><span class=\"br0\">]</span>     <span class=\"co1\">; we only check if we have enough numbers every time (num-tried equals check-after)</span><br/>                            <span class=\"co1\">; num-tried increments by 1 each time we try the next pair and</span><br/>                            <span class=\"co1\">; check-after doubles if we don't have enough taxi numbers</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> num<span class=\"sy0\">-</span>tried check<span class=\"sy0\">-</span>after<span class=\"br0\">)</span> <span class=\"br0\">(</span>enough? m n<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>generate<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; check if we found enough taxi numbers</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> <span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>second <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; sort the taxi numbers and this is the result</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> num<span class=\"sy0\">-</span>tried check<span class=\"sy0\">-</span>after<span class=\"br0\">)</span>                                   <span class=\"co1\">; Check if we need to increase our count between checking</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>dict<span class=\"sy0\">-</span><span class=\"kw1\">inc</span> m <span class=\"br0\">(</span><span class=\"kw1\">first</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rest</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> num<span class=\"sy0\">-</span>tried<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> check<span class=\"sy0\">-</span>after<span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">; increased count between checking</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>dict<span class=\"sy0\">-</span><span class=\"kw1\">inc</span> m <span class=\"br0\">(</span><span class=\"kw1\">first</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rest</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> num<span class=\"sy0\">-</span>tried<span class=\"br0\">)</span> check<span class=\"sy0\">-</span>after<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; didn't increase the count</span><br/>\u00a0<br/><span class=\"co1\">; Generate 1st 2006 taxi numbers</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> result <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>taxi<span class=\"sy0\">-</span>numbers <span class=\"nu0\">2006</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Show First 25</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> show<span class=\"sy0\">-</span>result <span class=\"br0\">[</span>n sample<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Prints one line of result \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%4d:%10d\"</span> n  <span class=\"br0\">(</span><span class=\"kw1\">first</span> sample<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>q  <span class=\"br0\">(</span>second sample<span class=\"br0\">)</span><br/>         \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>i j<span class=\"br0\">]</span> q<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\" =\u00a0%4d^3 +\u00a0%4d^3\"</span> i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; 1st 25 taxi numbers</span><br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>       \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>sample <span class=\"br0\">(</span>nth result <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>show<span class=\"sy0\">-</span>result n sample<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; taxi numbers from 2000th to 2006th</span><br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">2000</span> <span class=\"nu0\">2007</span><span class=\"br0\">)</span><br/>       \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>sample <span class=\"br0\">(</span>nth result <span class=\"br0\">(</span><span class=\"kw1\">dec</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>show<span class=\"sy0\">-</span>result n sample<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> iCubes <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span>1u<span class=\"sy0\">,</span> 1201u<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"sy0\">,</span> <span class=\"kw4\">uint</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">uint</span><span class=\"br0\">]</span> sum2cubes<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> i3<span class=\"sy0\">;</span> iCubes<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>j<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> j3<span class=\"sy0\">;</span> iCubes<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            sum2cubes<span class=\"br0\">[</span>i3 <span class=\"sy0\">+</span> j3<span class=\"br0\">]</span><span class=\"br0\">[</span>tuple<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> taxis <span class=\"sy0\">=</span> sum2cubes.<span class=\"me1\">byKeyValue</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">value</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                  .<span class=\"me1\">array</span>.<span class=\"me1\">schwartzSort</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">key</span><span class=\"br0\">)</span>.<span class=\"me1\">release</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"coMULTI\">/*immutable*/</span> <span class=\"kw4\">const</span> r<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2000</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2000</span> <span class=\"sy0\">+</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> t<span class=\"sy0\">;</span> taxis<span class=\"br0\">[</span>r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"me1\">r</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%4d:\u00a0%10d =%-(%s =%)\"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> t.<span class=\"me1\">key</span><span class=\"sy0\">,</span><br/>                     t.<span class=\"me1\">value</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span><span class=\"st0\">\"%4d^3 +\u00a0%4d^3\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 55, "block": "<pre class=\"dcl highlighted_source\">$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>sums_of_cubes<br/>$ <span class=\"kw1\">on</span> control_y <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> clean<br/>$ <span class=\"kw1\">open</span> /<span class=\"kw1\">write</span> sums_of_cubes sums_of_cubes.txt<br/>$ i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$ loop1:<br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> i<br/>$  j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$  loop2:<br/>$   sum <span class=\"sy0\">=</span> i * i * i + j * j * j<br/>$   <span class=\"kw1\">if</span> sum <span class=\"sy0\">.lt.</span> <span class=\"nu0\">0</span><br/>$   <span class=\"kw1\">then</span><br/>$    <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"overflow at \"</span>, j<br/>$    <span class=\"kw1\">goto</span> next_i<br/>$   <span class=\"kw1\">endif</span><br/>$   <span class=\"kw1\">write</span> sums_of_cubes <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!10SL,!10SL,!10SL\"</span>, sum, i, j <span class=\"br0\">)</span><br/>$   j <span class=\"sy0\">=</span> j + <span class=\"nu0\">1</span><br/>$   <span class=\"kw1\">if</span> j <span class=\"sy0\">.le.</span> i <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop2<br/>$<span class=\"re2\"> next_i:</span><br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> i <span class=\"sy0\">.le.</span> <span class=\"nu0\">1289</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> loop1  <span class=\"co1\">! cube_root of 2^31-1</span><br/>$ <span class=\"kw1\">close</span> sums_of_cubes<br/>$ <span class=\"kw1\">sort</span> sums_of_cubes.txt sorted_sums_of_cubes.txt<br/>$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>sorted_sums_of_cubes<br/>$ <span class=\"kw1\">open</span> sorted_sums_of_cubes sorted_sums_of_cubes.txt<br/>$ count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>$ <span class=\"kw1\">read</span> sorted_sums_of_cubes prev_prev_line  <span class=\"co1\">! need to detect when there are more than just 2 different sums, e.g. 456</span><br/>$ prev_prev_sum <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\",\"</span>, <span class=\"kw2\">f$edit</span><span class=\"br0\">(</span> prev_prev_line, <span class=\"st0\">\"collapse\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$ <span class=\"kw1\">read</span> sorted_sums_of_cubes prev_line<br/>$ prev_sum <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>,<span class=\"st0\">\",\"</span>, <span class=\"kw2\">f$edit</span><span class=\"br0\">(</span> prev_line, <span class=\"st0\">\"collapse\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$ loop3:<br/>$  <span class=\"kw1\">read</span> <span class=\"re1\">/end_of_file </span><span class=\"sy0\">=</span> done sorted_sums_of_cubes line<br/>$  sum <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\",\"</span>, <span class=\"kw2\">f$edit</span><span class=\"br0\">(</span> line, <span class=\"st0\">\"collapse\"</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$  <span class=\"kw1\">if</span> sum <span class=\"sy0\">.eqs.</span> prev_sum<br/>$  <span class=\"kw1\">then</span><br/>$   <span class=\"kw1\">if</span> sum <span class=\"sy0\">.nes.</span> prev_prev_sum <span class=\"kw1\">then</span> $ count <span class=\"sy0\">=</span> count + <span class=\"nu0\">1</span><br/>$   int_sum <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> sum <span class=\"br0\">)</span><br/>$   i1 <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\",\"</span>, prev_line <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$   j1 <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span>, <span class=\"st0\">\",\"</span>, prev_line <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$   i2 <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\",\"</span>, line <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$   j2 <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span>, <span class=\"st0\">\",\"</span>, line <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$   <span class=\"kw1\">if</span> count <span class=\"sy0\">.le.</span> <span class=\"nu0\">25</span> <span class=\"sy0\">.or.</span> <span class=\"br0\">(</span> count <span class=\"sy0\">.ge.</span> <span class=\"nu0\">2000</span> <span class=\"sy0\">.and.</span> count <span class=\"sy0\">.le.</span> <span class=\"nu0\">2006</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"sy0\">-</span><br/>$    <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!4SL:!11SL =!5SL^3 +!5SL^3 =!5SL^3 +!5SL^3\"</span>, count, int_sum, i1, j1, i2, j2 <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">endif</span><br/>$  prev_prev_line <span class=\"sy0\">=</span> prev_line<br/>$  prev_prev_sum <span class=\"sy0\">=</span> prev_sum<br/>$  prev_line <span class=\"sy0\">=</span> line<br/>$  prev_sum <span class=\"sy0\">=</span> sum<br/>$  <span class=\"kw1\">goto</span> loop3<br/>$<span class=\"re2\"> done:</span><br/>$ <span class=\"kw1\">close</span> sorted_sums_of_cubes<br/>$ <span class=\"kw1\">exit</span><br/>$<br/>$<span class=\"re2\"> clean:</span><br/>$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>sorted_sums_of_cubes<br/>$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>sums_of_cubes</pre>"}, {"lang": "EchoLisp", "loc": 50, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require '<span class=\"br0\">(</span>heap compile<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>scube a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a a a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> b b b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>compile 'scube <span class=\"st0\">\"-f\"</span><span class=\"br0\">)</span> <span class=\"co1\">; \"-f\" means\u00a0: no bigint, no rational used</span><br/>\u00a0<br/><span class=\"co1\">;; is n - a^3 a cube  b^3?</span><br/><span class=\"co1\">;; if yes return b, else #f</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>taxi? n a <span class=\"br0\">(</span>b <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> b <span class=\"br0\">(</span>cbrt <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"br0\">(</span><span class=\"sy0\">*</span> a a a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; cbrt is \u221b</span><br/>\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> b a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">integer?</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>compile 'taxi? <span class=\"st0\">\"-f\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">#|-------------------<br/>looking for taxis<br/>--------------------|#</span><br/><span class=\"co1\">;; remove from heap until heap-top &gt;= a</span><br/><span class=\"co1\">;; when twins are removed, it is a taxicab number\u00a0: push it</span><br/><span class=\"co1\">;; at any time (top stack) = last removed</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>clean<span class=\"sy0\">-</span>taxi H limit: a  min<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>heap: htop<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">and</span> htop <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a htop<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">(</span>stack<span class=\"sy0\">-</span>top <span class=\"kw1\">S</span><span class=\"br0\">)</span> htop<span class=\"br0\">)</span> <span class=\"br0\">(</span>pop <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>push <span class=\"kw1\">S</span> htop<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>heap<span class=\"sy0\">-</span>pop H<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>clean<span class=\"sy0\">-</span>taxi H  a <span class=\"br0\">(</span>heap<span class=\"sy0\">-</span>top H<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>compile 'clean<span class=\"sy0\">-</span>taxi <span class=\"st0\">\"-f\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; loop on a and b, b &lt;=a , until n taxicabs found</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>taxicab <span class=\"br0\">(</span>n <span class=\"nu0\">2100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>clean<span class=\"sy0\">-</span>taxi H <span class=\"br0\">(</span><span class=\"sy0\">*</span> a a a<span class=\"br0\">)</span> <span class=\"br0\">(</span>heap<span class=\"sy0\">-</span>top H<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:break <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>stack<span class=\"sy0\">-</span><span class=\"kw1\">length</span> <span class=\"kw1\">S</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>b a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>heap<span class=\"sy0\">-</span>push H <span class=\"br0\">(</span>scube a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">#|------------------<br/>printing taxis<br/>---------------------|#</span><br/><span class=\"co1\">;; string of all decompositions</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>taxi<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> i n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"%d.\u00a0%d \"</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> i<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span>cbrt n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:when <span class=\"br0\">(</span>taxi? n a<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>format <span class=\"st0\">\" =\u00a0%4d^3 +\u00a0%4d^3\"</span> a <span class=\"br0\">(</span>taxi? n a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>taxi<span class=\"sy0\">-</span>print taxis <span class=\"br0\">(</span>nfrom <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>nto <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>naturals nfrom<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>taxi <span class=\"br0\">(</span>sublist taxis nfrom nto<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>writeln <span class=\"br0\">(</span>taxi<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> i <span class=\"br0\">(</span>first taxi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule Taxicab do<br/>  def numbers(n \\\\ 1200) do<br/>    (for i &lt;- 1..n, j &lt;- i..n, do: {i,j})<br/>    |&gt; Enum.group_by(fn {i,j} -&gt; i*i*i + j*j*j end)<br/>    |&gt; Enum.filter(fn {_,v} -&gt; length(v)&gt;1 end)<br/>    |&gt; Enum.sort<br/>  end<br/>end<br/>\u00a0<br/>nums = Taxicab.numbers |&gt; Enum.with_index<br/>Enum.each(nums, fn {x,i} -&gt;<br/>  if i in 0..24 or i in 1999..2005 do<br/>    IO.puts \"#{i+1}\u00a0: #{inspect x}\"<br/>  end<br/>end)</pre>"}, {"lang": "FreeBASIC", "loc": 100, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 11-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' Brute force</span><br/>\u00a0<br/><span class=\"co1\">' adopted from \"Sorting algorithms/Shell\" sort Task</span><br/><span class=\"kw1\">Sub</span> shellsort<span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">' sort from lower bound to the highter bound</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> lb = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> ub = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> done, i, inc = ub - lb<br/>\u00a0<br/>  <span class=\"kw1\">Do</span><br/>    inc = inc / <span class=\"nu0\">2.2</span><br/>    <span class=\"kw1\">If</span> inc &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> inc = <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">Do</span><br/>      done = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">For</span> i = lb <span class=\"kw1\">To</span> ub - inc<br/>        <span class=\"kw1\">If</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &gt; s<span class=\"br0\">(</span>i + inc<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>          <span class=\"kw1\">Swap</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, s<span class=\"br0\">(</span>i + inc<span class=\"br0\">)</span><br/>          done = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> done = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> inc = <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x, y, count, c, sum<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> cube<span class=\"br0\">(</span><span class=\"nu0\">1290</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> result<span class=\"br0\">(</span><span class=\"br0\">)</span>, str1, str2, str3<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> buf11 = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>, buf5 = <span class=\"kw1\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">ReDim</span> result<span class=\"br0\">(</span><span class=\"nu0\">900000</span><span class=\"br0\">)</span>    <span class=\"co1\">' ~1291*1291\\2</span><br/>\u00a0<br/><span class=\"co1\">' set up the cubes</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" Calculate cubes\"</span><br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1290</span><br/>  cube<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = x*x*x<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' combine and store</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" Combine cubes\"</span><br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1290</span><br/>  <span class=\"kw1\">For</span> y = x <span class=\"kw1\">To</span> <span class=\"nu0\">1290</span><br/>    sum = cube<span class=\"br0\">(</span>x<span class=\"br0\">)</span>+cube<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">RSet</span> buf11, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span>\u00a0: str1 = buf11<br/>    <span class=\"kw1\">RSet</span> buf5, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>\u00a0: str2 = buf5<br/>    <span class=\"kw1\">RSet</span> buf5, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>\u00a0: Str3 = buf5<br/>    result<span class=\"br0\">(</span>count<span class=\"br0\">)</span>=buf11 + <span class=\"st0\">\" = \"</span> + str2 + <span class=\"st0\">\" ^ 3 + \"</span> + str3 + <span class=\"st0\">\" ^ 3\"</span><br/>    count = count +<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>count= count -<span class=\"nu0\">1</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">Preserve</span> result<span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"co1\">' trim the array</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" Sort (takes some time)\"</span><br/>shellsort<span class=\"br0\">(</span>result<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">' sort</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" Find the Taxicab numbers\"</span><br/>c = <span class=\"nu0\">1</span> <span class=\"co1\">' start at index 1</span><br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> count -<span class=\"nu0\">1</span><br/>  <span class=\"co1\">' find sums that match</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>result<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span> = <span class=\"kw1\">Left</span><span class=\"br0\">(</span>result<span class=\"br0\">(</span>x + <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    result<span class=\"br0\">(</span>c<span class=\"br0\">)</span> = result<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    y = x +<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Do</span>    <span class=\"co1\">' merge the other solution(s)</span><br/>      result<span class=\"br0\">(</span>c<span class=\"br0\">)</span> = result<span class=\"br0\">(</span>c<span class=\"br0\">)</span> + <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>result<span class=\"br0\">(</span>y<span class=\"br0\">)</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>      y = y +<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> <span class=\"kw1\">Left</span><span class=\"br0\">(</span>result<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"kw1\">Left</span><span class=\"br0\">(</span>result<span class=\"br0\">(</span>y<span class=\"br0\">)</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>    x = y -<span class=\"nu0\">1</span> <span class=\"co1\">' let x point to last match result</span><br/>    c = c +<span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>c = c -<span class=\"nu0\">1</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" \"</span>; c; <span class=\"st0\">\" Taxicab numbers found\"</span><br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">Preserve</span> result<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"co1\">' trim the array again</span><br/>\u00a0<br/><span class=\"kw1\">cls</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" Print first 25 numbers\"</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">25</span><br/>  <span class=\"kw1\">Print</span> result<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\" The 2000th to the 2006th\"</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">2000</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2006</span><br/>  <span class=\"kw1\">Print</span> result<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 113, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"container/heap\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> CubeSum <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tx<span class=\"sy1\">,</span> y  <span class=\"kw4\">uint16</span><br/>\tvalue <span class=\"kw4\">uint64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>CubeSum<span class=\"sy1\">)</span> fixvalue<span class=\"sy1\">()</span> <span class=\"sy1\">{</span> c<span class=\"sy3\">.</span>value <span class=\"sy2\">=</span> cubes<span class=\"sy1\">[</span>c<span class=\"sy3\">.</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> cubes<span class=\"sy1\">[</span>c<span class=\"sy3\">.</span>y<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> CubeSumHeap <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>CubeSum<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h CubeSumHeap<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>            <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>h<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h CubeSumHeap<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> h<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>value &lt; h<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>value <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h CubeSumHeap<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>       <span class=\"sy1\">{</span> h<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> h<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> h<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> h<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h <span class=\"sy3\">*</span>CubeSumHeap<span class=\"sy1\">)</span> Push<span class=\"sy1\">(</span>x <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>h<span class=\"sy1\">)</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span><span class=\"sy3\">*</span>h<span class=\"sy1\">,</span> x<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>CubeSum<span class=\"sy1\">))</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h <span class=\"sy3\">*</span>CubeSumHeap<span class=\"sy1\">)</span> Pop<span class=\"sy1\">()</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{}</span> <span class=\"sy1\">{</span><br/>\tx <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>h<span class=\"sy1\">)[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>h<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\t<span class=\"sy3\">*</span>h <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>h<span class=\"sy1\">)[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>h<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\t<span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> TaxicabGen <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tn <span class=\"kw4\">int</span><br/>\th CubeSumHeap<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> cubes <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span> <span class=\"co1\">// cubes[i] == i*i*i</span><br/><span class=\"kw4\">func</span> cubesExtend<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>cubes<span class=\"sy1\">));</span> n &lt;<span class=\"sy2\">=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">);</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tcubes <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>cubes<span class=\"sy1\">,</span> n<span class=\"sy3\">*</span>n<span class=\"sy3\">*</span>n<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>TaxicabGen<span class=\"sy1\">)</span> min<span class=\"sy1\">()</span> CubeSum <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>g<span class=\"sy3\">.</span>h<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> g<span class=\"sy3\">.</span>h<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>value &gt; cubes<span class=\"sy1\">[</span>g<span class=\"sy3\">.</span>n<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>\t\tg<span class=\"sy3\">.</span>n<span class=\"sy2\">++</span><br/>\t\tcubesExtend<span class=\"sy1\">(</span>g<span class=\"sy3\">.</span>n<span class=\"sy1\">)</span><br/>\t\theap<span class=\"sy3\">.</span>Push<span class=\"sy1\">(</span>&amp;g<span class=\"sy3\">.</span>h<span class=\"sy1\">,</span> &amp;CubeSum<span class=\"sy1\">{</span><span class=\"kw4\">uint16</span><span class=\"sy1\">(</span>g<span class=\"sy3\">.</span>n<span class=\"sy1\">),</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> cubes<span class=\"sy1\">[</span>g<span class=\"sy3\">.</span>n<span class=\"sy1\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">})</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"co1\">// Note, we use g.h[0] to \"peek\" at the min heap entry.</span><br/>\tc <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span><span class=\"sy1\">(</span>g<span class=\"sy3\">.</span>h<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>\t<span class=\"kw1\">if</span> c<span class=\"sy3\">.</span>y<span class=\"sy3\">+</span><span class=\"nu0\">1</span> &lt;<span class=\"sy2\">=</span> c<span class=\"sy3\">.</span>x <span class=\"sy1\">{</span><br/>\t\t<span class=\"co1\">// Instead of Pop and Push we modify in place and fix.</span><br/>\t\tg<span class=\"sy3\">.</span>h<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>y<span class=\"sy2\">++</span><br/>\t\tg<span class=\"sy3\">.</span>h<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>fixvalue<span class=\"sy1\">()</span><br/>\t\theap<span class=\"sy3\">.</span>Fix<span class=\"sy1\">(</span>&amp;g<span class=\"sy3\">.</span>h<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\theap<span class=\"sy3\">.</span>Pop<span class=\"sy1\">(</span>&amp;g<span class=\"sy3\">.</span>h<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> c<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Originally this was just: type Taxicab [2]CubeSum</span><br/><span class=\"co1\">// and we always returned two sums. Now we return all the sums.</span><br/><span class=\"kw1\">type</span> Taxicab <span class=\"sy1\">[]</span>CubeSum<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t Taxicab<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> b strings<span class=\"sy3\">.</span>Builder<br/>\tfmt<span class=\"sy3\">.</span>Fprintf<span class=\"sy1\">(</span>&amp;b<span class=\"sy1\">,</span> <span class=\"st0\">\"%12d\"</span><span class=\"sy1\">,</span> t<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>value<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> t <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Fprintf<span class=\"sy1\">(</span>&amp;b<span class=\"sy1\">,</span> <span class=\"st0\">\" =%5d\u00b3 +%5d\u00b3\"</span><span class=\"sy1\">,</span> p<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> p<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> b<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>g <span class=\"sy3\">*</span>TaxicabGen<span class=\"sy1\">)</span> Next<span class=\"sy1\">()</span> Taxicab <span class=\"sy1\">{</span><br/>\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> g<span class=\"sy3\">.</span>min<span class=\"sy1\">(),</span> g<span class=\"sy3\">.</span>min<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">for</span> a<span class=\"sy3\">.</span>value <span class=\"sy2\">!=</span> b<span class=\"sy3\">.</span>value <span class=\"sy1\">{</span><br/>\t\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">=</span> b<span class=\"sy1\">,</span> g<span class=\"sy3\">.</span>min<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"co1\">//return Taxicab{a,b}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Originally this just returned Taxicab{a,b} and we didn't look</span><br/>\t<span class=\"co1\">// further into the heap. Since we start by looking at the next</span><br/>\t<span class=\"co1\">// pair, that is okay until the first Taxicab number with four</span><br/>\t<span class=\"co1\">// ways of expressing the cube, which doesn't happen until the</span><br/>\t<span class=\"co1\">// 97,235th Taxicab:</span><br/>\t<span class=\"co1\">//     6963472309248 = 16630\u00b3 + 13322\u00b3 = 18072\u00b3 + 10200\u00b3</span><br/>\t<span class=\"co1\">//                   = 18948\u00b3 +  5436\u00b3 = 19083\u00b3 +  2421\u00b3</span><br/>\t<span class=\"co1\">// Now we return all ways so we need to peek into the heap.</span><br/>\tt <span class=\"sy2\">:=</span> Taxicab<span class=\"sy1\">{</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> g<span class=\"sy3\">.</span>h<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>value <span class=\"sy3\">==</span> b<span class=\"sy3\">.</span>value <span class=\"sy1\">{</span><br/>\t\tt <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>t<span class=\"sy1\">,</span> g<span class=\"sy3\">.</span>min<span class=\"sy1\">())</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> t<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\t\tlow  <span class=\"sy2\">=</span> <span class=\"nu0\">25</span><br/>\t\tmid  <span class=\"sy2\">=</span> <span class=\"nu1\">2e3</span><br/>\t\thigh <span class=\"sy2\">=</span> <span class=\"nu1\">4e4</span><br/>\t<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">var</span> tg TaxicabGen<br/>\tfirstn <span class=\"sy2\">:=</span> <span class=\"nu0\">3</span> <span class=\"co1\">// To show the first triple, quadruple, etc</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> high<span class=\"sy3\">+</span><span class=\"nu0\">6</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tt <span class=\"sy2\">:=</span> tg<span class=\"sy3\">.</span>Next<span class=\"sy1\">()</span><br/>\t\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">)</span> &gt;<span class=\"sy2\">=</span> firstn<span class=\"sy1\">:</span><br/>\t\t\tfirstn<span class=\"sy2\">++</span><br/>\t\t\t<span class=\"kw1\">fallthrough</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> low <span class=\"sy3\">||</span> <span class=\"sy1\">(</span>mid &lt;<span class=\"sy2\">=</span> <span class=\"nu2\">i</span> &amp;&amp; <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> mid<span class=\"sy3\">+</span><span class=\"nu0\">6</span><span class=\"sy1\">)</span> <span class=\"sy3\">||</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> high<span class=\"sy1\">:</span><br/>\t\t\t<span class=\"co1\">//fmt.Printf(\"h:%-4d  \", len(tg.h))</span><br/>\t\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%5d:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> t<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 41, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sortBy<span class=\"sy0\">,</span> groupBy<span class=\"sy0\">,</span> tails<span class=\"sy0\">,</span> transpose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- TAXICAB NUMBERS ----------------------------------------------------</span><br/>taxis <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>taxis nCubes <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  groupBy <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  sortBy<br/>    <span class=\"br0\">(</span>comparing <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> x <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> y<span class=\"sy0\">,</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x:t<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> tails <span class=\"sy0\">$</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> nCubes<span class=\"br0\">]</span> <br/>    <span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> t <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Taxicab numbers composed from first 1200 cubes</span><br/>xs <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>taxis <span class=\"nu0\">1200</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- PRETTY PRINTING ----------------------------------------------------</span><br/>taxiRow <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>taxiRow <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>axc<span class=\"sy0\">,</span> axr<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>ayc<span class=\"sy0\">,</span> ayr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bxc<span class=\"sy0\">,</span> bxr<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>byc<span class=\"sy0\">,</span> byr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a><br/>    <span class=\"br0\">[</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<span class=\"sy0\">,</span> <span class=\"st0\">\". \"</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a<span class=\"sy0\">,</span> <span class=\"st0\">\" = \"</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> term axr axc <span class=\"st0\">\" + \"</span><br/>    <span class=\"sy0\">,</span> term ayr ayc <span class=\"st0\">\"  or  \"</span><br/>    <span class=\"sy0\">,</span> term bxr bxc <span class=\"st0\">\" + \"</span><br/>    <span class=\"sy0\">,</span> term byr byc <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    term r c l <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> r<span class=\"sy0\">,</span> <span class=\"st0\">\"^3=\"</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> c<span class=\"sy0\">,</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">,</span> l<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- OUTPUT -------------------------------------------------------------</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">&lt;$&gt;</span><br/>  transpose<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=&lt;&lt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> justifyRight <span class=\"st0\">' '</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>     transpose <span class=\"br0\">(</span>taxiRow <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">25</span> xs <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">7</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1999</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    justifyRight n c s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">(</span>replicate n c <span class=\"sy0\">++</span> s<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 57, "block": "<pre class=\"j highlighted_source\">cubes=: <span class=\"nu0\">3</span>^~<span class=\"nu0\">1</span>+i.<span class=\"nu0\">100</span> <span class=\"co1\">NB. first 100 cubes</span><br/>triples=: /:~ ~. ,/ <span class=\"sy0\">(</span>+ , /:<a class=\"__cf_email__\" data-cfemail=\"1d635d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span>/~cubes <span class=\"co1\">NB. ordered pairs of cubes (each with their sum)</span><br/>candidates=:\u00a0;<span class=\"sy0\">(</span>{.\"#. &lt;@<span class=\"sy0\">(</span><span class=\"nu0\">0</span>&amp;#`<span class=\"sy0\">(</span>{<a class=\"__cf_email__\" data-cfemail=\"577917\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{.<span class=\"sy0\">(</span>;,<span class=\"sy0\">)</span>&lt;@}.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>@.<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&lt;#<span class=\"sy0\">))</span>/. ]<span class=\"sy0\">)</span>triples<br/>\u00a0<br/><span class=\"co1\">NB. we just want the first 25 taxicab numbers</span><br/><span class=\"nu0\">25</span>{.<span class=\"sy0\">(</span>,.~ &lt;@&gt;:@<a class=\"__cf_email__\" data-cfemail=\"b4dd9af4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> candidates<br/>\u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">1</span> \u2502<span class=\"nu0\">1729</span>  \u2502<span class=\"nu0\">1</span> <span class=\"nu0\">1728</span>      \u2502<span class=\"nu0\">729</span> <span class=\"nu0\">1000</span>     \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">2</span> \u2502<span class=\"nu0\">4104</span>  \u2502<span class=\"nu0\">8</span> <span class=\"nu0\">4096</span>      \u2502<span class=\"nu0\">729</span> <span class=\"nu0\">3375</span>     \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">3</span> \u2502<span class=\"nu0\">13832</span> \u2502<span class=\"nu0\">8</span> <span class=\"nu0\">13824</span>     \u2502<span class=\"nu0\">5832</span> <span class=\"nu0\">8000</span>    \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">4</span> \u2502<span class=\"nu0\">20683</span> \u2502<span class=\"nu0\">1000</span> <span class=\"nu0\">19683</span>  \u2502<span class=\"nu0\">6859</span> <span class=\"nu0\">13824</span>   \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">5</span> \u2502<span class=\"nu0\">32832</span> \u2502<span class=\"nu0\">64</span> <span class=\"nu0\">32768</span>    \u2502<span class=\"nu0\">5832</span> <span class=\"nu0\">27000</span>   \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">6</span> \u2502<span class=\"nu0\">39312</span> \u2502<span class=\"nu0\">8</span> <span class=\"nu0\">39304</span>     \u2502<span class=\"nu0\">3375</span> <span class=\"nu0\">35937</span>   \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">7</span> \u2502<span class=\"nu0\">40033</span> \u2502<span class=\"nu0\">729</span> <span class=\"nu0\">39304</span>   \u2502<span class=\"nu0\">4096</span> <span class=\"nu0\">35937</span>   \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">8</span> \u2502<span class=\"nu0\">46683</span> \u2502<span class=\"nu0\">27</span> <span class=\"nu0\">46656</span>    \u2502<span class=\"nu0\">19683</span> <span class=\"nu0\">27000</span>  \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">9</span> \u2502<span class=\"nu0\">64232</span> \u2502<span class=\"nu0\">4913</span> <span class=\"nu0\">59319</span>  \u2502<span class=\"nu0\">17576</span> <span class=\"nu0\">46656</span>  \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">10</span>\u2502<span class=\"nu0\">65728</span> \u2502<span class=\"nu0\">1728</span> <span class=\"nu0\">64000</span>  \u2502<span class=\"nu0\">29791</span> <span class=\"nu0\">35937</span>  \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">11</span>\u2502<span class=\"nu0\">110656</span>\u2502<span class=\"nu0\">64</span> <span class=\"nu0\">110592</span>   \u2502<span class=\"nu0\">46656</span> <span class=\"nu0\">64000</span>  \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">12</span>\u2502<span class=\"nu0\">110808</span>\u2502<span class=\"nu0\">216</span> <span class=\"nu0\">110592</span>  \u2502<span class=\"nu0\">19683</span> <span class=\"nu0\">91125</span>  \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">13</span>\u2502<span class=\"nu0\">134379</span>\u2502<span class=\"nu0\">1728</span> <span class=\"nu0\">132651</span> \u2502<span class=\"nu0\">54872</span> <span class=\"nu0\">79507</span>  \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">14</span>\u2502<span class=\"nu0\">149389</span>\u2502<span class=\"nu0\">512</span> <span class=\"nu0\">148877</span>  \u2502<span class=\"nu0\">24389</span> <span class=\"nu0\">125000</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">15</span>\u2502<span class=\"nu0\">165464</span>\u2502<span class=\"nu0\">8000</span> <span class=\"nu0\">157464</span> \u2502<span class=\"nu0\">54872</span> <span class=\"nu0\">110592</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">16</span>\u2502<span class=\"nu0\">171288</span>\u2502<span class=\"nu0\">4913</span> <span class=\"nu0\">166375</span> \u2502<span class=\"nu0\">13824</span> <span class=\"nu0\">157464</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">17</span>\u2502<span class=\"nu0\">195841</span>\u2502<span class=\"nu0\">729</span> <span class=\"nu0\">195112</span>  \u2502<span class=\"nu0\">10648</span> <span class=\"nu0\">185193</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">18</span>\u2502<span class=\"nu0\">216027</span>\u2502<span class=\"nu0\">27</span> <span class=\"nu0\">216000</span>   \u2502<span class=\"nu0\">10648</span> <span class=\"nu0\">205379</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">19</span>\u2502<span class=\"nu0\">216125</span>\u2502<span class=\"nu0\">125</span> <span class=\"nu0\">216000</span>  \u2502<span class=\"nu0\">91125</span> <span class=\"nu0\">125000</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">20</span>\u2502<span class=\"nu0\">262656</span>\u2502<span class=\"nu0\">512</span> <span class=\"nu0\">262144</span>  \u2502<span class=\"nu0\">46656</span> <span class=\"nu0\">216000</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">21</span>\u2502<span class=\"nu0\">314496</span>\u2502<span class=\"nu0\">64</span> <span class=\"nu0\">314432</span>   \u2502<span class=\"nu0\">27000</span> <span class=\"nu0\">287496</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">22</span>\u2502<span class=\"nu0\">320264</span>\u2502<span class=\"nu0\">5832</span> <span class=\"nu0\">314432</span> \u2502<span class=\"nu0\">32768</span> <span class=\"nu0\">287496</span> \u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">23</span>\u2502<span class=\"nu0\">327763</span>\u2502<span class=\"nu0\">27000</span> <span class=\"nu0\">300763</span>\u2502<span class=\"nu0\">132651</span> <span class=\"nu0\">195112</span>\u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">24</span>\u2502<span class=\"nu0\">373464</span>\u2502<span class=\"nu0\">216</span> <span class=\"nu0\">373248</span>  \u2502<span class=\"nu0\">157464</span> <span class=\"nu0\">216000</span>\u2502<br/>\u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">25</span>\u2502<span class=\"nu0\">402597</span>\u2502<span class=\"nu0\">74088</span> <span class=\"nu0\">328509</span>\u2502<span class=\"nu0\">175616</span> <span class=\"nu0\">226981</span>\u2502<br/>\u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre>"}, {"lang": "Java", "loc": 75, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.PriorityQueue</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Iterator</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> CubeSum <span class=\"kw1\">implements</span> Comparable<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">long</span> x, y, value<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> CubeSum<span class=\"br0\">(</span><span class=\"kw4\">long</span> x, <span class=\"kw4\">long</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">*</span>x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y<span class=\"sy0\">*</span>y<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d^3 +\u00a0%4d^3\"</span>, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compareTo<span class=\"br0\">(</span>CubeSum that<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> value <span class=\"sy0\">&lt;</span> that.<span class=\"me1\">value</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> value <span class=\"sy0\">&gt;</span> that.<span class=\"me1\">value</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> SumIterator <span class=\"kw1\">implements</span> Iterator<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\tPriorityQueue<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> pq <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> PriorityQueue<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">long</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> CubeSum next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>pq.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> pq.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">value</span> <span class=\"sy0\">&gt;=</span> n<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>\t\t\tpq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> CubeSum<span class=\"br0\">(</span><span class=\"sy0\">++</span>n, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tCubeSum s <span class=\"sy0\">=</span> pq.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">&gt;</span> s.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> pq.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> CubeSum<span class=\"br0\">(</span>s.<span class=\"me1\">x</span>, s.<span class=\"me1\">y</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> TaxiIterator <span class=\"kw1\">implements</span> Iterator<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>\tIterator<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> sumIterator <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> SumIterator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tCubeSum last <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tCubeSum s<span class=\"sy0\">;</span><br/>\t\tList<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> train <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">value</span> <span class=\"sy0\">!=</span> last.<span class=\"me1\">value</span><span class=\"br0\">)</span><br/>\t\t\tlast <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\ttrain.<span class=\"me1\">add</span><span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span> train.<span class=\"me1\">add</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">value</span> <span class=\"sy0\">==</span> last.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tlast <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> train<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Taxi <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tIterator<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;&gt;</span> taxi <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TaxiIterator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2006</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tList<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> t <span class=\"sy0\">=</span> taxi.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">25</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d:\u00a0%10d\"</span>, i, t.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>CubeSum s<span class=\"sy0\">:</span> t<span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" = \"</span> <span class=\"sy0\">+</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> n3s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    s3s <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> e <span class=\"sy0\">=</span> <span class=\"nu0\">1200</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> e<span class=\"sy0\">;</span> n <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> n3s<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n <span class=\"sy0\">*</span> n<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span> e <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> a3 <span class=\"sy0\">=</span> n3s<span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;</span> e<span class=\"sy0\">;</span> b <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> b3 <span class=\"sy0\">=</span> n3s<span class=\"br0\">[</span>b<span class=\"br0\">]</span><br/>        <span class=\"kw1\">var</span> s3 <span class=\"sy0\">=</span> a3 <span class=\"sy0\">+</span> b3<span class=\"sy0\">,</span><br/>            abs <span class=\"sy0\">=</span> s3s<span class=\"br0\">[</span>s3<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>abs<span class=\"br0\">)</span> s3s<span class=\"br0\">[</span>s3<span class=\"br0\">]</span> <span class=\"sy0\">=</span> abs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        abs.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> s3 <span class=\"kw1\">in</span> s3s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> abs <span class=\"sy0\">=</span> s3s<span class=\"br0\">[</span>s3<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>abs.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><br/>    i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>abs.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">25</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2006</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">': '</span><span class=\"sy0\">,</span> s3<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> ab of abs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">' = '</span><span class=\"sy0\">,</span> ab<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'&lt;sup&gt;3&lt;/sup&gt;+'</span><span class=\"sy0\">,</span> ab<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">'&lt;sup&gt;3&lt;/sup&gt;'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;br&gt;'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 39, "block": "<pre class=\"text highlighted_source\"># Output: an array of the form [i^3 + j^3, [i, j]] sorted by the sum.<br/># Only cubes of 1 to ($in-1) are considered; the listing is therefore truncated<br/># as it might not capture taxicab numbers greater than $in ^ 3.<br/>def sum_of_two_cubes:<br/>  def cubed: .*.*.;<br/>  . as $in<br/>  | (cubed + 1) as $limit<br/>  | [range(1;$in) as $i | range($i;$in) as $j<br/>\u00a0<br/>  | [ ($i|cubed) + ($j|cubed), [$i, $j] ] ] | sort<br/>  | map( select( .[0] &lt; $limit ) );<br/>\u00a0<br/># Output a stream of triples [t, d1, d2], in order of t,<br/># where t is a taxicab number, and d1 and d2 are distinct<br/># decompositions [i,j] with i^3 + j^3 == t.<br/># The stream includes each taxicab number once only.<br/>#<br/>def taxicabs0:<br/>  sum_of_two_cubes as $sums<br/>  | range(1;$sums|length) as $i<br/>  | if $sums[$i][0] == $sums[$i-1][0]<br/>      and ($i==1 or $sums[$i][0]\u00a0!= $sums[$i-2][0])<br/>    then [$sums[$i][0], $sums[$i-1][1], $sums[$i][1]]<br/>    else empty<br/>    end;<br/>\u00a0<br/># Output a stream of $n taxicab triples: [t, d1, d2] as described above,<br/># without repeating t.<br/>def taxicabs:<br/>  # If your jq includes until/2 then the following definition<br/>  # can be omitted:<br/>  def until(cond; next):<br/>    def _until: if cond then . else (next|_until) end;  _until;<br/>  . as $n<br/>  | [10, ($n / 10 | floor)] | max as $increment<br/>  | [20, ($n / 2 | floor)] | max<br/>  | [ ., [taxicabs0] ]<br/>  | until( .[1] | length &gt;= $m; (.[0] + $increment) | [., [taxicabs0]] )<br/>  | .[1][0:$n]\u00a0;</pre>"}, {"lang": "Julia", "loc": 54, "block": "<pre class=\"text highlighted_source\">using DataStructures, IterTools<br/>\u00a0<br/>function findtaxinumbers(nmax::Integer)<br/>    cube2n = Dict{Int,Int}(x ^ 3 =&gt; x for x in 0:nmax)<br/>    sum2cubes = DefaultDict{Int,Set{NTuple{2,Int}}}(Set{NTuple{2,Int}})<br/>    for ((c1, _), (c2, _)) in product(cube2n, cube2n)<br/>        if c1 \u2265 c2<br/>            push!(sum2cubes[c1 + c2], (cube2n[c1], cube2n[c2]))<br/>        end<br/>    end<br/>\u00a0<br/>    taxied = collect((k, v) for (k, v) in sum2cubes if length(v) \u2265 2)<br/>    return sort!(taxied, by = first)<br/>end<br/>taxied = findtaxinumbers(1200)<br/>\u00a0<br/>for (ith, (cube, set)) in zip(1:25, taxied[1:25])<br/>    @printf \"%2i:\u00a0%7i =\u00a0%s\\n\" ith cube join(set, \", \")<br/>    # println(ith, \": \", cube, \" = \", join(set, \", \"))<br/>end<br/>println(\"...\")<br/>for (ith, (cube, set)) in zip(2000:2006, taxied[2000:2006])<br/>    @printf \"%-4i:\u00a0%i =\u00a0%s\\n\" ith cube join(set, \", \")<br/>end<br/>\u00a0<br/># version 2<br/>function findtaxinumbers(nmax::Integer)<br/>    cubes, crev = collect(x ^ 3 for x in 1:nmax), Dict{Int,Int}()<br/>    for (x, x3) in enumerate(cubes)<br/>        crev[x3] = x<br/>    end<br/>    sums = collect(x + y for x in cubes for y in cubes if y &lt; x)<br/>    sort!(sums)<br/>\u00a0<br/>    idx = 0<br/>    for i in 2:(endof(sums) - 1)<br/>        if sums[i-1]\u00a0!= sums[i] &amp;&amp; sums[i] == sums[i+1]<br/>            idx += 1<br/>            if 25 &lt; idx &lt; 2000 || idx &gt; 2006 continue end<br/>            n, p = sums[i], NTuple{2,Int}[]<br/>            for x in cubes<br/>                n &lt; 2x &amp;&amp; break<br/>                if haskey(crev, n - x)<br/>                    push!(p, (crev[x], crev[n - x]))<br/>                end<br/>            end<br/>            @printf \"%4d:\u00a0%10d\" idx n<br/>            for x in p @printf(\" =\u00a0%4d ^ 3 +\u00a0%4d ^ 3\", x...) end<br/>            println()<br/>        end<br/>    end<br/>end<br/>\u00a0<br/>findtaxinumbers(1200)</pre>"}, {"lang": "Kotlin", "loc": 61, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">PriorityQueue</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> CubeSum<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Long, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y <span class=\"sy0\">*</span> y<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> String.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d^3 +\u00a0%3d^3\"</span>, x, y<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> CubeSum<span class=\"br0\">)</span> <span class=\"sy0\">=</span> value.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other.<span class=\"me1\">value</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SumIterator <span class=\"sy0\">:</span> Iterator<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pq <span class=\"sy0\">=</span> PriorityQueue<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> 0L<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun next<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> CubeSum <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>pq.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || pq.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">value</span> <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">*</span> n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <br/>            pq.<span class=\"me1\">add</span><span class=\"br0\">(</span>CubeSum<span class=\"br0\">(</span>++n, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s<span class=\"sy0\">:</span> CubeSum <span class=\"sy0\">=</span> pq.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">x</span> <span class=\"sy0\">&gt;</span> s.<span class=\"me1\">y</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> pq.<span class=\"me1\">add</span><span class=\"br0\">(</span>CubeSum<span class=\"br0\">(</span>s.<span class=\"me1\">x</span>, s.<span class=\"me1\">y</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> TaxiIterator <span class=\"sy0\">:</span> Iterator<span class=\"sy0\">&lt;</span>MutableList<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sumIterator <span class=\"sy0\">=</span> SumIterator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> last<span class=\"sy0\">:</span> CubeSum <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun next<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s<span class=\"sy0\">:</span> CubeSum <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> train <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>CubeSum<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">value</span> <span class=\"sy0\">!=</span> last.<span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            last <span class=\"sy0\">=</span> s<br/>            s <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        train.<span class=\"me1\">add</span><span class=\"br0\">(</span>last<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            train.<span class=\"me1\">add</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            s <span class=\"sy0\">=</span> sumIterator.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">value</span> <span class=\"sy0\">==</span> last.<span class=\"me1\">value</span><span class=\"br0\">)</span><br/>        last <span class=\"sy0\">=</span> s<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> train<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> taxi <span class=\"sy0\">=</span> TaxiIterator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">2006</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> taxi.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">26</span> until <span class=\"nu0\">2000</span><span class=\"br0\">)</span> continue<br/>        print<span class=\"br0\">(</span>String.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d:\u00a0%10d\"</span>, i, t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in t<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"  = $s\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">taxicab<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span>sqrtnint<span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> sqrtnint<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">ispower</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>k<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> t<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"nu1\">0</span><span class=\"sy0\">;</span><br/>cubes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span>sqrtnint<span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> sqrtnint<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">ispower</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>k<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>t<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\" =  <span class=\"es0\">\\t</span>\"</span>k<span class=\"st0\">\"^3<span class=\"es0\">\\t</span>+ \"</span>t<span class=\"st0\">\"^3\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">select</span><span class=\"br0\">(</span>taxicab<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">402597</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>cubes<span class=\"sy0\">,</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 136, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> taxiCabNo<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tPot3    <span class=\"sy3\">=</span> Uint32<span class=\"sy1\">;</span><br/>  tPot3Sol <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>               p3Sum <span class=\"sy1\">:</span> tPot3<span class=\"sy1\">;</span><br/>               i1<span class=\"sy1\">,</span>j1<span class=\"sy1\">,</span><br/>               i2<span class=\"sy1\">,</span>j2 <span class=\"sy1\">:</span> <span class=\"kw4\">Word</span><span class=\"sy1\">;</span><br/>             <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/> tpPot3    <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tPot3<span class=\"sy1\">;</span><br/> tpPot3Sol <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tPot3Sol<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/><span class=\"co1\">//1290^3 = 2'146'689'000 &lt; 2^31-1</span><br/><span class=\"co1\">//1190 is the magic number of the task\u00a0;-)</span><br/>  pot3 <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">1190</span><span class=\"coMULTI\">{1290}</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tPot3<span class=\"sy1\">;</span><span class=\"co1\">//</span><br/>  AllSol <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">3000</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tpot3Sol<span class=\"sy1\">;</span><br/>  AllSolHigh <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SolOut<span class=\"br0\">(</span><span class=\"kw1\">const</span> s<span class=\"sy1\">:</span>tpot3Sol<span class=\"sy1\">;</span>no<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">with</span> s <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>no<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span>p3Sum<span class=\"sy1\">:</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span><span class=\"st0\">' = '</span><span class=\"sy1\">,</span>j1<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"st0\">'^3 +'</span><span class=\"sy1\">,</span>i1<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"st0\">'^3 ='</span><span class=\"sy1\">,</span>j2<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"st0\">'^3 +'</span><span class=\"sy1\">,</span>i2<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"st0\">'^3'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InsertAllSol<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  tmp<span class=\"sy1\">:</span> tpot3Sol<span class=\"sy1\">;</span><br/>  p <span class=\"sy1\">:</span>tpPot3Sol<span class=\"sy1\">;</span><br/>  p3Sum<span class=\"sy1\">:</span> tPot3<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>\u00a0<br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> AllSolHigh<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>AllSol<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy2\">^</span><span class=\"sy1\">;</span><br/>    p3Sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">p3Sum</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//search the right place for insertion</span><br/>    <span class=\"kw1\">repeat</span><br/>      dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>p<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">p3Sum</span> &lt;<span class=\"sy3\">=</span> p3Sum<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span>  <span class=\"br0\">(</span>i&lt;<span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> p<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">p3Sum</span> <span class=\"sy3\">=</span> p3Sum <span class=\"kw1\">then</span><br/>      EXIT<span class=\"sy1\">;</span><br/>    <span class=\"co1\">//free the right place by moving one place up</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> i&lt;AllSolHigh <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      move<span class=\"br0\">(</span>p<span class=\"sy2\">^</span><span class=\"sy1\">,</span>AllSol<span class=\"br0\">[</span>i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>AllSol<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"br0\">(</span>AllSolHigh<span class=\"sy3\">-</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      p<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> tmp<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  inc<span class=\"br0\">(</span>AllSolHigh<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> searchSameSum<span class=\"br0\">(</span><span class=\"kw1\">var</span> sol<span class=\"sy1\">:</span>tpot3Sol<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//try to find a new combination for the same sum</span><br/><span class=\"co1\">//within the limits given by lo and hi</span><br/><span class=\"kw1\">var</span><br/>  Sum<span class=\"sy1\">,</span><br/>  SumLo<span class=\"sy1\">:</span> tPot3<span class=\"sy1\">;</span><br/>  hi<span class=\"sy1\">,</span>lo<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">with</span> Sol <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    Sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p3Sum<span class=\"sy1\">;</span><br/>    lo<span class=\"sy1\">:</span><span class=\"sy3\">=</span> i1<span class=\"sy1\">;</span><br/>    hi<span class=\"sy1\">:</span><span class=\"sy3\">=</span> j1<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"co1\">//Move hi down</span><br/>    dec<span class=\"br0\">(</span>hi<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    SumLo <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Sum<span class=\"sy3\">-</span>Pot3<span class=\"br0\">[</span>hi<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//Move lo up an check until new combination found or implicite lo&gt; hi </span><br/>    <span class=\"kw1\">repeat</span><br/>      inc<span class=\"br0\">(</span>lo<span class=\"br0\">)</span><br/>    <span class=\"kw1\">until</span> <span class=\"br0\">(</span>SumLo&lt;<span class=\"sy3\">=</span>Pot3<span class=\"br0\">[</span>lo<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//found?</span><br/>    <span class=\"kw1\">IF</span> SumLo <span class=\"sy3\">=</span> Pot3<span class=\"br0\">[</span>lo<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">BREAK</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> lo&gt;<span class=\"sy3\">=</span>hi<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">IF</span> lo&lt;hi <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    sol<span class=\"sy1\">.</span><span class=\"me1\">i2</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> lo<span class=\"sy1\">;</span><br/>    sol<span class=\"sy1\">.</span><span class=\"me1\">j2</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> hi<span class=\"sy1\">;</span><br/>    searchSameSum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>    searchSameSum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Search<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  AllSolHigh <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>pot3<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> j<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"kw1\">with</span> AllSol<span class=\"br0\">[</span>AllSolHigh<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        p3Sum<span class=\"sy1\">:</span><span class=\"sy3\">=</span> pot3<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">+</span>pot3<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        i1<span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>        j1<span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> searchSameSum<span class=\"br0\">(</span>AllSol<span class=\"br0\">[</span>AllSolHigh<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">BEGIN</span><br/>        InsertAllSol<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">IF</span> AllSolHigh&gt;High<span class=\"br0\">(</span>AllSol<span class=\"br0\">)</span> <span class=\"kw1\">then</span> EXIT<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>pot3<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>pot3<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    pot3<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">*</span>i<span class=\"sy3\">*</span>i<span class=\"sy1\">;</span><br/>  AllSolHigh <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  Search<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span>    <span class=\"nu0\">0</span> <span class=\"kw1\">to</span>   <span class=\"nu0\">24</span> <span class=\"kw1\">do</span> SolOut<span class=\"br0\">(</span>AllSol<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1999</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2005</span> <span class=\"kw1\">do</span> SolOut<span class=\"br0\">(</span>AllSol<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'count of solutions         '</span><span class=\"sy1\">,</span>AllSolHigh<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 54, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$beg</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$lim</span> <span class=\"sy0\">=</span> 1e14<span class=\"sy0\">;</span>  <span class=\"co1\"># Ought to be dynamic as should segment size</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@basis</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">*</span><span class=\"co5\">$_</span><span class=\"sy0\">*</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$lim</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">3.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$paira</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>  <span class=\"co1\"># We're looking for Ta(2) and larger</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$segsize</span><span class=\"sy0\">,</span> <span class=\"re0\">$low</span><span class=\"sy0\">,</span> <span class=\"re0\">$high</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">500</span>_000_000<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$low</span> <span class=\"sy0\">=</span> <span class=\"re0\">$high</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"lim too low\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$low</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$lim</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$high</span> <span class=\"sy0\">=</span> <span class=\"re0\">$low</span> <span class=\"sy0\">+</span> <span class=\"re0\">$segsize</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$high</span> <span class=\"sy0\">=</span> <span class=\"re0\">$lim</span> <span class=\"kw1\">if</span> <span class=\"re0\">$high</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$lim</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"br0\">(</span>_find_pairs_segment<span class=\"br0\">(</span><span class=\"re0\">\\@basis</span><span class=\"sy0\">,</span> <span class=\"re0\">$paira</span><span class=\"sy0\">,</span> <span class=\"re0\">$low</span><span class=\"sy0\">,</span> <span class=\"re0\">$high</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d^3 +\u00a0%4d^3\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>    <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$i</span><span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$beg</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$end</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@$p</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%4d:\u00a0%10d  =\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  = \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> _find_pairs_segment <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span><span class=\"sy0\">,</span> <span class=\"re0\">$formatsub</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$plen</span> <span class=\"sy0\">=</span> <span class=\"co5\">$#</span><span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">my</span> <span class=\"re0\">%allpairs</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$plen</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pi</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pi</span><span class=\"sy0\">+</span><span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$plen</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"re0\">*$pi</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$end</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">..</span> <span class=\"re0\">$plen</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pi</span> <span class=\"sy0\">+</span> <span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$end</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span> <span class=\"re0\">$allpairs</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># If we wanted to save more memory, we could filter and delete every entry</span><br/>    <span class=\"co1\"># where $n &lt; 2 * $p-&gt;[$i+1].  This can cut memory use in half, but is slow.</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@retlist</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$list</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$len</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%allpairs</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$list</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$p</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$list</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@pairlist</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@$list</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@pairlist</span><span class=\"sy0\">,</span> <span class=\"re0\">$formatsub</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@$list</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@$list</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@retlist</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">@pairlist</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"re0\">@retlist</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"re0\">@retlist</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@retlist</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 25, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%taxi</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$taxis</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$terminate</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$c1</span> <span class=\"br0\">{</span><br/>        display<span class=\"br0\">(</span> <span class=\"re0\">%taxi</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span> <span class=\"br0\">)</span> <span class=\"kw1\">and</span> exit <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$terminate</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$c1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c1</span> <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$c1</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$c2</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c2</span> <span class=\"sy0\">**</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">%taxi</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"re0\">$c2</span><span class=\"sy0\">,</span> <span class=\"re0\">$c1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$taxis</span><span class=\"sy0\">++</span> <span class=\"kw1\">if</span> <span class=\"re0\">%taxi</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    \t    <span class=\"re0\">$terminate</span> <span class=\"sy0\">=</span> <span class=\"re0\">%taxi</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span> <span class=\"sy0\">+*.</span><span class=\"me1\">key</span> <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"re0\">$taxis</span> <span class=\"sy0\">==</span> <span class=\"re0\">$end</span> <span class=\"kw1\">and</span> <span class=\"sy0\">!</span><span class=\"re0\">$terminate</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> display <span class=\"br0\">(</span><span class=\"re0\">%this_stuff</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"re0\">$end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%4d\u00a0%10d  =&gt;<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">++,</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"sy0\">,</span> <br/>        <span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"kw3\">sprintf</span> <span class=\"st0\">\"%4d\u00b3 +\u00a0%-s\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$_[1]<span class=\"es0\">\\\u00b3</span>\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">:</span> <span class=\"st0\">\",<span class=\"es0\">\\t</span>\"</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">%this_stuff</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span> <span class=\"sy0\">+*.</span><span class=\"me1\">key</span> <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"re0\">$start</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$end</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(off 'B)<br/>(for L (subsets 2 (range 1 1200))<br/>   (let K (sum '((N) (** N 3)) L)<br/>      (ifn (lup B K)<br/>         (idx 'B (list K 1 (list L)) T)<br/>         (inc (cdr @))<br/>         (push (cddr @) L) ) ) )<br/>(setq R<br/>   (filter<br/>      '((L) (&gt;= (cadr L) 2))<br/>      (idx 'B)) )<br/>(for L (head 25 R)<br/>   (println (car L) (caddr L)) )<br/>(for L (head 7 (nth R 2000))<br/>   (println (car L) (caddr L)) )</pre>"}, {"lang": "Python", "loc": 17, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/><span class=\"kw1\">from</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">import</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">as</span> pp<br/>\u00a0<br/>cube2n <span class=\"sy0\">=</span> <span class=\"br0\">{</span>x**<span class=\"nu0\">3</span>:x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1201</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>sum2cubes <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> c1<span class=\"sy0\">,</span> c2 <span class=\"kw1\">in</span> product<span class=\"br0\">(</span>cube2n<span class=\"sy0\">,</span> cube2n<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">if</span> c1 <span class=\"sy0\">&gt;=</span> c2: sum2cubes<span class=\"br0\">[</span>c1 + c2<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"br0\">(</span>cube2n<span class=\"br0\">[</span>c1<span class=\"br0\">]</span><span class=\"sy0\">,</span> cube2n<span class=\"br0\">[</span>c2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>taxied <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span>v <span class=\"kw1\">in</span> sum2cubes.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">#pp(len(taxied))  # 2068</span><br/><span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>taxied<span class=\"br0\">[</span>:<span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    pp<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'...'</span><span class=\"br0\">)</span>    <br/><span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>taxied<span class=\"br0\">[</span><span class=\"nu0\">2000</span>-<span class=\"nu0\">1</span>:<span class=\"nu0\">2000</span>+<span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span>:<br/>    pp<span class=\"br0\">(</span>t<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (cube x) (* x x x))<br/>\u00a0<br/>;floor of cubic root<br/>(define (cubic-root x)<br/>  (let ([aprox (inexact-&gt;exact (round (expt x (/ 1 3))))])<br/>    (if (&gt; (cube aprox) x)<br/>        (- aprox 1)<br/>        aprox)))<br/>\u00a0<br/>(let loop ([p 1] [n 1])<br/>  (let ()<br/>    (define pairs<br/>      (for*/list ([j (in-range 1 (add1 (cubic-root (quotient n 2))))]<br/>                  [k (in-value (cubic-root (- n (cube j))))]<br/>                  #:when (= n (+ (cube j) (cube k))))<br/>        (cons j k)))<br/>    (if (&gt;= (length pairs) 2)<br/>      (begin<br/>        (printf \"~a: ~a\" p n)<br/>        (for ([pair (in-list pairs)])<br/>          (printf \" = ~a^3 + ~a^3\" (car pair) (cdr pair)))<br/>          (newline)<br/>        (when (&lt; p 25)<br/>          (loop (add1 p) (add1 n))))<br/>      (loop p (add1 n)))))</pre>"}, {"lang": "REXX", "loc": 48, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays the specified first (lowest) taxicab numbers (for three ranges).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> L<span class=\"sy0\">.</span>1 H<span class=\"sy0\">.</span>1  L<span class=\"sy0\">.</span>2 H<span class=\"sy0\">.</span>2  L<span class=\"sy0\">.</span>3 H<span class=\"sy0\">.</span>3 <span class=\"sy0\">.</span>            <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/>   <span class=\"kw1\">if</span> L<span class=\"sy0\">.</span>1==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> L<span class=\"sy0\">.</span>1==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> L<span class=\"sy0\">.</span>1=   <span class=\"nu0\">1</span>          <span class=\"coMULTI\">/*L1  is the low  part of 1st range.   */</span><br/>   <span class=\"kw1\">if</span> H<span class=\"sy0\">.</span>1==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> H<span class=\"sy0\">.</span>1==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> H<span class=\"sy0\">.</span>1=  <span class=\"nu0\">25</span>          <span class=\"coMULTI\">/*H1   \"  \"  high   \"   \"  \"    \"      */</span><br/>   <span class=\"kw1\">if</span> L<span class=\"sy0\">.</span>2==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> L<span class=\"sy0\">.</span>2==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> L<span class=\"sy0\">.</span>2= <span class=\"nu0\">454</span>          <span class=\"coMULTI\">/*L2   \"  \"  low    \"   \" 2nd   \"      */</span><br/>   <span class=\"kw1\">if</span> H<span class=\"sy0\">.</span>2==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> H<span class=\"sy0\">.</span>2==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> H<span class=\"sy0\">.</span>2= <span class=\"nu0\">456</span>          <span class=\"coMULTI\">/*H2   \"  \"  high   \"   \"  \"    \"      */</span><br/>   <span class=\"kw1\">if</span> L<span class=\"sy0\">.</span>3==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> L<span class=\"sy0\">.</span>3==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> L<span class=\"sy0\">.</span>3=<span class=\"nu0\">2000</span>          <span class=\"coMULTI\">/*L3   \"  \"  low    \"   \" 3rd   \"      */</span><br/>   <span class=\"kw1\">if</span> H<span class=\"sy0\">.</span>3==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> H<span class=\"sy0\">.</span>3==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> H<span class=\"sy0\">.</span>3=<span class=\"nu0\">2006</span>          <span class=\"coMULTI\">/*H3   \"  \"  high   \"   \"  \"    \"      */</span><br/>mx=<span class=\"kw6\">max</span><span class=\"br0\">(</span>L<span class=\"sy0\">.</span>1,  H<span class=\"sy0\">.</span>1,    L<span class=\"sy0\">.</span>2,  H<span class=\"sy0\">.</span>2,    L<span class=\"sy0\">.</span>3,  H<span class=\"sy0\">.</span>3<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*find how many taxicab numbers needed.*/</span><br/>mx=mx   + mx\u00a0% <span class=\"nu0\">10</span>                                <span class=\"coMULTI\">/*cushion;  compensate for the triples.*/</span><br/>ww=<span class=\"kw6\">length</span><span class=\"br0\">(</span>mx<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span>;             w=ww\u00a0% <span class=\"nu0\">2</span>          <span class=\"coMULTI\">/*widths used for formatting the output*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, ww<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*prepare to use some larger numbers.  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;     #=<span class=\"nu0\">0</span>;     @@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;      @and=<span class=\"st0\">\"  \u2500\u2500and\u2500\u2500 \"</span> <span class=\"coMULTI\">/*set some REXX vars and handy literals*/</span><br/>$<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/* [\u2193]  generate extra taxicab numbers.*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> #<span class=\"sy0\">&gt;</span>=mx;              C=j<span class=\"sy0\">**</span><span class=\"nu0\">3</span>    <span class=\"coMULTI\">/*taxicab numbers may not be in order. */</span><br/>    \u00a0!<span class=\"sy0\">.</span>j=C                                       <span class=\"coMULTI\">/*use memoization for cube calculation.*/</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> j-<span class=\"nu0\">1</span>;             s=C +\u00a0!<span class=\"sy0\">.</span>k <span class=\"coMULTI\">/*define a whole bunch of cube sums.   */</span><br/>          <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>s==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  @<span class=\"sy0\">.</span>s=j;  b<span class=\"sy0\">.</span>s=k     <span class=\"coMULTI\">/*Cube not defined?   Then process it. */</span><br/>                               <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*define  @.S  and  B.S\u2261sum  of 2 cubes*/</span><br/>                          <span class=\"kw3\">end</span>                    <span class=\"coMULTI\">/* [\u2191]  define one cube sum at a time. */</span><br/>          <a class=\"__cf_email__\" data-cfemail=\"87efe6f4bac7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<span class=\"sy0\">.</span>s                               <span class=\"coMULTI\">/*has this number been defined before? */</span><br/>          <span class=\"kw1\">if</span> has  <span class=\"kw3\">then</span> $<span class=\"sy0\">.</span>s=$<span class=\"sy0\">.</span>s  @and  U<span class=\"br0\">(</span>j,<span class=\"st0\">'   +'</span><span class=\"br0\">)</span>U<span class=\"br0\">(</span>k<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*\u25c4\u2500 build a display string. [\u2193] */</span><br/>                  <span class=\"kw3\">else</span> $<span class=\"sy0\">.</span>s=<span class=\"kw6\">right</span><span class=\"br0\">(</span>s,ww<span class=\"br0\">)</span>  <span class=\"st0\">'\u2500\u2500\u2500\u25ba'</span>  U<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>s,<span class=\"st0\">\"   +\"</span><span class=\"br0\">)</span>U<span class=\"br0\">(</span>b<span class=\"sy0\">.</span>s<span class=\"br0\">)</span>  @and  U<span class=\"br0\">(</span>j,<span class=\"st0\">'   +'</span><span class=\"br0\">)</span>U<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>          @@<span class=\"sy0\">.</span>s=<span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/*mark taxicab number as a sum of cubes*/</span><br/>          <span class=\"kw1\">if</span> has   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                  <span class=\"coMULTI\">/*S  is a triple (or sometimes better).*/</span><br/>          #=#+<span class=\"nu0\">1</span>;   #<span class=\"sy0\">.</span>#=s                         <span class=\"coMULTI\">/*bump taxicab counter; define taxicab#*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                            <span class=\"coMULTI\">/* [\u2191]  build the cubes one\u2500at\u2500a\u2500time. */</span><br/>     <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*j*/</span>                            <span class=\"coMULTI\">/* [\u2191]  complete with overage numbers. */</span><br/>A<span class=\"sy0\">.</span>=<br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> mx;   _=#<span class=\"sy0\">.</span>k;     A<span class=\"sy0\">.</span>k=$<span class=\"sy0\">.</span>_   <span class=\"coMULTI\">/*re\u2500assign disjoint $. elements to A. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">call</span> Esort  mx                                   <span class=\"coMULTI\">/*sort taxicab #s with an exchange sort*/</span><br/>          <span class=\"kw1\">do</span> grp=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">3</span>; <span class=\"kw1\">call</span> tell L<span class=\"sy0\">.</span>grp, H<span class=\"sy0\">.</span>grp <span class=\"coMULTI\">/*display the three grps of numbers. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*grp*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell:  <span class=\"kw1\">do</span> t=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;    <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>t, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"st0\">':'</span>   A<span class=\"sy0\">.</span>t;     <span class=\"kw3\">end</span>;        <span class=\"kw1\">say</span>;    <span class=\"kw1\">return</span><br/>U:     <span class=\"kw1\">return</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, w<span class=\"br0\">)</span><span class=\"st0\">'^3'</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*right\u2500justify a number,  append \"^3\" */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Esort: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> A<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N;         h=N     <span class=\"coMULTI\">/*Esort when items have blanks.*/</span><br/>         <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;     h=h\u00a0% <span class=\"nu0\">2</span><br/>           <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N-h;           k=h + i;   j=i<br/>              <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> A<span class=\"sy0\">.</span>k xk <span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> A<span class=\"sy0\">.</span>j xj <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> xk<span class=\"sy0\">&gt;</span>=xj <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>              _=A<span class=\"sy0\">.</span>j;        A<span class=\"sy0\">.</span>j=A<span class=\"sy0\">.</span>k;  A<span class=\"sy0\">.</span>k=_              <span class=\"coMULTI\">/*swap two elements of A. array*/</span><br/>              <span class=\"kw1\">if</span> h<span class=\"sy0\">&gt;</span>=j  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;    j=j - h;   k=k-h<br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>           <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*i*/</span><br/>         <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*while h&gt;1*/</span>;               <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Taxicab numbers<br/>\u00a0<br/>num = 0<br/>for n = 1 to 500000<br/>    nr = 0<br/>    tax = []<br/>    for m = 1 to 75<br/>        for p = m + 1 to 75<br/>            if n = pow(m, 3) + pow(p, 3)<br/>               add(tax, m)<br/>               add(tax, p)<br/>               nr = nr + 1<br/>            ok<br/>        next<br/>    next<br/>    if nr &gt; 1<br/>       num = num + 1<br/>       see \"\" + num + \" \" + n + \" =&gt; \" + tax[1] + \"^3 + \" + tax[2] + \"^3\" + \", \"<br/>       see \"\" + tax[3] + \"^3 +\" + tax[4] + \"^3\" + nl<br/>       if num = 25<br/>          exit<br/>       ok<br/>    ok<br/>next<br/>see \"ok\" + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> taxicab_number<span class=\"br0\">(</span>nmax=<span class=\"nu0\">1200</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span>..<span class=\"me1\">nmax</span><span class=\"br0\">]</span>.<span class=\"me1\">repeated_combination</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span> x<span class=\"sy0\">**</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">}</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> v.<span class=\"me1\">size</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>.<span class=\"me1\">sort</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>t = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> taxicab_number<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span>..<span class=\"nu0\">25</span>, <span class=\"sy0\">*</span><span class=\"nu0\">2000</span>...<span class=\"nu0\">2007</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%4d:\u00a0%10d\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>i, t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"st0\">\" =\u00a0%4d**3 +\u00a0%4d**3\"</span> <span class=\"sy0\">%</span> a<span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"me1\">pow</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Pairs<span class=\"br0\">[</span>A, B<span class=\"br0\">]</span><span class=\"br0\">(</span> p<span class=\"sy0\">:</span>List<span class=\"br0\">[</span><span class=\"br0\">(</span>A, B<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> collectPairs<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>A, List<span class=\"br0\">[</span>B<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> p.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span>.<span class=\"me1\">mapValues</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2.<span class=\"me1\">size</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Make a sorted List of Taxi Cab Numbers. Limit it to the cube of 1200 because we know it's high enough.</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> taxiNums <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">1200</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span>            <span class=\"co1\">// Start with a sequential list of integers</span><br/>    .<span class=\"me1\">combinations</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span>     <span class=\"co1\">// Find all two number combinations</span><br/>    .<span class=\"me1\">map</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> a <span class=\"sy0\">::</span> b <span class=\"sy0\">::</span> nil <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pow<span class=\"br0\">(</span>a, <span class=\"nu0\">3</span><span class=\"br0\">)</span> + pow<span class=\"br0\">(</span>b, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>                           <span class=\"co1\">// Turn the list into the sum of two cubes and</span><br/>                                <span class=\"co1\">//      remember what we started with, eg. 28-&gt;(1,3)</span><br/>    .<span class=\"me1\">collectPairs</span>               <span class=\"co1\">// Only keep taxi cab numbers with a duplicate</span><br/>    .<span class=\"me1\">toList</span>.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span>        <span class=\"co1\">// Sort the results</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> output<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  println<span class=\"br0\">(</span> <span class=\"st0\">\"%20s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"Taxi Cab Numbers\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> <span class=\"st0\">\"%20s%15s%15s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">*</span><span class=\"nu0\">20</span>, <span class=\"st0\">\"-\"</span><span class=\"sy0\">*</span><span class=\"nu0\">15</span>, <span class=\"st0\">\"-\"</span><span class=\"sy0\">*</span><span class=\"nu0\">15</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>  taxiNums.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>p, a<span class=\"sy0\">::</span>b<span class=\"sy0\">::</span>Nil<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span> <span class=\"st0\">\"%20d<span class=\"es1\">\\t</span>(%d<span class=\"es3\">\\u00b3</span> +\u00a0%d<span class=\"es3\">\\u00b3</span>)<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>(%d<span class=\"es3\">\\u00b3</span> +\u00a0%d<span class=\"es3\">\\u00b3</span>)\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>p,a.<span class=\"sy0\">_</span>1,a.<span class=\"sy0\">_</span>2,b.<span class=\"sy0\">_</span>1,b.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  taxiNums.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1999</span>,<span class=\"nu0\">2007</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>p, a<span class=\"sy0\">::</span>b<span class=\"sy0\">::</span>Nil<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span> <span class=\"st0\">\"%20d<span class=\"es1\">\\t</span>(%d<span class=\"es3\">\\u00b3</span> +\u00a0%d<span class=\"es3\">\\u00b3</span>)<span class=\"es1\">\\t</span>(%d<span class=\"es3\">\\u00b3</span> +\u00a0%d<span class=\"es3\">\\u00b3</span>)\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>p,a.<span class=\"sy0\">_</span>1,a.<span class=\"sy0\">_</span>2,b.<span class=\"sy0\">_</span>1,b.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 37, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span>        <span class=\"co1\">; lists</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">69</span><span class=\"br0\">)</span>       <span class=\"co1\">; hash tables</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">132</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co1\">; sorting</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span> <span class=\"nu0\">1500</span><span class=\"br0\">)</span> <span class=\"co1\">; let's go up to here, maximum for x and y</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>numbers<span class=\"sy0\">*</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>hash<span class=\"sy0\">-</span>table <span class=\"kw1\">eqv?</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; hash table for total -&gt; list of list of pairs</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>retrieve key<span class=\"br0\">)</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>ref<span class=\"sy0\">/</span>default <span class=\"sy0\">*</span>numbers<span class=\"sy0\">*</span> key '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; add all combinations to the hash table</span><br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> i <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> j <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> j <span class=\"sy0\">*</span>max<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> i i i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> j j j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span><span class=\"kw1\">set!</span> <span class=\"sy0\">*</span>numbers<span class=\"sy0\">*</span> n <br/>                       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> i j<span class=\"br0\">)</span> <span class=\"br0\">(</span>retrieve n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>display<span class=\"sy0\">-</span>number i key<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> key<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>retrieve key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sorted<span class=\"sy0\">-</span>keys <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort <span class=\"sy0\">&lt;</span> <br/>                              <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>key<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>retrieve key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                      <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>table<span class=\"sy0\">-</span>keys <span class=\"sy0\">*</span>numbers<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;; first 25 </span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>display<span class=\"sy0\">-</span>number i <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> sorted<span class=\"sy0\">-</span>keys i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>iota <span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;; 2000-2006</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>display<span class=\"sy0\">-</span>number i <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> sorted<span class=\"sy0\">-</span>keys i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>iota <span class=\"nu0\">7</span> <span class=\"nu0\">1999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 29, "block": "<pre class=\"ruby highlighted_source\">var <span class=\"br0\">(</span>start=<span class=\"nu0\">1</span>, <span class=\"kw1\">end</span>=<span class=\"nu0\">25</span><span class=\"br0\">)</span> = ARGV.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>...<br/>\u00a0<br/>func display <span class=\"br0\">(</span>h, start, <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var i = start<br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span>h.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>_,v<span class=\"sy0\">|</span> v.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">sort_by</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span><span class=\"br0\">[</span>start<span class=\"sy0\">-</span><span class=\"nu0\">1</span> .. <span class=\"me1\">end</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d\u00a0%10d  =&gt;<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\n</span>\"</span>, i<span class=\"sy0\">++</span>, n,<br/>            h<span class=\"br0\">{</span>n<span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"st0\">\"%4d\u00b3 +\u00a0%-s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>.<span class=\"me1\">first</span>, <span class=\"st0\">\"#{.last}\u00b3\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\",<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var taxi = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>var taxis = <span class=\"nu0\">0</span><br/>var terminate = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">for</span> c1 <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Inf</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">&lt;</span>terminate <span class=\"sy0\">&amp;&amp;</span> terminate<span class=\"sy0\">&lt;</span>c1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        display<span class=\"br0\">(</span>taxi, start, <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    var c = c1<span class=\"sy0\">**</span><span class=\"nu0\">3</span><br/>    <span class=\"kw1\">for</span> c2 <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">c1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var this = <span class=\"br0\">(</span>c2<span class=\"sy0\">**</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><br/>        taxi<span class=\"br0\">{</span>this<span class=\"br0\">}</span>\u00a0:= <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>c2, c1<span class=\"br0\">]</span><br/>        <span class=\"sy0\">++</span>taxis <span class=\"kw1\">if</span> <span class=\"br0\">(</span>taxi<span class=\"br0\">{</span>this<span class=\"br0\">}</span>.<span class=\"me1\">len</span> == <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>taxis==<span class=\"kw1\">end</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!terminate<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            terminate = taxi.<span class=\"me1\">grep</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>_,v<span class=\"sy0\">|</span> v.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span>.<span class=\"me1\">root</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 53, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> heappush <span class=\"br0\">{</span>heapName item<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$heapName</span> heap<br/>    <span class=\"kw1\">set</span> idx <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -bisect -index <span class=\"nu0\">0</span> -integer <span class=\"re0\">$heap</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$item</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> heap <span class=\"br0\">[</span>linsert <span class=\"re0\">$heap</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$idx</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$item</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>coroutine cubesum apply <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield<br/>    <span class=\"kw1\">set</span> h <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$h</span><span class=\"br0\">]</span> || <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$h</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    heappush h <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">incr</span> n<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> h <span class=\"br0\">[</span>lassign <span class=\"re0\">$h</span> item<span class=\"br0\">]</span><br/>\tyield <span class=\"re0\">$item</span><br/>\tlassign <span class=\"re0\">$item</span> s x y<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> y<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    heappush h <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span> + <span class=\"re0\">$y</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>coroutine taxis apply <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield<br/>    <span class=\"kw1\">set</span> out <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> s <span class=\"br0\">[</span>cubesum<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$s</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> == <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$out</span> end <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> out <span class=\"re0\">$s</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$out</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>yield <span class=\"re0\">$out</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> out <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Put a cache in front for convenience</span><br/><span class=\"kw1\">variable</span> taxis <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> taxi <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> taxis<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$taxis</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> taxis <span class=\"br0\">[</span>taxis<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$taxis</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> <span class=\"nu0\">3</span> <span class=\"st0\">\"<span class=\"es0\">\\u</span>00b3\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">25</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"sy0\">$</span><span class=\"br0\">{</span>n<span class=\"br0\">}</span>:<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap t <span class=\"br0\">[</span>taxi <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%d =\u00a0%d$3 +\u00a0%d$3\"</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$t</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\",\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">2000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">2006</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"sy0\">$</span><span class=\"br0\">{</span>n<span class=\"br0\">}</span>:<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap t <span class=\"br0\">[</span>taxi <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"kw2\">format</span> <span class=\"st0\">\"\u00a0%d =\u00a0%d$3 +\u00a0%d$3\"</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$t</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"st0\">\",\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">fcn taxiCabNumbers{<br/>   const HeapSZ=0d5_000_000;<br/>   iCubes:=[1..120].apply(\"pow\",3);<br/>   sum2cubes:=Data(HeapSZ).fill(0);  // BFheap of 1 byte zeros<br/>   taxiNums:=List();<br/>   foreach i,i3 in ([1..].zip(iCubes)){<br/>      foreach j,j3 in ([i+1..].zip(iCubes[i,*])){<br/>         ij3:=i3+j3; <br/>\t if(z:=sum2cubes[ij3]){<br/>\t    taxiNums.append(T(ij3,<br/>\t\tz,(ij3-z.pow(3)).toFloat().pow(1.0/3).round().toInt(),<br/>\t\ti,j));<br/>\t }<br/>\t else sum2cubes[ij3]=i;<br/>      }<br/>   }<br/>   taxiNums.sort(fcn([(a,_)],[(b,_)]){ a&lt;b })<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 36, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DIM</span> f<span class=\"br0\">(</span><span class=\"nu0\">1625</span><span class=\"br0\">)</span>: <span class=\"co3\">REM populating a cube table at the start will be faster than computing the cubes on the fly</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> x=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1625</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>=x*x*x: <span class=\"co3\">REM x*x*x rather than x^3 as the ZX Spectrum's exponentiation function is legendarily slow</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">NEXT</span> x<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> c=<span class=\"nu0\">0</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">FOR</span> x=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4294967295</span>: <span class=\"co3\">REM the highest number the ZX Spectrum Basic can accurately hold internally; floor (cuberoot max)=1625, hence the table limit</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> k=<span class=\"nu0\">0</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">FOR</span> m=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1625</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">FOR</span> n=m+<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1625</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> f<span class=\"br0\">(</span>m<span class=\"br0\">)</span>+f<span class=\"br0\">(</span>n<span class=\"br0\">)</span>=x <span class=\"kw1\">THEN</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">160</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">IF</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span>&gt;=x <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">1625</span>: <span class=\"co3\">REM overshot, break out of the loop</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">IF</span> f<span class=\"br0\">(</span>m<span class=\"br0\">)</span>&gt;=x <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> m=<span class=\"nu0\">1625</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">140</span> <span class=\"kw1\">NEXT</span> m<br/><span class=\"nu0\">150</span> <span class=\"kw1\">NEXT</span> x<br/><span class=\"nu0\">160</span> <span class=\"kw1\">IF</span> k=<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> q=m: <span class=\"kw1\">LET</span> r=n: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">230</span>: <span class=\"co3\">REM got one!</span><br/><span class=\"nu0\">170</span> <span class=\"kw1\">LET</span> o=m<br/><span class=\"nu0\">180</span> <span class=\"kw1\">LET</span> p=n<br/><span class=\"nu0\">190</span> <span class=\"kw1\">LET</span> k=<span class=\"nu0\">1</span><br/><span class=\"nu0\">200</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">210</span> <span class=\"kw1\">NEXT</span> m<br/><span class=\"nu0\">220</span> <span class=\"kw1\">NEXT</span> x<br/><span class=\"nu0\">230</span> <span class=\"kw1\">LET</span> c=c+<span class=\"nu0\">1</span><br/><span class=\"nu0\">240</span> <span class=\"kw1\">IF</span> c&gt;<span class=\"nu0\">25</span> <span class=\"kw4\">AND</span> c&lt;<span class=\"nu0\">2000</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">330</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">LET</span> t$=<span class=\"st0\">\"\"</span>: <span class=\"co3\">REM convert number to string; while ZX Spectrum Basic can store all the digits of integers up to 2^32-1...</span><br/><span class=\"nu0\">260</span> <span class=\"kw1\">LET</span> t=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>x/<span class=\"nu0\">100000</span><span class=\"br0\">)</span>: <span class=\"co3\">REM ...it will resort to scientific notation trying to display any more than eight digits</span><br/><span class=\"nu0\">270</span> <span class=\"kw1\">LET</span> b=x-t*<span class=\"nu0\">100000</span><br/><span class=\"nu0\">280</span> <span class=\"kw1\">IF</span> t=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span>: <span class=\"co3\">REM omit leading zero</span><br/><span class=\"nu0\">290</span> <span class=\"kw1\">LET</span> t$=<span class=\"kw3\">STR</span>$ t<br/><span class=\"nu0\">300</span> <span class=\"kw1\">LET</span> t$=t$+<span class=\"kw3\">STR</span>$ b<br/><span class=\"nu0\">310</span> <span class=\"kw1\">PRINT</span> c;<span class=\"st0\">\":\"</span>;t$;<span class=\"st0\">\"=\"</span>;q;<span class=\"st0\">\"^3+\"</span>;r;<span class=\"st0\">\"^3=\"</span>;o;<span class=\"st0\">\"^3+\"</span>;p;<span class=\"st0\">\"^3\"</span><br/><span class=\"nu0\">320</span> <span class=\"kw1\">POKE</span> <span class=\"nu0\">23692</span>,<span class=\"nu0\">10</span>: <span class=\"co3\">REM suppress \"scroll?\" prompt when screen fills up at c=22</span><br/><span class=\"nu0\">330</span> <span class=\"kw1\">IF</span> c=<span class=\"nu0\">2006</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> x=<span class=\"nu0\">4294967295</span>: <span class=\"kw1\">LET</span> n=<span class=\"nu0\">1625</span>: <span class=\"kw1\">LET</span> m=<span class=\"nu0\">1625</span><br/><span class=\"nu0\">340</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">350</span> <span class=\"kw1\">NEXT</span> m<br/><span class=\"nu0\">360</span> <span class=\"kw1\">NEXT</span> x</pre>"}]}