{"task": "Josephus_problem", "blocks": [{"lang": "360 Assembly", "loc": 82, "block": "<pre class=\"text highlighted_source\">*      Josephus problem               10/02/2017<br/>JOSEPH CSECT<br/>       USING  JOSEPH,R13              base register<br/>       B      72(R15)                 skip savearea<br/>       DC     17F'0'                  savearea<br/>       STM    R14,R12,12(R13)         prolog<br/>       ST     R13,4(R15)              \" &lt;-<br/>       ST     R15,8(R13)              \" -&gt;<br/>       LR     R13,R15                 \" addressability<br/>       LA     R7,1                    m=1<br/>       DO WHILE=(C,R7,LE,=A(NPROB))   do m=1 to nprob<br/>         LR     R1,R7                   m<br/>         MH     R1,=H'6'                *6<br/>         LH     R2,PROB-6(R1)<br/>         ST     R2,N                    n=prob(m,1)<br/>         LH     R2,PROB-4(R1)<br/>         ST     R2,W                    w=prob(m,2)<br/>         LH     R2,PROB-2(R1)<br/>         ST     R2,S                    s=prob(m,3)<br/>         MVC    PG,=CL80'josephus'      init buffer<br/>         L      R1,N                    n<br/>         XDECO  R1,DEC                  edit<br/>         MVC    PG+8(4),DEC+8           output<br/>         L      R1,W                    w<br/>         XDECO  R1,DEC                  edit <br/>         MVC    PG+12(4),DEC+8          output<br/>         L      R1,S                    s<br/>         XDECO  R1,DEC                  edit <br/>         MVC    PG+16(4),DEC+8          output<br/>         XPRNT  PG,L'PG                 print buffer<br/>         MVI    DEAD,X'00'              dead(1)='0'B;<br/>         MVC    DEAD+1(255),DEAD        dead(*)='0'B;<br/>         L      R11,N                   nx=n<br/>         L      R8,=F'-1'               p=-1<br/>         DO UNTIL=(C,R11,EQ,S)          do until n=s <br/>           SR     R9,R9                   found=0<br/>           DO UNTIL=(C,R9,EQ,W)           do until found=w <br/>             LA     R8,1(R8)                p=p+1<br/>             IF C,R8,EQ,N THEN              if p=nn then<br/>               SR     R8,R8                   p=0<br/>             ENDIF  ,                       end if<br/>             LA     R2,DEAD(R8)             @dead(p+1)<br/>             IF CLI,0(R2),EQ,X'00' THEN     if not dead(p+1) then<br/>               LA     R9,1(R9)                found=found+1<br/>             ENDIF  ,                       end if<br/>           ENDDO  ,                       end do<br/>           LA     R2,DEAD(R8)             @dead(p+1)<br/>           MVI    0(R2),X'01'             dead(p+1)='1'B<br/>           BCTR   R11,0                   nx=nx-1<br/>         ENDDO  ,                       end do<br/>         MVC    PG,=CL80' '             clear buffer<br/>         LA     R10,PG                  ipg=0<br/>         L      R9,N                    nn<br/>         BCTR   R9,0                    nn-1<br/>         SR     R6,R6                   i=0<br/>         DO WHILE=(CR,R6,LE,R9)         do i=0 to nn-1<br/>           LA     R2,DEAD(R6)             @dead(i+1)<br/>           IF CLI,0(R2),EQ,X'00' THEN     if not dead(i+1) then<br/>             XDECO  R6,DEC                  edit i<br/>             MVC    0(4,R10),DEC+8          output<br/>             LA     R10,4(R10)              ipg=ipg+4<br/>           ENDIF  ,                       end if<br/>           LA     R6,1(R6)                i=i+1<br/>         ENDDO  ,                       end do<br/>         XPRNT  PG,L'PG                 print buffer<br/>         LA     R7,1(R7)                m=m+1<br/>       ENDDO  ,                       end do<br/>       L      R13,4(0,R13)            epilog <br/>       LM     R14,R12,12(R13)         \" restore<br/>       XR     R15,R15                 \" rc=0<br/>       BR     R14                     exit<br/>PROB   DC     H'41',H'3',H'1'         round 1<br/>       DC     H'41',H'3',H'3'         round 2<br/>NPROB  EQU    (*-PROB)/6              number of rounds<br/>N      DS     F                       n number of prisoners<br/>W      DS     F                       w killing count<br/>S      DS     F                       s number of prisoners to survive<br/>PG     DS     CL80                    buffer<br/>DEC    DS     CL12                    temp for xdeco<br/>DEAD   DS     256X                    n max<br/>       YREGS<br/>       END    JOSEPH</pre>"}, {"lang": "6502 Assembly", "loc": 34, "block": "<pre class=\"text highlighted_source\">JSEPHS: STA  $D0       \u00a0; n<br/>        STX  $D1       \u00a0; k<br/>        LDA  #$FF<br/>        LDX  #$00<br/>SETUP:  STA  $1000,X   \u00a0; populate array with hex FF<br/>        INX<br/>        CPX  $D0<br/>        BEQ  KILL<br/>        JMP  SETUP<br/>KILL:   LDA  #$00      \u00a0; number killed so far<br/>        STA  $D2<br/>        LDX  #$00      \u00a0; position within array<br/>        LDY  #$01      \u00a0; counting up to k<br/>FIND:   INY<br/>SCAN:   INX<br/>        CPX  $D0<br/>        BMI  TEST<br/>        LDX  #$00      \u00a0; circle back around<br/>TEST:   LDA  $1000,X<br/>        CMP  #$FF<br/>        BNE  SCAN      \u00a0; already been killed<br/>        CPY  $D1<br/>        BMI  FIND      \u00a0; if y &lt; k keep going round<br/>        LDA  $D2<br/>        STA  $1000,X   \u00a0; mark as dead<br/>        CLC<br/>        ADC  #$01<br/>        STA  $D2<br/>        CMP  $D0       \u00a0; have we killed all but 1?<br/>        BPL  RETURN<br/>        LDY  #$00<br/>        JMP  FIND<br/>RETURN: TXA            \u00a0; a &lt;- index of survivor<br/>        RTS</pre>"}, {"lang": "Ada", "loc": 43, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Josephus <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Arg<span class=\"br0\">(</span>Idx, Default: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span> <span class=\"co1\">-- read Argument(Idx)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> &gt;= Index<br/>         <span class=\"kw1\">then</span> Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span>Index<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> Default<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Prisoners:  <span class=\"kw3\">constant</span> Positive\u00a0:= Arg<span class=\"br0\">(</span>Idx =&gt; <span class=\"nu0\">1</span>, Default =&gt; <span class=\"nu0\">41</span><span class=\"br0\">)</span>;<br/>   Steps:      <span class=\"kw3\">constant</span> Positive\u00a0:= Arg<span class=\"br0\">(</span>Idx =&gt; <span class=\"nu0\">2</span>, Default =&gt;  <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   Survivors:  <span class=\"kw3\">constant</span> Positive\u00a0:= Arg<span class=\"br0\">(</span>Idx =&gt; <span class=\"nu0\">3</span>, Default =&gt;  <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Print:               Boolean\u00a0:= <span class=\"br0\">(</span>Arg<span class=\"br0\">(</span>Idx =&gt; <span class=\"nu0\">4</span>, Default =&gt;  <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Index_Type <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">Prisoners</span>-<span class=\"nu0\">1</span>;<br/>   Next: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Index_Type<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Index_Type;<br/>   X: Index_Type\u00a0:= <span class=\"br0\">(</span>Steps-<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> Prisoners;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">\"N =\"</span> &amp; Positive'Image<span class=\"br0\">(</span>Prisoners<span class=\"br0\">)</span> &amp; <span class=\"st0\">\",  K =\"</span> &amp; Positive'Image<span class=\"br0\">(</span>Steps<span class=\"br0\">)</span> &amp;<br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> Survivors &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"st0\">\",  #survivors =\"</span> &amp; Positive'Image<span class=\"br0\">(</span>Survivors<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> Idx <span class=\"kw3\">in</span> Next'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span> <span class=\"co1\">-- initialize Next</span><br/>      Next<span class=\"br0\">(</span>Idx<span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span>Idx+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> Prisoners;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">if</span> Print <span class=\"kw1\">then</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Executed: \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">for</span> Execution <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Prisoners</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Execution = Survivors <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Surviving: \"</span><span class=\"br0\">)</span>;<br/>         Print\u00a0:= True;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> Print <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Positive'Image<span class=\"br0\">(</span>Next<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Next<span class=\"br0\">(</span>X<span class=\"br0\">)</span>\u00a0:= Next<span class=\"br0\">(</span>Next<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- \"delete\" a prisoner</span><br/>      <span class=\"kw1\">for</span> Prisoner <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Steps</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         X\u00a0:= Next<span class=\"br0\">(</span>X<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Josephus;</pre>"}, {"lang": "ALGOL 68", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">PROC</span> josephus <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> m<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"co1\">CO Return m-th on the reversed kill list; m=0 is final survivor. CO</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> lm <span class=\"sy1\">:=</span> m<span class=\"sy1\">;</span>\t\t\t<span class=\"co1\">CO Local copy of m CO</span><br/>      <span class=\"kw2\">FOR</span> a <span class=\"kw2\">FROM</span> m<span class=\"sy1\">+</span>1 <span class=\"kw2\">WHILE</span> a <span class=\"sy1\">&lt;=</span> n <span class=\"kw2\">DO</span> lm <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>lm<span class=\"sy1\">+</span>k<span class=\"br0\">)</span> <span class=\"sy1\">%*</span> a <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      lm<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">INT</span> n <span class=\"sy1\">=</span> 41<span class=\"sy1\">,</span> k<span class=\"sy1\">=</span>3<span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"n = \"</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\", k = \"</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\", final survivor: \"</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span><br/>\t    n<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> josephus <span class=\"br0\">(</span>n<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "ANSI Standard BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">100 FUNCTION josephus (n, k, m)<br/>110\u00a0! Return m-th on the reversed kill list; m=0 is final survivor.<br/>120    LET lm = m \u00a0! Local copy OF m<br/>130    FOR a = m+1  TO n <br/>140       LET lm = MOD(lm+k, a) <br/>150    NEXT a<br/>160    LET josephus = lm<br/>170 END FUNCTION<br/>180 LET n = 41<br/>190 LET k=3<br/>200 PRINT \"n =\";n, \"k =\";k,\"final survivor =\";josephus(n, k, 0)<br/>210 END<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 24, "block": "<pre class=\"ahk highlighted_source\"><span class=\"co1\">; Since AutoHotkey is 1-based, we're numbering prisoners 1-41.</span><br/>nPrisoners <span class=\"sy0\">:=</span> <span class=\"nu0\">41</span><br/>kth        <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\">; Build a list, purposefully ending with a separator</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% nPrisoners<br/>\tlist <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\"|\"</span><br/>\u00a0<br/><span class=\"co1\">; iterate and remove from list</span><br/>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">; Step by 2; the third step was done by removing the previous prisoner</span><br/>\ti <span class=\"sy0\">+=</span> kth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> nPrisoners<span class=\"br0\">)</span><br/>\t\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> nPrisoners<span class=\"br0\">)</span><br/>\t<span class=\"co1\">; Remove from list</span><br/>\t<span class=\"kw6\">end</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>\tbgn <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\tlist <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> bgn<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"kw6\">end</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\tnPrisoners<span class=\"sy0\">--</span><br/><span class=\"br0\">}</span><br/>Until <span class=\"br0\">(</span>nPrisoners <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"st0\">\"\\|\"</span><span class=\"br0\">)</span> <span class=\"co1\">; remove the final separator</span></pre>"}, {"lang": "AWK", "loc": 39, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f JOSEPHUS_PROBLEM.AWK</span><br/><span class=\"co1\"># converted from PL/I</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    main<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"nu0\">41</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    main<span class=\"br0\">(</span><span class=\"nu0\">41</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span>n,k,s,  dead,errors,found,i,killed,nn,p,survived<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># n - number of prisoners</span><br/><span class=\"co1\"># k - kill every k'th prisoner</span><br/><span class=\"co1\"># s - number of survivors</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>n=%d k=%d s=%d<span class=\"es0\">\\n</span>\"</span>,n,k,s<span class=\"br0\">)</span> <span class=\"co1\"># show arguments</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy2\">&gt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"s&gt;n\"</span><span class=\"br0\">)</span>; errors<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"k&lt;=0\"</span><span class=\"br0\">)</span>; errors<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errors <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    nn = n                             <span class=\"co1\"># wrap around boundary</span><br/>    p = <span class=\"sy3\">-</span><span class=\"nu0\">1</span>                             <span class=\"co1\"># start here</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy2\">!=</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span>                   <span class=\"co1\"># until survivor count is met</span><br/>      found = <span class=\"nu0\">0</span>                        <span class=\"co1\"># start looking</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>found <span class=\"sy2\">!=</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span>             <span class=\"co1\"># until we have the k-th prisoner</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">++</span>p <span class=\"sy2\">==</span> nn<span class=\"br0\">)</span> <span class=\"br0\">{</span> p = <span class=\"nu0\">0</span> <span class=\"br0\">}</span>       <span class=\"co1\"># wrap around</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dead<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> found<span class=\"sy3\">++</span> <span class=\"br0\">}</span>  <span class=\"co1\"># if prisoner is alive increment found</span><br/>      <span class=\"br0\">}</span><br/>      dead<span class=\"br0\">[</span>p<span class=\"br0\">]</span> = <span class=\"nu0\">1</span>                      <span class=\"co1\"># kill the unlucky one</span><br/>      killed = killed p <span class=\"st0\">\" \"</span>            <span class=\"co1\"># build killed list</span><br/>      n<span class=\"sy3\">--</span>                              <span class=\"co1\"># reduce size of circle</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;=</span>nn<span class=\"sy3\">-</span><span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dead<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        survived = survived i <span class=\"st0\">\" \"</span>      <span class=\"co1\"># build survivor list</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"killed:\u00a0%s<span class=\"es0\">\\n</span>\"</span>,killed<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"survived:\u00a0%s<span class=\"es0\">\\n</span>\"</span>,survived<span class=\"br0\">)</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">10 N=41<br/>20 K=3<br/>30 M=0<br/>40 FOR I=M+1 TO N<br/>50 M=INT(I*((M+K)/I-INT((M+K)/I))+0.5)<br/>60 NEXT I<br/>70 PRINT \"Survivor is number\";M</pre>"}, {"lang": "Batch File", "loc": 32, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"prison=41\"\t\t<span class=\"sy0\">%</span><span class=\"re3\">== Number of prisoners ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"step=3\"\t\t<span class=\"sy0\">%</span><span class=\"re3\">== The step... ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"survive=1\"\t\t<span class=\"sy0\">%</span><span class=\"re3\">== Number of survivors ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">josephus</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"prison=41\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"step=3\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"survive=3\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">josephus</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The Procedure ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">josephus</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"surv_list=\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">S</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">survive</span><span class=\"sy0\">!</span>,-1,1<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\u00a0<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"m = <span class=\"sy0\">%%</span><span class=\"re3\">S</span> - 1\"<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">X</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%%</span><span class=\"re3\">S</span>,1,<span class=\"sy0\">!</span><span class=\"re2\">prison</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"m = <span class=\"sy0\">(</span>m + step<span class=\"sy0\">)</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> <span class=\"sy0\">%%</span><span class=\"re3\">X</span>\"<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">defined</span></a> surv_list <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"surv_list=<span class=\"sy0\">!</span><span class=\"re2\">surv_list</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">m</span><span class=\"sy0\">!</span>\"<br/>\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"surv_list=<span class=\"sy0\">!</span><span class=\"re2\">m</span><span class=\"sy0\">!</span>\"<br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">surv_list</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "BBC BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">REM &gt;josephus<br/>PRINT \"Survivor is number \"; FNjosephus(41, 3, 0)<br/>END<br/>:<br/>DEF FNjosephus(n%, k%, m%)<br/>LOCAL i%<br/>FOR i% = m% + 1 TO n%<br/>  m% = (m% + k%) MOD i%<br/>NEXT<br/>= m%</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&gt;0\"\u00a0:srenosirP\"&gt;:#,_&amp;&gt;&gt;00p&gt;&gt;v<br/>v0p01&lt;&amp;_,#!&gt;#:&lt;\"Step size: \"&lt;<br/>&gt;1+:20p00g`!#v_0\" \u00a0:rovivru\"v<br/>^g02%g02+g01&lt;&lt;@.$_,#!&gt;#:&lt;\"S\"&lt;</pre>"}, {"lang": "C", "loc": 46, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// m-th on the reversed kill list; m = 0 is final survivor</span><br/><span class=\"kw4\">int</span> jos<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> k<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> a<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tm <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">+</span> k<span class=\"br0\">)</span> <span class=\"sy0\">%</span> a<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> xint<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// same as jos(), useful if n is large and k is not</span><br/>xint jos_large<span class=\"br0\">(</span>xint n<span class=\"sy0\">,</span> xint k<span class=\"sy0\">,</span> xint m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">-</span> m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\txint a <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\txint q <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> q <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span>\tq <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> a<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>q<span class=\"br0\">)</span>\tq <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tm <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">+</span> q <span class=\"sy0\">*</span> k<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+=</span> q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\txint n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\tn <span class=\"sy0\">=</span> <span class=\"nu0\">41</span><span class=\"sy0\">;</span><br/>\tk <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"n =\u00a0%llu, k =\u00a0%llu, final survivor:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> jos<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tn <span class=\"sy0\">=</span> 9876543210987654321ULL<span class=\"sy0\">;</span><br/>\tk <span class=\"sy0\">=</span> <span class=\"nu0\">12031</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"n =\u00a0%llu, k =\u00a0%llu, three survivors:\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span> <span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%llu\"</span><span class=\"sy0\">,</span> jos_large<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 82, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">namespace</span> Josephus<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> JosephusProblem<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> m<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> circle <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> order <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                circle<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>circle<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                j<span class=\"sy0\">++;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> m<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    order<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> circle<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    circle<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    k<span class=\"sy0\">++;</span><br/>                    l<span class=\"sy0\">--;</span><br/>                    j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    order<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> circle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    circle<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">==</span> circle<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span><br/>                <span class=\"br0\">{</span><br/>                    l<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> order<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">try</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> JosephusProblem<span class=\"br0\">(</span>n, m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>               <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> result<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">{</span><br/>                   Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//1 3 5 0 4 2 6</span><br/>               <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>Exception e<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">finally</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 79, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> bigint<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> josephus<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    bigint findSurvivors<span class=\"br0\">(</span> bigint n, bigint k, bigint s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tbigint i <span class=\"sy1\">=</span> s <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> bigint x <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;=</span> n<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span>, i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    s <span class=\"sy1\">=</span> <span class=\"br0\">(</span> s <span class=\"sy2\">+</span> k <span class=\"br0\">)</span> <span class=\"sy2\">%</span> i<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> s<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> getExecutionList<span class=\"br0\">(</span> bigint n, bigint k, bigint s <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Execution list: \"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>\tprisoners.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> bigint x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    prisoners.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tbigint index <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> s <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    index <span class=\"sy2\">+</span><span class=\"sy1\">=</span> k <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> index <span class=\"sy1\">&gt;=</span> prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> index <span class=\"sy2\">%</span><span class=\"sy1\">=</span> prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> prisoners<span class=\"br0\">[</span><span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> index <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    vector<span class=\"sy1\">&lt;</span>bigint<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> prisoners.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> index <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    prisoners.<span class=\"me1\">erase</span><span class=\"br0\">(</span> it <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    vector<span class=\"sy1\">&lt;</span>bigint<span class=\"sy1\">&gt;</span> prisoners<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    josephus jo<span class=\"sy4\">;</span><br/>    bigint n, k, s<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Number of prisoners( 0 to QUIT ): \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> n<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>n <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Execution step: \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> k<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"How many survivors: \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> s<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Survivor\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">&lt;&lt;</span> jo.<span class=\"me1\">findSurvivors</span><span class=\"br0\">(</span> n, k <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    jo.<span class=\"me1\">getExecutionList</span><span class=\"br0\">(</span> n, k <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"s: \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> bigint x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> s<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> jo.<span class=\"me1\">findSurvivors</span><span class=\"br0\">(</span> n, k, x <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    jo.<span class=\"me1\">getExecutionList</span><span class=\"br0\">(</span> n, k, s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rotate <span class=\"br0\">[</span>n s<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">lazy-cat</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> n s<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> n s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> josephus <span class=\"br0\">[</span>n k<span class=\"br0\">]</span> <br/>   <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>survivor <span class=\"br0\">[</span><span class=\"br0\">[</span> h <span class=\"sy0\">&amp;</span> r\u00a0:<span class=\"me1\">as</span> l<span class=\"br0\">]</span> k<span class=\"br0\">]</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> r<span class=\"br0\">)</span> h<br/>                  \u00a0:<span class=\"me1\">else</span>      <span class=\"br0\">(</span>survivor <span class=\"br0\">(</span><span class=\"kw1\">rest</span> <span class=\"br0\">(</span>rotate <span class=\"br0\">(</span><span class=\"kw1\">dec</span> k<span class=\"br0\">)</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>survivor <span class=\"br0\">(</span><span class=\"kw1\">range</span> n<span class=\"br0\">)</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"nu0\">41</span> k <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\"Given \"</span> n <span class=\"st0\">\" prisoners in a circle numbered 1..\"</span> n <br/>                 <span class=\"st0\">\", an executioner moving around the\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\"circle \"</span> k <span class=\"st0\">\" at a time will leave prisoner number \"</span> <br/>                 <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>josephus n k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" as the last survivor.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> kill <span class=\"br0\">(</span>n k <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>m <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for a from <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ m<span class=\"br0\">)</span> upto n <span class=\"kw1\">do</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> m <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>+ m k<span class=\"br0\">)</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  m<span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T pop<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> i<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> aux <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    items <span class=\"sy0\">=</span> items.<span class=\"me1\">remove</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> aux<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">string</span> josephus<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> k<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> p <span class=\"sy0\">=</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> seq<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>p.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> p.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        seq <span class=\"sy0\">~=</span> p.<span class=\"me1\">pop</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"Prisoner killing order:<span class=\"es1\">\\n</span>%(%(%d\u00a0%)<span class=\"es1\">\\n</span>%).\"</span> <span class=\"sy0\">~</span><br/>                  <span class=\"st0\">\"<span class=\"es1\">\\n</span>Survivor:\u00a0%d\"</span><span class=\"sy0\">,</span><br/>                  seq<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> $ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">chunks</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> seq<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    josephus<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"sy0\">;</span><br/>    josephus<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; input</span><br/><span class=\"br0\">(</span>define N <span class=\"nu0\">41</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define K <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define prisoners <span class=\"br0\">(</span><span class=\"kw1\">apply</span> circular-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>iota N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define last-one prisoners<span class=\"br0\">)</span> <span class=\"co1\">; current position</span><br/>\u00a0<br/><span class=\"co1\">;; kill returns current position = last killed</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>kill lst skip<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span>? <span class=\"br0\">(</span>mark? lst<span class=\"br0\">)</span> '\ud83d\udd2b <span class=\"br0\">)</span><span class=\"br0\">(</span>kill <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst<span class=\"br0\">)</span> skip<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; dead\u00a0? goto next</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>zero? skip<span class=\"br0\">)</span> <span class=\"br0\">(</span>mark lst '\ud83d\udd2b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; all skipped\u00a0? kill</span><br/>    <span class=\"br0\">(</span>else <span class=\"br0\">(</span>mark lst '\ud83d\ude25 <span class=\"br0\">)</span>  <span class=\"co1\">;; relieved face</span><br/>           <span class=\"br0\">(</span>kill <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst <span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- skip<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; skip 1 and goto next</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 54, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Survivor is prisoner: \"</span> <span class=\"sy0\">+</span> execute <span class=\"br0\">(</span><span class=\"nu0\">12</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">out</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\texecute <span class=\"br0\">(</span>n, k<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Survivor of 'n' prisoners, when every 'k'th is executed.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tn_positive<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tk_positive<span class=\"sy0\">:</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tn_larger<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> k<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tkillidx<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tprisoners<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> prisoners.<span class=\"me1\">make</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">0</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tprisoners.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Prisoners are executed in the order:<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tkillidx <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tprisoners.<span class=\"me1\">count</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tkillidx <span class=\"sy0\">:=</span> killidx <span class=\"sy0\">+</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\tkillidx <span class=\"sy0\">&lt;=</span> prisoners.<span class=\"me1\">count</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tkillidx <span class=\"sy0\">:=</span> killidx <span class=\"sy0\">-</span> prisoners.<span class=\"me1\">count</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>prisoners.<span class=\"me1\">at</span> <span class=\"br0\">(</span>killidx<span class=\"br0\">)</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\tprisoners.<span class=\"me1\">go_i_th</span> <span class=\"br0\">(</span>killidx<span class=\"br0\">)</span><br/>\t\t\t\tprisoners.<span class=\"me1\">remove</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> prisoners.<span class=\"me1\">at</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tResult_in_range<span class=\"sy0\">:</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">&lt;</span> n<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>defmodule Josephus do<br/>  def find(n,k) do<br/>    find(Enum.to_list(0..n-1),0..k-2,k..n)<br/>  end<br/>\u00a0<br/>  def find([_|[r|_]],_,_..d) when d &lt; 3 do<br/>    IO.inspect r<br/>  end<br/>\u00a0<br/>  def find(arr,a..c,b..d) when length(arr) &gt;= 3 do<br/>    find(Enum.slice(arr,b..d) ++ Enum.slice(arr,a..c),a..c,b..d-1)<br/>  end<br/>end<br/>\u00a0<br/>Josephus.find(41,3)<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> jo<span class=\"br0\">(</span>n k<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> n<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"sy0\">%</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"nu0\">1</span>- k<span class=\"br0\">)</span> <br/>\t\t\t  <span class=\"br0\">(</span>jo <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>princ-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>jo <span class=\"nu0\">50</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">(</span>jo <span class=\"nu0\">60</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 28, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> josephus_problem <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>general_solution<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">general_solution</span><span class=\"br0\">(</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Survive</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">general_solution</span><span class=\"br0\">(</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Survive</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Prisoners</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">general_solution</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">general_solution</span><span class=\"br0\">(</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">_Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Survive</span><span class=\"sy1\">,</span> <span class=\"re5\">Survive</span><span class=\"sy1\">,</span> <span class=\"re5\">Kills</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Kills</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">general_solution</span><span class=\"br0\">(</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Survive</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners_length</span><span class=\"sy1\">,</span> <span class=\"re5\">Kills</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">Skipped</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Killed</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">kill</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners_length</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">general_solution</span><span class=\"br0\">(</span> <span class=\"re5\">Rest</span> <span class=\"sy3\">++</span> <span class=\"re5\">Skipped</span><span class=\"sy1\">,</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Survive</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners_length</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Killed</span> | <span class=\"re5\">Kills</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">kill</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners_length</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Kill</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">Prisoners_length</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">kill</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners_length</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">kill_few</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span> <span class=\"kw2\">rem</span> <span class=\"re5\">Prisoners_length</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">kill_few</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">Last</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">Prisoners</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">Rest</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Last</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">kill_few</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">Kill</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Prisoners</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 55, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM JOSEPHUS<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!$INTEGER<br/>\u00a0<br/>DIM DEAD[100]<br/>\u00a0<br/>PROCEDURE MAIN(N,K,S-&gt;ERRORS)<br/>! n - number of prisoners<br/>! k - kill every k'th prisoner<br/>! s - number of survivors<br/>    LOCAL KILLED$,SURVIVED$,FOUND,P,NN,I<br/>    ERRORS=0<br/>    FOR I=0 TO 100 DO<br/>        DEAD[I]=0<br/>    END FOR  \u00a0! prepare array<br/>    PRINT(\"N=\";N,\"K=\";K,\"S=\";S)       \u00a0! show arguments<br/>    IF S&gt;N THEN PRINT(\"S&gt;N\";) ERRORS+=1 END IF<br/>    IF K&lt;=0 THEN PRINT(\"K&lt;=0\";) ERRORS+=1 END IF<br/>    IF ERRORS&gt;0 THEN EXIT PROCEDURE END IF<br/>    NN=N                              \u00a0! wrap around boundary<br/>    P=-1                              \u00a0! start here<br/>    WHILE N&lt;&gt;S DO                     \u00a0! until survivor count is met<br/>      FOUND=0                         \u00a0! start looking<br/>      WHILE FOUND&lt;&gt;K DO               \u00a0! until we have the k-th prisoner<br/>        P+=1<br/>        IF P=NN THEN P=0 END IF       \u00a0! wrap around<br/>        IF DEAD[P]&lt;&gt;1 THEN<br/>            FOUND+=1<br/>        END IF                        \u00a0! if prisoner is alive increment found<br/>      END WHILE<br/>      DEAD[P]=1                       \u00a0! kill the unlucky one<br/>      KILLED$=KILLED$+STR$(P)         \u00a0! build killed list<br/>      N-=1                            \u00a0! reduce size of circle<br/>    END WHILE<br/>    FOR I=0 TO NN-1 DO<br/>      IF DEAD[I]&lt;&gt;1 THEN<br/>        SURVIVED$=SURVIVED$+STR$(I)   \u00a0! build survivor list<br/>      END IF<br/>    END FOR<br/>    PRINT(\"Killed:\";KILLED$)<br/>    PRINT(\"Survived:\";SURVIVED$)<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    ERRORS=0<br/>    MAIN(5,2,1-&gt;ERRORS)<br/>    MAIN(41,3,1-&gt;ERRORS)<br/>    MAIN(41,3,3-&gt;ERRORS)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 5, "block": "<pre class=\"text highlighted_source\">USING: kernel locals math math.ranges sequences\u00a0;<br/>IN: josephus<br/>\u00a0<br/>:: josephus ( k n -- m )<br/>    n [1,b] 0 [ [ k + ] dip mod ] reduce\u00a0;</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: josephus  0 1 begin dup 41 &lt;= while  swap 3 + over mod swap  1+ repeat drop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 22, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> josephus<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i, k, p<br/>   <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">next</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>   read <span class=\"sy0\">*</span>, n, k<br/>   <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>next<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>      next<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>   next<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>next<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> p<span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>         p <span class=\"sy0\">=</span> next<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>      print <span class=\"sy0\">*</span>, <span class=\"st0\">\"Kill\"</span>, next<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      next<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> next<span class=\"br0\">(</span>next<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      p <span class=\"sy0\">=</span> next<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>   print <span class=\"sy0\">*</span>, <span class=\"st0\">\"Alive\"</span>, p<br/>   <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>next<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "friendly interactive shell", "loc": 19, "block": "<pre class=\"text highlighted_source\">function execute<br/>    # If the list is empty, don't do anything.<br/>    test (count $argv) -ge 2; or return<br/>    # If the list has only one element, return it<br/>    if test (count $argv) -eq 2<br/>        echo $argv[2]<br/>        return<br/>    end<br/>    # Rotate prisoners<br/>    for i in (seq 2 $argv[1])<br/>        set argv $argv[1 3..-1 2]<br/>    end<br/>    # Mention killed prisoner<br/>    echo $argv[2]<br/>    # Kill rest recursively<br/>    execute $argv[1 3..-1]<br/>end<br/>\u00a0<br/>echo Prisoner (execute 3 (seq 0 40))[-1] survived.</pre>"}, {"lang": "Groovy", "loc": 37, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> Josephus <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a>, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> kill, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> survivors<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// init user pool</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> users <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a><span class=\"br0\">[</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// give initial values such that [0] = 1 (first person) [1] = 2 (second person) etc</span><br/>    users.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex\"><span class=\"kw5\">eachWithIndex</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>obj, i <span class=\"sy0\">-&gt;</span> users<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// keep track of which person we are on (ranging from 1 to kill)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> person <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// keep going until we have the desired number of survivors</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>users.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> survivors<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// for each person, if they are the kill'th person, set them to -1 to show eliminated</span><br/>        users.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex\"><span class=\"kw5\">eachWithIndex</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>obj, i <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>person<span class=\"sy0\">++</span> <span class=\"sy0\">%</span> kill <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                users<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// if person overflowed kill then reset back to 1</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>person <span class=\"sy0\">&gt;</span> kill<span class=\"br0\">)</span> <span class=\"br0\">{</span>person <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// clear out all eliminated persons</span><br/>        users <span class=\"sy0\">=</span> users.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a><span class=\"br0\">{</span>w <span class=\"sy0\">-&gt;</span> w <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// resulting set is the safe positions</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> users<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Run some test cases</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Final survivor for n = 10201 and k = 17: \"</span> <span class=\"sy0\">+</span> Josephus<span class=\"br0\">(</span><span class=\"nu0\">10201</span>,<span class=\"nu0\">17</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"4 safe spots for n = 10201 and k = 17: \"</span> <span class=\"sy0\">+</span> Josephus<span class=\"br0\">(</span><span class=\"nu0\">10201</span>,<span class=\"nu0\">17</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 49, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// basic task function</span><br/><span class=\"kw4\">func</span> finalSurvivor<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> k <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// argument validation omitted</span><br/>    circle <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> circle <span class=\"sy1\">{</span><br/>        circle<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    k<span class=\"sy2\">--</span><br/>    exPos <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>circle<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        exPos <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>exPos <span class=\"sy3\">+</span> k<span class=\"sy1\">)</span> <span class=\"sy3\">%</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>circle<span class=\"sy1\">)</span><br/>        circle <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>circle<span class=\"sy1\">[:</span>exPos<span class=\"sy1\">],</span> circle<span class=\"sy1\">[</span>exPos<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> circle<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// extra</span><br/><span class=\"kw4\">func</span> position<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> pos <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// argument validation omitted</span><br/>    circle <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> circle <span class=\"sy1\">{</span><br/>        circle<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    k<span class=\"sy2\">--</span><br/>    exPos <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>circle<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        exPos <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>exPos <span class=\"sy3\">+</span> k<span class=\"sy1\">)</span> <span class=\"sy3\">%</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>circle<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> pos <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> circle<span class=\"sy1\">[</span>exPos<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        pos<span class=\"sy2\">--</span><br/>        circle <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>circle<span class=\"sy1\">[:</span>exPos<span class=\"sy1\">],</span> circle<span class=\"sy1\">[</span>exPos<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> circle<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// show basic task function on given test case</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>finalSurvivor<span class=\"sy1\">(</span><span class=\"nu0\">41</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">))</span><br/>    <span class=\"co1\">// show extra function on all positions of given test case</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Position  Prisoner\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">41</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%5d%10d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> position<span class=\"sy1\">(</span><span class=\"nu0\">41</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 41, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><span class=\"br0\">(</span>\\\\<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/>\u00a0<br/>prisoners <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>prisoners n <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>counter <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>counter k <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle\"><span class=\"kw3\">cycle</span></a> <span class=\"br0\">[</span>k<span class=\"sy0\">,</span> k<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>killList <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>killList xs cs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>killed<span class=\"sy0\">,</span> survivors<span class=\"sy0\">,</span> newCs<span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span><br/>        <span class=\"br0\">(</span>killed<span class=\"sy0\">,</span> newCs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> kill xs cs <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        survivors <span class=\"sy0\">=</span> xs \\\\ killed<br/>        kill <span class=\"br0\">[</span><span class=\"br0\">]</span> cs rs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rs<span class=\"sy0\">,</span> cs<span class=\"br0\">)</span><br/>        kill <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>c:cs<span class=\"br0\">)</span> rs<br/>            <span class=\"sy0\">|</span> c <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span><br/>                <span class=\"kw1\">let</span> ts <span class=\"sy0\">=</span> rs <span class=\"sy0\">++</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>                <span class=\"kw1\">in</span>  kill xs cs ts<br/>            <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>                kill xs cs rs<br/>\u00a0<br/>killRecursive <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>killRecursive xs cs m <span class=\"sy0\">=</span> killR <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> cs<span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span><br/>        killR <span class=\"br0\">(</span>killed<span class=\"sy0\">,</span> remaining<span class=\"sy0\">,</span> counter<span class=\"br0\">)</span><br/>            <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> remaining <span class=\"sy0\">&lt;=</span> m <span class=\"sy0\">=</span> <span class=\"br0\">(</span>killed<span class=\"sy0\">,</span> remaining<span class=\"br0\">)</span><br/>            <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>                <span class=\"kw1\">let</span> <span class=\"br0\">(</span>newKilled<span class=\"sy0\">,</span> newRemaining<span class=\"sy0\">,</span> newCounter<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>                        killList remaining counter<br/>                    allKilled <span class=\"sy0\">=</span> killed <span class=\"sy0\">++</span> newKilled<br/>                <span class=\"kw1\">in</span>  killR <span class=\"br0\">(</span>allKilled<span class=\"sy0\">,</span> newRemaining<span class=\"sy0\">,</span> newCounter<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    args <span class=\"sy0\">&lt;-</span> getArgs<br/>    <span class=\"kw1\">case</span> args <span class=\"kw1\">of</span><br/>        <span class=\"br0\">[</span>n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> m<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">$</span> killRecursive <span class=\"br0\">(</span>prisoners <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>counter <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> m<span class=\"br0\">)</span><br/>        <span class=\"sy0\">_</span>         <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">$</span> killRecursive <span class=\"br0\">(</span>prisoners <span class=\"nu0\">41</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>counter <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   m <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">41</span><br/>   c <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">3</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"With \"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">,</span><span class=\"st0\">\" men, counting to \"</span><span class=\"sy0\">,</span>c<span class=\"sy0\">,</span><span class=\"st0\">\" last position is: \"</span><span class=\"sy0\">,</span> j<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> j<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> m<span class=\"sy0\">==</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>j<span class=\"br0\">(</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">+</span>c<span class=\"br0\">)</span><span class=\"sy0\">%</span>m<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">3</span> <span class=\"sy0\">(</span>[ <span class=\"sy0\">(</span><span class=\"nu0\">1</span> }. &lt;:@[ |. ]<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">1</span> &lt; #@]<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span> <a class=\"__cf_email__\" data-cfemail=\"90f9bed0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<span class=\"sy0\">)</span> <span class=\"nu0\">41</span><br/><span class=\"nu0\">30</span></pre>"}, {"lang": "Java", "loc": 40, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Josephus <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> execute<span class=\"br0\">(</span><span class=\"kw3\">int</span> n, <span class=\"kw3\">int</span> k<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw3\">int</span> killIdx = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> prisoners = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            prisoners.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Prisoners executed in order:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            killIdx = <span class=\"br0\">(</span>killIdx + k - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>prisoners.<span class=\"me1\">get</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            prisoners.<span class=\"me1\">remove</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> prisoners.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> executeAllButM<span class=\"br0\">(</span><span class=\"kw3\">int</span> n, <span class=\"kw3\">int</span> k, <span class=\"kw3\">int</span> m<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw3\">int</span> killIdx = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> prisoners = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            prisoners.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Prisoners executed in order:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> m<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            killIdx = <span class=\"br0\">(</span>killIdx + k - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> prisoners.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>prisoners.<span class=\"me1\">get</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            prisoners.<span class=\"me1\">remove</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">return</span> prisoners<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Survivor: \"</span> + execute<span class=\"br0\">(</span><span class=\"nu0\">41</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Survivors: \"</span> + executeAllButM<span class=\"br0\">(</span><span class=\"nu0\">41</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> Josephus <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  init<span class=\"sy0\">:</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">head</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> current <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">head</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      current.<span class=\"me1\">label</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      current.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>prev<span class=\"sy0\">:</span> current<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      current <span class=\"sy0\">=</span> current.<span class=\"me1\">next</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    current.<span class=\"me1\">label</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    current.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">head</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">head</span>.<span class=\"me1\">prev</span> <span class=\"sy0\">=</span> current<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  kill<span class=\"sy0\">:</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>spacing<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> current <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">head</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>current.<span class=\"me1\">next</span> <span class=\"sy0\">!==</span> current<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> spacing<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        current <span class=\"sy0\">=</span> current.<span class=\"me1\">next</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      current.<span class=\"me1\">prev</span>.<span class=\"me1\">next</span> <span class=\"sy0\">=</span> current.<span class=\"me1\">next</span><span class=\"sy0\">;</span><br/>      current.<span class=\"me1\">next</span>.<span class=\"me1\">prev</span> <span class=\"sy0\">=</span> current.<span class=\"me1\">prev</span><span class=\"sy0\">;</span><br/>      current <span class=\"sy0\">=</span> current.<span class=\"me1\">next</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> current.<span class=\"me1\">label</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">using Memoize<br/>@memoize josephus(n::Integer, k::Integer, m::Integer=1) = n == m\u00a0? collect(0:m .- 1)\u00a0: mod.(josephus(n - 1, k, m) + k, n)<br/>\u00a0<br/>@show josephus(41, 3)<br/>@show josephus(41, 3, 5)</pre>"}, {"lang": "jq", "loc": 12, "block": "<pre class=\"text highlighted_source\"># A control structure, for convenience:<br/># as soon as \"condition\" is true, then emit . and stop:<br/>def do_until(condition; next):<br/>  def u: if condition then . else (next|u) end;<br/>  u;<br/>\u00a0<br/># n is the initial number; every k-th prisoner is removed until m remain.<br/># Solution by simulation<br/>def josephus(n;k;m):<br/>    reduce range(0;n) as $i ([]; . + [$i])    # Number the prisoners from 0 to (n-1)<br/>    | do_until( length &lt; k or length &lt;= m; .[k:] + .[0:k-1] )<br/>    | do_until( length &lt;= m; (k\u00a0% length) as $i | .[$i:] + .[0:$i-1] );</pre>"}, {"lang": "Kotlin", "loc": 33, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>fun josephus<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, k<span class=\"sy0\">:</span> Int, m<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span>, List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> m <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&gt;</span> k <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&gt;</span> m<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> killed <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> survived <span class=\"sy0\">=</span> MutableList<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> start <span class=\"sy0\">=</span> k - <span class=\"nu0\">1</span><br/>    outer<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end <span class=\"sy0\">=</span> survived.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> start<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> deleted <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            killed.<span class=\"me1\">add</span><span class=\"br0\">(</span>survived.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>i - deleted<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>survived.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> m<span class=\"br0\">)</span> break<span class=\"sy0\">@</span>outer<br/>            deleted++<br/>            i +<span class=\"sy0\">=</span> k<br/>        <span class=\"br0\">}</span> <br/>        start <span class=\"sy0\">=</span> i - end - <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Pair<span class=\"br0\">(</span>survived, killed<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> triples <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Triple<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, Triple<span class=\"br0\">(</span><span class=\"nu0\">41</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, Triple<span class=\"br0\">(</span><span class=\"nu0\">41</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>triple in triples<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a><span class=\"br0\">(</span>n, k, m<span class=\"br0\">)</span> <span class=\"sy0\">=</span> triple <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Prisoners = $n, Step = $m, Survivors = $m\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>survived, killed<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> josephus<span class=\"br0\">(</span>n, k, m<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Survived  \u00a0: $survived\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Kill order\u00a0: $killed\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 25, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> josephus<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> positions<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>positions<span class=\"sy0\">,</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">local</span> s<span class=\"sy0\">=</span><span class=\"st0\">'Execution order: '</span><br/>    <span class=\"kw1\">while</span> <span class=\"sy0\">#</span>positions<span class=\"sy0\">&gt;</span>m <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> j<span class=\"sy0\">==</span>k <span class=\"kw1\">then</span><br/>            s<span class=\"sy0\">=</span>s <span class=\"sy0\">..</span> positions<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">', '</span><br/>            <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>positions<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>            i<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        i<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        j<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> i<span class=\"sy0\">&gt;#</span>positions <span class=\"kw1\">then</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span>k <span class=\"kw1\">then</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>s<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>s<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> s<span class=\"sy0\">=</span><span class=\"st0\">'Survivors: '</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>positions<span class=\"br0\">)</span> <span class=\"kw1\">do</span> s<span class=\"sy0\">=</span>s <span class=\"sy0\">..</span> v <span class=\"sy0\">..</span> <span class=\"st0\">', '</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>s<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>s<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>josephus<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 39, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>indAlive<span class=\"br0\">]</span> = josephus<span class=\"br0\">(</span>numPeople,count<span class=\"br0\">)</span><br/><span class=\"co1\">% Josephus: Given a circle of numPeople individuals, with a count of count,</span><br/><span class=\"co1\">% find the index (starting at 1) of the survivor [see Josephus Problem]</span><br/>\u00a0<br/><span class=\"co1\">%% Definitions:</span><br/><span class=\"co1\">%   0 = dead position</span><br/><span class=\"co1\">%   1 = alive position</span><br/><span class=\"co1\">%   index = # of person</span><br/>\u00a0<br/><span class=\"co1\">%% Setting up</span><br/>arrPeople = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, numPeople<span class=\"br0\">)</span>;<br/>currInd = <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"co1\">%% Counting</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>arrPeople<span class=\"br0\">(</span>arrPeople == <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"co1\">% While more than 1 person is alive</span><br/>    counter = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">while</span> counter ~= count                       <span class=\"co1\">% Counting until we hit the count</span><br/>        currInd = currInd + <span class=\"nu0\">1</span>;                  <span class=\"co1\">% Move to the next person</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> currInd &gt; numPeople                  <span class=\"co1\">% If overflow, wraparound</span><br/>            currInd = currInd - numPeople;<br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> arrPeople<span class=\"br0\">(</span>currInd<span class=\"br0\">)</span>                   <span class=\"co1\">% If the current person is alive</span><br/>            counter = counter + <span class=\"nu0\">1</span>;                <span class=\"co1\">% Add 1 person to the count</span><br/>            <span class=\"co1\">%fprintf(\"Index:\u00a0%d \\t| Counter:\u00a0%d\\n\", currInd, counter)          \u00a0% Uncomment to display index and counter location</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    arrPeople<span class=\"br0\">(</span>currInd<span class=\"br0\">)</span> = <span class=\"nu0\">0</span>;                     <span class=\"co1\">% Kill the person we reached</span><br/>    <span class=\"co1\">%fprintf(\"Killed person\u00a0%d \\n\", currInd)                                  \u00a0% Uncomment to display order of killing</span><br/>    <span class=\"co1\">%disp(arrPeople)                                                          \u00a0% Uncomment to display current status of people</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>indAlive = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>arrPeople<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">survivor[n_, k_]\u00a0:= Nest[Most[RotateLeft[#, k]] &amp;, Range[0, n - 1], n - 1]<br/>survivor[41, 3]</pre>"}, {"lang": "Modula-2", "loc": 26, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Josephus;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Josephus<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> a<span class=\"sy0\">,</span>m <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    m <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">FOR</span> a<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"kw1\">DO</span><br/>        m <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">+</span> k<span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> a;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> m<br/><span class=\"kw1\">END</span> Josephus;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    n<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    nl<span class=\"sy0\">,</span>kl<span class=\"sy0\">,</span>il <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"nu0\">41</span>;<br/>    k <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>;<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"n =\u00a0%i, k =\u00a0%i, final survivor:\u00a0%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> Josephus<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Josephus.</pre>"}, {"lang": "NetRexx", "loc": 33, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"coMULTI\">/* REXX **************************************************************<br/>* 15.11.2012 Walter Pachl - my own solution<br/>* 16.11.2012 Walter Pachl generalized n prisoners + w killing distance<br/>*                         and s=number of survivors<br/>**********************************************************************/</span><br/>dead = <span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/* nobody's dead yet          */</span><br/>n = <span class=\"nu0\">41</span>                                 <span class=\"coMULTI\">/* number of alive prisoners  */</span><br/>nn = n                                 <span class=\"coMULTI\">/* wrap around boundary       */</span><br/>w = <span class=\"nu0\">3</span>                                  <span class=\"coMULTI\">/* killing count              */</span><br/>s = <span class=\"nu0\">1</span>                                  <span class=\"coMULTI\">/* nuber of survivors         */</span><br/>p = -<span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/* start here                 */</span><br/>killed = <span class=\"st0\">''</span>                            <span class=\"coMULTI\">/* output of killings         */</span><br/><span class=\"kw1\">Loop</span> until n = s                       <span class=\"coMULTI\">/* until one alive prisoner   */</span><br/>  found = <span class=\"nu0\">0</span>                            <span class=\"coMULTI\">/* start looking              */</span><br/>  <span class=\"kw1\">Loop</span> Until found = w                 <span class=\"coMULTI\">/* until we have the third    */</span><br/>    p = p + <span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* next position              */</span><br/>    <span class=\"kw1\">If</span> p = nn <span class=\"kw3\">Then</span> p = <span class=\"nu0\">0</span>               <span class=\"coMULTI\">/* wrap around                */</span><br/>    <span class=\"kw1\">If</span> dead<span class=\"br0\">[</span>p<span class=\"br0\">]</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">Then</span>                <span class=\"coMULTI\">/* a prisoner who is alive    */</span><br/>      found = found + <span class=\"nu0\">1</span>                <span class=\"coMULTI\">/* increment found count      */</span><br/>    <span class=\"kw3\">End</span><br/>  dead<span class=\"br0\">[</span>p<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>  n = n - <span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/* shoot the one on this pos. */</span><br/>  killed = killed p                    <span class=\"coMULTI\">/* add to output              */</span><br/>  <span class=\"kw3\">End</span>                                  <span class=\"coMULTI\">/* End of main loop           */</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'killed:'</span>killed.<span class=\"kw6\">subword</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/* output killing sequence    */</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'       '</span>killed.<span class=\"kw6\">subword</span><span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/* output killing sequence    */</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Survivor(s):'</span>                     <span class=\"coMULTI\">/* show                       */</span><br/><span class=\"kw1\">Loop</span> i = <span class=\"nu0\">0</span> To <span class=\"nu0\">40</span>                       <span class=\"coMULTI\">/* look for the surviving p's */</span><br/>  <span class=\"kw1\">If</span> dead<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> i            <span class=\"coMULTI\">/* found one                  */</span><br/>  <span class=\"kw3\">End</span></pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">import sequtils, strutils, future<br/>\u00a0<br/>proc j(n, k): string =<br/>  var<br/>    p = toSeq(0 .. &lt; n)<br/>    i = 0<br/>    s = newSeq[int]()<br/>\u00a0<br/>  while p.len &gt; 0:<br/>    i = (i + k - 1) mod p.len<br/>    s.add p[i]<br/>    system.delete(p, i)<br/>\u00a0<br/>  result = \"Prisoner killing order: \"<br/>  result.add s.map((x: int) =&gt; $x).join(\", \")<br/>  result.add \".\\nSurvivor: \"<br/>  result.add($s[s.high])<br/>\u00a0<br/>echo j(5,2)<br/>echo j(41,3)</pre>"}, {"lang": "Objeck", "loc": 51, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Josephus <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Execute<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> k <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    killIdx <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    prisoners <span class=\"sy0\">:=</span> Collection.IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Prisoners executed in order:\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      killIdx <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>killIdx <span class=\"sy0\">+</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      executed <span class=\"sy0\">:=</span> prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\"{$executed} \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Remove</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    '\\n'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"kw1\">return</span> prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> ExecuteAllButM<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> k <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> m <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ Collection.IntVector <span class=\"br0\">{</span><br/>    killIdx <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    prisoners <span class=\"sy0\">:=</span> Collection.IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Prisoners executed in order:\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> m<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      killIdx <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>killIdx <span class=\"sy0\">+</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      executed <span class=\"sy0\">:=</span> prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\"{$executed} \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      prisoners<span class=\"sy0\">-&gt;</span><span class=\"me1\">Remove</span><span class=\"br0\">(</span>killIdx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    '\\n'<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"kw1\">return</span> prisoners<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    result <span class=\"sy0\">:=</span> Execute<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Survivor: {$result}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    results <span class=\"sy0\">:=</span> ExecuteAllButM<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Survivors: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> results<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    results<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> results<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ' '<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 13, "block": "<pre class=\"text highlighted_source\">: josephus(n, k)<br/>| prisoners killed i |<br/>   n seq asListBuffer -&gt;prisoners<br/>   ListBuffer newSize(n) -&gt;killed<br/>\u00a0<br/>   0 n 1- loop: i [ <br/>      k 1- + prisoners size mod dup 1+ prisoners removeAt<br/>      killed add <br/>      ] drop<br/>\u00a0<br/>   System.Out \"Killed\u00a0: \" &lt;&lt; killed &lt;&lt; \"\\nSurvivor\u00a0: \" &lt;&lt; prisoners &lt;&lt; cr<br/>;<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">Josephus<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> n<span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> my<span class=\"br0\">(</span>t<span class=\"sy0\">=</span><span class=\"br0\">(</span>Josephus<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">+</span>k<span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@prisoner</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">until</span> <span class=\"br0\">(</span><span class=\"re0\">@prisoner</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@prisoner</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@prisoner</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$k</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@prisoner</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Prisoner @prisoner survived.<span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "Perl 6", "loc": 16, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> Execute<span class=\"br0\">(</span><span class=\"re0\">@prisoner</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">until</span> <span class=\"re0\">@prisoner</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">@prisoner</span><span class=\"sy0\">.=</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@prisoner</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@prisoner</span> <span class=\"sy0\">=</span> <span class=\"sy0\">^</span><span class=\"nu0\">41</span><span class=\"sy0\">;</span><br/>Execute <span class=\"re0\">@prisoner</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Prisoner {@prisoner} survived.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># We don't have to use numbers.  Any list will do:</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@dalton</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>Joe Jack William Averell Rantanplan<span class=\"sy0\">&gt;;</span><br/>Execute <span class=\"re0\">@dalton</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"{@dalton} survived.\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">function Josephus(sequence prisoners, integer step, survivors)<br/>    integer n = length(prisoners), nn = n<br/>    integer p = 0<br/>    while n&gt;survivors do<br/>        integer found = 0<br/>        while found!=step do<br/>            p = iff(p=nn?1:p+1)<br/>            found += prisoners[p]!=-1<br/>        end while<br/>        -- (if you want a kill list, build it here!)<br/>        prisoners[p] = -1<br/>        n -= 1<br/>    end while<br/>    return remove_all(-1,prisoners)<br/>end function<br/>\u00a0<br/>?Josephus(tagset(5),2,1)<br/>?Josephus(tagset(41),3,1)<br/>?Josephus(tagset(41),3,3)<br/>?Josephus({\"Joe\",\"Jack\",\"William\",\"John\",\"James\"},2,1)</pre>"}, {"lang": "PHP", "loc": 21, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span> <span class=\"co1\">//Josephus.php</span><br/><span class=\"kw2\">function</span> Jotapata<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span><span class=\"re0\">$k</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"re0\">$m</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$m</span><span class=\"sy0\">--;</span><br/>\t<span class=\"re0\">$prisoners</span><span class=\"sy0\">=</span><a href=\"http://www.php.net/array_fill\"><span class=\"kw3\">array_fill</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"kw4\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//make a circle of n prisoners, store false ie: dead=false</span><br/>\t<span class=\"re0\">$deadpool</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"co1\">//count to next execution</span><br/>\t<span class=\"re0\">$order</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"co1\">//death order and *dead* flag, ie. deadpool</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.php.net/array_sum\"><span class=\"kw3\">array_sum</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_count_values\"><span class=\"kw3\">array_count_values</span></a><span class=\"br0\">(</span><span class=\"re0\">$prisoners</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//while sum of count of unique values dead times &lt; n (they start as all false)</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$prisoners</span> <span class=\"kw1\">as</span> <span class=\"re0\">$thisPrisoner</span><span class=\"sy0\">=&gt;</span><span class=\"re0\">$dead</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$dead</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//so yeah...if not dead...</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$deadpool</span><span class=\"sy0\">==</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//if their time is up in the deadpool...</span><br/>\t\t\t\t\t<span class=\"re0\">$order</span><span class=\"sy0\">++;</span><br/>\t\t\t\t\t<span class=\"co1\">//set the deadpool value or enumerate as survivor</span><br/>\t\t\t\t\t<span class=\"re0\">$prisoners</span><span class=\"br0\">[</span><span class=\"re0\">$thisPrisoner</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$order</span><span class=\"br0\">)</span>?<span class=\"re0\">$order</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"re0\">$order</span>?<span class=\"st_h\">'Call me *Titus Flavius* Josephus'</span><span class=\"sy0\">:</span><span class=\"st_h\">'Joe\\'s friend '</span><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$order</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"re0\">$m</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$deadpool</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"co1\">//reset count to next execution</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><span class=\"re0\">$duckpool</span><span class=\"sy0\">++;</span><span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$prisoners</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">echo</span> <span class=\"st_h\">'&lt;pre&gt;'</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span>Jotapata<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st_h\">'&lt;pre&gt;'</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#general solution<br/>(de jo (N K)<br/>   (if (=1 N)<br/>      1<br/>      (inc<br/>         (%<br/>            (+ (dec K) (jo (dec N) K))<br/>            N ) ) ) )<br/>\u00a0<br/>#special case when K is 2; much faster than general version.<br/>(de jo2(N)<br/>   (let P 1<br/>      (while (&lt;= P N)<br/>         (setq P (* 2 P))<br/>         (+ (- (* 2 N) P) 1) ) ) )<br/>\u00a0<br/># find the survivor using an optimal solution<br/>(de survivor (N K)<br/>   (if (=0 (% N 2))<br/>      (jo2 N)<br/>      (jo N K) ) )<br/>(print (survivor 5 2))<br/>(print (survivor 41 3))<br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 63, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span> source attributes xref<span class=\"sy0\">;</span><br/> joseph<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/* REXX **************************************************************<br/> * 15.11.2012 Walter Pachl - my own solution<br/> * 16.11.2012 Walter Pachl generalized n prisoners + w killing distance<br/> *                         and s=number of survivors<br/> * 03.05.2013 Walter Pachl Translated From REXX Version 1<br/> **********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> dead<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>nn<span class=\"sy0\">,</span>w<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>found<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pp <span class=\"kw1\">Pic</span><span class=\"st0\">'99'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> killed <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'killed: '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* output of killings     */</span><br/> <span class=\"kw1\">Dcl</span> survived <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'Survivor(s): '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> dead<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span>                               <span class=\"coMULTI\">/* nobody's dead yet          */</span><br/> n<span class=\"sy0\">=</span><span class=\"nu0\">41</span><span class=\"sy0\">;</span>                                  <span class=\"coMULTI\">/* number of alive prisoners  */</span><br/> nn<span class=\"sy0\">=</span>n<span class=\"sy0\">;</span>                                  <span class=\"coMULTI\">/* wrap around boundary       */</span><br/> w<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>                                   <span class=\"coMULTI\">/* killing count              */</span><br/> s<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                                   <span class=\"coMULTI\">/* number of survivors         */</span><br/> p<span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                                  <span class=\"coMULTI\">/* start here                 */</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">Until</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>                         <span class=\"coMULTI\">/* until one alive prisoner   */</span><br/>   found<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>                             <span class=\"coMULTI\">/* start looking              */</span><br/>   <span class=\"kw1\">Do</span> <span class=\"kw1\">Until</span><span class=\"br0\">(</span>found<span class=\"sy0\">=</span>w<span class=\"br0\">)</span><span class=\"sy0\">;</span>                   <span class=\"coMULTI\">/* until we have the third    */</span><br/>     p<span class=\"sy0\">=</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                             <span class=\"coMULTI\">/* next position              */</span><br/>     <span class=\"kw1\">If</span> p<span class=\"sy0\">=</span>nn <span class=\"kw1\">Then</span> p<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>                  <span class=\"coMULTI\">/* wrap around                */</span><br/>     <span class=\"kw1\">If</span> <span class=\"sy0\">^</span>dead<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">Then</span>                   <span class=\"coMULTI\">/* a prisoner who is alive    */</span><br/>       found<span class=\"sy0\">=</span>found<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                   <span class=\"coMULTI\">/* increment found count      */</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   dead<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'1'</span>b<span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* shoot the one on this pos. */</span><br/>   n<span class=\"sy0\">=</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   pp<span class=\"sy0\">=</span>p<span class=\"sy0\">;</span><br/>   killed<span class=\"sy0\">=</span>killed!!<span class=\"st0\">' '</span>!!pp<span class=\"sy0\">;</span>              <span class=\"coMULTI\">/* add to output              */</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span>                                 <span class=\"coMULTI\">/* End of main loop           */</span><br/> <span class=\"kw1\">Call</span> o<span class=\"br0\">(</span>killed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> nn<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* look for the surviving p's */</span><br/>   <span class=\"kw1\">If</span> <span class=\"sy0\">^</span>dead<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                 <span class=\"coMULTI\">/* found one                  */</span><br/>     pp<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span><br/>     survived<span class=\"sy0\">=</span>survived!!<span class=\"st0\">' '</span>!!pp<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> o<span class=\"br0\">(</span>survived<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> o<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * Formatted Output of given string:<br/> * xxxxxxxxxx xxx xx xx xxx ---<br/> *         xx xxx xxx<br/> *         xxxxx xxx<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ll <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">72</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>ll<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> p<span class=\"sy0\">=</span>ll<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span> <span class=\"kw1\">By</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">' '</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   s<span class=\"sy0\">=</span><span class=\"kw1\">repeat</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>!!<span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 23, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"sy0\">&lt;</span>lang PowerShell<span class=\"sy0\">&gt;</span><br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>JosephusPrisoners <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$K</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Just for convenience</span><br/>    <span class=\"re0\">$End</span> <span class=\"sy0\">=</span> <span class=\"re0\">$N</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">#  Create circle of prisoners</span><br/>    <span class=\"re0\">$Prisoners</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Collections.ArrayList <span class=\"br0\">(</span> <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"re0\">$End</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">#  For each starting point of the reducing circle...</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Start</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"br0\">(</span><span class=\"re0\">$End</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  We subtract one from K for the one we advanced by incrementing $Start</span><br/>        <span class=\"co1\">#  Then take K modulus the length of the remaining circle</span><br/>        <span class=\"re0\">$RoundK</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$K</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span> <span class=\"re0\">$End</span> <span class=\"sy0\">-</span> <span class=\"re0\">$Start</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">#  Rotate the remaining prisoners K places around the remaining circle</span><br/>        <span class=\"re0\">$Prisoners</span>.SetRange<span class=\"br0\">(</span> <span class=\"re0\">$Start</span><span class=\"sy0\">,</span> <span class=\"re0\">$Prisoners</span><span class=\"br0\">[</span> <span class=\"re0\">$Start</span>..<span class=\"re0\">$End</span> <span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"re0\">$RoundK</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Start</span> <span class=\"sy0\">-</span> <span class=\"re0\">$End</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>..<span class=\"br0\">(</span> <span class=\"re0\">$RoundK</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$Prisoners</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 34, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">NewList</span> prisoners.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> f2l<span class=\"br0\">(</span>List p.i<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   \u00a0: tmp.i<span class=\"sy0\">=</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     \u00a0: p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>tmp <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> l2f<span class=\"br0\">(</span>List p.i<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  \u00a0: tmp.i<span class=\"sy0\">=</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">InsertElement</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>tmp  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Repeat</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#LF$<span class=\"sy0\">+</span>#LF$<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Josephus problem - input prisoners\u00a0: \"</span><span class=\"br0\">)</span>\u00a0: n<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">Break</span>\u00a0: <span class=\"kw1\">EndIf</span>  <br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"                 - input steps    \u00a0: \"</span><span class=\"br0\">)</span>\u00a0: k<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"                 - input survivors\u00a0: \"</span><span class=\"br0\">)</span>\u00a0: s<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">If</span> s<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>\u00a0: s<span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>i\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span>\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Executed\u00a0: \"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">While</span> ListSize<span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>s <span class=\"kw1\">And</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">And</span> k<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">And</span> k<span class=\"sy0\">&lt;</span>n    <br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> k\u00a0: f2l<span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span>    <br/>    l2f<span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">If</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span>\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#LF$<span class=\"sy0\">+</span><span class=\"st0\">\"Surviving: \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>prisoners<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span>      <br/><span class=\"kw1\">ForEver</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> j<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span>:<br/>\tp<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> seq <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">while</span> p:<br/>\t\ti <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i+k-<span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0% <span class=\"kw2\">len</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>\t\tseq.<span class=\"me1\">append</span><span class=\"br0\">(</span>p.<span class=\"me1\">pop</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"st0\">'Prisoner killing order:\u00a0%s.<span class=\"es0\">\\n</span>Survivor:\u00a0%i'</span>\u00a0% <span class=\"br0\">(</span><span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> seq<span class=\"br0\">[</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> seq<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>j<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Prisoner killing order: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span>.<br/><span class=\"me1\">Survivor</span>: <span class=\"nu0\">2</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>j<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Prisoner killing order: <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">38</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">33</span><span class=\"sy0\">,</span> <span class=\"nu0\">39</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span>.<br/><span class=\"me1\">Survivor</span>: <span class=\"nu0\">30</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>jose &lt;-function(s, r,n){<br/>y &lt;- 0:(r-1)<br/> for (i in (r+1):n)<br/>  y &lt;- (y + s)\u00a0%% i <br/> return(y)<br/>}<br/>&gt; jose(3,1,41) # r is the number of remained prisoner.<br/>[1] 30<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (josephus n k (m 0))<br/>  (for/fold ((m (add1 m)))<br/>    ((a (in-range (add1 m) (add1 n))))<br/>    (remainder (+ m k) a)))<br/>\u00a0<br/>(josephus 41 3)\u00a0; -&gt;30</pre>"}, {"lang": "REBOL", "loc": 13, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol []</span><br/>\u00a0<br/>execute: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>death-list <span class=\"br0\">[</span><span class=\"kw1\">block!</span><span class=\"br0\">]</span> kill <span class=\"br0\">[</span><span class=\"kw1\">integer!</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    assert <span class=\"br0\">[</span><span class=\"kw3\">not</span> <span class=\"kw3\">empty?</span> death-list<span class=\"br0\">]</span><br/>    <span class=\"kw2\">until</span> <span class=\"br0\">[</span><br/>        <span class=\"kw2\">loop</span> kill - <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw3\">append</span> death-list take death-list<span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"kw3\">length?</span> <span class=\"kw3\">remove</span> death-list<span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>prisoner: <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw2\">for</span> n <span class=\"nu0\">0</span> <span class=\"nu0\">40</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw3\">append</span> prisoner n<span class=\"br0\">]</span><br/>execute prisoner <span class=\"nu0\">3</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Prisoner\"</span> prisoner <span class=\"st0\">\"survived\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 46, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX **************************************************************<br/>* 15.11.2012 Walter Pachl - my own solution<br/>* 16.11.2012 Walter Pachl generalized n prisoners + w killing distance<br/>*                         and s=number of survivors<br/>* 09.05.2013 Walter Pachl accept arguments n w s and fix output<br/>*                         thanks for the review/test<br/>* I see no need for specifying a start count (actually a start number)<br/>* This program should work on EVERY REXX. <br/>* Pls report if this is not the case and let us know what's a problem.<br/>**********************************************************************/</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n w s <span class=\"sy0\">.</span><br/><span class=\"kw1\">If</span> n=<span class=\"st0\">'?'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'Invoke the program with the following arguments:'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'n number of prisoners            (default 41)'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'w killing count                  (default  3)'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'s number of prisoners to survive (default  1)'</span><br/>  <span class=\"kw1\">Exit</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">If</span> n=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> n=<span class=\"nu0\">41</span>                      <span class=\"coMULTI\">/* number of alive prisoners  */</span><br/><span class=\"kw1\">If</span> w=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> w=<span class=\"nu0\">3</span>                       <span class=\"coMULTI\">/* killing count              */</span><br/><span class=\"kw1\">If</span> s=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> s=<span class=\"nu0\">1</span>                       <span class=\"coMULTI\">/* nuber of survivors         */</span><br/>dead<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                <span class=\"coMULTI\">/* nobody's dead yet          */</span><br/>nn=n                                   <span class=\"coMULTI\">/* wrap around boundary       */</span><br/>p=-<span class=\"nu0\">1</span>                                   <span class=\"coMULTI\">/* start here                 */</span><br/>killed=<span class=\"st0\">''</span>                              <span class=\"coMULTI\">/* output of killings         */</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">until</span> n=s                           <span class=\"coMULTI\">/* until one alive prisoner   */</span><br/>  found=<span class=\"nu0\">0</span>                              <span class=\"coMULTI\">/* start looking              */</span><br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> found=w                     <span class=\"coMULTI\">/* until we have the third    */</span><br/>    p=p+<span class=\"nu0\">1</span>                              <span class=\"coMULTI\">/* next position              */</span><br/>    <span class=\"kw1\">If</span> p=nn <span class=\"kw3\">Then</span> p=<span class=\"nu0\">0</span>                   <span class=\"coMULTI\">/* wrap around                */</span><br/>    <span class=\"kw1\">If</span> dead<span class=\"sy0\">.</span>p=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span>                   <span class=\"coMULTI\">/* a prisoner who is alive    */</span><br/>      found=found+<span class=\"nu0\">1</span>                    <span class=\"coMULTI\">/* increment found count      */</span><br/>    <span class=\"kw3\">End</span><br/>  dead<span class=\"sy0\">.</span>p=<span class=\"nu0\">1</span><br/>  <span class=\"coMULTI\">/*<br/>  Say 'killing' p 'now'<br/>  */</span><br/>  n=n-<span class=\"nu0\">1</span>                                <span class=\"coMULTI\">/* shoot the one on this pos. */</span><br/>  killed=killed p                      <span class=\"coMULTI\">/* add to output              */</span><br/>  <span class=\"kw3\">End</span>                                  <span class=\"coMULTI\">/* End of main loop           */</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'killed:'</span>killed                    <span class=\"coMULTI\">/* output killing sequence    */</span><br/>s=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">0</span> <span class=\"kw2\">To</span> nn-<span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/* look for the surviving p's */</span><br/>  <span class=\"kw1\">If</span> dead<span class=\"sy0\">.</span>i=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> s=s i               <span class=\"coMULTI\">/* found one                  */</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Survivor(s):'</span>s                    <span class=\"coMULTI\">/* show                       */</span></pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>n = 41<br/>k=3<br/>see \"n =\" + n + \" k = \" + k + \" final survivor = \" + josephus(n, k, 0) + nl<br/>\u00a0<br/>func josephus (n, k, m)<br/>lm = m  <br/>for a = m+1  to n <br/>     lm = (lm+k)\u00a0% a <br/>next<br/>josephus = lm<br/>return josephus<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">n = <span class=\"br0\">(</span>ARGV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span><br/>k = <span class=\"br0\">(</span>ARGV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span><br/>\u00a0<br/>prisoners = <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/>prisoners.<span class=\"me1\">rotate</span>!<span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">shift</span>  <span class=\"kw1\">while</span> prisoners.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">puts</span> prisoners.<span class=\"me1\">first</span></pre>"}, {"lang": "Scala", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> executed<span class=\"br0\">(</span> prisonerCount<span class=\"sy0\">:</span>Int, step<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prisoners <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> until prisonerCount<span class=\"br0\">)</span> map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> behead<span class=\"br0\">(</span> dead<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, alive<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">(</span>countOff<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> group <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> alive.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> countOff <span class=\"br0\">)</span> countOff - alive.<span class=\"me1\">size</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> countOff<br/>\u00a0<br/>    <span class=\"br0\">(</span>dead ++ alive.<span class=\"me1\">take</span><span class=\"br0\">(</span>group<span class=\"br0\">)</span>.<span class=\"me1\">drop</span><span class=\"br0\">(</span>group-<span class=\"nu0\">1</span><span class=\"br0\">)</span>, alive.<span class=\"me1\">drop</span><span class=\"br0\">(</span>group<span class=\"br0\">)</span> ++ alive.<span class=\"me1\">take</span><span class=\"br0\">(</span>group-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> beheadN<span class=\"br0\">(</span> dead<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, alive<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    behead<span class=\"br0\">(</span>dead,alive<span class=\"br0\">)</span><span class=\"br0\">(</span>step<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> execute<span class=\"br0\">(</span> t<span class=\"sy0\">:</span><span class=\"br0\">(</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> t.<span class=\"sy0\">_</span>2 <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> Nil <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>t.<span class=\"sy0\">_</span>1, Seq<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span> execute<span class=\"br0\">(</span>beheadN<span class=\"br0\">(</span>t.<span class=\"sy0\">_</span>1,t.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  execute<span class=\"br0\">(</span><span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"br0\">)</span>,prisoners<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>dead,alive<span class=\"br0\">)</span> <span class=\"sy0\">=</span> executed<span class=\"br0\">(</span><span class=\"nu0\">41</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> <span class=\"st0\">\"Prisoners executed in order:\"</span> <span class=\"br0\">)</span><br/>print<span class=\"br0\">(</span> dead.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Josephus is prisoner \"</span> + alive<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 42, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func array integer: executeAllButM (in integer: n, in integer: k, in integer: m) is func<br/>  result<br/>    var array integer: prisoners is [0 .. -1] times 0;<br/>  local<br/>    var integer: killIdx is 0;<br/>    var integer: prisonerNum is 0;<br/>  begin<br/>    for prisonerNum range 0 to pred(n) do<br/>      prisoners &amp;:= prisonerNum;<br/>    end for;<br/>    writeln(\"Prisoners executed in order:\");<br/>    while length(prisoners) &gt; m do<br/>      killIdx\u00a0:= (killIdx + k - 1) rem length(prisoners);<br/>      write(prisoners[killIdx] &lt;&amp; \" \");<br/>      ignore(remove(prisoners, killIdx));<br/>    end while;<br/>    writeln;<br/>  end func;<br/>\u00a0<br/>const func string: str (in array integer: intArr) is func<br/>  result<br/>    var string: stri is \"\";<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    for key index range intArr do<br/>      if index &lt;&gt; minIdx(intArr) then<br/>        stri &amp;:= \", \";<br/>      end if;<br/>      stri &amp;:= str(intArr[index]);<br/>    end for;<br/>  end func;<br/>\u00a0<br/>enable_output(array integer);<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"Survivor: \" &lt;&amp; executeAllButM(41, 3, 1));<br/>    writeln(\"Survivors: \" &lt;&amp; executeAllButM(41, 3, 3));<br/>  end func;</pre>"}, {"lang": "SequenceL", "loc": 8, "block": "<pre class=\"text highlighted_source\">main\u00a0:= josephus(41, 3);<br/>\u00a0<br/>josephus(n, k)\u00a0:= josephusHelper(n, k, 1, 0);<br/>\u00a0<br/>josephusHelper(n, k, i, r)\u00a0:=  <br/>        r when i &gt; n<br/>    else<br/>        josephusHelper(n, k, i + 1, (r + k) mod i);</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func josephus<span class=\"br0\">(</span>n, k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var prisoners = @^n<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>prisoners.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        prisoners.<span class=\"me1\">rotate</span>!<span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">shift</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> prisoners<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 45, "block": "<pre class=\"text highlighted_source\">class Josephus {<br/>\u00a0<br/>    class func lineUp(#numberOfPeople:Int) -&gt; [Int] {<br/>        var people = [Int]()<br/>        for (var i = 0; i &lt; numberOfPeople; i++) {<br/>            people.append(i)<br/>        }<br/>        return people<br/>    }<br/>\u00a0<br/>    class func execute(#numberOfPeople:Int, spacing:Int) -&gt; Int {<br/>        var killIndex = 0<br/>        var people = self.lineUp(numberOfPeople: numberOfPeople)<br/>\u00a0<br/>        println(\"Prisoners executed in order:\")<br/>        while (people.count &gt; 1) {<br/>            killIndex = (killIndex + spacing - 1)\u00a0% people.count<br/>            executeAndRemove(&amp;people, killIndex: killIndex)<br/>        }<br/>        println()<br/>        return people[0]<br/>    }<br/>\u00a0<br/>    class func executeAndRemove(inout people:[Int], killIndex:Int) {<br/>        print(\"\\(people[killIndex]) \")<br/>        people.removeAtIndex(killIndex)<br/>    }<br/>\u00a0<br/>    class func execucteAllButM(#numberOfPeople:Int, spacing:Int, save:Int) -&gt; [Int] {<br/>        var killIndex = 0<br/>        var people = self.lineUp(numberOfPeople: numberOfPeople)<br/>\u00a0<br/>        println(\"Prisoners executed in order:\")<br/>        while (people.count &gt; save) {<br/>            killIndex = (killIndex + spacing - 1)\u00a0% people.count<br/>            executeAndRemove(&amp;people, killIndex: killIndex)<br/>        }<br/>        println()<br/>        return people<br/>    }<br/>}<br/>\u00a0<br/>println(\"Josephus is number: \\(Josephus.execute(numberOfPeople: 41, spacing: 3))\")<br/>println()<br/>println(\"Survivors: \\(Josephus.execucteAllButM(numberOfPeople: 41, spacing: 3, save: 3))\")</pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> josephus <span class=\"br0\">{</span>number step <span class=\"br0\">{</span>survivors <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$number</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> l <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$l</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># If the element is to be killed, append to the kill sequence</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">%</span><span class=\"re0\">$step</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> killseq <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> l <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$l</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"co1\"># Roll the list</span><br/>\t    <span class=\"kw1\">set</span> l <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$l</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$l</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$killseq</span> end-<span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$survivors</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span> end<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 34, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> josephus(n,k,s)<br/>\t<span class=\"kw4\">Set</span> prisoner = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.ArrayList\"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n - 1<br/>\t\tprisoner.Add(i)<br/>\t<span class=\"kw3\">Next</span><br/>\tindex = -1<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> prisoner.Count = s<br/>\t\tstep_count = 0<br/>\t\t<span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> step_count = k<br/>\t\t\t<span class=\"kw3\">If</span> index+1 &lt;= prisoner.Count-1 <span class=\"kw3\">Then</span><br/>\t\t\t\tindex = index+1<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tindex = (index+1)-(prisoner.Count)<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\tstep_count = step_count+1<br/>\t\t<span class=\"kw3\">Loop</span><br/>\t\tprisoner.RemoveAt(index)<br/>\t\tindex = index-1<br/>\t<span class=\"kw3\">Loop</span><br/>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> prisoner.Count-1<br/>\t\t<span class=\"kw3\">If</span> j &lt; prisoner.Count-1 <span class=\"kw3\">Then</span><br/>\t\t\tjosephus = josephus &amp; prisoner(j) &amp; <span class=\"st0\">\",\"</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tjosephus = josephus &amp; prisoner(j)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'testing the function<br/></span>WScript.StdOut.WriteLine josephus(5,2,1)<br/>WScript.StdOut.WriteLine josephus(41,3,1)<br/>WScript.StdOut.WriteLine josephus(41,3,3)<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 20, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">41</span>\t\t<span class=\"co1\">// number of prisoners</span><br/>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>\t\t<span class=\"co1\">// step size</span><br/>#<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">// number of survivors</span><br/>\u00a0<br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">5</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">5</span><span class=\"sy0\">&lt;</span>#<span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">5</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"prisoner \"</span><span class=\"br0\">)</span> Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">5</span><span class=\"sy0\">,</span> LEFT<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>BOF<br/>#<span class=\"nu0\">4</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> #<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">4</span><span class=\"sy0\">++</span> <span class=\"sy0\">%</span> #<span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tDel_Line<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        #<span class=\"nu0\">1</span><span class=\"sy0\">--</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\tLine<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>At_EOF<span class=\"br0\">)</span> <span class=\"br0\">{</span> BOF <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "XPL0", "loc": 21, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>func Prisoner(N, K);            \\Return final surviving prisoner<br/>int  N, K;                      \\number of prisoners, number to skip<br/>int  I, J;<br/>char A;<br/>[A:= Reserve(N);<br/>for I:= 0 to N-1 do A(I):= I;<br/>I:= 0;<br/>repeat  I:= I+K-1;                              \\skip to next prisoner<br/>        I:= rem(I/N);                           \\wrap to start if necessary<br/>        IntOut(0, A(I)); ChOut(0, ^ );          \\show killed prisoner<br/>        for J:= I to N-2 do A(J):= A(J+1);      \\shift survivors down<br/>        N:= N-1;                                \\one less prisoner<br/>until   N=1;<br/>return A(0);<br/>];<br/>\u00a0<br/>[IntOut(0, Prisoner(5, 2));  CrLf(0);<br/> IntOut(0, Prisoner(41, 3));  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn j(n,k){<br/>   reg p=[0..n-1].walk().copy(), i=0, seq=L();<br/>   while(p){<br/>      i=(i+k-1)%p.len();<br/>      seq.append(p.pop(i));<br/>   }<br/>   \"Prisoner killing order:\u00a0%s.\\nSurvivor:\u00a0%d\"<br/>   .fmt(seq[0,-1].concat(\",\"),seq[-1]);<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 13, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">41</span>: <span class=\"kw1\">LET</span> k=<span class=\"nu0\">3</span>: <span class=\"kw1\">LET</span> m=<span class=\"nu0\">0</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"n= \"</span>;n;TAB <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<span class=\"st0\">\"k= \"</span>;k;TAB <span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span>;<span class=\"st0\">\"final survivor= \"</span>;lm<br/><span class=\"nu0\">40</span> STOP <br/><span class=\"nu0\">100</span> <span class=\"co3\">REM Josephus</span><br/><span class=\"nu0\">110</span> <span class=\"co3\">REM Return m-th on the reversed kill list; m=0 is final survivor.</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">LET</span> lm=m: <span class=\"co3\">REM Local copy of m</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">FOR</span> a=m+<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">140</span> <span class=\"kw1\">LET</span> lm=FN m<span class=\"br0\">(</span>lm+k,a<span class=\"br0\">)</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">NEXT</span> a<br/><span class=\"nu0\">160</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">200</span> DEF FN m<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>=x-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>x/y<span class=\"br0\">)</span>*y: <span class=\"co3\">REM MOD function</span><br/>\u00a0</pre>"}]}