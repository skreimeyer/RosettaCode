{"task": "Left_factorials", "blocks": [{"lang": "ALGOL 68", "loc": 68, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># set the precision of LONG LONG INT - large enough for\u00a0!n up to\u00a0! 10 000 #</span><br/><span class=\"co2\">PR precision 36000 PR</span><br/><span class=\"coMULTI\"># stores left factorials in an array #</span><br/><span class=\"coMULTI\"># we calculate the left factorials, storing their values in the \"values\" array #</span><br/><span class=\"coMULTI\"># if step is &lt;= 1, we store we store every left factorial, otherwise we store\u00a0!x when x MOD step = 0 #</span><br/><span class=\"coMULTI\"># note this means values[ 0 ] is always\u00a0!0 #</span><br/><span class=\"kw4\">PROC</span> get left factorials <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> values<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> step <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">INT</span> store position        <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> values<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> max values            <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> values<span class=\"sy1\">;</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> result      <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> factorial k <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> 0<br/>         <span class=\"kw2\">WHILE</span><br/>             <span class=\"kw2\">IF</span> <span class=\"kw2\">IF</span> step <span class=\"sy1\">&lt;=</span> 1 <span class=\"kw2\">THEN</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">ELSE</span> k <span class=\"kw12\">MOD</span> step <span class=\"sy1\">=</span> 0 <span class=\"kw2\">FI</span> <span class=\"kw2\">THEN</span><br/>                 values<span class=\"br0\">[</span> store position <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>                 store position <span class=\"sy1\">+:=</span> 1<br/>             <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>             store position <span class=\"sy1\">&lt;=</span> max values<br/>         <span class=\"kw2\">DO</span><br/>             result      <span class=\"sy1\">+:=</span> factorial k<span class=\"sy1\">;</span><br/>             factorial k <span class=\"sy1\">*:=</span> <span class=\"br0\">(</span> k <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span><br/>         <span class=\"kw2\">OD</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># get left factorials #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the number of digits in n #</span><br/><span class=\"kw4\">OP</span> DIGITCOUNT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> v <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> v <span class=\"sy1\">&gt;</span> 100 000 000 <span class=\"kw2\">DO</span><br/>            result <span class=\"sy1\">+:=</span> 8<span class=\"sy1\">;</span><br/>            v <span class=\"kw17\">OVERAB</span> 100 000 000<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> v <span class=\"sy1\">&gt;</span> 10 <span class=\"kw2\">DO</span><br/>            result <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            v <span class=\"kw17\">OVERAB</span> 10<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>   <span class=\"kw2\">END</span> <span class=\"coMULTI\"># DIGITCOUNT #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"!n for n = 0(1)10\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> 0 <span class=\"sy1\">:</span> 10 <span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> v<span class=\"sy1\">;</span><br/>    get left factorials<span class=\"br0\">(</span> v<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> v <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> v<span class=\"br0\">[</span> i <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"!n for n = 20(10)110\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> 0 <span class=\"sy1\">:</span> 11 <span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> v<span class=\"sy1\">;</span><br/>    get left factorials<span class=\"br0\">(</span> v<span class=\"sy1\">,</span> 10 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> v <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> v<span class=\"br0\">[</span> i <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"digit counts of\u00a0!n for n = 1000(1000)10 000\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> 0 <span class=\"sy1\">:</span> 10 <span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> v<span class=\"sy1\">;</span><br/>    get left factorials<span class=\"br0\">(</span> v<span class=\"sy1\">,</span> 1 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> v <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> DIGITCOUNT v<span class=\"br0\">[</span> i <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 37, "block": "<pre class=\"text highlighted_source\">( ( leftFact<br/>  =   result factorial i<br/>    .   0:?result<br/>      &amp; 1:?factorial<br/>      &amp; 0:?i<br/>      &amp;   whl<br/>        ' (\u00a0!i+1:~&gt;!arg:?i<br/>          &amp;\u00a0!factorial+!result:?result<br/>          &amp;\u00a0!factorial*!i:?factorial<br/>          )<br/>      &amp;\u00a0!result<br/>  )<br/>&amp; ( iterate<br/>  =   from to step c fun<br/>    .  \u00a0!arg:(?from.?to.?step.?fun)<br/>      &amp;\u00a0!from+-1*!step:?from<br/>      &amp;\u00a0!step:?c<br/>      &amp;   whl<br/>        ' (\u00a0!step+!from:~&gt;!to:?from<br/>          &amp;\u00a0!fun$(leftFact$!from)<br/>          )<br/>      &amp; <br/>  )<br/>&amp; out$\"First 11 left factorials:\"<br/>&amp; iterate$(0.10.1.out)<br/>&amp; out$\"<br/>20 through 110 (inclusive) by tens:\"<br/>&amp; iterate$(20.110.10.out)<br/>&amp; out$\"<br/>Digits in 1,000 through 10,000 by thousands:\"<br/>&amp;   iterate<br/>  $ ( 1000<br/>    . 10000<br/>    . 1000<br/>    . (<a class=\"__cf_email__\" data-cfemail=\"f3cebfddb3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(!arg:? [?L)&amp;out$!L)<br/>    )<br/>)</pre>"}, {"lang": "C", "loc": 52, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> mpz_left_fac_ui<span class=\"br0\">(</span>mpz_t rop<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> op<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    mpz_t t1<span class=\"sy0\">;</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    mpz_set_ui<span class=\"br0\">(</span>rop<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> op<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mpz_add<span class=\"br0\">(</span>rop<span class=\"sy0\">,</span> rop<span class=\"sy0\">,</span> t1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>t1<span class=\"sy0\">,</span> t1<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    mpz_clear<span class=\"br0\">(</span>t1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> mpz_digitcount<span class=\"br0\">(</span>mpz_t op<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* mpz_sizeinbase can not be trusted to give accurate base 10 length */</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>t    <span class=\"sy0\">=</span> mpz_get_str<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> op<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> ret <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    mpz_t t<span class=\"sy0\">;</span><br/>    mpz_init<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">110</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            mpz_left_fac_ui<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            gmp_printf<span class=\"br0\">(</span><span class=\"st0\">\"!%u =\u00a0%Zd<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mpz_left_fac_ui<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"!%u has\u00a0%u digits<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> mpz_digitcount<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    mpz_clear<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 129, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co2\">#if 1 // optimized for 64-bit architecture</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> usingle<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> udouble<span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> word_len <span class=\"sy1\">=</span> <span class=\"nu0\">32</span><span class=\"sy4\">;</span><br/><span class=\"co2\">#else // optimized for 32-bit architecture</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span> usingle<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> udouble<span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> word_len <span class=\"sy1\">=</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw2\">class</span> bignum <span class=\"br0\">{</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"co1\">// rep_.size() == 0 if and only if the value is zero.</span><br/>    <span class=\"co1\">// Otherwise, the word rep_[0] keeps the least significant bits.</span><br/>    vector<span class=\"sy1\">&lt;</span>usingle<span class=\"sy1\">&gt;</span> rep_<span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">explicit</span> bignum<span class=\"br0\">(</span>usingle n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rep_.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> equals<span class=\"br0\">(</span>usingle n<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> rep_.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rep_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> rep_<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> n<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    bignum add<span class=\"br0\">(</span>usingle addend<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        bignum result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        udouble sum <span class=\"sy1\">=</span> addend<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> rep_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> rep_<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            result.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>sum <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>udouble<span class=\"br0\">)</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> word_len<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            sum <span class=\"sy1\">&gt;&gt;=</span> word_len<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> result.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"br0\">(</span>usingle<span class=\"br0\">)</span>sum<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    bignum add<span class=\"br0\">(</span><span class=\"kw4\">const</span> bignum<span class=\"sy3\">&amp;</span> addend<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        bignum result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        udouble sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">size_t</span> sz1 <span class=\"sy1\">=</span> rep_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">size_t</span> sz2 <span class=\"sy1\">=</span> addend.<span class=\"me1\">rep_</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> max<span class=\"br0\">(</span>sz1, sz2<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> sz1<span class=\"br0\">)</span> sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> rep_<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> sz2<span class=\"br0\">)</span> sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> addend.<span class=\"me1\">rep_</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            result.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>sum <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>udouble<span class=\"br0\">)</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> word_len<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            sum <span class=\"sy1\">&gt;&gt;=</span> word_len<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> result.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"br0\">(</span>usingle<span class=\"br0\">)</span>sum<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    bignum multiply<span class=\"br0\">(</span>usingle factor<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        bignum result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        udouble product <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> rep_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            product <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>udouble<span class=\"br0\">)</span>rep_<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">*</span> factor<span class=\"sy4\">;</span><br/>            result.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>product <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>udouble<span class=\"br0\">)</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> word_len<span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            product <span class=\"sy1\">&gt;&gt;=</span> word_len<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>product <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            result.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"br0\">(</span>usingle<span class=\"br0\">)</span>product<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> divide<span class=\"br0\">(</span>usingle divisor, bignum<span class=\"sy3\">&amp;</span> quotient, usingle<span class=\"sy3\">&amp;</span> remainder<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        quotient.<span class=\"me1\">rep_</span>.<span class=\"me1\">resize</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        udouble dividend <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        remainder <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> rep_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"sy2\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dividend <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>udouble<span class=\"br0\">)</span>remainder <span class=\"sy1\">&lt;&lt;</span> word_len<span class=\"br0\">)</span> <span class=\"sy2\">+</span> rep_<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            usingle quo <span class=\"sy1\">=</span> <span class=\"br0\">(</span>usingle<span class=\"br0\">)</span><span class=\"br0\">(</span>dividend <span class=\"sy2\">/</span> divisor<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            remainder <span class=\"sy1\">=</span> <span class=\"br0\">(</span>usingle<span class=\"br0\">)</span><span class=\"br0\">(</span>dividend <span class=\"sy2\">%</span> divisor<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>quo <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> i <span class=\"sy1\">&lt;</span> rep_.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                quotient.<span class=\"me1\">rep_</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>quo<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        reverse<span class=\"br0\">(</span>quotient.<span class=\"me1\">rep_</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, quotient.<span class=\"me1\">rep_</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>ostream<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">const</span> bignum<span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>ostream<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">const</span> bignum<span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    string rep<span class=\"sy4\">;</span><br/>    bignum dividend <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span><br/>    bignum quotient<span class=\"sy4\">;</span><br/>    usingle remainder<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dividend.<span class=\"me1\">divide</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, quotient, remainder<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        rep <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span> <span class=\"sy2\">+</span> remainder<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>quotient.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>        dividend <span class=\"sy1\">=</span> quotient<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    reverse<span class=\"br0\">(</span>rep.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, rep.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    os <span class=\"sy1\">&lt;&lt;</span> rep<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bignum lfact<span class=\"br0\">(</span>usingle n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>bignum lfact<span class=\"br0\">(</span>usingle n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    bignum result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    bignum f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>usingle k <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;=</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy1\">=</span> result.<span class=\"me1\">add</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        f <span class=\"sy1\">=</span> f.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>usingle i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"!\"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> lfact<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>usingle i <span class=\"sy1\">=</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">110</span><span class=\"sy4\">;</span> i <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"!\"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <span class=\"sy1\">&lt;&lt;</span> lfact<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>usingle i <span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"sy4\">;</span> i <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        stringstream ss<span class=\"sy4\">;</span><br/>        ss <span class=\"sy1\">&lt;&lt;</span> lfact<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"!\"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" has \"</span> <span class=\"sy1\">&lt;&lt;</span> ss.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" digits.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 54, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> LeftFactorial<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"!{0} = {1}\"</span>, i, LeftFactorial<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">110</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"!{0} = {1}\"</span>, j, LeftFactorial<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"!{0} has {1} digits\"</span>, k, LeftFactorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> BigInteger Factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            BigInteger accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> factor <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> factor <span class=\"sy0\">&lt;=</span> number<span class=\"sy0\">;</span> factor<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                accumulator <span class=\"sy0\">*=</span> factor<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> accumulator<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> BigInteger LeftFactorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            BigInteger result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                result <span class=\"sy0\">+=</span> Factorial<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 20, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns left-factorial<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn left-factorial <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Compute by updating the state [fact summ] for each k, where k equals 1 to n<br/>    Update is next state is [k*fact (summ+k)\"</span><br/>  <span class=\"br0\">(</span>second<br/>    <span class=\"br0\">(</span>reduce <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"br0\">[</span>fact summ<span class=\"br0\">]</span> k<span class=\"br0\">]</span><br/>              <span class=\"br0\">[</span><span class=\"br0\">(</span>*' fact k<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ summ fact<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>n <span class=\"br0\">(</span>range <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"!%-3d =\u00a0%5d\"</span> n <span class=\"br0\">(</span>left-factorial n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>n <span class=\"br0\">(</span>range <span class=\"nu0\">20</span> <span class=\"nu0\">111</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"!%-3d =\u00a0%5d\"</span> n <span class=\"br0\">(</span>biginteger <span class=\"br0\">(</span>left-factorial n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>n <span class=\"br0\">(</span>range <span class=\"nu0\">1000</span> <span class=\"nu0\">10001</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"!%-5d has\u00a0%5d digits\"</span> n <span class=\"br0\">(</span>count <span class=\"br0\">(</span>str <span class=\"br0\">(</span>biginteger <span class=\"br0\">(</span>left-factorial n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fact <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reduce #'* <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to n collect i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> left-fac <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reduce #'+ <span class=\"br0\">(</span>loop for i below n collect <span class=\"br0\">(</span>fact i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"0 -&gt; 10~&amp;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~&amp;\"</span> <span class=\"br0\">(</span>loop for i upto <span class=\"nu0\">10</span> collect <span class=\"br0\">(</span>left-fac i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"20 -&gt; 110 by 10~&amp;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~{~a~&amp;~}\"</span> <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">20</span> upto <span class=\"nu0\">110</span> by <span class=\"nu0\">10</span> collect <span class=\"br0\">(</span>left-fac i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"1000 -&gt; 10000 by 1000~&amp;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"~{~a digits~&amp;~}\"</span> <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1000</span> upto <span class=\"nu0\">10000</span> by <span class=\"nu0\">1000</span> collect <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~a\"</span> <span class=\"br0\">(</span>left-fac i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>BigInt leftFact<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    BigInt result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> factorial <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result <span class=\"sy0\">+=</span> factorial<span class=\"sy0\">;</span><br/>        factorial <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"First 11 left factorials:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>leftFact<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>20 through 110 (inclusive) by tens:<span class=\"es1\">\\n</span>%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span><br/>             iota<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">111</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>leftFact<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Digits in 1,000 through 10,000 by thousands:<span class=\"es1\">\\n</span>%s\"</span><span class=\"sy0\">,</span><br/>             iota<span class=\"br0\">(</span><span class=\"nu0\">1</span>_000<span class=\"sy0\">,</span> <span class=\"nu0\">10</span>_001<span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> i.<span class=\"me1\">leftFact</span>.<span class=\"me1\">text</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span><span class=\"sy0\">!</span>n n<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? n<span class=\"br0\">)</span>  <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"sy0\">!</span>n <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>remember '<span class=\"sy0\">!</span>n<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 20, "block": "<pre class=\"text highlighted_source\">defmodule LeftFactorial do<br/>  def calc(0), do: 0<br/>  def calc(n) do<br/>    {result, _factorial} = Enum.reduce(1..n, {0, 1}, fn i,{res, fact} -&gt;<br/>      {res + fact, fact * i}<br/>    end)<br/>    result<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(0..10, fn i -&gt;<br/>  IO.puts \"!#{i} = #{LeftFactorial.calc(i)}\"<br/>end)<br/>Enum.each(Enum.take_every(20..110, 10), fn i -&gt;<br/>  IO.puts \"!#{i} = #{LeftFactorial.calc(i)}\"<br/>end)<br/>Enum.each(Enum.take_every(1000..10000, 1000), fn i -&gt;<br/>  digits = LeftFactorial.calc(i) |&gt; to_char_list |&gt; length<br/>  IO.puts \"!#{i} has #{digits} digits\"<br/>end)</pre>"}, {"lang": "Factor", "loc": 26, "block": "<pre class=\"text highlighted_source\">USING: formatting fry io kernel math math.factorials<br/>math.functions math.parser math.ranges sequences\u00a0;<br/>IN: rosetta-code.left-factorials<br/>\u00a0<br/>: left-factorial ( n -- m ) iota [ n! ] map-sum\u00a0;<br/>\u00a0<br/>: print-left-factorials ( seq quot -- )<br/>    '[<br/>        dup left-factorial @<br/>        [ number&gt;string \"!\" prepend ] dip<br/>        \"%6s  \u00a0%-6d\\n\" printf<br/>    ] each nl\u00a0; inline<br/>\u00a0<br/>: digit-count ( n -- count ) log10 floor &gt;integer 1 +\u00a0;<br/>\u00a0<br/>: part1 ( -- ) 11 iota [ ] print-left-factorials\u00a0;<br/>\u00a0<br/>: part2 ( -- ) 20 110 10 &lt;range&gt; [ ] print-left-factorials\u00a0;<br/>\u00a0<br/>: part3 ( -- ) \"Number of digits for\" print<br/>    1,000 10,000 1,000 &lt;range&gt;<br/>    [ digit-count ] print-left-factorials\u00a0;<br/>\u00a0<br/>: main ( -- ) part1 part2 part3\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Forth", "loc": 48, "block": "<pre class=\"text highlighted_source\">36000 CONSTANT #DIGITS  \\ Enough for\u00a0!10000<br/>CREATE S #DIGITS ALLOT  S #DIGITS ERASE  VARIABLE S#<br/>CREATE F #DIGITS ALLOT  F #DIGITS ERASE  VARIABLE F#<br/>1 F C!  1 F#\u00a0!  \\ F = 1 = 0! <br/>\u00a0<br/>\\ \"Bignums\": represented by two cells on the stack:<br/>\\ 1) An address pointing to the least-significant unit<br/>\\ 2) An integer size representing the number of character-size units<br/>: mod/   /mod swap\u00a0;<br/>: B+ ( addr u addr' u' -- u'')  \\ Add the second \"bignum\" into the first<br/>   over + &gt;R  -rot over + &gt;R ( addr' addr R:end' R:end)<br/>   swap &gt;R 0 over R&gt;  ( addr 0 addr addr' R:end' R:end)<br/>   \\ 0: Assume second has equal or more digits, as in our problem<br/>   BEGIN over <a class=\"__cf_email__\" data-cfemail=\"316371\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; WHILE  \\ 1: add all digits from S<br/>     dup &gt;R <a class=\"__cf_email__\" data-cfemail=\"236063\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> swap dup &gt;R <a class=\"__cf_email__\" data-cfemail=\"6f2c2f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ( addr c a a' R:end' R:end R:addr'* R:addr*)<br/>     + +  10 mod/ <a class=\"__cf_email__\" data-cfemail=\"cc9e8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> C!  R&gt; 1+ R&gt; 1+<br/>   REPEAT R&gt; drop  ( addr c addr* addr'* R:end')<br/>   BEGIN dup <a class=\"__cf_email__\" data-cfemail=\"590b19\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; WHILE   \\ 2: add any remaining digits from F<br/>     dup &gt;R <a class=\"__cf_email__\" data-cfemail=\"acefec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> swap &gt;R        ( addr c a' R:end' R:addr'* R:addr*)<br/>     +    10 mod/ <a class=\"__cf_email__\" data-cfemail=\"fdafbd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> C!  R&gt; 1+ R&gt; 1+<br/>   REPEAT R&gt; drop drop  ( addr c addr*)<br/>   BEGIN over WHILE       \\ 3: add any carry digits<br/>     &gt;R 10 mod/ ( addr m d R:addr*) <a class=\"__cf_email__\" data-cfemail=\"97c5d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> C! R&gt; 1+<br/>   REPEAT  rot - nip\u00a0;  \\ calculate travel distance, discard 0 carry<br/>: B* ( addr u u' -- u'')  \\ Multiply \"bignum\" inplace by U' <br/>   0 2swap over &gt;R dup &gt;R bounds  ( u' 0 addr+u addr R:addr R:u)<br/>   DO ( u' c) over I <a class=\"__cf_email__\" data-cfemail=\"b3f0f3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * +  10 mod/ I C! LOOP<br/>   nip R&gt; BEGIN ( c u) over WHILE  \\ insert carry, may have multiple digits<br/>     &gt;R  10 mod/  <a class=\"__cf_email__\" data-cfemail=\"9eccde\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> swap R&gt; <a class=\"__cf_email__\" data-cfemail=\"4e1c0e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + ( m u d addr+u R:addr) C!  1+<br/>   REPEAT  nip R&gt; ( u'' addr) drop\u00a0;<br/>: .B ( addr u)  over +  BEGIN 1-  \\ print bignum<br/>     dup <a class=\"__cf_email__\" data-cfemail=\"9fdcdf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [char] 0 + EMIT  over over &gt;=<br/>   UNTIL  drop drop\u00a0;<br/>: .!n   0 &lt;# #s [char]\u00a0! hold #&gt; 6 over - spaces type space\u00a0; <br/>: REPORT ( n)<br/>   dup 10 &lt;=  over dup  20 111 within  swap 10 mod 0= and or<br/>   IF .!n [char] = emit space S S# @ .B cr<br/>   ELSE dup 1000 mod 0=<br/>     IF .!n .\" has \" S# @ . .\" digits\" cr<br/>     ELSE drop THEN<br/>   THEN\u00a0;<br/>: GO   0 REPORT<br/>   1 BEGIN dup 10000 &lt;=<br/>   WHILE<br/>     S S# @  F F# @      B+ S#\u00a0!<br/>     dup REPORT<br/>     dup     F F# @  rot B* F#\u00a0!<br/>   1+ REPEAT  drop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 38, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> LAIROTCAF\t<span class=\"co1\">!Calculates \"left factorials\".</span><br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!The usual suspects.</span><br/>        <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> <span class=\"kw1\">FUNCTION</span> FACT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Factorial, the ordinary.</span><br/>         <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!The number won't ever get far.</span><br/>         <span class=\"kw3\">INTEGER</span> I\t<span class=\"co1\">!The stepper.</span><br/>          FACT <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Here we go.</span><br/>          <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>,N\t\t<span class=\"co1\">!Does nothing for N &lt; 2.</span><br/>            FACT <span class=\"sy0\">=</span> FACT<span class=\"sy0\">*</span>I\t\t<span class=\"co1\">!Perhaps this overflows.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>FACT.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Factorial: Overflow!\"</span>\t<span class=\"co1\">!Two's complement arithmetic.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!No longer any IF OVERFLOW tests.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> FACT\t<span class=\"co1\">!Simple enough.</span><br/>\u00a0<br/>        <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> <span class=\"kw1\">FUNCTION</span> LFACT<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Left factorial.</span><br/>         <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!This number won't get far either.</span><br/>         <span class=\"kw3\">INTEGER</span> K\t<span class=\"co1\">!A stepper.</span><br/>          LFACT <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t<span class=\"co1\">!Here we go.</span><br/>          <span class=\"kw1\">DO</span> K <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Apply the definition.</span><br/>            LFACT <span class=\"sy0\">=</span> LFACT <span class=\"sy0\">+</span> FACT<span class=\"br0\">(</span>K<span class=\"br0\">)</span>\t<span class=\"co1\">!Perhaps this overflows.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LFACT.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Lfact: Overflow!\"</span>\t<span class=\"co1\">!Unreliable test.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next step in the summation.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> LFACT\t<span class=\"co1\">!No attempts at saving effort.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> LAIROTCAF\t<span class=\"co1\">!Just the minimum.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>      <span class=\"kw3\">USE</span> LAIROTCAF<br/>      <span class=\"kw3\">INTEGER</span> I<br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Left factorials, from 0 to 10...\"</span><br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">10</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> I,LFACT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>    <span class=\"nu0\">1</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"!\"</span>,I0,T6,I0<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Left factorials, from 20 to 110 by tens...\"</span><br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">20</span>,<span class=\"nu0\">110</span>,<span class=\"nu0\">10</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> I,LFACT<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 43, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#include \"gmp.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> leftFactorial<span class=\"br0\">(</span>rop <span class=\"kw1\">As</span> __mpz_struct, op <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> __mpz_struct t1<br/>  mpz_init_set_ui<span class=\"br0\">(</span>@t1, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  mpz_set_ui<span class=\"br0\">(</span>@rop, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> ULong = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> op<br/>    mpz_add<span class=\"br0\">(</span>@rop, @rop, @t1<span class=\"br0\">)</span><br/>    mpz_mul_ui<span class=\"br0\">(</span>@t1, @t1, i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  mpz_clear<span class=\"br0\">(</span>@t1<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> digitCount<span class=\"br0\">(</span>op <span class=\"kw1\">As</span> __mpz_struct<span class=\"br0\">)</span> <span class=\"kw1\">As</span> ULong<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> <span class=\"kw1\">Ptr</span> t = mpz_get_str<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">10</span>, @op<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong ret = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>*t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Deallocate</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> ret<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> __mpz_struct t<br/>mpz_init<span class=\"br0\">(</span>@t<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> ULong = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">110</span><br/>  <span class=\"kw1\">If</span> i &lt;= <span class=\"nu0\">10</span> OrElse i <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    leftFactorial<span class=\"br0\">(</span>t, i<span class=\"br0\">)</span><br/>    gmp_printf<span class=\"br0\">(</span>!<span class=\"st0\">\"!%u =\u00a0%Zd<span class=\"es0\">\\n</span>\"</span>, i, @t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> ULong = <span class=\"nu0\">1000</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10000</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">1000</span><br/>  leftFactorial<span class=\"br0\">(</span>t, i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"!\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" has \"</span>; digitCount<span class=\"br0\">(</span>t<span class=\"br0\">)</span>; <span class=\"st0\">\" digits\"</span> <br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>mpz_clear<span class=\"br0\">(</span>@t<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 45, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"!0 through\u00a0!10: 0\"</span><span class=\"sy1\">)</span><br/>    one <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    n <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    f <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    l <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    next <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span> f<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> n<span class=\"sy1\">);</span> l<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>l<span class=\"sy1\">,</span> f<span class=\"sy1\">);</span> n<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> one<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> <span class=\"sy1\">;</span> next<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> l<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>Int64<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            next<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"!%d:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> l<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>Int64<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> <span class=\"nu0\">110</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Lengths of\u00a0!1000 through\u00a0!10000 by thousands:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">110</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">1000</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        next<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>l<span class=\"sy3\">.</span>String<span class=\"sy1\">()))</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>Int64<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> <span class=\"nu0\">10000</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">1000</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            next<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 20, "block": "<pre class=\"haskell highlighted_source\">fact <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>fact <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl\"><span class=\"kw3\">scanl</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>leftFact <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>leftFact <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl\"><span class=\"kw3\">scanl</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> fact<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"0 ~ 10:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span>leftFact <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"20 ~ 110 by tens:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>leftFact <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span> <span class=\"sy0\">..</span> <span class=\"nu0\">110</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"length of 1,000 ~ 10,000 by thousands:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>leftFact <span class=\"sy0\">!!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"nu0\">2000</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 16, "block": "<pre class=\"text highlighted_source\">procedure main()<br/>    every writes(lfact(0 |\u00a0!10),\" \")<br/>    write()<br/>    write()<br/>    every write(lfact(20 to 110 by 10))<br/>    write()<br/>    every writes(*lfact(1000 to 10000 by 1000),\" \")<br/>    write()<br/>end<br/>\u00a0<br/>procedure lfact(n)<br/>    r\u00a0:= 0<br/>    f\u00a0:= 1<br/>    every (i\u00a0:=\u00a0!n, r +:= .f, f *:= .i)<br/>    return r<br/>end</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">leftFact=: +/@:<a class=\"__cf_email__\" data-cfemail=\"517011387f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> LeftFac<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> factorial<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> ans <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> x <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span> x.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">=</span> x.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tans <span class=\"sy0\">=</span> ans.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> leftFact<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> ans <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> k <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"sy0\">;</span> k.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>n.<span class=\"me1\">subtract</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">=</span> k.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tans <span class=\"sy0\">=</span> ans.<span class=\"me1\">add</span><span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">+</span> leftFact<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">110</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">+</span> leftFact<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\" has \"</span> <span class=\"sy0\">+</span> leftFact<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" digits\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">def left_factorial:<br/>  reduce range(1; .+1) as $i<br/>  # state: [i!,\u00a0!i]<br/>    ([1,0]; .[1] += .[0] | .[0] *= $i)<br/>  | .[1];</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">leftfactorial(n::Integer) = n \u2264 0\u00a0? zero(n)\u00a0: sum(factorial, 0:n-1)<br/>\u00a0<br/>@show leftfactorial.(0:10)<br/>@show ndigits.(leftfactorial.(big.(1000:1000:10_000)))</pre>"}, {"lang": "Kotlin", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>fun leftFactorial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInteger <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> BigInteger.<span class=\"me1\">ZERO</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> fact <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ONE</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> fact<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        fact <span class=\"sy0\">*=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sum +<span class=\"sy0\">=</span> fact<br/>    <span class=\"br0\">}</span>        <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">110</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> || <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"!${i.toString().padEnd(3)} = ${leftFactorial(i)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Length of the following left factorials:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1000</span>..<span class=\"nu0\">10000</span> step <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"!${i.toString().padEnd(5)} has ${leftFactorial(i).toString().length} digits\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 28, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Lua bindings for GNU bc</span><br/><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"bc\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Return table of factorials from 0 to n</span><br/><span class=\"kw1\">function</span> facsUpTo <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> f<span class=\"sy0\">,</span> fList <span class=\"sy0\">=</span> bc<span class=\"sy0\">.</span>number<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    fList<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>        f <span class=\"sy0\">=</span> bc<span class=\"sy0\">.</span>mul<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>        fList<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> fList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return left factorial of n</span><br/><span class=\"kw1\">function</span> leftFac <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> bc<span class=\"sy0\">.</span>number<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> sum <span class=\"sy0\">=</span> bc<span class=\"sy0\">.</span>add<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> facList<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> bc<span class=\"sy0\">.</span><span class=\"kw3\">tostring</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/>facList <span class=\"sy0\">=</span> facsUpTo<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span> <span class=\"sy0\">..</span> i <span class=\"sy0\">..</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">..</span> leftFac<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">110</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span> <span class=\"sy0\">..</span> i <span class=\"sy0\">..</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">..</span> leftFac<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span> <span class=\"sy0\">..</span> i <span class=\"sy0\">..</span> <span class=\"st0\">\" contains \"</span> <span class=\"sy0\">..</span> <span class=\"sy0\">#</span>leftFac<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" digits\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">left[n_]\u00a0:= left[n] = Sum[k!, {k, 0, n - 1}]<br/>Print[\"left factorials 0 through 10:\"]<br/>Print[left /@ Range[0, 10] // TableForm]<br/>Print[\"left factorials 20 through 110, by tens:\"]<br/>Print[left /@ Range[20, 110, 10] // TableForm]<br/>Print[\"Digits in left factorials 1,000 through 10,000, by thousands:\"]<br/>Print[Length[IntegerDigits[left[#]]] &amp; /@ Range[1000, 10000, 1000] // TableForm]</pre>"}, {"lang": "Nim", "loc": 26, "block": "<pre class=\"text highlighted_source\">import iterutils, bigints<br/>\u00a0<br/>proc lfact: iterator: BigInt =<br/>  result = iterator: BigInt =<br/>    yield 0.initBigInt<br/>    var<br/>      fact = 1.initBigInt<br/>      sum = 0.initBigInt<br/>      n = 1.initBigInt<br/>    while true:<br/>      sum += fact<br/>      fact *= n<br/>      n += 1<br/>      yield sum<br/>\u00a0<br/>echo \"first 11:\\n  \"<br/>for i in lfact().slice(last = 10):<br/>  echo \"  \", i<br/>\u00a0<br/>echo \"20 through 110 (inclusive) by tens:\"<br/>for i in lfact().slice(20, 110, 10):<br/>  echo \"  \", i<br/>\u00a0<br/>echo \"Digits in 1,000 through 10,000 (inclusive) by thousands:\"<br/>for i in lfact().slice(1_000, 10_000, 1_000):<br/>  echo \"  \", ($i).len</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: leftFact  | i | 0 1 rot loop: i [ tuck + swap i * ] drop\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">lf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>k<span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>lf<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">0</span>..<span class=\"nu1\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>lf<span class=\"sy0\">,</span> <span class=\"nu1\">10</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"nu1\">2</span>..<span class=\"nu1\">11</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">forstep</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1000</span><span class=\"sy0\">,</span><span class=\"nu2\">1e4</span><span class=\"sy0\">,</span><span class=\"nu1\">1000</span><span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span>#digits<span class=\"br0\">(</span>lf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 25, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> <span class=\"nu0\">5.010</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> leftfact <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\tstate <span class=\"re0\">$cached</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tstate <span class=\"re0\">$factorial</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tstate <span class=\"re0\">$leftfact</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$cached</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$cached</span><span class=\"sy0\">,</span> <span class=\"re0\">$factorial</span><span class=\"sy0\">,</span> <span class=\"re0\">$leftfact</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$cached</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$leftfact</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$factorial</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$factorial</span> <span class=\"sy0\">*=</span> <span class=\"sy0\">++</span><span class=\"re0\">$cached</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$leftfact</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"!%d =\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> leftfact<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">11</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"!%d has\u00a0%d digits.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> leftfact<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"co5\">$_</span><span class=\"sy0\">*</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> postfix<span class=\"sy0\">:&lt;!&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> postfix<span class=\"sy0\">:&lt;!&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> prefix<span class=\"sy0\">:&lt;!&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">multi</span> <span class=\"kw2\">sub</span> prefix<span class=\"sy0\">:&lt;!&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$_</span><span class=\"sy0\">!</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"!%d  =\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"sy0\">!</span><span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"sy0\">|^</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span> <span class=\"sy0\">...</span> <span class=\"nu0\">110</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"!%d has\u00a0%d digits.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">2000</span> <span class=\"sy0\">...</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 32, "block": "<pre class=\"text highlighted_source\">include builtins\\bigatom.e<br/>\u00a0<br/>sequence lf_list<br/>\u00a0<br/>procedure init(integer n)<br/>bigatom f = ba_new(1)<br/>atom t1 = time()+1<br/>    lf_list = repeat(f,n+1)<br/>    for i=1 to n do<br/>        f = ba_multiply(f,i)<br/>        lf_list[i+1] = f<br/>        if time()&gt;t1 then<br/>            printf(1,\"loading main table (%d of\u00a0%d)...\\n\",{i,n})<br/>            t1 = time()+1<br/>        end if<br/>    end for<br/>end procedure<br/>\u00a0<br/>function lf(integer n)<br/>-- Returns left factorial of n, as a string<br/>bigatom sumf = ba_new(0)<br/>    for k=0 to n-1 do sumf = ba_add(sumf, lf_list[k+1]) end for<br/>    return ba_sprint(sumf)<br/>end function<br/>\u00a0<br/>-- Main procedure<br/>atom t0 = time()<br/>init(10000)<br/>for i=0 to 10 do printf(1,\"!%d =\u00a0%s\\n\",{i,lf(i)}) end for<br/>for i=20 to 110 by 10 do printf(1,\"!%d =\u00a0%s\\n\",{i,lf(i)}) end for<br/>for i=1000 to 10000 by 1000 do printf(1,\"!%d contains\u00a0%d digits\\n\",{i,length(lf(i))}) end for<br/>printf(1,\"complete (%3.2fs)\\n\",{time()-t0})</pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(de n! (N)<br/>       (cache '(NIL) N<br/>          (if (&gt; 2 N) 1<br/>\t      (* N (n! (dec N))))))<br/>\u00a0<br/>(de\u00a0!n (Num)<br/>  (if (= Num 0) 1<br/>      (sum n! (range 0 (dec Num)))))<br/>\u00a0<br/>(de pril (List) (mapcar 'println List))<br/>\u00a0<br/>(prinl \"0-10\")<br/>(pril (mapcar '!n (range 0 10)))<br/>(prinl \"20 - 110\")<br/>(pril (mapcar '!n (range 20 110 10)))<br/>(prinl \"length of 1000 - 10000\")<br/>(pril (mapcar 'length (mapcar '!n (range 1000 10000 1000))))<br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"pli highlighted_source\">lf<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">0</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> i <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>         f <span class=\"sy0\">=</span> f <span class=\"sy0\">*</span> j<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> f<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> lf<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span> <span class=\"kw1\">to</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Left factorial of '</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">||</span> <span class=\"st0\">'='</span> <span class=\"sy0\">||</span> lf<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> left_factorials<span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 28, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> left<span class=\"sy0\">-</span>factorial <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Zero<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::One<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"re0\">$lfact</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Zero<span class=\"br0\">)</span><br/>    <span class=\"kw3\">while</span><span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span>        <br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"kw4\">-gt</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Zero<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Multiply<span class=\"br0\">(</span><span class=\"re0\">$fact</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$lfact</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Add<span class=\"br0\">(</span><span class=\"re0\">$lfact</span><span class=\"sy0\">,</span> <span class=\"re0\">$fact</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$lfact</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::One<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Add<span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::One<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$lfact</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">0</span>..<span class=\"nu0\">9</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>    <span class=\"st0\">\"!$_ = $(left-factorial $_)\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"nu0\">110</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"!$i = $(left-factorial $i)\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"nu0\">10000</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$digits</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span>::Log10<span class=\"br0\">(</span>$<span class=\"br0\">(</span>left<span class=\"sy0\">-</span>factorial <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"re0\">$digits</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"re0\">$digits</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$digits</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"st0\">\"!$i has $digits digits\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"st0\">\"!$i has $digits digit\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 15, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> islice<br/>\u00a0<br/><span class=\"kw1\">def</span> lfact<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> <span class=\"nu0\">0</span><br/>    fact<span class=\"sy0\">,</span> summ<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>:<br/>        fact<span class=\"sy0\">,</span> summ<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> fact*n<span class=\"sy0\">,</span> summ + fact<span class=\"sy0\">,</span> n + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">yield</span> summ<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'first 11:<span class=\"es0\">\\n</span> \u00a0%r'</span>\u00a0% <span class=\"br0\">[</span>lf <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> lf <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> lfact<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'20 through 110 (inclusive) by tens:'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> lf <span class=\"kw1\">in</span> islice<span class=\"br0\">(</span>lfact<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">111</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>lf<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Digits in 1,000 through 10,000 (inclusive) by thousands:<span class=\"es0\">\\n</span> \u00a0%r'</span> <br/>     \u00a0% <span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>lf<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> lf <span class=\"kw1\">in</span> islice<span class=\"br0\">(</span>lfact<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10001</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define\u00a0! (let ((rv# (make-hash))) (\u03bb (n) (hash-ref! rv# n (\u03bb () (if (= n 0) 1 (* n (! (- n 1)))))))))<br/>\u00a0<br/>(define (!n n)<br/> \u00a0;; note that in-range n is from 0 to n-1 inclusive<br/>  (for/sum ((k (in-range n))) (! k)))<br/>\u00a0<br/>(define (dnl. s) (for-each displayln s))<br/>(dnl<br/>  \"Display the left factorials for:\"<br/>  \"zero through ten (inclusive)\"<br/>  (pretty-format (for/list ((i (in-range 0 (add1 10)))) (!n i)))<br/>  \"20 through 110 (inclusive) by tens\"<br/>  (pretty-format (for/list ((i (in-range 20 (add1 110) 10))) (!n i)))<br/>  \"Display the length (in decimal digits) of the left factorials for:\"<br/>  \"1,000, 2,000 through 10,000 (inclusive), by thousands.\"<br/>  (pretty-format (for/list ((i (in-range 1000 10001 1000))) (add1 (order-of-magnitude (!n i))))))</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  computes/display the  left factorial  (or its width) of  N  (or range). */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> bot top inc <span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*obtain optional argumenst from the CL*/</span><br/><span class=\"kw1\">if</span> bot==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> bot==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> bot=  <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*Not specified:  Then use the default.*/</span><br/><span class=\"kw1\">if</span> top==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> top==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> top=bot              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> inc=<span class=\"st0\">''</span>  <span class=\"sy0\">|</span> inc==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> inc=  <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>tellDigs= <span class=\"br0\">(</span>bot<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>                                <span class=\"coMULTI\">/*if BOT &lt; 0,   only show # of digits. */</span><br/>bot=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>bot<span class=\"br0\">)</span>                                     <span class=\"coMULTI\">/*use the  \u2502bot\u2502  for the   DO   loop. */</span><br/>@= <span class=\"st0\">'left\u00a0! of '</span>                                  <span class=\"coMULTI\">/*a handy literal used in the display. */</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>H<span class=\"br0\">)</span>                                      <span class=\"coMULTI\">/*width of the largest number request. */</span><br/>               <span class=\"kw1\">do</span> j=bot  <span class=\"kw2\">to</span> top  <span class=\"kw2\">by</span> inc          <span class=\"coMULTI\">/*traipse through the numbers requested*/</span><br/>               <span class=\"kw1\">if</span> tellDigs  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> @ <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,w<span class=\"br0\">)</span>   <span class=\"st0\">\" \u2500\u2500\u2500\u25ba \"</span>   <span class=\"kw6\">length</span><span class=\"br0\">(</span>L!<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"st0\">' digits'</span><br/>                            <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> @ <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,w<span class=\"br0\">)</span>   <span class=\"st0\">\" \u2500\u2500\u2500\u25ba \"</span>          L!<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                       <span class=\"coMULTI\">/* [\u2191]  show either  L!  or # of digits*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>L!: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> x;  s=<span class=\"nu0\">4</span>        <span class=\"coMULTI\">/*some shortcuts.     */</span><br/>!=<span class=\"nu0\">2</span>;     <span class=\"kw1\">do</span> f=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> x-<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/*compute  L!  for all numbers \u2500\u2500\u2500 \u25ba X.*/</span><br/>        \u00a0!=!<span class=\"sy0\">*</span>f                                   <span class=\"coMULTI\">/*compute intermediate factorial.      */</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>,!<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">1.5</span>%1       <span class=\"coMULTI\">/*bump decimal digits.*/</span><br/>         s=s+!                                   <span class=\"coMULTI\">/*add the factorial \u2500\u2500\u2500\u25ba  L!  sum.     */</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*f*/</span>                             <span class=\"coMULTI\">/* [\u2191]  handles gihugeic numbers.      */</span><br/><span class=\"kw1\">return</span> s                                         <span class=\"coMULTI\">/*return the sum  (L!)  to the invoker.*/</span></pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = leftFact(0,10,1)<br/>see \"\" + a + nl<br/>\u00a0<br/>func leftFact f,t,s<br/>     see \"------ From \" + f + \" --To -&gt; \" + t +\" Step \" + s + \" -------\" + nl<br/>     for i = f to t step s<br/>         leftFact = 1<br/>         fct = 1<br/>         for j = 1 to i - 1<br/>             fct = fct * j<br/>             leftFact = leftFact + fct<br/>         next<br/>         if i &gt;= 1000 see \"\" + i + \" \" + len(string(leftFact)) + \" digits\" + nl<br/>         else see \"\" + i + \" \" + leftFact + nl ok<br/>     next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">left_fact = Enumerator.<span class=\"me1\">new</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>  f, lf = <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><br/>  <span class=\"nu0\">1</span>.<span class=\"me1\">step</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    y  <span class=\"sy0\">&lt;&lt;</span> lf <span class=\"co1\">#yield left_factorial</span><br/>    lf <span class=\"sy0\">+</span>= f<br/>    f  <span class=\"sy0\">*</span>= n<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">a = lftFct(0,10,1)<br/>a = lftFct(20,110,10)<br/>a = lftFct(1000,10000,1000)<br/>\u00a0<br/>function lftFct(f,t,s)<br/>print\u00a0:print \"------ From \";f;\" --To-&gt; \";t;\" Step \";s;\" -------\"<br/>for i = f to t step s<br/>\tlftFct\t= 1<br/>\tfct\t= 1<br/>\tfor j = 1 to i-1<br/>\t\tfct\t= fct * j<br/>\t\tlftFct\t= lftFct + fct<br/>\tnext j<br/>\tif i &gt;= 1000 then<br/>\t\tprint i;\" \";len(str$(lftFct));\" \"digits\"<br/>\t  else <br/>\t\tprint i;\" \";lftFct<br/>\tend if<br/>next i<br/>end function</pre>"}, {"lang": "Rust", "loc": 125, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#[cfg(target_pointer_width = \"64\")]<br/>type USingle = u32;<br/>#[cfg(target_pointer_width = \"64\")]<br/>type UDouble = u64;<br/>#[cfg(target_pointer_width = \"64\")]<br/>const WORD_LEN: i32 = 32;<br/>\u00a0<br/>#[cfg(not(target_pointer_width = \"64\"))]<br/>type USingle = u16;<br/>#[cfg(not(target_pointer_width = \"64\"))]<br/>type UDouble = u32;<br/>#[cfg(not(target_pointer_width = \"64\"))]<br/>const WORD_LEN: i32 = 16;<br/>\u00a0<br/>use std::cmp;<br/>\u00a0<br/>#[derive(Debug,Clone)]<br/>struct BigNum {<br/>    // rep_.size() == 0 if and only if the value is zero.<br/>    // Otherwise, the word rep_[0] keeps the least significant bits.<br/>    rep_: Vec&lt;USingle&gt;,<br/>}<br/>\u00a0<br/>impl BigNum {<br/>    pub fn new(n: USingle) -&gt; BigNum {<br/>        let mut result = BigNum { rep_: vec![] };<br/>        if n &gt; 0 { result.rep_.push(n); }<br/>        result<br/>    }<br/>    pub fn equals(&amp;self, n: USingle) -&gt; bool {<br/>        if n == 0 { return self.rep_.is_empty() }<br/>        if self.rep_.len() &gt; 1 { return false }<br/>        self.rep_[0] == n<br/>    }<br/>    pub fn add_big(&amp;self, addend: &amp;BigNum) -&gt; BigNum {<br/>        let mut result = BigNum::new(0);<br/>        let mut sum = 0 as UDouble;<br/>        let sz1 = self.rep_.len();<br/>        let sz2 = addend.rep_.len();<br/>        for i in 0..cmp::max(sz1, sz2) {<br/>            if i &lt; sz1 { sum += self.rep_[i] as UDouble }<br/>            if i &lt; sz2 { sum += addend.rep_[i] as UDouble }<br/>            result.rep_.push(sum as USingle);<br/>            sum &gt;&gt;= WORD_LEN;<br/>        }<br/>        if sum &gt; 0 { result.rep_.push(sum as USingle) }<br/>        result<br/>    }<br/>    pub fn multiply(&amp;self, factor: USingle) -&gt; BigNum {<br/>        let mut result = BigNum::new(0);<br/>        let mut product = 0 as UDouble;<br/>        for i in 0..self.rep_.len() {<br/>            product += self.rep_[i] as UDouble * factor as UDouble;<br/>            result.rep_.push(product as USingle);<br/>            product &gt;&gt;= WORD_LEN;<br/>        }<br/>        if product &gt; 0 {<br/>            result.rep_.push(product as USingle);<br/>        }<br/>        result<br/>    }<br/>    pub fn divide(&amp;self, divisor: USingle, quotient: &amp;mut BigNum,<br/>        remainder: &amp;mut USingle) {<br/>        quotient.rep_.truncate(0);<br/>        let mut dividend: UDouble;<br/>        *remainder = 0;<br/>        for i in 0..self.rep_.len() {<br/>            let j = self.rep_.len() - 1 - i;<br/>            dividend = ((*remainder as UDouble) &lt;&lt; WORD_LEN)<br/>                + self.rep_[j] as UDouble;<br/>            let quo = (dividend / divisor as UDouble) as USingle;<br/>            *remainder = (dividend\u00a0% divisor as UDouble) as USingle;<br/>            if quo &gt; 0 || j &lt; self.rep_.len() - 1 {<br/>                quotient.rep_.push(quo);<br/>            }<br/>        }<br/>        quotient.rep_.reverse();<br/>    }<br/>    fn to_string(&amp;self) -&gt; String {<br/>        let mut rep = String::new();<br/>        let mut dividend = (*self).clone();<br/>        let mut remainder = 0 as USingle;<br/>        let mut quotient = BigNum::new(0);<br/>        loop {<br/>            dividend.divide(10, &amp;mut quotient, &amp;mut remainder);<br/>            rep.push(('0' as USingle + remainder) as u8 as char);<br/>            if quotient.equals(0) { break; }<br/>            dividend = quotient.clone();<br/>        }<br/>        rep.chars().rev().collect::&lt;String&gt;()<br/>    }<br/>}<br/>\u00a0<br/>use std::fmt;<br/>impl fmt::Display for BigNum {<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        write!(f, \"{}\", self.to_string())<br/>    }<br/>}<br/>\u00a0<br/>fn lfact(n: USingle) -&gt; BigNum {<br/>    let mut result = BigNum::new(0);<br/>    let mut f = BigNum::new(1);<br/>    for k in 1 as USingle..n + 1 {<br/>        result = result.add_big(&amp;f);<br/>        f = f.multiply(k);<br/>    }<br/>    result<br/>}<br/>\u00a0<br/>fn main() {<br/>    for i in 0..11 {<br/>        println!(\"!{} = {}\", i, lfact(i));<br/>    }<br/>    for i in 2..12 {<br/>        let j = i * 10;<br/>        println!(\"!{} = {}\", j, lfact(j));<br/>    }<br/>    for i in 1..11 {<br/>        let j = i * 1000;<br/>        println!(\"!{} has {} digits.\", j, lfact(j).to_string().len());<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LeftFactorial <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\">// this part isn't really necessary, it just shows off Scala's ability</span><br/>  <span class=\"co1\">// to match the mathematical syntax:\u00a0!n</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RichInt<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> unary<span class=\"sy0\">_!</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> factorial.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">sum</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factorial<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">#::</span> factorial.<span class=\"me1\">zip</span><span class=\"br0\">(</span>Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n.<span class=\"sy0\">_</span>2 <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n.<span class=\"sy0\">_</span>2 - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span> ++<br/>            <span class=\"br0\">(</span><span class=\"nu0\">20</span> to <span class=\"nu0\">110</span> by <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       value <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"!${n} = ${value}\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1000</span> to <span class=\"nu0\">10000</span> by <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>       length <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span>.<span class=\"me1\">toString</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"length\u00a0!${n} = ${length}\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 29, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span>     <span class=\"co1\">;; library imports in R7RS style</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span> lists<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>fold <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>iota n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>factorial n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>fold <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> factorial <span class=\"br0\">(</span>iota n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>show i r<span class=\"br0\">)</span> <span class=\"co1\">; to pretty print the results</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"!\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; show left factorials for zero through ten (inclusive)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>show i <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>factorial i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>iota <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; show left factorials for 20 through 110 (inclusive) by tens</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>show i <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>factorial i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>iota <span class=\"nu0\">10</span> <span class=\"nu0\">20</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; number of digits in 1000 through 10000 by thousands:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>show i <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>factorial i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>iota <span class=\"nu0\">10</span> <span class=\"nu0\">1000</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 36, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func bigInteger: leftFact (in integer: n) is func<br/>  result<br/>    var bigInteger: leftFact is 0_;<br/>  local<br/>    var bigInteger: factorial is 1_;<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 1 to n do<br/>      leftFact +:= factorial;<br/>      factorial *:= bigInteger conv i;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: n is 0;<br/>  begin<br/>    writeln(\"First 11 left factorials:\");<br/>    for n range 0 to 10 do<br/>      write(\" \" &lt;&amp; leftFact(n));<br/>    end for;<br/>    writeln;<br/>    writeln(\"20 through 110 (inclusive) by tens:\");<br/>    for n range 20 to 110 step 10 do<br/>      writeln(leftFact(n));<br/>    end for;<br/>    writeln;<br/>    writeln(\"Digits in 1,000 through 10,000 by thousands:\");<br/>    for n range 1000 to 10000 step 1000 do<br/>      writeln(length(str(leftFact(n))));<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">func left_fact<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ^k <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n! <span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> sum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Standard ML", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* reuse earlier factorial calculations in dfac, apply to listed arguments in cumlfac *)<br/>(* example: left factorial n, is #3 (dfac (0,n-1,1,1) ) *)<br/>(* output list contains (number, factorial, left factorial) *)<br/>(* tested in PolyML *)<br/>\u00a0<br/>\u00a0<br/>val store = ref 0;<br/>\u00a0<br/>val rec dfac = fn <br/>        (from,to,acc,cm) =&gt; if from = to then (from,acc,cm) else (store:=(from+1)*acc;dfac (from+1,to,!store,!store+cm ) );<br/>\u00a0<br/>val rec cumlfac = fn <br/>        (x::y::rm) =&gt; x\u00a0:: cumlfac ( dfac (#1 x, #1 y, #2 x, #3 x)\u00a0:: rm ) |<br/>        rm =&gt;rm\u00a0;<br/>\u00a0<br/>val arguments = List.tabulate (10,fn 0=&gt;(0,1,1)|i=&gt;(i,0,0)) @ <br/>                List.tabulate (10,fn i=&gt; (10*i+19,0,0) )    @ <br/>                List.tabulate ( 10,fn i=&gt; (1000*i+999,0,0));<br/>\u00a0<br/>val result = (~1,0,0)::(cumlfac arguments);<br/>\u00a0<br/>(* done *)<br/>(* display: *)<br/>\u00a0<br/>List.app (fn triple\u00a0:int*int*int =&gt;<br/>        print(Int.toString (1+ #1 triple ) ^ \"\u00a0: \" ^ Int.fmt StringCvt.DEC (#3 triple ) ^\" \\n\" )<br/>        ) (List.take(result,21)  )\u00a0;<br/>List.app (fn triple\u00a0:int*int*int =&gt;<br/>        print( Int.toString (1+ #1 triple ) ^ \"\u00a0: \" ^ Int.toString  (size(Int.toString (#3 triple ))) ^\" \\n\" ) ) (List.drop(result,21)  );<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> leftfact <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> s <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">set</span> f <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> s <span class=\"re0\">$f</span><br/>\t<span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$f</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$s</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">110</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span><span class=\"sy0\">?</span><span class=\"nu0\">10</span>:<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"!$i = [leftfact $i]\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"!$i has [string length [leftfact $i]] digits\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\");<br/>\u00a0<br/>fcn leftFact(n){<br/>   [1..n].reduce(fcn(p,n,rf){ p+=rf.value; rf.set(rf.value*n); p },<br/>      BN(0),Ref(BN(1)));<br/>}</pre>"}]}