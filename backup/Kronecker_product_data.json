{"task": "Kronecker_product", "blocks": [{"lang": "360 Assembly", "loc": 142, "block": "<pre class=\"text highlighted_source\">*        Kronecker product         06/04/2017<br/>KRONECK  CSECT<br/>         USING  KRONECK,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R1,1               first example<br/>         BAL    R14,PRODUCT        call product(a1,b1)<br/>         BAL    R14,PRINT          call print(r)<br/>         XPRNT  =C'---',3          separator<br/>         LA     R1,2               second example<br/>         BAL    R14,PRODUCT        call product(a2,b2)<br/>         BAL    R14,PRINT          call print(r)<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>*------- ----   ----------------------------------------<br/>PRODUCT  EQU    *                  product(o)<br/>         STC    R1,OO              store o<br/>       IF CLI,OO,EQ,X'01' THEN     if o=1 then<br/>         MVC    MM(8),DIM1           (m,n)=hbound(a1) (p,q)=hbound(b1)<br/>         LA     R1,A1                @a1<br/>         LA     R2,B1                @b1<br/>       ELSE     ,                  else<br/>         MVC    MM(8),DIM2           (m,n)=hbound(a2) (p,q)=hbound(b2)<br/>         LA     R1,A2                @a2<br/>         LA     R2,B2                @b2<br/>       ENDIF    ,                  endif<br/>         ST     R1,ADDRA           <a class=\"__cf_email__\" data-cfemail=\"c2a3a6a6b0a3ff82a3f3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         ST     R2,ADDRB           <a class=\"__cf_email__\" data-cfemail=\"8beaefeff9e9b6cbe9ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LH     R1,MM              m<br/>         MH     R1,PP              p<br/>         STH    R1,RI              ri=m*p<br/>         LH     R2,NN              n<br/>         MH     R2,QQ              *q<br/>         STH    R2,RJ              rj=n*q<br/>         LA     R6,1               i=1<br/>       DO WHILE=(CH,R6,LE,MM)      do i=1 to m<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(CH,R7,LE,NN)        do j=1 to n<br/>         LA     R8,1                   k=1<br/>       DO WHILE=(CH,R8,LE,PP)          do k=1 to p<br/>         LA     R9,1                     l=1<br/>       DO WHILE=(CH,R9,LE,QQ)            do l=1 to q<br/>         LR     R1,R6                      i<br/>         BCTR   R1,0<br/>         MH     R1,NN                      *hbound(a,2)<br/>         AR     R1,R7                      j<br/>         BCTR   R1,0<br/>         SLA    R1,2<br/>         L      R4,ADDRA                   @a<br/>         L      R2,0(R4,R1)                r2=a(i,j)<br/>         LR     R1,R8                      k<br/>         BCTR   R1,0<br/>         MH     R1,QQ                      *hbound(b1,2)<br/>         AR     R1,R9                      l<br/>         BCTR   R1,0<br/>         SLA    R1,2<br/>         L      R4,ADDRB                   @b<br/>         L      R3,0(R4,R1)                r3=b(k,l)<br/>         LR     R5,R2                      r2<br/>         MR     R4,R3                      *r3<br/>         LR     R0,R5                      r0=a(i,j)*b(k,l)<br/>         LR     R1,R6                      i<br/>         BCTR   R1,0                       i-1<br/>         MH     R1,PP                      *p<br/>         AR     R1,R8                      r1=p*(i-1)+k<br/>         LR     R2,R7                      j<br/>         BCTR   R2,0                       j-1<br/>         MH     R2,QQ                      *q<br/>         AR     R2,R9                      r2=q*(j-1)+l<br/>         BCTR   R1,0<br/>         MH     R1,=AL2(NR)                *nr<br/>         AR     R1,R2                      r1=r1+r2<br/>         SLA    R1,2<br/>         ST     R0,R-4(R1)                 r(p*(i-1)+k,q*(j-1)+l)=r0<br/>         LA     R9,1(R9)                   l++<br/>       ENDDO    ,                        enddo l<br/>         LA     R8,1(R8)                 k++<br/>       ENDDO    ,                      enddo k<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         BR     R14                return<br/>*------- ----   ----------------------------------------<br/>PRINT    EQU    *                  print<br/>         LA     R6,1               i<br/>       DO WHILE=(CH,R6,LE,RI)      do i=1 to ri<br/>         MVC    PG,=CL80' '          init buffer<br/>         LA     R10,PG               pgi=0<br/>         LA     R7,1                 j<br/>       DO WHILE=(CH,R7,LE,RJ)        do j=1 to rj<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0<br/>         MH     R1,=AL2(NR)            *nr<br/>         AR     R1,R7                  +j<br/>         SLA    R1,2<br/>         L      R2,R-4(R1)             r(i,j)<br/>         XDECO  R2,XDEC                edit<br/>         MVC    0(ND,R10),XDEC+12-ND   output<br/>         LA     R10,ND(R10)            pgi=pgi+nd<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo j<br/>         BR     R14                return<br/>*        ----   ----------------------------------------<br/>NR       EQU    32                 dim result max<br/>ND       EQU    3                  digits to print<br/>A1       DC     F'1',F'2'              a1(2,2)<br/>         DC     F'3',F'4'<br/>B1       DC     F'0',F'5'              b1(2,2)<br/>         DC     F'6',F'7'<br/>DIM1     DC     H'2',H'2',H'2',H'2'    dim a1 , dim b1<br/>A2       DC     F'0',F'1',F'0'         a2(3,3)<br/>         DC     F'1',F'1',F'1'  <br/>         DC     F'0',F'1',F'0'<br/>B2       DC     F'1',F'1',F'1',F'1'    b2(3,4)<br/>         DC     F'1',F'0',F'0',F'1'<br/>         DC     F'1',F'1',F'1',F'1'<br/>DIM2     DC     H'3',H'3',H'3',H'4'    dim a2 , dim b2<br/>ADDRA    DS     A                  @a<br/>ADDRB    DS     A                  @b<br/>RI       DS     H                  ri<br/>RJ       DS     H                  rj<br/>MM       DS     H                  m<br/>NN       DS     H                  n<br/>PP       DS     H                  p<br/>QQ       DS     H                  q<br/>OO       DS     X                  o<br/>PG       DS     CL80               buffer<br/>XDEC     DS     CL12<br/>         LTORG<br/>R        DS     (NR*NR)F           r(nr,nr)<br/>         YREGS<br/>         END    KRONECK</pre>"}, {"lang": "ALGOL 68", "loc": 63, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># multiplies in-place the elements of the matrix a by the scaler b #</span><br/>    <span class=\"kw4\">OP</span> <span class=\"sy1\">*:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> b <span class=\"br0\">)</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>                a<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">*:=</span> b<br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        a<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># *:= #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the Kronecker Product of the two matrices a and b #</span><br/>    <span class=\"coMULTI\"># the result will have lower bounds of 1                    #</span><br/>    <span class=\"kw4\">PRIO</span> X <span class=\"sy1\">=</span> 6<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   X <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># normalise the matrices to have lower bounds of 1 #</span><br/>        <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> l <span class=\"sy1\">=</span> a<span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 1<span class=\"sy1\">,</span> <span class=\"kw7\">AT</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> r <span class=\"sy1\">=</span> b<span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 1<span class=\"sy1\">,</span> <span class=\"kw7\">AT</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># construct the result #</span><br/>        <span class=\"kw3\">INT</span> r 1 size <span class=\"sy1\">=</span> 1 <span class=\"kw8\">UPB</span> r<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> r 2 size <span class=\"sy1\">=</span> 2 <span class=\"kw8\">UPB</span> r<span class=\"sy1\">;</span><br/>        <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 1 <span class=\"kw8\">UPB</span> l <span class=\"sy1\">*</span> 1 <span class=\"kw8\">UPB</span> r<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> 2 <span class=\"kw8\">UPB</span> l <span class=\"sy1\">*</span> 2 <span class=\"kw8\">UPB</span> r <span class=\"br0\">]</span><span class=\"kw3\">INT</span> k<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">LWB</span> l <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> l <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> l <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> l <span class=\"kw2\">DO</span><br/>                <span class=\"br0\">(</span> k<span class=\"br0\">[</span> 1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> i <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"sy1\">*</span> r 1 size <span class=\"br0\">)</span> <span class=\"sy1\">:</span> i <span class=\"sy1\">*</span> r 1 size<br/>                   <span class=\"sy1\">,</span> 1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> j <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"sy1\">*</span> r 2 size <span class=\"br0\">)</span> <span class=\"sy1\">:</span> j <span class=\"sy1\">*</span> r 2 size<br/>                   <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> r<br/>                <span class=\"br0\">)</span> <span class=\"sy1\">*:=</span> l<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span><br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        k<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># X #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># prints matrix a with the specified field width #</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> matrix <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> field width <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> a <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> a <span class=\"kw2\">DO</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> a<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span><span class=\"sy1\">,</span> field width <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span> <span class=\"coMULTI\"># print matrix #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># task test cases #</span><br/>    <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 2 <span class=\"br0\">)</span><br/>                        <span class=\"sy1\">,</span> <span class=\"br0\">(</span> 3<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><br/>                        <span class=\"br0\">)</span><br/>                X <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 5 <span class=\"br0\">)</span><br/>                        <span class=\"sy1\">,</span> <span class=\"br0\">(</span> 6<span class=\"sy1\">,</span> 7 <span class=\"br0\">)</span><br/>                        <span class=\"br0\">)</span><br/>                <span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2<br/>                <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>                        <span class=\"sy1\">,</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><br/>                        <span class=\"sy1\">,</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>                        <span class=\"br0\">)</span><br/>                X <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><br/>                        <span class=\"sy1\">,</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><br/>                        <span class=\"sy1\">,</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><br/>                        <span class=\"br0\">)</span><br/>                <span class=\"sy1\">,</span> <span class=\"sy1\">-</span>1<br/>                <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 178, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- KRONECKER PRODUCT OF TWO MATRICES ------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- kprod\u00a0:: [[Num]] -&gt; [[Num]] -&gt; [[Num]]</span><br/><span class=\"kw3\">on</span> kprod<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> concatTranspose<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>            map<span class=\"br0\">(</span><span class=\"kw3\">my</span> concat, <span class=\"kw3\">my</span> transpose<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span><br/>        <span class=\"co1\">-- Multiplication by N over a list of lists    </span><br/>        <span class=\"co1\">-- f\u00a0:: [[Num]] -&gt; Num -&gt; [[Num]]</span><br/>        <span class=\"kw3\">on</span> f<span class=\"br0\">(</span>mx, n<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> product<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>                    a <span class=\"sy0\">*</span> b<br/>                <span class=\"kw3\">end</span> product<br/>\u00a0<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>                    map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>product<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, xs<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span><span class=\"kw1\">result</span>, mx<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> f<br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>zs<span class=\"br0\">)</span><br/>            map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>ys<span class=\"br0\">)</span>, zs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    concatMap<span class=\"br0\">(</span>concatTranspose, map<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> kprod<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>show, \u00ac<br/>        kprod<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, \u00ac<br/>            <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        linefeed <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> \u00ac<br/>        unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>show, \u00ac<br/>            kprod<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, \u00ac<br/>                <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    acc<br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    concat<span class=\"br0\">(</span>map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper</span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- show\u00a0:: a -&gt; String</span><br/><span class=\"kw3\">on</span> show<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> c <span class=\"kw3\">to</span> class <span class=\"kw3\">of</span> e<br/>    <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> serialized<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>                show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, map<span class=\"br0\">(</span>serialized, e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> record <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> showField<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>kv<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> <span class=\"br0\">{</span>k, v<span class=\"br0\">}</span> <span class=\"kw3\">to</span> kv<br/>                k <span class=\"sy0\">&amp;</span> <span class=\"st0\">\":\"</span> <span class=\"sy0\">&amp;</span> show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>showField, zip<span class=\"br0\">(</span>allKeys<span class=\"br0\">(</span>e<span class=\"br0\">)</span>, allValues<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> date <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">\"date <span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> e <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">try</span><br/>            e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>        <span class=\"kw3\">on</span> <span class=\"kw3\">error</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"\u00ab\"</span> <span class=\"sy0\">&amp;</span> c <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"\u00bb\"</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> show<br/>\u00a0<br/><span class=\"co1\">-- transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> transpose<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> column<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, iCol<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> row<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">item</span> iCol <span class=\"kw3\">of</span> xs<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            map<span class=\"br0\">(</span>row, xss<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>column, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xss<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> transpose<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines</pre>"}, {"lang": "AWK", "loc": 67, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f KRONECKER_PRODUCT.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    A<span class=\"br0\">[</span><span class=\"sy3\">++</span>a<span class=\"br0\">]</span> = <span class=\"st0\">\"1 2\"</span>\u00a0; B<span class=\"br0\">[</span><span class=\"sy3\">++</span>b<span class=\"br0\">]</span> = <span class=\"st0\">\"0 5\"</span><br/>    A<span class=\"br0\">[</span><span class=\"sy3\">++</span>a<span class=\"br0\">]</span> = <span class=\"st0\">\"3 4\"</span>\u00a0; B<span class=\"br0\">[</span><span class=\"sy3\">++</span>b<span class=\"br0\">]</span> = <span class=\"st0\">\"6 7\"</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"sample 1\"</span>,<span class=\"nu0\">1234</span><span class=\"br0\">)</span><br/>    A<span class=\"br0\">[</span><span class=\"sy3\">++</span>a<span class=\"br0\">]</span> = <span class=\"st0\">\"0 1 0\"</span>\u00a0; B<span class=\"br0\">[</span><span class=\"sy3\">++</span>b<span class=\"br0\">]</span> = <span class=\"st0\">\"1 1 1 1\"</span><br/>    A<span class=\"br0\">[</span><span class=\"sy3\">++</span>a<span class=\"br0\">]</span> = <span class=\"st0\">\"1 1 1\"</span>\u00a0; B<span class=\"br0\">[</span><span class=\"sy3\">++</span>b<span class=\"br0\">]</span> = <span class=\"st0\">\"1 0 0 1\"</span><br/>    A<span class=\"br0\">[</span><span class=\"sy3\">++</span>a<span class=\"br0\">]</span> = <span class=\"st0\">\"0 1 0\"</span>\u00a0; B<span class=\"br0\">[</span><span class=\"sy3\">++</span>b<span class=\"br0\">]</span> = <span class=\"st0\">\"1 1 1 1\"</span><br/>    main<span class=\"br0\">(</span><span class=\"st0\">\"sample 2\"</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> main<span class=\"br0\">(</span>desc,option<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># option: allows complete flexibility of output; they may be combined</span><br/><span class=\"co1\">#   1  show A and B matrix</span><br/><span class=\"co1\">#   2  show A x B</span><br/><span class=\"co1\">#   3  show product</span><br/><span class=\"co1\">#   4  show Arow,Acol x Brow,Bcol</span><br/><span class=\"co1\">#</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>,desc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"nu0\">1234</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      a_rows = show_array<span class=\"br0\">(</span>A,<span class=\"st0\">\"A\"</span>,option<span class=\"br0\">)</span><br/>      b_rows = show_array<span class=\"br0\">(</span>B,<span class=\"st0\">\"B\"</span>,option<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> prn<span class=\"br0\">(</span><span class=\"st0\">\"A x B\"</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> prn<span class=\"br0\">(</span><span class=\"st0\">\"Product\"</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> prn<span class=\"br0\">(</span><span class=\"st0\">\"Arow,Acol x Brow,Bcol\"</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"nothing to print\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    a = b = <span class=\"nu0\">0</span> <span class=\"co1\"># reset</span><br/>    delete A<br/>    delete B<br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> prn<span class=\"br0\">(</span>desc,option,  a_cols,b_cols,w,x,y,z,AA,BB<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s:<span class=\"es0\">\\n</span>\"</span>,desc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>w=<span class=\"nu0\">1</span>; w<span class=\"sy2\">&lt;=</span>a_rows; w<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      a_cols = <span class=\"kw4\">split</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>w<span class=\"br0\">]</span>,AA,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x=<span class=\"nu0\">1</span>; x<span class=\"sy2\">&lt;=</span>b_rows; x<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        b_cols = <span class=\"kw4\">split</span><span class=\"br0\">(</span>B<span class=\"br0\">[</span>x<span class=\"br0\">]</span>,BB,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"[ \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>y=<span class=\"nu0\">1</span>; y<span class=\"sy2\">&lt;=</span>a_cols; y<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span>z=<span class=\"nu0\">1</span>; z<span class=\"sy2\">&lt;=</span>b_cols; z<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%sx%s \"</span>,AA<span class=\"br0\">[</span>y<span class=\"br0\">]</span>,BB<span class=\"br0\">[</span>z<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span>,AA<span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy3\">*</span> BB<span class=\"br0\">[</span>z<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s,%sx%s,%s \"</span>,w,y,x,z<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"]<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> show_array<span class=\"br0\">(</span>arr,desc,option,  i,n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      n<span class=\"sy3\">++</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>option <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix\u00a0%s:<span class=\"es0\">\\n</span>\"</span>,desc<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"[\u00a0%s ]<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 77, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> input<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>output<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>l<span class=\"sy0\">,</span>rowA<span class=\"sy0\">,</span>colA<span class=\"sy0\">,</span>rowB<span class=\"sy0\">,</span>colB<span class=\"sy0\">,</span>rowC<span class=\"sy0\">,</span>colC<span class=\"sy0\">,</span>startRow<span class=\"sy0\">,</span>startCol<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> <span class=\"sy0\">**</span>matrixA<span class=\"sy0\">,**</span>matrixB<span class=\"sy0\">,**</span>matrixC<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter full path of input file\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>stdin<span class=\"sy0\">,</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter full path of output file\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>stdin<span class=\"sy0\">,</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span>output<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tFILE<span class=\"sy0\">*</span> inputFile <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>input<span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>inputFile<span class=\"sy0\">,</span><span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,&amp;</span>rowA<span class=\"sy0\">,&amp;</span>colA<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmatrixA <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>rowA <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rowA<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tmatrixA<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>colA<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>colA<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>inputFile<span class=\"sy0\">,</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,&amp;</span>matrixA<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>inputFile<span class=\"sy0\">,</span><span class=\"st0\">\"%d%d\"</span><span class=\"sy0\">,&amp;</span>rowB<span class=\"sy0\">,&amp;</span>colB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmatrixB <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>rowB <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rowB<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tmatrixB<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>colB<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>colB<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>inputFile<span class=\"sy0\">,</span><span class=\"st0\">\"%lf\"</span><span class=\"sy0\">,&amp;</span>matrixB<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>inputFile<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\trowC <span class=\"sy0\">=</span> rowA<span class=\"sy0\">*</span>rowB<span class=\"sy0\">;</span><br/>\tcolC <span class=\"sy0\">=</span> colA<span class=\"sy0\">*</span>colB<span class=\"sy0\">;</span><br/>\u00a0<br/>\tmatrixC <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>rowC<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rowA<span class=\"sy0\">*</span>rowB<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tmatrixC<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>colA<span class=\"sy0\">*</span>colB<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rowA<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>colA<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tstartRow <span class=\"sy0\">=</span> i<span class=\"sy0\">*</span>rowB<span class=\"sy0\">;</span><br/>\t\t\tstartCol <span class=\"sy0\">=</span> j<span class=\"sy0\">*</span>colB<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>k<span class=\"sy0\">&lt;</span>rowB<span class=\"sy0\">;</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>l<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>l<span class=\"sy0\">&lt;</span>colB<span class=\"sy0\">;</span>l<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\tmatrixC<span class=\"br0\">[</span>startRow<span class=\"sy0\">+</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>startCol<span class=\"sy0\">+</span>l<span class=\"br0\">]</span> <span class=\"sy0\">=</span> matrixA<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">*</span>matrixB<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tFILE<span class=\"sy0\">*</span> outputFile <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>output<span class=\"sy0\">,</span><span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rowC<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>colC<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>outputFile<span class=\"sy0\">,</span><span class=\"st0\">\"%lf<span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">,</span>matrixC<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>outputFile<span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>outputFile<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Kronecker product of the two matrices written to\u00a0%s.\"</span><span class=\"sy0\">,</span>output<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 55, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">outbuffer</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> Matrix <span class=\"sy0\">=</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> toString<span class=\"br0\">(</span>Matrix m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> ob <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> OutBuffer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>row<span class=\"sy0\">;</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//The format specifier inside the\u00a0%(...%) is </span><br/>        <span class=\"co1\">//automatically applied to each element of a range</span><br/>        <span class=\"co1\">//Thus prints each line flanked by |</span><br/>        ob.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"|%(%2d\u00a0%)|\"</span><span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> ob.<span class=\"me1\">toString</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Matrix kronecker<span class=\"br0\">(</span>Matrix m1<span class=\"sy0\">,</span> Matrix m2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Matrix p <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span>m1.<span class=\"me1\">length</span><span class=\"sy0\">*</span>m2.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>r1i<span class=\"sy0\">,</span> r1<span class=\"sy0\">;</span> m1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>r2i<span class=\"sy0\">,</span> r2<span class=\"sy0\">;</span> m2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> rp <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span>r1.<span class=\"me1\">length</span><span class=\"sy0\">*</span>r2.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>c1i<span class=\"sy0\">,</span> e1<span class=\"sy0\">;</span> r1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>c2i<span class=\"sy0\">,</span> e2<span class=\"sy0\">;</span> r2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        rp<span class=\"br0\">[</span>c1i<span class=\"sy0\">*</span>r2.<span class=\"me1\">length</span><span class=\"sy0\">+</span>c2i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> e1<span class=\"sy0\">*</span>e2<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            p<span class=\"br0\">[</span>r1i<span class=\"sy0\">*</span>m2.<span class=\"me1\">length</span><span class=\"sy0\">+</span>r2i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sample<span class=\"br0\">(</span>Matrix m1<span class=\"sy0\">,</span> Matrix m2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> res <span class=\"sy0\">=</span> kronecker<span class=\"br0\">(</span>m1<span class=\"sy0\">,</span> m2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Matrix A:<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>Matrix B:<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>A (X) B:<span class=\"es1\">\\n</span>%s\"</span><span class=\"sy0\">,</span> m1.<span class=\"me1\">toString</span><span class=\"sy0\">,</span> m2.<span class=\"me1\">toString</span><span class=\"sy0\">,</span> res.<span class=\"me1\">toString</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Matrix A <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    Matrix B <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    sample<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Matrix C <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    Matrix D <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    sample<span class=\"br0\">(</span>C<span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">USING: kernel math.matrices prettyprint\u00a0;<br/>IN: rosetta-code.kronecker<br/>\u00a0<br/>{ { 1 2 } { 3 4 } }<br/>{ { 0 5 } { 6 7 } }<br/>{ { 0 1 0 } { 1 1 1 } { 0 1 0 } }<br/>{ { 1 1 1 1 } { 1 0 0 1 } { 1 1 1 1 } }<br/>[ kron . ] <a class=\"__cf_email__\" data-cfemail=\"685a0a0128\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Fortran", "loc": 57, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> ARRAYMUSH\t<span class=\"co1\">!A rather small collection.</span><br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!For the specific problem only.</span><br/>        <span class=\"kw1\">SUBROUTINE</span> KPRODUCT<span class=\"br0\">(</span>A,B,AB<span class=\"br0\">)</span>\t<span class=\"co1\">!AB = Kronecker product of A and B, both two-dimensional arrays.</span><br/><span class=\"co1\">Considers the arrays to be addressed as A(row,column), despite any storage order arrangements.        .</span><br/><span class=\"co1\">Creating array AB to fit here, adjusting the caller's array AB, may not work on some compilers.</span><br/>         <span class=\"kw3\">INTEGER</span> A<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>,B<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Two-dimensional arrays, lower bound one.</span><br/>         <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">ALLOCATABLE</span><span class=\"sy0\">::</span> <span class=\"me2\">AB</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!To be created to fit.</span><br/>         <span class=\"kw3\">INTEGER</span> R,RA,RB,C,CA,CB,I\t<span class=\"co1\">!Assistants.</span><br/>          RA <span class=\"sy0\">=</span> <span class=\"kw4\">UBOUND</span><span class=\"br0\">(</span>A,<span class=\"kw4\">DIM</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Ascertain the upper bounds of the incoming arrays.</span><br/>          CA <span class=\"sy0\">=</span> <span class=\"kw4\">UBOUND</span><span class=\"br0\">(</span>A,<span class=\"kw4\">DIM</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Their lower bounds will be deemed one,</span><br/>          RB <span class=\"sy0\">=</span> <span class=\"kw4\">UBOUND</span><span class=\"br0\">(</span>B,<span class=\"kw4\">DIM</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!And the upper bound as reported will correspond.</span><br/>          CB <span class=\"sy0\">=</span> <span class=\"kw4\">UBOUND</span><span class=\"br0\">(</span>B,<span class=\"kw4\">DIM</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">!UBOUND(A) would give an array of two values, RA and CA, more for higher dimensionality.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"A\"</span>,RA,CA,<span class=\"st0\">\"B\"</span>,RB,CB,<span class=\"st0\">\"A.k.B\"</span>,RA<span class=\"sy0\">*</span>RB,CA<span class=\"sy0\">*</span>CB\t<span class=\"co1\">!Announce.</span><br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">(</span>A,<span class=\"st0\">\" is \"</span>,I0,<span class=\"st0\">\"x\"</span>,I0,1X<span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Three sets of sizes.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ALLOCATED</span><span class=\"br0\">(</span>AB<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DEALLOCATE</span><span class=\"br0\">(</span>AB<span class=\"br0\">)</span>\t<span class=\"co1\">!Discard any lingering storage.</span><br/>          <span class=\"kw1\">ALLOCATE</span> <span class=\"br0\">(</span>AB<span class=\"br0\">(</span>RA<span class=\"sy0\">*</span>RB,CA<span class=\"sy0\">*</span>CB<span class=\"br0\">)</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Obtain the exact desired size.</span><br/>          R <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Syncopation: start the row offset.</span><br/>          <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,RA\t<span class=\"co1\">!Step down the rows of A.</span><br/>            C <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!For each row, start the column offset.</span><br/>            <span class=\"kw1\">DO</span> J <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,CA\t\t<span class=\"co1\">!Step along the columns of A.</span><br/>              AB<span class=\"br0\">(</span>R <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>R <span class=\"sy0\">+</span> RB,C <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>C <span class=\"sy0\">+</span> CB<span class=\"br0\">)</span> <span class=\"sy0\">=</span> A<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span><span class=\"sy0\">*</span>B\t<span class=\"co1\">!Place a block of B values.</span><br/>              C <span class=\"sy0\">=</span> C <span class=\"sy0\">+</span> CB\t\t<span class=\"co1\">!Advance a block of columns.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next column of A.</span><br/>            R <span class=\"sy0\">=</span> R <span class=\"sy0\">+</span> RB\t\t<span class=\"co1\">!Advance a block of rows.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t<span class=\"co1\">!On to the next row of A.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> KPRODUCT\t<span class=\"co1\">!No tests for bad parameters, or lack of storage...</span><br/>\u00a0<br/>        <span class=\"kw1\">SUBROUTINE</span> SHOW<span class=\"br0\">(</span>F,A<span class=\"br0\">)</span>\t<span class=\"co1\">!Write array A in row,column order.</span><br/>         <span class=\"kw3\">INTEGER</span> F\t<span class=\"co1\">!Output file unit number.</span><br/>         <span class=\"kw3\">INTEGER</span> A<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The 2-D array, lower bound one.</span><br/>         <span class=\"kw3\">INTEGER</span> R\t<span class=\"co1\">!The row stepper.</span><br/>          <span class=\"kw1\">DO</span> R <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"kw4\">UBOUND</span><span class=\"br0\">(</span>A,<span class=\"kw4\">DIM</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Each row gets its own line.</span><br/>            WRITE <span class=\"br0\">(</span>F,<span class=\"nu0\">1</span><span class=\"br0\">)</span> A<span class=\"br0\">(</span>R,<span class=\"sy0\">:</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Write all the columns of that row.</span><br/>    <span class=\"nu0\">1</span>       FORMAT <span class=\"br0\">(</span>666I3<span class=\"br0\">)</span>\t\t<span class=\"co1\">!This suffices for the example.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next row.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SHOW\t<span class=\"co1\">!WRITE (F,*) A or similar would show A as if transposed.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> ARRAYMUSH\t<span class=\"co1\">!That was simple enough.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>      <span class=\"kw3\">USE</span> ARRAYMUSH<br/>      <span class=\"kw3\">INTEGER</span> A<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,B<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!First test: square arrays.</span><br/>      <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">ALLOCATABLE</span><span class=\"sy0\">::</span> <span class=\"me2\">AB</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>\t<span class=\"co1\">!To be created for each result.</span><br/>      <span class=\"kw3\">INTEGER</span> C<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,D<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Second test: some rectilinearity.</span><br/>      <span class=\"kw3\">DATA</span> A<span class=\"sy0\">/</span><span class=\"nu0\">1</span>,<span class=\"nu0\">3</span>, <span class=\"nu0\">2</span>,<span class=\"nu0\">4</span><span class=\"sy0\">/</span>,B<span class=\"sy0\">/</span><span class=\"nu0\">0</span>,<span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>,<span class=\"nu0\">7</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!Furrytran uses \"column-major\" order for successive storage elements.</span><br/>      <span class=\"kw3\">DATA</span> C<span class=\"sy0\">/</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!So, the first three values go down the rows of the first column.</span><br/>      <span class=\"kw3\">DATA</span> D<span class=\"sy0\">/</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"co1\">!And then follow the values for the next column, etc.</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"First test...\"</span><br/>      <span class=\"kw1\">CALL</span> KPRODUCT<span class=\"br0\">(</span>A,B,AB<span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> SHOW <span class=\"br0\">(</span><span class=\"nu0\">6</span>,AB<span class=\"br0\">)</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Second test...\"</span><br/>      <span class=\"kw1\">CALL</span> KPRODUCT<span class=\"br0\">(</span>C,D,AB<span class=\"br0\">)</span><br/>      <span class=\"kw1\">CALL</span> SHOW <span class=\"br0\">(</span><span class=\"nu0\">6</span>,AB<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 51, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 06-04-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> kronecker_product<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span>, frmt <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, j, k, l<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> la1 = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> ua1 = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> la2 = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> ua2 = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> lb1 = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> ub1 = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> lb2 = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>b, <span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> ub2 = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>b, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = la1 <span class=\"kw1\">To</span> ua1<br/>        <span class=\"kw1\">For</span> k = lb1 <span class=\"kw1\">To</span> ub1<br/>            <span class=\"kw1\">Print</span> <span class=\"st0\">\"[\"</span>;<br/>            <span class=\"kw1\">For</span> j = la2 <span class=\"kw1\">To</span> ua2<br/>                <span class=\"kw1\">For</span> l = lb2 <span class=\"kw1\">To</span> ub2<br/>                    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> * b<span class=\"br0\">(</span>k, l<span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">If</span> j = ua1 And l = ub2 <span class=\"kw1\">Then</span><br/>                        <span class=\"kw1\">Print</span> <span class=\"st0\">\"]\"</span><br/>                    <span class=\"kw1\">Else</span><br/>                        <span class=\"kw1\">Print</span> <span class=\"st0\">\" \"</span>;<br/>                    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>                <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=-----</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, _<br/>                                 <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, _<br/>                                 <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>kronecker_product<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, b<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"st0\">\"##\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, _<br/>                                 <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, _<br/>                                 <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> y<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, _<br/>                                 <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, _<br/>                                 <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>kronecker_product<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"br0\">)</span>, y<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 73, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> uintMatrix <span class=\"sy1\">[][]</span><span class=\"kw4\">uint</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m uintMatrix<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> max <span class=\"kw4\">uint</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> e &gt; max <span class=\"sy1\">{</span><br/>                max <span class=\"sy2\">=</span> e<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    w <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span>Sprint<span class=\"sy1\">(</span>max<span class=\"sy1\">))</span><br/>    b <span class=\"sy2\">:=</span> &amp;strings<span class=\"sy3\">.</span>Builder<span class=\"sy1\">{}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Fprintf<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> <span class=\"st0\">\"|%*d\"</span><span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> r<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Fprintf<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> <span class=\"st0\">\"\u00a0%*d\"</span><span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Fprintln</span><span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> <span class=\"st0\">\"|\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> b<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> kronecker<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 uintMatrix<span class=\"sy1\">)</span> uintMatrix <span class=\"sy1\">{</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>uintMatrix<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m1<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m2<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> r1i<span class=\"sy1\">,</span> r1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m1 <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> r2i<span class=\"sy1\">,</span> r2 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m2 <span class=\"sy1\">{</span><br/>            rp <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">uint</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>r1<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r2<span class=\"sy1\">))</span><br/>            <span class=\"kw1\">for</span> c1i<span class=\"sy1\">,</span> e1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r1 <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> c2i<span class=\"sy1\">,</span> e2 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r2 <span class=\"sy1\">{</span><br/>                    rp<span class=\"sy1\">[</span>c1i<span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r2<span class=\"sy1\">)</span><span class=\"sy3\">+</span>c2i<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> e1 <span class=\"sy3\">*</span> e2<br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            p<span class=\"sy1\">[</span>r1i<span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>m2<span class=\"sy1\">)</span><span class=\"sy3\">+</span>r2i<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> rp<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sample<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 uintMatrix<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"m1:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>m1<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"m2:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>m2<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"m1 \u2297 m2:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>kronecker<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    sample<span class=\"sy1\">(</span>uintMatrix<span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">},</span> uintMatrix<span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">})</span><br/>    sample<span class=\"sy1\">(</span>uintMatrix<span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">},</span> uintMatrix<span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">})</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"br0\">)</span><br/>\u00a0<br/>kprod<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>kprod xs ys <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> f <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"co1\">-- Multiplication by n over list of lists</span><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> transpose <span class=\"sy0\">=&lt;&lt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>`f` ys<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> xs<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> kprod <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span><br/>    kprod<br/>      <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">KP=: dyad def <span class=\"st_h\">',/\"2 ,/ 1 3 |: x */ y'</span></pre>"}, {"lang": "Java", "loc": 146, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> <span class=\"co2\">kronecker</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/**<br/> * Defines a function to calculate the Kronecker product of two<br/> * rectangular matrices and tests it with two examples.<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Product <span class=\"br0\">{</span><br/>  <span class=\"co3\">/**<br/>   * Find the Kronecker product of the arguments.<br/>   * @param a The first matrix to multiply.<br/>   * @param b The second matrix to multiply.<br/>   * @return A new matrix: the Kronecker product of the arguments.<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> product<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Create matrix c as the matrix to fill and return.</span><br/>    <span class=\"co1\">// The length of a matrix is its number of rows.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>a.<span class=\"me1\">length</span><span class=\"sy0\">*</span>b.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Fill in the (empty) rows of c.</span><br/>    <span class=\"co1\">// The length of each row is the number of columns.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ix <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ix <span class=\"sy0\">&lt;</span> c.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ix<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> num_cols <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">*</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>      c<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>num_cols<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// Now fill in the values: the products of each pair.</span><br/>    <span class=\"co1\">// Go through all the elements of a.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ia <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ia <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ia<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ja <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ja <span class=\"sy0\">&lt;</span> a<span class=\"br0\">[</span>ia<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ja<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// For each element of a, multiply it by all the elements of b.</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ib <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ib <span class=\"sy0\">&lt;</span> b.<span class=\"me1\">length</span><span class=\"sy0\">;</span> ib<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> jb <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jb <span class=\"sy0\">&lt;</span> b<span class=\"br0\">[</span>ib<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> jb<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             c<span class=\"br0\">[</span>b.<span class=\"me1\">length</span><span class=\"sy0\">*</span>ia<span class=\"sy0\">+</span>ib<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">[</span>ib<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">*</span>ja<span class=\"sy0\">+</span>jb<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>ia<span class=\"br0\">]</span><span class=\"br0\">[</span>ja<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>ib<span class=\"br0\">]</span><span class=\"br0\">[</span>jb<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Return the completed product matrix c.</span><br/>    <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Print an integer matrix, lining up the columns by the width<br/>   * of the longest printed element.<br/>   * @param m The matrix to print.<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> print_matrix<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Printing the matrix neatly is the most complex part.</span><br/>    <span class=\"co1\">// For clean formatting, convert each number to a string</span><br/>    <span class=\"co1\">// and find length of the longest of these strings.</span><br/>    <span class=\"co1\">// Build a matrix of these strings to print later.</span><br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sts <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span>m.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> max_length <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Safe, since all lengths are positive here.</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> im <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> im <span class=\"sy0\">&lt;</span> m.<span class=\"me1\">length</span><span class=\"sy0\">;</span> im<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      sts<span class=\"br0\">[</span>im<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span>m<span class=\"br0\">[</span>im<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> jm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jm <span class=\"sy0\">&lt;</span> m<span class=\"br0\">[</span>im<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> jm<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> st <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span>im<span class=\"br0\">]</span><span class=\"br0\">[</span>jm<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>st.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> max_length<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          max_length <span class=\"sy0\">=</span> st.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        sts<span class=\"br0\">[</span>im<span class=\"br0\">]</span><span class=\"br0\">[</span>jm<span class=\"br0\">]</span> <span class=\"sy0\">=</span> st<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Now max_length holds the length of the longest string.</span><br/>    <span class=\"co1\">// Build a format string to right justify the strings in a field</span><br/>    <span class=\"co1\">// of this length.</span><br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> format <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%%%ds\"</span>, max_length<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> im <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> im <span class=\"sy0\">&lt;</span> m.<span class=\"me1\">length</span><span class=\"sy0\">;</span> im<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"co1\">// Stop one short to avoid a trailing space.</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> jm <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> jm <span class=\"sy0\">&lt;</span> m<span class=\"br0\">[</span>im<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> jm<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>format, m<span class=\"br0\">[</span>im<span class=\"br0\">]</span><span class=\"br0\">[</span>jm<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>format, m<span class=\"br0\">[</span>im<span class=\"br0\">]</span><span class=\"br0\">[</span>m<span class=\"br0\">[</span>im<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Run a test by printing the arguments, computing their<br/>   * Kronecker product, and printing it.<br/>   * @param a The first matrix to multiply.<br/>   * @param b The second matrix to multiply.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a, <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Print out matrices and their product.</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Testing Kronecker product\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Size of matrix a: \"</span> <span class=\"sy0\">+</span> a.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" by \"</span> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix a:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print_matrix<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Size of matrix b: \"</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" by \"</span> <span class=\"sy0\">+</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix b:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print_matrix<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Calculating matrix c as Kronecker product\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> product<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Size of matrix c: \"</span> <span class=\"sy0\">+</span> c.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" by \"</span> <span class=\"sy0\">+</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix c:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print_matrix<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Create the matrices for the first test and run the test.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Test 1: Create a and b.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">// 2 by 2</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">// 2 by 2</span><br/>    b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Run the test.</span><br/>    test<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Create the matrices for the first test and run the test.<br/>   */</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> test2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Test 2: Create a and b.</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">// 3 by 3</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\">// 3 by 4</span><br/>    b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Run the test.</span><br/>    test<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>   * Run the program to run the two tests.<br/>   * @param args Command line arguments (not used).<br/>   */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Test the product method.</span><br/>    test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 19, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"co1\">// matkronprod.js</span><br/><span class=\"co1\">// Prime function:</span><br/><span class=\"co1\">// mkp arrow function: Return the Kronecker product of the a and b matrices.</span><br/><span class=\"co1\">// Note: both a and b must be matrices, i.e., 2D rectangular arrays.</span><br/>mkp<span class=\"sy0\">=</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>a.<span class=\"me1\">map</span><span class=\"br0\">(</span>a<span class=\"sy0\">=&gt;</span>b.<span class=\"me1\">map</span><span class=\"br0\">(</span>b<span class=\"sy0\">=&gt;</span>a.<span class=\"me1\">map</span><span class=\"br0\">(</span>y<span class=\"sy0\">=&gt;</span>b.<span class=\"me1\">map</span><span class=\"br0\">(</span>x<span class=\"sy0\">=&gt;</span>r.<span class=\"me1\">push</span><span class=\"br0\">(</span>y<span class=\"sy0\">*</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t.<span class=\"me1\">push</span><span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span>t<span class=\"sy0\">;</span><br/><span class=\"co1\">// Helper functions:</span><br/><span class=\"co1\">// Log title and matrix mat to console</span><br/><span class=\"kw1\">function</span> matl2cons<span class=\"br0\">(</span>title<span class=\"sy0\">,</span>mat<span class=\"br0\">)</span> <span class=\"br0\">{</span>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>title<span class=\"br0\">)</span><span class=\"sy0\">;</span> console.<span class=\"me1\">log</span><span class=\"br0\">(</span>mat.<span class=\"me1\">join</span>`\\n`<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"co1\">// Print title to document</span><br/><span class=\"kw1\">function</span> pttl2doc<span class=\"br0\">(</span>title<span class=\"br0\">)</span> <span class=\"br0\">{</span>document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;b&gt;'</span><span class=\"sy0\">+</span>title<span class=\"sy0\">+</span><span class=\"st0\">'&lt;/b&gt;&lt;br /&gt;'</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"co1\">// Print title and matrix mat to document</span><br/><span class=\"kw1\">function</span> matp2doc<span class=\"br0\">(</span>title<span class=\"sy0\">,</span>mat<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;b&gt;'</span><span class=\"sy0\">+</span>title<span class=\"sy0\">+</span><span class=\"st0\">'&lt;/b&gt;:&lt;br /&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mat.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'&amp;nbsp;&amp;nbsp;'</span><span class=\"sy0\">+</span>mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">'&lt;br /&gt;'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 18, "block": "<pre class=\"text highlighted_source\">def kprod(a; b):<br/>\u00a0<br/>  # element-wise multiplication of a matrix by a number, \"c\"<br/>  def multiply(c): map( map(. * c) );<br/>\u00a0<br/>  # \"right\" should be a vector with the same length as the input<br/>  def laminate(right):<br/>    [range(0; right|length) as $i<br/>    | (.[$i] + [right[$i]]) ];<br/>\u00a0<br/>  # \"matrix\" and the input matrix should have the same number of rows<br/>  def addblock(matrix):<br/>    reduce (matrix|transpose)[] as $v (.; laminate($v));<br/>\u00a0<br/>  (a[0]|length) as $m<br/>  | reduce range(0; a|length) as $i ([];<br/>      . + reduce range(0; $m) as $j ([];<br/>        addblock( b | multiply(a[$i][$j]) ) ));</pre>"}, {"lang": "Julia", "loc": 19, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/># Julia has a builtin kronecker product function<br/>a = [1 2; 3 4]<br/>b = [0 5; 6 7]<br/>k = kron(a, b)<br/>println(\"$a \u00d7 $b =\")<br/>for row in 1:size(k)[1]<br/>    println(k[row,:])<br/>end<br/>println()<br/>\u00a0<br/>a = [0 1 0; 1 1 1; 0 1 0]<br/>b = [1 1 1 1; 1 0 0 1; 1 1 1 1]<br/>k = kron(a, b)<br/>println(\"$a \u00d7 $b =\")<br/>for row in 1:size(k)[1]<br/>    println(k[row,:])<br/>end</pre>"}, {"lang": "Kotlin", "loc": 60, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2 (JVM)</span><br/>\u00a0<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>fun kroneckerProduct<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Matrix, b<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> a.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> b.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rtn <span class=\"sy0\">=</span> m <span class=\"sy0\">*</span> p<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ctn <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> q<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r<span class=\"sy0\">:</span> Matrix <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>rtn<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>ctn<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"co1\">// all elements zero by default</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until p<span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>l in <span class=\"nu0\">0</span> until q<span class=\"br0\">)</span><br/>                    r<span class=\"br0\">[</span>p <span class=\"sy0\">*</span> i + k<span class=\"br0\">]</span><span class=\"br0\">[</span>q <span class=\"sy0\">*</span> j + l<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String, m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until m.<span class=\"me1\">size</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">contentToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printAll<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Matrix, b<span class=\"sy0\">:</span> Matrix, r<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Matrix A:\"</span>, a<span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Matrix B:\"</span>, b<span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Kronecker product:\"</span>, r<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a<span class=\"sy0\">:</span> Matrix<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b<span class=\"sy0\">:</span> Matrix<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r<span class=\"sy0\">:</span> Matrix<br/>    a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    b <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    r <span class=\"sy0\">=</span> kroneckerProduct<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    printAll<span class=\"br0\">(</span>a, b, r<span class=\"br0\">)</span><br/>\u00a0<br/>    a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    b <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    r <span class=\"sy0\">=</span> kroneckerProduct<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>    printAll<span class=\"br0\">(</span>a, b, r<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 21, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> prod<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>PRODUCT:\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>a <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>b <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>a<span class=\"br0\">[</span>m<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">for</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>b<span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span> <span class=\"st0\">\"%3d \"</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>            <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"coMULTI\">--[[entry point]]</span><span class=\"co1\">--</span><br/>a <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> b <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>prod<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span>      <br/>a <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>b <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>prod<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">KroneckerProduct[{{1, 2}, {3, 4}}, {{0, 5}, {6, 7}}]//MatrixForm<br/>\u00a0<br/>KroneckerProduct[{{0, 1, 0}, {1, 1, 1}, {0, 1, 0}}, <br/> {{1, 1, 1, 1}, {1, 0, 0, 1}, {1, 1, 1, 1}}]//MatrixForm</pre>"}, {"lang": "Octave", "loc": 20, "block": "<pre class=\"octave highlighted_source\"><span class=\"sy0\">&gt;&gt;</span> <a href=\"http://octave.sourceforge.net/octave/function/kron.html\"><span class=\"kw6\">kron</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"sy5\">;</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">5</span><span class=\"sy5\">;</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">ans</span> <span class=\"sy3\">=</span><br/>\u00a0<br/>    <span class=\"nu0\">0</span>    <span class=\"nu0\">5</span>    <span class=\"nu0\">0</span>   <span class=\"nu0\">10</span><br/>    <span class=\"nu0\">6</span>    <span class=\"nu0\">7</span>   <span class=\"nu0\">12</span>   <span class=\"nu0\">14</span><br/>    <span class=\"nu0\">0</span>   <span class=\"nu0\">15</span>    <span class=\"nu0\">0</span>   <span class=\"nu0\">20</span><br/>   <span class=\"nu0\">18</span>   <span class=\"nu0\">21</span>   <span class=\"nu0\">24</span>   <span class=\"nu0\">28</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;</span> <a href=\"http://octave.sourceforge.net/octave/function/kron.html\"><span class=\"kw6\">kron</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">ans</span> <span class=\"sy3\">=</span><br/>\u00a0<br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span><br/>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span><br/>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span><br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span><br/>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span>   <span class=\"nu0\">0</span></pre>"}, {"lang": "PARI/GP", "loc": 29, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Print title and matrix mat rows. 4/17/16 aev</span><br/>matprows<span class=\"br0\">(</span>title<span class=\"sy0\">,</span>mat<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>title<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#mat<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>mat<span class=\"br0\">[</span>i<span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"co1\">\\\\ </span><br/><span class=\"co1\">\\\\ Create and return the Kronecker product of the a and b matrices. 4/17/16 aev</span><br/>matkronprod<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>pflg<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>m<span class=\"sy0\">=</span>#a<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>n<span class=\"sy0\">=</span>#a<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>p<span class=\"sy0\">=</span>#b<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>q<span class=\"sy0\">=</span>#b<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>r<span class=\"sy0\">,</span>rtn<span class=\"sy0\">,</span>ctn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>rtn<span class=\"sy0\">=</span>m<span class=\"sy0\">*</span>p<span class=\"sy0\">;</span> ctn<span class=\"sy0\">=</span>n<span class=\"sy0\">*</span>q<span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Kronecker product - a: \"</span><span class=\"sy0\">,</span>m<span class=\"sy0\">,</span><span class=\"st0\">\" x \"</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" b: \"</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span><span class=\"st0\">\" x \"</span><span class=\"sy0\">,</span>q<span class=\"sy0\">,</span><span class=\"st0\">\" result r: \"</span><span class=\"sy0\">,</span>rtn<span class=\"sy0\">,</span><span class=\"st0\">\" x \"</span><span class=\"sy0\">,</span>ctn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>r<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>rtn<span class=\"sy0\">,</span>ctn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>m<span class=\"sy0\">,</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>l<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>q<span class=\"sy0\">,</span><br/>    r<span class=\"br0\">[</span>p<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>k<span class=\"sy0\">,</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>l<span class=\"br0\">]</span><span class=\"sy0\">=</span>a<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">*</span>b<span class=\"br0\">[</span>k<span class=\"sy0\">,</span>l<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">\\\\all4fend</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>pflg<span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"co1\">\\\\ Requireq tests:</span><br/>my<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">\\\\ Sample 1</span><br/>a<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>b<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">;</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>r<span class=\"sy0\">=</span>matkronprod<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>matprows<span class=\"br0\">(</span><span class=\"st0\">\"Sample 1 result:\"</span><span class=\"sy0\">,</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">\\\\ Sample 2</span><br/>a<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>b<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>r<span class=\"sy0\">=</span>matkronprod<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>matprows<span class=\"br0\">(</span><span class=\"st0\">\"Sample 2 result:\"</span><span class=\"sy0\">,</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 32, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> PDL<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> PDL<span class=\"sy0\">::</span><span class=\"me2\">NiceSlice</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> kron<span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$A</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$B</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r0</span><span class=\"sy0\">,</span> <span class=\"re0\">$c0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dims</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$r1</span><span class=\"sy0\">,</span> <span class=\"re0\">$c1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$B</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">dims</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$kron</span> <span class=\"sy0\">=</span> zeroes<span class=\"br0\">(</span><span class=\"re0\">$r0</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r1</span><span class=\"sy0\">,</span> <span class=\"re0\">$c0</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$r0</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$c0</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$kron</span><span class=\"br0\">(</span><br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$r1</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c1</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">)</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$A</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$B</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$kron</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@mats</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>\t<span class=\"br0\">[</span>pdl<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> pdl<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">[</span>pdl<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> pdl<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$mat</span><span class=\"br0\">(</span><span class=\"re0\">@mats</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"A = $mat-&gt;[0]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"B = $mat-&gt;[1]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"kron(A,B) = \"</span> <span class=\"sy0\">.</span> kron<span class=\"br0\">(</span><span class=\"re0\">$mat</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$mat</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> kronecker_product <span class=\"br0\">(</span> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span> <span class=\"kw1\">X</span> <span class=\"re0\">@b</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"kw1\">X</span><span class=\"sy0\">*</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> kronecker_product<span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"sy0\">&gt;,</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                           <span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"nu0\">5</span><span class=\"sy0\">&gt;,</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">6</span> <span class=\"nu0\">7</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> kronecker_product<span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;,</span>   <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;,</span>   <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span>  <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                           <span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;,</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;,</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 108, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">DataSection</span><br/>  Matrix_A_B_Dimension_Bsp1:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">2</span>,<span class=\"nu0\">2</span>,?MatrixA_Werte_Bsp1,<span class=\"nu0\">2</span>,<span class=\"nu0\">2</span>,?MatrixB_Werte_Bsp1<br/>\u00a0<br/>  Matrix_A_B_Dimension_Bsp2:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">3</span>,<span class=\"nu0\">3</span>,?MatrixA_Werte_Bsp2,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,?MatrixB_Werte_Bsp2<br/>\u00a0<br/>  MatrixA_Werte_Bsp1:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><br/>\u00a0<br/>  MatrixA_Werte_Bsp2:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><br/>\u00a0<br/>  MatrixB_Werte_Bsp1:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">0</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span><br/>\u00a0<br/>  MatrixB_Werte_Bsp2:<br/>  <span class=\"kw1\">Data</span>.i <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">Define</span>.i ma, na, mb, nb, adr1, adr2, i, j, k, l<br/><span class=\"kw1\">Define</span> mk$<br/>\u00a0<br/><span class=\"kw1\">Gosub</span> Bsp1_Matrix_A_B\u00a0: <span class=\"kw1\">Gosub</span> LoadMatrix\u00a0: <span class=\"kw1\">Gosub</span> Bsp2_Matrix_A_B\u00a0: <span class=\"kw1\">Gosub</span> LoadMatrix\u00a0: <span class=\"kw1\">End</span><br/>\u00a0<br/>LoadMatrix:<br/><span class=\"kw1\">Read</span>.i ma<br/><span class=\"kw1\">Read</span>.i na<br/><span class=\"kw1\">Read</span>.i adr1<br/><span class=\"kw1\">Read</span>.i mb<br/><span class=\"kw1\">Read</span>.i nb<br/><span class=\"kw1\">Read</span>.i adr2<br/>\u00a0<br/><span class=\"kw1\">Dim</span> mxa.i<span class=\"br0\">(</span>ma,na<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> mxb.i<span class=\"br0\">(</span>mb,nb<span class=\"br0\">)</span><br/>NewMap mxc.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ma<br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> na<br/>    mxa<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">=</span>PeekI<span class=\"br0\">(</span>adr1<span class=\"br0\">)</span><br/>    adr1<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mb<br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nb<br/>    mxb<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">=</span>PeekI<span class=\"br0\">(</span>adr2<span class=\"br0\">)</span><br/>    adr2<span class=\"sy0\">+</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Kronecker product\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix A:\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ma <span class=\"co1\">; Zeile</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> na <span class=\"co1\">; Spalte</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>mxa<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix B:\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mb <span class=\"co1\">; Zeile</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nb <span class=\"co1\">; Spalte</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>mxb<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Matrix C=AxB\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ma <span class=\"co1\">; Zeile MA</span><br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> na <span class=\"co1\">; Spalte MA</span><br/>    <span class=\"kw1\">For</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mb <span class=\"co1\">; Zeile MB</span><br/>      <span class=\"kw1\">For</span> l<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nb <span class=\"co1\">; Spalte MB        </span><br/>        mxc<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>mxa<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy0\">*</span>mxb<span class=\"br0\">(</span>k,l<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> ma <span class=\"co1\">; Zeile MA</span><br/>  <span class=\"kw1\">For</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mb<span class=\"co1\">; Zeile MB</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> na <span class=\"co1\">; Spalte MA</span><br/>      <span class=\"kw1\">For</span> l<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> nb <span class=\"co1\">; Spalte MB</span><br/>        mk$<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\",\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> FindMapElement<span class=\"br0\">(</span>mxc<span class=\"br0\">(</span><span class=\"br0\">)</span>,mk$<span class=\"br0\">)</span>        <br/>          <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>mxc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span>        <br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span>    <br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press return\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>Bsp1_Matrix_A_B:<br/>  <span class=\"kw1\">Restore</span> Matrix_A_B_Dimension_Bsp1<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>Bsp2_Matrix_A_B:<br/>  <span class=\"kw1\">Restore</span> Matrix_A_B_Dimension_Bsp2<br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Python", "loc": 41, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python3</span><br/>\u00a0<br/><span class=\"co1\"># Sample 1</span><br/>a1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>b1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Sample 2</span><br/>a2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>b2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> kronecker<span class=\"br0\">(</span>matrix1<span class=\"sy0\">,</span> matrix2<span class=\"br0\">)</span>:<br/>    final_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    sub_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    count <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>matrix2<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> elem1 <span class=\"kw1\">in</span> matrix1:<br/>        counter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        check <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">while</span> check <span class=\"sy0\">&lt;</span> count:<br/>            <span class=\"kw1\">for</span> num1 <span class=\"kw1\">in</span> elem1:<br/>                <span class=\"kw1\">for</span> num2 <span class=\"kw1\">in</span> matrix2<span class=\"br0\">[</span>counter<span class=\"br0\">]</span>:<br/>                    sub_list.<span class=\"me1\">append</span><span class=\"br0\">(</span>num1 * num2<span class=\"br0\">)</span><br/>            counter +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            final_list.<span class=\"me1\">append</span><span class=\"br0\">(</span>sub_list<span class=\"br0\">)</span><br/>            sub_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            check +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> final_list<br/>\u00a0<br/><span class=\"co1\"># Result 1</span><br/>result1 <span class=\"sy0\">=</span> kronecker<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span> b1<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> elem <span class=\"kw1\">in</span> result1:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Result 2</span><br/>result2 <span class=\"sy0\">=</span> kronecker<span class=\"br0\">(</span>a2<span class=\"sy0\">,</span> b2<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> elem <span class=\"kw1\">in</span> result2:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>## Sample using:<br/>a &lt;- matrix(c(1,1,1,1), ncol=2, nrow=2, byrow=TRUE);<br/>b &lt;- matrix(c(0,1,1,0), ncol=2, nrow=2, byrow=TRUE);<br/>a\u00a0%x% b<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 33, "block": "<pre class=\"text highlighted_source\">#lang typed/racket/base<br/>\u00a0<br/>(require math/array<br/>         math/matrix<br/>         racket/match)<br/>\u00a0<br/>(define-type (M A) (Matrix A))<br/>\u00a0<br/>(define #:forall (A B C) (general-\u2297 [m1\u00a0: (M A)] [m2\u00a0: (M B)] [\u00d7\u00a0: (A B -&gt; C)])\u00a0: (M C)<br/>  (match-let* ((`(#(,rs1 ,cs1) . #(,rs2 ,cs2)) (cons (array-shape m1) (array-shape m2)))<br/>               (rs (* rs1 rs2))<br/>               (cs (* cs1 cs2)))<br/>    (for*/matrix: rs cs ((r (in-range rs)) (c (in-range cs)))\u00a0: C<br/>      (let-values (((rq rr) (quotient/remainder r rs2))<br/>                   ((cq cr) (quotient/remainder c cs2)))<br/>        (\u00d7 (array-ref m1 (vector rq cq)) (array-ref m2 (vector rr cr)))))))<br/>\u00a0<br/>;; Narrow to Number<br/>(define (Kronecker-product [m1\u00a0: (M Number)] [m2\u00a0: (M Number)]) (general-\u2297 m1 m2 *))<br/>\u00a0<br/>;; ---------------------------------------------------------------------------------------------------<br/>(module+ test<br/>  (Kronecker-product (matrix [[1 2]<br/>                              [3 4]])<br/>                     (matrix [[0 5]<br/>                              [6 7]]))<br/>\u00a0<br/>  (Kronecker-product (matrix [[0 1 0]<br/>                              [1 1 1]<br/>                              [0 1 0]])<br/>                     (matrix [[1 1 1 1]<br/>                              [1 0 0 1]<br/>                              [1 1 1 1]])))</pre>"}, {"lang": "REXX", "loc": 45, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the   Kronecker product   of   two arbitrary size   matrices. */</span><br/>w=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*W:  max width of any matrix element. */</span><br/>     aMat= 2x2  <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span>                          <span class=\"coMULTI\">/*define  A  matrix size  and elements.*/</span><br/>     bMat= 2x2  <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span>                          <span class=\"coMULTI\">/*   \"    B     \"     \"    \"     \"     */</span><br/><span class=\"kw1\">call</span> makeMat <span class=\"st0\">'A'</span>, aMat                           <span class=\"coMULTI\">/*construct   A   matrix from elements.*/</span><br/><span class=\"kw1\">call</span> makeMat <span class=\"st0\">'B'</span>, bMat                           <span class=\"coMULTI\">/*    \"       B      \"     \"     \"     */</span><br/><span class=\"kw1\">call</span> KronMat <span class=\"st0\">'Kronecker product'</span>                 <span class=\"coMULTI\">/*calculate the  Kronecker  product.   */</span><br/>w=<span class=\"nu0\">0</span>;       <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2591'</span>, <span class=\"nu0\">55</span><span class=\"br0\">)</span>;    <span class=\"kw1\">say</span>  <span class=\"coMULTI\">/*display a fence between the 2 outputs*/</span><br/>     aMat= 3x3  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>                <span class=\"coMULTI\">/*define  A  matrix size  and elements.*/</span><br/>     bMat= 3x4  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>          <span class=\"coMULTI\">/*   \"    B     \"     \"    \"     \"     */</span><br/><span class=\"kw1\">call</span> makeMat <span class=\"st0\">'A'</span>, aMat                           <span class=\"coMULTI\">/*construct   A   matrix from elements.*/</span><br/><span class=\"kw1\">call</span> makeMat <span class=\"st0\">'B'</span>, bMat                           <span class=\"coMULTI\">/*    \"       B      \"     \"     \"     */</span><br/><span class=\"kw1\">call</span> KronMat <span class=\"st0\">'Kronecker product'</span>                 <span class=\"coMULTI\">/*calculate the  Kronecker  product.   */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>KronMat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what;                  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  @<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>shape   aRows aCols<br/>         #=<span class=\"nu0\">0</span>;                             <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  @<span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>shape   bRows bCols<br/>               <span class=\"kw1\">do</span>       rA=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> aRows<br/>                 <span class=\"kw1\">do</span>     rB=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> bRows;  #=#+<span class=\"nu0\">1</span>;          ##=<span class=\"nu0\">0</span>;        _=<br/>                   <span class=\"kw1\">do</span>   cA=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> aCols;  <a class=\"__cf_email__\" data-cfemail=\"e49cd9a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>rA<span class=\"sy0\">.</span>cA<br/>                     <span class=\"kw1\">do</span> cB=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> bCols;  <a class=\"__cf_email__\" data-cfemail=\"d3aaee93\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>b<span class=\"sy0\">.</span>rB<span class=\"sy0\">.</span>cB;    ##=##+<span class=\"nu0\">1</span>;     xy=x<span class=\"sy0\">*</span>y;      _=_ xy<br/>                     @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>#<span class=\"sy0\">.</span>##=xy;      w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>xy<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cB*/</span><br/>                   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*cA*/</span><br/>                 <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*rB*/</span><br/>               <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*rA*/</span><br/>         <span class=\"kw1\">call</span> showMat what, aRows<span class=\"sy0\">*</span>bRows <span class=\"sy0\">||</span> <span class=\"st0\">'X'</span> <span class=\"sy0\">||</span> aRows<span class=\"sy0\">*</span>bCols;         <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>makeMat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what, size elements;   <span class=\"kw1\">arg</span> , row <span class=\"st0\">'X'</span> col <span class=\"sy0\">.</span>;       @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>shape=row  col<br/>         #=<span class=\"nu0\">0</span>;    <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> row               <span class=\"coMULTI\">/* [\u2193]  bump item#; get item; max width*/</span><br/>                   <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> col;   #=#+<span class=\"nu0\">1</span>;   _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>elements, #<span class=\"br0\">)</span>;   w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w, <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                   @<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=_<br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                   <span class=\"coMULTI\">/* [\u2191] define an element of WHAT matrix*/</span><br/>                 <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>         <span class=\"kw1\">call</span> showMat what, size;         <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showMat: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what, size <span class=\"sy0\">.</span>;  z=<span class=\"st0\">'\u250c'</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  size  row  <span class=\"st0\">\"X\"</span>  col;    $=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">say</span>;                             <span class=\"kw1\">say</span> $ <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"st0\">\"matrix\"</span> what  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> row;  _= <span class=\"st0\">'\u2502'</span><br/>                <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> col;  _=_  <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>what<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c, w<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> r==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> z=z <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,w<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>              <span class=\"kw1\">if</span> r==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; z=z <span class=\"st0\">'\u2510'</span>;  <span class=\"kw1\">say</span> $ $ z;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*show the top part of matrix.*/</span><br/>              <span class=\"kw1\">say</span> $ $ _ <span class=\"st0\">'\u2502'</span><br/>              <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>         <span class=\"kw1\">say</span> $ $ <span class=\"kw6\">translate</span><span class=\"br0\">(</span>z, <span class=\"st0\">'\u2514\u2518'</span>, <span class=\"st0\">\"\u250c\u2510\"</span><span class=\"br0\">)</span>;   <span class=\"kw1\">return</span>       <span class=\"coMULTI\">/*show the bot part of matrix.*/</span></pre>"}, {"lang": "Ring", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Kronecker product<br/>\u00a0<br/>a = [[1, 2], [3, 4]]<br/>b = [[0, 5], [6, 7]]<br/>la1 = 1<br/>ua1 = 2<br/>la2 = 1<br/>ua2 = 2<br/>lb1 = 1<br/>ub1 = 2<br/>lb2 = 1<br/>ub2 = 2<br/>kroneckerproduct(a,b)<br/>see nl<br/>\u00a0<br/>la1 = 1<br/>ua1 = 3<br/>la2 = 1<br/>ua2 = 3<br/>lb1 = 1<br/>ub1 = 3<br/>lb2 = 1<br/>ub2 = 3<br/>x = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]<br/>y = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]]<br/>kroneckerproduct(x, y)<br/>\u00a0<br/>func kroneckerproduct(a,b)<br/>\u00a0<br/>\u00a0<br/>for i = la1 to ua1<br/>      for k = lb1 to ub1<br/>            see \"[\"<br/>            for j = la2 to ua2<br/>                 for l = lb2 to ub2<br/>                       see a[i][j] * b[k][l] <br/>                       if j = ua1 and l = ub2<br/>                          see \"]\" + nl<br/>                       else<br/>                          see \" \"<br/>                       ok<br/>                 next<br/>            next<br/>      next<br/>next<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func kronecker_product<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a ~X b <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span> _<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> ~X<span class=\"sy0\">*</span> _<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>kronecker_product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>                  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">''</span><br/>kronecker_product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span>,  <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,   <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>                  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 151, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    PROCEDURE OUTMATRIX(A, W); INTEGER ARRAY A; INTEGER W;<br/>    BEGIN<br/>        INTEGER I, J;<br/>        INTEGER LA1, UA1;<br/>        INTEGER LA2, UA2;<br/>\u00a0<br/>        LA1\u00a0:= LOWERBOUND(A, 1); UA1\u00a0:= UPPERBOUND(A, 1);<br/>        LA2\u00a0:= LOWERBOUND(A, 2); UA2\u00a0:= UPPERBOUND(A, 2);<br/>\u00a0<br/>        FOR I\u00a0:= LA1 STEP 1 UNTIL UA1 DO<br/>        BEGIN<br/>            OUTTEXT(\"[\");<br/>            FOR J\u00a0:= LA2 STEP 1 UNTIL UA2 DO<br/>            BEGIN<br/>                IF NOT (J = LA2) THEN OUTCHAR(' ');<br/>                OUTINT(A(I, J), W)<br/>            END;<br/>            OUTTEXT(\"]\");<br/>            OUTIMAGE<br/>        END<br/>    END OUTMATRIX;<br/>\u00a0<br/>    PROCEDURE KRONECKERPRODUCT(A, B, C); INTEGER ARRAY A, B, C;<br/>    BEGIN<br/>        INTEGER I, J, K, L, CI, CJ;<br/>        INTEGER LA1, UA1;<br/>        INTEGER LA2, UA2;<br/>        INTEGER LB1, UB1;<br/>        INTEGER LB2, UB2;<br/>\u00a0<br/>        LA1\u00a0:= LOWERBOUND(A, 1); UA1\u00a0:= UPPERBOUND(A, 1);<br/>        LA2\u00a0:= LOWERBOUND(A, 2); UA2\u00a0:= UPPERBOUND(A, 2);<br/>        LB1\u00a0:= LOWERBOUND(B, 1); UB1\u00a0:= UPPERBOUND(B, 1);<br/>        LB2\u00a0:= LOWERBOUND(B, 2); UB2\u00a0:= UPPERBOUND(B, 2);<br/>\u00a0<br/>        CI\u00a0:= 1;<br/>        FOR I\u00a0:= LA1 STEP 1 UNTIL UA1 DO<br/>            FOR K\u00a0:= LB1 STEP 1 UNTIL UB1 DO<br/>            BEGIN<br/>                CJ\u00a0:= 1;<br/>                FOR J\u00a0:= LA2 STEP 1 UNTIL UA2 DO<br/>                    FOR L\u00a0:= LB2 STEP 1 UNTIL UB2 DO<br/>                    BEGIN<br/>                        C(CI, CJ)\u00a0:= A(I, J) * B(K, L);<br/>                        CJ\u00a0:= CJ + 1<br/>                    END;<br/>                CI\u00a0:= CI + 1<br/>            END<br/>    END KRONECKERPRODUCT;<br/>\u00a0<br/>   \u00a0! --- EXAMPLE 1 ---\u00a0;<br/>    BEGIN<br/>        INTEGER ARRAY A(1:2, 1:2);<br/>        INTEGER ARRAY B(1:2, 1:2);<br/>        INTEGER ARRAY C(1:4, 1:4);<br/>\u00a0<br/>\u00a0<br/>       \u00a0! {{1, 2}, {3, 4}}\u00a0;<br/>\u00a0<br/>        A(1, 1)\u00a0:= 1;<br/>        A(1, 2)\u00a0:= 2;<br/>\u00a0<br/>        A(2, 1)\u00a0:= 3;<br/>        A(2, 2)\u00a0:= 4;<br/>\u00a0<br/>       \u00a0! {{0, 5}, {6, 7}}\u00a0;<br/>\u00a0<br/>        B(1, 1)\u00a0:= 0;<br/>        B(1, 2)\u00a0:= 5;<br/>\u00a0<br/>        B(2, 1)\u00a0:= 6;<br/>        B(2, 2)\u00a0:= 7;<br/>\u00a0<br/>        OUTMATRIX(A, 2); OUTTEXT(\"   *\"); OUTIMAGE;<br/>        OUTMATRIX(B, 2); OUTTEXT(\"   =\"); OUTIMAGE;<br/>\u00a0<br/>        KRONECKERPRODUCT(A, B, C);<br/>\u00a0<br/>        OUTMATRIX(C, 2); OUTIMAGE<br/>\u00a0<br/>       \u00a0! OUTPUT:<br/>\u00a0<br/>       \u00a0! [ 0  5  0 10]<br/>       \u00a0! [ 6  7 12 14]<br/>       \u00a0! [ 0 15  0 20]<br/>       \u00a0! [18 21 24 28]\u00a0;<br/>\u00a0<br/>    END EXAMPLE 1;<br/>\u00a0<br/>   \u00a0! --- EXAMPLE 2 ---\u00a0;<br/>    BEGIN<br/>        INTEGER ARRAY X(1:3, 1:3);<br/>        INTEGER ARRAY Y(1:3, 1:4);<br/>        INTEGER ARRAY C(1:9, 1:12);<br/>\u00a0<br/>       \u00a0! {{0, 1, 0}, {1, 1, 1}, {0, 1, 0}}\u00a0;<br/>\u00a0<br/>        X(1,1)\u00a0:= 0;<br/>        X(1,2)\u00a0:= 1;<br/>        X(1,3)\u00a0:= 0;<br/>\u00a0<br/>        X(2,1)\u00a0:= 1;<br/>        X(2,2)\u00a0:= 1;<br/>        X(2,3)\u00a0:= 1;<br/>\u00a0<br/>        X(3,1)\u00a0:= 0;<br/>        X(3,2)\u00a0:= 1;<br/>        X(3,3)\u00a0:= 0;<br/>\u00a0<br/>      \u00a0! {{1, 1, 1, 1}, {1, 0, 0, 1}, {1, 1, 1, 1}}\u00a0;<br/>\u00a0<br/>        Y(1,1)\u00a0:= 1;<br/>        Y(1,2)\u00a0:= 1;<br/>        Y(1,3)\u00a0:= 1;<br/>        Y(1,4)\u00a0:= 1;<br/>\u00a0<br/>        Y(2,1)\u00a0:= 1;<br/>        Y(2,2)\u00a0:= 0;<br/>        Y(2,3)\u00a0:= 0;<br/>        Y(2,4)\u00a0:= 1;<br/>\u00a0<br/>        Y(3,1)\u00a0:= 1;<br/>        Y(3,2)\u00a0:= 1;<br/>        Y(3,3)\u00a0:= 1;<br/>        Y(3,4)\u00a0:= 1;<br/>\u00a0<br/>        OUTIMAGE;<br/>\u00a0<br/>        OUTMATRIX(X, 1); OUTTEXT(\"   *\"); OUTIMAGE;<br/>        OUTMATRIX(Y, 1); OUTTEXT(\"   =\"); OUTIMAGE;<br/>\u00a0<br/>        KRONECKERPRODUCT(X, Y, C);<br/>\u00a0<br/>        OUTMATRIX(C, 1); OUTIMAGE;<br/>\u00a0<br/>       \u00a0! OUTPUT:<br/>\u00a0<br/>       \u00a0! [0 0 0 0 1 1 1 1 0 0 0 0]<br/>       \u00a0! [0 0 0 0 1 0 0 1 0 0 0 0]<br/>       \u00a0! [0 0 0 0 1 1 1 1 0 0 0 0]<br/>       \u00a0! [1 1 1 1 1 1 1 1 1 1 1 1]<br/>       \u00a0! [1 0 0 1 1 0 0 1 1 0 0 1]<br/>       \u00a0! [1 1 1 1 1 1 1 1 1 1 1 1]<br/>       \u00a0! [0 0 0 0 1 1 1 1 0 0 0 0]<br/>       \u00a0! [0 0 0 0 1 0 0 1 0 0 0 0]<br/>       \u00a0! [0 0 0 0 1 1 1 1 0 0 0 0]\u00a0;<br/>\u00a0<br/>    END EXAMPLE 2;<br/>END</pre>"}, {"lang": "Stata", "loc": 33, "block": "<pre class=\"text highlighted_source\">. mata<br/>------------------------------------------------- mata (type end to exit) ----------<br/>: a=1,2\\3,4<br/>\u00a0<br/>: b=0,5\\6,7<br/>\u00a0<br/>: a#b<br/>        1    2    3    4<br/>    +---------------------+<br/>  1 |   0    5    0   10  |<br/>  2 |   6    7   12   14  |<br/>  3 |   0   15    0   20  |<br/>  4 |  18   21   24   28  |<br/>    +---------------------+<br/>\u00a0<br/>: a=0,1,0\\1,1,1\\0,1,0<br/>\u00a0<br/>: b=1,1,1,1\\1,0,0,1\\1,1,1,1<br/>\u00a0<br/>: a#b<br/>        1    2    3    4    5    6    7    8    9   10   11   12<br/>    +-------------------------------------------------------------+<br/>  1 |   0    0    0    0    1    1    1    1    0    0    0    0  |<br/>  2 |   0    0    0    0    1    0    0    1    0    0    0    0  |<br/>  3 |   0    0    0    0    1    1    1    1    0    0    0    0  |<br/>  4 |   1    1    1    1    1    1    1    1    1    1    1    1  |<br/>  5 |   1    0    0    1    1    0    0    1    1    0    0    1  |<br/>  6 |   1    1    1    1    1    1    1    1    1    1    1    1  |<br/>  7 |   0    0    0    0    1    1    1    1    0    0    0    0  |<br/>  8 |   0    0    0    0    1    0    0    1    0    0    0    0  |<br/>  9 |   0    0    0    0    1    1    1    1    0    0    0    0  |<br/>    +-------------------------------------------------------------+<br/>: end</pre>"}, {"lang": "SuperCollider", "loc": 40, "block": "<pre class=\"text highlighted_source\">// the iterative version is derived from the javascript one here:<br/>(<br/>f = { |a, b|<br/>\tvar m = a.size;<br/>\tvar n = a[0].size;<br/>\tvar p = b.size;<br/>\tvar q = b[0].size;<br/>\tvar rtn = m * p;<br/>\tvar ctn = n * q;<br/>\tvar res = { 0.dup(ctn) }.dup(rtn);<br/>\tm.do { |i|<br/>\t\tn.do { |j|<br/>\t\t\tp.do { |k|<br/>\t\t\t\tq.do { |l|<br/>\t\t\t\t\tres[p*i+k][q*j+l] = a[i][j] * b[k][l];<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t}<br/>\t};<br/>\tres<br/>};<br/>)<br/>\u00a0<br/>// Like APL/J, SuperCollider has applicative operators, so here is a shorter version.<br/>// the idea is to first replace every element of b with its product with all of a<br/>// and then reshape the matrix appropriately<br/>// note that +++ is lamination: [[1, 2, 3], [4, 5, 6]] +++ [100, 200] returns [ [ 1, 2, 3, 100 ], [ 4, 5, 6, 200 ] ].<br/>\u00a0<br/>(<br/>f = { |a, b|<br/>\ta.collect { |x|<br/>\t\tx.collect { |y| b * y }.reduce('+++')<br/>\t}.reduce('++')<br/>}<br/>)<br/>\u00a0<br/>// or shorter:<br/>(a *.2 b).collect(_.reduce('+++')).reduce('++')<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 65, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># some helpers for matrices in nice string form:</span><br/><span class=\"kw1\">proc</span> parse_matrix <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$s</span><span class=\"br0\">]</span> \\n<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> print_matrix <span class=\"br0\">{</span>m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$m</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap x <span class=\"re0\">$row</span> <span class=\"br0\">{</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>3s <span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># obvious imperative version using [foreach]</span><br/><span class=\"kw1\">proc</span> kroenecker <span class=\"br0\">{</span>A B<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> arow <span class=\"re0\">$A</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> brow <span class=\"re0\">$B</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> row <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw1\">foreach</span> a <span class=\"re0\">$arow</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> b <span class=\"re0\">$brow</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">lappend</span> row <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">lappend</span> result <span class=\"re0\">$row</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> lolcat <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span>    <span class=\"sy0\">;</span><span class=\"co1\"># see https://wiki.tcl.tk/41507</span><br/>    <span class=\"kw2\">concat</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> lmap <span class=\"re0\">$args</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span>                                           <br/>\u00a0<br/><span class=\"co1\"># more compact but obtuse, using [lmap] and [lolcat]</span><br/><span class=\"kw1\">proc</span> kroenecker <span class=\"br0\">{</span>A B<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    lolcat arow <span class=\"re0\">$A</span> <span class=\"br0\">{</span> <br/>        lmap brow <span class=\"re0\">$B</span> <span class=\"br0\">{</span><br/>            lolcat a <span class=\"re0\">$arow</span> <span class=\"br0\">{</span><br/>                lmap b <span class=\"re0\">$brow</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># demo:</span><br/><span class=\"kw1\">set</span> inputs <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><br/>     <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">5</span><br/>     <span class=\"nu0\">6</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>     <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>     <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>     <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>     <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"re0\">$inputs</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> a <span class=\"br0\">[</span>parse_matrix <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span>parse_matrix <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>    print_matrix <span class=\"br0\">[</span>kroenecker <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 78, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">' Kronecker product - 05/04/2017<br/></span><span class=\"kw4\">dim</span> a(),b(),r()<br/>\u00a0<br/><span class=\"kw2\">sub</span> kroneckerproduct <span class=\"co1\">'(a,b)<br/></span>    m=<span class=\"kw4\">ubound</span>(a,1): n=<span class=\"kw4\">ubound</span>(a,2)<br/>    p=<span class=\"kw4\">ubound</span>(b,1): q=<span class=\"kw4\">ubound</span>(b,2)<br/>    rtn=m*p<br/>    ctn=n*q<br/>    <span class=\"kw4\">redim</span> r(rtn,ctn) <br/>    <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> m<br/>        <span class=\"kw3\">for</span> j=1 <span class=\"kw3\">to</span> n<br/>            <span class=\"kw3\">for</span> k=1 <span class=\"kw3\">to</span> p<br/>                <span class=\"kw3\">for</span> l=1 <span class=\"kw3\">to</span> q<br/>                    r(p*(i-1)+k,q*(j-1)+l)=a(i,j)*b(k,l)  <br/>    <span class=\"kw3\">next</span>: <span class=\"kw3\">next</span>: <span class=\"kw3\">next</span>: <span class=\"kw3\">next</span><br/><span class=\"kw3\">end</span> <span class=\"kw2\">sub</span> <span class=\"co1\">'kroneckerproduct<br/></span> <br/><span class=\"kw2\">sub</span> printmatrix(text,m,w)<br/>    wscript.stdout.writeline text<br/>    <span class=\"kw3\">select</span> <span class=\"kw3\">case</span> m<br/>        <span class=\"kw3\">case</span> <span class=\"st0\">\"a\"</span>: ni=<span class=\"kw4\">ubound</span>(a,1): nj=<span class=\"kw4\">ubound</span>(a,2)<br/>        <span class=\"kw3\">case</span> <span class=\"st0\">\"b\"</span>: ni=<span class=\"kw4\">ubound</span>(b,1): nj=<span class=\"kw4\">ubound</span>(b,2)<br/>        <span class=\"kw3\">case</span> <span class=\"st0\">\"r\"</span>: ni=<span class=\"kw4\">ubound</span>(r,1): nj=<span class=\"kw4\">ubound</span>(r,2)<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">select</span><br/>    <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> ni<br/>        <span class=\"kw3\">for</span> j=1 <span class=\"kw3\">to</span> nj<br/>            <span class=\"kw3\">select</span> <span class=\"kw3\">case</span> m<br/>                <span class=\"kw3\">case</span> <span class=\"st0\">\"a\"</span>: k=a(i,j)<br/>                <span class=\"kw3\">case</span> <span class=\"st0\">\"b\"</span>: k=b(i,j)<br/>                <span class=\"kw3\">case</span> <span class=\"st0\">\"r\"</span>: k=r(i,j)<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">select</span><br/>            wscript.stdout.write right(space(w)&amp;k,w)<br/>        <span class=\"kw3\">next</span><br/>        wscript.stdout.writeline<br/>    <span class=\"kw3\">next</span><br/><span class=\"kw3\">end</span> <span class=\"kw2\">sub</span> <span class=\"co1\">'printmatrix<br/></span> <br/><span class=\"kw2\">sub</span> printall(w)<br/>    printmatrix <span class=\"st0\">\"matrix a:\"</span>, <span class=\"st0\">\"a\"</span>, w <br/>    printmatrix <span class=\"st0\">\"matrix b:\"</span>, <span class=\"st0\">\"b\"</span>, w <br/>    printmatrix <span class=\"st0\">\"kronecker product:\"</span>, <span class=\"st0\">\"r\"</span>, w  <br/><span class=\"kw3\">end</span> <span class=\"kw2\">sub</span> <span class=\"co1\">'printall<br/></span> <br/><span class=\"kw2\">sub</span> main()<br/>    xa=array( 1, 2, _<br/>              3, 4)<br/>    <span class=\"kw4\">redim</span> a(2,2)<br/>    k=0: <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(a,1): <span class=\"kw3\">for</span> j=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(a,1)<br/>        a(i,j)=xa(k): k=k+1<br/>    <span class=\"kw3\">next</span>:<span class=\"kw3\">next</span><br/>    xb=array( 0, 5, _ <br/>              6, 7)<br/>    <span class=\"kw4\">redim</span> b(2,2)<br/>    k=0: <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(b,1): <span class=\"kw3\">for</span> j=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(b,1)<br/>        b(i,j)=xb(k): k=k+1<br/>    <span class=\"kw3\">next</span>:<span class=\"kw3\">next</span><br/>    kroneckerproduct<br/>    printall 3<br/>\u00a0<br/>    xa=array( 0, 1, 0, _ <br/>              1, 1, 1, _ <br/>              0, 1, 0)<br/>    <span class=\"kw4\">redim</span> a(3,3)<br/>    k=0: <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(a,1): <span class=\"kw3\">for</span> j=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(a,1)<br/>        a(i,j)=xa(k): k=k+1<br/>    <span class=\"kw3\">next</span>:<span class=\"kw3\">next</span><br/>    xb=array( 1, 1, 1, 1, _ <br/>              1, 0, 0, 1, _ <br/>              1, 1, 1, 1) <br/>    <span class=\"kw4\">redim</span> b(3,4)<br/>    k=0: <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(b,1): <span class=\"kw3\">for</span> j=1 <span class=\"kw3\">to</span> <span class=\"kw4\">ubound</span>(b,1)<br/>        b(i,j)=xb(k): k=k+1<br/>    <span class=\"kw3\">next</span>:<span class=\"kw3\">next</span><br/>    kroneckerproduct<br/>    printall 2<br/><span class=\"kw3\">end</span> <span class=\"kw2\">sub</span> <span class=\"co1\">'main<br/></span><br/>main</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import.lib(\"zklGSL\");    // libGSL (GNU Scientific Library)<br/>fcn kronecker(A,B){<br/>   m,n, p,q\u00a0:= A.rows,A.cols, B.rows,B.cols;<br/>   r:=GSL.Matrix(m*p, n*q);<br/>   foreach i,j,k,l in (m,n,p,q){ r[p*i + k, q*j + l]=A[i,j]*B[k,l] }<br/>   r<br/>}</pre>"}]}