{"task": "Hofstadter_Q_sequence", "blocks": [{"lang": "360 Assembly", "loc": 51, "block": "<pre class=\"text highlighted_source\">*        Hofstrader q sequence for any n -   18/10/2015<br/>HOFSTRAD CSECT<br/>         USING  HOFSTRAD,R15       set base register<br/>         MVC    Q,=F'1'            q(1)=1<br/>         MVC    Q+4,=F'1'          q(2)=1<br/>         LA     R4,1               i=1<br/>LOOPI    C      R4,N               do i=1 to n<br/>         BH     ELOOPI<br/>         C      R4,=F'3'           if i&gt;=3 then<br/>         BL     NOTREC<br/>         LR     R1,R4              i<br/>         SLA    R1,2               i*4<br/>         L      R2,Q-8(R1)         q(i-1)<br/>         LR     R1,R4              i<br/>         SR     R1,R2              i-q(i-1)<br/>         SLA    R1,2               *4<br/>         L      R2,Q-4(R1)         r2=q(i-q(i-1))<br/>         LR     R1,R4              i<br/>         SLA    R1,2               i*4<br/>         L      R3,Q-12(R1)        q(i-2)<br/>         LR     R1,R4              i<br/>         SR     R1,R3              i-q(i-2)<br/>         SLA    R1,2               *4<br/>         L      R3,Q-4(R1)         r3=q(i-q(i-2))<br/>         AR     R2,R3              r2=r2+r3<br/>         LR     R1,R4              i<br/>         SLA    R1,2               i*4<br/>         ST     R2,Q-4(R1)         q(i)=q(i-q(i-1))+q(i-q(i-2))<br/>NOTREC   C      R4,=F'10'          if i&lt;=10<br/>         BNH    PRT<br/>         C      R4,N               or i=n then<br/>         BNE    NOPRT<br/>PRT      XDECO  R4,XD              edit i<br/>         MVC    PG+2(4),XD+8       output i<br/>         LR     R1,R4              i<br/>         SLA    R1,2               i*4<br/>         L      R2,Q-4(R1)         q(i)<br/>         XDECO  R2,XD              edit q(i)<br/>         MVC    PG+10(4),XD+8      output q(i)<br/>         XPRNT  PG,80              print buffer<br/>NOPRT    LA     R4,1(R4)           i=i+1<br/>         B      LOOPI<br/>ELOOPI   XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>PG       DC     CL80'n=...., q=....'  buffer<br/>XD       DS     CL12               temporary variable<br/>         LTORG                     insert literals for addressability<br/>N        DC     F'1000'            n=1000<br/>Q        DS     1000F              array q(1000) <br/>         YREGS<br/>         END    HOFSTRAD</pre>"}, {"lang": "Ada", "loc": 59, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Hofstadter_Q_Sequence <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Callback <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">procedure</span><span class=\"br0\">(</span>N: Positive<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Q<span class=\"br0\">(</span>First, Last: Positive; Q_Proc: Callback<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- calls Q_Proc(Q(First)); Q_Proc(Q(First+1)); ... Q_Proc(Q(Last));</span><br/>   <span class=\"co1\">-- precondition: Last &gt; 2</span><br/>\u00a0<br/>      Q_Store: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Last</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span> =&gt; <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> =&gt; <span class=\"nu0\">1</span>, <span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"co1\">-- \"global\" array to store the Q(I)</span><br/>      <span class=\"co1\">-- if Q_Store(I)=0, we compute Q(I) and update Q_Store(I)</span><br/>      <span class=\"co1\">-- else we already know Q(I) = Q_Store(I)</span><br/>\u00a0<br/>      <span class=\"kw3\">function</span> Q<span class=\"br0\">(</span>N: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> Q_Store<span class=\"br0\">(</span>N<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Q_Store<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\u00a0:= Q<span class=\"br0\">(</span>N - Q<span class=\"br0\">(</span>N-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + Q<span class=\"br0\">(</span>N-Q<span class=\"br0\">(</span>N-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">return</span> Q_Store<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> Q;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> First .. <span class=\"me1\">Last</span> <span class=\"kw1\">loop</span><br/>         Q_Proc<span class=\"br0\">(</span>Q<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Q;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>P: Positive<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Positive'Image<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   Decrease_Counter: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   Previous_Value: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Decrease_Count<span class=\"br0\">(</span>P: Positive<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> P &lt; Previous_Value <span class=\"kw1\">then</span><br/>         Decrease_Counter\u00a0:= Decrease_Counter + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Previous_Value\u00a0:= P;<br/>   <span class=\"kw1\">end</span> Decrease_Count;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Q<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, Print'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- the first ten terms of the sequence are: 1, 1, 2, 3, 3, 4, 5, 5, 6, and 6</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   Q<span class=\"br0\">(</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">1000</span>,  Print'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- the 1000'th term is: 502</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   Q<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">100</span>_000, Decrease_Count'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Decrease_Counter<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- how many times a member of the sequence is less than its preceding term</span><br/>   <span class=\"co1\">-- for terms up to and including the 100,000'th term</span><br/><span class=\"kw1\">end</span> Hofstadter_Q_Sequence;</pre>"}, {"lang": "ALGOL 68", "loc": 24, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> n <span class=\"sy1\">=</span> 100000<span class=\"sy1\">;</span><br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>        <span class=\"kw3\">INT</span> <span class=\"kw20\">flip</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"kw3\">INT</span> q<span class=\"sy1\">;</span><br/>\u00a0<br/>        q<span class=\"br0\">[</span>1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> q<span class=\"br0\">[</span>2<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 3 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> q<span class=\"br0\">[</span>i <span class=\"sy1\">-</span> q<span class=\"br0\">[</span>i <span class=\"sy1\">-</span> 1<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> q<span class=\"br0\">[</span>i <span class=\"sy1\">-</span> q<span class=\"br0\">[</span>i <span class=\"sy1\">-</span> 2<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span><br/>                <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> $b<span class=\"br0\">(</span>l<span class=\"sy1\">,</span>x<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> i <span class=\"sy1\">=</span> 10<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> q<span class=\"br0\">[</span>1000<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw20\">flip</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> n<span class=\"sy1\">-</span>1 <span class=\"kw2\">DO</span><br/>                <span class=\"kw20\">flip</span> <span class=\"sy1\">+:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span>q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> q<span class=\"br0\">[</span>i <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"flips: \"</span>g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> <span class=\"kw20\">flip</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 20, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>Q <span class=\"sy0\">:=</span> HofsQSeq<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>\tOut <span class=\"sy0\">.=</span> Q<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"st0\">\", \"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"First ten:`t\"</span> Out <span class=\"st0\">\"`n\"</span> <br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"1000th:`t`t\"</span> Q<span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span> <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"Flips:`t`t\"</span> Q<span class=\"sy0\">.</span>flips<br/>\u00a0<br/>HofsQSeq<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tQ <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"flips\"</span>: <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>\t\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"sy0\">,</span>\tQ<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> Q<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tQ<span class=\"sy0\">.</span>flips<span class=\"sy0\">++</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> Q<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 22, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <br/>  N = <span class=\"nu0\">100000</span><br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"Q-sequence(1..10)\u00a0: \"</span> Qsequence<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  Qsequence<span class=\"br0\">(</span>N,Q<span class=\"br0\">)</span><br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"1000th number of Q sequence\u00a0: \"</span> Q<span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n=<span class=\"nu0\">2</span>; n<span class=\"sy2\">&lt;=</span>N; n<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Q<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy2\">&lt;</span>Q<span class=\"br0\">[</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> NN<span class=\"sy3\">++</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw5\">print</span> <span class=\"st0\">\"number of Q(n)&lt;Q(n+1) for n&lt;=100000\u00a0: \"</span> NN<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> Qsequence<span class=\"br0\">(</span>N,Q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  Q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>  Q<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span>  <br/>  seq = <span class=\"st0\">\"1 1\"</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n=<span class=\"nu0\">3</span>; n<span class=\"sy2\">&lt;=</span>N; n<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Q<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = Q<span class=\"br0\">[</span>n<span class=\"sy3\">-</span>Q<span class=\"br0\">[</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>Q<span class=\"br0\">[</span>n<span class=\"sy3\">-</span>Q<span class=\"br0\">[</span>n<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    seq = seq<span class=\"st0\">\" \"</span>Q<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">}</span> <br/>  <span class=\"kw6\">return</span> seq<br/><span class=\"br0\">}</span> </pre>"}, {"lang": "BBC BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">      PRINT \"First 10 terms of Q = \"\u00a0;<br/>      FOR i% = 1 TO 10\u00a0: PRINT\u00a0;FNq(i%, c%) \" \";\u00a0: NEXT\u00a0: PRINT<br/>      PRINT \"1000th term = \"\u00a0; FNq(1000, c%)<br/>      PRINT \"100000th term = \"\u00a0; FNq(100000, c%)<br/>      PRINT \"Term is less than preceding term \"\u00a0; c% \" times\"<br/>      END<br/>\u00a0<br/>      DEF FNq(n%, RETURN c%)<br/>      LOCAL i%,q%()<br/>      IF n% &lt; 3 THEN = 1 ELSE IF n% = 3 THEN = 2<br/>      DIM q%(n%)<br/>      q%(1) = 1\u00a0: q%(2) = 1\u00a0: q%(3) = 2<br/>      c% = 0<br/>      FOR i% = 3 TO n%<br/>        q%(i%) = q%(i% - q%(i%-1)) + q%(i% - q%(i%-2))<br/>        IF q%(i%) &lt; q%(i%-1) THEN c% += 1<br/>      NEXT<br/>      = q%(n%)</pre>"}, {"lang": "Bracmat", "loc": 32, "block": "<pre class=\"text highlighted_source\">( 0:?memocells<br/>&amp; tbl$(memo,!memocells+1) { allocate array }<br/>&amp; ( Q<br/>  =   <br/>    .  \u00a0!arg:(1|2)&amp;1<br/>      |  \u00a0!arg:&gt;2<br/>        &amp; (  \u00a0!arg:&gt;!memocells:?memocells               { Array is too small. }<br/>            &amp; tbl$(memo,!memocells+1)        { Let array grow to needed size. }<br/>          |                                         { Array is not too small. }<br/>          )<br/>        &amp; (\u00a0!(!arg$memo):&gt;0 { Set index to\u00a0!arg. Return value at index if &gt; 0 }<br/>          |   Q$(!arg+-1*Q$(!arg+-1))+Q$(!arg+-1*Q$(!arg+-2))<br/>           \u00a0:\u00a0?(!arg$?memo)      { Set index to\u00a0!arg. Store value just found. }<br/>          )<br/>  )<br/>&amp; 0:?i<br/>&amp;   whl<br/>  ' (1+!i:~&gt;10:?i&amp;put$(str$(Q$!i \" \")))<br/>&amp; put$\\n<br/>&amp; whl'(1+!i:~&gt;1000:?i&amp;Q$!i)<br/>&amp; out$(Q$1000)<br/>&amp; 0:?previous:?lessThan:?i<br/>&amp;   whl<br/>  ' ( 1+!i:~&gt;100000:?i<br/>    &amp;   Q$!i<br/>     \u00a0: ( &lt;!previous&amp;1+!lessThan:?lessThan<br/>        |\u00a0?<br/>        )<br/>     \u00a0:\u00a0?previous<br/>    )<br/>&amp; out$!lessThan<br/>);</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define N 100000</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> flip<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> N<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tq<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d%c\"</span><span class=\"sy0\">,</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">10</span> <span class=\"sy0\">?</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> q<span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>flip <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tflip <span class=\"sy0\">+=</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> q<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"flips:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> flip<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> size <span class=\"sy1\">=</span> <span class=\"nu0\">100000</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> hofstadters<span class=\"br0\">[</span>size<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span>  <br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">3</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <br/>      hofstadters<span class=\"br0\">[</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy1\">=</span> hofstadters<span class=\"br0\">[</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">-</span> hofstadters<span class=\"br0\">[</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy2\">+</span><br/>                             hofstadters<span class=\"br0\">[</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy2\">-</span> hofstadters<span class=\"br0\">[</span> i <span class=\"sy2\">-</span> <span class=\"nu0\">2</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The first 10 numbers are: \"</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> hofstadters<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The 1000'th term is \"</span> <span class=\"sy1\">&lt;&lt;</span> hofstadters<span class=\"br0\">[</span> <span class=\"nu0\">999</span> <span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> less_than_preceding <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hofstadters<span class=\"br0\">[</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy1\">&lt;</span> hofstadters<span class=\"br0\">[</span> i <span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>\t     less_than_preceding<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"In array of size: \"</span> <span class=\"sy1\">&lt;&lt;</span> size <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> less_than_preceding <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" times a number was preceded by a greater number!\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 64, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace HofstadterQSequence<br/><span class=\"br0\">{</span><br/>    class Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Initialize the dictionary with the first two indices filled.</span><br/>        private <span class=\"kw4\">static</span> readonly Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> int<span class=\"sy0\">&gt;</span> QList <span class=\"sy0\">=</span> new Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> int<span class=\"sy0\">&gt;</span><br/>                                                                 <span class=\"br0\">{</span><br/>                                                                     <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                                                                     <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>                                                                 <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> lessThanLast <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"coMULTI\">/* Initialize our variable that holds the number of times<br/>                                   * a member of the sequence was less than its preceding term. */</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">100000</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> Q<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Get Q(n).</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> QList<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> q<span class=\"br0\">)</span> <span class=\"co1\">// If Q(n) is less than Q(n - 1),</span><br/>                    lessThanLast<span class=\"sy0\">++;</span>            <span class=\"co1\">// then add to the counter.</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">!=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* If n is greater than 10 and not 1000,<br/>                                                    * the rest of the code in the loop does not apply,<br/>                                                    * and it will be skipped. */</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>Confirm<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Confirm Q(n) is correct.</span><br/>                    throw new Exception<span class=\"br0\">(</span>string.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid result: Q({0})\u00a0!= {1}\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Q({0}) = {1}\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Write Q(n) to the console.</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Number of times a member of the sequence was less than its preceding term: {0}.\"</span><span class=\"sy0\">,</span><br/>                              lessThanLast<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> bool Confirm<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> value<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> new<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> value<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">502</span> <span class=\"sy0\">==</span> value<span class=\"sy0\">;</span><br/>            throw new ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid index.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"n\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> Q<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> q<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>QList.<span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> out q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Try to get Q(n) from the dictionary.</span><br/>            <span class=\"br0\">{</span><br/>                q <span class=\"sy0\">=</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// If it's not available, then calculate it.</span><br/>                QList.<span class=\"me1\">Add</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Add it to the dictionary.</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> q<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> qs <span class=\"br0\">[</span>q<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">count</span> q<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">condp</span> <span class=\"sy0\">=</span> n<br/>      <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>      <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">conj</span> q <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"br0\">(</span>q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"br0\">(</span>q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> qfirst <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> qs <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>nth n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"first 10:\"</span> <span class=\"br0\">(</span>qfirst <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"1000th:\"</span> <span class=\"br0\">(</span>last <span class=\"br0\">(</span>qfirst <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"extra credit:\"</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>qfirst <span class=\"nu0\">100000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">partition</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">count</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">hofstadterQ = do <span class=\"sy0\">-&gt;</span><br/>  memo = <span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  Q = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    result = memo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">typeof</span> result <span class=\"sy0\">!</span>= <span class=\"st0\">'number'</span><br/>      result = memo<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    result<br/>\u00a0<br/><span class=\"co1\"># some results:</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">'Q('</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">') = '</span> <span class=\"sy0\">+</span> hofstadterQ<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">'Q(1000) = '</span> <span class=\"sy0\">+</span> hofstadterQ<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defparameter *mm* <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> #'<span class=\"kw1\">equal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; generic memoization macro</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> defun-memoize <span class=\"br0\">(</span>f <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> <span class=\"kw1\">hash</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> `<span class=\"br0\">(</span>gethash <span class=\"br0\">(</span><span class=\"kw1\">cons</span> '<span class=\"sy0\">,</span>f <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">,</span>@args<span class=\"br0\">)</span><span class=\"br0\">)</span> *mm*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>h <span class=\"br0\">(</span><span class=\"kw1\">gensym</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"sy0\">,</span>f <span class=\"br0\">(</span><span class=\"sy0\">,</span>@args<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>h <span class=\"br0\">(</span><span class=\"kw1\">hash</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"sy0\">,</span>h <span class=\"sy0\">,</span>h<br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">hash</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; def q</span><br/><span class=\"br0\">(</span>defun-memoize q <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- n <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- n <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; test</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"First of Q: ~a~%Q(1000): ~a~%Bumps up to 100000: ~a~%\"</span><br/>\t<span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to <span class=\"nu0\">10</span> collect <span class=\"br0\">(</span>q i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>q <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop with c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> with last-q <span class=\"sy0\">=</span> <span class=\"br0\">(</span>q <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t      for i from <span class=\"nu0\">2</span> to <span class=\"nu0\">100000</span><br/>\t      <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>next-q <span class=\"br0\">(</span>q i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> next-q last-q<span class=\"br0\">)</span> <span class=\"br0\">(</span>incf c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> last-q next-q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> Q<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> mQ <span class=\"sy0\">=</span> memoize<span class=\"sy0\">!</span>Q<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> mQ<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> mQ<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> mQ<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> mQ<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Q(n) for n = [1..10] is: \"</span><span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Q(1000) = \"</span><span class=\"sy0\">,</span> Q<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Q(i) is less than Q(i-1) for i [2..100_000]\u00a0%d times.\"</span><span class=\"sy0\">,</span><br/>             iota<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span>_001<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> Q<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 8, "block": "<pre class=\"text highlighted_source\">int Q(int n) =&gt; n&gt;2\u00a0? Q(n-Q(n-1))+Q(n-Q(n-2))\u00a0: 1;<br/>\u00a0<br/>main() {<br/>  for(int i=1;i&lt;=10;i++) {<br/>    print(\"Q($i)=${Q(i)}\");<br/>  }<br/>  print(\"Q(1000)=${Q(1000)}\");<br/>}</pre>"}, {"lang": "EchoLisp", "loc": 25, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> RECURSE_BUMP <span class=\"nu0\">500</span><span class=\"br0\">)</span> <span class=\"co1\">;; minimum of chrome:500 safari:1000 firefox:2000</span><br/>\u00a0<br/><span class=\"co1\">;; count flips</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>flips N<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>sum <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:when <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>Q n<span class=\"br0\">)</span> <span class=\"br0\">(</span>Q <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>cache<span class=\"sy0\">-</span>size <span class=\"nu0\">120000</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>Q n<span class=\"br0\">)</span><br/>\t<span class=\"co1\">;; prevent browser stack overflow at low-cost</span><br/>\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> n RECURSE_BUMP<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">0</span> n RECURSE_BUMP <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Q i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>Q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"br0\">(</span>Q <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"br0\">(</span>Q <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>remember 'Q #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; memoize and init</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; first call\u00a0: check stack OK</span><br/><span class=\"br0\">(</span>Q <span class=\"nu0\">100000</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">48157</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>Q i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">6</span><br/>\u00a0<br/><span class=\"br0\">(</span>Q <span class=\"nu0\">1000</span><span class=\"br0\">)</span>  \u2192 <span class=\"nu0\">502</span><br/><span class=\"br0\">(</span>flips <span class=\"nu0\">100000</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">49798</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 63, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Test output of the feature hofstadter_q_sequence.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount, i<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\ttest<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>First ten numbers: <span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\ttest <span class=\"sy0\">:=</span> hofstadter_q_sequence <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t\t\tacross<br/>\t\t\t\ttest <span class=\"kw2\">as</span> ar<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>ar.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\ttest <span class=\"sy0\">:=</span> hofstadter_q_sequence <span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"1000th:<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>test <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>Number of Flips:<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> <span class=\"nu0\">100000</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> test <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> test <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\thofstadter_q_sequence <span class=\"br0\">(</span>lim<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Hofstadter Q Sequence up to 'lim'.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tlim_positive<span class=\"sy0\">:</span> lim <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tq<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, lim<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> lim<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"kw3\">Result</span> <span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule Hofstadter do<br/>  defp flip(v2, v1) when v1 &gt; v2, do: 1<br/>  defp flip(_v2, _v1), do: 0<br/>\u00a0<br/>  defp list_terms(max, n, acc), do: Enum.map_join(n..max, \", \", &amp;acc[&amp;1])<br/>\u00a0<br/>  defp hofstadter(n, n, acc, flips) do<br/>    IO.puts \"The first ten terms are: #{list_terms(10, 1, acc)}\"<br/>    IO.puts \"The 1000'th term is #{acc[1000]}\"<br/>    IO.puts \"Number of flips: #{flips}\"<br/>  end<br/>  defp hofstadter(max, n, acc, flips) do<br/>    qn1 = acc[n-1]<br/>    qn = acc[n - qn1] + acc[n - acc[n-2]]<br/>    hofstadter(max, n+1, Map.put(acc, n, qn), flips + flip(qn, qn1))<br/>  end<br/>\u00a0<br/>  def main(max \\\\ 100_000) do<br/>    acc =\u00a0%{1 =&gt; 1, 2 =&gt; 1}<br/>    hofstadter(max+1, 3, acc, 0)<br/>  end<br/>end<br/>\u00a0<br/>Hofstadter.main</pre>"}, {"lang": "Erlang", "loc": 31, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">%% @author Jan Willem Luiten &lt;<a class=\"__cf_email__\" data-cfemail=\"38524f54784b5d5b57565c55574e5d165b5755\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;</span><br/><span class=\"co1\">%% Hofstadter Q Sequence for Rosetta Code</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>hofstadter<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">MAX</span><span class=\"sy1\">,</span> <span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">flip</span><span class=\"br0\">(</span><span class=\"re5\">V2</span><span class=\"sy1\">,</span> <span class=\"re5\">V1</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">V1</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">V2</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">flip</span><span class=\"br0\">(</span><span class=\"re5\">_V2</span><span class=\"sy1\">,</span> <span class=\"re5\">_V1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">list_terms</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">list_terms</span><span class=\"br0\">(</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~w, \"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">list_terms</span><span class=\"br0\">(</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">hofstadter</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Flips</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"The first ten terms are: \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">list_terms</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"The 1000'th term is ~w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"nu0\">999</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Number of flips: ~w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Flips</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">hofstadter</span><span class=\"br0\">(</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy1\">,</span> <span class=\"re5\">Flips</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Qn1</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Qn</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"re5\">Qn1</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">-</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">hofstadter</span><span class=\"br0\">(</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">set</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Qn</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Flips</span> <span class=\"sy3\">+</span> <span class=\"re3\">flip</span><span class=\"br0\">(</span><span class=\"re5\">Qn</span><span class=\"sy1\">,</span> <span class=\"re5\">Qn1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Tmp</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">set</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span>?<span class=\"re4\">MAX</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Acc</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/array.html\"><span class=\"kw5\">array</span></a>:<span class=\"re3\">set</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Tmp</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">hofstadter</span><span class=\"br0\">(</span>?<span class=\"re4\">MAX</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM HOFSTADER_Q<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>DIM Q%[10000]<br/>\u00a0<br/>PROCEDURE QSEQUENCE(Q,FLAG%-&gt;SEQ$)<br/>! if FLAG% is true accumulate sequence in SEQ$<br/>! (attention to string var lenght=255)<br/>! otherwise calculate values in Q%[] only<br/>\u00a0<br/>  LOCAL N<br/>  Q%[1]=1<br/>  Q%[2]=1<br/>  SEQ$=\"1 1\"<br/>  IF NOT FLAG% THEN Q=NUM END IF<br/>  FOR N=3 TO Q DO<br/>    Q%[N]=Q%[N-Q%[N-1]]+Q%[N-Q%[N-2]]<br/>    IF FLAG% THEN SEQ$=SEQ$+STR$(Q%[N]) END IF<br/>  END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  NUM=10000<br/>  QSEQUENCE(10,TRUE-&gt;SEQ$)<br/>  PRINT(\"Q-sequence(1..10)\u00a0: \";SEQ$)<br/>  QSEQUENCE(1000,FALSE-&gt;SEQ$)<br/>  PRINT(\"1000th number of Q sequence\u00a0: \";Q%[1000])<br/>  FOR N=2 TO NUM DO<br/>    IF Q%[N]&lt;Q%[N-1] THEN NN+=1 END IF<br/>  END FOR<br/>  PRINT(\"Number of Q(n)&lt;Q(n+1) for n&lt;=10000\u00a0: \";NN)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 18, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> memoize f <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> cache <span class=\"sy0\">=</span> System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span>.<span class=\"me1\">Dictionary</span><span class=\"sy0\">&lt;</span>_,_<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">match</span> cache.<span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        | <span class=\"br0\">(</span><span class=\"kw1\">true</span>, v<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> v<br/>        | <span class=\"br0\">(</span>_, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> f x<br/>            cache.<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> v<br/>            v<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> q <span class=\"sy0\">=</span> memoize <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;</span> 3I <span class=\"kw1\">then</span> 1I<br/>    <span class=\"kw1\">else</span> q <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> q <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> 1I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> q <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> q<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> 2I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>printf <span class=\"st0\">\"q(1 .. 10) =\"</span><span class=\"sy0\">;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>q <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"\u00a0%A\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>1I .. 10I<span class=\"br0\">]</span><br/>printfn <span class=\"st0\">\"\"</span><br/>printfn <span class=\"st0\">\"q(1000) =\u00a0%A\"</span> <span class=\"br0\">(</span>q 1000I<span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"descents(100000) =\u00a0%A\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sum</span>  <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">init</span> <span class=\"nu0\">100000</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> q<span class=\"br0\">(</span>bigint<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> q<span class=\"br0\">(</span>bigint<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">( scratchpad )\u00a0: next ( seq -- newseq )<br/>dup 2 tail* over length [ swap - ] curry map<br/>[ dupd swap nth ] map 0 [ + ] reduce suffix\u00a0;<br/>\u00a0<br/>( scratchpad ) { 1 1 } 1000 [ next ] times  dup 10 head .  999 swap nth .<br/>{ 1 1 2 3 3 4 5 5 6 6 }<br/>502</pre>"}, {"lang": "Fortran", "loc": 32, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">Calculate the Hofstadter Q-sequence, using a big array rather than recursion.</span><br/>      <span class=\"kw3\">INTEGER</span> ENUFF<br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>ENUFF <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">INTEGER</span> Q<span class=\"br0\">(</span>ENUFF<span class=\"br0\">)</span>\t<span class=\"co1\">!Lots of memory these days.</span><br/>\u00a0<br/>      Q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Initial values as per the definition.</span><br/>      Q<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      Q<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">123456789</span><span class=\"co1\">!This will surely cause trouble!</span><br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>,ENUFF\t<span class=\"co1\">!For values beyond the second,</span><br/>        Q<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Q<span class=\"br0\">(</span>I <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>I <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">(</span>I <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>I <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Reach back according to the last two values.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/><span class=\"co1\">Cast forth results as per the specification.</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> Q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Should be 1 1 2 3 3 4 5 5 6 6...</span><br/>    <span class=\"nu0\">1</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"First ten values:\"</span>,10I2<span class=\"br0\">)</span>\t<span class=\"co1\">!Known to be one-digit numbers.</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Q(1000) =\"</span>,Q<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Should be 502.</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span> ENUFF,<span class=\"kw4\">COUNT</span><span class=\"br0\">(</span>Q<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span>ENUFF<span class=\"br0\">)</span> &lt; Q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>ENUFF <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Please don't create a temporary array!</span><br/>    <span class=\"nu0\">3</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Count of those elements 2:\"</span>,I0,<br/>     <span class=\"nu0\">1</span> <span class=\"st0\">\" which are less than their predecessor: \"</span>,I0<span class=\"br0\">)</span>\t<span class=\"co1\">!Should be 49798.</span><br/><span class=\"co1\">Curry favour by allowing enquiries.</span><br/>   <span class=\"nu0\">10</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span> ENUFF<br/>   <span class=\"nu0\">11</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Nominate an index (in 1:\"</span>,I0,<span class=\"st0\">\"): \"</span>,$<span class=\"br0\">)</span>\t<span class=\"co1\">!Obviously, the $ says don't start a new line.</span><br/>      READ <span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy0\">*</span>,<span class=\"kw1\">END</span> <span class=\"sy0\">=</span> <span class=\"nu0\">999</span>, <span class=\"kw1\">ERR</span> <span class=\"sy0\">=</span> <span class=\"nu0\">999</span><span class=\"br0\">)</span> I\t<span class=\"co1\">!Ask for a number, with precautions.</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">GT</span>.0 <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> I.<span class=\"me1\">LE</span>.<span class=\"me1\">ENUFF</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A good number, but, within range?</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">12</span><span class=\"br0\">)</span> I,Q<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Yes. Reveal the requested value.</span><br/>   <span class=\"nu0\">12</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Q(\"</span>,I0,<span class=\"st0\">\") = \"</span>,I0<span class=\"br0\">)</span>\t<span class=\"co1\">!This should do.</span><br/>        <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t\t<span class=\"co1\">!And ask again.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">! WHILE read(5,*) i &amp; i &gt; 0 &amp; i &lt; enuff DO write(6,*) \"Q(\",i,\")=\",Q(i);</span><br/><span class=\"co1\">Closedown.</span><br/>  <span class=\"nu0\">999</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Bye.\"</span><br/>      <span class=\"kw1\">END</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 46, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">var</span> m <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> initMap<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    m<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    m<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> q<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> r <span class=\"sy2\">=</span> m<span class=\"sy1\">[</span>n<span class=\"sy1\">];</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">=</span> q<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span>q<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span> <span class=\"sy3\">+</span> q<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span>q<span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>        m<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> r<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    initMap<span class=\"sy1\">()</span><br/>    <span class=\"co1\">// task</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        showQ<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// task</span><br/>    showQ<span class=\"sy1\">(</span><span class=\"nu0\">1000</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// extra credit</span><br/>    count<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu1\">1e5</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        qn <span class=\"sy2\">:=</span> q<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> qn &lt; p <span class=\"sy1\">{</span><br/>            count<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        p <span class=\"sy2\">=</span> qn<br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"count:\"</span><span class=\"sy1\">,</span> count<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// extra credit</span><br/>    initMap<span class=\"sy1\">()</span><br/>    showQ<span class=\"sy1\">(</span><span class=\"nu1\">1e6</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> showQ<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Q(%d) =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> q<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">qSequence <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> qq <span class=\"kw1\">where</span><br/>  qq <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> g <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <br/>  g n <span class=\"sy0\">=</span> qq <span class=\"sy0\">!!</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> qq <span class=\"sy0\">!!</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> qq <span class=\"sy0\">!!</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> qq <span class=\"sy0\">!!</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Output:</span><br/><span class=\"sy0\">*</span>Main<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> qSequence<span class=\"sy0\">,</span> qSequence <span class=\"sy0\">!!</span> <span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">502</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0.00</span> secs<span class=\"sy0\">,</span> <span class=\"nu0\">525044</span> bytes<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 39, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>V <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>V <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">if</span> Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">~=</span> V<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Assertion failure for position \"</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span><br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"Q(1 to\u00a0%d) - verified.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,*</span>V<span class=\"br0\">)</span><br/>\u00a0<br/>q <span class=\"sy1\">:=</span> Q<span class=\"br0\">(</span>n <span class=\"sy1\">:=</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>v <span class=\"sy1\">:=</span> <span class=\"nu0\">502</span> <br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"Q[%d]=%d -\u00a0%s.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>n<span class=\"sy1\">,</span>v<span class=\"sy1\">,</span><span class=\"kw1\">if</span> q <span class=\"sy1\">=</span> v <span class=\"kw1\">then</span> <span class=\"st0\">\"verified\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"failed\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>invcount <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>n <span class=\"sy1\">:=</span> <span class=\"nu0\">100000</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">if</span> Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> Q<span class=\"br0\">(</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      printf<span class=\"br0\">(</span><span class=\"st0\">\"Q(%d)=%d &lt; Q(%d)=%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>Q<span class=\"br0\">(</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      invcount <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span><br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"There were\u00a0%d inversions in Q up to\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>invcount<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">procedure</span> Q<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">#: Hofstader Q sequence</span><br/><span class=\"kw2\">static</span> S<br/><span class=\"kw1\">initial</span> S <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> q <span class=\"sy1\">:=</span> S<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> q<br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>   q <span class=\"sy1\">:=</span> Q<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> Q<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>S <span class=\"sy1\">=</span> n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>S<span class=\"sy1\">,</span>q<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> q<br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <br/>      <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy1\">,</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">   Qs=:<span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>   Q=: verb define<br/>     <span class=\"kw2\">n</span>=. &gt;./,<span class=\"kw2\">y</span><br/>     <span class=\"kw1\">while.</span> <span class=\"kw2\">n</span>&gt;:#Qs <span class=\"kw1\">do.</span><br/>       Qs=: Qs,+/<span class=\"sy0\">(</span>-<span class=\"nu0\">_2</span>{.Qs<span class=\"sy0\">)</span>{Qs <br/>     <span class=\"kw1\">end.</span><br/>     <span class=\"kw2\">y</span>{Qs<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 46, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> HofQ <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> q = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">{</span><br/>\t\tput<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tput<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nUses = <span class=\"kw2\">new</span> <span class=\"kw3\">int</span><span class=\"br0\">[</span><span class=\"nu0\">100001</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"co1\">//not part of the task</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">int</span> Q<span class=\"br0\">(</span><span class=\"kw3\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tnUses<span class=\"br0\">[</span>n<span class=\"br0\">]</span>++<span class=\"sy0\">;</span><span class=\"co1\">//not part of the task</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>q.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">return</span> q.<span class=\"me1\">get</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">int</span> ans = Q<span class=\"br0\">(</span>n - Q<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + Q<span class=\"br0\">(</span>n - Q<span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tq.<span class=\"me1\">put</span><span class=\"br0\">(</span>n, ans<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> ans<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Q(\"</span> + i + <span class=\"st0\">\") = \"</span> + Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">int</span> last = <span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"co1\">//value for Q(10)</span><br/>\t\t<span class=\"kw3\">int</span> count = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">11</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100000</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw3\">int</span> curr = Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>curr <span class=\"sy0\">&lt;</span> last<span class=\"br0\">)</span> count++<span class=\"sy0\">;</span><br/>\t\t\tlast = curr<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i == <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Q(1000) = \"</span> + curr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Q(i) is less than Q(i-1) for i &lt;= 100000 \"</span> + count + <span class=\"st0\">\" times\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//Optional stuff below here</span><br/>\t\t<span class=\"kw3\">int</span> maxUses = <span class=\"nu0\">0</span>, maxN = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>nUses.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>nUses<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> maxUses<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tmaxUses = nUses<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tmaxN = i<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Q(\"</span> + maxN + <span class=\"st0\">\") was called the most with \"</span> + maxUses + <span class=\"st0\">\" calls\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 19, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> hofstadterQ <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">var</span> memo <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">var</span> Q    <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> memo<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> result <span class=\"sy0\">!==</span> <span class=\"st0\">'number'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         result  <span class=\"sy0\">=</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         memo<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> Q<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'Q('</span><span class=\"sy0\">+</span> i <span class=\"sy0\">+</span><span class=\"st0\">') = '</span> <span class=\"sy0\">+</span> hofstadterQ<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'Q(1000) = '</span> <span class=\"sy0\">+</span> hofstadterQ<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># For n&gt;=2, Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2))<br/>def Q:<br/>  def Q(n):<br/>    n as $n<br/>    | (if . == null then [1,1,1] else . end) as $q<br/>    | if $q[$n]\u00a0!= null then $q<br/>      else <br/>        $q | Q($n-1) as $q1<br/>        | $q1 | Q($n-2) as $q2<br/>        | $q2 | Q($n - $q2[$n - 1]) as $q3   # Q(n - Q(n-1))<br/>        | $q3 | Q($n - $q3[$n - 2]) as $q4   # Q(n - Q(n-2))<br/>        | ($q4[$n - $q4[$n-1]] + $q4[$n - $q4[$n -2]]) as $ans<br/>        | $q4 | setpath( [$n]; $ans)<br/>      end\u00a0;<br/>\u00a0<br/>  . as $n | null | Q($n) | .[$n];<br/>\u00a0<br/># count the number of times Q(i) &gt; Q(i+1) for 0 &lt; i &lt; n<br/>def flips(n):<br/>  (reduce range(3; n) as $n <br/>    ([1,1,1]; . + [ .[$n - .[$n-1]] + .[$n - .[$n - 2 ]] ] )) as $q<br/>  | reduce range(0; n) as $i<br/>      (0; . + (if $q[$i] &gt; $q[$i + 1] then 1 else 0 end))\u00a0;<br/>\u00a0<br/># The three tasks: <br/>((range(0;11), 1000) | \"Q(\\(.)) = \\( . | Q)\"),<br/>\u00a0<br/>(100000 | \"flips(\\(.)) = \\(flips(.))\")</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"text highlighted_source\">function hofstQseq(n, typerst::Type=Int)<br/>    nmax = maximum(n)<br/>    r = Vector{typerst}(nmax)<br/>    r[1] = 1<br/>    if nmax \u2265 2 r[2] = 1 end<br/>    for i in 3:nmax<br/>        r[i] = r[i - r[i - 1]] + r[i - r[i - 2]]<br/>    end<br/>    return r[n]<br/>end<br/>\u00a0<br/>println(\"First ten elements of sequence: \", join(hofstQseq(1:10), \", \"))<br/>println(\"1000-th element: \", hofstQseq(1000))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">_</span>001<span class=\"br0\">)</span><br/>    q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    q<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">3</span>..<span class=\"nu0\">100</span><span class=\"sy0\">_</span>000<span class=\"br0\">)</span> q<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>n - q<span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> + q<span class=\"br0\">[</span>n - q<span class=\"br0\">[</span>n - <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"The first 10 terms are\u00a0: \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"${q[i]}  \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>The 1000th term is\u00a0: ${q[1000]}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> flips <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">100</span><span class=\"sy0\">_</span>000<span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> q<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> q<span class=\"br0\">[</span>it - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The number of flips for the first 100,000 terms is\u00a0: $flips\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">Q\u00a0:= proc( n )<br/>        option remember, system;<br/>        if n = 1 or n = 2 then<br/>                1<br/>        else<br/>                thisproc( n - thisproc( n - 1 ) ) + thisproc( n - thisproc( n - 2 ) )<br/>        end if<br/>end proc:</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">Hofstadter[1] = Hofstadter[2] = 1;<br/>Hofstadter[n_Integer?Positive]\u00a0:= Hofstadter[n] = Block[{$RecursionLimit = Infinity},<br/>   Hofstadter[n - Hofstadter[n - 1]] + Hofstadter[n - Hofstadter[n - 2]]<br/>]</pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> Q = Qsequence<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>  <span class=\"co1\">%% zeros are used to pre-allocate memory, this is not strictly necessary but can significantly improve performance for large N</span><br/>  Q = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,N-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;  <br/>  <span class=\"kw1\">for</span> n=<span class=\"nu0\">3</span>:N<br/>    Q<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = Q<span class=\"br0\">(</span>n-Q<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>+Q<span class=\"br0\">(</span>n-Q<span class=\"br0\">(</span>n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span>; <br/><span class=\"kw1\">end</span>;  </pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">var q = @[1, 1]<br/>for n in 2 .. &lt;100_000: q.add q[n-q[n-1]] + q[n-q[n-2]]<br/>\u00a0<br/>echo q[0..9]<br/>assert q[0..9] == @[1, 1, 2, 3, 3, 4, 5, 5, 6, 6]<br/>\u00a0<br/>echo q[999]<br/>assert q[999] == 502<br/>\u00a0<br/>var lessCount = 0<br/>for n in 1 .. &lt;100_000:<br/>  if q[n] &lt; q[n-1]:<br/>    inc lessCount<br/>echo lessCount</pre>"}, {"lang": "Oberon-2", "loc": 38, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Hofstadter;<br/><span class=\"kw1\">IMPORT</span> <br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">,</span>count<span class=\"sy0\">,</span>q<span class=\"sy0\">,</span>prev<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>; <br/>  founds<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">100001</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Q<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> founds<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">CASE</span> n <span class=\"kw1\">OF</span><br/>        <span class=\"nu0\">1</span> .. <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <br/>            founds<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">ELSE</span>  founds<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>      <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> founds<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"kw1\">END</span> Q;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"coMULTI\">(* first ten numbers in the sequence *)</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span><br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"At \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"1000th value: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Q<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\u00a0<br/>  prev <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">100000</span> <span class=\"kw1\">DO</span><br/>    q <span class=\"sy0\">:=</span> Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">IF</span> q &lt; prev <span class=\"kw1\">THEN</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>    prev <span class=\"sy0\">:=</span> q<br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"terms less than the previous: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>count<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Hofstadter.<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: QSeqTask<br/>| q i |<br/>   ListBuffer newSize(100000) dup add(1) dup add(1) -&gt;q<br/>   0 3 100000 for: i [ <br/>      q add(q at(i q at(i 1-) -) q at(i q at(i 2 -) -) +) <br/>      q at(i) q at(i 1-) &lt; ifTrue: [ 1+ ]<br/>      ]<br/>   q left(10) println q at(1000) println println\u00a0; </pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">Q<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>Q<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>Q<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span>#Q<span class=\"sy0\">,</span>Q<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">=</span>Q<span class=\"br0\">[</span>n<span class=\"sy0\">-</span>Q<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>Q<span class=\"br0\">[</span>n<span class=\"sy0\">-</span>Q<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Q1<span class=\"sy0\">=</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>Q<span class=\"sy0\">,</span><span class=\"st0\">\"1..10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"First 10 terms: \"</span>Q1<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>Q1<span class=\"sy0\">==</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"nu1\">4</span><span class=\"sy0\">,</span> <span class=\"nu1\">5</span><span class=\"sy0\">,</span> <span class=\"nu1\">5</span><span class=\"sy0\">,</span> <span class=\"nu1\">6</span><span class=\"sy0\">,</span> <span class=\"nu1\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" (as expected)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" (in error)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"1000-th term: \"</span>Q<span class=\"br0\">[</span><span class=\"nu1\">1000</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>Q<span class=\"br0\">[</span><span class=\"nu1\">1000</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu1\">502</span><span class=\"sy0\">,</span><span class=\"st0\">\" (as expected)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" (in error)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 24, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> HofstadterQSequence <span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  limit <span class=\"sy3\">=</span> <span class=\"nu0\">100000</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  q<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">limit</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span> flips<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  q<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> limit <span class=\"kw1\">do</span><br/>    q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> q<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> q<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> q<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>q<span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  flips <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> limit <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; q<span class=\"br0\">[</span>i<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>      inc<span class=\"br0\">(</span>flips<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Flips: '</span><span class=\"sy1\">,</span> flips<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@Q</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@Q</span><span class=\"sy0\">,</span> <span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">100</span>_000<span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"First 10 terms: [@Q[1..10]]\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"Term 1000: $Q[1000]\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"Terms less than preceding in first 100k: \"</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Hofstadter <span class=\"br0\">{</span><br/>  <span class=\"kw1\">has</span> <span class=\"re0\">@!c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw2\">method</span> AT<span class=\"sy0\">-</span>POS <span class=\"br0\">(</span><span class=\"re0\">$me</span><span class=\"sy0\">:</span> Int <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">@!c</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$me</span><span class=\"br0\">[</span><span class=\"re0\">@!c</span><span class=\"sy0\">.</span><span class=\"me1\">elems</span><span class=\"sy0\">-</span><span class=\"re0\">$me</span><span class=\"br0\">[</span><span class=\"re0\">@!c</span><span class=\"sy0\">.</span><span class=\"me1\">elems</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span><br/>\t     <span class=\"re0\">$me</span><span class=\"br0\">[</span><span class=\"re0\">@!c</span><span class=\"sy0\">.</span><span class=\"me1\">elems</span><span class=\"sy0\">-</span><span class=\"re0\">$me</span><span class=\"br0\">[</span><span class=\"re0\">@!c</span><span class=\"sy0\">.</span><span class=\"me1\">elems</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">until</span> <span class=\"re0\">@!c</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"kw3\">exists</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@!c</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Hofstadter <span class=\"re0\">$Q</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"first ten: $Q[^10]\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"1000th: $Q[999]\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$count</span><span class=\"sy0\">++</span> <span class=\"kw1\">if</span> <span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"re0\">$_</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$Q</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span>  <span class=\"sy0\">^</span><span class=\"nu0\">99</span>_999<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"In the first 100_000 terms, $count terms are less than their preceding terms\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">sequence Q = {1,1}<br/>\u00a0<br/>function q(integer n)<br/>    integer l = length(Q)<br/>    while n&gt;l do<br/>        l += 1<br/>        Q &amp;= Q[l-Q[l-1]]+Q[l-Q[l-2]]<br/>    end while       <br/>    return Q[n]<br/>end function<br/>\u00a0<br/>{} = q(10)  -- (or collect one by one)<br/>printf(1,\"First ten terms:\u00a0%s\\n\",{sprint(Q[1..10])})<br/>printf(1,\"1000th:\u00a0%d\\n\",q(1000))<br/>printf(1,\"100,000th:\u00a0%d\\n\",q(100_000))<br/>integer n = 0<br/>for i=2 to 100_000 do<br/>    n += Q[i]&lt;Q[i-1]<br/>end for<br/>printf(1,\"Flips up to 100,000:\u00a0%d\\n\",{n})<br/>atom t0 = time()<br/>printf(1,\"100,000,000th:\u00a0%d (%3.2fs)\\n\",{q(100_000_000),time()-t0})</pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de q (N)<br/>   (cache '(NIL) N<br/>      (if (&gt;= 2 N)<br/>         1<br/>         (+<br/>            (q (- N (q (dec N))))<br/>            (q (- N (q (- N 2)))) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/* Hofstrader Q sequence for any \"n\". */<br/>\u00a0<br/>H: procedure options (main);  /* 28 January 2012 */<br/>   declare n fixed binary(31);<br/>\u00a0<br/>   put ('How many values do you want?\u00a0:');<br/>   get (n);<br/>\u00a0<br/>begin;<br/>   declare Q(n) fixed binary (31);<br/>   declare i fixed binary (31);<br/>\u00a0<br/>   Q(1), Q(2) = 1;<br/>   do i = 1 upthru n;<br/>      if i &gt;= 3 then Q(i) = ( Q(i - Q(i-1)) + Q(i - Q(i-2)) );<br/>      if i &lt;= 20 then put skip list ('n=' || trim(i), Q(i));<br/>   end;<br/>   put skip list ('n=' || trim(i), Q(i));<br/>end;<br/>end H;<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> q<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">int</span>: <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">\"n must be an int &gt;= 1\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw1\">return</span> q.<span class=\"me1\">seq</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">except</span> <span class=\"kw2\">IndexError</span>:<br/>        ans <span class=\"sy0\">=</span> q<span class=\"br0\">(</span>n - q<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + q<span class=\"br0\">(</span>n - q<span class=\"br0\">(</span>n - <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        q.<span class=\"me1\">seq</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> ans<br/>q.<span class=\"me1\">seq</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    first10 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>q<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">assert</span> first10 <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Q() value error(s)\"</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Q(n) for n = [1..10] is:\"</span><span class=\"sy0\">,</span> <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> first10<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> q<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">502</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Q(1000) value error\"</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Q(1000) =\"</span><span class=\"sy0\">,</span> q<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define t (make-hash))<br/>(hash-set! t 0 0)<br/>(hash-set! t 1 1)<br/>(hash-set! t 2 1)<br/>\u00a0<br/>(define (Q n)<br/>  (hash-ref! t n (\u03bb() (+ (Q (- n (Q (- n 1))))<br/>                         (Q (- n (Q (- n 2))))))))<br/>\u00a0<br/>(for/list ([i (in-range 1 11)]) (Q i))<br/>(Q 1000)<br/>\u00a0<br/>;; extra credit<br/>(for/sum ([i 100000]) (if (&lt; (Q (add1 i)) (Q i)) 1 0))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 33, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates the    Hofstadter  Q     sequence for any specified   N.       */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a b c d <span class=\"sy0\">.</span>                              <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> a==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> a==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> a=       <span class=\"nu0\">10</span>              <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> b==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> b==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> b=    -<span class=\"nu0\">1000</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> c==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> c==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> c=  -<span class=\"nu0\">100000</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> d==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> d==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> d= -<span class=\"nu0\">1000000</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>q<span class=\"sy0\">.</span>= <span class=\"nu0\">1</span>;                 ac=   <span class=\"kw6\">abs</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>              <span class=\"coMULTI\">/* [\u2191]  negative #'s don't show values.*/</span><br/><span class=\"kw1\">call</span> HofstadterQ  a<br/><span class=\"kw1\">call</span> HofstadterQ  b;   <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span>  <span class=\"kw6\">abs</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>th<span class=\"br0\">(</span>b<span class=\"br0\">)</span>      <span class=\"st0\">'value is:'</span>      <span class=\"kw4\">result</span>;          <span class=\"kw1\">say</span><br/><span class=\"kw1\">call</span> HofstadterQ  c<br/>downs= <span class=\"nu0\">0</span>;                      <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> ac-<span class=\"nu0\">1</span>;                      jm= j-<span class=\"nu0\">1</span><br/>                               downs= downs + <span class=\"br0\">(</span>q<span class=\"sy0\">.</span>j<span class=\"sy0\">&lt;</span>q<span class=\"sy0\">.</span>jm<span class=\"br0\">)</span><br/>                               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> downs  <span class=\"st0\">'terms are less then the previous term,'</span>    ac <span class=\"sy0\">||</span> th<span class=\"br0\">(</span>ac<span class=\"br0\">)</span>    <span class=\"st0\">'term is:'</span>     q<span class=\"sy0\">.</span>ac<br/><span class=\"kw1\">call</span> HofstadterQ  d;                     ad=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span>;             <span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The'</span>      ad <span class=\"sy0\">||</span> th<span class=\"br0\">(</span>ad<span class=\"br0\">)</span>        <span class=\"st0\">'term is'</span>           q<span class=\"sy0\">.</span>ad<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>HofstadterQ: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> q<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> ox     <span class=\"coMULTI\">/*get number to generate through.*/</span><br/>                                                       <span class=\"coMULTI\">/* [\u2191]   OX    is the same as X. */</span><br/>x= <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                                              <span class=\"coMULTI\">/*use the absolute value for  X. */</span><br/>w= <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                                           <span class=\"coMULTI\">/*use for right justified output.*/</span><br/>            <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> x                              <span class=\"coMULTI\">/* [\u2193]  use short\u2500circuit IF test*/</span><br/>            <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">if</span> q<span class=\"sy0\">.</span>j==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">do</span>;   jm1= j-<span class=\"nu0\">1</span>;              jm2= j-<span class=\"nu0\">2</span><br/>                                                  _1=  j - q<span class=\"sy0\">.</span>jm1;         _2= j - q<span class=\"sy0\">.</span>jm2<br/>                                                  q<span class=\"sy0\">.</span>j= q<span class=\"sy0\">.</span>_1  +  q<span class=\"sy0\">.</span>_2<br/>                                            <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> ox<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,w<span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>q<span class=\"sy0\">.</span>j,w<span class=\"br0\">)</span> <span class=\"coMULTI\">/*display the number if  OX &gt; 0. */</span><br/>            <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">return</span> q<span class=\"sy0\">.</span>x                                             <span class=\"coMULTI\">/*return the \u2502X\u2502th term to caller*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>th: <span class=\"kw1\">procedure</span>; x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'th st nd rd'</span>,<span class=\"nu0\">1</span>+x<span class=\"sy0\">//</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">//</span><span class=\"nu0\">100</span>%10<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">//</span><span class=\"nu0\">10</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>n = 20<br/>aList = list(n)<br/>aList[1] = 1<br/>aList[2] = 1<br/>for i = 1 to n<br/>    if i &gt;= 3 aList[i] = ( aList[i - aList[i-1]] + aList[i - aList[i-2]] ) ok<br/>    if i &lt;= 20 see \"n = \" + string(i) + \"\u00a0: \"+ aList[i] + nl ok<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"re1\">@cache</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">def</span> Q<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span>.<span class=\"kw2\">nil</span>?<br/>    <span class=\"kw1\">case</span> n<br/>    <span class=\"kw1\">when</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span> <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> = Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"re1\">@cache</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"first 10 numbers in the sequence: #{(1..10).map {|n| Q(n)}}\"</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"1000'th term: #{Q(1000)}\"</span> <br/>\u00a0<br/>prev = Q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>count = <span class=\"nu0\">0</span><br/><span class=\"nu0\">2</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">100</span>_000<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <br/>  q = Q<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  count <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> q <span class=\"sy0\">&lt;</span> prev <br/>  prev = q<br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"number of times in the first 100,000 terms where Q(i)&lt;Q(i-1): #{count}\"</span></pre>"}, {"lang": "Run BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">input \"How many values do you want?\u00a0:\";n<br/>dim Q(n)<br/>Q(1)\t= 1<br/>Q(2)\t= 1<br/>for i = 1 to n<br/>  if i &gt;= 3 then Q(i) = ( Q(i - Q(i-1)) + Q(i - Q(i-2)) )<br/>  if i &lt;= 20 then print \"n=\";using(\"####\",i);\" \";using(\"###\",Q(i))<br/>next i<br/>if i &gt; 20 then print \"n=\";using(\"####\",i);using(\"####\",Q(i))<br/>end<br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 27, "block": "<pre class=\"text highlighted_source\">fn hofq(q: &amp;mut Vec&lt;u32&gt;, x\u00a0: u32) -&gt; u32 {<br/>    let cur_len=q.len()-1;<br/>    let i=x as usize;<br/>    if i&gt;cur_len {<br/>        // extend storage<br/>        q.reserve(i+1);<br/>        for j in (cur_len+1)..(i+1) {<br/>            let qj=(q[j-q[j-1] as usize]+q[j-q[j-2] as usize]) as u32;<br/>            q.push(qj);<br/>        }<br/>    }<br/>    q[i]<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut q_memo: Vec&lt;u32&gt;=vec![0,1,1];<br/>    let mut q=|i| {hofq(&amp;mut q_memo, i)};<br/>    for i in 1..11 {<br/>        println!(\"Q({})={}\", i, q(i));<br/>    }<br/>    println!(\"Q(1000)={}\", q(1000));<br/>    let q100001=q(100_000); // precompute all<br/>    println!(\"Q(100000)={}\", q100000);<br/>    let nless=(1..100_000).fold(0,|s,i|{if q(i+1)&lt;q(i) {s+1} else {s}});<br/>    println!(\"Term is less than preceding term {} times\", nless);<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HofstadterQseq <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Q<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Q<span class=\"br0\">(</span>n-Q<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>+Q<span class=\"br0\">(</span>n-Q<span class=\"br0\">(</span>n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>i<span class=\"sy0\">=&gt;</span><span class=\"br0\">(</span>i,Q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>t<span class=\"sy0\">=&gt;</span>println<span class=\"br0\">(</span><span class=\"st0\">\"Q(\"</span>+t.<span class=\"sy0\">_</span>1+<span class=\"st0\">\") = \"</span>+t.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Q(\"</span>+<span class=\"nu0\">1000</span>+<span class=\"st0\">\") = \"</span>+Q<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 47, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define qc '#<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define filled <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define len <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; chicken scheme: vector-resize!</span><br/><span class=\"co1\">;; gambit: vector-append</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>extend-qc<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>new-len <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> len<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>new-qc <span class=\"br0\">(</span>make-vector new-len<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> copy <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n len<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>begin<br/>\t  <span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> new-qc n <span class=\"br0\">(</span>vector-ref qc n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span>copy <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> len new-len<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> qc new-qc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>q n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> filled len<span class=\"br0\">)</span> <span class=\"br0\">(</span>extend-qc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> n filled<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>begin<br/>\t<span class=\"br0\">(</span>vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> qc filled <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- filled <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- filled <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t  <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- filled <span class=\"br0\">(</span>q <span class=\"br0\">(</span>- filled <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set</span><span class=\"sy0\">!</span> filled <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> filled<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>vector-ref qc n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>display <span class=\"st0\">\"Q(1 .. 10): \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;; (print) behave differently regarding newline across compilers</span><br/>  <span class=\"br0\">(</span>display <span class=\"br0\">(</span>q i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>display <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>newline<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>display <span class=\"st0\">\"Q(1000): \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>display <span class=\"br0\">(</span>q <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>newline<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>display <span class=\"st0\">\"bumps up to 100000: \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>display<br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> i <span class=\"nu0\">100000</span><span class=\"br0\">)</span> s<br/>      <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>+ s <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>q i<span class=\"br0\">)</span> <span class=\"br0\">(</span>q <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>newline<span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 38, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: intHash is hash [integer] integer;<br/>\u00a0<br/>var intHash: qHash is intHash.value;<br/>\u00a0<br/>const func integer: q (in integer: n) is func<br/>  result<br/>    var integer: q is 1;<br/>  begin<br/>    if n in qHash then<br/>      q\u00a0:= qHash[n];<br/>    else<br/>      if n &gt; 2 then<br/>        q\u00a0:= q(n - q(pred(n))) + q(n - q(n - 2));<br/>      end if;<br/>      qHash @:= [n] q;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: n is 0;<br/>    var integer: less_than_preceding is 0;<br/>  begin<br/>    writeln(\"q(n) for n = 1 .. 10:\");<br/>    for n range 1 to 10 do<br/>      write(q(n) &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>    writeln(\"q(1000)=\" &lt;&amp; q(1000));<br/>    for n range 2 to 100000 do<br/>      if q(n) &lt; q(pred(n)) then<br/>        incr(less_than_preceding);<br/>      end if;<br/>    end for;<br/>    writeln(\"q(n) &lt; q(n-1) for n = 2 .. 100000: \" &lt;&amp; less_than_preceding);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">func Q<span class=\"br0\">(</span>n<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span><br/>          \u00a0: Q<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>Q<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"First 10 terms: #{ {|n| Q(n) }.map(1..10) }\"</span><br/>say <span class=\"st0\">\"Term 1000: #{Q(1000)}\"</span><br/>say <span class=\"st0\">\"Terms less than preceding in first 100k: #{2..100000-&gt;count{|i|Q(i)&lt;Q(i-1)}}\"</span></pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Index 0 is not used, but putting it in makes the code a bit shorter</span><br/><span class=\"kw1\">set</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">Qcache</span> <span class=\"br0\">{</span>Q:-<span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">Q</span> <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> Qcache<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span>= <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$Qcache</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> Qcache <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>Q<span class=\"br0\">(</span><span class=\"re0\">$n</span> - Q<span class=\"br0\">(</span><span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + Q<span class=\"br0\">(</span><span class=\"re0\">$n</span> - Q<span class=\"br0\">(</span><span class=\"re0\">$n</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$Qcache</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration code</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Q($i) == [expr {Q($i)}]\"</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># This runs very close to recursion limit...</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Q(1000) == [expr Q(1000)]\"</span><br/><span class=\"co1\"># This code is OK, because the calculations are done step by step</span><br/><span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw1\">expr</span> Q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">incr</span> count <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$q</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>Q<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Q(i)&lt;Q(i-1) for i <span class=\"es0\">\\[</span>2..100000<span class=\"es0\">\\]</span> is true $count times\"</span></pre>"}, {"lang": "VBScript", "loc": 29, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> q_sequence(n)<br/>\t<span class=\"kw4\">Dim</span> Q()<br/>\t<span class=\"kw4\">ReDim</span> Q(n)<br/>\tQ(1)=1\u00a0: Q(2)=1\u00a0: Q(3)=2<br/>\tless_precede = 0<br/>\t<span class=\"kw3\">For</span> i = 4 <span class=\"kw3\">To</span> n<br/>\t Q(i)=Q(i-Q(i-1))+Q(i-Q(i-2))<br/>\t <span class=\"kw3\">If</span> Q(i) &lt; Q(i-1) <span class=\"kw3\">Then</span><br/>\t \tless_precede = less_precede + 1<br/>\t <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.Write <span class=\"st0\">\"First 10 terms of the sequence: \"</span><br/>\t<span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 10<br/>\t\t<span class=\"kw3\">If</span> j &lt; 10 <span class=\"kw3\">Then</span><br/>\t\t\tWScript.StdOut.Write Q(j) &amp; <span class=\"st0\">\", \"</span><br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tWScript.StdOut.Write <span class=\"st0\">\"and \"</span> &amp; Q(j)<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.WriteLine<br/>\tWScript.StdOut.Write <span class=\"st0\">\"1000th term of the sequence: \"</span> &amp; Q(1000)<br/>\tWScript.StdOut.WriteLine<br/>\tWScript.StdOut.Write <span class=\"st0\">\"Number of times the member of the sequence is less than its preceding term: \"</span> &amp;_<br/>\t\tless_precede<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/>q_sequence(100000)<br/>\u00a0</pre>"}, {"lang": "uBasic/4tH", "loc": 21, "block": "<pre class=\"text highlighted_source\">Print \"First 10 terms of Q = \"\u00a0;<br/>For i = 1 To 10\u00a0: Print FUNC(_q(i));\" \";\u00a0: Next\u00a0: Print<br/>Print \"256th term = \";FUNC(_q(256))<br/>\u00a0<br/>End<br/>\u00a0<br/>_q Param(1)<br/>  Local(2)<br/>\u00a0<br/>  If <a class=\"__cf_email__\" data-cfemail=\"c8a988\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 3 Then Return (1)<br/>  If <a class=\"__cf_email__\" data-cfemail=\"b5d4f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 3 Then Return (2)<br/>\u00a0<br/>  @(0) = 1\u00a0: @(1) = 1\u00a0: @(2) = 2<br/>  <a class=\"__cf_email__\" data-cfemail=\"680b28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"f89ab8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 3 To <a class=\"__cf_email__\" data-cfemail=\"1574553824\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    @(<a class=\"__cf_email__\" data-cfemail=\"187a58\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = @(<a class=\"__cf_email__\" data-cfemail=\"127052\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - @(<a class=\"__cf_email__\" data-cfemail=\"4220026f73\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) + @(<a class=\"__cf_email__\" data-cfemail=\"224062\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> - @(<a class=\"__cf_email__\" data-cfemail=\"0c6e4c213e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>    If @(<a class=\"__cf_email__\" data-cfemail=\"e486a4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) &lt; @(<a class=\"__cf_email__\" data-cfemail=\"bedcfe938f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) Then <a class=\"__cf_email__\" data-cfemail=\"b7d4f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"0b684b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1<br/>  Next<br/>\u00a0<br/>Return (@(<a class=\"__cf_email__\" data-cfemail=\"dbba9bf6ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))</pre>"}, {"lang": "Visual FoxPro", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL p As Integer, i As Integer<br/>CLEAR<br/>p = 0<br/>? \"Hofstadter Q Sequence\"<br/>? \"First 10 terms:\"<br/>FOR i = 1 TO 10<br/>\t?? Q(i, @p)<br/>ENDFOR\t<br/>? \"1000th term:\", Q(1000, @p)<br/>? \"100000th term:\", q(100000, @p)<br/>? \"Number of terms less than the preceding term:\", p<br/>\u00a0<br/>FUNCTION Q(n As Integer, k As Integer) As Integer<br/>LOCAL i As Integer<br/>LOCAL ARRAY aq[n]<br/>aq[1] = 1<br/>IF n &gt; 1<br/>    aq[2] = 1<br/>ENDIF\t<br/>k = 0<br/>FOR i = 3 TO n<br/>    aq[i] = aq[i - aq[i-1]] + aq[i-aq[i-2]]<br/>    IF aq(i) &lt; aq(i-1)<br/>    \tk = k + 1 <br/>    ENDIF\t<br/>ENDFOR<br/>RETURN aq[n]<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9, IntOut=11;<br/>int  N, C, Q(100_001);<br/>[Q(1):= 1;  Q(2):= 1;  C:= 0;<br/>for N:= 3 to 100_000 do<br/>        [Q(N):= Q(N-Q(N-1)) + Q(N-Q(N-2));<br/>        if Q(N) &lt; Q(N-1) then C:= C+1;<br/>        ];<br/>for N:= 1 to 10 do<br/>        [IntOut(0, Q(N));  ChOut(0, ^ )];<br/>CrLf(0);<br/>IntOut(0, Q(1000));  CrLf(0);<br/>IntOut(0, C);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">const n = 0d100_000;<br/>q:=(n+1).pump(List.createLong(n+1).write); // (0,1,2,...,n) base 1<br/>q[1] = q[2] = 1;<br/>\u00a0<br/>foreach i in ([3..n]) { q[i] = q[i - q[i - 1]] + q[i - q[i - 2]] }<br/>\u00a0<br/>q[1,10].concat(\" \").println();<br/>println(q[1000]);<br/>\u00a0<br/>flip\u00a0:= 0;<br/>foreach i in (n){ flip += (q[i] &gt; q[i + 1]) }<br/>println(\"flips: \",flip);</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 18, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"First 10 terms of Q = \"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> s;<span class=\"st0\">\" \"</span>;: <span class=\"kw1\">NEXT</span> i: <span class=\"kw1\">PRINT</span> <br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> i=<span class=\"nu0\">1000</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"1000th term = \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> s<br/><span class=\"nu0\">50</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Term is less than preceding term \"</span>;c;<span class=\"st0\">\" times\"</span><br/><span class=\"nu0\">100</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM Qsequence subroutine</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">IF</span> i&lt;<span class=\"nu0\">3</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> s=<span class=\"nu0\">1</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1020</span> <span class=\"kw1\">IF</span> i=<span class=\"nu0\">3</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> s=<span class=\"nu0\">2</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">1030</span> <span class=\"kw1\">DIM</span> q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">LET</span> q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> q<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> q<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>=<span class=\"nu0\">2</span><br/><span class=\"nu0\">1050</span> <span class=\"kw1\">LET</span> c=<span class=\"nu0\">0</span><br/><span class=\"nu0\">1060</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">3</span> <span class=\"kw1\">TO</span> i<br/><span class=\"nu0\">1070</span> <span class=\"kw1\">LET</span> q<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=q<span class=\"br0\">(</span>j-q<span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>+q<span class=\"br0\">(</span>j-q<span class=\"br0\">(</span>j-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1080</span> <span class=\"kw1\">IF</span> q<span class=\"br0\">(</span>j<span class=\"br0\">)</span>&lt;q<span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> c=c+<span class=\"nu0\">1</span><br/><span class=\"nu0\">1090</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">1100</span> <span class=\"kw1\">LET</span> s=q<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">1110</span> <span class=\"kw1\">RETURN</span></pre>"}]}